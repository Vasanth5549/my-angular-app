
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, Component, EventEmitter, OnDestroy, OnInit, ViewChild } from "@angular/core";
import { BitmapImage, Color, ContentPresenter, EventArgs, FontWeights, Grid, GridLength, HeaderImageAlignment, HeaderImageListItem, iActivityConsideration, iButton, iCheckBox, iComboBox, iImage, iLabel, Image, iMultiSelectDropdown, iTab, iTabItem, iTextBox, iUpDownBox, KeyEventArgs, MouseButtonEventArgs, RadSelectionChangedEventArgs, ScrollViewer, SolidColorBrush, StackPanel, Stretch, Thickness, ToolTipService, Uri, UriKind, UserControl, VerticalAlignment } from "epma-platform/controls";
import DateTime, { DateTimeKind } from "epma-platform/DateTime";
import { ObjectHelper } from "epma-platform/helper";
import { AppDialogEventargs, AppDialogResult, ChildWindow, ChildWizardCloseEventargs, CListItem, ContentControl, CultureInfo, Double, Enum, HtmlPage,  IEnumerable, Int32, IProfileProp, List, ObservableCollection, Random, SelectionChangedEventArgs, TimeZoneInfo, Visibility, WindowButtonType } from "epma-platform/models";
import { AppActivity, AppLoadService, ContextManager, Convert, iMessageBox, MessageBoxButton, MessageBoxResult, MessageBoxType, MessageEventArgs, ProcessRTE, ProfileFactoryType, StringBuilder } from "epma-platform/services";
import { AppSessionInfo, ClerkFormViewDeftBehaviour, ContextInfo, PatientContext } from "src/app/lorappcommonbb/utilities/globalvariable";
import { BSAFormulaConfigData, PrescribingConfigData } from "src/app/lorappslprofiletypes/medication";
import { ActivityTypes, ConflictIcons, DoseCalculation, ProblemObject } from "../model/common";
import { Common, MultiRouteEvents, OsValidation } from "../utilities/common";
import { CActionTrigerredFrom, CConstants, ConstDurationUOM, Conversion, DoseTypeCode, InfusionTypesCode, InfusionVolume, MedImage, MedImages, PrescribeSource, PrescriptionTypes, Roundoff } from "../utilities/constants";
import { CommonFlags, FormviewerCommonData, QueryStringInfo } from "../utilities/globalvariable";
import { ConceptCodeData, ProfileData, UserPermissions } from "../utilities/profiledata";
import { IPPMABaseVM } from "../viewmodel/ippmabasevm";
import { PrescriptionItemVM } from "../viewmodel/PrescriptionItemVM";
import { medipresolvestepped } from "./medipresolvestepped";
import { Resource } from "../resource";
import { MedicationPrescriptionHelper } from "src/app/lorappmedicationcommonbb/utilities/medicationprescriptionhelper";
import { DrugProperty, GetDischargeDateCompletedEventArgs, GetFormViewControlsCompletedEventArgs, TechValidatedItem } from "src/app/shared/epma-platform/soap-client/ManagePrescriptionWS";
import { BasicDetailsVM }  from "../viewmodel/BasicDetailsVM";
import * as  BasicDetailsVM_Ref  from "../viewmodel/BasicDetailsVM";
import { frmAdminSlotTimes } from "./frmadminslottimes";
import { DoseUOMBaseDetails } from "src/app/shared/epma-platform/soap-client/IPPMAManagePrescriptionWS";
import { Environment } from "src/app/product/shared/models/Common";
import { CommonBB } from "src/app/lorappcommonbb/utilities/common";
import { FieldNames, InfusionTypeCode, ValueDomain } from "src/app/lorappmedicationcommonbb/utilities/constants";
import { LockedUsersDetails, MedicationCommonBB } from "src/app/lorappmedicationcommonbb/utilities/medicationcommonbb";
import { Control, DateChangedArgs, RoutedEventArgs, RoutedPropertyChangedEventArgs } from "src/app/shared/epma-platform/controls/Control";
import { CReqMsgGetDataItem, GetDataItemCompletedEventArgs, IPPMAPrescribableDefnWSSoapClient, IsAnyDrugContainGivenIngredientCompletedEventArgs,CResMsgGetDataItem, CResMsgIsAnyDrugContainGivenIngredient } from "src/app/shared/epma-platform/soap-client/IPPMAPrescribableDefnWS";

import * as Application from 'src/app/lorappcommonbb/amshelper';
import { FormViewForAdmin } from "./frmformviewforadmin";
import TimeSpan from "epma-platform/TimeSpan";
import * as IPPManagePrescSer from 'src/app/shared/epma-platform/soap-client/IPPMAManagePrescriptionWS';
import { CommonDomainValues, MedChartData } from "src/app/lorappmedicationcommonbb/utilities/globalvariable";
import { CSequentialHelper } from "../utilities/CSequentialHelper";
import { CommonSequentialHelper } from "../utilities/CommonSequentialHelper";
import { Busyindicator } from "src/app/lorappcommonbb/busyindicator";
import { DoseCalcVM } from "src/app/lorappmedicationcommonbb/viewmodel/DoseCalcVM";
import { FormViewerVM } from "../viewmodel/formviewervm";
import { AdminScheduleTime, AdminScheduleTimeVM } from "../viewmodel/adminscheduletimevm";
import { MedicationCommonProfileData } from "src/app/lorappmedicationcommonbb/utilities/profiledata";
import { PrescriptionHelper } from "../utilities/prescriptionhelper";
import { RequestandResultVM, ResultInputData } from "src/app/lorappmedicationcommonbb/viewmodel/discontinuecancelvm";
import { ReviewOutcomeVM } from "src/app/lorappmedicationcommonbb/viewmodel/reviewoutcomevm";
import { GridUnitType } from "src/app/shared/epma-platform/controls/GridExt";
import { GrdAdminstrativeTimesCols, ScheduleDetailsCols } from "src/app/lorappmedicationcommonbb/viewmodel/prescriptionitemdetailsvm";
import { AdminstrativeTimesVM } from "src/app/lorappmedicationcommonbb/viewmodel/adminstrativetimesvm";
import { RecordAdminVM } from "../viewmodel/RecordAdminVM";
import { Dictionary } from "epma-platform/dictionary";
import { PropertyChangedEventArgs } from "src/app/shared/epma-platform/controls/epma-tab/epma-tab.component";
import { CResMsgGetProblemByCriteria, GetProblemByCriteriaCompletedEventArgs } from "src/app/shared/epma-platform/soap-client/ManageProblemWS";
import { CConstants as MedCommonBBConstant } from 'src/app/lorappmedicationcommonbb/utilities/constants';
import { TitratedDoseCommonVM } from "src/app/lorappmedicationcommonbb/viewmodel/TitratedDoseDetailsCommonVM";
import { MonoGraphVM } from "src/app/lorappmedicationcommonbb/viewmodel/MonographVM";
import { TitratedScheduleDetails } from "../viewmodel/TitratedDoseDetailsVM";
import {Point, WizardType} from "src/app/shared/epma-platform/models/eppma-common-types";
import { MedDRCVM } from "../viewmodel/meddrcvm";
import { CResMsgGetPatientAllergies, GetPatientAllergiesCompletedEventArgs } from "src/app/shared/epma-platform/soap-client/ManageAllergyWS";
import { CResMsgGetPatientLeaveByPatDet, GetPatientLeaveByPatDetCompletedEventArgs } from "src/app/shared/epma-platform/soap-client/QueryInpatientWS";
import { ConditionalDose } from "../model/conditionaldose";
import { MultipleDoseDetail } from "../viewmodel/MultipleDoseDetail";
import { TechValidateVM } from "../viewmodel/TechValidateVM";
import { iDateTimePicker } from "src/app/shared/epma-platform/controls/epma-datetimepicker/epma-datetimepicker.component";
import { iTimeBox } from "src/app/shared/epma-platform/controls/epma-timebox/epma-timebox.component";
import { ConflictsVM } from "src/app/lorappmedicationcommonbb/viewmodel/conflictsvm";
//import { ACNode } from "src/app/shared/epma-platform/controls/iActivitityConsideration";
import { GridExtension, GridViewCell } from "src/app/shared/epma-platform/controls/epma-grid-helpers/grid-extension";
import { GridComponent } from "@progress/kendo-angular-grid";
import { FormviewerDisplayHelper } from "src/app/product/shared/convertor/medicationconverters.service";
import { UIElement } from "src/app/shared/epma-platform/controls/UIElement";
import { LaunchWizard } from "src/app/shared/epma-platform/models/launchwizard";
import * as ControlStyles from "../../shared/epma-platform/controls/ControlStyles";
import { StringComparison } from 'epma-platform/models'
import { frmFVFooter } from "../common/frmFVFooter";
import { iAppDialogWindow } from "src/app/shared/epma-platform/controls/iAppDialogWindow";
import { ACNode } from "src/app/shared/epma-platform/controls/epma-iactivityconsideration/epma-iactivityconsideration.component";
import { medconflicts } from "./medconflicts";
import { medFrmviewtechvalidate } from "./medfrmviewtechvalidate";
import { frmformviewForAdminConInfusions } from "./frmformviewforadminconinfusions";
import { meddrugindicationChild } from "./meddrugindicationchild";
//import { Multicomponent } from "../resource/Multicomponent.Designer";
import {Multicomponent} from "./multicomponent";
import { FormViewForAdminAppliance } from "./frmformviewforadminappliance";
import { frmformviewClerkinginfusions } from "./frmformviewclerkinginfusions";
import { frmviewInfClerkGasOxygn } from "./frmviewinfclerkgasoxygn";
import { TypeinFormViewAppliance } from "./frmformviewmedclrkappliance.component";
import { FormViewLeave } from "./frmformviewleave";
import { formViewIntermittent } from "./frmformViewIntermittent";
import { medDRC } from "./meddrc";
import { FormViewAppliance } from "./frmformviewappliance";
import { frmformviewForAdminPCAInfusions } from "./frmformviewForAdminPCAInfusions";
import { Binding, BindingMode } from "src/app/shared/epma-platform/controls/FrameworkElement";
import { FormViewOPDschg } from "./frmformviewopdschg";
import { FormViewForAdminOxygen } from "./frmformviewforadminoxygen";
import { FormViewMedClerk } from "./frmformviewmedclerk";
import { frmBasicFormViewer } from "./frmbasicformviewer";
import { frmWeekdays } from "./frmweekdays";

import {iMath as Math} from 'epma-platform/mathextension'
import { medrecordadmin } from "./medrecordadmin";
import { iSFS } from "src/app/shared/epma-platform/controls/epma-isfs/epma-isfs.component";
import { RecordAdmin } from "../resource/recordadmin.designer";
import { ReviewOutcome } from "src/app/lorappmedicationcommonbb/child/reviewoutcome";
import { medConditionalDose } from "./medconditionaldose";
import { ConditionalDosingVM } from "../viewmodel/conditionaldosevm";
import { medContConditionalDose } from "./medcontconditionaldose";
import { medresolvetitrated } from "./medresolvetitrated";

import { TypeinFormViewForAdmin } from "./typeinformviewforadmin";
import { TypeinFormViewLeave } from "./typeinformviewpatleave";
import { TypeinFormViewOPDschg } from "./Typeinformviewopdschg";
import { Typeinformviewmedclerk } from "./Typeinformviewmedclerk";
import { DoseCalculator } from "src/app/lorappmedicationcommonbb/child/dosecalculator";
import { medonbehalfof } from "src/app/lorappmedicationcommonbb/view/medonbehalfof";
import { BehaviorSubject } from "rxjs";
import { MedTitratedDoseView } from "src/app/lorappmedicationcommonbb/view/medtitrateddoseview";
import { DisplayPrescriptionLineItemPipe1 } from "src/app/product/shared/pipes/medicationconverters.pipe";
import { CommonService } from "src/app/product/shared/common.service";
var that;


@Component({
    selector: 'medFormViewer',
    templateUrl: './medformviewer.html',
    styleUrls: ['./medFormViewer.css'],
  })

export class medFormViewer extends iAppDialogWindow implements  OnInit, AfterViewInit, OnDestroy {
    override get DataContext() {
        return this.oResolveItem;
    }
    override set DataContext(value: any) {
        if (value) {
            this.oResolveItem = value;
        }
    }
        public CanCloseFormViewerWithSVValidation: boolean;
        private bIsLoaded: boolean;
        private bDrcLoad: boolean;
        public isMultiRouteOpenClose : boolean = false;
        blSafeBolus: boolean = false;
        oVM: IPPMABaseVM;
        oTempCurrDttm: DateTime;
        public objfrmFVFooter: frmFVFooter;
        private oResolveItem: PrescriptionItemVM;
        public frmViewBasic: UserControl;
        public frmViewTech: medFrmviewtechvalidate;
        public frmViewConflict: medconflicts;
        public frmViewMulticomponent: Multicomponent;
        public frmViewDRC: medDRC;
        public frmViewAdditional: frmBasicFormViewer; 
        public keepTabContent : boolean = false;
        public DOAutoScroll: boolean = false;
        objmedonbehalfof: medonbehalfof;
        public frmRecordAdmin: medrecordadmin;
        public static RefreshWardStockIcon: Function;
        public SetNonInfusionFormLoadedEvent = new EventEmitter();
    // public frm: frmAdminSlotTimes;
    // public frmweekdays: frmWeekdays;
       public startPresTimeSubscription;
       public objfrmFVFooterThat : frmFVFooter;

        grdAdminTimes : GridExtension = new GridExtension();
        isfrmfooterLoaded: boolean = false;
        isPopulateTabLoaded: boolean = false;
        populateTabLoadedEvent : BehaviorSubject<any> = new BehaviorSubject(null);
        @ViewChild('grdAdminTimesTempRef', { read: GridComponent, static: false }) set _grdAdminTimes(
          c: GridComponent
        ) {
          if (c) {
            this.grdAdminTimes.grid = c;
            this.grdAdminTimes.columns = c.columns;
            //this.grdAdminTimes.ItemsSourceData = c.data;
          }
        }
        ftbFormViewDetails_SelectionChanged_Func = (s,e)  => {
            Object.keys(that).forEach((prop) => (this[prop] = that[prop]));                                   
            if(this.objfrmFVFooter != null && this.objfrmFVFooterThat != null){
                this.objfrmFVFooter['cmdRemove'] = this.objfrmFVFooterThat['cmdRemove'];
                this.objfrmFVFooterThat = null;
            }            
            this.ftbFormViewDetails_SelectionChanged(s,e);
            that = this;
            //Object.keys(this).forEach((prop) => (that[prop] = this[prop]));
        };
        //public grdAdminTimes: iGrid;
    get oTxtProblem(): iTextBox {
        return ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
    }

    get iMultiRoute(): iMultiSelectDropdown {
        return ObjectHelper.CreateType<iMultiSelectDropdown>(this.frmViewBasic.FindName("iMultiRoute"), iMultiSelectDropdown);
    }

    get cmdLink(): iButton {
        return ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdLink"), iButton);
    }

    get cmdDoseCal(): iButton {
        return ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdDoseCal"), iButton);
    }

    get cmdRemove(): iButton {
        return ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdRemove"), iButton);
    }

    // get cmdFBChart(): iButton {
    //     return ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdFBChart"), iButton);
    // }

    get cmdObservationResults(): iButton {
        return ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdObservationResults"), iButton);
    }

    get cmdOnbehalfOf(): iButton {
        return ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdOnbehalfOf"), iButton);
    }

    get txtLowerDose(): iTextBox {
        return ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox);
    }

    get txtBoosterDose(): iTextBox {
        return ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox);
    }

    get txtBolus(): iTextBox {
        return ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox);
    }

    get txtVolume(): iTextBox {
        return ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox);
    }
    get txtInfusionRate(): iTextBox {
        return ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox);
    }

    get txtUpperDose(): iTextBox {
        return ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox);
    }

    get cboUOM(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox);
    }

    get cboRoute(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
    }

    get cbofrequency(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox);
    }

    get cboDosageForm(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox);
    }

    get cboStrength(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox);
    }

    get cboRsnForMod(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox);
    }

    get cboSite(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox);
    }

    get cboStationary(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox);
    }

    get cmdBrand(): iLabel {
        return ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("cmdBrand"), iLabel);
    }

    get chckIsMultiRoute(): iCheckBox {
        return ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chckIsMultiRoute"), iCheckBox);
    }

    get ContentCtrlMedResolveStepped(): ContentControl {
        return ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
    }

    get cboDoseType(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
    }

    get cboInfusion(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox);
    }
    get dtpStopDate(): iDateTimePicker {
        return ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker);
    }

    get iTimeStopDateTime(): iTimeBox {
        return ObjectHelper.CreateType<iTimeBox>(this.frmViewBasic.FindName("iTimeStopDateTime"), iTimeBox);
    }

    get lblStopDate(): iLabel {
        return ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblStopDate"), iLabel);
    }

    get udDuration(): iUpDownBox {
        return ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udDuration"), iUpDownBox);
    }

    get cboDuration(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDuration"), iComboBox);
    }

    get chkRecordAdmin(): iCheckBox {
        return ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chkForAdminOption1"), iCheckBox);
    }

    get udReviewafter(): iUpDownBox {
        return ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udReviewafter"), iUpDownBox);
    }

    get cboreviewAfterUOM(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboreviewAfterUOM"), iComboBox);
    }

    get lblReviewafter(): iLabel {
        return ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewafter"), iLabel);
    }

    get lblReviewAfterDate(): iLabel {
        return ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewAfterDate"), iLabel);
    }

    get lblReviewAfterComments(): iLabel {
        return ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewAfterComments"), iLabel);
    }

    get txtReviewAfterComments(): iTextBox {
        return ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtReviewAfterComments"), iTextBox);
    }

    get cmdReviewDetails(): iButton {
        return ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("cmdReviewDetails"), iButton);
    }

    get lblSupplyInst(): iLabel {
        return ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInst"), iLabel);
    }

    get cboDeliveryDevice(): iComboBox {
        return ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDeliveryDevice"), iComboBox);
    }
    get chckOngoing(): iCheckBox {
        return ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chckOngoing"), iCheckBox);
    }

    get dtpStartDate(): iDateTimePicker {
        return ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker);
    }

    get iTimeStartDateTime(): iTimeBox {
        return ObjectHelper.CreateType<iTimeBox>(this.frmViewBasic.FindName("iTimeStartDateTime"), iTimeBox);
    }

    get lblReviewcopiedose(): iLabel {
        return ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewcopieddoses"), iLabel);
    }

    get frm(): frmAdminSlotTimes {
        return ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes);
    }

    get frmweekdays(): frmWeekdays {
        return ObjectHelper.CreateType<frmWeekdays>(this.frmViewBasic.FindName("Weekdays"), frmWeekdays);
    }




    // private oTxtProblem: iTextBox;
    // private ContentCtrlMedResolveStepped: ContentControl;
    // public lblSupplyInst: iLabel;
    // public dtpStartDate: iDateTimePicker;
    // public iTimeStartDateTime: iTimeBox;
    // private cboDuration: iComboBox;
    // private udDuration: iUpDownBox;
    // private txtLowerDose: iTextBox;
    // private txtBoosterDose: iTextBox;
    // private txtBolus: iTextBox;
    // private txtVolume: iTextBox;
    // private txtInfusionRate: iTextBox;
    // private txtUpperDose: iTextBox;
    // private cboUOM: iComboBox;
    // private cboDoseType: iComboBox;
    // private cboInfusion: iComboBox;
    // private cboDeliveryDevice: iComboBox;
    // private iTimeStopDateTime: iTimeBox;
    // private dtpStopDate: iDateTimePicker;
    // private lblStopDate: iLabel;
    // private chkRecordAdmin: iCheckBox;
        private oRecordAdminTab: iTabItem;
    // private chckOngoing: iCheckBox;
    // private lblReviewcopiedose: iLabel;
    // private udReviewafter: iUpDownBox;
    // private cboreviewAfterUOM: iComboBox;
    // private lblReviewafter: iLabel;
    // private lblReviewAfterDate: iLabel;
    // private lblReviewAfterComments: iLabel;
    // private txtReviewAfterComments: iTextBox;
        public objItems: ObservableCollection<PrescriptionItemVM>;
        private RouteFormChanged: Function;
        public oResultVM: RequestandResultVM;
        public oReviewOutcomeVM: ReviewOutcomeVM;
        public frmForAdmin: FormViewForAdmin;
        objReviewOutcome: ReviewOutcome; 
        public ResetDRCTrafficIcon: ConflictIcons;
        public IsDRCCompleted: boolean = false;
        public objMsg: iMessageBox;
        bIsExistingItem: boolean;
        public IsValidationAsyncCallback: boolean;
        public IsWitnessNonMandatory: boolean;
        private IsProblemLoaded: boolean = false;
        public bIsTypeIn: boolean = false;
        public bMsgShown: boolean = false;
        public cbCallConflictHeaderUpdate: boolean = true;
        public bTechimage: boolean = true;
        public bBloodMsgShown: boolean = true;
        public isTechOkCheck: boolean = false;
        IsDoseUOMMand: boolean = false;
        isCancelClickedMultipleTimes: boolean = false;
        private oMultipleDoseDetailToFocus: MultipleDoseDetail;
    // private iMultiRoute: iMultiSelectDropdown;
    // private cboRoute: iComboBox;
    // private cbofrequency: iComboBox;
    // private cboDosageForm: iComboBox;
    // private cboStrength: iComboBox;
    // private cboRsnForMod: iComboBox;
        private cboModClerkReason: iComboBox;
    // private cboSite: iComboBox;
    // private cboStationary: iComboBox;
    // private cmdBrand: iLabel;
    // private chckIsMultiRoute: iCheckBox;
        errMessage: string = String.Empty;
        public oDefaultBasicDetails: DefaultBasicDetails;
        
        //Revisit Required
        /*
        public objResults: medrecentresultschild;
        */
        public omeddrugindicationChild: meddrugindicationChild;        
        public oChildWindow: ChildWindow;
    // private cmdLink: iButton ;
    //  private cmdRemove: iButton ; 
    //  private cmdDoseCal: iButton;
    //  private cmdObservationResults: iButton ; 
    //  private cmdFBChart: iButton ;
    //   private cmdReviewDetails: iButton ;
    //    private cmdOnbehalfOf: iButton;
        private IsRouteFormChanged: boolean = false;
        isTechVldLod: string = String.Empty;
        sSupplyInst: string = String.Empty;
        sDispInst: string = String.Empty;
        public MedsSequentialResolve: List<PrescriptionItemVM>;
        public objMulti: MultiRouteEvents;
        public objfrm: PrescriptionItemVM;
        oMedTitratedDoseView: MedTitratedDoseView; 
        private IsReviewIconClicked: boolean;
        private bIsShowMessage: boolean;
        BSABeforeChange: string = String.Empty;
        BSAWEightBeforeChange: string = String.Empty;
        BSAHeightBeforeChange: string = String.Empty;
        BSAIsEstimatedHeightbefore: boolean = false;
        BSAIsEstimatedWeightBefore: boolean = false;
        DoseCalc: DoseCalculator; //Revisit Required
        profile: ProfileFactoryType;
        public dOffset: number = -1;
        OmittedWarningDisplayed: boolean = false;
        ParacetamolAlreadyAdministeredWarning_Displayed: boolean = false;
        ParacetamolRecordadminOkClickBeingValidated: boolean = false;
        public DoseUOMBaseDetails: ObservableCollection<DoseUOMBaseDetails>;
        private TriggerDRCFromWeightHeight: boolean;

        private LayoutRoot: Grid;

        private ProxysfsWitnessedby : iSFS = null;
        private ProxychkNoWitness : iCheckBox = null;
        private ProxylblWitnessedBy : iLabel = null;
        private ProxytxtRecinfusionrate : iTextBox = null;
        private ProxycboInfusionRateUOM : iComboBox = null;        
        private ProxycboDoseUoMValue : iComboBox = null;
        private Proxybagvolumetext : iTextBox = null;
        private Proxycboflowratenumuom : iComboBox = null;
        private Proxycboflowratedenuom : iComboBox = null;
        private ProxycboRoute : iComboBox = null;
        private ProxycbobagUoMValue : iComboBox = null;               
        private ProxydtpAdminDate : iDateTimePicker = null;
        private ProxyRecExpiryDate : iDateTimePicker = null;
        private ProxytxtAdminDose : iTextBox = null;
        private ProxytxtRecBatchNo : iTextBox = null;        
        private ProxytxtRecFlowRate : iTextBox = null;  
        public PrescribeConfigLoaded = new EventEmitter();      

        
@ViewChild("LayoutRootTempRef", {read:Grid, static: false }) set _LayoutRoot(c: Grid){
if(c){ this.LayoutRoot = c; }
};
private brdHeader: ScrollViewer;
@ViewChild("brdHeaderTempRef", {read:ScrollViewer, static: false }) set _brdHeader(c: ScrollViewer){
if(c){ this.brdHeader = c; }
};
private LabelLayout: Grid;
@ViewChild("LabelLayoutTempRef", {read:Grid, static: false }) set _LabelLayout(c: Grid){
if(c){ this.LabelLayout = c; }
};
private lblDrugName: iLabel;
@ViewChild("lblDrugNameTempRef", {read:iLabel, static: false }) set _lblDrugName(c: iLabel){
if(c){ this.lblDrugName = c; }
};
private spDrugDetails: StackPanel;
@ViewChild("spDrugDetailsTempRef", {read:StackPanel, static: false }) set _spDrugDetails(c: StackPanel){
if(c){ this.spDrugDetails = c; }
};
private PrescribingConsideration: iActivityConsideration;
@ViewChild("PrescribingConsiderationTempRef", {read:iActivityConsideration, static: false }) set _PrescribingConsideration(c: iActivityConsideration){
if(c){ this.PrescribingConsideration = c; }
};
public ActivityData:any; 
private lblDRCdosetype: iLabel;
@ViewChild("lblDRCdosetypeTempRef", {read:iLabel, static: false }) set _lblDRCdosetype(c: iLabel){
if(c){ this.lblDRCdosetype = c; }
};
private cboDRCDosetype: iComboBox;
@ViewChild("cboDRCDosetypeTempRef", {read:iComboBox, static: false }) set _cboDRCDosetype(c: iComboBox){
if(c){ this.cboDRCDosetype = c; }
};
private lblHighRiskMsg: iLabel;
@ViewChild("lblHighRiskMsgTempRef", {read:iLabel, static: false }) set _lblHighRiskMsg(c: iLabel){
if(c){ this.lblHighRiskMsg = c; }
};
private lblIngredientWarning: iLabel;
@ViewChild("lblIngredientWarningTempRef", {read:iLabel, static: false }) set _lblIngredientWarning(c: iLabel){
if(c){ this.lblIngredientWarning = c; }
};
private R_Name: iImage;
@ViewChild("R_NameTempRef", {read:iImage, static: false }) set _R_Name(c: iImage){
if(c){ this.R_Name = c; }
};
private lblPrescribingNote: iLabel;
@ViewChild("lblPrescribingNoteTempRef", {read:iLabel, static: false }) set _lblPrescribingNote(c: iLabel){
if(c){ this.lblPrescribingNote = c; }
};
private spGPItemDetail: ContentPresenter;
@ViewChild("spGPItemDetailTempRef", {read:ContentPresenter, static: false }) set _spGPItemDetail(c: ContentPresenter){
if(c){ this.spGPItemDetail = c; }
};
public ftbFormViewDetails: iTab;
@ViewChild("ftbFormViewDetailsTempRef", {read:iTab, static: false }) set _ftbFormViewDetails(c: iTab){
if(c){ this.ftbFormViewDetails = c; }
};
private _contentLoaded: Boolean;
@ViewChild("_contentLoadedTempRef", {read:Boolean, static: false }) set __contentLoaded(c: Boolean){
if(c){ this._contentLoaded = c; }
};
public RootVisual: Control;
@ViewChild("RootVisualTempRef", {read:Control, static: false }) set _RootVisual(c: Control){
if(c){ this.RootVisual = c; }
};
        
        
        private InitializeFooterButtons(): void {
        // this.cmdLink = ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdLink"), iButton);
            if (this.cmdLink != null)
                this.cmdLink.Click  = (s,e) => { this.cmdLink_Click(s,e); } ;
        // this.cmdDoseCal = ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdDoseCal"), iButton);
            //Revisit Required
            
            if (this.cmdDoseCal != null)
                this.cmdDoseCal.Click  = (s,e) => { this.getRTEResultForDoseCalc(s,e); } ;
                
        // this.cmdRemove = ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdRemove"), iButton);
            if (this.cmdRemove != null)
                this.cmdRemove.Click  = (s,e) => { this.cmdRemove_Click(s,e); } ;
        // this.cmdFBChart = ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdFBChart"), iButton);
            // if (this.cmdFBChart != null) {
            //     this.cmdFBChart.Click  = (s,e) => { this.cmdFBChart_Click(s,e); } ;
            //     this.cmdFBChart.SetBinding(iButton.VisibilityProperty, ObjectHelper.CreateObject(new Binding(this.DataContext,"FormViewerDetails.BasicDetails.FBLinkVisible"), { Mode: BindingMode.TwoWay }));
            // }
        // this.cmdObservationResults = ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdObservationResults"), iButton);
            if (this.cmdObservationResults != null)
            {
                if (PatientContext.IPPMADU_P2) 
                {
                    this.cmdObservationResults.Visibility = Visibility.Visible;
                }
                else 
                {
                    this.cmdObservationResults.Visibility = Visibility.Collapsed;
                }    
                this.cmdObservationResults.Click  = (s,e) => { this.OnObservationClick(s,e); } ;
            }

        // this.cmdOnbehalfOf = ObjectHelper.CreateType<iButton>(this.objfrmFVFooter.FindName("cmdOnbehalfOf"), iButton);
            if(this.cmdOnbehalfOf != null)
            {
                if (String.Equals(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode, StringComparison.InvariantCultureIgnoreCase)) {
                    this.cmdOnbehalfOf.Visibility = Visibility.Visible;
                }
                else {
                    this.cmdOnbehalfOf.Visibility = Visibility.Collapsed;
                }
                if (this.cmdOnbehalfOf != null) {
                    this.cmdOnbehalfOf.Click  = (s,e) => { this.cmdOnbehalfOf_Click(s,e); } ;
                }
            }
            if (ProfileData.PrescribeConfig == null) {
                this.profile = new ProfileFactoryType();
                this.profile.OnProfileLoaded  = (s,e) => { this.PrescribeConfig_OnProfileLoaded(s,e); } ;
                this.profile.GetProfile<PrescribingConfigData>("VW_MEDICONFIG", "PRESCONFIG", ProfileFactoryType.Level.Organisation);
            }
        }
        
        PrescribeConfig_OnProfileLoaded(sender: Object, Result: IProfileProp): void {
            if (Result != null) {
                if (Result.Profile instanceof PrescribingConfigData) {
                    ProfileData.PrescribeConfig = ObjectHelper.CreateType<PrescribingConfigData>(Result.Profile, PrescribingConfigData);
                    this.PrescribeConfigLoaded.emit();  
                }
            }
        }
        public resKey = Resource.MedicationForm;
        public Styles = ControlStyles;
        constructor(private changeDetectorRef?:ChangeDetectorRef){
            super();
            that = this;
            this.objMulti = new MultiRouteEvents();
            
        }
    ngOnInit(): void {
        console.log("Medformviewer-Oninit")
    }
    public formviewerHeight;
    SetDynamicFormviewerHeight(){
        this.formviewerHeight = CommonService.setDynamicScrollviewerHeight();
        if(window.devicePixelRatio == 1){
            this.formviewerHeight = this.formviewerHeight < 510 ? 526 : this.formviewerHeight;
        }
        else if(window.devicePixelRatio == 1.25){
            this.formviewerHeight = this.formviewerHeight < 385 ? 385 : this.formviewerHeight;
        }
    }
    
        //public TempSelectedRowItem: PrescriptionItemVM; public TempCurrentMedications: ObservableCollection<PrescriptionItemVM>
        constructorImpl(SelectedRowItem: PrescriptionItemVM, CurrentMedications: ObservableCollection<PrescriptionItemVM>) {
            //moved  the below line to ngAfterviewinit
            // this.ftbFormViewDetails.PreviewSelectionChanged  = (s,e) => { this.ftbFormViewDetails_PreviewSelectionChanged(s,e); } ;
            this.bIsExistingItem = SelectedRowItem.FormViewerDetails.BasicDetails.IsExistingItem;
            this.objItems = CurrentMedications;
            this.oResolveItem = SelectedRowItem;
            if (this.oResolveItem != null && this.oResolveItem.bIsReprescribe && !this.oResolveItem.IsAddedToResolveGrid) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) {
                    CSequentialHelper.ClearSeqProperties(this.oResolveItem);
                }
            }
            if (this.oResolveItem != null) {
                this.oResolveItem.IsFormViewer_Loaded_Event_Completed = false;
                if (this.oResolveItem.ParentbaseVM != null) {
                    this.oResolveItem.ParentbaseVM.IsNonSequentialitem = false;
                }
            }
            if (!this.oResolveItem.IsConflictViewed)
                this.oResolveItem.IsConflictViewed = true;
            this.oResolveItem.IsDeactivateCtrlFocusChangedEvent  = (s,e) => { this.oResolveItem_IsDeactivateCtrlFocusChangedEvent(s); } ;
            this.oResolveItem.TriggerParacetamolWarningEvent  = (s,e) => { this.oResolveItem_DisplayParacetamolWarningMessage(s); } ;
            this.oResolveItem.IsParacetamolAdministered = null;
            this.oResolveItem.RouteorFormchangePresEvent  = (s,e) => { 
                Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
                this.RouteorFormchangeEvent(); } ;
            // this.oResolveItem.AuthoriseTVDisableEvent -= new PrescriptionItemVM.AuthoriseTVDisableDelegate(AuthoriseTVchangeEvent);
            this.oResolveItem.AuthoriseTVDisableEvent  = (s,e) => { this.AuthoriseTVchangeEvent(s); } ;
            // this.oResolveItem.AuthoriseTVMCIDisableEvent -= new PrescriptionItemVM.AuthoriseTVMCIDisableDelegate(AuthoriseTVMCIchangeEvent);
            this.oResolveItem.AuthoriseTVMCIDisableEvent  = (s,e) => { this.AuthoriseTVMCIchangeEvent(s); } ;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.AuthoriseTVDisableEvent  = (s,e) => { this.AuthoriseTVchgEvent(s); } ;
            // this.PrescribingConsideration.OnPopupOpen -= PrescribingConsiderationPopUp;
            //Moved the below 8 lines to ngAfterViewinit
            // this.PrescribingConsideration.OnPopupOpen  = (s,e) => { this.PrescribingConsiderationPopUp(s,e); } ;
            
            //  let bACNodeItmClickable: boolean = true;
            //  if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.InvariantCultureIgnoreCase)) {
            //      bACNodeItmClickable = false;
            //  }             
            //  if (bACNodeItmClickable) {
            //     this.PrescribingConsideration.OnNodeItemClick  = (s,e) => { this.ActivityConsideration_OnNodeItemClick(s); } ;
            //  }

            //Application.CommonBB.PatientBSADataCompletedEvent -= CommonBB_PatientBSADataCompletedEvent;
            CommonBB.PatientBSADataCompletedEvent  = (s,e) => { this.CommonBB_PatientBSADataCompletedEvent(s,e); } ;
            //Moved the below 4 lines to ngAfterViewinit
            // this.PrescribingConsideration.Visibility = Visibility.Visible;
            // this.PrescribingConsideration.AddSection("SectionConsideration", "Considerations", String.Empty, Resource.prescribedrugs.SectionConsideration_Tooltip);
            // this.PrescribingConsideration.AddSection("SectionAllergy", "Allergies/ADRs", String.Empty, Resource.prescribedrugs.SectionAllergy_Tooltip);
            // this.PrescribingConsideration.AddSection("SectionProblem", "Problems", String.Empty, Resource.prescribedrugs.SectionProblems_Tooltip);
            if (this.cboDRCDosetype != null) {
                // this.cboDRCDosetype.SelectionChanged -= cboDRCDosetype_SelectionChanged;
                this.cboDRCDosetype.SelectionChanged  = (s,e) => { this.cboDRCDosetype_SelectionChanged(s,e); } ;
            }
            if (this.oResolveItem != null) {
                this.oResolveItem.OnFormViewerControlFocus  = (s,e) => { this.oResolveItem_OnFormViewerControlFocus(); } ;
                // this.oResolveItem.OnHomeLeaveMsgFocus -= oResolveItem_OnHomeLeaveMsgFocus;
                this.oResolveItem.OnHomeLeaveMsgFocus  = (s,e) => { this.oResolveItem_OnHomeLeaveMsgFocus(); } ;
            }
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.ClerkSVRegimePartialDateUpdEvent = (s,e) => {this.BasicDetails_ClerkSVRegimePartialDateUpdEvent(s)};
                if (this.oResolveItem.FormViewerDetails.BasicDetails.FrmViewloadCurrentDTTM == DateTime.MinValue && String.Equals(this.oResolveItem.SourcePrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.FrmViewloadCurrentDTTM = Convert.ToDateTime(CommonBB.GetServerDateTime().ToString(CConstants.DateHMFormat));
                }
            }
            let IsSteppedDoseType: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.CurrentCultureIgnoreCase))) {
                IsSteppedDoseType = true;
            }
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.IsFormViewDataLoadedAfterGetPresItemDtls && IsSteppedDoseType && this.oResolveItem.ActionCode == ActivityTypes.Reorder) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsReorderStartDTTMBlankForDifEncounter && !String.IsNullOrEmpty(this.oResolveItem.SourcePrescriptionType) && String.Equals(this.oResolveItem.SourcePrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsReorderStartDTTMBlankForDifEncounter = false;
                    this.oResolveItem.formViewerDetails.BasicDetails.StopDate = DateTime.MinValue;
                    this.oResolveItem.formViewerDetails.BasicDetails.StopPrescriptionTime = DateTime.MinValue;
                }
                else if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.Completedate = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.Partialdate = false;
                }
                this.oResolveItem.IsFormViewDataLoadedAfterGetPresItemDtls = false;
            }
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecalculateEndDTTMInReordeSV && IsSteppedDoseType && (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.CurrentCultureIgnoreCase)) && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.UpdateSteppedDoseAdminTimes(false);
                this.oResolveItem.FormViewerDetails.BasicDetails.IsRecalculateEndDTTMInReordeSV = false;
                this.oResolveItem.bDRCConflictGeToAddtoResolve = false;
                this.oResolveItem.PerformDRC(this.oResolveItem);
            }
            if (String.Compare(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode) == 0) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsClinicallyVerifiedUserChecked && this.oResolveItem.FormViewerDetails.BasicDetails.IsClinicallyVerified) {
                    this.oResolveItem.IsClinicallyVerifyCommentsMandatory = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsClinicallyVerified = true;
                }
            }
            if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder != 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.CONTINUOUS || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.SINGLEDOSEVOLUME || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.FLUID)) {
                let TotalCountSequential = <List<number>>null;
                if (PatientContext.PrescriptionType == PrescriptionTypes.Inpatient) {
                    TotalCountSequential = CurrentMedications.Where(ototal => ototal.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder != 0
                        //&& (string.Compare(ototal.PrescriptionItemStatus, "MEDStatus3", StringComparison.CurrentCultureIgnoreCase) != 0)
                        && (
                        (String.Compare(ototal.PrescriptionItemStatus, "MEDStatus14", StringComparison.CurrentCultureIgnoreCase) == 0 
                        && String.IsNullOrEmpty(ototal.OperationMode)) 
                        || String.Compare(ototal.PrescriptionItemStatus, "MEDStatus14", StringComparison.CurrentCultureIgnoreCase) != 0)
                         && String.Compare(ototal.PrescriptionItemStatus, "MEDStatus2", StringComparison.CurrentCultureIgnoreCase) != 0
                     && ototal.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber
                         == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber).GroupBy(ototal => ototal.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber).Select(g => g.Count()).ToList();

                }
                else {
                    TotalCountSequential = CurrentMedications.Where(ototal => ototal.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder != 0
                                                  && (String.Compare(ototal.PrescriptionItemStatus, "MEDStatus3", StringComparison.CurrentCultureIgnoreCase) != 0)
                                                   && ((String.Compare(ototal.PrescriptionItemStatus, "MEDStatus14", StringComparison.CurrentCultureIgnoreCase) == 0 && String.IsNullOrEmpty(ototal.OperationMode)) || String.Compare(ototal.PrescriptionItemStatus, "MEDStatus14", StringComparison.CurrentCultureIgnoreCase) != 0)
                                                    && String.Compare(ototal.PrescriptionItemStatus, "MEDStatus2", StringComparison.CurrentCultureIgnoreCase) != 0
                                                && ototal.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber
                                                    == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber).GroupBy(ototal => ototal.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber).Select(g => g.Count()).ToList();
                }
                if (TotalCountSequential != null && TotalCountSequential.Count > 0 && this.oResolveItem.IsControlledDrug == '0' && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.Precatalog, StringComparison.OrdinalIgnoreCase) != 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq = TotalCountSequential[0];
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc = "{Sequential prescription #" + this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder + " of " + this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq + "}";
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq != this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder)
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem = Visibility.Collapsed;
                    else this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem = Visibility.Visible;
                }
                if (TotalCountSequential != null && TotalCountSequential.Count > 0 && this.oResolveItem.IsControlledDrug == '1' && this.oResolveItem.ActionCode != ActivityTypes.Reorder) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq = TotalCountSequential[0];
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc = "{Sequential prescription #" + this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder + " of " + this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq + "}";
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq != this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder)
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem = Visibility.Collapsed;
                    else this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem = Visibility.Visible;
                }
                if (TotalCountSequential != null && TotalCountSequential.Count > 0 && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.Precatalog, StringComparison.OrdinalIgnoreCase) == 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq = TotalCountSequential[0];
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc = "{Sequential prescription #" + this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder + " of " + this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq + "}";
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq != this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder)
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem = Visibility.Collapsed;
                    else this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem = Visibility.Visible;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > 1) {
                    this.oResolveItem.DisableDefaultSubSeqItems(false);
                }
                let sequentialPresitem = CurrentMedications.Where(c => c.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber && String.Compare(c.PrescriptionItemStatus, "MEDStatus3", StringComparison.CurrentCultureIgnoreCase) != 0 && ((String.Compare(c.PrescriptionItemStatus, "MEDStatus14", StringComparison.CurrentCultureIgnoreCase) == 0 && String.IsNullOrEmpty(c.OperationMode)) || String.Compare(c.PrescriptionItemStatus, "MEDStatus14", StringComparison.CurrentCultureIgnoreCase) != 0) && String.Compare(c.PrescriptionItemStatus, "MEDStatus2", StringComparison.CurrentCultureIgnoreCase) != 0 && c.FormViewerDetails.BasicDetails.Route != null && c.FormViewerDetails.BasicDetails.Route.Tag != null && c.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "1" && c.ItemSubType != CConstants.SUBTYPE_GAS);
                if (sequentialPresitem != null && sequentialPresitem.Count() > 0)
                    this.oResolveItem.MedsSequentialResolve = new ObservableCollection<PrescriptionItemVM>(sequentialPresitem);
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder;
            }
            else {
                if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.PrescriptionItemNumber > 0) {
                    let sequentialPresitem = CurrentMedications.Where(c => c.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.PrescriptionItemNumber && String.Compare(c.PrescriptionItemStatus, "MEDStatus3", StringComparison.CurrentCultureIgnoreCase) != 0 && ((String.Compare(c.PrescriptionItemStatus, "MEDStatus14", StringComparison.CurrentCultureIgnoreCase) == 0 && String.IsNullOrEmpty(c.OperationMode)) || String.Compare(c.PrescriptionItemStatus, "MEDStatus14", StringComparison.CurrentCultureIgnoreCase) != 0) && String.Compare(c.PrescriptionItemStatus, "MEDStatus2", StringComparison.CurrentCultureIgnoreCase) != 0);
                    if (sequentialPresitem != null && sequentialPresitem.Count() > 0)
                        this.oResolveItem.MedsSequentialResolve = new ObservableCollection<PrescriptionItemVM>(sequentialPresitem);
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.PrescriptionItemNumber;
                    if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential.Count > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential.forEach( (MRoutes)=> {
                            this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.ForEach(ReInsert => {
                                if (String.Compare(ReInsert.Value, MRoutes.Value, StringComparison.CurrentCultureIgnoreCase) == 0 && ReInsert.Tag != null && !String.IsNullOrEmpty(ReInsert.Tag.ToString()) && ReInsert.Tag.ToString() == "1") {
                                    ReInsert.IsSelected = true;
                                }
                            });
                        });
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0) {
                            let selectedrouteClistitem: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected == true).ToArray();
                            if (selectedrouteClistitem != null && selectedrouteClistitem.Count() > 0) {
                                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypeCode.CONTINUOUS || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypeCode.SINGLEDOSEVOLUME || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypeCode.FLUID))
                                    this.oResolveItem.FormViewerDetails.BasicDetails.Route = ObjectHelper.CreateObject(new CListItem(), { DisplayText: MedicationCommonBB.RouteName(selectedrouteClistitem), Value: MedicationCommonBB.RouteOID(selectedrouteClistitem), Tag: MedicationCommonBB.RouteTag(selectedrouteClistitem) });
                            }
                        }
                    }
                    else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential.Count > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0) {
                        for (let i: number = 0; i < this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential.Count; i++) {
                            let MRoutes : CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential[i];                       
                            let oRoute = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(c => c.Value == MRoutes.Value);
                            if (oRoute != null && oRoute.Count() > 0) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.Route = ObjectHelper.CreateObject(new CListItem(), { DisplayText: MRoutes.DisplayText, Value: MRoutes.Value, Tag: MRoutes.Tag });
                                break;
                            }
                        }
                    }
                    else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential.Value != null) {
                        let oRoute = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(c => c.Value == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential.Value);
                        if (oRoute != null && oRoute.Count() > 0) {
                            this.RouteFormChanged = (s,e) => {this.BasicDetails_RouteFormChangedEvent()};``
                            this.oResolveItem.FormViewerDetails.BasicDetails.RouteFormChangedEvent = this.RouteFormChanged;
                            this.oResolveItem.FormViewerDetails.BasicDetails.Route = ObjectHelper.CreateObject(new CListItem(), { DisplayText: this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential.DisplayText, Value: this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential.Value, Tag: this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential.Tag });
                        }
                    }
                    if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.CONTINUOUS || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.SINGLEDOSEVOLUME || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.FLUID) && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.SequentialItemOrder != 0) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi = Visibility.Visible;
                    }
                }
            }
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential == null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential = this.oResolveItem.FormViewerDetails.BasicDetails.Route;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_GAS) && this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions = Visibility.Collapsed;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_GAS)) {                        
                this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminMsg1Visible = Visibility.Collapsed;
            }
            this.oResolveItem.ePrescribeSource = PrescribeSource.None;
        // this.DataContext = this.oResolveItem;
            this.bIsLoaded = false;
            this.objMsg = ObjectHelper.CreateObject(new iMessageBox(), {
                Title: "Lorenzo - Manage prescription",
                MessageButton: MessageBoxButton.OK,
                IconType: MessageBoxType.Information
            });
            this.objMsg.MessageBoxClose  = (s,e) => { this.objMsg_MessageBoxClose(s,e); } ;
            this.bDrcLoad = false;
            //Moved the below lines to ngAfterviewinit
            //this.PopulateFormViewerFauxTab(this.oResolveItem.IsConflictClick);
            // if (this.frmViewBasic == null) {
            //     this.frmViewBasic = new UserControl();
            // }
            // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
            // if (this.oTxtProblem instanceof iTextBox) {
            //     this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
            //     this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
            // }
            // this.iMultiRoute = ObjectHelper.CreateType<iMultiSelectDropdown>(this.frmViewBasic.FindName("iMultiRoute"), iMultiSelectDropdown);
            // this.txtLowerDose = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox);
            // this.txtBoosterDose = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox);
            // this.txtBolus = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox);
            // this.txtVolume = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox);
            // this.txtInfusionRate = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox);
            // this.txtUpperDose = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox);
            // this.cboUOM = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox);
            // this.cboRoute = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
            // this.cbofrequency = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox);
            // this.cboDosageForm = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox);
            // this.cboStrength = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox);
            // this.cboRsnForMod = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox);
            // this.cboSite = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox);
            // this.cboStationary = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox);
            // this.cmdBrand = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("cmdBrand"), iLabel);
            // this.chckIsMultiRoute = ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chckIsMultiRoute"), iCheckBox);
            // if (this.frmViewBasic != null)
            //     this.frmViewBasic.Loaded  = (s,e) => { this.frmViewBasic_Loaded(s,e); } ;
            // if (this.cboRoute instanceof iComboBox) {
            //     if (String.IsNullOrEmpty(this.cboRoute.Text))
            //         this.cboRoute.Focus();
            //     this.cboRoute.SelectionChanged  = (s,e) => { this.cboRoute_SelectionChanged(s,e); } ;
            // }
            let IsMedicalGas: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS") == 0) {
                IsMedicalGas = true;
            }
            if (!IsMedicalGas && this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) == 0) {
                if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteChecked) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteComboVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteDropDownVisible = Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsRouteVisible = Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsRouteComboVisible = Visibility.Collapsed;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains('1') && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains('0')) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType = false;
                    }
                }
                if ((this.oResolveItem.ActionCode == ActivityTypes.Amend || this.oResolveItem.ActionCode == ActivityTypes.Reorder || this.oResolveItem.ActionCode == ActivityTypes.Prescribe) && this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteCheckedforAmend) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteChecked = true;
                }
                if ((this.oResolveItem.ActionCode == ActivityTypes.Amend || this.oResolveItem.ActionCode == ActivityTypes.Prescribe) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq != this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRoute = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableMultiRoute = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableMultiRouteChkBox = false;
                }
                else this.oResolveItem.FormViewerDetails.BasicDetails.IsenableMultiRoute = true;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? true : false;
            }
            else {
                if ((this.oResolveItem.ActionCode == ActivityTypes.Amend || this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq != this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRoute = false;
                }
                else this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRoute = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableMultiRoute = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteDropDownVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteComboVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsRouteComboVisible = Visibility.Visible;
            }            
            this.oResolveItem.SetQuantityState();
            if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Count > 0) {
                let IsInfusionRateSameProperty: boolean = false;
                if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value != InfusionTypesCode.CONTINUOUS && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value != InfusionTypesCode.SINGLEDOSEVOLUME && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value != InfusionTypesCode.FLUID)) {
                    IsInfusionRateSameProperty = true;
                }
                else if (this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsOxygen) {
                    IsInfusionRateSameProperty = true;
                }
                else if (this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS") == 0) {
                    IsInfusionRateSameProperty = true;
                }
                if (PatientContext.IsINFUSIONON && PatientContext.PrescriptionType == PrescriptionTypes.Clerking && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null) && ((String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID)) || (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA) == 0) || (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0)))) {
                    IsInfusionRateSameProperty = false;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.forEach( (ctrl)=> {
                    switch (ctrl) {
                        case "cboRoute":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableMultiRoute = false;
                            }
                            else {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRoute = false;
                            }
                            break;
                        case "cboDoseType":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = false;
                            if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage = false;
                            }
                            break;
                        case "Dose":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible == Visibility.Collapsed) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
                            }
                            break;
                        case "cboUOM":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory = false;
                            break;
                        case "cboAdminMethod":
                            if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod) {
                                if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible == Visibility.Visible && (this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod == null || (this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod != null && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod.Value)))) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = true;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = true;
                                }
                                else if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.IsPresItemIgnoreAdminMethod && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Where(s => s.Equals("Dose")).ToList().Count == 0) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = true;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = true;
                                }
                                else if (this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible == Visibility.Visible) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
                                }
                            }
                            else if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod && !this.oResolveItem.FormViewerDetails.BasicDetails.IsPresItemIgnoreAdminMethod) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
                            }
                            break;
                        case "cboDosageForm":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage = false;
                            break;
                        case "cboFrequency":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableFrequency = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableAsrequired = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnablePRNInst = false;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails != null) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails.isenablefrequency = false;
                            }
                            break;
                        case "chkPRN":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableAsrequired = false;
                            break;
                        case "txtAddComments":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableAdditionalcomments = false;
                            break;
                        case "txtProblem":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableProblemIndication = false;
                            break;
                        case "udDuration":
                        case "cboDuration":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration = false;
                            break;
                        case "cboStatType":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableStationeryType = false;
                            break;
                        case "cboSupplyInstruction":
                            if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.InvariantCultureIgnoreCase)) {
                                if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) && Convert.ToDouble(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) == 0) || this.oResolveItem.ActionCode == ActivityTypes.Reorder) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                                }
                                else {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                                }
                            }
                            else if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase)) && this.oResolveItem.ActionCode == ActivityTypes.Reorder) {
                                if (PatientContext.EncounterOid == this.oResolveItem.SourceEncounter) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                                }
                                else {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                                }
                            }
                            else {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                            }
                            break;
                        case "cboTreatToCon":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableTreatmentCont = false;
                            break;
                        case "txtQuantity":
                        case "cboQuantity":
                            if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && !(String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.CATALOGUEITEM) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.ACTUALMOIETY)) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsQuantityEnabled = true;
                            }
                            else {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsQuantityEnabled = false;
                            }
                            break;
                        case "cboAdmin":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableAdminInst = false;
                            break;
                        case "cboPRNInstruction":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnablePRNInst = false;
                            break;
                        case "cboInstalIns":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableInstalInst = false;
                            break;
                        case "udnIntervalInst":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableInterBwtInstalValue = false;
                            break;
                        case "cboIntervalInst":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableInterBwtInstalUoM = false;
                            break;
                        case "udnNumberofIns":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableNoOfInstal = false;
                            break;
                        case "cboSite":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsSiteEnabled = false;
                            break;
                        case "cboStrength":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableStrength = false;
                            break;
                        case "cboInfusion":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType = false;
                            }
                            break;
                        case "cboDeliveryDevice":
                        case "txtDeliverydevice":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableDeliverydevice = false;
                            break;
                        case "txtBoosterDose":
                        case "cboBoosterUOM":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableBoosterdose = false;
                            break;
                        case "txtMonitoringdevice":
                        case "cboMonitoringdeviceUOM":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableMoniteringperiod = false;
                            break;
                        case "cboFluid":
                        case "cmdfluid":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableFluid = false;
                            break;
                        case "txtVolume":
                        case "cboVolumeUOM":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableInfusionVolume = false;
                            break;
                        case "txtInfusionperiod":
                        case "cboinfustionPeriodUOM":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableInfusionPeriod = false;
                            break;
                        case "txtInfusionRate":
                        case "txtFlowRate":
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel = false;
                            break;
                        case "txtUpperInfusionRate":
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsEnableInfUpperRate = false;
                            break;
                        case "cboInfustionRateUOM":
                        case "cboUOMFlowrate":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                                if (IsInfusionRateSameProperty) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate = false;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel = false;
                                }
                                else {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom = false;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl = false;
                                }
                            }
                            break;
                        case "cboInfusionRateUOM":
                        case "cboUOMFlowrate1":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                                if (IsInfusionRateSameProperty) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate = false;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel = false;
                                }
                                else this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
                            }
                            break;
                        case "txtLumen":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableInfusionLumen = false;
                            break;
                        case "txtBolus":
                        case "cboBolusUOM":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableBolus = false;
                            break;
                        case "txtLockoutPeriod":
                        case "cboLockoutPeriodUOM":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableLockoutPeriod = false;
                            break;
                        case "txtMaxDose":
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableMaxDose = false;
                            break;
                        case "cboconcentration":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcenEnabled = false;
                            break;
                        case "txtsaturationrange1":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableTargetsaturation = false;
                            break;
                        case "txtsaturationrange2":
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableTargetsaturation = false;
                            break;
                        default:
                            break;
                    }
                });
            }
            this.RouteFormChanged = (s,e) => {this.BasicDetails_RouteFormChangedEvent()};
            if (this.oResolveItem != null) {
                this.oResolveItem.RouteorFormchangeEvent  = (s,e) => { 
                    Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
                    this.RouteorFormchangeEvent(); } ;
            }
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.OrdersetSequence != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible = Visibility.Collapsed;
            }
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible = Visibility.Collapsed;
            }
        }
       async ConstructorAfterViewInit(){
            this.ftbFormViewDetails.PreviewSelectionChanged  = (s,e) => { 
                Object.keys(that).forEach((prop) => (this[prop] = that[prop])); 
                this.ftbFormViewDetails_PreviewSelectionChanged(s,e); 
                that = this;} ;
        this.PrescribingConsideration.OnPopupOpen  = (s,e) => { this.PrescribingConsiderationPopUp(s,e); } ;
        let bACNodeItmClickable: boolean = true;
        this.CheckConfigstatneryExist();
        if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.InvariantCultureIgnoreCase)) {
            bACNodeItmClickable = false;
        }             
        if (bACNodeItmClickable) {
            this.PrescribingConsideration.OnNodeItemClick  = (s,e) => { this.ActivityConsideration_OnNodeItemClick(s); } ;
        }

        this.PrescribingConsideration.Visibility = Visibility.Visible;
        this.PrescribingConsideration.AddSection("SectionConsideration", "Considerations", String.Empty, Resource.prescribedrugs.SectionConsideration_Tooltip);
        this.PrescribingConsideration.AddSection("SectionAllergy", "Allergies/ADRs", String.Empty, Resource.prescribedrugs.SectionAllergy_Tooltip);
        this.PrescribingConsideration.AddSection("SectionProblem", "Problems", String.Empty, Resource.prescribedrugs.SectionProblems_Tooltip);   
        this.ActivityData = this.PrescribingConsideration.lstSection;
        await this.PopulateFormViewerFauxTab(this.oResolveItem.IsConflictClick);
        if (this.frmViewBasic == null) {
            this.frmViewBasic = new UserControl();
        }
        this.constructorControlInit();
                setTimeout(() => {
                    this.oResolveItem.FormviewerLoadedEvent.emit(true);
                }, 0);
    }
    CheckConfigstatneryExist(){
        if(this.oResolveItem.formViewerDetails.BasicDetails.StationaryType!=null)
        {
        let StatTypeItem = this.oResolveItem.formViewerDetails.BasicDetails.StationaryType.Value; 
        let checkStatItem : boolean = this.oResolveItem.formViewerDetails.BasicDetails.DefaultDetails.Stationarys.Any
        (x => x.Value == StatTypeItem); 
        if(!checkStatItem){
            this.oResolveItem.formViewerDetails.BasicDetails.DefaultDetails.Stationarys.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: this.oResolveItem.formViewerDetails.BasicDetails.StationaryType.DisplayText,
                    Value: this.oResolveItem.formViewerDetails.BasicDetails.StationaryType.Value,
                    Tag: this.oResolveItem.formViewerDetails.BasicDetails.StationaryType.Tag,
            }));           
        }
        }
    }
    multiSelectCboDoseTypePropertyChange(){
      //  this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
      //  this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
        if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
            this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
        }
    }
    constructorControlInit(hideRouteFocus?: boolean){
        // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
        if (this.oTxtProblem instanceof iTextBox) {
            this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
            this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
        }
        // this.iMultiRoute = ObjectHelper.CreateType<iMultiSelectDropdown>(this.frmViewBasic.FindName("iMultiRoute"), iMultiSelectDropdown);
        // this.txtLowerDose = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox);
        // this.txtBoosterDose = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox);
        // this.txtBolus = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox);
        // this.txtVolume = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox);
        // this.txtInfusionRate = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox);
        // this.txtUpperDose = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox);
        // this.cboUOM = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox);
        // this.cboRoute = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
        // this.cbofrequency = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox);
        // this.cboDosageForm = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox);
        // this.cboStrength = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox);
        // this.cboRsnForMod = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox);
        // this.cboSite = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox);
        // this.cboStationary = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox);
        // this.cmdBrand = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("cmdBrand"), iLabel);
        // this.chckIsMultiRoute = ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chckIsMultiRoute"), iCheckBox);
        if (this.frmViewBasic != null)
            this.frmViewBasic.Loaded  = (s,e) => { this.frmViewBasic_Loaded(s,e); } ;
        if (this.cboRoute instanceof iComboBox ) {      
            
            if( hideRouteFocus == undefined)
            {
                setTimeout(() => {                
                    if (this.cboRoute != undefined && this.cboRoute.SelectedItem != undefined && String.IsNullOrEmpty(this.cboRoute.SelectedItem.DisplayText))
                         this.cboRoute.Focus();
                }, 0);
            }
            if(this.cboRoute.SelectionChanged == undefined)
            {
                this.cboRoute.SelectionChanged  = (s,e) => { this.cboRoute_SelectionChanged(s,e); } ; 
            } 
        }
        
       
        // this.cboDosageForm = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox);
            if (this.cboDosageForm instanceof iComboBox) {
                this.cboDosageForm.SelectionChanged  = (s,e) => { this.cboDosageForm_SelectionChanged(s,e); } ;
            }
        // this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
            if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
                this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
            }
            // TODO: To be removed after the proper implementation
            // if(this.cboDoseType)
            // this.cboDoseType.SetValue(this.cboDoseType.GetValue());
        // this.cboInfusion = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox);
            if (this.cboInfusion instanceof iComboBox) {
                this.cboInfusion.SelectionChanged  = (s,e) => { this.cboInfusion_SelectionChanged(s,e); } ;
            }
            // if (this.iTimeStartDateTime != null) {
            //     this.iTimeStartDateTime.Visibility = Visibility.Collapsed;
            // }
            //this.lblReviewcopiedose = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewcopieddoses"), iLabel);
            if (this.lblReviewcopiedose instanceof iLabel) {
                this.lblReviewcopiedose.MouseLeftButtonUp  = (s,e) => { this.lblReviewcopieddoses_MouseLeftButtonUp(s,e); } ;
            }
        // this.lblSupplyInst = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInst"), iLabel);
            if(this.lblSupplyInst == null){
            // this.lblSupplyInst = this.iLabelForSupplyInstruction("lblSupplyInst");
            }
            if (this.lblSupplyInst instanceof iLabel) {
                // this.lblSupplyInst.MouseLeftButtonUp -= lblSupplyInst_MouseLeftButtonUp;
             
                this.lblSupplyInst.MouseLeftButtonUp = (s,e) => {
                    Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
                    this.lblSupplyInst_MouseLeftButtonUp(s,e)};
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    if (this.oResolveItem.FormViewerDetails.TechValidateDetails != null && this.oResolveItem.PresTechValidatedItemsChild != null && this.oResolveItem.PresTechValidatedItemsChild.Count > 0) {
                        for (let i: number = 0; i < this.oResolveItem.PresTechValidatedItemsChild.Count; i++) {
                            if ((this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SelectedsupplyInstruction != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count > 0) || !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.Supplycomments) || (this.oResolveItem.PresTechValidatedItemsChild[i].SelectedSupplyreq != null && !String.Equals(this.oResolveItem.PresTechValidatedItemsChild[i].SelectedSupplyreq.Value, Resource.TechValidate.Empty)) || !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SupplyInsVal) || (this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.TechValSupplyInst != null && !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.TechValSupplyInst.Value)) || (this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails.TechValidatedItems != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                            }
                        }
                        if (!String.Equals(this.oResolveItem.FormViewerDetails.TechValidateDetails.supplyinstrtext, Resource.MedicationForm.lblSupplyInstructionsText_Tooltip, StringComparison.InvariantCultureIgnoreCase) || !String.Equals(this.oResolveItem.FormViewerDetails.TechValidateDetails.SupplyInsTextWithComments, Resource.MedicationForm.lblSupplyInstructionsText_Tooltip, StringComparison.InvariantCultureIgnoreCase) || !String.Equals(this.oResolveItem.SelectedSupplyreq.Value, Resource.TechValidate.Empty)) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                        }
                        else if (this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems != null && (this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0)) {
                            for (let j: number = 0; j < this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count; j++) {
                                if ((this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[j].selectedSupplyInstruction != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[j].selectedSupplyInstruction.Count > 0) || (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[j].SupComments))) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                                }
                            }
                        }
                    }
                }
            }
            else if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Collapsed;
            }
            if (this.frmViewBasic != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText != null) {
            // let lblSupplyInstText: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel);
            if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel) instanceof iLabel) {
                    // let lblSupTooltip: iLabel = new iLabel();
                    // lblSupTooltip.Text = !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) ? this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText : Resource.medauthorise.cmdSupplyInstruction_ToolTip;
                    // lblSupTooltip.Width = 250;
                    // lblSupTooltip.IsWordwrap = true;
                    if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText, Resource.MedicationForm.lblSupplyInstructionsText_Tooltip, StringComparison.InvariantCultureIgnoreCase) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsTextWithComments = this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText + Environment.NewLine + "Comments:" + this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments;
                    }
                    else if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsTextWithComments = "Comments:" + this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments;
                    }
                    else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsTextWithComments = this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText;
                    }
                    let lblSupTooltip: iLabel = new iLabel();
                    lblSupTooltip.Text = !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) ? this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsTextWithComments : Resource.medauthorise.cmdSupplyInstruction_ToolTip;
                    lblSupTooltip.Width = 250;
                    lblSupTooltip.IsWordwrap = true;
                //ToolTipService.SetToolTip(ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel), lblSupTooltip);
                }
            }
            this.EventWireUpForStartDTTM();
            if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.CurrentCultureIgnoreCase)) {
            // this.dtpStopDate = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker);
            // this.iTimeStopDateTime = ObjectHelper.CreateType<iTimeBox>(this.frmViewBasic.FindName("iTimeStopDateTime"), iTimeBox);
            // this.lblStopDate = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblStopDate"), iLabel);
            // this.udDuration = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udDuration"), iUpDownBox);
            // this.cboDuration = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDuration"), iComboBox);
                if (this.iTimeStopDateTime != null) {
                    this.iTimeStopDateTime.EnableDST = true;
                }
                if (this.dtpStopDate != null) {
                    this.dtpStopDate.Visibility = Visibility.Visible;
                    // this.dtpStopDate.OnDateValueChanged -= dtpStopDate_OnDateValueChanged;
                    this.dtpStopDate.OnDateValueChanged  = (s,e) => { this.dtpStopDate_OnDateValueChanged(s,e); } ;
                }
                if (this.iTimeStopDateTime != null) {
                    // this.iTimeStopDateTime.ValueChanged -= iTimeStopDateTime_ValueChanged;
                    this.iTimeStopDateTime.ValueChanged  = (s,e) => { this.iTimeStopDateTime_ValueChanged(s,e); } ;
                    this.iTimeStopDateTime.Visibility = Visibility.Visible;
                }
                if (this.lblStopDate != null) {
                    this.lblStopDate.Visibility = Visibility.Visible;
                }
            }
            if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration) {
            // this.chkRecordAdmin = ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chkForAdminOption1"), iCheckBox);
                if (this.chkRecordAdmin instanceof iCheckBox) {
                    this.chkRecordAdmin.Checked  = (s,e) => { this.chkRecordAdmin_Checked(s,e); } ;
                    this.chkRecordAdmin.Unchecked  = (s,e) => { this.chkRecordAdmin_Unchecked(s,e); } ;
                }
            // this.udReviewafter = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udReviewafter"), iUpDownBox);
            // this.cboreviewAfterUOM = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboreviewAfterUOM"), iComboBox);
            // this.lblReviewafter = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewafter"), iLabel);
            // this.lblReviewAfterDate = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewAfterDate"), iLabel);
            // this.lblReviewAfterComments = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewAfterComments"), iLabel);
            // this.txtReviewAfterComments = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtReviewAfterComments"), iTextBox);
            // this.cmdReviewDetails = ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("cmdReviewDetails"), iButton);
                if (this.cmdReviewDetails != null) {
                    // this.cmdReviewDetails.Click -= cmdReviewDetails_Click;
                    this.cmdReviewDetails.Click  = (s,e) => { this.cmdReviewDetails_Click(s,e); } ;
                }
                if (this.udReviewafter != null && this.cboreviewAfterUOM != null && this.lblReviewafter != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicControls != null && this.oResolveItem.ParentbaseVM != null && this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible == Visibility.Visible) {
                    let indexReviewAftMan: number = Array.IndexOf(this.oResolveItem.FormViewerDetails.BasicControls, this.oResolveItem.FormViewerDetails.BasicControls.Where(x => x.Contains("CC_REVIEWAFTER")).FirstOrDefault());
                    if (this.oResolveItem.FormViewerDetails.MandatoryControls != null && this.oResolveItem.FormViewerDetails.MandatoryControls.Length >= indexReviewAftMan && indexReviewAftMan != -1) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterMandatory = this.oResolveItem.FormViewerDetails.MandatoryControls[indexReviewAftMan];
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig = this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterMandatory;
                        this.oResolveItem.CheckReviewAfterManadatory();
                    }
                }
                else {
                    if (this.udReviewafter != null && this.cboreviewAfterUOM != null && this.lblReviewafter != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.LorenzoID != "PI-000") {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterDTTM = DateTime.MinValue;
                    }
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.GpConnectMedicationItem != null && !String.IsNullOrEmpty(this.oResolveItem.GpConnectMedicationItem.GPConnectID) && this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch != String.MinValue && (this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('F') || this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S'))) {
                    this.oResolveItem.GpConnectMedicationItem = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.GPItemDetailVisible = Visibility.Collapsed;
                    this.oResolveItem.IsGPConnectItem = false;
                }
            }
            if(this.cboRoute != null) { 
                let selectionChangedEventArgs: SelectionChangedEventArgs;
                let addedItems: List = new List([this.cboRoute.SelectedItem]);
                let removedItems: List = new List([]);
                selectionChangedEventArgs = new SelectionChangedEventArgs(removedItems, addedItems)
                this.cboRoute_SelectionChanged(null, selectionChangedEventArgs);
            }
            if(this.cboInfusion != null) { 
                let selectionChangedEventArgs: SelectionChangedEventArgs;
                let addedItems: List = new List([this.cboInfusion.SelectedItem]);
                let removedItems: List = new List([]);
                selectionChangedEventArgs = new SelectionChangedEventArgs(removedItems, addedItems)
                this.cboInfusion_SelectionChanged(null, selectionChangedEventArgs);
            }
            if(this.cboDoseType)
            this.cboDoseType.SetValue(this.cboDoseType.GetValue());
            this.objMsg_MessageBoxClose_Focus(null, null);
        }
    private tabContentFormLoadAFterviewinit = false;
    private tabContentRefreenceCallBack(key:string,content:any){
        if(this.tabContentFormLoadAFterviewinit){
            if(key == 'frmBasic'){
                console.log("tabContentRefreenceCallBack.if");
                this.frmViewBasic = content;
                this.constructorControlInit(true);
                // added for MCI Drug cond 26-09
                if(this.MCIMsg ){
                console.log(this.frmViewBasic);
                if(this.ftbFormViewDetails != null && (this.ftbFormViewDetails.GetItem('frmmulticomponent') != undefined && this.ftbFormViewDetails.GetItem('frmmulticomponent') != null)){
                    this.oResolveItem.FormviewerLoadedEvent.emit(true);
                }
                }
            }
        }else{
            console.log("tabContentRefreenceCallBack.else");
            this.tabContentFormLoadAFterviewinit = true;
        }
    }
    
    ngAfterViewInit(): void { 
        this.SetDynamicFormviewerHeight();
        super.AfterViewInit();
        this.ftbFormViewDetails.tabContentRefreenceCallBack = (key:string,content:any) => { 
            this.SetDynamicFormviewerHeight();
            this.tabContentRefreenceCallBack(key,content)
        };       
        if (this.cboDRCDosetype != null) {
            this.cboDRCDosetype.SelectionChanged  = (s,e) => { this.cboDRCDosetype_SelectionChanged(s,e); } ;
        }             
        let IsSubscribeEventsCalled: Boolean=false;
        if(this.oResolveItem != null && this.oResolveItem.IsConflictClick ){
            IsSubscribeEventsCalled = true;
            this.MedformViewerSubscribeEvents();
        }
        this.ConstructorAfterViewInit(); 
        if(!IsSubscribeEventsCalled){
            this.MedformViewerSubscribeEvents();  
        }  
        
		//54626 for additional scenario added handled to skip the validation for Clerking CA
		if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase)) {
        this.startPresTimeSubscription = this.oResolveItem.FormViewerDetails.BasicDetails.StartPresTimeEvent.subscribe(data=>
            {                                 
                let routedPropertyChanged: RoutedPropertyChangedEventArgs<DateTime> = {OldValue:data.OldValue, NewValue:data.NewValue,OriginalSource:{}};
                this.iTimeStartDateTime_ValueChanged({},routedPropertyChanged);
                this.iTimeStartDateTime.UpdateAfterChangeValue(data.NewValue);                
            }
        )
		}
    }

    private recordAdminTabExist(){
        let returnVal = false;
        this.ftbFormViewDetails.AllItems.forEach((elem) => {
            if(elem.Key == "frmRecordAdmin")
                returnVal = true;
        })
        return returnVal;
    }

    private MedformViewerSubscribeEvents(){
        let temp = this.objfrmFVFooter.FrmViewerFooterLoaded.subscribe(data => {
            this.isfrmfooterLoaded = true;
            if (this.isfrmfooterLoaded && this.isPopulateTabLoaded) {
                if(this.recordAdminTabExist()){
                    this.ftbFormViewDetails.sIndex = 0;
                }
                this.medformviewChild_Loaded({}, null);
                temp.unsubscribe();
            }
        })
        let populateTab = this.populateTabLoadedEvent.subscribe(data => {
            if(data){
                this.isPopulateTabLoaded = true;
                if (this.isfrmfooterLoaded && this.isPopulateTabLoaded) {
                    if(this.recordAdminTabExist()){
                        this.ftbFormViewDetails.sIndex = 0;
                    }
                    this.medformviewChild_Loaded({}, null);
                    populateTab.unsubscribe();
                }
            }
        })

        let temp1 = this.oResolveItem.SubFormLoadedEvent.subscribe(data => {
            // this.constructorControlInit();  
            // Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
            this.EventWirapped(this.oResolveItem.EventWrapValueTabChange);

        })
    }
        BasicDetails_ClerkSVRegimePartialDateUpdEvent(dtPartialDT: DateTime): void {
            if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped && (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)) != null && PatientContext.PrescriptionType == PrescriptionTypes.Clerking) {
                if (DateTime.NotEquals(dtPartialDT, DateTime.MinValue) && dtPartialDT.Year > CConstants.DateTimeMinYear && (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue != null) {
                    (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue.Text = " " + dtPartialDT.ToUserDateTimeString("dd-MMM-yyyy HH:mm");
                }
            }
        }
        private BSAFormula: string;
        private BSAValue: string;
        private CommonBB_PatientBSADataCompletedEvent(Formula: string, BSA: string): void {
            if (!String.IsNullOrEmpty(BSA)) {
                this.BSAValue = BSA;
                this.BSAFormula = Formula;
                if (CommonDomainValues.BSAFormula != null) {
                    let sBSAFormulaDisplay: string = this.BSAFormula;
                    let sDisplay: string;
                    let BSADisplayText = CommonDomainValues.BSAFormula.Where(CCBSA => String.Compare(CCBSA.csCode,this.BSAFormula,StringComparison.OrdinalIgnoreCase)==0).Select(s=>s.csDescription);
                    if (BSADisplayText != null && BSADisplayText.Count() > 0) {
                        sBSAFormulaDisplay = BSADisplayText.ElementAt(0);
                    }
                    PatientContext.BSAFormulaCode = Formula;
                    PatientContext.BSAFormula = sBSAFormulaDisplay;
                    sDisplay = this.BSAValue + " m^2 (" + sBSAFormulaDisplay + ")";
                    this.PrescribingConsideration.UpdateNode("SectionConsideration", "BSA", "BSA:", sDisplay, String.Empty, false, false, "BSA", Resource.prescribedrugs.PatientBSA_Tooltip + sDisplay);
                }
            }
            this.TriggerDRCCheckForBSA_Weight();
        }
        async ActivityConsideration_OnNodeItemClick(objRLNode: ACNode) {
            let sHName: string = "Height:";
            let sWName: string = "Weight:";
            let sGestationAge: string = "Gestational age:";
            let sGestationAgeValue: string = "NOT RECORDED";
            let sHValue: string = "NOT RECORDED";
            let sWValue: string = "NOT RECORDED";
            let sWeight: string = String.Empty;
            let sHeight: string = String.Empty;
            let sGestation: string = String.Empty;
            let sGestationreq: string = String.Empty;
            let sIsClinicalnote: string = !String.IsNullOrEmpty(QueryStringInfo.IsClinicalNote) ? QueryStringInfo.IsClinicalNote : String.Empty;
            let sPatValueType: string = String.Empty;
            let ipbVm: IPPMABaseVM = this.oResolveItem.ParentbaseVM;
            this.TriggerDRCFromWeightHeight = false;
            let oReturn = await HtmlPage.Window.InvokeAsync("ActivityConsideration", sIsClinicalnote, PatientContext.PatientOID);
            if (oReturn != null && typeof (oReturn) === "string" && oReturn.ToString().length > 0) {
                this.CheckWeightHeightChanged(oReturn);
                let arrValues: string[] = oReturn.ToString().Split(',');
                if (arrValues.length > 0 && !String.IsNullOrEmpty(arrValues[0])) {
                    sWValue = arrValues[0].Replace("  ", " ");
                }
                if (arrValues.length > 1 && !String.IsNullOrEmpty(arrValues[1])) {
                    sHValue = arrValues[1].Replace("  ", " ");
                }
                if (arrValues.length > 2 && !String.IsNullOrEmpty(arrValues[2])) {
                    sGestationAgeValue = arrValues[2].Replace("  ", " ");
                }
                sWeight = (arrValues.length > 3 && !String.IsNullOrEmpty(arrValues[3])) ? arrValues[3].Trim() : String.Empty;
                sHeight = (arrValues.length > 4 && !String.IsNullOrEmpty(arrValues[4])) ? arrValues[4].Trim() : String.Empty;
                sGestation = (arrValues.length > 5 && !String.IsNullOrEmpty(arrValues[5])) ? arrValues[5].Trim() : String.Empty;
                ipbVm.RecordEstWeightHeight(sHeight,sWeight,(o1)=>{sHeight=o1},(o2)=>{sWeight=o2}, arrValues);
                if (!String.IsNullOrEmpty(sHeight)) {
                    let sHeightRecordedOn: string = String.Empty;
                    let sHeightRecordedOnWithTime: string = String.Empty;
                    sPatValueType = "Height";
                    if (arrValues != null && arrValues.length > 1) {
                        if (!String.IsNullOrEmpty(arrValues[1]) && arrValues[1].Contains(':')) {
                            sHeightRecordedOn = arrValues[1].Split(':')[2];
                            sHeightRecordedOn = sHeightRecordedOn.Trim().Substring(0, 11);
                            sHeightRecordedOnWithTime = arrValues[1].Split(':')[2] + ":" + arrValues[1].Split(':')[3];
                        }
                    }
                    PatientContext.PatientHeightRecordedOn = sHeightRecordedOn;
                    PatientContext.PatientHeightDTTM = Convert.ToDateTime(sHeightRecordedOnWithTime);
                    ipbVm.ParseWeightHeight(sHeight, sPatValueType);
                }
                else {
                    PatientContext.PatientHEIGHT = String.Empty;
                    PatientContext.PatientHeightRecordedOn = String.Empty;
                }
                if (!String.IsNullOrEmpty(sWeight)) {
                    let sWeightRecordedOn: string = String.Empty;
                    let sWeightRecordedOnWithTime: string = String.Empty;
                    sPatValueType = "Weight";
                    if (arrValues != null && arrValues.length > 0) {
                        if (!String.IsNullOrEmpty(arrValues[0]) && arrValues[0].Contains(':')) {
                            sWeightRecordedOn = arrValues[0].Split(':')[2];
                            sWeightRecordedOn = sWeightRecordedOn.Trim().Substring(0, 11);
                            sWeightRecordedOnWithTime = arrValues[0].Split(':')[2] + ":" + arrValues[0].Split(':')[3];
                        }
                    }
                    PatientContext.PatientWeightRecordedOn = sWeightRecordedOn;
                    PatientContext.PatientHeightDTTM = Convert.ToDateTime(sWeightRecordedOnWithTime);
                    ipbVm.ParseWeightHeight(sWeight, sPatValueType);
                }
                else {
                    PatientContext.PatientWEIGHT = String.Empty;
                    PatientContext.PatientWeightRecordedOn = String.Empty;
                }
                let HeightWeightRecordedDTTM: DateTime= DateTime.MinValue;
                if (this.oResolveItem != null && this.oResolveItem.ParentbaseVM != null) {
                    if (DateTime.GreaterThanOrEqualTo(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)) {
                        this.oResolveItem.ParentbaseVM.HeightWeightIndText = "Weight/Height has not been updated since " + PatientContext.PatientHeightDTTM + ". Please review.";
                        HeightWeightRecordedDTTM = PatientContext.PatientHeightDTTM;
                    }
                    if (DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)) {
                        this.oResolveItem.ParentbaseVM.HeightWeightIndText = "Weight/Height has not been updated since " + PatientContext.PatientWeightDTTM + ". Please review.";
                        HeightWeightRecordedDTTM = PatientContext.PatientWeightDTTM;
                    }
                }
                let IsRebindResolveGrd: boolean = false;
                if (this.oResolveItem.ParentbaseVM != null) {
                    this.oResolveItem.ParentbaseVM.IsPatientHTWTUpdated = true;
                }
                if (this.oResolveItem.ParentbaseVM != null && this.oResolveItem.ParentbaseVM.MedsResolve != null && this.oResolveItem.ParentbaseVM.MedsResolve.Count > 0 && MedicationCommonProfileData.PrescribeConfig != null && MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc) {
                    this.oResolveItem.ParentbaseVM.MedsResolve.ForEach(oItemVM => {
                        if (oItemVM.PrescriptionItemOID == 0 && oItemVM.IsDoseCalcPerformed && oItemVM.DoseCalculationDetails != null && DateTime.LessThan(oItemVM.DoseCalculationDetails.CalculatedDTTM, HeightWeightRecordedDTTM)) {
                            if (!Common.IsClosedEncounter()) {
                                oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                                IsRebindResolveGrd = true;
                            }
                            else {
                                oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
                            }
                        }
                        else if (oItemVM.PrescriptionItemOID > 0 && !String.IsNullOrEmpty(oItemVM.PrescriptionItemStatus) && (String.Equals(oItemVM.PrescriptionItemStatus, CConstants.SUBMITTED, StringComparison.InvariantCultureIgnoreCase) || String.Equals(oItemVM.PrescriptionItemStatus, CConstants.AUTOVERIFIED, StringComparison.InvariantCultureIgnoreCase) || String.Equals(oItemVM.PrescriptionItemStatus, CConstants.AWAITINGAUTHORISE, StringComparison.InvariantCultureIgnoreCase) || String.Equals(oItemVM.PrescriptionItemStatus, CConstants.CLINICALLYVERIFIED, StringComparison.InvariantCultureIgnoreCase))) {
                            if (oItemVM.FormViewerDetails.BasicDetails.DCCalDTTM < HeightWeightRecordedDTTM && (oItemVM.IsDoseCalcPerformed || oItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist)) {
                                if (!Common.IsClosedEncounter()) {
                                    oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                                    IsRebindResolveGrd = true;
                                }
                                else {
                                    oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
                                }
                            }
                        }
                    });
                    if (this.oResolveItem.PrescriptionItemOID == 0 && this.oResolveItem.IsDoseCalcPerformed && this.oResolveItem.DoseCalculationDetails != null && this.oResolveItem.DoseCalculationDetails.CalculatedDTTM < HeightWeightRecordedDTTM) {
                        if (!Common.IsClosedEncounter()) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                            IsRebindResolveGrd = true;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
                        }
                    }
                    else if (this.oResolveItem.PrescriptionItemOID > 0 && !String.IsNullOrEmpty(this.oResolveItem.PrescriptionItemStatus) && (String.Equals(this.oResolveItem.PrescriptionItemStatus, CConstants.SUBMITTED, StringComparison.InvariantCultureIgnoreCase) || String.Equals(this.oResolveItem.PrescriptionItemStatus, CConstants.AUTOVERIFIED, StringComparison.InvariantCultureIgnoreCase) || String.Equals(this.oResolveItem.PrescriptionItemStatus, CConstants.AWAITINGAUTHORISE, StringComparison.InvariantCultureIgnoreCase) || String.Equals(this.oResolveItem.PrescriptionItemStatus, CConstants.CLINICALLYVERIFIED, StringComparison.InvariantCultureIgnoreCase))) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.DCCalDTTM < HeightWeightRecordedDTTM && (this.oResolveItem.IsDoseCalcPerformed || this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseCalcExist)) {
                            if (!Common.IsClosedEncounter()) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                                IsRebindResolveGrd = true;
                            }
                            else {
                                this.oResolveItem.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
                            }
                        }
                    }
                }
                if (IsRebindResolveGrd) {
                    if (this.oResolveItem.ParentbaseVM.IsVisibleHWIndicator == Visibility.Collapsed) {
                        this.oResolveItem.ParentbaseVM.IsVisibleHWIndicator = Visibility.Visible;
                    }
                    this.oResolveItem.ParentbaseVM.IsRebindResolveGrdForDC = true;
                }
                else {
                    if (this.oResolveItem.ParentbaseVM.IsVisibleHWIndicator == Visibility.Visible) {
                        this.oResolveItem.ParentbaseVM.IsVisibleHWIndicator = Visibility.Collapsed;
                    }
                }
            }
            this.PrescribingConsideration.UpdateNode("SectionConsideration", sWName, sWName, sWValue, String.Empty, false, true, "Patient Weight", Resource.prescribedrugs.PatientWeight_Tooltip + sWValue);
            this.PrescribingConsideration.UpdateNode("SectionConsideration", sHName, sHName, sHValue, String.Empty, false, true, "Patient Height", Resource.prescribedrugs.PatientHeight_Tooltip + sHValue);
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.SetDCIconInFV();
            }
            MedicationCommonBB.GetPatientAgeGenderDetails();
            if (ContextManager.Instance.NameExists("Sgestationreq")) {
                if ((ContextManager.Instance["Sgestationreq"]) != null) {
                    sGestationreq = ContextManager.Instance["Sgestationreq"].ToString();
                }
            }
            if (sGestationreq == "1") {
                this.PrescribingConsideration.UpdateNode("SectionConsideration", sGestationAge, sGestationAge, sGestationAgeValue, String.Empty, false, true, "Gestational age", sGestationAgeValue);
            }
            if ((!String.IsNullOrEmpty(sHeight) && !String.IsNullOrEmpty(sWeight) && !PatientContext.isEstimatedHeight && !PatientContext.isEstimatedWeight) || (!String.IsNullOrEmpty(sWeight) && !PatientContext.isEstimatedWeight)) {
                CommonBB.GetPatientBSA(PatientContext.PatientOID, PatientContext.Age, sHeight, sWeight);
            }
            else {
                PatientContext.BSA = String.Empty;
                PatientContext.BSAFormula = String.Empty;
                this.PrescribingConsideration.UpdateNode("SectionConsideration", "BSA", "BSA:", String.Empty, String.Empty, false, false, "BSA", String.Empty);
                this.TriggerDRCCheckForBSA_Weight();
            }
        }
        private TriggerDRCCheckForBSA_Weight(): void {
            if ((!String.IsNullOrEmpty(PatientContext.BSA) && !String.Equals(this.BSABeforeChange, PatientContext.BSA, StringComparison.InvariantCultureIgnoreCase)) || (!String.IsNullOrEmpty(PatientContext.PatientWEIGHT) && !String.Equals(this.BSAWEightBeforeChange, PatientContext.PatientWEIGHT, StringComparison.InvariantCultureIgnoreCase)) || (!String.IsNullOrEmpty(PatientContext.PatientHEIGHT) && !String.Equals(this.BSAHeightBeforeChange, PatientContext.PatientHEIGHT, StringComparison.InvariantCultureIgnoreCase)) || (this.BSAIsEstimatedHeightbefore != PatientContext.isEstimatedHeight) || (this.BSAIsEstimatedWeightBefore != PatientContext.isEstimatedWeight) || this.TriggerDRCFromWeightHeight || this.IsPerformDRCRequiredforDoseCalc) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.CanPerformDRC(this.oResolveItem)) {
                    if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds) {
                        this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated = true;
                        if (!this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Contains("DRCDosetype")) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("DRCDosetype");
                        }
                    }
                    this.oResolveItem.PerformDRC(this.oResolveItem);
                    this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason = null;
                    this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = false;
                    this.oResolveItem.bDRCConflicttabloaded = true;
                    this.IsPerformDRCRequiredforDoseCalc = false;
                }
            }
            this.BSABeforeChange = PatientContext.BSA;
            this.BSAWEightBeforeChange = PatientContext.PatientWEIGHT;
            this.BSAHeightBeforeChange = PatientContext.PatientHEIGHT;
            this.BSAIsEstimatedHeightbefore = PatientContext.isEstimatedHeight;
            this.BSAIsEstimatedWeightBefore = PatientContext.isEstimatedWeight;
        }
        IsActivityConsiderationOpened: boolean = false;
        private sLeaveDTTM: string;
        private sDischargeDTTM: string;
        private PrescribingConsiderationPopUp(sender: Object, e: EventArgs): void {
            this.IsActivityConsiderationOpened = true;
            let sImageList: string = String.Empty;
            this.TriggerDRCFromWeightHeight = false;
            let oReturn: Object = HtmlPage.Window.Invoke("GetDataItemRecordedDate", null);
            if (oReturn != null && typeof (oReturn) === "string" && oReturn.ToString().length > 0) {
                this.CheckWeightHeightChanged(oReturn);
            }
            if (this.PrescribingConsideration.lstSection[0].Nodes.Count == 0) {
                this.UpdateActivityConsideration(false, oReturn);
                this.PrescribingConsideration.AddNode("SectionConsideration", "DischargeDTTM", "Expected date of discharge:", String.Empty, String.Empty, false, false, "Expected date of discharge", String.Empty);
                this.PrescribingConsideration.AddNode("SectionConsideration", "LeaveDTTM", "Expected date of patient leave:", String.Empty, String.Empty, false, false, "Expected date of patient leave", String.Empty);
            }
            else {
                this.UpdateActivityConsideration(true, oReturn);
            }
            if (this.PrescribingConsideration.lstSection[2].Nodes.Count == 0) {               
                    MedicationPrescriptionHelper.GetProblemByCriteria((o,e)=>{this.probproxy_GetProblemByCriteriaCompleted(o,e)});               
            }
            if (this.PrescribingConsideration.lstSection[1].Nodes.Count == 0) {
                    MedicationPrescriptionHelper.GetPatientAllergies((o,e)=>{this.allergyproxy_GetPatientAllergiesCompleted(o,e)});

            }
            if (this.PrescribingConsideration != null) {
                if (String.IsNullOrEmpty(this.sDischargeDTTM)) {                    
                    MedicationPrescriptionHelper.GetDischargeDate((o,e)=>{this.PatientDischargeDate_GetDischargeDateCompleted(o,e)});
                }
                else {
                    this.SetActivityConsiderationDischargeDTTM();
                }
                if (String.IsNullOrEmpty(this.sLeaveDTTM)) {                    
                    MedicationPrescriptionHelper.GetPatientLeaveByPatDet((o,e)=>{this.LeaveDate_GetPatientLeaveByPatDetCompleted(o,e)});
                }
                else {
                    this.SetActivityConsiderationLeaveDTTM();
                }
            }
        }
        private CheckWeightHeightChanged(oReturn: Object): void {
            if (String.IsNullOrEmpty(PatientContext.PatientWEIGHT) || String.IsNullOrEmpty(PatientContext.PatientHEIGHT)) {
                this.TriggerDRCFromWeightHeight = true;
            }
            else if (oReturn != null && typeof (oReturn) === "string" && oReturn.ToString().length > 0) {
                let HWarrValues: string[];
                let ArrWeight: string[] = null;
                let ArrHeight: string[] = null;
                HWarrValues = oReturn.ToString().Split(',');
                if (HWarrValues != null && HWarrValues.Count() > 0) {
                    let sWeightDtls: string = (HWarrValues[0] != null && HWarrValues[0].length > 0) ? HWarrValues[0] : String.Empty;
                    let sHeightDtls: string = (HWarrValues[1] != null && HWarrValues[1].length > 0) ? HWarrValues[1] : String.Empty;
                    if (!String.IsNullOrEmpty(sWeightDtls)) {
                        ArrWeight = sWeightDtls.Split(' ');
                    }
                    if (!String.IsNullOrEmpty(sHeightDtls)) {
                        ArrHeight = sHeightDtls.Split(' ');
                    }
                    if ((ArrWeight != null && ArrWeight.length > 0 && ArrWeight[0] != null && !String.Equals(ArrWeight[0], PatientContext.PatientWEIGHT, StringComparison.InvariantCultureIgnoreCase)) || (ArrHeight != null && ArrHeight.length > 0 && ArrWeight[0] != null && !String.Equals(ArrHeight[0], PatientContext.PatientHEIGHT, StringComparison.InvariantCultureIgnoreCase))) {
                        this.TriggerDRCFromWeightHeight = true;
                    }
                }
            }
        }
        probproxy_GetProblemByCriteriaCompleted(sender: Object, e: GetProblemByCriteriaCompletedEventArgs): void {
            let _ErrorID: number = 80000023;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, Class:IppmabaseVM, Method:probproxy_GetProblemByCriteriaCompleted()";
            if (e.Error == null) {
                try {
                    let oProbRes: CResMsgGetProblemByCriteria = e.Result;
                    if (oProbRes instanceof CResMsgGetProblemByCriteria && oProbRes.oProblemView != null) {
                        for (let i: number = 0; i < oProbRes.oProblemView.Count; i++) {
                            if (i >= 5) {
                                this.PrescribingConsideration.AddNode("SectionProblem", String.Empty, Resource.prescribedrugs.More_Problem_Exist, String.Empty, String.Empty, false, true, Resource.prescribedrugs.sectionallergyif_Tooltip, Resource.prescribedrugs.sectionallergyif_Tooltip);
                                break;
                            }
                            else {
                                this.PrescribingConsideration.AddNode("SectionProblem", oProbRes.oProblemView[i].ProblemOID, oProbRes.oProblemView[i].ProblemName, String.Empty, String.Empty, false, true, oProbRes.oProblemView[i].ProblemName, Resource.prescribedrugs.Sectionproblemielse_Tooltip);
                            }
                        }
                    }
                    else {
                        this.PrescribingConsideration.AddNode("SectionProblem", String.Empty, "None recorded", String.Empty, String.Empty, false, false, Resource.prescribedrugs.Sectionproblemielse_Tooltip, Resource.prescribedrugs.sectionallergyelse2_Tooltip);
                    }
                    for (let vSectionCntr: number = 0; vSectionCntr < this.PrescribingConsideration.lstSection.Count; vSectionCntr++) {
                        if (String.Compare(this.PrescribingConsideration.lstSection[vSectionCntr].SectionKey, "SectionProblem") == 0) {
                            for (let vLoop: number = 0; vLoop < this.PrescribingConsideration.lstSection[vSectionCntr].Nodes.Count; vLoop++)
                                this.PrescribingConsideration.lstSection[vSectionCntr].Nodes[vLoop].NodeWidth = 300;
                            break;
                        }
                    }
                }
               catch(ex:any)  {
                    let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
                }

            }
            else {
                let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, e.Error);
            }
        }
        allergyproxy_GetPatientAllergiesCompleted(sender: Object, e: GetPatientAllergiesCompletedEventArgs): void {
            let _ErrorID: number = 80000027;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, IPPMABaseVM.allergyproxy_GetPatientAllergiesCompleted()";
            if (e.Error == null) {
                try {
                    let AllergyRes: CResMsgGetPatientAllergies = e.Result;
                    if (AllergyRes instanceof CResMsgGetPatientAllergies && AllergyRes.oPatientAllergyDet != null) {
                        for (let i: number = 0; i < AllergyRes.oPatientAllergyDet.Length; i++) {
                            if (i >= 10) {
                                this.PrescribingConsideration.AddNode("SectionAllergy", String.Empty, Resource.prescribedrugs.More_Allergies_Exist, String.Empty, String.Empty, false, false, Resource.prescribedrugs.sectionallergyif_Tooltip, Resource.prescribedrugs.sectionallergyif_Tooltip);
                                break;
                            }
                            else {
                                this.PrescribingConsideration.AddNode("SectionAllergy", AllergyRes.oPatientAllergyDet[i].AllergyID, AllergyRes.oPatientAllergyDet[i].Allergen, String.Empty, String.Empty, false, false, AllergyRes.oPatientAllergyDet[i].Allergen, Resource.prescribedrugs.sectionallergyielse_Tooltip);
                            }
                        }
                    }
                    else {
                        this.PrescribingConsideration.AddNode("SectionAllergy", String.Empty, "None recorded", String.Empty, String.Empty, false, false, Resource.prescribedrugs.Sectionallergyelse1_Tooltip, Resource.prescribedrugs.sectionallergyelse2_Tooltip);
                    }
                    for (let vSectionCntr: number = 0; vSectionCntr < this.PrescribingConsideration.lstSection.Count; vSectionCntr++) {
                        if (String.Compare(this.PrescribingConsideration.lstSection[vSectionCntr].SectionKey, "SectionAllergy") == 0) {
                            for (let vLoop: number = 0; vLoop < this.PrescribingConsideration.lstSection[vSectionCntr].Nodes.Count; vLoop++)
                                this.PrescribingConsideration.lstSection[vSectionCntr].Nodes[vLoop].NodeWidth = 300;
                            break;
                        }
                    }
                }
               catch(ex:any)  {
                    Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
                }

            }
            else {
                Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, e.Error);
            }
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase) != 0)
                this.PrescribingConsideration.lstSection[0].Nodes[4].NodeWidth = 175;
        }
        public DischargeDTTM: DateTime;
        public LeaveDTTM: DateTime;
        PatientDischargeDate_GetDischargeDateCompleted(sender: Object, e: GetDischargeDateCompletedEventArgs): void {
            let _ErrorID: number = 80000038;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:PatientDischargeDate_GetDischargeDateCompleted()";
            if (e.Error == null && e.Result != null) {
                try {
                    this.DischargeDTTM = e.Result.DischargeDate;
                    if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.OrdinalIgnoreCase) == 0 &&  DateTime.NotEquals(this.DischargeDTTM,DateTime.MinValue) && this.DischargeDTTM.Year < DateTime.MaxValue.Year)
                        this.DischargeLeaveDTTM = this.DischargeDTTM;
                    this.sDischargeDTTM = ( DateTime.NotEquals(this.DischargeDTTM,DateTime.MinValue) && this.DischargeDTTM.Year < DateTime.MaxValue.Year) ? this.DischargeDTTM.ToString("dd-MMM-yyyy") : String.Empty;
                    if (this.IsActivityConsiderationOpened) {
                        this.SetActivityConsiderationDischargeDTTM();
                    }
                }
               catch(ex:any)  {
                    let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
                }

            }
            else {
                let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, e.Error);
            }
        }
        private _dischargeLeaveDate: DateTime;
        private _leaveReturnDTTM: DateTime;
        public get LeaveReturnDTTM(): DateTime{
            return this._leaveReturnDTTM;
        }
        public set LeaveReturnDTTM(value: DateTime) {
            this._leaveReturnDTTM = value;
        }
        public get DischargeLeaveDTTM(): DateTime{
            return this._dischargeLeaveDate;
        }
        public set DischargeLeaveDTTM(value: DateTime) {
            this._dischargeLeaveDate = value;
        }
        LeaveDate_GetPatientLeaveByPatDetCompleted(sender: Object, e: GetPatientLeaveByPatDetCompletedEventArgs): void {
            let _ErrorID: number = 80000037;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:LeaveDate_GetPatientLeaveByPatDetCompleted()";
            if (e.Error == null) {
                try {
                    let objRes: CResMsgGetPatientLeaveByPatDet = e.Result;
                    if (objRes != null && objRes.oPatientLeave != null) {
                        this.LeaveDTTM = objRes.oPatientLeave.ActualStartDttm;
                        this.LeaveReturnDTTM = objRes.oPatientLeave.ExpectedReturnDttm;
                        if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.OrdinalIgnoreCase) == 0)
                            this.DischargeLeaveDTTM = this.LeaveDTTM;
                        this.sLeaveDTTM = DateTime.NotEquals(this.LeaveDTTM, DateTime.MinValue) ? this.LeaveDTTM.ToString("dd-MMM-yyyy") : String.Empty;
                        if (this.IsActivityConsiderationOpened) {
                            this.SetActivityConsiderationLeaveDTTM();
                        }
                    }
                }
               catch(ex:any)  {
                    let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
                }

            }
            else {
                let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, e.Error);
            }
        }
        SetActivityConsiderationDischargeDTTM(): void {
            this.PrescribingConsideration.UpdateNode("SectionConsideration", "DischargeDTTM", "Expected date of discharge:", this.sDischargeDTTM, String.Empty, false, false, "Expected date of discharge", this.sDischargeDTTM);
        }
        SetActivityConsiderationLeaveDTTM(): void {
            this.PrescribingConsideration.UpdateNode("SectionConsideration", "LeaveDTTM", "Expected date of patient leave:", this.sLeaveDTTM, String.Empty, false, false, "Expected date of patient leave", this.sLeaveDTTM);
        }
        private UpdateActivityConsideration(IsDoseCalc: boolean, oReturn: Object): void {
            let sHName: string = "Height:";
            let sWName: string = "Weight:";
            let sGestationAge: string = "Gestational age:";
            let sHValue: string = "NOT RECORDED";
            let sWValue: string = "NOT RECORDED";
            let sGestationAgeValue: string = "NOT RECORDED";
            let sHeight: string;
            let sWeight: string;
            let sGestation: string;
            let sGestationreq: string = String.Empty;
            let sPatValueType: string = String.Empty;
            let ipbVm: IPPMABaseVM = this.oResolveItem.ParentbaseVM;
            if (oReturn != null && ObjectHelper.ToString(oReturn).length > 0) {
                let arrValues: string[];
                if (IsDoseCalc) {
                    arrValues = ObjectHelper.ToString(oReturn).Split(',');
                    if (arrValues.length > 0 && !String.IsNullOrEmpty(arrValues[0])) {
                        sWValue = arrValues[0].Replace("  ", " ");
                    }
                    if (arrValues.length > 1 && !String.IsNullOrEmpty(arrValues[1])) {
                        sHValue = arrValues[1].Replace("  ", " ");
                    }
                    if (arrValues.length > 2 && !String.IsNullOrEmpty(arrValues[2])) {
                        sGestationAgeValue = arrValues[2].Replace("  ", " ");
                    }
                    sWValue = sWValue.Replace(":Recorded", ": Recorded");
                    sHValue = sHValue.Replace(":Recorded", ": Recorded");
                    sGestationAgeValue = sGestationAgeValue.Replace(":Recorded", ": Recorded");
                    sWeight = (arrValues.length > 3 && !String.IsNullOrEmpty(arrValues[3])) ? arrValues[3].Trim() : String.Empty;
                    sHeight = (arrValues.length > 4 && !String.IsNullOrEmpty(arrValues[4])) ? arrValues[4].Trim() : String.Empty;
                    sGestation = (arrValues.length > 5 && !String.IsNullOrEmpty(arrValues[5])) ? arrValues[5].Trim() : String.Empty;
                    if (ipbVm != null) {
                        ipbVm.RecordEstWeightHeight(sHeight,sWeight,(o1)=>{sHeight=o1}, (o2)=>{sWeight=o2}, arrValues);
                    }
                    this.PrescribingConsideration.UpdateNode("SectionConsideration", sWName, sWName, sWValue, String.Empty, false, true, "Patient Weight", Resource.prescribedrugs.PatientWeight_Tooltip + sWValue);
                    this.PrescribingConsideration.UpdateNode("SectionConsideration", sHName, sHName, sHValue, String.Empty, false, true, "Patient Height", Resource.prescribedrugs.PatientHeight_Tooltip + sHValue);
                    MedicationCommonBB.GetPatientAgeGenderDetails();
                    if (ContextManager.Instance.NameExists("Sgestationreq")) {
                        if ((ContextManager.Instance["Sgestationreq"]) != null) {
                            sGestationreq = ContextManager.Instance["Sgestationreq"].ToString();
                        }
                    }
                    if (sGestationreq == "1") {
                        this.PrescribingConsideration.UpdateNode("SectionConsideration", sGestationAge, sGestationAge, sGestationAgeValue, String.Empty, false, true, "Gestational age", sGestationAgeValue);
                    }
                }
                else {
                    arrValues = ObjectHelper.ToString(oReturn).Split(',');
                    if (arrValues.length > 0 && !String.IsNullOrEmpty(arrValues[0])) {
                        sWValue = arrValues[0].Replace("  ", " ");
                    }
                    if (arrValues.length > 1 && !String.IsNullOrEmpty(arrValues[1])) {
                        sHValue = arrValues[1].Replace("  ", " ");
                    }
                    if (arrValues.length > 2 && !String.IsNullOrEmpty(arrValues[2])) {
                        sGestationAgeValue = arrValues[2].Replace("  ", " ");
                    }
                    sWValue = sWValue.Replace(":Recorded", ": Recorded");
                    sHValue = sHValue.Replace(":Recorded", ": Recorded");
                    sGestationAgeValue = sGestationAgeValue.Replace(":Recorded", ": Recorded");
                    sWeight = (arrValues.length > 3 && !String.IsNullOrEmpty(arrValues[3])) ? arrValues[3].Trim() : String.Empty;
                    sHeight = (arrValues.length > 4 && !String.IsNullOrEmpty(arrValues[4])) ? arrValues[4].Trim() : String.Empty;
                    sGestation = (arrValues.length > 5 && !String.IsNullOrEmpty(arrValues[5])) ? arrValues[5].Trim() : String.Empty;
                    if (ipbVm != null) {
                        ipbVm.RecordEstWeightHeight(sHeight,sWeight,(o1)=>{sHeight=o1},(o2)=>{sWeight=o2}, arrValues);
                    }
                    this.PrescribingConsideration.AddNode("SectionConsideration", sWName, sWName, sWValue, String.Empty, false, true, "Patient Weight", Resource.prescribedrugs.PatientWeight_Tooltip + sWValue);
                    this.PrescribingConsideration.AddNode("SectionConsideration", sHName, sHName, sHValue, String.Empty, false, true, "Patient Height", Resource.prescribedrugs.PatientHeight_Tooltip + sHValue);
                    MedicationCommonBB.GetPatientAgeGenderDetails();
                    if (ContextManager.Instance.NameExists("Sgestationreq")) {
                        if ((ContextManager.Instance["Sgestationreq"]) != null) {
                            sGestationreq = ContextManager.Instance["Sgestationreq"].ToString();
                        }
                    }
                    if (sGestationreq == "1") {
                        this.PrescribingConsideration.AddNode("SectionConsideration", sGestationAge, sGestationAge, sGestationAgeValue, String.Empty, false, true, "Gestational age", sGestationAgeValue);
                    }
                }
                if (!String.IsNullOrEmpty(sHeight)) {
                    let sHeightRecordedOn: string = String.Empty;
                    sPatValueType = "Height";
                    if (arrValues != null && arrValues.length > 1) {
                        if (!String.IsNullOrEmpty(arrValues[1]) && arrValues[1].Contains(':')) {
                            sHeightRecordedOn = arrValues[1].Split(':')[2];
                            sHeightRecordedOn = sHeightRecordedOn.Trim().Substring(0, 11);
                        }
                    }
                    PatientContext.PatientHeightRecordedOn = sHeightRecordedOn;
                    ipbVm.ParseWeightHeight(sHeight, sPatValueType);
                }
                else {
                    PatientContext.PatientHEIGHT = String.Empty;
                    PatientContext.PatientHeightRecordedOn = String.Empty;
                }
                if (!String.IsNullOrEmpty(sWeight)) {
                    let sWeightRecordedOn: string = String.Empty;
                    sPatValueType = "Weight";
                    if (arrValues != null && arrValues.length > 0) {
                        if (!String.IsNullOrEmpty(arrValues[0]) && arrValues[0].Contains(':')) {
                            sWeightRecordedOn = arrValues[0].Split(':')[2];
                            sWeightRecordedOn = sWeightRecordedOn.Trim().Substring(0, 11);
                        }
                    }
                    PatientContext.PatientWeightRecordedOn = sWeightRecordedOn;
                    ipbVm.ParseWeightHeight(sWeight, sPatValueType);
                }
                else {
                    PatientContext.PatientWEIGHT = String.Empty;
                    PatientContext.PatientWeightRecordedOn = String.Empty;
                }
                this.PrescribingConsideration.AddNode("SectionConsideration", "BSA", "BSA:", String.Empty, String.Empty, false, false, "BSA", String.Empty);
                if ((!String.IsNullOrEmpty(sHeight) && !String.IsNullOrEmpty(sWeight) && !PatientContext.isEstimatedWeight && !PatientContext.isEstimatedHeight) || (!String.IsNullOrEmpty(sWeight) && !PatientContext.isEstimatedWeight)) {
                    CommonBB.GetPatientBSA(PatientContext.PatientOID, PatientContext.Age, sHeight, sWeight);
                }
                else {
                    PatientContext.BSA = String.Empty;
                    PatientContext.BSAFormula = String.Empty;
                }
                this.BSABeforeChange = PatientContext.BSA;
                this.BSAWEightBeforeChange = PatientContext.PatientWEIGHT;
            }
        }
        oResolveItem_IsDeactivateCtrlFocusChangedEvent(CtrlName: string): void {
            if (!String.IsNullOrEmpty(CtrlName)) {
                if (String.Compare(CtrlName, "cboRoute") == 0) {
                // let cboRoute: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
                    setTimeout(() => {
                    if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox) != null)
                        ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox).Focus();
                    }, 0);
                  
                }
                else if (String.Compare(CtrlName, "cboDosageForm") == 0) {
                // let cboDosageForm: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox) != null)
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox).Focus();
                }
                else if (String.Compare(CtrlName, "cboSite") == 0) {
                // let cboSite: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox) != null)
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox).Focus();
                }
                else if (String.Compare(CtrlName, "cboQuantity") == 0) {
                // let cboQuantity: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox) != null)
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox).Focus();
                }
                else if (String.Compare(CtrlName, "cboUOM") == 0) {
                // let cboUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox) != null) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox).Focus();
                    }
                }
                else if (String.Compare(CtrlName, "cboBoosterUOM") == 0) {
                // let cboBoosterUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox) != null) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox).Focus();
                    }
                }
                else if (String.Compare(CtrlName, "cboStrength") == 0) {
                // let cboStrength: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox) != null) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox).Focus();
                    }
                }
                else if (String.Compare(CtrlName, "cboInfustionRateUOM") == 0) {
                // let cboInfustionRateUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox) != null) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox).Focus();
                    }
                }
                else if (String.Compare(CtrlName, "cboInfusionRateUOM") == 0) {
                // let cboInfusionRateUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusionRateUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusionRateUOM"), iComboBox) != null) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusionRateUOM"), iComboBox).Focus();
                    }
                }
            }
        }
        oResolveItem_OnFormViewerControlFocus(): void {
        // let oInfusioncal: iButton = ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("Infusioncal"), iButton);
        if (ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("Infusioncal"), iButton) instanceof iButton) {
            ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("Infusioncal"), iButton).Focus();
            }
        }
        oResolveItem_OnHomeLeaveMsgFocus(): void {            
            if (this.frmRecordAdmin != null) {
                let oRecAdminDTTM: iDateTimePicker = null;

                if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                        oRecAdminDTTM = ObjectHelper.CreateType<iDateTimePicker>(this.oRecordAdminTab.Content.FindName("dtpAdminDate"), iDateTimePicker);
                    else
                        oRecAdminDTTM = this.ProxydtpAdminDate != null ? this.ProxydtpAdminDate : this.dupDialogRef.content.instance.Component.ProxydtpAdminDate;                
                }
                else
                    oRecAdminDTTM = this.ProxydtpAdminDate != null ? this.ProxydtpAdminDate : this.dupDialogRef.content.instance.Component.ProxydtpAdminDate;                
                if (oRecAdminDTTM instanceof iDateTimePicker) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                    }
                    oRecAdminDTTM.Focus();
                    this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Focus = true;
                }
            }            
        }
        public MultiRouteSelect: CListItem = null;
        public MultiRoute_PropertyChanged(sender: Object, e: PropertyChangedEventArgs): void {
            let IsFormViewerChanged: boolean = false;
            if(!this.oResolveItem){
                Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteVisible == Visibility.Visible && !this.oResolveItem.IsFormCancelled) {
                let AccessContraintControls: boolean = false;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Count > 0) {
                    AccessContraintControls = true;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableModificationcomments = true;
                if (sender != null && sender instanceof CListItem) {
                    this.MultiRouteSelect = ObjectHelper.CreateType<CListItem>(sender, CListItem);
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null) {
                    let selectedrouteClistitem: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected == true).ToArray();
                    let selectedInfusionRoute: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected == true && (cl.Tag != null && String.Compare(cl.Tag.ToString(), "1") == 0)).ToArray();
                    let selectedNonInfusionRoute: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected == true && (cl.Tag == null || String.Compare(cl.Tag.ToString(), "0") == 0)).ToArray();
                    if (this.iMultiRoute.SelectedItems != null && this.iMultiRoute.SelectedItems.Count < selectedrouteClistitem.Count()) {
                        if (!this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Route")) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Add("Route");
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.bIsAmend && !this.oResolveItem.FormViewerDetails.BasicDetails.IsFirstDoseClearForAmend && PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.DoChangesForAmend();
                            }
                        }
                    }
                    if (selectedrouteClistitem.Count() >= 1) {
                        if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsUnSelectMultipleRoutes) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.Route = ObjectHelper.CreateObject(new CListItem(), { DisplayText: MedicationCommonBB.RouteName(selectedrouteClistitem), Value: MedicationCommonBB.RouteOID(selectedrouteClistitem), Tag: MedicationCommonBB.RouteTag(selectedrouteClistitem) });
                        }
                        let LevelItems: CListItem[] = selectedrouteClistitem.Where(cl => cl.Level == 1 && cl.Tag != null && cl.Tag.ToString() == "1").ToArray();
                        if (LevelItems != null && LevelItems.Count() > 0) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.Route.Level = 1;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRoute = this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute ? true : false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsSiteEnabled = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsChangedmultiRoute = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.SiteFreeText = String.Empty;
                        if (selectedrouteClistitem != null && selectedrouteClistitem.Count() > 1) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsBrandMandatory = Visibility.Collapsed;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsStrengthMandatory = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMultipleActiveIngredients = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsSiteMandatory = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.Site = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.Strength = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsOldDosageFormMandatory = this.oResolveItem.FormViewerDetails.BasicDetails.IsDosageFormMandatory;
                        if (selectedrouteClistitem.Count() > 1) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableStrength = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsDosageFormMandatory = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage = false;
                        }
                        else if (selectedrouteClistitem.Count() == 1) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableStrength = true;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "0") {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsDosageFormMandatory = true;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage = true;
                            }
                        }
                    }
                    else if (selectedrouteClistitem.Count() == 0 && !this.oResolveItem.FormViewerDetails.BasicDetails.IsChangedmultiRoute) {
                        if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableStrength = false;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage = true;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableStrength = true;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.Route = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRoute = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsSiteEnabled = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsSiteMandatory = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsStrengthMandatory = false;
                        if (!this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsDosageFormMandatory = true;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.Site = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.Strength = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsBrandMandatory = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible = Visibility.Collapsed;
                        if (!this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                            this.SetNormalForm();
                        }
                    }
                    if (PatientContext.IsINFUSIONON && selectedInfusionRoute.Count() == 1 && selectedNonInfusionRoute.Count() == 0) {
                        this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;
                    }
                    if (!this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                        if (selectedInfusionRoute.Count() == 1 && selectedNonInfusionRoute.Count() == 0 && PatientContext.IsINFUSIONON == true) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.Infusions = true;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType = null;
                            this.SetInfusionForm((formViewerChangedFlag)=>{IsFormViewerChanged = formViewerChangedFlag}, true);
                            if (IsFormViewerChanged) {
                                this.DefaultDoseType(InfusionTypeCode.CONTINUOUS);
                                this.DoClearNonInfusionFields();
                                this.DoClearInfusionFields(false);
                                this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                                this.oResolveItem.FormViewerDetails.BasicDetails.SetAdditionalOptionMessage();
                            }
                            IsFormViewerChanged = false;
                            if (this.oResolveItem.formViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED)) {
                                let citem: CListItem = new CListItem();
                                citem.IsSelected = true;
                                citem.Value = DoseTypeCode.NORMAL;
                                citem.DisplayText = CConstants.sNormalDisplaytext;
                                this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = citem;
                            }
                        }
                        else if (selectedInfusionRoute.Count() == 0 && selectedNonInfusionRoute.Count() >= 0) {
                            this.SetNormalForm();
                        }
                    }
                    if (selectedInfusionRoute.Count() == 0 && selectedNonInfusionRoute.Count() == 0) {
                        this.BasicDetails_OnePrescribeRuleExecution(BasicDetailsVM_Ref.ePresRuleExecStatus.Completed);
                    }
                    if (selectedInfusionRoute.Count() > 0 && selectedrouteClistitem.Count() > 0 && (selectedInfusionRoute.Count() != selectedrouteClistitem.Count()) && PatientContext.IsINFUSIONON == true) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.Infusions = true;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList.Count > 0) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList.Where(x => String.Equals(x.Value, InfusionTypeCode.INTERMITTENT, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
                            }
                        }
                        else {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value != InfusionTypeCode.INTERMITTENT) {
                                let toRemove = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList.Where(x => x.Value == InfusionTypesCode.INTERMITTENT).ToList();
                                toRemove.forEach( (item)=> { this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType = item; });
                            }
                        }
                        if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration = true;
                        }
                        if (AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboFrequency") && this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency != null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = ObjectHelper.CreateObject(new CListItem(), {
                                Value: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.Value,
                                DisplayText: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.DisplayText,
                                Tag: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.Tag
                            });
                        }
                        this.SetInfusionForm((formViewerChangedFlag)=>{IsFormViewerChanged = formViewerChangedFlag}, false);
                        this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;
                        if (IsFormViewerChanged) {
                            this.DefaultDoseType(InfusionTypeCode.INTERMITTENT);
                            this.DoClearNonInfusionFields();
                            this.oResolveItem.FormViewerDetails.BasicDetails.SetAdditionalOptionMessage();
                        }
                        IsFormViewerChanged = false;
                        if (this.oResolveItem.formViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED)) {
                            let citem: CListItem = new CListItem();
                            citem.IsSelected = true;
                            citem.Value = DoseTypeCode.NORMAL;
                            citem.DisplayText = CConstants.sNormalDisplaytext;
                            this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = citem;
                        }
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsMandatoryStartdtSeq)
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsMandatoryStartdtSeq = true;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType = false;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isBrandMandatory) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isBrandMandatory = false;
                            }
                        }
                    }
                    if (selectedInfusionRoute.Count() > 0 && selectedrouteClistitem.Count() > 0 && (selectedInfusionRoute.Count() == selectedrouteClistitem.Count())) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType = true;
                            this.oResolveItem.formViewerDetails.BasicDetails.IsSiteEnabled = true;
                        }
                    }
                }
            }
        }
        IsFormViewerChangedSetNonInfusionForm: boolean = false;
        public SetNormalForm(): void {
            //let IsFormViewerChanged: boolean = false;
            let IsPreviousFormContinuousPCA: boolean = false;
            this.IsFormViewerChangedSetNonInfusionForm = false;
            if (PatientContext.IsINFUSIONON && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.PCA)) || this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded)) {
                IsPreviousFormContinuousPCA = true;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.Infusions = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType = null;
            setTimeout(() => {
                this.SetNonInfusionForm((formViewerChangedFlagOut)=>{this.IsFormViewerChangedSetNonInfusionForm = formViewerChangedFlagOut});
                this.SetNonInfusionFormLoadedEvent.emit();
            }, 0);
            let SetNonInfusionFormLoadedEvent = this.SetNonInfusionFormLoadedEvent.subscribe(data => {
                if (this.IsFormViewerChangedSetNonInfusionForm) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsSequenceStartDTTMReset = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM = CommonBB.GetServerDateTime();
                    this.DefaultDoseType(String.Empty);
                    this.DoClearInfusionFields(IsPreviousFormContinuousPCA);
                    this.IsFormViewerChangedSetNonInfusionForm = false;
                    SetNonInfusionFormLoadedEvent.unsubscribe();
                }
            });            
        }
        public MultiRouteChanged(): void {
            if (this.frmViewBasic == null) {
                this.frmViewBasic = new UserControl();
            }
        // this.iMultiRoute = ObjectHelper.CreateType<iMultiSelectDropdown>(this.frmViewBasic.FindName("iMultiRoute"), iMultiSelectDropdown);
            this.objfrm = ObjectHelper.CreateType<PrescriptionItemVM>(this.DataContext, PrescriptionItemVM);
            if (this.objMulti != null) {
                this.objMulti.RegisterMultiRouteEvent(this.frmViewBasic, this.objfrm, this.iMultiRoute,this);
            }
            if (this.oResolveItem != null) {
                this.oResolveItem.UpdateMultiRoutePropertyChangedEvent  = (s,e) => { this.ReRegisterMultirouteProperties(); } ;
            }
        }
        async SetNonInfusionForm(formViewerChangedFlag:(IsFormViewerChanged: boolean)=>void) {
            let IsFormViewerChanged = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
            let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmBasic");
            switch (PatientContext.PrescriptionType) {
                //Revisit Required
                
                case PrescriptionTypes.Clerking:
                    this.frmViewBasic = new FormViewMedClerk();
                    break;
                    
                case PrescriptionTypes.ForAdministration:
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = true;
                    if (this.frmViewBasic != null && !(oFauxTabItem.Content instanceof FormViewForAdmin)) {
                        // this.frmViewBasic = new FormViewForAdmin();
                        let frmForAdmin = new FormViewForAdmin();
                        frmForAdmin.ParentRef = this;
                        this.frmViewBasic = frmForAdmin;
                        IsFormViewerChanged = true;
                    }
                    this.oResolveItem.formViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                    formViewerChangedFlag(IsFormViewerChanged);
                    break;
                    
                case PrescriptionTypes.Discharge:
                case PrescriptionTypes.Outpatient:
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = true;
                // this.frmViewBasic = new FormViewOPDschg();
                let frmOPDschg = new FormViewOPDschg();
                frmOPDschg.ParentRef = this;
                this.frmViewBasic = frmOPDschg;
                    break;
                case PrescriptionTypes.Leave:
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = true;
                    // this.frmViewBasic = new FormViewLeave();
                    let frmLeave = new FormViewLeave();
                    frmLeave.ParentRef = this;
                    this.frmViewBasic = frmLeave;
                    break;
            }
           
            // setTimeout(() => {
            //     this.oResolveItem.FormviewerLoadedEvent.emit(true);
            // }, 0);
            if(oFauxTabItem.Content?.constructor.name != this.frmViewBasic.constructor.name)
                await this.tabReplacementForSelectionChanged(this.frmViewBasic);
            oFauxTabItem.Content = this.frmViewBasic;
        // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
            if (this.oTxtProblem instanceof iTextBox) {
                this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
                this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
            }
        // this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
            if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
                if (this.cboDoseType != null)
                    // this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
                this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
            }
            //this.SetNonInfusionFormLoadedEvent.emit();
        }
       
        async SetInfusionForm(formViewerChangedFlag:(IsFormViewerChanged: boolean)=>void, isalreardyLoaded: boolean) {
             //Revisit Required

            let IsFormViewerChanged = false;
            let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmBasic");
            if (this.frmViewBasic != null && !(oFauxTabItem.Content instanceof frmformviewForAdminConInfusions) && !(oFauxTabItem.Content instanceof frmformviewForAdminPCAInfusions) && !(oFauxTabItem.Content instanceof formViewIntermittent) || (this.frmViewBasic != null && isalreardyLoaded)) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.INTERMITTENT)) {
                    IsFormViewerChanged = true;
                    this.oResolveItem.formViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                    this.frmViewBasic = new formViewIntermittent();
                    this.frmViewBasic.ParentRef = this;
                }
                else {
                    IsFormViewerChanged = true;
                    this.oResolveItem.formViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                    this.frmViewBasic = new frmformviewForAdminConInfusions();
                    this.frmViewBasic.ParentRef = this;
                }
                formViewerChangedFlag(IsFormViewerChanged);
                // oFauxTabItem.Content = this.frmViewBasic;
                await this.tabReplacementForSelectionChanged(this.frmViewBasic);
                this.InfTypeInDrugVisibility();
            // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
                if (this.oTxtProblem instanceof iTextBox) {
                    this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
                    this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
                }
            // this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
            // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
                    if (this.cboDoseType != null)
                        // this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
                    this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
                }
            // this.cboInfusion = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox);
                if (this.cboInfusion instanceof iComboBox) {
                    this.cboInfusion.SelectionChanged  = (s,e) => { this.cboInfusion_SelectionChanged(s,e); } ;
                }
                if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.OrdinalIgnoreCase) == 0) {
                    let toRemove = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList.Where(x => x.Value == InfusionTypesCode.PCA).ToList();
                    toRemove.forEach( (item)=> { this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList.Remove(item); });
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? true : false;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets != null && this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets.Value != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem = Visibility.Collapsed;
                }
            }

        }
        
        MultiRouteInfusion_Close(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult != MessageBoxResult.Yes) {
                if (this.MultiRouteSelect != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.forEach( (Otem)=> {
                        if (Otem.Value == this.MultiRouteSelect.Value) {
                            Otem.IsSelected = false;
                        }
                    });
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteMessage = false;
                }
            }
        }
        private InfusionClerkingVisibility(): void {
            let isMCIItem: boolean = (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase)) ? true : false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ClkInfusionRateLabel = Resource.Infusion.lblInfusionRateLabel2_Text;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkContinVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkIntermitVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkPCAVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IsInfusionFluid, "1")) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = !isMCIItem ? Visibility.Visible : Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Visible;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Collapsed;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) == 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ClkInfusionRateLabel = Resource.Infusion.lblInfusionRateLabel2_Text;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkContinVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkIntermitVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkPCAVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = false;
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IsInfusionFluid, "1")) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = !isMCIItem ? Visibility.Visible : Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Visible;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Collapsed;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID) == 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ClkInfusionRateLabel = Resource.Infusion.lblInfusionRateLabel2_Text;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkContinVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkIntermitVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkPCAVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Collapsed;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA) == 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ClkInfusionRateLabel = Resource.Infusion.lblInfusionRateLabel1_Text;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkContinVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkIntermitVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkPCAVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleStopDate = Visibility.Visible;
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IsInfusionFluid, "1")) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = Visibility.Collapsed;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = !isMCIItem ? Visibility.Visible : Visibility.Collapsed;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Visible;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ClkInfusionRateLabel = Resource.Infusion.lblInfusionRateLabel1_Text;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkContinVisible = Visibility.Collapsed;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType == null || (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL) != 0))
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkIntermitVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkPCAVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleStopDate = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IsInfusionFluid, "1")) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = Visibility.Collapsed;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = !isMCIItem ? Visibility.Visible : Visibility.Collapsed;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
            }
            else {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ClkInfusionRateLabel = Resource.Infusion.lblInfusionRateLabel2_Text;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkContinVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkIntermitVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkPCAVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfBoosterDoseVisi = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IsInfusionFluid, "1")) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = !isMCIItem ? Visibility.Visible : Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Visible;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Collapsed;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfMedClerkIntermitVisible == Visibility.Collapsed && this.oResolveItem.FormViewerDetails.BasicDetails.DaysOfWeekVisibility == Visibility.Visible) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.DaysOfWeekVisibility = Visibility.Collapsed;
                }
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = ObjectHelper.CreateObject(new CListItem(), { DisplayText: "Normal", Value: DoseTypeCode.NORMAL });
                }
            }
        }
        public SteppedForAdmin(objmedipresolvestepped: medipresolvestepped, isIntermittent: boolean): medipresolvestepped {
            objmedipresolvestepped.txtLowerDose.IsEnabled = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend ? true : false);
            objmedipresolvestepped.txtUpperDose.IsEnabled = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend ? true : false);
            objmedipresolvestepped.lblDose.IsEnabled = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend ? true : false);
            objmedipresolvestepped.lblDose.Mandatory = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend ? ((String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) ? false : true) : false);
            objmedipresolvestepped.lblUOM.IsEnabled = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend ? true : false);
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Isdoseenable = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend ? true : false);
            }
            objmedipresolvestepped.lblFrequency.IsEnabled = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend? true : false);
            objmedipresolvestepped.lblFrequency.Mandatory = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend ? ((String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) ? false : true) : false);
            objmedipresolvestepped.cboFrequency.IsEnabled = (isIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend ? true : false);
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null)
                ToolTipService.SetToolTip(objmedipresolvestepped.txtVariable, "Specify instructions");
            objmedipresolvestepped.grdData.Columns["Variable"].Header = (isIntermittent ? "Variable dose instructions" : "Instructions");
            ;
            objmedipresolvestepped.grdData.Columns["Dosedet"].IsVisible = (isIntermittent ? true : false);
            objmedipresolvestepped.grdData.Columns["Infusionrate"].IsVisible = true;
            objmedipresolvestepped.grdData.Columns["Frequency"].IsVisible = (isIntermittent ? true : false);
            ;
            objmedipresolvestepped.grdData.Columns["Durationdet"].IsVisible = true;
            objmedipresolvestepped.grdData.Columns["Variable"].IsVisible = true;
            return objmedipresolvestepped;
        }
        //Revisit Required -- unreachable code
        /*
        public SteppedForDischarge(objmedresolvestepped: medresolvestepped, isIntermittent: boolean): medresolvestepped {
            objmedresolvestepped.txtLowerDose.IsEnabled = (isIntermittent ? true : false);
            objmedresolvestepped.txtUpperDose.IsEnabled = (isIntermittent ? true : false);
            objmedresolvestepped.lblDose.IsEnabled = (isIntermittent ? true : false);
            objmedresolvestepped.lblDose.Mandatory = (isIntermittent ? ((String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) ? false : true) : false);
            objmedresolvestepped.lblUOM.IsEnabled = (isIntermittent ? true : false);
            objmedresolvestepped.cboUOM.IsEnabled = (isIntermittent ? true : false);
            objmedresolvestepped.lblFrequency.IsEnabled = (isIntermittent ? true : false);
            objmedresolvestepped.lblFrequency.Mandatory = (isIntermittent ? ((String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) ? false : true) : false);
            objmedresolvestepped.cboFrequency.IsEnabled = (isIntermittent ? true : false);
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null)
                ToolTipService.SetToolTip(objmedresolvestepped.txtVariable, "Specify instructions");
            objmedresolvestepped.grdData.Columns["Variable"].Header = (isIntermittent ? "Variable dose instructions" : "Instructions");
            objmedresolvestepped.grdData.Columns["Dosedet"].IsVisible = (isIntermittent ? true : false);
            ;
            objmedresolvestepped.grdData.Columns["Infusionrate"].IsVisible = true;
            objmedresolvestepped.grdData.Columns["Frequency"].IsVisible = (isIntermittent ? true : false);
            ;
            objmedresolvestepped.grdData.Columns["Durationdet"].IsVisible = true;
        objmedresolvestepped.grdData.Columns["Variable"].IsVisible = true;
        return objmedresolvestepped;
    }
    */
    async tabReplacementForSelectionChanged(objForm){
        this.SetDynamicFormviewerHeight();
        this.frmViewBasic = ObjectHelper.CreateType<UserControl>(objForm, UserControl);
        this.frmViewBasic.DataContext = this.DataContext;
        let TabCallback = (s,e) => {this.frmViewBasic = s
            if(this.ftbFormViewDetails.SelectedKey == "frmBasic"){
            let newfrmbasictab =  this.ftbFormViewDetails.GetItem("frmBasic");
            newfrmbasictab.contentTemplateAtRunTime =  this.frmViewBasic;
            }
        };
        if(this.frmViewBasic && this.frmViewBasic.constructor.name == 'frmBasicFormViewer'){
            this.ftbFormViewDetails.KeepTabContent = true;
        }else{
            this.ftbFormViewDetails.KeepTabContent = false;
        }
        this.frmViewBasic = await this.ftbFormViewDetails.AddTabItem("frmBasic", "Basic details", this.frmViewBasic, true, "Basic details",null,TabCallback); 
        if(this.frmViewBasic && (this.frmViewBasic as any).constructor.name == 'frmBasicFormViewer'){
            (this.frmViewBasic as frmBasicFormViewer).afterDynamicControlInit.subscribe((data) => {
                this.constructorControlInit();
            })
        }else{
            this.constructorControlInit();
        }       
    }
    async cboInfusion_SelectionChanged(sender: Object, e: SelectionChangedEventArgs) {
        //Revisit Required
        
        let AccessContraintControls: boolean = false;
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Count > 0) {
            AccessContraintControls = true;
        }
        if (this.oResolveItem != null && e.AddedItems.Count > 0) {
            let newItem: CListItem = ObjectHelper.CreateType<CListItem>(e.AddedItems[0], CListItem);
                let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmBasic");
                if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.CurrentCultureIgnoreCase)) {
                    if ((this.oResolveItem != null && String.IsNullOrEmpty(this.oResolveItem.sOriginalType)) || (this.oResolveItem != null && !String.IsNullOrEmpty(this.oResolveItem.sOriginalType) && !String.Equals(this.oResolveItem.sOriginalType, InfusionTypeCode.INTERMITTENT, StringComparison.InvariantCultureIgnoreCase))) {
                        if (newItem != null && !String.IsNullOrEmpty(newItem?.Value) && String.Equals(newItem?.Value, InfusionTypeCode.INTERMITTENT, StringComparison.InvariantCultureIgnoreCase)) {
                            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart = true;
                        }
                    else {
                        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart = false;
                    }
                }
            }
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0 && oFauxTabItem != null && !(oFauxTabItem.Content instanceof frmformviewClerkinginfusions)) {
                this.frmViewBasic = new frmformviewClerkinginfusions();
                this.frmViewBasic.ParentRef = this;
                setTimeout(() => {
                    this.oResolveItem.FormviewerLoadedEvent.emit(true);
                }, 0);
                await this.tabReplacementForSelectionChanged(this.frmViewBasic);    
                this.InfusionClerkingVisibility();
                this.InfTypeInDrugVisibility();
                this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
            }
            else if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0 && oFauxTabItem != null && (oFauxTabItem.Content instanceof frmformviewClerkinginfusions)) {
                this.InfusionClerkingVisibility();
            }
            else if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) != 0 && newItem?.Value == InfusionTypesCode.INTERMITTENT && oFauxTabItem != null && !(oFauxTabItem.Content instanceof formViewIntermittent)) {
                this.frmViewBasic = new formViewIntermittent();
                this.frmViewBasic.ParentRef = this;
                setTimeout(() => {
                    this.oResolveItem.FormviewerLoadedEvent.emit(true);
                }, 0);
                if (this.oResolveItem != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
                    this.InfTypeInDrugVisibility();
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStat)
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminEnabled = false;
                    else this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminEnabled = true;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Bolus = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStopDate = true;
                        this.oResolveItem.formViewerDetails.BasicDetails.IsenableDuration = true;
                    }
                    if (AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboFrequency") && this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = ObjectHelper.CreateObject(new CListItem(), {
                            Value: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.Value,
                            DisplayText: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.DisplayText,
                            Tag: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.Tag
                        });
                    }
                }                
                await this.tabReplacementForSelectionChanged(this.frmViewBasic);
            }
            else if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) != 0 && (newItem?.Value == InfusionTypesCode.PCA && oFauxTabItem != null && !(oFauxTabItem.Content instanceof frmformviewForAdminPCAInfusions))) {
                this.frmViewBasic = new frmformviewForAdminPCAInfusions();
                this.frmViewBasic.ParentRef = this;
                setTimeout(() => {
                    this.oResolveItem.FormviewerLoadedEvent.emit(true);
                }, 0);
                await this.tabReplacementForSelectionChanged(this.frmViewBasic);
                this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
                this.InfTypeInDrugVisibility();
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminEnabled = true;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi = Visibility.Collapsed;
            }
            else if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) != 0 && (newItem?.Value == InfusionTypesCode.CONTINUOUS || newItem?.Value == InfusionTypesCode.SINGLEDOSEVOLUME || newItem?.Value == InfusionTypesCode.FLUID) && oFauxTabItem != null && !(oFauxTabItem.Content instanceof frmformviewForAdminConInfusions)) {
                this.frmViewBasic = new frmformviewForAdminConInfusions();
                this.frmViewBasic.ParentRef = this;
                setTimeout(() => {
                    this.oResolveItem.FormviewerLoadedEvent.emit(true);
                }, 0);
                await this.tabReplacementForSelectionChanged(this.frmViewBasic);
                this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
                this.InfTypeInDrugVisibility();
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminEnabled = true;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi = Visibility.Visible;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Bolus = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom = null;
                    }
                }
            // this.cmdReviewDetails = ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("cmdReviewDetails"), iButton);
                if (this.cmdReviewDetails != null) {
                    // this.cmdReviewDetails.Click -= new RoutedEventHandler(cmdReviewDetails_Click);
                    this.cmdReviewDetails.Click  = (s,e) => { this.cmdReviewDetails_Click(s,e); } ;
                }
            // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
                if (this.oTxtProblem instanceof iTextBox) {
                this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
                this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
            }
            // this.lblSupplyInst = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInst"), iLabel);
            if (this.lblSupplyInst instanceof iLabel) {
                // this.lblSupplyInst.MouseLeftButtonUp -= lblSupplyInst_MouseLeftButtonUp;
                this.lblSupplyInst.MouseLeftButtonUp = (s,e) => {
                    
                    Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
                    this.lblSupplyInst_MouseLeftButtonUp(s,e); }; //this.lblSupplyInst.MouseLeftButtonUp += lblSupplyInst_MouseLeftButtonUp;
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                }
            }
            else if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Collapsed;
            }
            // this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
            // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
            if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
                if (this.cboDoseType != null)
                    // this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
                this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
            }
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0 && oFauxTabItem != null && (oFauxTabItem.Content instanceof frmformviewClerkinginfusions)) {
                let citem: CListItem = new CListItem();
                citem.IsSelected = true;
                citem.Value = DoseTypeCode.NORMAL;
                citem.DisplayText = CConstants.sNormalDisplaytext;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME))) {
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.OrdinalIgnoreCase) == 0)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = false;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = true;
                    }
                    (<frmformviewClerkinginfusions>(oFauxTabItem.Content)).lblInfusionRate.Text = Resource.Infusion.lblInfusionRateLabel1_Text;
                    (<frmformviewClerkinginfusions>(oFauxTabItem.Content)).cboDoseType.SetBinding(iComboBox.ItemsSourceProperty, ObjectHelper.CreateObject(new Binding(this.DataContext, "FormViewerDetails.BasicDetails.DefaultDetails.InfuContDoseType"), { Mode: BindingMode.TwoWay }));
                }
                else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0) {
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.OrdinalIgnoreCase) == 0)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = false;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = true;
                    }
                    (<frmformviewClerkinginfusions>(oFauxTabItem.Content)).lblInfusionRate.Text = Resource.Infusion.lblInfusionRateLabel1_Text;
                    (<frmformviewClerkinginfusions>(oFauxTabItem.Content)).Infusioncal.Visibility = Visibility.Visible;
                    (<frmformviewClerkinginfusions>(oFauxTabItem.Content)).cboDoseType.SetBinding(iComboBox.ItemsSourceProperty, ObjectHelper.CreateObject(new Binding(this.DataContext, "FormViewerDetails.BasicDetails.DefaultDetails.InfuInterDoseType"), { Mode: BindingMode.TwoWay }));
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA, StringComparison.CurrentCultureIgnoreCase) == 0) {
                    (<frmformviewClerkinginfusions>(oFauxTabItem.Content)).lblInfusionRate.Text = Resource.Infusion.lblInfusionRateLabel_Text;
                    (<frmformviewClerkinginfusions>(oFauxTabItem.Content)).Infusioncal.Visibility = Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = ObjectHelper.CreateObject(new CListItem(), { DisplayText: "Normal", Value: DoseTypeCode.NORMAL });
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = false;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType == null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = citem;
                }
            }
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) == 0 && oFauxTabItem != null && (oFauxTabItem.Content instanceof formViewIntermittent)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.STEPPEDVARIABLE)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdminTimesVisible = Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableFrequency = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.Isdoseenable = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsFreqenable = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsfreqVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsSlottimesenable = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsAdmintimesenable = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsAdmintimesenable1 = true;
                }
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL) == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionTypeFlag = true;
                if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = false;
                    if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) {
                        this.ContentCtrlMedResolveStepped.Content = new medContConditionalDose();
                        this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext;
                    }
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = true;
                }
                if (!String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = true;
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsCondInfusionRateEnable = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ConditionalDoseValue = Resource.medConditionalDoseRes.lblDoseInfusionValue_Text;
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.GridDoseHeader = Resource.medConditionalDoseRes.grdCondition_DoseInfusionInstruction;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL) == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.INTERMITTENT)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionTypeFlag = true;
                if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = false;
                    if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose) {
                        this.ContentCtrlMedResolveStepped.Content = new medConditionalDose();
                        this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext;
                    }
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = false;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsConditionalDoseEnable = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateVisible = Visibility.Visible;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom == null)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsCondInfusionRateEnable = true;
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ConditionalDoseValue = Resource.medConditionalDoseRes.lblDoseInfusionValue_Text;
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.GridDoseHeader = Resource.medConditionalDoseRes.grdCondition_DoseInfusionInstruction;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE) == 0) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        let citem: CListItem = new CListItem();
                        citem.IsSelected = true;
                        citem.Value = DoseTypeCode.NORMAL;
                        citem.DisplayText = "Normal";
                        this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = citem;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsFrmInfusRateMand = true;
                    }
                    else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.Isdoseenable = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableFrequency = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryUOM = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusRateVisi = Visibility.Visible;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsfreqVisible = Visibility.Visible;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusRateMand = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsSlottimesenable = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsAdmintimesenable = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsAdmintimesenable1 = true;
                        if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusRateMand = false;
                        }
                        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                            if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                                (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).MedIpResolveSteppedLoadedFunc = (e) => {                            
                                    if(this.ContentCtrlMedResolveStepped.Content != e)
                                    {                             
                                      this.ContentCtrlMedResolveStepped.Content = e;                             
                                      this.ContentCtrlMedResolveStepped.Content = this.SteppedForAdmin((<medipresolvestepped>this.ContentCtrlMedResolveStepped.Content), true);
                                    }
                                }                                
                            }
                        }
                    }
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.NORMAL) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE) == 0) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.INTERMITTENT || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.CONTINUOUS || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.SINGLEDOSEVOLUME || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.FLUID || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.PCA))) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtInfusionRate")) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel = false;
                    }
                    if ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.CONTINUOUS || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.SINGLEDOSEVOLUME || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.FLUID) || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.PCA){
                        this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired = false;
                        //this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited = false;
                    }

                    if(e.AddedItems != null && e.removedItems != null)
                    this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited = false;

                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder <= 0) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInfustionRateUOM")) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
                        }
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInfusionRateUOM")) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl = false;
                    }
                }
            }
            this.EventWireUpForStopDTTM();
            this.EventWireUpForStartDTTM();
        }
        if(this.oResolveItem.IsFormViewerDisable){
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
        }
    }

        oTxtProblem_KeyDown(sender: Object, e): void {            
            if (!this.IsProblemLoaded && e.keyCode=='13') {           
                this.omeddrugindicationChild = new meddrugindicationChild();
                this.omeddrugindicationChild.constructorImpl(this.oTxtProblem.Text, this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode);
                this.omeddrugindicationChild.DataContext = this.DataContext;
                AppActivity.OpenWindow("LORENZO--Webpage Dialog",this.omeddrugindicationChild, (s,e)=>{ this.MeddrugindicationChild_Close(e)}, "", false, 440, 570, false, WindowButtonType.OkCancel, null);
                this.IsProblemLoaded = true;
            }
            e.Handled = true;            
        }
        lblReviewcopieddoses_MouseLeftButtonUp(sender: Object, e: MouseButtonEventArgs): void {
            //Revisit Required
            let oTitratedDoseCommonVM: TitratedDoseCommonVM = new TitratedDoseCommonVM();
            oTitratedDoseCommonVM.InputPrescriptionItemOID = this.oResolveItem.PrescriptionItemOID > 0 ? this.oResolveItem.PrescriptionItemOID : this.oResolveItem.SourcePrescriptionOid;
            let sTitle: string = String.Empty;
            this.oMedTitratedDoseView = new MedTitratedDoseView(oTitratedDoseCommonVM);
            this.oMedTitratedDoseView.onDialogClose = this.oMedTitratedDoseView_Closed;
            if (this.objfrm != null && this.objfrm.FormViewerDetails != null && this.objfrm.FormViewerDetails.BasicDetails != null && this.objfrm.FormViewerDetails.BasicDetails.itemSubType != null && String.Compare(this.objfrm.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                sTitle = CConstants.ADHOC_ITEM_NAME;
            }
            else {
                sTitle = this.objfrm.FormViewerDetails.BasicDetails.IdentifyingName;
            }
            AppActivity.OpenWindow(sTitle, this.oMedTitratedDoseView,(s,e)=>{this.oMedTitratedDoseView_Closed(s);}, "", false, 400, 930, false, WindowButtonType.Close, null);
        }
        oMedTitratedDoseView_Closed(args: AppDialogEventargs): void {
            // ObjectHelper.stopFinishAndCancelEvent(false);
            args.AppChildWindow.DialogResult = true;
        }
        frmViewBasic_Loaded(sender: Object, e: RoutedEventArgs): void {
            Common.HideBusyAlert();
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds && this.oResolveItem.ActionCode == ActivityTypes.Amend && QueryStringInfo.SelPrescItemOID > 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsfrmViewBasicLoaded = true;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.FocusControl)) {
                switch (this.oResolveItem.FocusControl) {
                    case "txtLowerDose":
                        this.txtLowerDose.Focus();
                        break;
                    case "txtBoosterDose":
                        this.txtBoosterDose.Focus();
                        break;
                    case "txtInfusionRate":
                        this.txtInfusionRate.Focus();
                        break;
                    case "txtBolus":
                        this.txtBolus.Focus();
                        break;
                    case "txtVolume":
                        this.txtVolume.Focus();
                        break;
                    case "cboRoute":
                        setTimeout(() => {                           
                                this.cboRoute.Focus();
                        }, 0);
                        break;
                    case "cboUOM":
                        this.cboUOM.Focus();
                        break;
                    case "cboFrequency":
					 setTimeout(() => {                           
                                this.cbofrequency.Focus();
                        }, 0);
                        break;
                    case "cboDosageForm":
                        this.cboDosageForm.Focus();
                        break;
                    case "cboStrength":
                    // let cboStrength1: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox);
                    if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox) instanceof iComboBox) {
                            this.cboStrength.Focus();
                        }
                        this.cboStrength.Focus();
                        break;
                    case "cboRsnForMod":
                        this.cboRsnForMod.Focus();
                        break;
                    case "cboSite":
                        this.cboSite.Focus();
                        break;
                    case "cmdBrand":
                        this.cmdBrand.Focus();
                        break;
                    case "cboStationary":
                    // let cboStationarys: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox);
                    if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox) instanceof iComboBox) {
                            this.cboStationary.Focus();
                        }
                        break;
                    case "cboModClerkReason":
                    // let cboModClerkReasongas: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox);
                    if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox) instanceof iComboBox) {
                        ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox).Focus();
                        }
                        break;
                }
            }
            else if (this.cboRoute != null) {
                
                    setTimeout(() => {
                        if (this.cboRoute.SelectedItem == null)
                            this.cboRoute.Focus();
                    }, 0);
            }
            else if (this.txtLowerDose != null) {
                if (String.IsNullOrEmpty(this.txtLowerDose.Text))
                    this.txtLowerDose.Focus();
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.DOSAGERANGE && this.txtUpperDose !=null && String.IsNullOrEmpty(this.txtUpperDose.Text)){
                if(this.txtUpperDose){     
                this.txtUpperDose.Focus();
                }
            }
            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Dose) && (this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM.Value))){
                if(this.cboUOM){     
                this.cboUOM.Focus();
                }
            }
            else if (this.cbofrequency != null) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency && (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.DisplayText))){
                    if(this.cbofrequency){     
                    this.cbofrequency.Focus();
                    }
                }
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm == null && this.oResolveItem.FormViewerDetails.BasicDetails.IsDosageFormMandatory){
                if(this.cboDosageForm){    
                  this.cboDosageForm.Focus();
                }
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.IsStrengthMandatory && this.oResolveItem.FormViewerDetails.BasicDetails.Strength == null){
                if(this.cboStrength){      
                  this.cboStrength.Focus();
                }
            }
            else if (this.oResolveItem.IsReasonForModificationVisible == Visibility.Visible && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD == true && this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD == true && (this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText) || this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText == "Select reason")){
                if(this.cboRsnForMod){      
                    this.cboRsnForMod.Focus();
                  }
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.IsSiteMandatory && this.oResolveItem.FormViewerDetails.BasicDetails.Site == null){
                if(this.cboSite){    
                  this.cboSite.Focus();
                }
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.IsBrandMandatory == Visibility.Visible && !this.oResolveItem.FormViewerDetails.BasicDetails.IsClearEnabled){
                if(this.cmdBrand){    
                    this.cmdBrand.Focus();
                }
            }
            else if ((this.oResolveItem.FormViewerDetails.BasicDetails.StationaryType == null) && (this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryStatType)){
                if(this.cboStationary){    
                    this.cboStationary.Focus();
                }
            }
            else if (this.cboModClerkReason != null) {
                if (this.oResolveItem.IsReasonForMedicationClerkModifyVisible == Visibility.Visible && this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify && (this.oResolveItem.FormViewerDetails.BasicDetails.MedClerkModifyReason == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MedClerkModifyReason.Value))){
                    if(this.cboModClerkReason){    
                      this.cboModClerkReason.Focus();
                    }
                }
            }
        }
        serviceProxy_IsAnyDrugContainGivenIngredientCompleted(sender: Object, e: IsAnyDrugContainGivenIngredientCompletedEventArgs): void {
            let bresult: boolean = (ObjectHelper.CreateType<CResMsgIsAnyDrugContainGivenIngredient>(e.Result, CResMsgIsAnyDrugContainGivenIngredient)).Result;
        }
        BasicDetails_PropertyChanged(sender: Object, e: PropertyChangedEventArgs): void {
            if (String.Compare(e.PropertyName, "DurationUOM") == 0 || String.Compare(e.PropertyName, "Duration") == 0) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.EndDTTM = this.UpdatedEndDTTM(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, this.oResolveItem.FormViewerDetails.BasicDetails.Duration,
                        this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value);
                }
            }
        }
        UpdatedEndDTTM(StartDTTM: DateTime, Duration: string, DurationUOM: string): DateTime{
            let EndDTTM: DateTime= DateTime.MinValue;
            if (!String.IsNullOrEmpty(Duration) && !String.IsNullOrEmpty(DurationUOM)) {
                let nDuration: number = Convert.ToInt32(Duration);
                switch (DurationUOM) {
                    case "CC_MINUTES":
                        EndDTTM = StartDTTM.AddMinutes(nDuration);
                        break;
                    case "CC_HOURS":
                        EndDTTM = StartDTTM.AddHours(nDuration);
                        break;
                    case "CC_MEDDRSN1":
                        EndDTTM = StartDTTM.AddDays(nDuration);
                        break;
                    case "CC_MEDDRSN2":
                        EndDTTM = StartDTTM.AddDays(nDuration * 7);
                        break;
                    case "CC_MEDRSN3":
                        EndDTTM = StartDTTM.AddMonths(Convert.ToInt32(nDuration));
                        break;
                    case "CC_MEDRSN4":
                        EndDTTM = StartDTTM.AddYears(Convert.ToInt32(nDuration));
                        break;
                }
            }
            return EndDTTM;
        }
        private UnLoaded(sender: Object, e: RoutedEventArgs): void {
            this.DisposeFormEvents();
        }
        mesage: iMessageBox = new iMessageBox();
        private PreviousSelectedIndex: number;
        private CurrentSelectedIndex: number;
        private MCIMsg: boolean;
        mesage_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                this.ftbFormViewDetails.SelectedIndex = this.CurrentSelectedIndex;
                //Revisit Required
                //this.frmViewTech.cmdAdd.Focus();
            }
            else {
                this.oResolveItem.FormViewerDetails.Popup = true;
                this.oResolveItem.CheckBasicMandatory(this.objMsg);
            }
        }
        ftbFormViewDetails_PreviewSelectionChanged(sender: Object, e: RadSelectionChangedEventArgs): void {
            if (this.oResolveItem != null) {
                this.oResolveItem.isTechVldMsg = false;
            }
            if (e.RemovedItems.Count == 0) {
                this.PreviousSelectedIndex = -1;
                this.MCIMsg = false;
            }
            else 
            {
                if (!this.isSelected) {
                    this.MCIMsg = true;
                    this.PreviousSelectedIndex = this.ftbFormViewDetails.Items.IndexOf(e.RemovedItems[0]);
                    let PrevSelectedTabKey: string = String.Empty;
                    if (e.RemovedItems[0] != null && e.RemovedItems[0] instanceof iTabItem && (ObjectHelper.CreateType<iTabItem>(e.RemovedItems[0], iTabItem)) != null) {
                        PrevSelectedTabKey = (ObjectHelper.CreateType<iTabItem>(e.RemovedItems[0], iTabItem)).Key;
                        if (!String.IsNullOrEmpty(PrevSelectedTabKey) && String.Equals(PrevSelectedTabKey, "frmmulticomponent")) {
                            this.oResolveItem.Set_IsParacetamolIngredient_Property(false);
                        }
                    }
                    if (!this.oResolveItem.IsConflictClick || (this.oResolveItem.IsConflictClick && (this.ftbFormViewDetails.SelectedKey == "frmConflicts" || this.ftbFormViewDetails.SelectedKey == "frmTech"))) {
                        if ((e != null && e.AddedItems != null && e.AddedItems.Count > 0))
                            this.CurrentSelectedIndex = this.ftbFormViewDetails.Items.IndexOf(e.AddedItems[0]);
                    }
                    else {
                        this.CurrentSelectedIndex = this.PreviousSelectedIndex;
                        this.oResolveItem.IsConflictClick = false;
                    }
                    if (!String.IsNullOrEmpty(this.isTechVldLod) && String.Compare(this.isTechVldLod, "true", StringComparison.InvariantCultureIgnoreCase) == 0 && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null)
                        this.oResolveItem.FormViewerDetails.Popup = false;
                    if (!String.IsNullOrEmpty(this.isTechVldLod) && String.Compare(this.isTechVldLod, "true", StringComparison.InvariantCultureIgnoreCase) == 0) {

                        if (String.Equals(PrevSelectedTabKey, "frmTech")) {
                            if (this.oResolveItem != null) {
                                this.oResolveItem.isTechVldMsg = true;
                            }
                            if (this.CheckTechValidate()) {
                                this.ftbFormViewDetails.SelectedIndex = this.CurrentSelectedIndex;
                            }
                            else {
                                this.ftbFormViewDetails.SelectedIndex = this.PreviousSelectedIndex;
                                this.TechValidation();
                            }
                            if (this.oResolveItem != null && this.oResolveItem.IsNextSupply) {
                                this.ftbFormViewDetails.Click("frmTech", true);
                                this.oResolveItem.isTechVldMsg = false;
                            }
                        }
                        else this.ftbFormViewDetails.SelectedIndex = this.CurrentSelectedIndex;

                    }
                    else if (this.bIsTypeIn) {
                        this.ftbFormViewDetails.SelectedIndex = this.CurrentSelectedIndex;
                    }
                    else {
                        this.ftbFormViewDetails.SelectedIndex = this.PreviousSelectedIndex;
                    }
                }
                this.oResolveItem.SetQuantityState();
            }
            this.isSelected = false;
        }
        private TechDefaultVal(): void {
            let sDispInstText: StringBuilder = new StringBuilder();
            let sDispInstValue: StringBuilder = new StringBuilder();
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DispensingInstruction != null) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText != null) {
                    this.sSupplyInst = this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText;
                }
                else {
                    this.sSupplyInst = "Select supply instructions to enter value(s)";
                }
                let SelectedDispInst = this.oResolveItem.FormViewerDetails.BasicDetails.DispensingInstruction.Where(dispInst => dispInst.IsSelected);
                if (SelectedDispInst != null) {
                    let nCount: number = SelectedDispInst.Count();
                    for (let i: number = 0; i < nCount; i++) {
                        let oItem: CListItem = SelectedDispInst.ElementAt(i);
                        if (String.Compare(oItem.Value, "CC_OTHER", StringComparison.OrdinalIgnoreCase) == 0)
                            sDispInstText.Append(oItem.Tag);
                        else sDispInstText.Append(oItem.DisplayText);
                        sDispInstValue.Append(oItem.Value);
                        if (i < nCount - 1) {
                            sDispInstText.Append(";");
                            sDispInstValue.Append(";");
                        }
                    }
                }
            }
            if (this.oResolveItem != null && this.oResolveItem.PresTechValidatedItemsChild != null && this.oResolveItem.PresTechValidatedItemsChild.Count > 0) {
                let nCount: number = this.oResolveItem.PresTechValidatedItemsChild.Count;
                let enabledSupplyInst: boolean = false;
                for (let i: number = 0; i <= nCount - 1; i++) {
                    if (this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SupplyInsText != null) {
                        this.sSupplyInst = this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SupplyInsText;
                    }
                    else {
                        this.sSupplyInst = "Select supply instructions to enter value(s)";
                    }
                    if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.InvariantCultureIgnoreCase)) && ((this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SelectedsupplyInstruction != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count > 0) || !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.Supplycomments) || !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SupplyInsVal) || (this.oResolveItem.PresTechValidatedItemsChild[i].SelectedSupplyreq != null && !String.Equals(this.oResolveItem.PresTechValidatedItemsChild[i].SelectedSupplyreq.Value, Resource.TechValidate.Empty)) || (this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.TechValSupplyInst != null && !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.TechValSupplyInst.Value)) || (this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails.TechValidatedItems != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                        enabledSupplyInst = true;
                    }
                    else {
                        if (!enabledSupplyInst)
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                    }
                }
            }
            if (sDispInstText.Length == 0) {

            }
            else {
                this.sDispInst = sDispInstText.ToString();
            }
        }
        private CheckTechValidate(): boolean {
            this.TechDefaultVal();            
            if ((this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails != null && !this.oResolveItem.FormViewerDetails.Popup) && ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.TechValidateDetails.Quantity)) || (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.TechValidateDetails.TotalQuantity)) || !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.TechValidateDetails.QuantityUOM)  || !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.TechValidateDetails.TotalQuantityUOM)) && (this.frmViewTech.cmdAdd.IsEnabled && (this.oResolveItem.FormViewerDetails.TechValidateDetails.TotalQuantity!="" || this.oResolveItem.FormViewerDetails.TechValidateDetails.QuantityUOM != "" || this.oResolveItem.FormViewerDetails.TechValidateDetails.TotalQuantityUOM != ""))) {
                return false;
            }
            else if (this.frmViewTech.cmdUpdate.IsEnabled) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems != null) {
                    let TechCount = this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count;
                    let nQtyPerDose: string, nTotalQty, sQntyUOM, sTotQntyUOM;
                    if (this.oResolveItem.FormViewerDetails.TechValidateDetails.QuantityUOM != null)
                        sQntyUOM = this.oResolveItem.FormViewerDetails.TechValidateDetails.QuantityUOM;
                    else sQntyUOM = String.Empty;
                    if (this.oResolveItem.FormViewerDetails.TechValidateDetails.TotalQuantityUOM != null)
                        sTotQntyUOM = this.oResolveItem.FormViewerDetails.TechValidateDetails.TotalQuantityUOM;
                    else sTotQntyUOM = String.Empty;
                    let oTechValidatedItem: TechValidatedItem = null;
                    if (this.frmViewTech != null && this.frmViewTech.grdDosecombinations != null && this.frmViewTech.grdDosecombinations.SelectedItem != null)
                        oTechValidatedItem = <TechValidatedItem>(this.frmViewTech.grdDosecombinations.SelectedItem);
                    for (let i: number = 0; i < TechCount; i++) {
                        nQtyPerDose = this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[i].QuantityPerDose;
                        nTotalQty = this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[i].TotalQuantity;
                        if ((oTechValidatedItem != null && oTechValidatedItem.DrugItem != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[i].DrugItem != null && oTechValidatedItem.DrugItem.IdentifyingOID == this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[i].DrugItem.IdentifyingOID && oTechValidatedItem.DrugItem.IdentifyingType == this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[i].DrugItem.IdentifyingType && !this.oResolveItem.FormViewerDetails.Popup) && (this.oResolveItem.FormViewerDetails.TechValidateDetails.Quantity != nQtyPerDose || this.oResolveItem.FormViewerDetails.TechValidateDetails.TotalQuantity != nTotalQty || (sQntyUOM != this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[i].QuantityPerDoseUOM.Name) || (sTotQntyUOM != this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[i].TotalQuantityUOM.Name))) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        private TechValidation(): boolean {
            if (!this.CheckTechValidate()) {
                let objTech: iMessageBox = new iMessageBox();
                objTech.Title = "Lorenzo - Manage prescription";
                objTech.MessageButton = MessageBoxButton.YesNo;
                objTech.IconType = MessageBoxType.Question;
                objTech.MessageBoxClose  = (s,e) => { this.objmsgtech_Close(s,e); } ;
                objTech.Message = Resource.MedicationForm.SteppedDetailsModify_Message;
                setTimeout(() => {
                    this.ftbFormViewDetails.Click("frmTech", true);
                }, 0);
                objTech.Show();
                return false;
            }
            return true;
        }

        isSelected: boolean = false;

        objmsgtech_Close(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult != MessageBoxResult.Yes) {
                this.isSelected = true;
                this.ftbFormViewDetails.SelectedIndex = this.CurrentSelectedIndex;
                // this.frmViewTech.ClearControls();
                this.frmViewTech.ClearControlsInit();
            }
            else {
                if(this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.frmViewTechValidatecmdUpdateThat != null){
                    if(this.frmViewTech.cmdUpdate == null){
                        if(this.frmViewTech.cmdAdd.IsEnabled)
                            this.frmViewTech.cmdAdd.IsEnabled = false;
                        this.frmViewTech.cmdUpdate = this.oResolveItem.FormViewerDetails.frmViewTechValidatecmdUpdateThat;
                    }
                }
                if (this.frmViewTech.cmdAdd.IsEnabled) {
                    if (!this.frmViewTech.AddClick()) {
                        this.ftbFormViewDetails.SelectedIndex = this.PreviousSelectedIndex;
                        return
                    }
                    else {
                        this.ftbFormViewDetails.SelectedIndex = this.CurrentSelectedIndex;
                    }
                }
                else if (this.frmViewTech.cmdUpdate.IsEnabled) {
                    if (!this.frmViewTech.UpdateClick()) {
                        this.ftbFormViewDetails.SelectedIndex = this.PreviousSelectedIndex;
                        return
                    }
                    else {
                        this.ftbFormViewDetails.SelectedIndex = this.CurrentSelectedIndex;
                    }
                }
            }
            if (this.frmViewBasic instanceof frmBasicFormViewer) {
                this.frmViewBasic.invokeDetectChanges();
            }
        }
        BasicDetails_RouteFormChangedEvent(): void {
            if (this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                this.oResolveItem.FormViewerDetails.BasicDetails.RouteRecorded = null;
            }
            let ItemType: string = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
            if (!String.Equals(ItemType, CConstants.NONCATALOGUEITEM) && !String.Equals(ItemType, CConstants.Precatalog)) {
                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableMultiRoute && this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteVisible == Visibility.Visible && this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteDropDownVisible == Visibility.Visible) {
                    this.IsRouteFormChanged = true;
                }
                let bIsCallFromRouteResetOnBrandSelection: boolean = false;
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    bIsCallFromRouteResetOnBrandSelection = this.oResolveItem.FormViewerDetails.BasicDetails.IsCallFromRouteResetOnBrandSelection;
                }
                if (!bIsCallFromRouteResetOnBrandSelection && !(this.oResolveItem.MCIGridchange && String.Compare(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.GetFormViewControls('1' , (s,e) => { this.RouteOrFormChange_GetFormViewControlsCompleted(s,e); } , "RF");
                }
            }
        }
        
        IsRecordAdminTabEnabledChangedEvent() : void{
            if(!this.oResolveItem?.FormViewerDetails?.BasicDetails?.IsRecordAdminTabEnabled){
                this.chkRecordAdmin_Unchecked(null,null);                            
            }
            else if(this.oResolveItem?.FormViewerDetails?.BasicDetails?.IsRecordAdminTabEnabled){
                this.chkRecordAdmin_Checked(null,null);                             
            }
            this.oRecordAdminTab = this.ftbFormViewDetails.GetItem("frmRecordAdmin");
            this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled; 
        }

        chkRecordAdmin_Unchecked(sender: Object, e: RoutedEventArgs): void {
            if (this.oRecordAdminTab != null) {
                this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin = new RecordAdminVM();
                this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.IsLoaded = false;
                this.oResolveItem.IsParacetamolAdministered = null;
                this.oResolveItem.IsParacetamolAdministeredMsgDisplayed = false;
            }
        }
        chkRecordAdmin_Checked(sender: Object, e: RoutedEventArgs): void {
            if (this.oRecordAdminTab != null) {
                let bAlreadyRecordAdminEnabled: boolean = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && this.oResolveItem.IsAddedToResolveGrid;
                if (!bAlreadyRecordAdminEnabled) {
                    if (ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value) {
                        if (!ObjectHelper.HasValue(this.oResolveItem.IsParacetamolAdministered)) {
                            this.oResolveItem.IsAnyParacetamolAdministered();
                        }
                        else if (this.oResolveItem.IsParacetamolAdministered.Value) {
                            this.oResolveItem_DisplayParacetamolWarningMessage(true);
                        }
                        else {
                            this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled = true;
                        }
                    }
                    else if (!ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient)) {
                        this.oResolveItem.Set_IsParacetamolIngredient_Property(true);
                    }
                    else {
                        this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled = true;
                    }
                }
                else {
                    this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled = true;
                }
            }
        }
        oResolveItem_DisplayParacetamolWarningMessage(bDisplayWarning: boolean): void {
            if (bDisplayWarning) {
                let objDisplayParacetamolWarning: iMessageBox = new iMessageBox();
                objDisplayParacetamolWarning.Title = Resource.MedicationForm.MsgBoxTitleName;
                objDisplayParacetamolWarning.MessageButton = MessageBoxButton.YesNo;
                objDisplayParacetamolWarning.IconType = MessageBoxType.Question;
                objDisplayParacetamolWarning.Width = 420;
                objDisplayParacetamolWarning.Height = 180;                
                objDisplayParacetamolWarning.MessageBoxClose  = (s,e) => { this.objDisplayParacetamolWarning_MessageBoxClose(s,e); } ;
                objDisplayParacetamolWarning.Message = Resource.MedicationForm.ParacetamolAdministration_WarningMsg;
                objDisplayParacetamolWarning.Show();
                if (this.oResolveItem != null) {
                    this.oResolveItem.IsParacetamolAdministeredMsgDisplayed = true;
                }
            }
            else {                          
                if (!this.oResolveItem.IsParacetamolAdministeredMsgDisplayed && !this.ParacetamolRecordadminOkClickBeingValidated && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value) {
                    let IsStatOrOnceOnly: boolean = this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag instanceof (Array<string> as typeof Array<string>)) && (ObjectHelper.CreateType<string[]>(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag, Array<string>)).length > 1 && String.Equals((ObjectHelper.CreateType<string[]>(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag, Array<string>))[1], CConstants.OnceOnlyFrequency, StringComparison.CurrentCultureIgnoreCase);
                    if (IsStatOrOnceOnly && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Count > 0) {
                        let dtSchDTTM: DateTime= this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsFixedTime ? this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].ScheduleDTTM : this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].DrugroundDTTM;
                        let dtCurrent: DateTime= CommonBB.GetServerDateTime();
                        let dtStartDTTM: DateTime= this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM;
                        dtStartDTTM = dtStartDTTM.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime);
                        if (DateTime.GreaterThanOrEqualTo(dtSchDTTM.DateTime.AddHours(dtSchDTTM.Hour).AddMinutes(dtSchDTTM.Minute), dtStartDTTM.DateTime.AddHours(dtStartDTTM.Hour).AddMinutes(dtStartDTTM.Minute)) && (DateTime.LessThanOrEqualTo(dtSchDTTM.AddMinutes(-MedChartData.DuenessThreshold), dtStartDTTM)) && DateTime.GreaterThan(dtCurrent, dtSchDTTM.AddMinutes(MedChartData.DuenessThreshold))) {
                            this.DisplayParacetamolGenericMsg();
                        }
                    }
                }
               
                if (this.dupDialogRef != null && this.dupDialogRef.content != null && this.dupDialogRef.content.instance != null
                    && this.dupDialogRef.content.instance.Component != null) {
                    if (this.dupDialogRef.content.instance.Component.ParacetamolRecordadminOkClickBeingValidated) {
                        this.ParacetamolAlreadyAdministeredWarning_Displayed = true;
                        this.dupDialogRef.content.instance.Component.ParacetamolAlreadyAdministeredWarning_Displayed = true;
                        this.ParacetamolRecordadminOkClickBeingValidated = false;
                        if (this.onDialogClose != null) {
                            this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                        }
                    }
                    else {                                        
                    //    this.chkRecordAdmin = ObjectHelper.CreateType<iCheckBox>(this.dupDialogRef.content.instance.Component.chkRecordAdmin, iCheckBox);
                        this.oRecordAdminTab = ObjectHelper.CreateType<iTabItem>(this.dupDialogRef.content.instance.Component.oRecordAdminTab, iTabItem);
                        //Revisit required with Siva - Removed IsChecked condition as new reference of the checkbox is not there. Old reference of checkbox still remains
                        //if (ObjectHelper.HasValue(this.chkRecordAdmin.IsChecked) && this.chkRecordAdmin.IsChecked.Value) {
                        if(this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled){
                            this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled = true;
                        }
                    }
                }
                else {
                    if (this.ParacetamolRecordadminOkClickBeingValidated) {
                        this.ParacetamolAlreadyAdministeredWarning_Displayed = true;
                        this.dupDialogRef.content.instance.Component.ParacetamolAlreadyAdministeredWarning_Displayed = true;
                        this.ParacetamolRecordadminOkClickBeingValidated = false;
                        if (this.onDialogClose != null) {
                            this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                        }
                    }
                    else {                                      
                    //    this.chkRecordAdmin = ObjectHelper.CreateType<iCheckBox>(this.chkRecordAdmin, iCheckBox);
                        this.oRecordAdminTab = ObjectHelper.CreateType<iTabItem>(this.oRecordAdminTab, iTabItem);
                        //Revisit required with Siva - Removed IsChecked condition as new reference of the checkbox is not there. Old reference of checkbox still remains
                        //if (ObjectHelper.HasValue(this.chkRecordAdmin.IsChecked) && this.chkRecordAdmin.IsChecked.Value) {
                        if(this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled){
                            this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled = true;
                        }
                    }
                }                                      
            }
        }
        objDisplayParacetamolWarning_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
                if(this.dupDialogRef != null && this.dupDialogRef.content != null && this.dupDialogRef.content.instance != null 
                    && this.dupDialogRef.content.instance.Component != null){
                var curObj = this.dupDialogRef.content.instance.Component;
                if (e.MessageBoxResult == MessageBoxResult.No) {
                    curObj.ParacetamolAlreadyAdministeredWarning_Displayed = false;
                    if (!curObj.ParacetamolRecordadminOkClickBeingValidated) {
                        curObj.chkRecordAdmin.IsChecked = false;
                    }
                }
                else {
                    curObj.ParacetamolAlreadyAdministeredWarning_Displayed = true;
                    if (curObj.ParacetamolRecordadminOkClickBeingValidated) {
                        if (this.onDialogClose != null) {
                            this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: curObj, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                        }
                    }
                    else {                        
                        if (ObjectHelper.HasValue(curObj.chkRecordAdmin.IsChecked) && curObj.chkRecordAdmin.IsChecked.Value) {
                        //if(curObj.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled){
                            curObj.oRecordAdminTab.IsEnabled = curObj.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled = true;
                        }
                    }
                }
                curObj.ParacetamolRecordadminOkClickBeingValidated = false;
            }
            else
            {                
                if (e.MessageBoxResult == MessageBoxResult.No) {
                    this.ParacetamolAlreadyAdministeredWarning_Displayed = false;
                    if (!this.ParacetamolRecordadminOkClickBeingValidated) {
                        this.chkRecordAdmin.IsChecked = false;
                    }
                }
                else {
                    this.ParacetamolAlreadyAdministeredWarning_Displayed = true;
                    if (this.ParacetamolRecordadminOkClickBeingValidated) {
                        if (this.onDialogClose != null) {
                            this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                        }
                    }
                    else {
                        if (ObjectHelper.HasValue(this.chkRecordAdmin.IsChecked) && this.chkRecordAdmin.IsChecked.Value) {
                            this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled = true;
                        }
                    }
                }
                this.ParacetamolRecordadminOkClickBeingValidated = false;
            }
        }
        public DisplayParacetamolGenericMsg(): void {
            let objDisplayGenericParacetamolWarning: iMessageBox = new iMessageBox();
            objDisplayGenericParacetamolWarning.Title = Resource.MedicationForm.MsgBoxTitleName;
            objDisplayGenericParacetamolWarning.MessageButton = MessageBoxButton.OK;
            objDisplayGenericParacetamolWarning.IconType = MessageBoxType.Question;
            objDisplayGenericParacetamolWarning.Width = 420;
            objDisplayGenericParacetamolWarning.Height = 155;
            objDisplayGenericParacetamolWarning.Message = Resource.MedicationForm.RecAdminParacetamolGenericMsg;
            objDisplayGenericParacetamolWarning.Show();
        }
        iTimeStopDateTime_ValueChanged(sender: Object, e: RoutedPropertyChangedEventArgs<DateTime>): void {
            let _IsDosesDuration: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value, ConstDurationUOM.Doses, StringComparison.InvariantCultureIgnoreCase) && PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration) {
                _IsDosesDuration = true;
            }
            let IsSubsequentSequenceItem: boolean = false;
            IsSubsequentSequenceItem = CommonSequentialHelper.IsSequeneSubsequentItem(this.oResolveItem);
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null 
                && (!this.oResolveItem.FormViewerDetails.BasicDetails.IsChangeFromDurationOrStartDTTM && e.OldValue != undefined && DateTime.NotEquals(e.OldValue,e.NewValue)))   // //&& !this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime.Equals(e.NewValue)
            {
                if ((this.oResolveItem.FormViewerDetails.BasicDetails.DoseType == null) || (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value != DoseTypeCode.STEPPEDVARIABLE && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value != DoseTypeCode.STEPPED && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value != DoseTypeCode.VARIABLE)) {
                    this.ClearDuration();
                }
                let tmpDateTime: DateTime= DateTime.MinValue;
                if (sender != null) {
                    let objTimeBox: iTimeBox = ObjectHelper.CreateType<iTimeBox>(sender, iTimeBox);
                    if (objTimeBox != null && objTimeBox.IsDST && ObjectHelper.HasValue(e.NewValue) && TimeZoneInfo.Local.IsAmbiguousTime(e.NewValue.Value)) {
                        tmpDateTime = e.NewValue.Value.ToUniversalTime().AddHours(this.dOffset).ToLocalTime();
                    }
                }
                if (DateTime.NotEquals(tmpDateTime, DateTime.MinValue)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = tmpDateTime;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = tmpDateTime;
                }
                else {
                    let IsContOrPCAInfusion: boolean = (PatientContext.IsINFUSIONON && (this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && ((String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.FLUID)) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.PCA))))) ? true : false;
                    if (!IsContOrPCAInfusion && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.INTERMITTENT)))) {
                        let tmpDTTM: DateTime= DateTime.MinValue;
                        if (ObjectHelper.HasValue(e.NewValue) && DateTime.NotEquals(e.NewValue.Value, DateTime.MinValue) && e.NewValue.Value.DateTime.Year > CConstants.DateTimeMinYear) {
                            tmpDTTM = e.NewValue.Value;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = ObjectHelper.HasValue(e.NewValue) ? e.NewValue.Value : DateTime.MinValue;
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = (DateTime.NotEquals(tmpDTTM, DateTime.MinValue)) ? e.NewValue.Value : DateTime.MinValue;
                    }
                }
            }
            else if ((DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate.Date ,DateTime.MinValue) && DateTime.Equals (e.NewValue , DateTime.MinValue)) && !_IsDosesDuration && !IsSubsequentSequenceItem) {
           // else if ((this.oResolveItem.FormViewerDetails.BasicDetails.StopDate.Date == DateTime.MinValue && e.NewValue == DateTime.MinValue) && !_IsDosesDuration && !IsSubsequentSequenceItem) {
                if ( !this.oResolveItem.FormViewerDetails.BasicDetails.IsChangeFromDurationOrStartDTTM && (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType == null) || (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value != DoseTypeCode.STEPPEDVARIABLE && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value != DoseTypeCode.STEPPED && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value != DoseTypeCode.VARIABLE)) {
                    this.ClearDuration();
                }
            }
            if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped && (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)) != null) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)) {
                    let dtTemp: DateTime= this.oResolveItem.FormViewerDetails.BasicDetails.StopDate.Date;
                    if (ObjectHelper.HasValue(e.NewValue) && DateTime.NotEquals(e.NewValue, DateTime.MinValue)) {
                        dtTemp = dtTemp.DateTime.AddTime(e.NewValue.Value);
                    }
                    else {
                        dtTemp = dtTemp.Date;
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsStopDTTMAutoUpdate = true;
                    (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStopDatetimeValue.Text = " " + dtTemp.ToUserDateTimeString("dd-MMM-yyyy HH:mm");
                }
                else {
                    (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStopDatetimeValue.Text = String.Empty;
                }
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null )
            {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsChangeFromDurationOrStartDTTM=false;
            }
        }
        dtpStopDate_OnDateValueChanged(sender: Object, e: DateChangedArgs): void {
            if(e.oldValue == undefined){
                e.oldValue = DateTime.MinValue;
            }
             //if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate.Date, e.ModifiedDate.Date) || (DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate.Date, DateTime.MinValue) && DateTime.Equals(e.ModifiedDate.Date, DateTime.MinValue))) {
                if(!this.oResolveItem.FormViewerDetails.BasicDetails.IsChangeFromDurationOrStartDTTM && (DateTime.NotEquals(e.oldValue.Date, e.ModifiedDate.Date) || (DateTime.Equals(e.oldValue.Date, DateTime.MinValue) && DateTime.Equals(e.ModifiedDate.Date, DateTime.MinValue)))) {
                    this.ClearDuration();
                    if (!(DateTime.Equals(e.oldValue?.Date, DateTime.MinValue) && DateTime.Equals(e.ModifiedDate.Date, DateTime.MinValue))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = e.ModifiedDate;
                    }
            }
            if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped && (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)) != null) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)) {
                    let dtTemp: DateTime= this.oResolveItem.FormViewerDetails.BasicDetails.StopDate.Date;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime != null && ObjectHelper.HasValue(this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime, DateTime.MinValue)) {
                        dtTemp = dtTemp.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value);
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsStopDTTMAutoUpdate = true;
                    (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStopDatetimeValue.Text = " " + dtTemp.ToUserDateTimeString("dd-MMM-yyyy HH:mm");
                }
                else {
                    (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStopDatetimeValue.Text = String.Empty;
                }
            }
        }
        dtStartDateBackUp: DateTime= DateTime.MinValue;
        dtSelectedStartDate: DateTime= DateTime.MinValue;
        public dtpStartDate_OnDateValueChanged(sender: Object, e: DateChangedArgs): void {
            let _ErrorID: number = 80000062;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, Class:Medformviewer, Method:dtpStartDate_OnDateValueChanged()";
            try {
                if (this.oResolveItem != null && this.oResolveItem.formViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    if ((DateTime.NotEquals(e.ModifiedDate.Date, this.oResolveItem.FormViewerDetails.BasicDetails.StartDateOnLaunch.Date)) && (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDateOnLaunch, DateTime.MinValue))) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) {
                            if (!this.oResolveItem.FormViewerDetails.BasicDetails.TimeMinValueFlag) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.TimeMinValueFlag = false;
                            }
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.TimeMinValueFlag = false;
                        }
                    }
                    if ((DateTime.NotEquals(e.ModifiedDate, DateTime.MinValue) && DateTime.NotEquals(e.ModifiedDate.Date, this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM = e.ModifiedDate;
                    }
                }
                if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase)) {
                    if (DateTime.NotEquals(e.ModifiedDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase)) && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.CompleteStartDTTM, DateTime.MinValue) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.CompleteStartDTTM.Date, e.ModifiedDate.Date)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged = true;
                        this.dtStartDateBackUp = this.oResolveItem.FormViewerDetails.BasicDetails.CompleteStartDTTM;
                        this.dtSelectedStartDate = e.ModifiedDate.Date;
                        this.SteppedDoseStartDTTMAlert(CActionTrigerredFrom.iDateTimePickerControl);
                    }
                }
                else {
                    if (DateTime.NotEquals(e.ModifiedDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase)) && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date, e.ModifiedDate.Date)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged = true;
                        this.dtStartDateBackUp = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM;
                        this.SteppedDoseStartDTTMAlert(CActionTrigerredFrom.iDateTimePickerControl);
                    }
                }
                if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped && (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)) != null) {
                    if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails == null || (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count == 0) || (DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.CompleteStartDTTM, DateTime.MinValue))) {
                            if (DateTime.NotEquals(e.ModifiedDate.Date, DateTime.MinValue)) {
                                let dtTemp: DateTime= e.ModifiedDate.Date;
                                (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue.Text = " " + dtTemp.ToUserDateTimeString("dd-MMM-yyyy HH:mm");
                            }
                        }
                    }
                    else {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)) {
                            let dtTemp: DateTime= this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date;
                            if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue)) {
                                dtTemp = dtTemp.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime);
                            }
                            (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue.Text = " " + dtTemp.ToUserDateTimeString("dd-MMM-yyyy HH:mm");
                        }
                        else {
                            if (DateTime.NotEquals(this.dtpStartDate.SelectedDateTime.Date, DateTime.MinValue.Date)) {
                                let dtTemp: DateTime= this.dtpStartDate.SelectedDateTime.Date;
                                if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue)) {
                                    dtTemp = dtTemp.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime);
                                }
                                (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue.Text = " " + dtTemp.ToUserDateTimeString("dd-MMM-yyyy HH:mm");
                            }
                            else (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue.Text = String.Empty;
                        }
                    }
                }
            }
           catch(ex:any)  {
                let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
            }

        }
        public iTimeStartDateTime_ValueChanged(sender: Object, e: RoutedPropertyChangedEventArgs<DateTime>): void {
            let _ErrorID: number = 80000063;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, Class:Medformviewer, Method:iTimeStartDateTime_ValueChanged()";
            try {
                if ((e.OldValue != null) && (e.OldValue != e.NewValue)) {
                    if (this.oResolveItem != null && this.oResolveItem.formViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.TimeMinValueFlag = false;
                    }
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged && !this.oResolveItem.FormViewerDetails.BasicDetails.IsStepDoseStartDTTMRestored && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase)) && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && e.OldValue != null && e.NewValue != null && (ObjectHelper.HasValue(e.OldValue) ? e.OldValue.Value : DateTime.MinValue) != (ObjectHelper.HasValue(e.NewValue) ? e.NewValue.Value : DateTime.MinValue)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged = true;
                    this.dtStartDateBackUp = this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime;
                    this.SteppedDoseStartDTTMAlert(CActionTrigerredFrom.iTimeBoxControl);
                }
                if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped && (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)) != null) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)) {
                        let dtTemp: DateTime= this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date;
                        if (ObjectHelper.HasValue(e.NewValue) && DateTime.NotEquals(e.NewValue, DateTime.MinValue)) {
                            dtTemp = dtTemp.DateTime.AddTime(e.NewValue.Value);
                        }
                        else {
                            dtTemp = dtTemp.Date;
                        }
                        (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue.Text = " " + dtTemp.ToUserDateTimeString("dd-MMM-yyyy HH:mm");
                    }
                    else {
                        (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue.Text = String.Empty;
                    }
                }
            }
           catch(ex:any)  {
                let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
            }

        }
        public RemoveAdditionalStepdose(): boolean {
            let IsAdditionalDosesElapsed: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && !String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking)) {
                let CurrentDTTM: DateTime= FormviewerCommonData.ServerDateTime;
                let tmpStartDTTM: DateTime= DateTime.MinValue;
                if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue)) {
                    tmpStartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime);
                }
                else {
                    tmpStartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date;
                }
                let OnceOnlyMultiDoseDtl = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(c => c.IsAdditionalDose);
                if (OnceOnlyMultiDoseDtl != null && OnceOnlyMultiDoseDtl.Count() > 0) {
                    if (DateTime.NotEquals(CurrentDTTM, DateTime.MinValue) && !String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking) && DateTime.NotEquals(tmpStartDTTM, DateTime.MinValue) && (DateTime.GreaterThan(CurrentDTTM.Date, tmpStartDTTM.Date) || DateTime.LessThan(CurrentDTTM.Date, tmpStartDTTM.Date))) {
                        IsAdditionalDosesElapsed = true;
                    }
                    else {
                        for( let i:number=0; i< OnceOnlyMultiDoseDtl.Count() ; i++){
                            let oMultipleDoseDetail : MultipleDoseDetail =  OnceOnlyMultiDoseDtl[i];
                            if (tmpStartDTTM > oMultipleDoseDetail.StartDTTM) {
                                IsAdditionalDosesElapsed = true;
                                break;
                            }
                         }
                    }
                }
            }
            return IsAdditionalDosesElapsed;
        }
        objRemoveAdditionalDoseMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                if (e.MessageBoxResult == MessageBoxResult.OK) {
                    let CurrentDTTM: DateTime= FormviewerCommonData.ServerDateTime;
                    let tmpStartDTTM: DateTime= DateTime.MinValue;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime != DateTime.MinValue) {
                        tmpStartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime);
                    }
                    else {
                        tmpStartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date;
                    }
                    if (CurrentDTTM != DateTime.MinValue && tmpStartDTTM != DateTime.MinValue && (CurrentDTTM.Date > tmpStartDTTM.Date || CurrentDTTM.Date < tmpStartDTTM.Date)) {
                        let toRemove = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(S => S.IsAdditionalDose).ToList();
                        toRemove.forEach( (item)=> {
                            this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Remove(item);
                        });
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                            let objStepped: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                            if (objStepped != null) {
                                objStepped.IsAdditionalDoseConfirmMsgShown = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsAdditionalDoseOpted = false;
                            }
                        }
                    }
                    else {
                        let toRemove = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(S => S.IsAdditionalDose && tmpStartDTTM > S.StartDTTM).ToList();
                        toRemove.forEach( (item)=> {
                            this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Remove(item);
                        });
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(S => S.IsAdditionalDose).ToList().Count == 0 && this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                            let objStepped: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                            if (objStepped != null) {
                                objStepped.IsAdditionalDoseConfirmMsgShown = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsAdditionalDoseOpted = false;
                            }
                        }
                    }
                    this.UpdateSteppedDoseStartDTTMChanged();
                    this.oResolveItem.FormViewerDetails.BasicDetails.SetAdditionalOptionMessage();
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsOKButtonClicked = false;
            }
        }
        SteppedDoseStartDTTMAlert(iActionTrigerredFrom: string): void {
            let objStartDateMsgBox: iMessageBox = new iMessageBox();
            objStartDateMsgBox.Tag = iActionTrigerredFrom;
            objStartDateMsgBox.sender = iActionTrigerredFrom;
            objStartDateMsgBox.Title = Resource.MedicationForm.MsgBoxTitleName;
            objStartDateMsgBox.MessageButton = MessageBoxButton.YesNo;
            objStartDateMsgBox.IconType = MessageBoxType.Question;
            // objStartDateMsgBox.MessageBoxClose -= objStartDateMsgBox_MessageBoxClose;
            objStartDateMsgBox.MessageBoxClose  = (s,e) => { this.objStartDateMsgBox_MessageBoxClose(s,e); } ;
            objStartDateMsgBox.Message = Resource.MedicationForm.SteppedDoseStartDTTMAlert1 + Environment.NewLine + Environment.NewLine + Resource.MedicationForm.SteppedDoseStartDTTMAlert2;
            objStartDateMsgBox.Show();
        }
        public UpdateSteppedDoseStartDTTMChanged(): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.UpdateSteppedDoseAdminTimes(true);
            if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                let oMedipresolvestepped: medipresolvestepped = <medipresolvestepped>this.ContentCtrlMedResolveStepped.Content;
                if (oMedipresolvestepped.oAdminTimesVM != null && oMedipresolvestepped.oAdminTimesVM.FreqDetails != null && oMedipresolvestepped.oAdminTimesVM.FreqDetails.oFrequency != null && !String.IsNullOrEmpty(oMedipresolvestepped.oAdminTimesVM.FreqDetails.oFrequency.Type) && String.Equals(oMedipresolvestepped.oAdminTimesVM.FreqDetails.oFrequency.Type, "CC_INTERVAL") && (this.objfrm != null && this.objfrm.FormViewerDetails != null && this.objfrm.FormViewerDetails.BasicDetails != null && this.objfrm.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.objfrm.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && this.objfrm.FormViewerDetails.BasicDetails.SelectedDoseDetail == null)) {
                    oMedipresolvestepped.oAdminTimesVM_FreqDetailsCompleted();
                }
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsOKButtonClicked) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsOKButtonClicked = false;
                if (this.OKClickValidations()) {
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
        }
        objStartDateMsgBox_MessageBoxClose(sender: any, e: MessageEventArgs): void {
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                if (e.MessageBoxResult == MessageBoxResult.Yes) {
                    if (this.RemoveAdditionalStepdose()) {
                        let objStartDateMsgBox: iMessageBox = new iMessageBox();
                        objStartDateMsgBox.Title = Resource.MedicationForm.MsgBoxTitleName;
                        objStartDateMsgBox.MessageButton = MessageBoxButton.OK;
                        objStartDateMsgBox.IconType = MessageBoxType.Question;
                        // objStartDateMsgBox.MessageBoxClose -= objRemoveAdditionalDoseMsgBox_MessageBoxClose;
                        objStartDateMsgBox.MessageBoxClose  = (s,e) => { this.objRemoveAdditionalDoseMsgBox_MessageBoxClose(s,e); } ;
                        objStartDateMsgBox.Message = Resource.MedicationForm.ValidateRemoveAdditionalStepDose;
                        objStartDateMsgBox.Show();
                    }
                    else {
                        this.UpdateSteppedDoseStartDTTMChanged();
                    }
                    if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped && (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)) != null) {
                        if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking) {
                            if ((this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0)) {
                                if (DateTime.NotEquals(this.dtSelectedStartDate, DateTime.MinValue)) {
                                    let dtTemp: DateTime= this.dtSelectedStartDate;
                                    (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).lblStartDatetimeValue.Text = " " + dtTemp.ToUserDateTimeString("dd-MMM-yyyy HH:mm");
                                }
                            }
                        }
                    }
                }
                else if (e.MessageBoxResult == MessageBoxResult.No) {
                    // let objStartDateMsgBox: iMessageBox = ObjectHelper.CreateType<iMessageBox>(sender, iMessageBox);
                    // if (objStartDateMsgBox instanceof iMessageBox) {
                        if (String.Equals(sender.ToString(), CActionTrigerredFrom.iDateTimePickerControl)) {
                            if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.CompleteStartDTTM = this.dtStartDateBackUp;
                            }
                            else {
                                this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM = this.dtStartDateBackUp;
                            }
                        }
                        else if (String.Equals(sender.ToString(), CActionTrigerredFrom.iTimeBoxControl)) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime = this.dtStartDateBackUp;
                        }
                    // }
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsOKButtonClicked = false;
            }
        }
        private ClearDuration(): void {
            let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmBasic");
            let objBasicForm: Object = null;
            if (oFauxTabItem != null && oFauxTabItem.Content != null) {
                objBasicForm = oFauxTabItem.Content;
            }
            let _IsDurationDoCLear: boolean = true;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMedsFromDOS) {
                if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds) {
                    _IsDurationDoCLear = false;
                }
                else if (!String.IsNullOrEmpty(this.oResolveItem.ItemSubType) && String.Equals(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.InvariantCultureIgnoreCase) && !this.CheckBasicTabLoaded(objBasicForm)) {
                    _IsDurationDoCLear = false;
                }
            }
            if (_IsDurationDoCLear) {
                if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration))
                    this.oResolveItem.FormViewerDetails.BasicDetails.Duration = String.Empty;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM != null)
                    this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM = null;
            }
            else {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsMedsFromDOS = true;
            }
        }
        private CheckBasicTabLoaded(frmbasicForm: Object): boolean {
            let _IsUserControlload: boolean = false;
            if (frmbasicForm != null) {
            if (frmbasicForm instanceof FormViewForAdmin) {
                if ((ObjectHelper.CreateType<FormViewForAdmin>(frmbasicForm, FormViewForAdmin)) != null && (ObjectHelper.CreateType<FormViewForAdmin>(frmbasicForm, FormViewForAdmin)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof frmBasicFormViewer) {
                if ((ObjectHelper.CreateType<frmBasicFormViewer>(frmbasicForm, frmBasicFormViewer)) != null && (ObjectHelper.CreateType<frmBasicFormViewer>(frmbasicForm, frmBasicFormViewer)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof FormViewForAdminAppliance) {
                if ((ObjectHelper.CreateType<FormViewForAdminAppliance>(frmbasicForm, FormViewForAdminAppliance)) != null && (ObjectHelper.CreateType<FormViewForAdminAppliance>(frmbasicForm, FormViewForAdminAppliance)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof frmformviewForAdminConInfusions) {
                if ((ObjectHelper.CreateType<frmformviewForAdminConInfusions>(frmbasicForm, frmformviewForAdminConInfusions)) != null && (ObjectHelper.CreateType<frmformviewForAdminConInfusions>(frmbasicForm, frmformviewForAdminConInfusions)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof FormViewForAdminOxygen) {
                if ((ObjectHelper.CreateType<FormViewForAdminOxygen>(frmbasicForm, FormViewForAdminOxygen)) != null && (ObjectHelper.CreateType<FormViewForAdminOxygen>(frmbasicForm, FormViewForAdminOxygen)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof frmformviewForAdminPCAInfusions) {
                if ((ObjectHelper.CreateType<frmformviewForAdminPCAInfusions>(frmbasicForm, frmformviewForAdminPCAInfusions)) != null && (ObjectHelper.CreateType<frmformviewForAdminPCAInfusions>(frmbasicForm, frmformviewForAdminPCAInfusions)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof frmformviewForAdminPCAInfusions) {
                if ((ObjectHelper.CreateType<frmformviewForAdminPCAInfusions>(frmbasicForm, frmformviewForAdminPCAInfusions)) != null && (ObjectHelper.CreateType<frmformviewForAdminPCAInfusions>(frmbasicForm, frmformviewForAdminPCAInfusions)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            // else if (frmbasicForm instanceof FormViewGases) {
            //     if ((ObjectHelper.CreateType<FormViewGases>(frmbasicForm, FormViewGases)) != null && (ObjectHelper.CreateType<FormViewGases>(frmbasicForm, FormViewGases)).bIsLoaded) {
            //         _IsUserControlload = true;
            //     }
            // }
            else if (frmbasicForm instanceof formViewIntermittent) {
                if ((ObjectHelper.CreateType<formViewIntermittent>(frmbasicForm, formViewIntermittent)) != null && (ObjectHelper.CreateType<formViewIntermittent>(frmbasicForm, formViewIntermittent)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof FormViewLeave) {
                if ((ObjectHelper.CreateType<FormViewLeave>(frmbasicForm, FormViewLeave)) != null && (ObjectHelper.CreateType<FormViewLeave>(frmbasicForm, FormViewLeave)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof FormViewMedClerk) {
                if ((ObjectHelper.CreateType<FormViewMedClerk>(frmbasicForm, FormViewMedClerk)) != null && (ObjectHelper.CreateType<FormViewMedClerk>(frmbasicForm, FormViewMedClerk)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof TypeinFormViewAppliance) {
                if ((ObjectHelper.CreateType<TypeinFormViewAppliance>(frmbasicForm, TypeinFormViewAppliance)) != null && (ObjectHelper.CreateType<TypeinFormViewAppliance>(frmbasicForm, TypeinFormViewAppliance)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof FormViewOPDschg) {
                if ((ObjectHelper.CreateType<FormViewOPDschg>(frmbasicForm, FormViewOPDschg)) != null && (ObjectHelper.CreateType<FormViewOPDschg>(frmbasicForm, FormViewOPDschg)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            else if (frmbasicForm instanceof frmviewInfClerkGasOxygn) {
                if ((ObjectHelper.CreateType<frmviewInfClerkGasOxygn>(frmbasicForm, frmviewInfClerkGasOxygn)) != null && (ObjectHelper.CreateType<frmviewInfClerkGasOxygn>(frmbasicForm, frmviewInfClerkGasOxygn)).bIsLoaded) {
                    _IsUserControlload = true;
                }
            }
            
        }
        return _IsUserControlload;
    }
        oTxtProblem_OnClick(sender: Object, e: MouseButtonEventArgs): void {            
            if (!this.IsProblemLoaded) {                
                this.omeddrugindicationChild = new meddrugindicationChild();
                this.omeddrugindicationChild.constructorImpl(this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndicationTerm, this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode);
                this.omeddrugindicationChild.DataContext = this.DataContext;
                let oMedAccessChildCB = (child, extendedchild) => {
                    this.omeddrugindicationChild = child
                }
                AppActivity.OpenWindow("LORENZO--Webpage Dialog", this.omeddrugindicationChild,(s,e)=>{this.MeddrugindicationChild_Close(s);}, "", false, 440, 570, false, WindowButtonType.OkCancel, null,null, null,oMedAccessChildCB);
                this.IsProblemLoaded = true;
            }            
        }
        
        MeddrugindicationChild_Close(args: AppDialogEventargs): void {
            this.IsProblemLoaded = false;
            let objDrugInd: meddrugindicationChild;
            this.oChildWindow = args.AppChildWindow;
            if (args.Result == AppDialogResult.Ok && args.Content != null && args.Content.Component != null) {
                objDrugInd = ObjectHelper.CreateType<meddrugindicationChild>(args.Content.Component, meddrugindicationChild);
                let strbLst: StringBuilder = new StringBuilder();
                let strbLstValue: StringBuilder = new StringBuilder();
                let strbLstTerm: StringBuilder = new StringBuilder();
                let lstPat: List<Int32> = objDrugInd.lstPatientProblems.SelectedIndices;
                let lstInd: List<Int32> = objDrugInd.lstAssocIndications.SelectedIndices;
                let IsProblemSFSAvail: boolean = objDrugInd.trmBrowser != null && objDrugInd.trmBrowser.oTerminologyUtility != null && objDrugInd.trmBrowser.oTerminologyUtility.oTerminologyBrowserEventArgs != null && !String.IsNullOrEmpty(objDrugInd.trmBrowser.oTerminologyUtility.SearchText) ? true : false;
                let sName: string = String.Empty;
                let sValue: string = String.Empty;
                let arrValue: string[] = null;
                for (let i: number = 0; i < lstPat.Count; i++) {
                    sName = objDrugInd.lstPatientProblems.GetText(lstPat[i]);
                    sValue = objDrugInd.lstPatientProblems.GetValue(lstPat[i]);
                    if (!String.IsNullOrEmpty(sValue))
                        arrValue = sValue.Split(',');
                    let oProblemObject: ProblemObject = null;
                    if (arrValue != null && arrValue.length > 1 && !String.IsNullOrEmpty(sValue)) {
                        oProblemObject = ObjectHelper.CreateObject(new ProblemObject(), {
                            ProblemOID: arrValue[0],
                            ProblemName: sName,
                            Term: arrValue[1],
                            ProblemCode: arrValue[0],
                            CodingCode: "SNOMED CT"
                        });
                        if (arrValue.length > 4)
                            oProblemObject.Version = arrValue[4];
                    }
                    if (oProblemObject != null) {
                        strbLst.Append(sName);
                        strbLstTerm.Append(sName);
                        strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.ProblemOID) ? oProblemObject.ProblemOID : String.Empty);
                        strbLstValue.Append("#");
                        strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.ProblemName) ? oProblemObject.ProblemName : String.Empty);
                        strbLstValue.Append("#");
                        strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.Code) ? oProblemObject.Code : String.Empty);
                        strbLstValue.Append("#");
                        strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.Term) ? oProblemObject.Term : String.Empty);
                        strbLstValue.Append("#");
                        strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.Version) ? oProblemObject.Version : String.Empty);
                        strbLstValue.Append("#");
                        strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.ProblemCode) ? oProblemObject.ProblemCode : String.Empty);
                        strbLstValue.Append("#");
                        strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.CodingCode) ? oProblemObject.CodingCode : String.Empty);
                        strbLstValue.Append("#");
                        strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.TermKey) ? oProblemObject.TermKey : String.Empty);
                    }
                    if ((i < lstPat.Count - 1 || lstInd.Count > 0 || IsProblemSFSAvail) && oProblemObject != null) {
                        strbLst.Append(", ");
                        strbLstTerm.Append("~^");
                        strbLstValue.Append("!");
                    }
                }
                if (IsProblemSFSAvail) {
                    sName = objDrugInd.trmBrowser.oTerminologyUtility.oTerminologyBrowserEventArgs.objBrowserDetails.Description;
                    sValue = objDrugInd.trmBrowser.oTerminologyUtility.oTerminologyBrowserEventArgs.objBrowserDetails.SNOMEDConceptID;
                    let sTag: string = objDrugInd.trmBrowser.oTerminologyUtility.oTerminologyBrowserEventArgs.objBrowserDetails.SNOMEDDescriptionID;
                    let oSFSProblemObject: ProblemObject = ObjectHelper.CreateObject(new ProblemObject(), {
                        ProblemOID: "PROBLEMSFS",
                        ProblemName: sName,
                        Code: "", //sValue,
                        Term: "", //sValue,
                        Version: "", //sValue,
                        ProblemCode: "",
                        CodingCode: "SNOMED CT",
                        TermKey: sTag
                    });
                    strbLst.Append(sName);
                    strbLstTerm.Append(sName);
                    strbLstValue.Append(!String.IsNullOrEmpty(oSFSProblemObject.ProblemOID) ? oSFSProblemObject.ProblemOID : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oSFSProblemObject.ProblemName) ? oSFSProblemObject.ProblemName : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oSFSProblemObject.Code) ? oSFSProblemObject.Code : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oSFSProblemObject.Term) ? oSFSProblemObject.Term : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oSFSProblemObject.Version) ? oSFSProblemObject.Version : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oSFSProblemObject.ProblemCode) ? oSFSProblemObject.ProblemCode : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oSFSProblemObject.CodingCode) ? oSFSProblemObject.CodingCode : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oSFSProblemObject.TermKey) ? oSFSProblemObject.TermKey : String.Empty);
                    if (lstInd.Count > 0) {
                        if(oSFSProblemObject.ProblemName!='')
                        strbLst.Append(", ");
                        strbLstTerm.Append("~^");
                        strbLstValue.Append("!");
                    }
                }
                for (let j: number = 0; j < lstInd.Count; j++) {
                    sName = objDrugInd.lstAssocIndications.GetText(lstInd[j]);
                    arrValue = objDrugInd.lstAssocIndications.GetValue(lstInd[j]).Split(',');
                    let oProblemObject: ProblemObject = ObjectHelper.CreateObject(new ProblemObject(), {
                        ProblemOID: arrValue[0],
                        ProblemName: sName,
                        Term: sName,
                        Version: arrValue[2],
                        ProblemCode: arrValue[2]
                    });
                    strbLst.Append(sName);
                    strbLstTerm.Append(sName);
                    strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.ProblemOID) ? oProblemObject.ProblemOID : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.ProblemName) ? oProblemObject.ProblemName : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.Code) ? oProblemObject.Code : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.Term) ? oProblemObject.Term : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.Version) ? oProblemObject.Version : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.ProblemCode) ? oProblemObject.ProblemCode : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.CodingCode) ? oProblemObject.CodingCode : String.Empty);
                    strbLstValue.Append("#");
                    strbLstValue.Append(!String.IsNullOrEmpty(oProblemObject.TermKey) ? oProblemObject.TermKey : String.Empty);
                    if (j < lstInd.Count - 1) {
                        strbLst.Append(", ");
                        strbLstTerm.Append("~^");
                        strbLstValue.Append("!");
                    }
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication = strbLst.ToString();
                this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndicationTerm = strbLstTerm.ToString();
                this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode = strbLstValue.ToString();
                //this.oChildWindow.DialogResult = false;
                // ObjectHelper.stopFinishAndCancelEvent(false);
		this.omeddrugindicationChild.dupDialogRef.close();
            // let oTxtAddComments: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox);
            if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox) instanceof iTextBox)
                ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox).Focus();
            }
            else {
                let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                    Title: "LORENZO",
                    Message: Resource.disconcan1.Cancel_Error_Message,
                    MessageButton: MessageBoxButton.YesNo,
                    IconType: MessageBoxType.Question
                });
                iMsgBox.MessageBoxClose  = (s,e) => { this.iMsgBox_MessageBoxClose_App(s,e); } ;
                iMsgBox.Show();
            }
        }
        
        iMsgBox_MessageBoxClose_App(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                //this.oChildWindow.DialogResult = false;
                // ObjectHelper.stopFinishAndCancelEvent(false);
                this.omeddrugindicationChild.dupDialogRef.close();
            }
        // let oTxtAddComments: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox);
        if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox) instanceof iTextBox)
            ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox).Focus();
        }
        cboDosageForm_SelectionChanged(sender: Object, e: SelectionChangedEventArgs): void {
            //Revisit Required
            if ((
                this.frmViewBasic instanceof FormViewLeave || 
                this.frmViewBasic instanceof FormViewForAdmin || 
                this.frmViewBasic instanceof FormViewOPDschg
                 || this.frmViewBasic instanceof FormViewMedClerk
                 || this.frmViewBasic instanceof TypeinFormViewForAdmin
                ) && this.oResolveItem != null && e.AddedItems != null && e.AddedItems.Count > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm != null && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                let oDosageForm: CListItem = ObjectHelper.CreateType<CListItem>(e.AddedItems[0], CListItem);
                if (oDosageForm != null && String.Compare(oDosageForm.Value, this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm.Value) != 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.Route = null;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsTextWithComments = null;
        }
    }
    GetBasicformContent(oFauxTabItem: iTabItem): string {

        let BasicformContent: string = String.Empty;
        
        if (oFauxTabItem.Content != null && oFauxTabItem.Content instanceof frmformviewForAdminConInfusions) {
            BasicformContent = InfusionTypesCode.CONTINUOUS;
        }
        else if (oFauxTabItem.Content != null && oFauxTabItem.Content instanceof formViewIntermittent) {
            BasicformContent = InfusionTypesCode.INTERMITTENT;
        }
        else if (oFauxTabItem.Content != null && oFauxTabItem.Content instanceof frmformviewForAdminPCAInfusions) {
            BasicformContent = InfusionTypesCode.PCA;
        }
        else {
            if (this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch == '\0' && !this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value)) {
                    switch (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) {
                        case InfusionTypeCode.CONTINUOUS:
                            BasicformContent = InfusionTypesCode.CONTINUOUS;
                                break;
                            case InfusionTypeCode.PCA:
                                BasicformContent = InfusionTypeCode.PCA;
                                break;
                            case InfusionTypeCode.INTERMITTENT:
                                BasicformContent = InfusionTypeCode.INTERMITTENT;
                            break;
                    }
                }
            }
            else BasicformContent = InfusionTypesCode.INTERMITTENT;
        }
        
        return BasicformContent;
    }
    private loadInfusionForm(): UserControl {
        if (PatientContext.IsINFUSIONON) {
            switch (PatientContext.PrescriptionType) {
                case PrescriptionTypes.Clerking:
                        this.EventUnWirapped(this.frmViewBasic?.constructor.name);
                    this.ChangeDynamicForm(new frmformviewClerkinginfusions());
                        this.InfusionClerkingVisibility();
                        break;
                }
                this.EventWirapped(PrescriptionTypes.Clerking);
            }
            return this.frmViewBasic;
        }
        public EventWirapped(FormKey: string): void {
            if(!this.oResolveItem){
                Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
            }
            this.oResolveItem.EventWrapValueTabChange = FormKey;
        // this.cboRoute = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
        // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
            if (this.oTxtProblem instanceof iTextBox) {
                this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
                this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
            }
        // this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
            if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
                if (this.cboDoseType != null)
                    // this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
                this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
            }
        // this.cboInfusion = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox);
            if (this.cboInfusion instanceof iComboBox) {
                this.cboInfusion.SelectionChanged  = (s,e) => { this.cboInfusion_SelectionChanged(s,e); } ;
            }
        // this.cboDeliveryDevice = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDeliveryDevice"), iComboBox);
            if (this.cboDeliveryDevice instanceof iComboBox) {
                this.cboDeliveryDevice.SelectionChanged  = (s,e) => { this.cboDeliveryDevice_SelectionChanged(s,e); } ;
            }
            switch (FormKey) {
                case InfusionTypeCode.CONTINUOUS:
                // this.chckOngoing = ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chckOngoing"), iCheckBox);
                    if (this.chckOngoing instanceof iCheckBox) {
                        this.chckOngoing.Checked  = (s,e) => { this.chckOngoing_Checked(s,e); } ;
                        this.chckOngoing.Unchecked  = (s,e) => { this.chckOngoing_Unchecked(s,e); } ;
                    }
                    break;
            }
        // this.cmdReviewDetails = ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("cmdReviewDetails"), iButton);
            if (this.cmdReviewDetails != null) {
                // this.cmdReviewDetails.Click -= cmdReviewDetails_Click;
                this.cmdReviewDetails.Click  = (s,e) => { this.cmdReviewDetails_Click(s,e); } ;
            }
        }
        cboDeliveryDevice_SelectionChanged(sender: Object, e: SelectionChangedEventArgs): void {
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking) != 0) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.VARIABLE || this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.STEPPED || this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.STEPPEDVARIABLE) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID) == 0) && ProfileData.InfusionPresConfig != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice.DisplayText != null) {
                        let InfusionrateNUMDEMUOM = ProfileData.InfusionPresConfig.objInfusDeliveryDevice.Where(UOMDEMO => UOMDEMO.DeviceName==this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice.DisplayText).FirstOrDefault();
                        if (InfusionrateNUMDEMUOM != null && !String.IsNullOrEmpty(InfusionrateNUMDEMUOM.InfusionRateNumUOMCode)) {
                            let oItemNum: CListItem = new CListItem();
                            let oItemDenom: CListItem = new CListItem();
                            oItemNum.DisplayText = InfusionrateNUMDEMUOM.InfusionRateNumUOMCode;
                            oItemNum.Value = InfusionrateNUMDEMUOM.InfusionRateNumUOMOID;
                            oItemDenom.DisplayText = InfusionrateNUMDEMUOM.InfusionRateDenomUOMCode;
                            oItemDenom.Value = InfusionrateNUMDEMUOM.InfusionRateDenomUOMOID;
                            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) == 0) {
                                if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                                    if (!String.IsNullOrEmpty(oItemNum.DisplayText)) {
                                        if ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.ItemsSource != null) {
                                            for( let i:number=0; i< (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.ItemsSource.Count ; i++){
                                                let oItem : CListItem =  (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.ItemsSource[i];                                            
                                                if (oItem.Value == oItemNum.Value) {
                                                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.SelectedValue = oItem;
                                                    break;
                                                }
                                            }
                                        }
                                        (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.IsEnabled = false;
                                    }
                                    if (!String.IsNullOrEmpty(oItemDenom.DisplayText)) {
                                        if ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.ItemsSource != null) {
                                            for( let i:number=0; i< (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.ItemsSource.Count ; i++){
                                                let oItem : CListItem =  (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.ItemsSource[i];                                            
                                                if (oItem.Value == oItemDenom.Value) {
                                                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.SelectedValue = oItem;
                                                    break;
                                                }
                                            }
                                        }
                                        (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.IsEnabled = false;
                                    }
                                }
                            }
                        }
                        else {
                            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) == 0) {
                                if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.IsEnabled = true;
                                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.IsEnabled = true;
                                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.SelectedValue = null;
                                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.SelectedValue = null;
                                }
                            }
                        }
                    }
                }
            }
        }
        public EventUnWirapped(FormKey: string): void {
        // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
            // if (this.oTxtProblem instanceof iTextBox) {
            //     this.oTxtProblem.OnClick -= oTxtProblem_OnClick;
            //     this.oTxtProblem.KeyDown -= oTxtProblem_KeyDown;
            // }
            if (this.cboDoseType != null)
                // this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
            // this.cboInfusion = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox);
            // if (this.cboInfusion instanceof iComboBox) {
            //     this.cboInfusion.SelectionChanged -= cboInfusion_SelectionChanged;
            // }
            switch (FormKey) {
                case "frmformviewForAdminConInfusions":
                    // this.chckOngoing = ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chckOngoing"), iCheckBox);
                    // if (this.chckOngoing instanceof iCheckBox) {
                    //     this.chckOngoing.Checked -= chckOngoing_Checked;
                    //     this.chckOngoing.Unchecked -= chckOngoing_Unchecked;
                    // }
                    break;
            }
        // this.cmdReviewDetails = ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("cmdReviewDetails"), iButton);
            {
                // if (this.cmdReviewDetails != null) {
                //     this.cmdReviewDetails.Click -= cmdReviewDetails_Click;
                // }
            }
        }
        private DoClearInfusionStepCondData(InfusionDrug: boolean): void {

            let IsInfAmendloadform: boolean = true;
            if (InfusionDrug && this.oResolveItem.ActionCode == ActivityTypes.Amend && !this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds) {
                IsInfAmendloadform = false;
            }
            if (InfusionDrug) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions = Visibility.Collapsed;
                if (this.oResolveItem.ActionCode != ActivityTypes.Amend && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue)) {
                    let dtStartDTTM: DateTime= DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) ? this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime) : DateTime.MinValue;
                    let dtCurrent: DateTime= CommonBB.GetServerDateTime();
                    if (String.Compare(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode) != 0 && (DateTime.LessThanOrEqualTo(dtStartDTTM.AddMinutes(-MedChartData.DuenessThreshold), dtCurrent) && DateTime.LessThanOrEqualTo(dtCurrent, dtStartDTTM.AddMinutes(MedChartData.DuenessThreshold)))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.DueNowScheduleDTTM = dtStartDTTM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdminMsg1 = String.Format(Resource.MedicationForm.RecordAdminDueNowMessage, dtStartDTTM.ToUserDateTimeString("HH:mm"));
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdminMsg1_Tooltip = Resource.MedicationForm.RecordAdminDueNowMessage_Tooltip;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ContinousAddOptions = Resource.Infusion.Additionaloptions_Msg;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions == Visibility.Collapsed)
                            this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions = Visibility.Visible;
                    }
                }
                if (!String.IsNullOrEmpty(PatientContext.PrescriptionType) && !PatientContext.PrescriptionType.Equals(PrescriptionTypes.Discharge))
                    this.oResolveItem.FormViewerDetails.BasicDetails.TreatmentToContinue = null;
                if (IsInfAmendloadform && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase) == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionTypeFlag && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails.Count > 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails = new ObservableCollection<ConditionalDose>();
                }
                else if (IsInfAmendloadform && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.CurrentCultureIgnoreCase) == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                    let IsInfData = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(stepdata => !stepdata.IsInfusionData);
                    if (IsInfData != null && IsInfData.Count() > 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails = new ObservableCollection<MultipleDoseDetail>();
                    }
                }
            }
            else {
                if (!(this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch != '\0' && this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S') && this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM, "CC_IPONCENLY", StringComparison.OrdinalIgnoreCase))) {
                    if (this.oResolveItem.formViewerDetails.BasicDetails.InfusionType != null && this.oResolveItem.formViewerDetails.BasicDetails.InfusionType.Value != InfusionTypesCode.INTERMITTENT) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                        this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired = false;
                    }
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdminMsg1 = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType = null;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Lumen = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked = false;
                if (IsInfAmendloadform && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionTypeFlag && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase) == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails.Count > 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails = new ObservableCollection<ConditionalDose>();
                }
                else if (IsInfAmendloadform && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.CurrentCultureIgnoreCase) == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                    let IsInfData = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(stepdata => stepdata.IsInfusionData);
                    if (IsInfData != null && IsInfData.Count() > 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails = new ObservableCollection<MultipleDoseDetail>();
                    }
                }
                if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.FormName) || String.Equals(this.oResolveItem.FormViewerDetails.FormName, CConstants.StaticFormName)) {
                    this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BHasFormViewParams = true;
                }
            }

        }
        public DoClearCommonFields(AccessContraintControls: boolean): void {
            let IsFollowUpStatLaunch: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch != null && this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')) {
                IsFollowUpStatLaunch = true;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.BrandName) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.BrandName, "Select brand", StringComparison.CurrentCultureIgnoreCase) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.BrandName, "Select product", StringComparison.CurrentCultureIgnoreCase)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsRouteResetRequired = false;
                this.oResolveItem.ClearBrandData();
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("Dose")))
                this.oResolveItem.FormViewerDetails.BasicDetails.Dose = String.Empty;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboUOM")))
                this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = null;
            if ((!String.Equals(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase)) && (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboDosageForm")))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm = null;
            }
            if (this.oResolveItem.ActionCode != ActivityTypes.Amend) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Duration = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtQuantity")))
                this.oResolveItem.FormViewerDetails.BasicDetails.Quantity = String.Empty;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboQuantity")))
                this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM = null;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtAddComments")))
                this.oResolveItem.FormViewerDetails.BasicDetails.AdditionalComments = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.OtherAdminiInstruction = String.Empty;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboFrequency")) && !IsFollowUpStatLaunch) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.DaysOfWeekVisibility = Visibility.Collapsed;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails._TempAdminScheduleTimes = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdminSchedule_Time = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes = null;
                }
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboSite"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Site = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.SiteFreeText = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboPRNInstruction"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.PRNInstruction = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.PRNInstructionFreeText = String.Empty;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.MedClerkModifyReason = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired = false;
            if (String.Compare(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.InvariantCultureIgnoreCase) != 0)
                this.oResolveItem.FormViewerDetails.BasicDetails.IsClinicallyVerified = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.VerificationComments = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.ModificationComments = String.Empty;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtProblem"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndicationTerm = String.Empty;
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible == Visibility.Collapsed) {
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfter = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewafterUOM = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.currentItemReviewafter = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.currentItemReviewafterUOM = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterDTTM = DateTime.MinValue;
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewRequestComments = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterDateTime = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboTreatToCon"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.TreatmentToContinue = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboAdmin"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.AdminInstruction = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboSupplyInstruction"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsVal = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText = Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
                this.oResolveItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments = String.Empty;
                if (this.frmViewBasic != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText != null) {
                // let lblSupplyInstText: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel);
                if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel) instanceof iLabel) {
                        let lblSupTooltip: iLabel = new iLabel();
                        lblSupTooltip.Text = this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText;
                        lblSupTooltip.Width = 250;
                        lblSupTooltip.IsWordwrap = true;
                    ToolTipService.SetToolTip(ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel), lblSupTooltip);
                    }
                }
            }
        }
        public DoClearInfusionFields(IsPreviousFormContinuousPCA: boolean): void {
            let AccessContraintControls: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Count > 0) {
                AccessContraintControls = true;
            }
            // let Stopdate: DateTime= new DateTime();
            let Stopdate = DateTime.MinValue;
            // let Stopdatetime: DateTime= new DateTime();
            let Stopdatetime = DateTime.MinValue;
            if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)) {
                Stopdate = this.oResolveItem.FormViewerDetails.BasicDetails.StopDate;
            }
            if (ObjectHelper.HasValue(this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value, DateTime.MinValue)) {
                Stopdatetime = this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value;
            }
            this.DoClearCommonFields(AccessContraintControls);
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboEndorsementproperties"))) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties != null && this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties.Count > 0) {
                    for (let j: number = 0; j < this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties.Count; j++) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties[j].IsSelected == true) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties[j].IsSelected = false;
                        }
                    }
                }
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInstalIns"))) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions != null && this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions.Count > 0) {
                    for (let j: number = 0; j < this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions.Count; j++) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions[j].IsSelected == true) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions[j].IsSelected = false;
                        }
                    }
                }
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboIntervalInst"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("udnNumberofIns")) && !this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')) {
                this.oResolveItem.FormViewerDetails.BasicDetails.NoOfInstallments = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("udnIntervalInst")) && !this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IntervalBetweenInstallment = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboVolumeUOM"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtVolume"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Volume = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtUpperInfusionRate"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate = String.Empty;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq = 0;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TopUpDoseUOMOID = 0;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TopUpDose = String.Empty;
            if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS")) {
                if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtsaturationrange2"))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange = String.Empty;
                }
                if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtsaturationrange1"))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange = String.Empty;
                }
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SelProdName = CConstants.Selectproduct;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ReviewAfterDTTM = DateTime.MinValue;
            if (!(AccessContraintControls && (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtInfusionRate") || this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtFlowRate")))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate = String.Empty;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PreviousUpperRate = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PreviousRateUOMName = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PreviousRateDrUOMName = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PreviousRate = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PreviousBgRateUOMName = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PreviousBgRateDrUOMName = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PreviousBgRate = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescribedDoseValue = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescribedDoseUOMValue = null;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboMonitoringdeviceUOM"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtMonitoringdevice"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod = String.Empty;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Medicalgasdelivery = null;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtMaxDose"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MaxDose = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtLumen"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Lumen = String.Empty;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriodUOMOID = 0;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtLockoutPeriod"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboLockoutPeriodUOM"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration = null;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateDenaminatorUOMOID = 0;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateDinominatorUom = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateNumeratorUom = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateUOMOID = 0;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtBolus"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Bolus = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboBolusUOM"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtBoosterDose"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboBoosterUOM"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom = null;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Concentration = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ConcentrationFreeText = String.Empty;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboDeliveryDevice"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext = String.Empty;
            }
            if (!(AccessContraintControls && (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInfusionRateUOM") || this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboUOMFlowrate1")))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = null;
            }
            if (!(AccessContraintControls && (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInfustionRateUOM") || this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboUOMFlowrate")))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboinfustionPeriodUOM"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtInfusionperiod"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtVolume"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboFluid"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext = String.Empty;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue = null;
                }
            }
            if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {
                this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin = null;
            }
            if (!IsPreviousFormContinuousPCA) {
                if (DateTime.NotEquals(Stopdate, DateTime.MinValue)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = Stopdate;
                }
                if (DateTime.NotEquals(Stopdatetime, DateTime.MinValue)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = Stopdatetime;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.IsClearIVtoNonIVformStopDateTime = true;
            }
            if (AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboDosageForm") && this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.DosageForm != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm = ObjectHelper.CreateObject(new CListItem(), {
                    Value: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.DosageForm.Value,
                    DisplayText: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.DosageForm.DisplayText,
                    Tag: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.DosageForm.Tag
                });
            }
            if (AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboFrequency") && this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = ObjectHelper.CreateObject(new CListItem(), {
                    Value: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.Value,
                    DisplayText: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.DisplayText,
                    Tag: this.oResolveItem.FormViewerDetails.BasicDetails.oIndiactionProcessDetails.Frequency.Tag
                });
            }
        }
        public DoClearNonInfusionFields(): void {
            let AccessContraintControls: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Count > 0) {
                AccessContraintControls = true;
            }
            // let Stopdate: DateTime= new DateTime();
            // let Stopdatetime: DateTime= new DateTime();
            let Stopdate = DateTime.MinValue;
            let Stopdatetime =  DateTime.MinValue;
            if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)) {
                Stopdate = this.oResolveItem.FormViewerDetails.BasicDetails.StopDate;
            }
            if (ObjectHelper.HasValue(this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value, DateTime.MinValue)) {
                Stopdatetime = this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value;
            }
            this.DoClearCommonFields(AccessContraintControls);
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboStrength"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Strength = null;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("Dose"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose = String.Empty;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboAdminMethod"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod = null;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.BatchNumber = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.ExpiryDate = DateTime.MinValue;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboEndorsementproperties"))) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties != null && this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties.Count > 0) {
                    for (let j: number = 0; j < this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties.Count; j++) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties[j].IsSelected == true) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.EndorsementProperties[j].IsSelected = false;
                        }
                    }
                }
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInstalIns"))) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions != null && this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions.Count > 0) {
                    for (let j: number = 0; j < this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions.Count; j++) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions[j].IsSelected == true) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InstalmentInstructions[j].IsSelected = false;
                        }
                    }
                }
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboIntervalInst"))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM = null;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.LegalCategory = String.Empty;
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("udnNumberofIns")) && !this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')) {
                this.oResolveItem.FormViewerDetails.BasicDetails.NoOfInstallments = 0;
            }
            if (!(AccessContraintControls && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("udnIntervalInst")) && !this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IntervalBetweenInstallment = 0;
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseAdtnlComments = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseInstructions = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.odefTitratedDoseInstruction = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseInstruction = null;
            if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {
                this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin = null;
            }
            if (DateTime.NotEquals(Stopdate, DateTime.MinValue)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = Stopdate;
            }
            if (DateTime.NotEquals(Stopdatetime, DateTime.MinValue)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = Stopdatetime;
            }
        }
        private DefaultDoseType(InfusionType: string): void {
            //Revisit Required
            
            if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails = new ObservableCollection<ConditionalDose>();
                this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.SelectedObservationResult = null;
            }
            
            if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType == null || (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.NORMAL, StringComparison.CurrentCultureIgnoreCase)))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsFormviwerChangedIVtoNonIV = true;
                if (!String.IsNullOrEmpty(InfusionType) && (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) || (String.Equals(InfusionType, InfusionTypeCode.CONTINUOUS) || String.Equals(InfusionType, InfusionTypeCode.SINGLEDOSEVOLUME) || String.Equals(InfusionType, InfusionTypeCode.FLUID)))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.InfuContDoseType.Where(c => String.Equals(c.Value, DoseTypeCode.NORMAL)).FirstOrDefault();
                }
                if ((String.IsNullOrEmpty(InfusionType)) || (!String.IsNullOrEmpty(InfusionType) && String.Equals(InfusionType, InfusionTypeCode.PCA))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DoseType.Where(c => String.Equals(c.Value, DoseTypeCode.NORMAL)).FirstOrDefault();
                }
                else if (!String.IsNullOrEmpty(InfusionType) && String.Equals(InfusionType, InfusionTypeCode.INTERMITTENT)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.InfuInterDoseType.Where(c => String.Equals(c.Value, DoseTypeCode.NORMAL)).FirstOrDefault();
                }
            }
        }
        private cboRoute_SelectionChanged(sender: Object, e: SelectionChangedEventArgs): void {
            let oRoute: CListItem = ObjectHelper.CreateType<CListItem>(e.AddedItems[0], CListItem);
            let IsPreviousFormContinuousPCA: boolean = false;
            if (PatientContext.IsINFUSIONON && this.oResolveItem != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && ((String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.FLUID)) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.PCA)) || this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded)) {
                IsPreviousFormContinuousPCA = true;
            }
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString()) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "0") == 0) && !this.oResolveItem.FormViewerDetails.BHasFormViewParams && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED) && (!(String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase)) || (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) && PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory = true;
            }
            let IsMedicalGasOxygen: boolean = false;
            let IsBloodProductDrug: boolean = false;
            let isMCIItem: boolean = (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase)) ? true : false;
            //Revisit Required
            if ((
                this.frmViewBasic instanceof FormViewLeave || 
                this.frmViewBasic instanceof FormViewForAdmin || 
                this.frmViewBasic instanceof FormViewOPDschg
                 || this.frmViewBasic instanceof FormViewMedClerk  
                || this.frmViewBasic instanceof TypeinFormViewForAdmin
                ) && this.oResolveItem != null && (String.Compare(this.oResolveItem.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) != 0) && (this.cboRoute != null && String.Compare(this.cboRoute.Text, "More", StringComparison.InvariantCultureIgnoreCase) != 0) && (this.oResolveItem.ActionCode == ActivityTypes.Amend || this.oResolveItem.FormViewerDetails.BasicDetails._isRouteChanged) && (this.oResolveItem.FormViewerDetails.BasicDetails.RouteRecorded != null && this.oResolveItem.FormViewerDetails.BasicDetails.RouteRecorded.Value != this.oResolveItem.FormViewerDetails.BasicDetails.Route.Value) && (oRoute != null && String.Compare(oRoute.Value, this.oResolveItem.FormViewerDetails.BasicDetails.Route.Value) != 0)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.Strength = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.Site = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible = Visibility.Collapsed;
            }
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsOxygen) {
                IsMedicalGasOxygen = true;
            }
            else if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS") == 0) {
                IsMedicalGasOxygen = true;
            }
            else if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.OrdinalIgnoreCase) == 0)) {
                IsBloodProductDrug = true;
            }
            let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmBasic");
            if (PatientContext.IsINFUSIONON && !IsMedicalGasOxygen && this.oResolveItem != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && (oFauxTabItem != null) && PatientContext.PrescriptionType != PrescriptionTypes.Clerking && (!this.oResolveItem.IsFormCancelled)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Doselabelvalue = "Dose";
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible = Visibility.Collapsed;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch != '\0' && this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType = ObjectHelper.CreateObject(new CListItem(), { Value: InfusionTypeCode.INTERMITTENT });
            }
            switch (this.GetBasicformContent(oFauxTabItem)) {
                case InfusionTypesCode.CONTINUOUS:
                case InfusionTypesCode.SINGLEDOSEVOLUME:
                case InfusionTypesCode.FLUID:
                    //Revisit Required
                    
                    if (oFauxTabItem != null && !(oFauxTabItem.Content instanceof frmformviewForAdminConInfusions)) {
                        this.EventUnWirapped(oFauxTabItem.Content?.constructor.name);
                        this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                        this.DefaultDoseType(InfusionTypesCode.CONTINUOUS);
                        this.DoClearNonInfusionFields();
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
                        }
                        this.EventWirapped(InfusionTypeCode.CONTINUOUS);
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                            this.InfTypeInDrugVisibility();
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Collapsed;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets != null && this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets.Value != null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem = Visibility.Collapsed;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminInsVisible = (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsTreatMentVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? true : false;
                    this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.CONTINUOUS && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom == null) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom != null && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.Value))))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableChksequentialPresitem = false;
                    }
                    
                    break;
                case InfusionTypesCode.INTERMITTENT:

                    if (oFauxTabItem != null && !(oFauxTabItem.Content instanceof formViewIntermittent)) {
                            this.EventUnWirapped(oFauxTabItem.Content?.constructor.name);
                            let frmIntermittent = new formViewIntermittent();
                            frmIntermittent.ParentRef = this;
                            this.ChangeDynamicForm(frmIntermittent);
                            //this.ChangeDynamicForm(new formViewIntermittent());
                            this.DefaultDoseType(InfusionTypesCode.INTERMITTENT);
                            this.DoClearNonInfusionFields();
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
                        }
                        this.EventWirapped(InfusionTypeCode.INTERMITTENT);
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi = Visibility.Collapsed;
                        }
                        this.InfTypeInDrugVisibility();
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminInsVisible = (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsTreatMentVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? true : false;
                        this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;

                        break;
                    case InfusionTypesCode.PCA:

                        if (oFauxTabItem != null && !(oFauxTabItem.Content instanceof frmformviewForAdminPCAInfusions)) {
                            this.EventUnWirapped(oFauxTabItem.Content?.constructor.name);
                            this.ChangeDynamicForm(new frmformviewForAdminPCAInfusions());
                            this.DefaultDoseType(InfusionTypesCode.PCA);
                            this.DoClearNonInfusionFields();
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        this.EventWirapped(InfusionTypeCode.PCA);
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi = Visibility.Collapsed;
                        }
                        this.InfTypeInDrugVisibility();
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminInsVisible = (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsTreatMentVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? true : false;
                    this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;

                    break;
                default:

                    
                    if (oFauxTabItem != null && !(oFauxTabItem.Content instanceof frmformviewForAdminConInfusions)) {
                        this.EventUnWirapped(oFauxTabItem.Content?.constructor.name);
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        let frmForAdminConInfusions = new frmformviewForAdminConInfusions();
                        frmForAdminConInfusions.ParentRef = this;
                        this.ChangeDynamicForm(frmForAdminConInfusions);
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = DateTime.MinValue;
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = DateTime.MinValue;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
                            if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED)) {
                                let citem: CListItem = new CListItem();
                                citem.IsSelected = true;
                                citem.Value = DoseTypeCode.NORMAL;
                            citem.DisplayText = CConstants.sNormalDisplaytext;
                            this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = citem;
                        }
                        this.DefaultDoseType(InfusionTypesCode.CONTINUOUS);
                        this.DoClearNonInfusionFields();
                    }
                    
                    this.EventWirapped(InfusionTypeCode.CONTINUOUS);
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.Infusiontype != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.Infusiontype.DisplayText) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.Infusiontype;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType = false;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.CONTINUOUS || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.SINGLEDOSEVOLUME || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.FLUID) && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.SequentialItemOrder != 0)
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi = Visibility.Visible;
                        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible, Visibility.Visible) && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.IsSequentialPrescribing && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.SequentialItemOrder > 0))) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible = Visibility.Collapsed;
                        }
                        this.InfTypeInDrugVisibility();
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions = Visibility.Collapsed;
                        if ((this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null)) {
                            if (!this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboFrequency")) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                            }
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                        }
                        this.oResolveItem.formViewerDetails.BasicDetails.AsRequired = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminInsVisible = (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsTreatMentVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Leave) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? true : false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
                        if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IsInfusionFluid, "1")) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = !isMCIItem ? Visibility.Visible : Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Visible;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationMandatory = false;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusionPeriodMandatory = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleStopDate = Visibility.Collapsed;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableChksequentialPresitem = false;
                        }
                        this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;
                        break;
                }
                oFauxTabItem.Content = this.frmViewBasic;
                let cboRouteRef: iComboBox = ObjectHelper.CreateType<iComboBox>(sender, iComboBox);
                if (cboRouteRef != null && cboRouteRef.IsFocused && oFauxTabItem.Content != null && this.frmViewBasic != null && ObjectHelper.GetType(this.frmViewBasic) != ObjectHelper.GetType(oFauxTabItem.Content)) {
                    this.DoClearInfusionStepCondData(true);
                }
            }

            else if (PatientContext.IsINFUSIONON && !IsMedicalGasOxygen && this.oResolveItem != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && (oFauxTabItem != null) && PatientContext.PrescriptionType == PrescriptionTypes.Clerking && !(oFauxTabItem.Content instanceof frmformviewClerkinginfusions) && (!this.oResolveItem.IsFormCancelled)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Doselabelvalue = "Dose";
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible = Visibility.Collapsed;
                if ((this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null)) {
                    if (!this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboFrequency")) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                    }
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.Direction = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.PRNInstruction = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.PRNInstructionFreeText = String.Empty;
                oFauxTabItem.Content = this.loadInfusionForm();
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED)) {
                    let citem: CListItem = new CListItem();
                    citem.IsSelected = true;
                    citem.Value = DoseTypeCode.NORMAL;
                    citem.DisplayText = CConstants.sNormalDisplaytext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = citem;
                }
                this.DefaultDoseType(InfusionTypesCode.CONTINUOUS);
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IsInfusionFluid, "1")) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible = !isMCIItem ? Visibility.Visible : Visibility.Collapsed;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationMandatory = false;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusionPeriodMandatory = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Collapsed;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleStopDate = Visibility.Collapsed;
                this.DoClearNonInfusionFields();
                this.InfTypeInDrugVisibility();
                this.DoClearInfusionStepCondData(true);
            }
        //Revisit Required
        else if (!IsMedicalGasOxygen && !IsBloodProductDrug && this.oResolveItem != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString()) || this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "0") && (oFauxTabItem != null && oFauxTabItem.Content != null && (oFauxTabItem.Content instanceof frmformviewForAdminConInfusions || oFauxTabItem.Content instanceof formViewIntermittent || oFauxTabItem.Content instanceof frmformviewForAdminPCAInfusions || oFauxTabItem.Content instanceof frmformviewClerkinginfusions)) && (!this.oResolveItem.IsFormCancelled)) {
            this.DoClearInfusionStepCondData(false);
            let IsSubsequentSequceItem: boolean = false;
            IsSubsequentSequceItem = CommonSequentialHelper.IsSequeneSubsequentItem(this.oResolveItem);
            if (!IsSubsequentSequceItem && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Infusions) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Infusions = false;
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && !String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM = CommonBB.GetServerDateTime();
                }
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseType = true;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch != '\0' && this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S') && this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM, "CC_IPONCENLY", StringComparison.OrdinalIgnoreCase)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStopDate = false;
            }
            else {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null && PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM, "CC_IPONCENLY", StringComparison.OrdinalIgnoreCase)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStopDate = false;
                }
                else {
                    this.oResolveItem.formViewerDetails.BasicDetails.IsVisibleStopDate = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStopDate = true;
                }
            }
            this.oResolveItem.formViewerDetails.BasicDetails.IsVisibleDuration = Visibility.Visible;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration = true;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsReloadedBasicTabContent = true;
            this.EventUnWirapped(this.frmViewBasic?.constructor.name);
            switch (PatientContext.PrescriptionType) {
                case PrescriptionTypes.Clerking:
                    if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.NONCATALOGUEITEM) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.Precatalog) == 0) {
                         //this.frmViewBasic = new Typeinformviewmedclerk();
                         this.frmViewBasic.ParentRef = this;
   		                 //this.frmViewBasic.DataContext = this.DataContext;
                            let frmTypeinmedclerk = new Typeinformviewmedclerk;
                            frmTypeinmedclerk.ParentRef = this;
                            this.ChangeDynamicForm(frmTypeinmedclerk);
                        //this.ChangeDynamicForm(new Typeinformviewmedclerk());
                    }
                    else {
                        this.ChangeDynamicForm(new FormViewMedClerk());
                    }
                    break;
                case PrescriptionTypes.Leave:
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null) {
                        if ((String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase)) || (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase)) || (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase))) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = false;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = true;
                        }
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = true;
                    }
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory = true;
                    }
                    if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.NONCATALOGUEITEM) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.Precatalog) == 0) {
                         //this.frmViewBasic = new TypeinFormViewLeave();
                         //this.frmViewBasic.DataContext=this.DataContext;
                          this.ChangeDynamicForm(new TypeinFormViewLeave());
                    }
                    else {
                        let frmLeave = new FormViewLeave();
                        frmLeave.ParentRef = this;
                        // this.frmViewBasic = frmLeave;
                        this.ChangeDynamicForm(frmLeave);
                    }
                    break;
                case PrescriptionTypes.Outpatient:
                case PrescriptionTypes.Discharge:
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null) {
                        if ((String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase)) || (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase)) || (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase))) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = false;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = true;
                        }
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = true;
                    }
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory = true;
                    }
                    if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.NONCATALOGUEITEM) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.Precatalog) == 0) {
                        this.ChangeDynamicForm(new TypeinFormViewOPDschg());
                    }
                    else {
                        let frmOPDschg = new FormViewOPDschg();
                        frmOPDschg.ParentRef = this;
                        // this.frmViewBasic = frmOPDschg;
                        this.ChangeDynamicForm(frmOPDschg);
                    }
                    break;
                case PrescriptionTypes.ForAdministration:
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdminTimesVisible = Visibility.Visible;
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseMandatory = true;
                    }
                    if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.NONCATALOGUEITEM) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.Precatalog) == 0) {
        //                 this.frmViewBasic = new TypeinFormViewForAdmin();
                        this.ChangeDynamicForm(new TypeinFormViewForAdmin());
                    }
                    else {
                        let frmForAdmin = new FormViewForAdmin();
                        frmForAdmin.ParentRef = this;
                        this.ChangeDynamicForm(frmForAdmin);
                        // this.ChangeDynamicForm(new FormViewForAdmin());
                    }
                    break;
            }
            this.EventWirapped(PrescriptionTypes.Discharge);
            oFauxTabItem.Content = this.frmViewBasic;
            this.DefaultDoseType(String.Empty);
            this.DoClearInfusionFields(IsPreviousFormContinuousPCA);
        }

            this.EventWireUpForStopDTTM();
            this.EventWireUpForStartDTTM();
            this.EnableStartDateTimeControls();
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM)) {
                if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM, "CC_IPONCENLY", StringComparison.OrdinalIgnoreCase) == 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration = false;
                }
            }
            if(this.oResolveItem.IsFormViewerDisable){
                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
            }
        }
        private cboDRCDosetype_SelectionChanged(sender: Object, e: SelectionChangedEventArgs): void {
            if (e.AddedItems != null && e.AddedItems.Count > 0) {
                let newItem: CListItem = ObjectHelper.CreateType<CListItem>(e.AddedItems[0], CListItem);
                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && newItem != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.BasicDetails.OriginalDRCDoseType != null && !String.Equals(newItem.Value, this.oResolveItem.FormViewerDetails.BasicDetails.OriginalDRCDoseType.Value, StringComparison.InvariantCultureIgnoreCase)) || (this.oResolveItem.FormViewerDetails.BasicDetails.OriginalDRCDoseType == null))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend = true;
                    if (!this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Contains("DRCDosetype")) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("DRCDosetype");
                    }
                    this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated = true;
                }
            }
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.IsRestoreOldValues && ((this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder || this.oResolveItem.ActionCode == ActivityTypes.Amend) && this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds && !this.oResolveItem.FormViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange) && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.CanPerformDRC(this.oResolveItem)) {
                if (!this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Contains("DRCDosetype")) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("DRCDosetype");
                }
                this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason = null;
                this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = false;
                this.oResolveItem.PerformDRC(this.oResolveItem);
            }
        }
        EventWireUpForStopDTTM(): void {
            if (this.frmViewBasic != null && (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.CurrentCultureIgnoreCase))) {
            // this.dtpStopDate = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker);
            // this.iTimeStopDateTime = ObjectHelper.CreateType<iTimeBox>(this.frmViewBasic.FindName("iTimeStopDateTime"), iTimeBox);
                if (this.iTimeStopDateTime != null) {
                    this.iTimeStopDateTime.EnableDST = true;
                }
                if (this.dtpStopDate != null) {
                    // this.dtpStopDate.OnDateValueChanged -= dtpStopDate_OnDateValueChanged;
                    this.dtpStopDate.OnDateValueChanged  = (s,e) => { this.dtpStopDate_OnDateValueChanged(s,e); } ;
                }
                if (this.iTimeStopDateTime != null) {
                    // this.iTimeStopDateTime.ValueChanged -= iTimeStopDateTime_ValueChanged;
                    this.iTimeStopDateTime.ValueChanged  = (s,e) => { this.iTimeStopDateTime_ValueChanged(s,e); } ;
                }
            }
        }
        EventWireUpForStartDTTM(): void {
            if (this.frmViewBasic != null) {
            // this.dtpStartDate = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker);
                if (this.dtpStartDate != null) {
                    // this.dtpStartDate.OnDateValueChanged -= dtpStartDate_OnDateValueChanged;
                    this.dtpStartDate.OnDateValueChanged  = (s,e) => { this.dtpStartDate_OnDateValueChanged(s,e); } ;
                    this.dtpStartDate.CurrentDateTime = DateTime.Now.Date;
                }
            // this.iTimeStartDateTime = ObjectHelper.CreateType<iTimeBox>(this.frmViewBasic.FindName("iTimeStartDateTime"), iTimeBox);
                if (this.iTimeStartDateTime != null) {
                    // this.iTimeStartDateTime.ValueChanged -= iTimeStartDateTime_ValueChanged;
                    this.iTimeStartDateTime.ValueChanged  = (s,e) => { this.iTimeStartDateTime_ValueChanged(s,e); } ;
                }
            }
        }
        chckOngoing_Checked(sender: Object, e: RoutedEventArgs): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.Duration = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration = false;
        }
        chckOngoing_Unchecked(sender: Object, e: RoutedEventArgs): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration = true;
        }
        RouteOrFormChange_GetFormViewControlsCompleted(sender: Object, e: GetFormViewControlsCompletedEventArgs): void {
            let _ErrorID: number = 80000066;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, Class:Medformviewer, Method:RouteOrFormChange_GetFormViewControlsCompleted()";
            if (e.Result != null && e.Error == null) {
                try {
                    if (this.oResolveItem != null && this.oResolveItem.isAdhocitem) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsWardStock = false;
                    }
                    else if (e.Result.oFormViewControls.IsFLorTCorRF.Equals("FL") || e.Result.oFormViewControls.IsFLorTCorRF.Equals("RF")) {
                        if (((String.IsNullOrEmpty(e.Result.oFormViewControls.RequestRouteOIDs) && (this.oResolveItem.FormViewerDetails.BasicDetails.Route == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Value))) || String.Equals(e.Result.oFormViewControls.RequestRouteOIDs, this.oResolveItem.FormViewerDetails.BasicDetails.Route.Value, StringComparison.InvariantCultureIgnoreCase)) && ((e.Result.oFormViewControls.RequestFormOID == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm == null) || (this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm != null && e.Result.oFormViewControls.RequestFormOID == Number.Parse(this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm.Value))) && ((String.IsNullOrEmpty(e.Result.oFormViewControls.RequestStrength) && (this.oResolveItem.FormViewerDetails.BasicDetails.Strength == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Strength.Value))) || (this.oResolveItem.FormViewerDetails.BasicDetails.Strength != null && String.Equals(e.Result.oFormViewControls.RequestStrength, this.oResolveItem.FormViewerDetails.BasicDetails.Strength.Value, StringComparison.InvariantCultureIgnoreCase)))) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsWardStock = e.Result.oFormViewControls.IsWardStock;
                        }
                    }
                    if (e.Result.oFormViewControls.IsFLorTCorRF.Equals("TC")) {
                        if (this.oResolveItem != null && !this.oResolveItem.IsFormViewerDisable && e.Result.oFormViewControls.IsWardStockForMCI != null && e.Result.oFormViewControls.IsWardStockForMCI.Count > 0 && e.Result.oFormViewControls.IsWardStockForMCI.Count == this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count) {
                            for (let i: number = 0; i < e.Result.oFormViewControls.IsWardStockForMCI.Count; i++) {
                                this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[i].IsWardStock = String.Equals(e.Result.oFormViewControls.IsWardStockForMCI[i], "true", StringComparison.InvariantCultureIgnoreCase) ? true : false;
                            }
                        }
                        if (this.oResolveItem != null && !this.oResolveItem.IsFormViewerDisable && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsWardStockFluid = e.Result.oFormViewControls.IsWardStockFluid;
                        }
                    }
                    this.RouteorFormchangeEvent();
                    if (this.oResolveItem.FormViewerDetails.FormOID != e.Result.oFormViewControls.FormViewOID) {
                        if (this.ftbFormViewDetails.HasItems) {
                            this.ftbFormViewDetails.Items.Clear();
                        }
                        this.oResolveItem.FormViewerDetails.FillFormViewerDetails(e.Result, true);
                        if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.MandatoryControls != null && this.oResolveItem.FormViewerDetails.BasicControls != null) {
                            let oVMTemp: IPPMABaseVM = this.oResolveItem.ParentbaseVM;
                            oVMTemp.SetMandatory_Form_Strenght_ctrls(this.oResolveItem.FormViewerDetails.MandatoryControls, this.oResolveItem.FormViewerDetails.BasicControls);
                        }
                        if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0) {
                            let selectedrouteClistitem: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected).ToArray();
                            let selectedInfusionRoute: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected && (cl.Tag != null && String.Compare(cl.Tag.ToString(), "1") == 0)).ToArray();
                            let selectedNonInfusionRoute: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected && (cl.Tag == null || String.Compare(cl.Tag.ToString(), "0") == 0)).ToArray();
                            if (selectedInfusionRoute.Count() > 0 && selectedrouteClistitem.Count() > 0 && (selectedInfusionRoute.Count() != selectedrouteClistitem.Count()) && PatientContext.IsINFUSIONON) {
                                this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;
                            }
                        }
                        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.bIsAmend) {
                            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication = String.Empty;
                            }
                            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode = String.Empty;
                            }
                            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndicationTerm)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndicationTerm = String.Empty;
                            }
                        }
                        let bFound: boolean = false;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DoseType != null) {
                            for (let i: number = 0; i < this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DoseType.Count; i++) {
                                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DoseType[i].Value, DoseTypeCode.TITRATED)) {
                                    bFound = true;
                                    break;
                                }
                            }
                            if (!bFound && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.IsTitrated) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DoseType.Insert(2, ObjectHelper.CreateObject(new CListItem(), { DisplayText: CConstants.sTitratedDisplaytext, Value: DoseTypeCode.TITRATED }));
                            }
                        }
                        this.PopulateFormViewerFauxTab(false);
                        this.cbCallConflictHeaderUpdate = true;
                        this.bTechimage = true;
                    }
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BHasFormViewParams && this.oResolveItem.FormViewerDetails.BasicControls != null && this.oResolveItem.FormViewerDetails.BasicControls.Length > 0 && this.oResolveItem.FormViewerDetails.MandatoryControls != null && this.oResolveItem.FormViewerDetails.MandatoryControls.Length > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.Route == null) {
                        let indexDosageForm: number = Array.IndexOf(this.oResolveItem.FormViewerDetails.BasicControls, this.oResolveItem.FormViewerDetails.BasicControls.Where(x => x.Contains("CC_FORM")).FirstOrDefault());
                        if (this.oResolveItem.FormViewerDetails.MandatoryControls.Length >= indexDosageForm && indexDosageForm != -1) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsDosageFormMandatory = this.oResolveItem.FormViewerDetails.MandatoryControls[indexDosageForm];
                            }
                        }
                    }
                    if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration) {
                        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BHasFormViewParams && this.oResolveItem.FormViewerDetails.BasicControls != null && this.oResolveItem.FormViewerDetails.BasicControls.Length > 0) {
                            let indexReviewAft: number = Array.IndexOf(this.oResolveItem.FormViewerDetails.BasicControls, "CC_REVIEWAFTER");
                            if (indexReviewAft > 0) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Visible;
                            }
                            else {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Collapsed;
                                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterDTTM = DateTime.MinValue;
                            }
                        }
                        else {
                            if ((this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) || (this.oResolveItem.ActionCode == ActivityTypes.Prescribe && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SelectedSequenceName != null) || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Collapsed;
                            }
                            else {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Visible;
                            }
                        }
                    }
                    if (this.oResolveItem.ActionCode != ActivityTypes.Prescribe) {
                    // this.cboRoute = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
                        setTimeout(() => {
                            this.cboRoute.Focus();
                        }, 0);
                        
                    }
                    this.EventWireUpForStopDTTM();
                    this.EventWireUpForStartDTTM();
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.DoseCalcEnableDisable();
                    }
                }
               catch(ex:any)  {
                    let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
                }

            }
            else {
                let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, e.Error);
            }
        }
        private ClearAllFields(): void {
            if (this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                this.oResolveItem.FormViewerDetails.BasicDetails.TreatmentToContinue = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.MedClerkModifyReason = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.Quantity = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.Duration = String.Empty;
                if (!String.Equals(this.oResolveItem.ItemSubType, CConstants.SUBTYPE))
                    this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsVal = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText = Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
                if (this.frmViewBasic != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText != null) {
                // let lblSupplyInstText: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel);
                if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel) instanceof iLabel) {
                        let lblSupTooltip: iLabel = new iLabel();
                        lblSupTooltip.Text = this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText;
                        lblSupTooltip.Width = 250;
                        lblSupTooltip.IsWordwrap = true;
                    ToolTipService.SetToolTip(ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel), lblSupTooltip);
                    }
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.AdditionalComments = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndicationTerm = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.ModificationComments = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.Dose = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.Strength = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.OtherAdminiInstruction = null;
                this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = DateTime.MinValue;
                this.oResolveItem.FormViewerDetails.BasicDetails.PRNInstruction = null;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase)) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails = new ObservableCollection<ConditionalDose>();
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.SelectedObservationResult = null;
                    }
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.DoseType = ObjectHelper.CreateObject(new CListItem(), { DisplayText: "Normal", Value: DoseTypeCode.NORMAL });
                let dtmTemp: DateTime= CommonBB.GetServerDateTime();
                if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking)
                    dtmTemp = DateTime.MinValue;
                if (PatientContext.PrescriptionType == PrescriptionTypes.Discharge || PatientContext.PrescriptionType == PrescriptionTypes.Leave) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM = DateTime.GreaterThan(this.oResolveItem.FormViewerDetails.BasicDetails.DischargeLeaveDate, dtmTemp) ? this.oResolveItem.FormViewerDetails.BasicDetails.DischargeLeaveDate : dtmTemp;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime = DateTime.GreaterThan(this.oResolveItem.FormViewerDetails.BasicDetails.DischargeLeaveDate, dtmTemp) ? this.oResolveItem.FormViewerDetails.BasicDetails.DischargeLeaveDate : dtmTemp.AddTicks(-(dtmTemp.Ticks % TimeSpan.TicksPerMinute));
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM = dtmTemp;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime = dtmTemp.AddTicks(-(dtmTemp.Ticks % TimeSpan.TicksPerMinute));
                    this.oResolveItem.FormViewerDetails.BasicDetails.RouteChangeAmendStartDTM = true;
                }
            }
        }
        private EnableStartDateTimeControls(): void {
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                let isSteppedDose: boolean = false;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.CurrentCultureIgnoreCase))) {
                    isSteppedDose = true;
                }
                let isMultDoseDetailSelected: boolean = false;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.SelectedDoseDetail != null) {
                    isMultDoseDetailSelected = true;
                }
                if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase)) {
                    if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.CompleteStartDTTM, DateTime.MinValue))
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStartdate = (isSteppedDose && isMultDoseDetailSelected) ? false : true;
                }
                else {
                    if ((this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0) || (this.oResolveItem != null && this.oResolveItem.OsInstance != null && this.oResolveItem.OsInstance.OsIsInfusion == true)) {
                        CommonSequentialHelper.EnableDisbaleStartDateTimeForNonIVSeq(this.oResolveItem);
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStartdate = (isSteppedDose && isMultDoseDetailSelected) ? false : true;
                    }
                }
            }
        }
        private cboDoseType_SelectionChanged(sender: Object, e: SelectionChangedEventArgs): void {
            if (e.AddedItems.Count > 0) {
                if (sender != null && sender instanceof iComboBox) {
                    this.DOAutoScroll = <boolean>(ObjectHelper.CreateType<iComboBox>(sender, iComboBox)).CheckDropDownOpened;
                }
                let newItem: CListItem = ObjectHelper.CreateType<CListItem>(e.AddedItems[0], CListItem);
                let IsContentCtrlMedResolveSteppedLoaded: boolean = false;
                if (String.Compare(newItem.Value, DoseTypeCode.CONDITIONAL) == 0) {
                // let Tmpadminslotuc: frmAdminSlotTimes = ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes);
                if (ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes) != null && ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes).DataContext != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdminTimesVisible = Visibility.Collapsed;
                    ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes).DataContext = null;
                    }
                }
                if (newItem.Value == DoseTypeCode.NORMAL || newItem.Value == DoseTypeCode.VARIABLE || newItem.Value == DoseTypeCode.DOSAGERANGE || newItem.Value == DoseTypeCode.TITRATED) {
                    
                    if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose && (ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose)) != null && (ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose)).adminslotuc != null) {
                        (ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose)).adminslotuc.DataContext = null;
                    }
                // let Tmpadminslotuc: frmAdminSlotTimes = ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes);
                if (ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes) != null && ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes).DataContext == null) {
                    ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes).DataContext = this.oResolveItem;
                    }
                    if ((newItem.Value == DoseTypeCode.TITRATED || newItem.Value == DoseTypeCode.NORMAL || newItem.Value == DoseTypeCode.DOSAGERANGE) && e.RemovedItems.Count > 0) {
                        if (PrescriptionTypes.ForAdministration == PatientContext.PrescriptionType) {
                        if (ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes) != null && ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes).grdAdminTimes != null) {
                            ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes).LoadfrmAdminSlotTimesEvent();
                            }
                            if (newItem.Value == DoseTypeCode.TITRATED) {
                                if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Count > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboFrequency")) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableFrequency = false;
                                }
                                else {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableFrequency = true;
                                }
                                this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableAsrequired = false;
                            }
                        if (ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes) != null && ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes).grdAdminTimes != null) {
                            //TODO: Revisit
                            // Tmpadminslotuc.grdAdminTimes.Rebind();
                            }
                        }
                        if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.CurrentCultureIgnoreCase)) {
                            let oldItem: CListItem = ObjectHelper.CreateType<CListItem>(e.RemovedItems[0], CListItem);
                            if (oldItem != null && (String.Compare(oldItem.Value, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(oldItem.Value, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(oldItem.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) == 0)) {
                                if (this.oResolveItem.ActionCode == ActivityTypes.Prescribe && this.oResolveItem.FormViewerDetails.BasicDetails.IsStrengthMandatory) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsStrengthMandatoryByDoseUOMType = false;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsStrengthMandatory = false;
                                }
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStat = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminEnabled = true;
                                this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpOrStat = String.MinValue;
                                this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch = String.MinValue;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStat = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatMessageVisibility = Visibility.Collapsed;
                                this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatMessage = String.Empty;
                                this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdminMsg1 = String.Empty;
                                this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpOrStat = '\0';
                            }
                        }
                    }
                }
                if (newItem.Value == DoseTypeCode.VARIABLE || newItem.Value == DoseTypeCode.STEPPED || newItem.Value == DoseTypeCode.STEPPEDVARIABLE) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.DaysOfWeekVisibility = Visibility.Collapsed;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count == 0) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpOrStat = String.MinValue;
                        this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch = String.MinValue;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStat = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatMessageVisibility = Visibility.Collapsed;
                    }
                    if (e.RemovedItems.Count > 0) {
                        let oldItem: CListItem = ObjectHelper.CreateType<CListItem>(e.RemovedItems[0], CListItem);
                        if (oldItem != null && newItem != null && String.Equals(newItem.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.InvariantCultureIgnoreCase) && String.Equals(oldItem.Value, DoseTypeCode.NORMAL, StringComparison.InvariantCultureIgnoreCase)) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatMessage = String.Empty;
                            this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdminMsg1 = String.Empty;
                            this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpOrStat = '\0';
                        }
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Duration = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DurationStepped;
                    
                    //Revisit Required
                if (this.ContentCtrlMedResolveStepped.Content == null || (this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) || (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose) || (this.ContentCtrlMedResolveStepped.Content instanceof medresolvetitrated)) {
                    // if (this.ContentCtrlMedResolveStepped.Content == null || (this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) || (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose)) {
                        if (this.frmViewBasic != null) {
                        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                        }
                        let ObjMedIpresolve = new medipresolvestepped();
                        ObjMedIpresolve.DataContext = this.DataContext;
                        this.ContentCtrlMedResolveStepped.Content = ObjMedIpresolve;
                    }
                    
                    if (e.RemovedItems.Count > 0 && e.AddedItems.Count > 0 && !String.Equals(e.AddedItems[0].Value, e.RemovedItems[0].Value,StringComparison.InvariantCultureIgnoreCase)) {
                        if (newItem.Value == DoseTypeCode.VARIABLE || newItem.Value == DoseTypeCode.STEPPED || newItem.Value == DoseTypeCode.STEPPEDVARIABLE) {
                            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                                if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                                    (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).MedIpResolveSteppedLoadedFunc = (e) => {
                                        if(this.ContentCtrlMedResolveStepped.Content != e)
                                        {
                                            this.ContentCtrlMedResolveStepped.Content = e;
                                        }
                                        (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).ClearControls();
                                        (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).EnableButtonsForNewEntry();
                                        this.FillIPSteppedDoseContent();
                                        if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                                            if ((ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)) != null) {
                                                if (this.DOAutoScroll)
                                                    this.AutoScrollView();
                                            }
                                        }
                                    }
                                }
                            }
                            this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails = new ObservableCollection<MultipleDoseDetail>();
                        }
                    }
                    else
                    {
                        if (newItem.Value == DoseTypeCode.VARIABLE || newItem.Value == DoseTypeCode.STEPPED || newItem.Value == DoseTypeCode.STEPPEDVARIABLE) {
                        (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).MedIpResolveSteppedLoadedFunc = (e) => {
                            if(this.ContentCtrlMedResolveStepped.Content != e)
                            {
                                this.ContentCtrlMedResolveStepped.Content = e;
                            }
                        }
                    }
                    }
                }
                else if (String.Compare(newItem.Value, DoseTypeCode.CONDITIONAL) == 0) {
                    
                    if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && (this.ContentCtrlMedResolveStepped.Content != null && ((this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) || (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose)))) {
                        IsContentCtrlMedResolveSteppedLoaded = true;
                    }
                    let IsMultiInfusionRoutes: boolean = false;
                    if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null) {
                        IsMultiInfusionRoutes = !Common.IsNonInfusionMultiRoutes(this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes);
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails == null) {
                        let lnIdentifyingOID: number = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID;
                        let sIdentifyingType: string = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
                        let sMCVersion: string = String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion) ? AppSessionInfo.AMCV : this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion;
                        let sitemsubtype: string = this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType;
                        let smcitemname: string = this.oResolveItem.FormViewerDetails.BasicDetails.mCIItemDisplay;
                        let lnprescriptionitemoid: number = this.oResolveItem.PrescriptionItemOID;
                        let sMClorenzoid: string = this.oResolveItem.LorenzoID;
                        let mcitemlist: string = this.oResolveItem.Itemlist;
                        let sAction: ActivityTypes = this.oResolveItem.ActionCode;
                        let IsOrdersetPrescribing: boolean = false;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets != null) {
                            IsOrdersetPrescribing = true;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails = new ConditionalDosingVM(lnIdentifyingOID, sIdentifyingType, sMCVersion, sitemsubtype, smcitemname, lnprescriptionitemoid, sMClorenzoid, mcitemlist, sAction, IsOrdersetPrescribing);
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.INTERMITTENT || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.CONTINUOUS || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.SINGLEDOSEVOLUME || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.FLUID)) || this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded)) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionTypeFlag = true;
                        }
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsConditionalDoseEnable = true;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminMethodVisible == Visibility.Visible && this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod.Value)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod = null;
                    }
                    if ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS)) || (this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseVisibility = Visibility.Collapsed;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseVisibility = Visibility.Visible;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms != null) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseUOMs == null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseUOMs = new ObservableCollection<CListItem>();
                            this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.ForEach(objuoms => {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseUOMs.Add(ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText: objuoms.DisplayText,
                                    Value: objuoms.Value
                                }));
                            });
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.Condition.DoseUoM = this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM;
                        }
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfRateNumeratorUOMList = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionratedenoUOMList = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0) && (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 || IsMultiInfusionRoutes)) {
                        if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = false;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = false;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsConditionalDoseEnable = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateVisible = Visibility.Visible;
                        if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom == null)) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsCondInfusionRateEnable = true;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ConditionalDoseValue = Resource.medConditionalDoseRes.lblDoseInfusionValue_Text;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.GridDoseHeader = Resource.medConditionalDoseRes.grdCondition_DoseInfusionInstruction;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0) && (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.CONDITIONAL)) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.Dose = String.Empty;
                            this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = null;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionType = InfusionTypesCode.INTERMITTENT;
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseType = DoseTypeCode.CONDITIONAL;
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsDoseMandatory = (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase) ? false : true);
                        }
                    }
                    else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && ((String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) == 0) || (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME, StringComparison.CurrentCultureIgnoreCase) == 0) || (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID, StringComparison.CurrentCultureIgnoreCase) == 0))) || this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded) && (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 || IsMultiInfusionRoutes)) {
                        if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = false;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = true;
                        }
                        if (((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) == 0) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null && this.oResolveItem.FormViewerDetails.BasicDetails.Infusions)) && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.CONDITIONAL) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.Dose = String.Empty;
                            this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = null;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionType = InfusionTypesCode.CONTINUOUS;
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseType = DoseTypeCode.CONDITIONAL;
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsDoseMandatory = false;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateVisible = Visibility.Visible;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsCondInfusionRateEnable = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ConditionalDoseValue = Resource.medConditionalDoseRes.lblDoseInfusionValue_Text;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.GridDoseHeader = Resource.medConditionalDoseRes.grdCondition_DoseInfusionInstruction;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateVisible = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsCondInfusionRateEnable = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ConditionalDoseValue = Resource.medConditionalDoseRes.lblDoseValue_Text;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.GridDoseHeader = Resource.medConditionalDoseRes.grdCondition_DoseInstruction;
                        if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking))
                            this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsDoseMandatory = true;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.SINGLEDOSEVOLUME, StringComparison.CurrentCultureIgnoreCase) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.FLUID, StringComparison.CurrentCultureIgnoreCase) == 0) || this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded))) {
                        this.ContentCtrlMedResolveStepped.Content = new medContConditionalDose();
                        this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleCondFrequency = Visibility.Visible;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleCondchkPRN = Visibility.Visible;
                        if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, "NONCATALOGUEITEM", StringComparison.CurrentCultureIgnoreCase) == 0 && PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration)
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleCondPRNInstruction = Visibility.Collapsed;
                        else this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleCondPRNInstruction = Visibility.Visible;
                        if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) == 0) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdminTimesVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleCondAdminTimes = Visibility.Visible;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleCondAdminTimes = Visibility.Collapsed;
                        }
                        if (this.ContentCtrlMedResolveStepped != null){
                            this.ContentCtrlMedResolveStepped.Content = new medConditionalDose();                            
                            this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext;
                            (ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose)).medConditionalDoseLoadedFunc = (e) => {
                                if (this.ContentCtrlMedResolveStepped.Content != e) {
                                    this.ContentCtrlMedResolveStepped.Content = e;
                                }
                            }
                        }
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null) {
                        if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Dose))
                            this.oResolveItem.FormViewerDetails.BasicDetails.Dose = String.Empty;
                        if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose))
                            this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose = String.Empty;
                        this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = null;
                    }
                    if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate = String.Empty;
                    }
                    if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate = String.Empty;
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = null;
                    if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) {
                        if ((ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose)) != null) {
                            if (this.DOAutoScroll)
                                (ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose)).omedFormViewer = this;
                            if (IsContentCtrlMedResolveSteppedLoaded) {
                                if (this.DOAutoScroll)
                                    this.AutoScrollView();
                            }
                        }
                    }
                    else if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose) {
                        if ((ObjectHelper.CreateType<medContConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medContConditionalDose)) != null) {
                            if (this.DOAutoScroll)
                                (ObjectHelper.CreateType<medContConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medContConditionalDose)).omedFormViewer = this;
                            if (IsContentCtrlMedResolveSteppedLoaded) {
                                if (this.DOAutoScroll)
                                    this.AutoScrollView();
                            }
                        }
                    }
                    
                }                
                else if (String.Compare(newItem.Value, DoseTypeCode.NORMAL) == 0 && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID) == 0)) || (this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsFrmInfusRateMand = true;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtInfusionRate")) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel = false;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateMandatory = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.IsInfusionRateVisible = Visibility.Visible;
                    }
                    if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > 0) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl = false;
                    }
                    else {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInfustionRateUOM"))
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInfusionRateUOM")) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl = false;
                        }
                    }
                }
                else if (((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0))) {
                    switch (newItem.Value) {
                        case DoseTypeCode.DOSAGERANGE:
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate = null;
                            this.oResolveItem.formViewerDetails.BasicDetails.InfusionDetails.UpperRate = null;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = null;
                            break;
                        default:
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("txtInfusionRate")) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel = false;
                            }
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInfustionRateUOM"))
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls.Contains("cboInfusionRateUOM")) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl = false;
                            }
                            break;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM)) {
                        if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM, "CC_IPONCENLY", StringComparison.OrdinalIgnoreCase) == 0) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration = false;
                        }
                    }
                }
                //Revisit Required
                
                else if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.CurrentCultureIgnoreCase)) && newItem.Value == DoseTypeCode.TITRATED) {
                    if (this.ContentCtrlMedResolveStepped != null && (this.ContentCtrlMedResolveStepped.Content == null || (!(this.ContentCtrlMedResolveStepped.Content instanceof medresolvetitrated)))) {
                        if (this.oResolveItem != null && this.oResolveItem.formViewerDetails != null && this.oResolveItem.formViewerDetails.BasicDetails != null) {
                            if (this.oResolveItem.formViewerDetails.BasicDetails.odefTitratedDoseInstruction != null && this.oResolveItem.formViewerDetails.BasicDetails.odefTitratedDoseInstruction.IsDefault) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseAdtnlComments = String.Empty;
                                this.oResolveItem.formViewerDetails.BasicDetails.TitratedDoseInstruction = this.oResolveItem.formViewerDetails.BasicDetails.odefTitratedDoseInstruction;
                            }
                            // else {
                            //     this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseAdtnlComments = String.Empty;
                            //     this.oResolveItem.formViewerDetails.BasicDetails.TitratedDoseInstruction = new CListItem();
                            // }
                            // if (this.ContentCtrlMedResolveStepped.Content == null) {
                            //     this.oResolveItem.formViewerDetails.BasicDetails.TitratedDoseDetails = null;
                            // }
                        }
                        // if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Value) && this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag instanceof Array<string> && (ObjectHelper.CreateType<string[]>(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag, Array<string>)) != null && (ObjectHelper.CreateType<string[]>(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag, Array<string>)).length > 0 && String.Equals((ObjectHelper.CreateType<string[]>(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag, Array<string>))[0], "1", StringComparison.CurrentCultureIgnoreCase)) || (this.oResolveItem.ActionCode == ActivityTypes.Reorder && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Value)))) {
                        //     this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
                        // }
                    // if (this.ContentCtrlMedResolveStepped.Content == null) {
                        if (this.frmViewBasic != null) {
                        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                        }
                        // let ObjMedIpresolve = new medresolvetitrated();
                        // ObjMedIpresolve.DataContext = this.DataContext;
                        // ObjMedIpresolve.oPrescriptionItemVM = this.oResolveItem;
                        // this.ContentCtrlMedResolveStepped.Content = ObjMedIpresolve;
                        console.log("oResolved item", this.oResolveItem);
                        console.log("oResolved item", this.DataContext);
                        this.ContentCtrlMedResolveStepped.Content = new medresolvetitrated();
                        this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext;
                        // this.ContentCtrlMedResolveStepped.Content = new medresolvetitrated(this.oResolveItem);
                        // this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext
                    (ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated)).MedResolveTitratedLoadedFunc = (e) => {
                        if (this.ContentCtrlMedResolveStepped.Content != e) {
                            this.ContentCtrlMedResolveStepped.Content = e;
                        }
                        // this.FillTitrateddoseContent();
                        // (ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated)).ClearControls();
                    }
                    // }
                }
                else {
                    if (e.RemovedItems.Count > 0) {
                        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                            if (this.ContentCtrlMedResolveStepped.Content instanceof medresolvetitrated) {
                                // this.ContentCtrlMedResolveStepped.Content = null;
                                // this.ContentCtrlMedResolveStepped.Content = new medresolvetitrated(this.oResolveItem);
                                let ObjMedIpresolve = new medresolvetitrated();
                                ObjMedIpresolve.DataContext = this.DataContext;
                                ObjMedIpresolve.oPrescriptionItemVM = this.oResolveItem;
                                this.ContentCtrlMedResolveStepped.Content = ObjMedIpresolve;
                                (ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated)).MedResolveTitratedLoadedFunc = (e) => {
                                    if (this.ContentCtrlMedResolveStepped.Content != e) {
                                        this.ContentCtrlMedResolveStepped.Content = e;
                                    }
                                    this.FillTitrateddoseContent();
                                    (ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated)).ClearControls();
                                    }
                                }
                            }
                        }
                        else {
                            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BHasFormViewParams && newItem != null && !String.IsNullOrEmpty(newItem.Value) && newItem.Value == DoseTypeCode.TITRATED && this.ContentCtrlMedResolveStepped.Content instanceof medresolvetitrated) {
                                (ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated)).MedResolveTitratedLoadedFunc = (e) => {
                                        if (this.ContentCtrlMedResolveStepped.Content != e) {
                                            this.ContentCtrlMedResolveStepped.Content = e;
                                        }
                                        this.FillDynFrmTitratedMandatory();                                    
                                    }                                
                            }
                        }
                    }
                    this.oResolveItem.formViewerDetails.BasicDetails.SteppedVariablePanelHeader = Resource.MedicationForm.TitratedDoseRegime_Header;
                    if (this.ContentCtrlMedResolveStepped.Content instanceof medresolvetitrated) {
                        if ((ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated)) != null) {
                            if (this.DOAutoScroll)
                                (ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated)).omedFormViewer = this;
                            if (IsContentCtrlMedResolveSteppedLoaded) {
                                if (this.DOAutoScroll)
                                    this.AutoScrollView();
                            }
                        }
                    }
                }
                
                if (this.oResolveItem.FormViewerDetails.TechValidateDetails == null)
                    this.oResolveItem.FormViewerDetails.TechValidateDetails = ObjectHelper.CreateObject(new TechValidateVM(), { Quantity: String.Empty, TotalQuantity: String.Empty });
                if ((String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.CurrentCultureIgnoreCase) == 0) || (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.CurrentCultureIgnoreCase) == 0) || (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.CurrentCultureIgnoreCase) == 0)) {
                    if (String.Compare(newItem.Value, DoseTypeCode.NORMAL) == 0) {
                        this.oResolveItem.FormViewerDetails.TechValidateDetails.IsQuantityPerDoseMandatory = true;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.TechValidateDetails.IsQuantityPerDoseMandatory = false;
                    }
                    if (String.Equals(newItem.Value, DoseTypeCode.NORMAL) || String.Equals(newItem.Value, DoseTypeCode.DOSAGERANGE) || String.Equals(newItem.Value, DoseTypeCode.TITRATED)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableAdminMthd = true;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableAdminMthd = false;
                    }
                    //--SaiAdded for Temp --
                    if (String.Equals(newItem.Value, DoseTypeCode.NORMAL) || String.Equals(newItem.Value, DoseTypeCode.DOSAGERANGE)){
                        if (this.frmViewBasic != null) {
                            this.ContentCtrlMedResolveStepped.Content = null;
                        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                        }
                    }
                }
                else if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration) {
                    this.oResolveItem.FormViewerDetails.TechValidateDetails.IsQuantityPerDoseMandatory = false;
                    if (this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                        if (String.Equals(newItem.Value, DoseTypeCode.NORMAL) || String.Equals(newItem.Value, DoseTypeCode.DOSAGERANGE)) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableAdminMthd = true;
                        }
                        else {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableAdminMthd = false;
                        }
                    }
                     //--SaiAdded for Temp --
                     if (String.Equals(newItem.Value, DoseTypeCode.NORMAL) || String.Equals(newItem.Value, DoseTypeCode.DOSAGERANGE) || String.Equals(newItem.Value, DoseTypeCode.TITRATED)){
                        if (this.frmViewBasic != null) {
                            this.ContentCtrlMedResolveStepped.Content = null;
                        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                        }
                    }
                }
                //--SaiAdded for Temp -- Bug Id -- 51622
                else if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking){
                    if (String.Equals(newItem.Value, DoseTypeCode.NORMAL) || String.Equals(newItem.Value, DoseTypeCode.DOSAGERANGE)){
                        if (this.frmViewBasic != null) {
                            this.ContentCtrlMedResolveStepped.Content = null;
                        //    this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                        }
                    }
                }
                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    let _CurrentDTTM: DateTime= CommonBB.GetServerDateTime();
                    let OldItem: CListItem = (e != null && e.RemovedItems != null && e.RemovedItems.Count > 0) ? ObjectHelper.CreateType<CListItem>(e.RemovedItems[0], CListItem) : null;
                    let IsStartDTTMAvailable: boolean = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsStepDoseStartDTTMRestored = true;
                    let IsIPClerkingForm: boolean = (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory);
                    if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) || IsIPClerkingForm) {
                        IsStartDTTMAvailable = true;
                    }
                    if (IsStartDTTMAvailable && OldItem != null && newItem != null && !String.Equals(OldItem.Value, newItem.Value, StringComparison.InvariantCultureIgnoreCase) && (this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendList || this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds) && (this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableStartdtSeq && (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && DateTime.LessThan(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, _CurrentDTTM)) || (IsIPClerkingForm && DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM = _CurrentDTTM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime = _CurrentDTTM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.OrginalStartDTTM = _CurrentDTTM;
                        this.oResolveItem.IsStartDTTMAssignedForAmend = true;
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsStepDoseStartDTTMRestored = false;
                }
                this.EnableStartDateTimeControls();
            }
            this.SetDoseGridLength();
        }
        public AutoScrollView(): void {
            let _ErrorID: number = 80000012;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, medFormViewer.AutoScrollView()";                
            // let objUIElementCurrRootVisual: UIElement = ObjectHelper.CreateType<UIElement>(this.RootVisual, "UIElement");
            // if (objUIElementCurrRootVisual != null) {
                //Revisit Required
                /*
                if (this.ContentCtrlMedResolveStepped.Content instanceof medresolvestepped) {
                    let objMedResolvedContent: medresolvestepped = (ObjectHelper.CreateType<medresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medresolvestepped));
                    if (objMedResolvedContent != null) {
                        try {
                            let generalTrans = objMedResolvedContent.cmdAdd.TransformToVisual(objUIElementCurrRootVisual);
                            if (generalTrans != null) {
                                // let _point: Point = generalTrans.Transform(new Point(0, 0));
                                let _point: Point = {X:0,Y:0};
                                let svwFormViewer: ScrollViewer = ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer);
                                if (svwFormViewer != null) {
                                    svwFormViewer.ScrollToVerticalOffset(_point.Y);
                                }
                            }
                        }
                        catch (E) {
                            let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, E);
                        }

                        objMedResolvedContent.txtLowerDose.Focus();
                    }
                }
                else */ if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                    let objMedIPResolvedContent: medipresolvestepped = (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped));
                    if (objMedIPResolvedContent != null) {
                        try {
                    // let svwFormViewer: ScrollViewer = ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer);
                    if (ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer) != null && this.ftbFormViewDetails != null && this.ftbFormViewDetails.Items != null && this.ftbFormViewDetails.Items.Count > 0) {
                                let objFVDetail: iTabItem = (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[0], iTabItem));
                                if (objFVDetail != null && objFVDetail.Content != null) {
                                    let objFormViewUC: UserControl = (ObjectHelper.CreateType<UserControl>(objFVDetail.Content, UserControl));
                                    if (objFormViewUC != null) {
                                        objFormViewUC.UpdateLayout();
                                    }
                                }
                                // setTimeout(() => {
                                    ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer).ScrollToVerticalOffset(parseInt(ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer).MaxHeight));
                                // }, 10);
                       
                            }
                        }
                        catch (E:any) {
                            let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, E);
                        }

                        objMedIPResolvedContent.txtLowerDose?.Focus();
                    }
                }
                //Revisit Required
                
                else if (this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose && this.DOAutoScroll) {
                    let objmedConditionalDose: medConditionalDose = (ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose));
                    if (objmedConditionalDose != null) {
                        try {
                            // let generalTrans = objmedConditionalDose.cmdAdd.TransformToVisual(objUIElementCurrRootVisual);
                            // if (generalTrans != null) {
                                // let _point: Point = generalTrans.Transform(new Point(0, 0));
                    // let svwFormViewer: ScrollViewer = ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer);
                    if (ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer) != null) {
                        objmedConditionalDose.cboFrequency?.Focus();
                        ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer).ScrollToVerticalOffset(parseInt(ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer).MaxHeight));
                                }
                            // }
                        }
                        catch (E:any) {
                            let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, E);
                        }

                        // objmedConditionalDose.cboFrequency?.Focus();
                    }
                }
                else if (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose) {
                    let objmedContConditionalDosee: medContConditionalDose = (ObjectHelper.CreateType<medContConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medContConditionalDose));
                    if (objmedContConditionalDosee != null) {
                        try {
                            // let generalTrans = objmedContConditionalDosee.cmdAdd.TransformToVisual(objUIElementCurrRootVisual);
                            // if (generalTrans != null) {
                            //     let _point: Point = generalTrans.Transform(new Point(0, 0));
                    // let svwFormViewer: ScrollViewer = ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer);
                    if (ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer) != null) {
                        ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer).ScrollToVerticalOffset(parseInt(ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer).MaxHeight));
                                }
                            // }
                        }
                        catch (E:any) {
                            let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, E);
                        }

                        objmedContConditionalDosee.cboRangeUOM?.Focus();
                    }
                }
                
                else if (this.ContentCtrlMedResolveStepped.Content instanceof medresolvetitrated && this.DOAutoScroll) {
                    let objmedresolvetitrated: medresolvetitrated = (ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated));
                    if (objmedresolvetitrated != null) {
                        try {
                            // let generalTrans = objmedresolvetitrated.cboFrequency.TransformToVisual(objUIElementCurrRootVisual);
                            // if (generalTrans != null) {
                            //     let _point: Point = generalTrans.Transform(new Point(0, 0));
                    // let svwFormViewer: ScrollViewer = ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer);
                    if (ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer) != null) {
                        ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer).ScrollToVerticalOffset(parseInt(ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer).MaxHeight));
                                }
                            // }
                        }
                        catch (E:any) {
                            let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, E);
                        }

                        objmedresolvetitrated.cboFrequency?.Focus();
                    }
                }
                
            // }
        }
        private FillDynFrmTitratedMandatory(): void {
            //Revisit Required
            
            let oresolvedcontent: medresolvetitrated = ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated);
            if (oresolvedcontent != null && this.frmViewBasic != null) {
            // let lblfreq: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblFrequency"), iLabel);
            if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblFrequency"), iLabel) != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicControls != null && this.oResolveItem.FormViewerDetails.BasicControls.Length > 0) {
                    let indexfreq: number = Array.IndexOf(this.oResolveItem.FormViewerDetails.BasicControls, this.oResolveItem.FormViewerDetails.BasicControls.Where(x => x.Contains("CC_FREQUENCY")).FirstOrDefault());
                    if (this.oResolveItem.FormViewerDetails.MandatoryControls != null) {
                    if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblFrequency"), iLabel) != null) {
                            if (this.oResolveItem.FormViewerDetails.MandatoryControls.Length >= indexfreq && indexfreq != -1) {
                                oresolvedcontent.lblFrequency.Mandatory = this.oResolveItem.FormViewerDetails.MandatoryControls[indexfreq];
                            }
                        }
                    }
                }
            }
            
        }
        private FillDynFrmSteppedDoseMandatory(): void {
            //Revisit Required
            /*
            let oresolvedcontent: medresolvestepped = ObjectHelper.CreateType<medresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medresolvestepped);
            if (oresolvedcontent != null) {
                let lbldose: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDose"), iLabel);
                let lblfreq: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblFrequency"), iLabel);
                let lblDuration: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDuration"), iLabel);
                if (this.oResolveItem.FormViewerDetails.BasicControls != null && this.oResolveItem.FormViewerDetails.BasicControls.Length > 0) {
                    let indexfreq: number = Array.IndexOf(this.oResolveItem.FormViewerDetails.BasicControls, this.oResolveItem.FormViewerDetails.BasicControls.Where(x => x.Contains("CC_FREQUENCY")).FirstOrDefault());
                    let indexDur: number = Array.IndexOf(this.oResolveItem.FormViewerDetails.BasicControls, this.oResolveItem.FormViewerDetails.BasicControls.Where(x => x.Contains("DURON")).FirstOrDefault());
                    let indexDose: number = Array.IndexOf(this.oResolveItem.FormViewerDetails.BasicControls, this.oResolveItem.FormViewerDetails.BasicControls.Where(x => x.Contains(CConstants.CONST_DOSE)).FirstOrDefault());
                    if (this.oResolveItem.FormViewerDetails.MandatoryControls != null) {
                        if (lblfreq != null) {
                            if (this.oResolveItem.FormViewerDetails.MandatoryControls.Length >= indexfreq && indexfreq != -1) {
                                oresolvedcontent.lblFrequency.Mandatory = this.oResolveItem.FormViewerDetails.MandatoryControls[indexfreq];
                            }
                        }
                        if (lbldose != null) {
                            if (this.oResolveItem.FormViewerDetails.MandatoryControls.Length >= indexDose && indexDose != -1) {
                                oresolvedcontent.lblDose.Mandatory = this.oResolveItem.FormViewerDetails.MandatoryControls[indexDose];
                                oresolvedcontent.lblUOM.Mandatory = this.oResolveItem.FormViewerDetails.MandatoryControls[indexDose];
                            }
                        }
                        if (lblDuration != null) {
                            if (this.oResolveItem.FormViewerDetails.MandatoryControls.Length >= indexDur && indexDur != -1) {
                                oresolvedcontent.lblDuration.Mandatory = this.oResolveItem.FormViewerDetails.MandatoryControls[indexDur];
                            }
                        }
                    }
                }
            }
            */
        }
        private FillSteppedDoseContent(): void {
            //Revisit Required
            /*
            if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null) {
                let oresolvedcontent: medresolvestepped = ObjectHelper.CreateType<medresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medresolvestepped);
                oresolvedcontent.omedFormViewer = this;
                if (oresolvedcontent != null) {
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                        this.FillDynFrmSteppedDoseMandatory();
                    }
                    if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Dose)) {
                        oresolvedcontent.txtLowerDose.Text = this.oResolveItem.FormViewerDetails.BasicDetails.Dose;
                    }
                    if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose)) {
                        oresolvedcontent.txtUpperDose.Text = this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Value)) {
                        oresolvedcontent.cboFrequency.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.Frequency;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM.Value)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.SteppedDoseUOM = this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.Duration != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration)) {
                        let DurationValue: Double = Double.MinValue;
                        if (Double.TryParse(this.oResolveItem.FormViewerDetails.BasicDetails.Duration, (o) => { DurationValue = o})) {
                            oresolvedcontent.udDuration.Value = DurationValue;
                        }
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value)) {
                        oresolvedcontent.cboDuration.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM;
                    }
                    if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null)
                        ToolTipService.SetToolTip((<medresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtVariable, "Specify instructions");
                    if (this.oResolveItem.FormViewerDetails != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) != 0 && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) != 0 && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID) != 0))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.Dose = String.Empty;
                        this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = null;
                    }
                    if (this.oResolveItem.FormViewerDetails != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null))) {
                        if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate)) {
                            oresolvedcontent.txtInfusionRate.Text = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate = String.Empty;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate = String.Empty;
                        }
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Value)) {
                            oresolvedcontent.cboInfRateNumUOM.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = null;
                        }
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Value)) {
                            oresolvedcontent.cboInfRateDenoUOM.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = null;
                        }
                    }
                }
            }
            */
            this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.Duration = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod = null;
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusRateMand = false;
            }
        }
        private FillIPSteppedDoseContent(): void {
            if (this.ContentCtrlMedResolveStepped.Content != null && (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped)) {
                (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).omedFormViewer = this;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Dose)) {
                (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtLowerDose.Text = this.oResolveItem.FormViewerDetails.BasicDetails.Dose;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose)) {
                (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtUpperDose.Text = this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose;
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Value)) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.Type) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.Type, CConstants.IntervalFreq, StringComparison.InvariantCultureIgnoreCase)) {
                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboFrequency.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.Frequency;
                }
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM.Value)) {
                this.oResolveItem.FormViewerDetails.BasicDetails.SteppedDoseUOM = this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate)) {
                (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtInfusionRate.Text = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Value)) {
                (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Value)) {
                (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.Duration != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration)) {
                let DurationValue: number = Double.MinValue;
                if (Double.TryParse(this.oResolveItem.FormViewerDetails.BasicDetails.Duration, (o) => {DurationValue=o})) {
                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).udDuration.Value = DurationValue;
                }
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value)) {
                (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboDuration.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM;
            }
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null)
                ToolTipService.SetToolTip((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtVariable, "Specify instructions");
            (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).DataContext = this.oResolveItem;
            if (this.oResolveItem.FormViewerDetails != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) != 0 && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) != 0 && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID) != 0))) {
                this.oResolveItem.FormViewerDetails.BasicDetails.Dose = String.Empty;
                this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = null;
            }
            if (this.oResolveItem.FormViewerDetails != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null))) {
                if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate)) {
                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtInfusionRate.Text = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate = String.Empty;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate = String.Empty;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Value)) {
                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = null;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Value)) {
                    (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = null;
                }
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.Frequency = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.Duration = String.Empty;
            this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDose = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDoseUOM = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod = null;
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusRateMand = false;
            }
        }
        private SetDoseGridLength(): void {
            if (this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.CurrentCultureIgnoreCase)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
                    this.oResolveItem.FormViewerDetails.BasicDetails.HifenWidth = new GridLength(1, GridUnitType.Auto);
                    this.oResolveItem.FormViewerDetails.BasicDetails.UpperDoseWidth = new GridLength(1, GridUnitType.Star);
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
                    this.oResolveItem.FormViewerDetails.BasicDetails.HifenWidth = new GridLength(0);
                    this.oResolveItem.FormViewerDetails.BasicDetails.UpperDoseWidth = new GridLength(0);
                }
            }
            let DoseLayoutRoot: Grid = ObjectHelper.CreateType<Grid>(this.frmViewBasic.FindName("DoseLayoutRoot"), Grid);
            // Revisit After The Implementaion of Width -- 55306
            // if (DoseLayoutRoot instanceof Grid) {
            //     DoseLayoutRoot.ColumnDefinitions[0].Width = this.oResolveItem.FormViewerDetails.BasicDetails.LowerDoseWidth;
            //     DoseLayoutRoot.ColumnDefinitions[1].Width = this.oResolveItem.FormViewerDetails.BasicDetails.HifenWidth;
            //     DoseLayoutRoot.ColumnDefinitions[2].Width = this.oResolveItem.FormViewerDetails.BasicDetails.UpperDoseWidth;
            // }
        }
        private FillTitrateddoseContent(): void {
            //Revisit Required
            
            if (this.ContentCtrlMedResolveStepped.Content != null && (this.ContentCtrlMedResolveStepped.Content instanceof medresolvetitrated)) {
                (ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated)).omedFormViewer = this;
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Value)) {
                (<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content)).cboFrequency.SelectedValue = this.oResolveItem.FormViewerDetails.BasicDetails.Frequency;
            }
            else {
                (<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content)).cboFrequency.SelectedValue = null;
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM.Value) && this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails != null) {
                this.oResolveItem.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.ForEach(ReInsert => {
                    ReInsert.ScheduleDoseValue = new Array(CConstants.TitratedgridSize);
                });
                this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails.DoseUOM = this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM.DisplayText;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails != null) {
                this.oResolveItem.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.ForEach(ReInsert => {
                    ReInsert.ScheduleDoseValue = new Array(CConstants.TitratedgridSize);
                });
                this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails.DoseUOM = String.Empty;
            }
            
        }
        private DiableContiniousMandatory(): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isRouteMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsFrmInfusRateMand = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isInfusionTypeMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsMandatoryStartdtSeq = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isDoseTypeMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFrequencyMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isBolusMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.islockoutMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isBrandMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsMedclerkSourceVisible = Visibility.Visible;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryMedClekSource = false;
        }
        private DisableFlowRateMandatory(): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.IsFlowratemandatory = false;
        }
        private DisableRouteMandatory(): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isRouteMandatory = false;
        }
        private DisableConcenMandatory(): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcenMandatory = false;
        }
        private DisableStopDate(): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStopDate = true;
        }
        public iLabelForSupplyInstruction(Name: string): iLabel {
            let ilabel : iLabel =  ObjectHelper.CreateObject(new iLabel(), {
                Name: Name,            
            });
            return ilabel;
        }
    private async ChangeDynamicForm(objForm: Object) {
            (objForm as UserControl).ParentRef = this;
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds) {
                this.oResolveItem.oDoseCalcDefault = null;
            }
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsSequenceStartDTTMReset = true;
            }
            else if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsSequenceStartDTTMReset = true;
            }
            let blDynamicformchanged: boolean = false;
            if (this.frmViewBasic instanceof frmBasicFormViewer && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.CurrentCultureIgnoreCase))) {
                blDynamicformchanged = true;
            }
            
            await this.tabReplacementForSelectionChanged(objForm);
            //Revisit Required
            this.frmViewBasic.DataContext = this.DataContext;
        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
            setTimeout(() => {
                if (this.frmViewBasic != null) {
                // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
                    if (this.oTxtProblem instanceof iTextBox) {
                        // this.oTxtProblem.OnClick -= oTxtProblem_OnClick;
                        // this.oTxtProblem.KeyDown -= oTxtProblem_KeyDown;
                        this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
                        this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
                    }
                // this.lblReviewcopiedose = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewcopieddoses"), iLabel);
                    if (this.lblReviewcopiedose instanceof iLabel) {
                        // this.lblReviewcopiedose.MouseLeftButtonUp -= lblReviewcopieddoses_MouseLeftButtonUp;
                        this.lblReviewcopiedose.MouseLeftButtonUp  = (s,e) => { this.lblReviewcopieddoses_MouseLeftButtonUp(s,e); } ;
                    }
                // this.lblSupplyInst = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInst"), iLabel);
                    if(this.lblSupplyInst == null){
                    // this.lblSupplyInst = this.iLabelForSupplyInstruction("lblSupplyInst");
                    }
                    if (this.lblSupplyInst instanceof iLabel) {
                        // this.lblSupplyInst.MouseLeftButtonUp -= lblSupplyInst_MouseLeftButtonUp;
                        this.lblSupplyInst.MouseLeftButtonUp = (s,e) => {
                            Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
                            this.lblSupplyInst_MouseLeftButtonUp(s,e)};
                        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                            if (this.oResolveItem.FormViewerDetails.TechValidateDetails != null && this.oResolveItem.PresTechValidatedItemsChild != null && this.oResolveItem.PresTechValidatedItemsChild.Count > 0) {
                                for (let i: number = 0; i < this.oResolveItem.PresTechValidatedItemsChild.Count; i++) {
                                    if ((this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SelectedsupplyInstruction != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count > 0) || !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.Supplycomments) || !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.SupplyInsVal) || (this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.TechValSupplyInst != null && !String.IsNullOrEmpty(this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.BasicDetails.TechValSupplyInst.Value)) || (this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails.TechValidatedItems != null && this.oResolveItem.PresTechValidatedItemsChild[i].FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0)) {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                                    }
                                }
                                if (!String.Equals(this.oResolveItem.FormViewerDetails.TechValidateDetails.supplyinstrtext, Resource.MedicationForm.lblSupplyInstructionsText_Tooltip, StringComparison.InvariantCultureIgnoreCase) || !String.Equals(this.oResolveItem.FormViewerDetails.TechValidateDetails.SupplyInsTextWithComments, Resource.MedicationForm.lblSupplyInstructionsText_Tooltip, StringComparison.InvariantCultureIgnoreCase)) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                                }
                                else if (this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems != null && (this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0)) {
                                    for (let j: number = 0; j < this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count; j++) {
                                        if ((this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[j].selectedSupplyInstruction != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[j].selectedSupplyInstruction.Count > 0) || (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems[j].SupComments))) {
                                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                                            this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                                        }
                                    }
                                }
                            }
                        }
                        let lblSupTooltip: iLabel = new iLabel();
                        lblSupTooltip.Text = Resource.MedicationForm.lblSupplyInst_Tooltip;
                        ToolTipService.SetToolTip(this.lblSupplyInst, lblSupTooltip);
                    }
                    else if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Collapsed;
                    }
                    if (this.frmViewBasic != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText != null) {
                        let lblSupplyInstText: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInstText"), iLabel);
                        if (lblSupplyInstText instanceof iLabel) {
                            let lblSupTooltip: iLabel = new iLabel();
                            lblSupTooltip.Text = !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) ? this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText : Resource.medauthorise.cmdSupplyInstruction_ToolTip;
                            lblSupTooltip.Width = 250;
                            lblSupTooltip.IsWordwrap = true;
                            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText, Resource.MedicationForm.lblSupplyInstructionsText_Tooltip, StringComparison.InvariantCultureIgnoreCase) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsTextWithComments = this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText + Environment.NewLine + "Comments:" + this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments;
                            }
                            else if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsTextWithComments = "Comments:" + this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments;
                            }
                            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Supplycomments)) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsTextWithComments = this.oResolveItem.FormViewerDetails.BasicDetails.SupplyInsText;
                            }
                            ToolTipService.SetToolTip(lblSupplyInstText, lblSupTooltip);
                        }
                    }
                    //this.cmdReviewDetails = ObjectHelper.CreateType<iButton>(this.frmViewBasic.FindName("cmdReviewDetails"), iButton);
                    if (this.cmdReviewDetails != null) {
                        // this.cmdReviewDetails.Click -= new RoutedEventHandler(cmdReviewDetails_Click);
                        this.cmdReviewDetails.Click  = (s,e) => { this.cmdReviewDetails_Click(s,e); } ;
                    }
                }
            }, 10);
            if (blDynamicformchanged || (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content == null)) {
                if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase)) {
                    //Revisit Required
                    
                    if (((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.FLUID))) || this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded)) {
                        this.ContentCtrlMedResolveStepped.Content = new medContConditionalDose();
                        this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext;
                    }
                    else {
                        this.ContentCtrlMedResolveStepped.Content = new medConditionalDose();
                        this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext;
                    }
                    
                }
                
                else if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.CurrentCultureIgnoreCase))) {
                    this.ContentCtrlMedResolveStepped.Content = new medipresolvestepped();
                    this.ContentCtrlMedResolveStepped.Content.DataContext = this.DataContext;
                }
                //Revisit Required
                
                else if ((PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.CurrentCultureIgnoreCase)))) {
                    let ObjMedIpresolve = new medresolvetitrated();
                    ObjMedIpresolve.DataContext = this.DataContext;
                    ObjMedIpresolve.oPrescriptionItemVM = this.oResolveItem;
                    this.ContentCtrlMedResolveStepped.Content = ObjMedIpresolve;
                }
                this.populateTabLoadedEvent.next(true)
                this.objfrmFVFooter.ngAfterViewInit();             
            }
            setTimeout(() => {
                this.oResolveItem.FormviewerLoadedEvent.emit(true);
            }, 0);
        }
        OnReferenceChanged(tab){

            if(tab.Key == "frmBasic"){
                this.frmViewBasic = tab.ref;
            }
        }
        private async setDynamicControl(value):Promise<any>{
            return new Promise<any>(resolve => {
                if(value == 'frmBasic' && (this.frmViewBasic as any).constructor.name == 'frmBasicFormViewer')
                {
                    (this.frmViewBasic as frmBasicFormViewer).afterDynamicControlInit.subscribe((data) => {
                        //console.log("frmBasicFormViewer.afterDynamicControlInit.subscribe",data,(new Date()).getTime().toString());
                        (this.frmViewBasic as frmBasicFormViewer).DynamicControls = data;
                        resolve(true);
                    });
                }
                else if(value == 'frmAdditional' && (this.frmViewAdditional as any).constructor.name == 'frmBasicFormViewer')
                {
                    (this.frmViewAdditional as frmBasicFormViewer).afterDynamicControlInit.subscribe((data) => {
                        (this.frmViewAdditional as frmBasicFormViewer).DynamicControls = data; 
                        resolve(true);
                    });
                }
                else
                {
                    resolve(true);
                }
            })
        }
        private async PopulateFormViewerFauxTab(IsConflictClick: boolean): Promise<void> {
            let sItemMainType: string = String.Empty;
            sItemMainType = this.oResolveItem.ItemMainType;
            let IsInfusionON: boolean = true;
            if (this.oResolveItem.ActionCode == ActivityTypes.Amend && !PatientContext.IsINFUSIONON) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Infused) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.Infused, "1"))
                    IsInfusionON = true;
                else IsInfusionON = false;
            }
            else if (!PatientContext.IsINFUSIONON && this.oResolveItem.ActionCode != ActivityTypes.Amend) {
                IsInfusionON = false;
            }
            let IsMedicalOxygen: boolean = false;
            let IsMedicalGas: boolean = false;
            let IsBloodProductDrug: boolean = false;
            let IsMultiInfusionRoutes: boolean = false;
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.MulticomponentDetails != null && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 4 && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count < 6 && (String.Compare(this.oResolveItem.LorenzoID, CommonFlags.MClorenzoid, StringComparison.OrdinalIgnoreCase) == 0)) {
                // this.brdHeader.Height = 95;
            }
            else {
                this.brdHeader.Height = Number.NaN;
            }	    
            if (PatientContext.IsINFUSIONON && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "1") {
                this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0) {
                let selectedrouteClistitem: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected).ToArray();
                let selectedInfusionRoute: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(cl => cl.IsSelected && (cl.Tag != null && String.Compare(cl.Tag.ToString(), "1") == 0)).ToArray();
                if (selectedInfusionRoute.Count() > 0 && selectedrouteClistitem.Count() > 0 && (selectedInfusionRoute.Count() != selectedrouteClistitem.Count()) && PatientContext.IsINFUSIONON) {
                    this.oResolveItem.FormViewerDetails.BHasFormViewParams = false;
                }
            }
            let sItesubType: string = String.Empty;
            sItesubType = this.oResolveItem.ItemSubType;
            let sBasicControls: string = String.Empty;
            let sMandatoryControls: string = String.Empty;
            let smand: string = String.Empty;
            let sAdditionalControls: string = String.Empty;
            let sIdentifyingType: string = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
            if (this.oResolveItem.FormViewerDetails.BHasFormViewParams || sItemMainType == CConstants.Formulary_Unknown) {
                let bBindReorderControls: boolean = this.oResolveItem.IsReasonForMedicationClerkModifyVisible == Visibility.Visible;
                let lstControls: List<string> = new List<string>(this.oResolveItem.FormViewerDetails.BasicControls);
                let lstManControls: List<boolean> = null;
                if (!(this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.IsLoadBasicFaxTab)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableOnbehalfOf = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify = false;
                }
                if (!lstControls.Contains("CC_STOPDTTM") && this.oResolveItem.FormViewerDetails.BasicDetails.IsClearIVtoNonIVformStopDateTime) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = DateTime.MinValue;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = DateTime.MinValue;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsClearIVtoNonIVformStopDateTime = false;
                }
                if (this.oResolveItem.FormViewerDetails.MandatoryControls != null)
                    lstManControls = new List<boolean>(this.oResolveItem.FormViewerDetails.MandatoryControls);
                if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase) == 0) {
                    if ((lstControls.Contains("CC_STARTDTTM") || lstControls.Contains("CC_STARTDT"))) {
                        this.AddStartDTTMCtrlsForMedClrek(lstControls, lstManControls);
                    }
                    else {
                        if (this.oResolveItem.FormViewerDetails.AdditionalControls != null) {
                            let lstAddControls: List<string> = new List<string>(this.oResolveItem.FormViewerDetails.AdditionalControls);
                            this.AddStartDTTMCtrlsForMedClrek(lstAddControls, lstManControls);
                            this.oResolveItem.FormViewerDetails.AdditionalControls = lstAddControls.ToArray();
                        }
                    }
                }
                if (bBindReorderControls && !this.oResolveItem.FormViewerDetails.BasicControls.Contains(CConstants.sMedClerk)) {
                    lstControls.Add(CConstants.sMedClerk);
                    if (lstManControls != null) {
                        lstManControls.Add(false);
                    }
                }
                if (this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_REVIEWAFTER") && !this.oResolveItem.FormViewerDetails.BasicControls.Contains("ReviewComments")) {
                    let i: number = lstControls.IndexOf("CC_REVIEWAFTER");
                    if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase) || (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase) && String.Equals(PatientContext.ClerkFormViewDefaultBehavior, ClerkFormViewDeftBehaviour.LaunchFormMandatory))) {
                        lstControls.RemoveAt(i);
                        lstManControls.RemoveAt(i);
                    }
                    else {
                        lstControls.Insert(i + 1, "ReviewComments");
                        if (lstManControls != null) {
                            lstManControls.Insert(i + 1, false);
                        }
                    }
                }
                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && !this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_REASONMOD")) {
                    lstControls.Add("CC_REASONMOD");
                    lstControls.Add("CC_REASONMODCOM");
                    if (lstManControls != null) {
                        lstManControls.Add(false);
                        lstManControls.Add(false);
                    }
                }
                if ((String.Compare(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode, StringComparison.InvariantCultureIgnoreCase) == 0 || String.Compare(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.InvariantCultureIgnoreCase) == 0) && !this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_VerifyAuthorise")) {
                    lstControls.Add("CC_VerifyAuthorise");
                    lstControls.Add("CC_VerifyAuthoriseCOM");
                    if (lstManControls != null) {
                        lstManControls.Add(false);
                        lstManControls.Add(false);
                    }
                }
                if ((String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.OrdinalIgnoreCase) == 0) && !this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_Isnewmeds")) {
                    lstControls.Add("CC_Isnewmeds");
                    if (lstManControls != null) {
                        lstManControls.Add(false);
                        lstManControls.Add(false);
                    }
                }
                this.oResolveItem.FormViewerDetails.AddOtherAdminInstruction(this.oResolveItem.FormViewerDetails.BasicControls, lstControls, lstManControls);
                this.oResolveItem.FormViewerDetails.AddPRNInstruction(this.oResolveItem.FormViewerDetails.BasicControls, lstControls, lstManControls);
                if (!lstControls.Contains("CC_FORM")) {
                    lstControls.Add("CC_FORM");
                    this.oResolveItem.FormViewerDetails.BasicDetails.DosageFormVisibility = Visibility.Collapsed;
                    if (lstManControls != null) {
                        lstManControls.Add(false);
                    }
                }
                if (!lstControls.Contains("CC_STRENGTH")) {
                    lstControls.Add("CC_STRENGTH");
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Strengths == null || this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Strengths.Count == 0) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.StrengthVisibility = Visibility.Collapsed;
                    }
                    if (lstManControls != null) {
                        lstManControls.Add(false);
                    }
                }
                if (!lstControls.Contains("CC_SITE")) {
                    lstControls.Add("CC_SITE");
                    this.oResolveItem.FormViewerDetails.BasicDetails.SiteVisibility = Visibility.Collapsed;
                    if (lstManControls != null) {
                        lstManControls.Add(false);
                    }
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsBrandMandatory != Visibility.Visible) {
                    if (!lstControls.Contains("CC_Brand")) {
                        lstControls.Add("CC_Brand");
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsBrandMandatory = Visibility.Collapsed;
                        if (lstManControls != null) {
                            lstManControls.Add(false);
                        }
                    }
                }
                else {
                    if (!lstControls.Contains("CC_Brand")) {
                        lstControls.Add("CC_Brand");
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsBrandMandatory = Visibility.Visible;
                        if (lstManControls != null) {
                            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase) != 0)
                                lstManControls.Add(true);
                            else lstManControls.Add(false);
                        }
                    }
                }
                if (this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !lstControls.Contains(CConstants.CONST_DOSE)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsReviewtiratedosesVisibility = Visibility.Collapsed;
                        this.oResolveItem.FormViewerDetails.BasicDetails.RemoveTitratedDoseType(String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.OrdinalIgnoreCase));
                    }
                }
                let IsMultipleRoute: boolean = false;
                if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute) {
                    IsMultipleRoute = this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute;
                }
                this.oResolveItem.FormViewerDetails.BasicControls = lstControls.ToArray();
                if (lstManControls != null)
                    this.oResolveItem.FormViewerDetails.MandatoryControls = lstManControls.ToArray();
                if (!this.oResolveItem.FormViewerDetails.BasicControls.Contains("DURON") && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    let dtStopDateTime: DateTime= this.oResolveItem.FormViewerDetails.BasicDetails.StopDate;
                    let dtStopTime: DateTime= this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime;
                    if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration))
                        this.oResolveItem.FormViewerDetails.BasicDetails.Duration = String.Empty;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM != null)
                        this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM = null;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = dtStopDateTime;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = dtStopTime;
                }
                if (!this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_DIRECTION") && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired = false;
                }
                let IsTitratedDosetype: boolean = false;
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.CurrentCultureIgnoreCase)) {
                    IsTitratedDosetype = true;
                }
                //88429
                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminTypeFlag) && this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminTypeFlag.Equals("F") && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsFixedTime = true;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminTypeFlag = String.Empty;
                }
                
                let frmBasic = new frmBasicFormViewer();
                // To be Verified
                // this.frmViewBasic.ParentRef = this;
                frmBasic.constructorImpl5(this.oResolveItem.FormViewerDetails.BasicControls, this.oResolveItem.FormViewerDetails.MandatoryControls, true, IsMultipleRoute, IsTitratedDosetype);
                this.ChangeDynamicForm(frmBasic);
                
                await this.setDynamicControl('frmBasic');

                if (this.oResolveItem.FormViewerDetails.BasicControls != null && this.oResolveItem.FormViewerDetails.BasicControls.Count() > 0 && this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_SUPLYINSTR") && (PatientContext.PrescriptionType == PrescriptionTypes.Inpatient)) {
                    if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise || (this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise && !String.IsNullOrEmpty(this.oResolveItem.PrescriptionItemStatus) && !String.Equals(this.oResolveItem.PrescriptionItemStatus, CConstants.AWAITINGAUTHORISE, StringComparison.InvariantCultureIgnoreCase))) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                }
                if (this.oResolveItem.FormViewerDetails.BasicControls != null && this.oResolveItem.FormViewerDetails.BasicControls.Count() > 0 && this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_ADMININSTR") && (PatientContext.PrescriptionType == PrescriptionTypes.Leave || PatientContext.PrescriptionType == PrescriptionTypes.Outpatient || PatientContext.PrescriptionType == PrescriptionTypes.Discharge)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsAdminInsVisible = Visibility.Visible;
                }
            // this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
                if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
                    if (this.cboDoseType != null)
                        // this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
                    this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
                }
                if (String.Compare(sIdentifyingType, "CATALOGUEITEM", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sIdentifyingType, "ACTUALMOIETY", StringComparison.OrdinalIgnoreCase) == 0) {
                // let lblQuantity: iLabel = <iLabel>this.frmViewBasic.FindName("lblQuantity");
                // if ( <iLabel>this.frmViewBasic.FindName("lblQuantity") != null)
                // <iLabel>this.frmViewBasic.FindName("lblQuantity").Mandatory = false;
                }
                let blIsselectMCITab: boolean = IsConflictClick;

                if (String.Compare(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                    blIsselectMCITab = true;
                    this.frmViewMulticomponent = new Multicomponent();
                    this.frmViewMulticomponent.DataContext = this.DataContext;
                    await this.ftbFormViewDetails.AddTabItem("frmmulticomponent", "Multiple component details", this.frmViewMulticomponent, blIsselectMCITab, "Multiple component details", 'M');
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = false;
                }
                   //Boomi aded for MCI. splice method will be replaced by platform method once delivered
                   if(this.ftbFormViewDetails.GetItem('frmBasic') == null || this.ftbFormViewDetails.GetItem('frmBasic') == undefined){   
                    
                    if(blIsselectMCITab)
                    {   if(this.ftbFormViewDetails.Items.Count >1)
                        {
                            this.ftbFormViewDetails.Items.RemoveTab(0);
                        }
                        this.ftbFormViewDetails.AddTabItem("frmBasic", "Basic details", this.frmViewBasic, !blIsselectMCITab, "Basic details",null);
                    }
                    else
                    {
                        this.frmViewBasic = await this.ftbFormViewDetails.AddTabItem("frmBasic", "Basic details", this.frmViewBasic, !blIsselectMCITab, "Basic details",null);
                    }
                   
                }
               console.log("afterAddTabItem.res",this.ftbFormViewDetails,(new Date()).getTime().toString());
                if (String.Compare(sIdentifyingType, CConstants.NONCATALOGUEITEM, StringComparison.OrdinalIgnoreCase) != 0 && String.Compare(sIdentifyingType, CConstants.Precatalog, StringComparison.OrdinalIgnoreCase) != 0) {
                    this.frmViewAdditional = new frmBasicFormViewer();
                    this.frmViewAdditional.DataContext = this.DataContext;
                    this.frmViewAdditional.constructorImpl1(false);
                    this.frmViewAdditional = await this.ftbFormViewDetails.AddTabItem("frmAdditional", "Additional details", this.frmViewAdditional, false, "Additional details");
                    this.setDynamicControl('frmAdditional');
                }
            }
            else {
                if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute && this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteChecked && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S') && this.oResolveItem.FormViewerDetails.BasicDetails.Route == null) {
                        let selectedClistitem: CListItem[] = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(c => c.IsSelected == true).ToArray();
                        this.oResolveItem.FormViewerDetails.BasicDetails.Route = ObjectHelper.CreateObject(new CListItem(), { DisplayText: MedicationCommonBB.RouteName(selectedClistitem), Value: MedicationCommonBB.RouteOID(selectedClistitem), Tag: MedicationCommonBB.RouteTag(selectedClistitem) });
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null) {
                        let SelInfusionRoutes = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(SelInfRoutes => SelInfRoutes.IsSelected&&SelInfRoutes.Tag!=null&&SelInfRoutes.Tag.ToString().Contains("1"));
                        if (SelInfusionRoutes != null && SelInfusionRoutes.Count() > 0) {
                            IsMultiInfusionRoutes = true;
                        }
                        else {
                            IsMultiInfusionRoutes = false;
                        }
                    }
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsOxygen) {
                    IsMedicalOxygen = true;
                }
                else if (this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS") == 0) {
                    IsMedicalGas = true;
                }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.OrdinalIgnoreCase) == 0)) {
                IsBloodProductDrug = true;
            }
            if (String.Compare(sItemMainType, CConstants.Formulary_Drug, StringComparison.CurrentCultureIgnoreCase) == 0) {
                switch (PatientContext.PrescriptionType) {
                    //Revisit Required
                    
                    case PrescriptionTypes.Clerking:
                        if (IsInfusionON && (IsMedicalOxygen || IsMedicalGas)) {
                        //     this.frmViewBasic = new frmviewInfClerkGasOxygn();
			    // Revisit required
                            this.ChangeDynamicForm(new frmviewInfClerkGasOxygn());
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsEnableConcentration = true;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isRouteMandatory = false;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTargetSatrangeVisible = Visibility.Visible;
                        }
                        else if (IsInfusionON && IsBloodProductDrug) {
                            this.ChangeDynamicForm(new frmformviewClerkinginfusions());
                            this.InfusionClerkingVisibility();
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                        }
                        else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value)) {
                            this.ChangeDynamicForm(new frmformviewClerkinginfusions());
                            this.InfusionClerkingVisibility();
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                        }
                        else if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, "CC_TITRATED")) {
                                this.DefaultDoseType(InfusionTypeCode.CONTINUOUS);
                            }
                            this.ChangeDynamicForm(new frmformviewClerkinginfusions());
                            this.InfusionClerkingVisibility();
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                        }
                        else {
                            this.ChangeDynamicForm(new FormViewMedClerk());
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        break;
                    case PrescriptionTypes.Leave:
                        if (IsInfusionON && IsMedicalOxygen || IsMedicalGas) {
                            this.ChangeDynamicForm(new FormViewForAdminOxygen());
                            this.DisableStopDate();
                        }
                        else if (IsInfusionON && IsBloodProductDrug) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value)) {
                                switch (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) {
                                    case InfusionTypeCode.CONTINUOUS:
                                    case InfusionTypeCode.SINGLEDOSEVOLUME:
                                    case InfusionTypeCode.FLUID:
                                        this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = Visibility.Visible;
                                        break;
                                    case InfusionTypesCode.INTERMITTENT:
                                        let frmIntermittent = new formViewIntermittent();
                                        frmIntermittent.ParentRef = this;
                                        this.ChangeDynamicForm(frmIntermittent);
                                        //this.ChangeDynamicForm(new formViewIntermittent());
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = Visibility.Visible;
                                        break;
                                }
                            }
                            else {
                                this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = Visibility.Visible;
                                }
                        }
                        else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID) == 0)) {
                            this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        }
                        else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                            let frmIntermittent = new formViewIntermittent();
                            frmIntermittent.ParentRef = this;
                            this.ChangeDynamicForm(frmIntermittent);
                            //this.ChangeDynamicForm(new formViewIntermittent());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA) == 0) {
                            this.ChangeDynamicForm(new frmformviewForAdminPCAInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        else if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, "CC_TITRATED")) {
                                this.DefaultDoseType(InfusionTypeCode.CONTINUOUS);
                            }
                            this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                            if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Collapsed) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.Dose = String.Empty;
                                this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose = String.Empty;
                                this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = null;
                            }
                        }
                        else {
                            let frmLeave = new FormViewLeave();
                            frmLeave.ParentRef = this;
                            this.ChangeDynamicForm(frmLeave);
                        }
                        break;
                    case PrescriptionTypes.Outpatient:
                    case PrescriptionTypes.Discharge:
                        if (IsInfusionON && (IsMedicalOxygen || IsMedicalGas)) {
                            this.frmViewBasic = new FormViewForAdminOxygen();
                            this.frmViewBasic.DataContext = this.DataContext;
                            this.DisableStopDate();
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        else if (IsInfusionON && IsBloodProductDrug) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value)) {
                                switch (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) {
                                    case InfusionTypeCode.CONTINUOUS:
                                        case InfusionTypeCode.SINGLEDOSEVOLUME:
                                    case InfusionTypeCode.FLUID:
                                        this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = Visibility.Visible;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsTreatMentVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                                        break;
                                    case InfusionTypesCode.INTERMITTENT:
                                        let frmIntermittent = new formViewIntermittent();
                                        frmIntermittent.ParentRef = this;
                                        this.ChangeDynamicForm(frmIntermittent);
                                        //this.ChangeDynamicForm(new formViewIntermittent());
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = Visibility.Visible;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsTreatMentVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                                        break;
                                }
                            }
                            else {
                                this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDischargeVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsTreatMentVisible = ((PatientContext.PrescriptionType == PrescriptionTypes.Discharge) || (PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) ? Visibility.Visible : Visibility.Collapsed;
                                }
                        }
                        else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID) == 0)) {
                            this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        }
                        else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                            let frmIntermittent = new formViewIntermittent();
                            frmIntermittent.ParentRef = this;
                            this.ChangeDynamicForm(frmIntermittent);
                            //this.ChangeDynamicForm(new formViewIntermittent());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA) == 0) {
                            this.ChangeDynamicForm(new frmformviewForAdminPCAInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        else if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, "CC_TITRATED")) {
                                this.DefaultDoseType(InfusionTypeCode.CONTINUOUS);
                            }
                            this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        }
                        else {
                            let frmOPDschg = new FormViewOPDschg();
                            frmOPDschg.ParentRef = this;
                            this.ChangeDynamicForm(frmOPDschg);
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        break;
                        
                    case PrescriptionTypes.ForAdministration:
                        if (IsInfusionON && (IsMedicalOxygen || IsMedicalGas)) {
                            //Revisit Required
                            this.ChangeDynamicForm(new FormViewForAdminOxygen());
                        }
                        //Revisit Required
                        
                        else if (IsInfusionON && IsBloodProductDrug) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory = false;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value)) {
                                switch (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) {
                                    case InfusionTypeCode.CONTINUOUS:
                                    case InfusionTypeCode.SINGLEDOSEVOLUME:
                                    case InfusionTypeCode.FLUID:
                                        this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                                        break;
                                    case InfusionTypesCode.INTERMITTENT:
                                        let frmIntermittent = new formViewIntermittent();
                                        frmIntermittent.ParentRef = this;
                                        this.ChangeDynamicForm(frmIntermittent);
                                        //this.ChangeDynamicForm(new formViewIntermittent());
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                                        break;
                                }
                            }
                            else {
                                this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                            }
                            }
                        
                        else if (IsInfusionON && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains("1")) || IsMultiInfusionRoutes) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) == 0) {
                            this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        }
                        else if (IsInfusionON && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains("1")) || IsMultiInfusionRoutes) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                            let frmIntermittent = new formViewIntermittent();
                            frmIntermittent.ParentRef = this;
                            this.ChangeDynamicForm(frmIntermittent);
                            //this.ChangeDynamicForm(new formViewIntermittent());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        else if (IsInfusionON && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains("1")) || IsMultiInfusionRoutes) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA) == 0) {
                            this.ChangeDynamicForm(new frmformviewForAdminPCAInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        else if (PatientContext.IsINFUSIONON && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains("1")) || IsMultiInfusionRoutes)) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions == Visibility.Visible) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions = Visibility.Collapsed;
                            }
                            this.ChangeDynamicForm(new frmformviewForAdminConInfusions());
                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                        }
                        
                        else {
                            let frmForAdmin = new FormViewForAdmin();
                            frmForAdmin.ParentRef = this;
                            this.ChangeDynamicForm(frmForAdmin);
                            // this.ChangeDynamicForm(new FormViewForAdmin());
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        }
                        break;
                }
                }
                //Revisit Required

                else if (String.Compare(sItemMainType, CConstants.Formulary_Appliance, StringComparison.CurrentCultureIgnoreCase) == 0) {
                    if (IsInfusionON && this.oResolveItem.ItemSubType == CConstants.SUBTYPE_GAS) {
                        this.PopulateApplianceInfGas(IsInfusionON, IsMedicalGas, IsMedicalOxygen);
                    }
                else if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase) == 0) {
                    this.ChangeDynamicForm(new TypeinFormViewAppliance());
                }
                    else if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) == 0) {
                        this.ChangeDynamicForm(new FormViewForAdminAppliance());
                    }
                else {
                    this.ChangeDynamicForm(new FormViewAppliance());
                }
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                }

                if (String.Compare(sIdentifyingType, CConstants.NONCATALOGUEITEM) == 0 || String.Compare(sIdentifyingType, CConstants.Precatalog) == 0) {
                    this.PopulateTypeInDrug(IsInfusionON);
                    if (PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.CurrentCultureIgnoreCase)) && this.frmViewBasic != null && (this.ContentCtrlMedResolveStepped == null || (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content == null))) {
                    // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                        //Revisit Required                        
                        let ObjMedIpresolve = new medresolvetitrated();
                        ObjMedIpresolve.DataContext = this.DataContext;
                        ObjMedIpresolve.oPrescriptionItemVM = this.oResolveItem;
                        this.ContentCtrlMedResolveStepped.Content = ObjMedIpresolve;
                    }
                }
                if (this.frmViewBasic != null)
                    this.bIsTypeIn = true;
                let IsSelectMCITAB: boolean = IsConflictClick;

                if (String.Compare(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                    IsSelectMCITAB = true;
                    this.frmViewMulticomponent = new Multicomponent();
                    this.frmViewMulticomponent.DataContext = this.DataContext;
                    
                  await this.ftbFormViewDetails.AddTabItem("frmmulticomponent", "Multiple component details", this.frmViewMulticomponent, true, "Multiple component details", 'M');        
                  let bIsModificationReasonExists: boolean = this.oResolveItem.FormViewerDetails.BasicDetails.IsModificationReasonExists;
                    if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = false;
                        if (bIsModificationReasonExists)
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsModificationReasonExists = true;
                    }
                    this.oResolveItem.GetMCConflictImageStatus();
                    this.oResolveItem.GetMcchilditemDisplay();
                }
                //Boomi aded for MCI. splice method will be replaced by platform method once delivered     
                if(IsSelectMCITAB)
                {
                    if(this.ftbFormViewDetails.Items.Count >1)
                    {
                        this.ftbFormViewDetails.Items.RemoveTab(0);
                    }
                    this.ftbFormViewDetails.AddTabItem("frmBasic", "Basic details", this.frmViewBasic, !IsSelectMCITAB, "Basic details");
                }
                else
                {
                    this.frmViewBasic = await this.ftbFormViewDetails.AddTabItem("frmBasic", "Basic details", this.frmViewBasic, !IsSelectMCITAB, "Basic details");
                }
             console.log("afterAddTabItem.6349",this.ftbFormViewDetails,(new Date()).getTime().toString());
            }
        this.frmViewTech = new medFrmviewtechvalidate();
            let bConflict: boolean = true;
            let IsTechValidate: boolean = false;
            if(this.ftbFormViewDetails.KeepTabContent){
                this.DataContext.IsDynamicForm = true;
            }
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0 || PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory) {
                if (ProfileData.MedConflictConfig != null && ProfileData.MedConflictConfig.DisplayConflicts == '0') {
                    bConflict = false;
                }
            }

            
            if (String.Compare(sIdentifyingType, CConstants.NONCATALOGUEITEM, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sIdentifyingType, CConstants.Precatalog, StringComparison.OrdinalIgnoreCase) == 0) {
                bConflict = false;
                this.ftbFormViewDetails.AddTabItem("frmTech", "Technically validate", this.frmViewTech, false, "Technically validate");
                this.isTechVldLod = "true";
                this.bTechimage = false;
            this.frmViewTech.DataContext = this.DataContext;
            }
            else {
                this.oResolveItem.CheckForTechValidateMandatory();
                if (this.oResolveItem.IsTechValidateMandatory && (this.oResolveItem.FormViewerDetails.TechValidateDetails == null || this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems == null || this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count == 0)) {
                    IsTechValidate = true;
                }
                else if (this.oResolveItem.IsTechValidateMandatory && this.oResolveItem.FormViewerDetails.TechValidateDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0) {
                    let temp = this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(Techitems => Techitems.IsDoseCombinationsDefined=='0');
                    if (temp != null && temp.Count() > 0 && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count == temp.Count()) {
                        IsTechValidate = true;
                    }
                }
                
                if (IsConflictClick) {
                    this.ftbFormViewDetails.AddTabItem("frmTech", "Technically validate", this.frmViewTech, IsConflictClick && IsTechValidate, "Technically validate");
                    this.isTechVldLod = "true";
                    this.bTechimage = false;
                this.frmViewTech.DataContext = this.DataContext;
                }
                else {
                    this.ftbFormViewDetails.AddTabItem("frmTech", "Technically validate", this.frmViewTech, false, "Technically validate");
                    this.isTechVldLod = "true";
                    this.bTechimage = false;
                this.frmViewTech.DataContext = this.DataContext;
                }
                if (IsTechValidate) {
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImage = MedImage.GetPath(MedImages.RedStar);
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImageAlign = HeaderImageAlignment.Right;
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                }
                
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && (((this.oResolveItem.ActionCode == ActivityTypes.Amend || this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder) && String.IsNullOrEmpty(this.oResolveItem.PrescriptionItemStatus)) || (this.oResolveItem.PrescriptionItemStatus != null && String.Equals(this.oResolveItem.PrescriptionItemStatus, "MEDStatus7", StringComparison.InvariantCultureIgnoreCase)))) {
                    let oTechValTab: iTabItem = this.ftbFormViewDetails.GetItem("frmTech");
                    oTechValTab.IsEnabled = false;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMCIAuthorise || (this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(this.oResolveItem.PrescriptionItemStatus, "MEDStatus7", StringComparison.InvariantCultureIgnoreCase)) && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && (((this.oResolveItem.ActionCode == ActivityTypes.Amend || this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder) && String.IsNullOrEmpty(this.oResolveItem.PrescriptionItemStatus)) || (this.oResolveItem.PrescriptionItemStatus != null && String.Equals(this.oResolveItem.PrescriptionItemStatus, "MEDStatus7", StringComparison.InvariantCultureIgnoreCase)))) {
                    let oTechValTab: iTabItem = this.ftbFormViewDetails.GetItem("frmTech");
                    oTechValTab.IsEnabled = false;
                }
                if (ProfileData.AdditionalPrescConfig != null && ProfileData.AdditionalPrescConfig.EnableWardStockConfig && this.oResolveItem.FormViewerDetails.BasicDetails.IsWardStock && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && !(PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory) && !this.oResolveItem.IsFormViewerDisable) {
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImage = MedImage.GetPath(MedImages.WardStockIcon);
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImageAlign = HeaderImageAlignment.Right;
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImgToolTip = "Item is stocked at this location";
                }
            }
            
            if (bConflict) {                
                this.frmViewConflict = new medconflicts();
                this.frmViewConflict.DataContext = this.DataContext; 
                this.ftbFormViewDetails.AddTabItem("frmConflicts", "Conflicts", this.frmViewConflict, IsConflictClick && !IsTechValidate, "Conflicts");
                this.cbCallConflictHeaderUpdate = false;
                this.oResolveItem.GetConflictImageStatus();
                if (this.oResolveItem.TrafficIconResolve == ConflictIcons.Red) {
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImage = MedImage.GetPath(MedImages.RedStar);
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImageAlign = HeaderImageAlignment.Right;
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                }
                else if (this.oResolveItem.TrafficIconResolve == ConflictIcons.Amber) {
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImage = MedImage.GetPath(MedImages.Amber);
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImageAlign = HeaderImageAlignment.Right;
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                }
                else if (this.oResolveItem.TrafficIconResolve == ConflictIcons.Question) {
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImage = MedImage.GetPath(MedImages.WhiteQuestionMark);
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImageAlign = HeaderImageAlignment.Right;
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                }
                else if (this.oResolveItem.TrafficIconResolve == ConflictIcons.MandatoryIndicator) {
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImage = MedImage.GetPath(MedImages.MandatoryIndicator);
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImageAlign = HeaderImageAlignment.Right;
                    (ObjectHelper.CreateType<iTabItem>(this.ftbFormViewDetails.Items[this.ftbFormViewDetails.Items.Count - 1], iTabItem)).HeaderImgToolTip = Resource.prescribedrugs.BubbleConflicts_Tooltip;
                }
            }
            //Revisit Required
            
            
            if (!(PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory) && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.CurrentCultureIgnoreCase) == 0) {
                this.frmRecordAdmin = new medrecordadmin();
                this.frmRecordAdmin.DataContext = this.DataContext;
                this.ftbFormViewDetails.AddTabItem("frmRecordAdmin", "Record administration", this.frmRecordAdmin, false, "Record administration");
                this.oRecordAdminTab = this.ftbFormViewDetails.GetItem("frmRecordAdmin");
                this.oRecordAdminTab.IsEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled;
            }
            
            
            let oFauxTabBasicItem: iTabItem = this.ftbFormViewDetails.GetItem("frmBasic");
            oFauxTabBasicItem.HeaderImageList = new List<HeaderImageListItem>();
            let objFauxTabBasicItem: HeaderImageListItem = new HeaderImageListItem();
            if (oFauxTabBasicItem instanceof iTabItem && oFauxTabBasicItem.Key == "frmBasic" && String.Compare(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking)) {
                    oFauxTabBasicItem.HeaderImage = MedImage.GetPath(MedImages.MandatoryIcon);
                    oFauxTabBasicItem.HeaderImageAlign = HeaderImageAlignment.Right;
                    oFauxTabBasicItem.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                }
            }
            let DRCTabEnable: boolean = false;
            DRCTabEnable = this.DRCEnableCheck(this.oResolveItem);
            //Revisit Required
                
            if (DRCTabEnable && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) != 0 && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory) {
                if (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null)
                    this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM = new ObservableCollection<MedDRCVM>();
                this.frmViewDRC = new medDRC();
                this.ftbFormViewDetails.AddTabItem("frmViewDRC", "Dose range check", this.frmViewDRC, false, "Dose range check");
                this.frmViewDRC.DataContext = this.DataContext;
                this.DRCIcon();
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDRCDosetypeVisible = Visibility.Visible;
            }
            else {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsDRCDosetypeVisible = Visibility.Collapsed;
            }
            this.populateTabLoadedEvent.next(true);
        }
        private DRCEnableCheck(oResolveItem: PrescriptionItemVM): boolean {
            let DRCEnableflag: boolean = false;
            if (((ProfileData.MedConflictConfig != null && ProfileData.MedConflictConfig.TurnOnDRC != null && ProfileData.MedConflictConfig.TurnOnDRC == '1') || (ProfileData.MedConflictConfig == null && PatientContext.IsTurnONDRC))) {
                DRCEnableflag = true;
            }
            if (oResolveItem != null && oResolveItem.FormViewerDetails != null && oResolveItem.FormViewerDetails.BasicDetails != null && DRCEnableflag && oResolveItem.FormViewerDetails.BasicDetails.Ordersets != null && oResolveItem.FormViewerDetails.BasicDetails.Ordersets.IsDefault && oResolveItem.ActionCode == ActivityTypes.Prescribe) {
                DRCEnableflag = false;
            }
            return (DRCEnableflag ? true : false);
        }
        RouteorFormchangeEvent(): void {
            if(this.ftbFormViewDetails != null){
                let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmTech");
            if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmTech") {
                if (oFauxTabItem != null) {
                    oFauxTabItem.HeaderImageList = new List<HeaderImageListItem>();
                    let obj: HeaderImageListItem = new HeaderImageListItem();
                    if (this.oResolveItem.TvTrafficSymbol == ConflictIcons.Red) {
                        oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                        oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                        oFauxTabItem.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                        obj.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                        obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                        obj.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                    }
                    else {
                        oFauxTabItem.HeaderImage = "";
                        oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                        obj.HeaderImage = "";
                        obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                    }
                    if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && !(PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory) && !this.oResolveItem.IsFormViewerDisable) {
                        if (ProfileData.AdditionalPrescConfig != null && ProfileData.AdditionalPrescConfig.EnableWardStockConfig && this.oResolveItem.FormViewerDetails.BasicDetails.IsWardStock) {
                            obj.HeaderImage = MedImage.GetPath(MedImages.WardStockIcon);
                            obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                            obj.HeaderImgToolTip = "Item is stocked at this location";
                        }
                        else {
                            obj.HeaderImage = "";
                            obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                        }
                    }
                    oFauxTabItem.HeaderImageList.Add(obj);
                    if (obj.HeaderImage != null && this.bTechimage)
                    {
                    oFauxTabItem.HeaderImage =obj.HeaderImage;
                    oFauxTabItem.HeaderImageAlign =obj.HeaderImageAlignment;
                    oFauxTabItem.HeaderImgToolTip =obj.HeaderImgToolTip;
                    }
                    if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && !(PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory) && !this.oResolveItem.IsFormViewerDisable) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.PresTechValidatedItems != null) {
                            this.oResolveItem.FormViewerDetails.TechValidateDetails.PresTechValidatedItems.forEach( (pvm)=> {
                                if (pvm.PresTechValidatedItemsChild != null) {
                                    pvm.PresTechValidatedItemsChild.ForEach(ReInsert => {
                                        if (ReInsert.FluidPrescribableItemListOID == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidPrescribableItemListOID) {
                                            ReInsert.IsWardStockFluid = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsWardStockFluid;
                                        }
                                    });
                                }
                            });
                        }
                    }
                    if (this.ftbFormViewDetails.SelectedKey == "frmTech") {
                        let medlinedisplaypipe = new DisplayPrescriptionLineItemPipe1();
                        this.oResolveItem.MedLineDisplay = medlinedisplaypipe.transform(this.oResolveItem, '',325);
                        if(medFormViewer.RefreshWardStockIcon instanceof Function)
                        medFormViewer.RefreshWardStockIcon();
                    }
                    //Revisit Required
                    /*
                    if (this.frmViewTech != null) {
                        this.frmViewTech.grdTechValItem.Rebind();
                    }
                    */
                }
            }
        }
                
        }
        private PopulateApplianceInfGas(IsInfusionON: boolean, IsMedicalGas: boolean, IsMedicalOxygen: boolean): void {
            switch (PatientContext.PrescriptionType) {
                //Revisit Required
                    
                case PrescriptionTypes.Clerking:
                    if (IsInfusionON && (IsMedicalOxygen || IsMedicalGas)) {
		// Revisit required
                    // this.frmViewBasic = new frmviewInfClerkGasOxygn();
                    this.ChangeDynamicForm(new frmviewInfClerkGasOxygn());
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsEnableConcentration = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.isRouteMandatory = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTargetSatrangeVisible = Visibility.Visible;
                    }
                    break;
                    
                case PrescriptionTypes.Leave:
                case PrescriptionTypes.Outpatient:
                case PrescriptionTypes.Discharge:
                if (IsInfusionON && (IsMedicalOxygen || IsMedicalGas)) {
                    this.frmViewBasic = new FormViewForAdminOxygen();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext = this.DataContext;
                    this.DisableStopDate();
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                }
                    break;
                    
                case PrescriptionTypes.ForAdministration:
                if (IsInfusionON && (IsMedicalOxygen || IsMedicalGas)) {
                    this.frmViewBasic = new FormViewForAdminOxygen();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext = this.DataContext;
                }
            break;
                    
        }
    }
    private PopulateTypeInDrug(IsInfusionON: boolean): void {
        //Revisit Required
        
        switch (PatientContext.PrescriptionType) {
            case PrescriptionTypes.Clerking:
                if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value)) {
                    this.frmViewBasic = new frmformviewClerkinginfusions();     
                    this.frmViewBasic.ParentRef = this;   
                    this.frmViewBasic.DataContext = this.DataContext;            
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.InfusionClerkingVisibility();
                }
                else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.frmViewBasic = new frmformviewClerkinginfusions();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext = this.DataContext;
                    this.InfusionClerkingVisibility();
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                      this.frmViewBasic = new Typeinformviewmedclerk();
                      this.frmViewBasic.ParentRef = this;
   		              this.frmViewBasic.DataContext = this.DataContext;
                 }
                break;
            case PrescriptionTypes.Leave:
                if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) == 0 || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID))) {
                    this.frmViewBasic = new frmformviewForAdminConInfusions();
                    this.frmViewBasic.ParentRef = this;
   		    this.frmViewBasic.DataContext = this.DataContext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                }
                else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                    this.frmViewBasic = new formViewIntermittent();
                    this.frmViewBasic.ParentRef = this;
		       this.frmViewBasic.DataContext = this.DataContext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                }
                else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA) == 0) {
                    this.frmViewBasic = new frmformviewForAdminPCAInfusions();
                    this.frmViewBasic.ParentRef = this;
		       this.frmViewBasic.DataContext = this.DataContext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                }
                else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0) {
                    this.frmViewBasic = new frmformviewForAdminConInfusions();
                    this.frmViewBasic.ParentRef = this;
		       this.frmViewBasic.DataContext = this.DataContext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                }
                 else {
                     this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                     this.frmViewBasic = new TypeinFormViewLeave();
                     this.frmViewBasic.ParentRef = this;
                     this.frmViewBasic.DataContext=this.DataContext;
                 }
                break;
            case PrescriptionTypes.Outpatient:
            case PrescriptionTypes.Discharge:
                if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) == 0 || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID))) {
                    this.frmViewBasic = new frmformviewForAdminConInfusions();
                    this.frmViewBasic.ParentRef = this;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                    this.frmViewBasic.DataContext = this.DataContext;
                }
                else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                    this.frmViewBasic = new formViewIntermittent();
                    this.frmViewBasic.ParentRef = this;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                    this.frmViewBasic.DataContext = this.DataContext;
                }
                else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA) == 0) {
                    this.frmViewBasic = new frmformviewForAdminPCAInfusions();
                    this.frmViewBasic.ParentRef = this;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                    this.frmViewBasic.DataContext = this.DataContext;
                }
                else if (IsInfusionON && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0) {
                    this.frmViewBasic = new frmformviewForAdminConInfusions();
                    this.frmViewBasic.ParentRef = this;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                    this.frmViewBasic.DataContext = this.DataContext;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                    this.frmViewBasic = new TypeinFormViewOPDschg();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext=this.DataContext;
                }
                break;
            case PrescriptionTypes.ForAdministration:
                if (IsInfusionON && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0)) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS) == 0 || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID))) {
                    this.frmViewBasic = new frmformviewForAdminConInfusions();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext = this.DataContext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                }
                else if (IsInfusionON && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0)) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0) {
                    this.frmViewBasic = new formViewIntermittent();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext = this.DataContext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                }
                else if (IsInfusionON && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0)) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA) == 0) {
                    this.frmViewBasic = new frmformviewForAdminPCAInfusions();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext = this.DataContext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                }
                else if (IsInfusionON && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0))) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions == Visibility.Visible) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IscontentAdditionalOptions = Visibility.Collapsed;
                    }
                    this.frmViewBasic = new frmformviewForAdminConInfusions();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext = this.DataContext;
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = true;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded = false;
                    this.frmViewBasic = new TypeinFormViewForAdmin();
                    this.frmViewBasic.ParentRef = this;
                    this.frmViewBasic.DataContext = this.DataContext;
                    // this.lblReviewcopiedose = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblReviewcopieddoses"), iLabel);
                    if (this.lblReviewcopiedose instanceof iLabel) {
                        // this.lblReviewcopiedose.MouseLeftButtonUp -= lblReviewcopieddoses_MouseLeftButtonUp;
                        this.lblReviewcopiedose.MouseLeftButtonUp  = (s,e) => { this.lblReviewcopieddoses_MouseLeftButtonUp(s,e); } ;
                    }
                }
                break;
        }
        
    }
    private InfTypeInDrugVisibility(): void {
        let sIdentifyingType: string = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
        if (String.Compare(sIdentifyingType, CConstants.NONCATALOGUEITEM) == 0 || String.Compare(sIdentifyingType, CConstants.Precatalog) == 0) {
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Visible;
        }
            else {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfTypeInVisible = Visibility.Collapsed;
            }
        }
        private AddStartDTTMCtrlsForMedClrek(lstControls: List<string>, lstManControls: List<boolean>): void {
            if ((lstControls.Contains("CC_STARTDTTM") || lstControls.Contains("CC_STARTDT"))) {
                let sIndex: number = lstControls.IndexOf("CC_STARTDTTM");
                if (sIndex < 0)
                    sIndex = lstControls.IndexOf("CC_STARTDT");
                if (!lstControls.Contains("CC_COMPLETEDATE")) {
                    lstControls.Insert(sIndex + 1, "CC_COMPLETEDATE");
                    lstManControls.Insert(sIndex + 1, lstManControls[sIndex]);
                }
                if (!lstControls.Contains("CC_PARTIALDATE")) {
                    lstControls.Insert(sIndex + 2, "CC_PARTIALDATE");
                    lstManControls.Insert(sIndex + 2, false);
                }
            }
        }
        flag: boolean = false;
        ftbFormViewDetails_SelectionChanged(sender: Object, e: RoutedEventArgs): void {
            if (this.flag == true) {
                this.oResolveItem.FormViewerDetails.BasicDetails.GetFormViewControls('0' , 
                (s,e) => { 
                    Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
                    this.objServiceProxy_GetFormViewControlsCompleted(s,e); 
                } 
                , "TC");
                if(this.frmViewTech != null && this.frmViewTech.DataContext != null && this.frmViewTech.DataContext.FormViewerDetails != null && this.frmViewTech.DataContext.FormViewerDetails['TechValidateDetails'] != null){
                    if(this.frmViewTech.DataContext.FormViewerDetails.BHasFormViewParams && this.ftbFormViewDetails.SelectedKey == "frmTech" && this.frmViewTech.DataContext.TechValSplitter == Visibility.Visible){
                        this.oResolveItem.FormViewerDetails['TechValidateDetails'].frmtechDynamicForm = true;
                        this.frmViewTech.DataContext.FormViewerDetails['TechValidateDetails'].GetProductOptions();
                    }
                }
            }                                               

            let addedTab : iTabItem = (e as any).addedItems[0];
            let removedTab : iTabItem = (e as any).removedItems[0];

            if(addedTab != null && addedTab.HeaderTxt !== 'Basic details' && 
            removedTab != null && removedTab.HeaderTxt !== 'Multiple component details')        
            {   
                if(this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled)
                    this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited = true;
            }
            this.flag = true;
            if (this.ftbFormViewDetails.SelectedKey == "frmConflicts" && this.oResolveItem.FormViewerDetails.ConflictDetails == null && !this.oResolveItem.bConflicttabloaded) {
                this.oResolveItem.bConflicttabloaded = true;
                this.oResolveItem.GenerateConflictsForInpatient(this.objItems);
            }
            if (this.ftbFormViewDetails.SelectedKey == "frmTech" && !this.oResolveItem.isTechVldLod) {
                this.oResolveItem.isTechVldLod = true;
            }
            if (this.ftbFormViewDetails.SelectedKey == "frmTech") {
                let medlinedisplaypipe = new DisplayPrescriptionLineItemPipe1();
                this.oResolveItem.MedLineDisplay = medlinedisplaypipe.transform(this.oResolveItem, '',325);
            }
            if (this.ftbFormViewDetails.SelectedKey == "frmViewDRC") {
                let _PresItemStatusActive: boolean = true;
                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.IsFormViewerDisable) {
                    _PresItemStatusActive = false;
                }
                let _lstDRCHaveOnlyAmend: boolean = false;
                if (this.oResolveItem.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count == 1 && this.oResolveItem.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Contains("Amend")) {
                    _lstDRCHaveOnlyAmend = true;
                }
                //Below code seems to be unnecessary as binding would ensure value reflects in the associated VM property, hence commenting it.
                /*let oFauxTabBasicItem: iTabItem = this.ftbFormViewDetails.GetItem("frmBasic");
                if (this.txtLowerDose != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BHasFormViewParams && oFauxTabBasicItem != null && oFauxTabBasicItem.Content != null && oFauxTabBasicItem.Content instanceof frmBasicFormViewer && (ObjectHelper.CreateType<frmBasicFormViewer>(oFauxTabBasicItem.Content, frmBasicFormViewer)) != null && (ObjectHelper.CreateType<frmBasicFormViewer>(oFauxTabBasicItem.Content, frmBasicFormViewer)).bIsLoaded) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.Dose = this.txtLowerDose.Text;
                }*/
                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0) {
                    if (String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase)) {
                        if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                            this.oResolveItem.GetDRCConflicts(this.oResolveItem);
                            this.oResolveItem.bDRCConflicttabloaded = true;
                        }
                    }
                    else if (_PresItemStatusActive && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0 || (!_lstDRCHaveOnlyAmend && this.oResolveItem.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0)) {
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        this.oResolveItem.bDRCConflicttabloaded = true;
                    }
                    else if (!_lstDRCHaveOnlyAmend && !this.oResolveItem.bDRCConflicttabloaded && !this.oResolveItem.bDRCMandatoryDone && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded) {
                        this.oResolveItem.GetDRCConflicts(this.oResolveItem);
                        this.oResolveItem.bDRCConflicttabloaded = true;
                    }
                }
                else if (_PresItemStatusActive && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID == 0 && !this.oResolveItem.bDRCConflictOkVallidation && !this.oResolveItem.bDRCMandatoryDone) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0) {
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        this.oResolveItem.bDRCConflicttabloaded = true;
                    }
                }
                else if (!this.oResolveItem.bDRCConflictOkVallidation && this.oResolveItem.CanPerformDRC(this.oResolveItem) && !this.oResolveItem.bDRCMandatoryDone) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0) {
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        this.oResolveItem.bDRCConflicttabloaded = true;
                    }
                    else if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        this.oResolveItem.bDRCConflicttabloaded = true;
                    }
                    else if (String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        this.oResolveItem.bDRCConflicttabloaded = true;
                    }
                    else if (this.oResolveItem.ActionCode != ActivityTypes.Amend && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        this.oResolveItem.bDRCConflicttabloaded = true;
                    }
                }
                this.oResolveItem.bDRCMandatoryDone = false;
            }
            if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") == 0) {
                this.frmRecordAdmin.DynamicAdminMethodNotIntiated = false;
                if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin == null || (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.IsLoaded == false))) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin == null)
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin = new RecordAdminVM();
                    this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.oPrescriptionItemVM = this.oResolveItem;
                    this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin = this.oResolveItem.FormViewerDetails.BasicDetails.FillRecordAdminDetails(true);
                    if (this.ftbFormViewDetails != null && this.ftbFormViewDetails.KeepTabContent) {
                        if (!this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.DynamicFormRecAdminTabVisited) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {
                                this.frmRecordAdmin.ngAfterViewInit();
                                this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.DynamicFormRecAdminTabVisited = true;
                                this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.SetRecordAdmin();                                                    
                            }
                        }
                    }
                }
                else if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.IsLoaded == true) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.isBolusIntermittent = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart;
                    this.oResolveItem.FormViewerDetails.BasicDetails.oPrescitemVM.FillAdminFormFields();
                }
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null) {
                    if (!this.oResolveItem.FormViewerDetails.BasicDetails.bIsFlowRateAtRecAdmShown)
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.GetWitnessRequired();
                    this.oResolveItem.FormViewerDetails.BasicDetails.bIsFlowRateAtRecAdmShown = false;
                }
                if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_GAS, StringComparison.OrdinalIgnoreCase)) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MedicalgasDeliveryList != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MedicalgasDeliveryList.Count > 0) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceList = new ObservableCollection<CListItem>();
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceList = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MedicalgasDeliveryList;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.HumidificationList != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Humidification != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.HumidificationList.Count > 0) {
                        let oHumidi: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.HumidificationList.Where(c => c.Value == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Humidification.Value).Select(s => s).FirstOrDefault();
                        if (oHumidi != null) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Humidification = oHumidi;
                        }
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.IsEnableHumidification = false;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.IsEnableHumidification = true;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateNumUom = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateNumUom.Tag = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag;
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateDenUom = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateDenUom.Tag = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Tag;
                    }
                }
            }
            if (this.MCIMsg) {

                this.ftbFormViewDetails.defaultOnTabselect = false;
                if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0 && !this.oResolveItem.IsConflictClick) {
                    this.oResolveItem.GetnamewithoutUOM();
                    this.oResolveItem.GetMcchilditemDisplay();
                    if (this.oResolveItem.isAdhocitem == true || (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingName, CommonFlags.MCidentifyingName, StringComparison.OrdinalIgnoreCase) == 0) || (String.Compare(this.oResolveItem.LorenzoID, CommonFlags.MClorenzoid, StringComparison.OrdinalIgnoreCase) == 0) || (this.oResolveItem.FormViewerDetails.MulticomponentDetails != null && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 0 && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[0].isEditable == true)) {
                        if ((<iTab>(sender)).SelectedKey != "frmmulticomponent") {
                            if (this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count <= 1) {
                                this.oResolveItem.FocusControl = "";
                                this.objMsg.Message = Resource.Multicomponent.Multicomponent_msg;
                                this.objMsg.Show();
                                let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmmulticomponent");
                                if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmmulticomponent") {
                                    setTimeout(() => {
                                        this.ftbFormViewDetails.Click(oFauxTabItem.Key, true); 
                                    }, 0);
                                }
                                return;
                            }
                            else if (this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm == null && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase) != 0) {
                                this.oResolveItem.FocusControl = "";
                                this.objMsg.Height = 170;
                                this.objMsg.Message = Resource.Multicomponent.Dosageform_msg;
                                this.objMsg.Show();
                                let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmmulticomponent");
                                if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmmulticomponent") {
                                    setTimeout(() => {
                                        this.ftbFormViewDetails.Click(oFauxTabItem.Key, true);                    
                                    }, 0);
                                }
                                return;
                            }
                        }
                    }
                    if ((<iTab>(sender)).SelectedKey != "frmmulticomponent") {
                        if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SNamewithoutQuantitys)) {
                            this.oResolveItem.FocusControl = "";
                            this.objMsg.Message = Resource.Multicomponent.Quantity_msg +" "+ this.oResolveItem.FormViewerDetails.BasicDetails.SNamewithoutQuantitys;
                            this.objMsg.Show();
                            let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmmulticomponent");
                            if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmmulticomponent") {
                                setTimeout(() => {
                                        this.ftbFormViewDetails.Click(oFauxTabItem.Key, true);                                       
                                    }, 0);
                            }
                            return;
                        }
                        else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SNamewithoutUOM)) {
                            this.oResolveItem.FocusControl = "";
                            this.objMsg.Message = Resource.Multicomponent.QuantityUOM_msg + this.oResolveItem.FormViewerDetails.BasicDetails.SNamewithoutUOM;
                            this.objMsg.Show();
                            let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmmulticomponent");
                            if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmmulticomponent") {
                                setTimeout(() => {
                                        this.ftbFormViewDetails.Click(oFauxTabItem.Key, true);                                        
                                    }, 0);
                            }
                            return;
                        }
                    }
                }

                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                    if (this.oResolveItem.FormViewerDetails.dupMulticomponentDetails != null && this.oResolveItem.FormViewerDetails.dupMulticomponentDetails.oMCItemBasicInfo.Count > 0) {
                        this.GetMCamendflag(true);
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD == true) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableModificationcomments = true;
                            this.oResolveItem.IsReasonForModificationVisible = Visibility.Visible;
                            if (String.Compare(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode, StringComparison.InvariantCultureIgnoreCase) == 0) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsClinicallyVerified = true;
                                this.oResolveItem.IsClinicallyVerifyEnable = false;
                                this.oResolveItem.IsClinicallyVerifyCommentsMandatory = false;
                            }
                        }
                        else {
                            if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableOnbehalfOf = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableModificationcomments = false;
                            }
                        }
                    }
                }
                this.SetDrugHeaderContent(this.oResolveItem);
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.MulticomponentDetails != null && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 4 && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count < 6 && (String.Compare(this.oResolveItem.LorenzoID, CommonFlags.MClorenzoid, StringComparison.OrdinalIgnoreCase) == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.isAdhocitem)) {
                    // this.brdHeader.Height = 95;
                }
                else {
                    this.brdHeader.Height = Number.NaN;
                }
            }
            else {
                this.brdHeader.Height = Number.NaN;
            }
            if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmmulticomponent") == 0 && this.oResolveItem.FormViewerDetails.ConflictDetails == null) {
                this.oResolveItem.GetMCConflictImageStatus();
                this.oResolveItem.GetMcchilditemDisplay();
            }
            if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DupTitratedDoseVM != null && this.oResolveItem.FormViewerDetails.BasicDetails.DupTitratedDoseVM.GrdTitrated != null && this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated != null) {
                    this.GettitratedAmendFlag();
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.isTitratedRSNFORMOD == true) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableModificationcomments = true;
                        this.oResolveItem.IsReasonForModificationVisible = Visibility.Visible;
                    }
                }
            }
            if (this.ftbFormViewDetails.SelectedKey == "frmAdditional" && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                this.oResolveItem.IsLoadAdditionalFaxTab = true;
            }
            if (this.ftbFormViewDetails.SelectedKey == "frmBasic") {
                this.oResolveItem.IsLoadBasicFaxTab = true;
            }
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                if (this.ftbFormViewDetails.SelectedKey == "frmBasic" && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSeqINonIvLinkInFVVisible = Visibility.Visible;
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSeqINonIvLinkInFVVisible = Visibility.Collapsed;
                }
            }
            if (this.ftbFormViewDetails.SelectedKey != "frmConflicts" && this.oResolveItem.FormViewerDetails.ConflictDetails != null && this.oResolveItem.FormViewerDetails.ConflictDetails.Count > 0) {
                let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmConflicts");
                if (oFauxTabItem != null && !String.IsNullOrEmpty(oFauxTabItem.Key)) {
                    this.oResolveItem.TrafficSymbol = this.oResolveItem.TrafficIcon = this.oResolveItem.FormViewerDetails.ConflictsIconChangeBasedOnAcknlgmnt(this.oResolveItem.TrafficSymbol);
                    oFauxTabItem.HeaderImageList = new List<HeaderImageListItem>();
                    let obj: HeaderImageListItem = new HeaderImageListItem();
                    if (this.oResolveItem.TrafficIcon == ConflictIcons.Red) {
                        oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                        oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                        oFauxTabItem.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                        obj.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                        obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                        obj.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                    }
                    else if (this.oResolveItem.TrafficIcon == ConflictIcons.Amber) {
                        oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.Amber);
                        oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                        oFauxTabItem.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                        obj.HeaderImage = MedImage.GetPath(MedImages.Amber);
                        obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                        obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                    }
                    else if (this.oResolveItem.TrafficIcon == ConflictIcons.Question) {
                        oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.WhiteQuestionMark);
                        oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                        oFauxTabItem.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                        obj.HeaderImage = MedImage.GetPath(MedImages.WhiteQuestionMark);
                        obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                        obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                    }
                    else if (this.oResolveItem.TrafficIcon == ConflictIcons.MandatoryIndicator) {
                        oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.MandatoryIndicator);
                        oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                        oFauxTabItem.HeaderImgToolTip = Resource.prescribedrugs.BubbleConflicts_Tooltip;
                        obj.HeaderImage = MedImage.GetPath(MedImages.MandatoryIndicator);
                        obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                        obj.HeaderImgToolTip = Resource.prescribedrugs.BubbleConflicts_Tooltip;
                    }
                    else {
                        oFauxTabItem.HeaderImage = "";
                        oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                        obj.HeaderImage = "";
                        obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                    }
                    oFauxTabItem.HeaderImageList.Add(obj);
                    if (obj.HeaderImage != null && this.bTechimage) {
                        oFauxTabItem.UpdateHeader();
                    }
                }
            }
            if (this.ftbFormViewDetails.SelectedKey != "frmViewDRC" && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable) {
          
                let DRCType2Check: boolean = this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value) && (!String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value, "CC_DRCINAPPWAR", StringComparison.InvariantCultureIgnoreCase) || (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value, "CC_DRCINAPPWAR", StringComparison.InvariantCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))));
                let DRCType3Check: boolean = (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Collapsed || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))));
                let DRCType45Check: boolean = this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4, StringComparison.InvariantCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5, StringComparison.InvariantCultureIgnoreCase)));
                let DRCType5WithoutAcknldgeCheck: boolean = this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4, StringComparison.InvariantCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5, StringComparison.InvariantCultureIgnoreCase)));
                let passCheck: boolean = false;
                if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.All(x => x.DRCOutCome)) {
                    passCheck = true;
                }
                if ((DRCType2Check || DRCType3Check || DRCType45Check) && !passCheck) {
                    let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmViewDRC");
                    if (oFauxTabItem != null && !String.IsNullOrEmpty(oFauxTabItem.Key)) {
                        oFauxTabItem.HeaderImageList = new List<HeaderImageListItem>();
                        let obj: HeaderImageListItem = new HeaderImageListItem();
                        let IconType: boolean = (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon == ConflictIcons.Red || this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon == ConflictIcons.Amber || this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon == ConflictIcons.Question) || (this.ResetDRCTrafficIcon != ConflictIcons.None && this.ResetDRCTrafficIcon != ConflictIcons.BubbleHot && this.ResetDRCTrafficIcon != ConflictIcons.Pass);
                        if (IconType) {
                            if (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon != ConflictIcons.None) {
                                this.ResetDRCTrafficIcon = this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon;
                            }
                            this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.None;
                            oFauxTabItem.HeaderImage = "";
                            oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                            oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                            obj.HeaderImage = "";
                            obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                        }
                        oFauxTabItem.HeaderImageList.Add(obj);
                        if (obj.HeaderImage != null && this.bTechimage) {
                            oFauxTabItem.UpdateHeader();
                        }
                    }
                    else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon != ConflictIcons.None) {
                        this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.None;
                    }
                }
                else if (passCheck) {
                    if(this.oResolveItem.ActionCode != ActivityTypes.Reorder && this.oResolveItem.ActionCode != ActivityTypes.Amend){
                    let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmViewDRC");
                    oFauxTabItem.HeaderImageList = new List<HeaderImageListItem>();
                    let obj: HeaderImageListItem = new HeaderImageListItem();
                    if (oFauxTabItem != null && !String.IsNullOrEmpty(oFauxTabItem.Key)) {
                        if (this.ResetDRCTrafficIcon != ConflictIcons.BubbleHot) {
                            oFauxTabItem.HeaderImage = obj.HeaderImage = MedImage.GetPath(MedImages.ConflictPass);
                            oFauxTabItem.HeaderImageAlign = obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                            obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                        }
                        oFauxTabItem.HeaderImageList.Add(obj);
                        if (obj.HeaderImage != null && this.bTechimage) {
                            oFauxTabItem.UpdateHeader();
                        }
                    }
                    else if (oFauxTabItem != null && this.ResetDRCTrafficIcon == ConflictIcons.BubbleHot) {
                        this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.None;
                    }
                }
                }
                else if (!DRCType5WithoutAcknldgeCheck) {
                    let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmViewDRC");
                    if (oFauxTabItem != null && !String.IsNullOrEmpty(oFauxTabItem.Key)) {
                        oFauxTabItem.HeaderImageList = new List<HeaderImageListItem>();
                        let obj: HeaderImageListItem = new HeaderImageListItem();
                         if(this.ResetDRCTrafficIcon == undefined){
                            this.ResetDRCTrafficIcon = ConflictIcons.BubbleHot
                        }
                        if ((this.oResolveItem != null) && (this.ResetDRCTrafficIcon == ConflictIcons.Red)) {
                            oFauxTabItem.HeaderImage = obj.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                            oFauxTabItem.HeaderImageAlign = obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                            obj.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                            this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Red;
                        }
                        else if ((this.oResolveItem != null) && (this.ResetDRCTrafficIcon == ConflictIcons.Amber)) {
                            oFauxTabItem.HeaderImage = obj.HeaderImage = MedImage.GetPath(MedImages.Amber);
                            oFauxTabItem.HeaderImageAlign = obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                            obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                            this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Amber;
                        }
                        else if ((this.oResolveItem != null) && (this.ResetDRCTrafficIcon == ConflictIcons.Question)) {
                            obj.HeaderImage = MedImage.GetPath(MedImages.WhiteQuestionMark);
                            obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                            obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                            this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Question;
                        }
                        else if ((this.oResolveItem != null) && (this.ResetDRCTrafficIcon == ConflictIcons.BubbleHot)) {
                            let type2Fail: boolean = this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value, "CC_DRCINAPPWAR", StringComparison.InvariantCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments)))));
                            let type3Fail: boolean = this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments)));
                            let type45fail: boolean = this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4, StringComparison.InvariantCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5, StringComparison.InvariantCultureIgnoreCase));
                            if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((type2Fail && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType2, StringComparison.InvariantCultureIgnoreCase)) || (type3Fail && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType3, StringComparison.InvariantCultureIgnoreCase)))) {
                                oFauxTabItem.HeaderImage = obj.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                                oFauxTabItem.HeaderImageAlign = obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                                obj.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                                this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Red;
                            }
                            else if (type45fail) {
                                if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4, StringComparison.InvariantCultureIgnoreCase)) {
                                    oFauxTabItem.HeaderImage = obj.HeaderImage = MedImage.GetPath(MedImages.Amber);
                                    oFauxTabItem.HeaderImageAlign = obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                                    obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                                    this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Amber;
                                }
                                else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5, StringComparison.InvariantCultureIgnoreCase)) {
                                    obj.HeaderImage = MedImage.GetPath(MedImages.WhiteQuestionMark);
                                    obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                                    obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                                    this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Question;
                                }
                            }
                        }
                        oFauxTabItem.HeaderImageList.Add(obj);
                        if (obj.HeaderImage != null && this.bTechimage) {
                            oFauxTabItem.UpdateHeader();
                        }
                    }
                }
            if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.ftbFormViewDetails.GetItem("frmViewDRC")!=null && this.ftbFormViewDetails.GetItem("frmViewDRC").Content !=null && (ObjectHelper.CreateType<UserControl>(this.ftbFormViewDetails.GetItem("frmViewDRC").Content, UserControl)) != null && (((ObjectHelper.CreateType<iComboBox>((ObjectHelper.CreateType<UserControl>(this.ftbFormViewDetails.GetItem("frmViewDRC").Content, UserControl)).FindName("cboMedDRCReason"), iComboBox)))) != null && (((ObjectHelper.CreateType<iComboBox>((ObjectHelper.CreateType<UserControl>(this.ftbFormViewDetails.GetItem("frmViewDRC").Content, UserControl)).FindName("cboMedDRCReason"), iComboBox)))).OptionCount > 0) {
                this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments = (ObjectHelper.CreateType<iTextBox>((ObjectHelper.CreateType<UserControl>(this.ftbFormViewDetails.GetItem("frmViewDRC").Content, UserControl)).FindName("txtComments"), iTextBox))?.Text;
            }
        }
    
       if( this.oResolveItem.FormViewerDetails != null)
        this.oResolveItem.FormViewerDetails.IsFlgStpCheck = false;
    
    }
    
        
        
        objServiceProxy_GetFormViewControlsCompleted(sender: Object, e: GetFormViewControlsCompletedEventArgs): void {
            let _ErrorID: number = 80000065;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, Class:Medformviewer, Method:objServiceProxy_GetFormViewControlsCompleted()";
            if (e.Result != null && e.Error == null) {
                try {
                    this.oResolveItem.FormViewerDetails.FillFormViewerDetails(e.Result, false);
                    let sMandatoryControls: string = String.Empty;
                    let sAdditionalControls: string = String.Empty;
                    if (this.oResolveItem.FormViewerDetails.BHasFormViewParams) {                        
                        if (this.frmViewAdditional != null) {
                            let lstAddManCtrls: List<boolean> = new List<boolean>(this.oResolveItem.FormViewerDetails.MandatoryControls);
                            let lstAdditionalControls: List<string> = this.oResolveItem.FormViewerDetails.AdditionalControls.ToList();
                            this.AddStartDTTMCtrlsForMedClrek(lstAdditionalControls, lstAddManCtrls);
                            this.oResolveItem.FormViewerDetails.AddOtherAdminInstruction(this.oResolveItem.FormViewerDetails.AdditionalControls, lstAdditionalControls, null);
                            this.oResolveItem.FormViewerDetails.AddPRNInstruction(this.oResolveItem.FormViewerDetails.AdditionalControls, lstAdditionalControls, null);
                            this.frmViewAdditional.MandatoryControls = lstAddManCtrls.ToArray();
                            this.frmViewAdditional.VisibleControls = lstAdditionalControls.ToArray();
                            this.frmViewAdditional.BindControls();
                            this.frmViewAdditional.invokeDetectChanges();

                        // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewAdditional.FindName("txtProblem"), iTextBox);
                            if (this.oTxtProblem instanceof iTextBox) {
                                this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
                                this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
                            }
                        // this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewAdditional.FindName("cboDoseType"), iComboBox);
                        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewAdditional.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                            if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
                                if (this.cboDoseType != null)
                                    // this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
                                this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
                            }
                        // this.lblSupplyInst = ObjectHelper.CreateType<iLabel>(this.frmViewAdditional.FindName("lblSupplyInst"), iLabel);
                            if (this.lblSupplyInst instanceof iLabel) {
                                // this.lblSupplyInst.MouseLeftButtonUp -= lblSupplyInst_MouseLeftButtonUp;
                                this.lblSupplyInst.MouseLeftButtonUp = (s,e) => {this.lblSupplyInst_MouseLeftButtonUp(s,e)};
                                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls == null) {
                                    if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise || (this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise && !String.IsNullOrEmpty(this.oResolveItem.PrescriptionItemStatus) && !String.Equals(this.oResolveItem.PrescriptionItemStatus, CConstants.AWAITINGAUTHORISE, StringComparison.InvariantCultureIgnoreCase))) {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                                    }
                                    else {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                                    }
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                                }
                            }
                            else if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls == null) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Collapsed;
                            }
                        // this.udReviewafter = ObjectHelper.CreateType<iUpDownBox>(this.frmViewAdditional.FindName("udReviewafter"), iUpDownBox);
                        // this.cboreviewAfterUOM = ObjectHelper.CreateType<iComboBox>(this.frmViewAdditional.FindName("cboreviewAfterUOM"), iComboBox);
                        // this.lblReviewafter = ObjectHelper.CreateType<iLabel>(this.frmViewAdditional.FindName("lblReviewafter"), iLabel);
                            if (this.udReviewafter != null && this.cboreviewAfterUOM != null && this.lblReviewafter != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible = Visibility.Visible;
                            }
                            if (this.udReviewafter != null && this.cboreviewAfterUOM != null && this.lblReviewafter != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.ParentbaseVM != null && this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible == Visibility.Visible) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterMandatory = this.oResolveItem.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig;
                            }
                        }
                        
                        if (this.frmViewBasic != null) {
                        // this.cboDoseType = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
                        // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                            if (this.cboDoseType instanceof iComboBox && this.ContentCtrlMedResolveStepped instanceof ContentControl) {
                                if (this.cboDoseType != null)
                                    // this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
                                this.cboDoseType.SelectionChanged  = (s,e) => { this.cboDoseType_SelectionChanged(s,e); } ;
                            }
                        // this.oTxtProblem = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
                            if (this.oTxtProblem instanceof iTextBox) {
                                this.oTxtProblem.OnClick  = (s,e) => { this.oTxtProblem_OnClick(s,e); } ;
                                this.oTxtProblem.KeyDown  = (s,e) => { this.oTxtProblem_KeyDown(s,e); } ;
                            }
                        // this.lblSupplyInst = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblSupplyInst"), iLabel);
                            if (this.lblSupplyInst instanceof iLabel) {
                                // this.lblSupplyInst.MouseLeftButtonUp -= lblSupplyInst_MouseLeftButtonUp;
                                this.lblSupplyInst.MouseLeftButtonUp = (s,e) => {
                                    Object.keys(that).forEach((prop) => (this[prop] = that[prop]));
                                    this.lblSupplyInst_MouseLeftButtonUp(s,e)};
                                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls == null) {
                                    if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise || (this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise && !String.IsNullOrEmpty(this.oResolveItem.PrescriptionItemStatus) && !String.Equals(this.oResolveItem.PrescriptionItemStatus, CConstants.AWAITINGAUTHORISE, StringComparison.InvariantCultureIgnoreCase))) {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = true;
                                    }
                                    else {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                                    }
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Visible;
                                }
                            }
                            else if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AccessContraintControls == null) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction = false;
                                this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleSupplyInstr = Visibility.Collapsed;
                            }
                        }
                    }
                    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && e.Result.oFormViewControls != null) {
                        if (this.oResolveItem.isAdhocitem) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsWardStock = false;
                        }
                        else if (e.Result.oFormViewControls.IsFLorTCorRF.Equals("FL") || e.Result.oFormViewControls.IsFLorTCorRF.Equals("RF")) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsWardStock = !this.oResolveItem.IsFormViewerDisable ? e.Result.oFormViewControls.IsWardStock : false;
                        }
                        if (e.Result.oFormViewControls.IsFLorTCorRF.Equals("TC")) {
                            if (e.Result.oFormViewControls.IsWardStockForMCI != null && e.Result.oFormViewControls.IsWardStockForMCI.Count > 0 && e.Result.oFormViewControls.IsWardStockForMCI.Count == this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count) {
                                for (let i: number = 0; i < e.Result.oFormViewControls.IsWardStockForMCI.Count; i++) {
                                    this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[i].IsWardStock = !this.oResolveItem.IsFormViewerDisable && String.Equals(e.Result.oFormViewControls.IsWardStockForMCI[i], "true", StringComparison.InvariantCultureIgnoreCase) ? true : false;
                                }
                            }
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsWardStockFluid = !this.oResolveItem.IsFormViewerDisable ? e.Result.oFormViewControls.IsWardStockFluid : false;
                            }
                        }
                    }
                    this.RouteorFormchangeEvent();
                    // if (this.ftbFormViewDetails.SelectedKey == "frmTech") {
                    //     let medlinedisplaypipe = new DisplayPrescriptionLineItemPipe1();
                    //     this.oResolveItem.MedLineDisplay = medlinedisplaypipe.transform(this.oResolveItem, '',325);
                    //     this.RefreshWardStockIcon();
                    // }
                  
                }
               catch(ex:any)  {
                    let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
                    console.error("objServiceProxy_GetFormViewControlsCompleted", ex)
                }

            }
            else {
                let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, e.Error);
            }
        }
        private CheckMandDRC(): boolean {
            if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value, "CC_DRCINAPPWAR", StringComparison.InvariantCultureIgnoreCase) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))) {
                this.CheckMandDRCComments();
            }
            else if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType1, StringComparison.InvariantCultureIgnoreCase)) {
                this.oResolveItem.bDRCMandatoryDone = false;
                let oCheckMandDRC: iMessageBox = new iMessageBox();
                oCheckMandDRC.Message = "The " + this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingName + " cannot be prescribed. Please review/cancel the item to continue.";
                oCheckMandDRC.MessageButton = MessageBoxButton.OK;
                oCheckMandDRC.MessageBoxClose  = (s,e) => {this.oCheckMandDRC_MessageBoxClose(s,e) };
                oCheckMandDRC.Show();
            }
            else {
                this.oResolveItem.bDRCMandatoryDone = false;
                let oCheckMandDRC: iMessageBox = new iMessageBox();
                oCheckMandDRC.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                oCheckMandDRC.MessageButton = MessageBoxButton.OK;
                oCheckMandDRC.MessageBoxClose  = (s,e) => {this.oCheckMandDRC_MessageBoxClose(s,e) };
                oCheckMandDRC.Show();
            }
            return false;
        }
        private CheckMandDRCComments(): boolean {
            this.oResolveItem.bDRCMandatoryDone = false;
            let oCheckMandDRCComments: iMessageBox = new iMessageBox();
            oCheckMandDRCComments.Message = "Please enter comments";
            oCheckMandDRCComments.MessageButton = MessageBoxButton.OK;
            oCheckMandDRCComments.MessageBoxClose = (s,e) => {this.oCheckMandDRC_MessageBoxClose(s,e) };
            oCheckMandDRCComments.Show();
            return false;
        }
        oCheckMandDRC_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmViewDRC");
            if (oFauxTabItem != null) {
                this.oResolveItem.bDRCMandatoryDone = true;
                this.ftbFormViewDetails.Click("frmViewDRC", true);
            }
        }
        oCheckMandConflict_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmConflicts");
            if (oFauxTabItem != null) {
                this.oResolveItem.bDRCMandatoryDone = true;
                this.ftbFormViewDetails.Click("frmConflicts", true);
            }
        }
        public CheckAmendCreatedNewPresItem(): boolean {
            let _IsDurationOnlyChanged: boolean = true;
            let oCurrentDTTM: DateTime= CommonBB.GetServerDateTime();
            if (this.oResolveItem != null && this.oResolveItem.ParentbaseVM != null && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                        let nMultiDoseDetCnt: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[0].OperationMode == 'D')
                            _IsDurationOnlyChanged = false;
                        else if (nMultiDoseDetCnt > 0) {
                            for (let nCnt: number = 0; nCnt < nMultiDoseDetCnt; nCnt++) {
                                if ((this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nCnt].OperationMode == 'N' || this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nCnt].OperationMode == 'U') && DateTime.LessThanOrEqualTo(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nCnt].StartDTTM, oCurrentDTTM)) {
                                    _IsDurationOnlyChanged = false;
                                    break;
                                }
                                else {
                                    _IsDurationOnlyChanged = this.oResolveItem.ParentbaseVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails);
                                }
                            }
                        }
                    }
                    else _IsDurationOnlyChanged = this.oResolveItem.ParentbaseVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails);
                    if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.InvariantCultureIgnoreCase)) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD)
                            _IsDurationOnlyChanged = false;
                    }
                }
                let Isdischargenewmedchecked: boolean = false;
                if (PatientContext.PrescriptionType == PrescriptionTypes.Discharge && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count == 1 && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("IsIDSNewmeds")) {
                        if (this.oResolveItem.isnewmedschecked == true) {
                            Isdischargenewmedchecked = true;
                            _IsDurationOnlyChanged = this.oResolveItem.ParentbaseVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails);
                        }
                    }
                }
                if (!Isdischargenewmedchecked && (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) || (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) && String.Equals(PatientContext.ClerkFormViewDefaultBehavior, ClerkFormViewDeftBehaviour.LaunchFormMandatory))) && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0) {
                    let ncount: number = this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count;
                    for (let i: number = 0; i < ncount; i++) {
                        if (!String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds[i], "ReasonforModification")) {
                            if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds[i], "SupplyInsVal") || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds[i], "SupplyInsText") || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds[i], "Supplycomments") || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds[i], "SupplyStatus")) {
                                _IsDurationOnlyChanged = true;
                            }
                            else {
                                _IsDurationOnlyChanged = false;
                                break;
                            }
                        }
                    }
                    if (!_IsDurationOnlyChanged && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count == 1 && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds[0] != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds[0], "ReasonforModification") && this.oResolveItem.FormViewerDetails.TechValidateDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0) {
                        _IsDurationOnlyChanged = true;
                    }
                }
            }
            return _IsDurationOnlyChanged;
        }
        public OKButtonClick(): boolean {
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsOKButtonClicked = true;
                    return false;
                }
                let isSteppedDose: boolean = false;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.CurrentCultureIgnoreCase))) {
                    isSteppedDose = true;
                }
                if (isSteppedDose && this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped && ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped) != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsAdditionalDoseConfirmMsgShown = (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).IsAdditionalDoseConfirmMsgShown;
                }
            }
            if (this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase)) {
                this.oResolveItem.ManageReviewOutcome();
            }
            let bOKClickValidationsValue: boolean = false;
            this.IsValidationAsyncCallback = false;
            this.IsWitnessNonMandatory = false;
            let DRCAmendExistingDurg: boolean = false;
            CommonFlags.IsbagvolumeMsgDisplayed = true;
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.IsLoaded == true)) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.InfusionType != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (!String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.InfusionType.Value, this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin = this.oResolveItem.FormViewerDetails.BasicDetails.FillRecordAdminDetails(true);
                }
                else {
                    this.oResolveItem.FormViewerDetails.BasicDetails.oPrescitemVM.FillAdminFormFields();
                }
            }
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin == null || (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.IsLoaded == false))) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin == null)
                    this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin = new RecordAdminVM();
                if (!this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.WitnessMandatory) {
                    // this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.GetWitnessRequiredEvent -= RecordAdmin_GetWitnessRequiredEvent;
                    this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.GetWitnessRequiredEvent  = (s,e) => { this.RecordAdmin_GetWitnessRequiredEvent(); } ;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Route == null) {
                        // this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.GetWitnessRequiredEvent -= new RecordAdminVM.GetWitnessRequiredDlgt(RecordAdmin_GetWitnessRequiredEvent);
                        bOKClickValidationsValue = this.OKClickValidations();
                        let DRCTabEnable: boolean = false;
                        DRCTabEnable = this.DRCEnableCheck(this.oResolveItem);
                        if (bOKClickValidationsValue && DRCTabEnable && this.oResolveItem.CanPerformDRC(this.oResolveItem) && !this.IsDRCCompleted) {
                            if (String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase)) {
                                if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                                    this.oResolveItem.bDRCConflictOkVallidation = true;
                                    this.oResolveItem.PerformDRC(this.oResolveItem);
                                    return false;
                                }
                                else {
                                    if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.Value) && (((this.oResolveItem.FormViewerDetails.PresItemDRCVM == null || this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0) || !this.oResolveItem.FormViewerDetails.BasicDetails.IsDRCPerfomedForAmendment) && !this.CheckAmendCreatedNewPresItem()) || (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0))) {
                                        if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count == 0) {
                                            this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("Amend");
                                        }
                                        this.oResolveItem.bDRCConflictOkVallidation = true;
                                        this.oResolveItem.PerformDRC(this.oResolveItem);
                                        return false;
                                    }
                                    else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments)))) {
                                        this.CheckMandDRC();
                                        return false;
                                    }
                                    else if (bOKClickValidationsValue && !this.IsConflictsMandatory()) {
                                        this.oResolveItem.bDRCConflictOkVallidation = false;
                                        let objMsg: iMessageBox = new iMessageBox();
                                        objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                        this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                        objMsg.MessageButton = MessageBoxButton.OK;
                                        objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                                        objMsg.Show();
                                        return false;
                                    }
                                    else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                                        this.ParacetamolRecordadminOkClickBeingValidated = true;
                                        this.oResolveItem.IsAnyParacetamolAdministered();
                                        return false;
                                    }
                                    else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                                        this.ftbFormViewDetails.Click("frmViewDRC", true);
                                        return false;
                                    }
                                    else return bOKClickValidationsValue;
                                }
                            }
                            else if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0)) {
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0) {
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if ((this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments)))) {
                                this.CheckMandDRC();
                                return false;
                            }
                            else if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if (!this.IsConflictsMandatory()) {
                                this.oResolveItem.bDRCConflictOkVallidation = false;
                                let objMsg: iMessageBox = new iMessageBox();
                                objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                objMsg.MessageButton = MessageBoxButton.OK;
                                objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                                objMsg.Show();
                                return false;
                            }
                            else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                                this.ParacetamolRecordadminOkClickBeingValidated = true;
                                this.oResolveItem.IsAnyParacetamolAdministered();
                                return false;
                            }
                            else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                                this.ftbFormViewDetails.Click("frmViewDRC", true);
                                return false;
                            }
                            else {
                                return bOKClickValidationsValue;
                            }
                        }
                        else if (bOKClickValidationsValue && PatientContext.PrescriptionType != PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                            this.oResolveItem.bDRCConflictOkVallidation = false;
                            let objMsg_Conf: iMessageBox = new iMessageBox();
                            objMsg_Conf.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                            this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                            objMsg_Conf.MessageButton = MessageBoxButton.OK;
                            objMsg_Conf.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                            objMsg_Conf.Show();
                            return false;
                        }
                        else {
                            return bOKClickValidationsValue;
                        }
                    }
                    else if (!this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.IsRouteChanged) {
                        bOKClickValidationsValue = this.OKClickValidations();
                        let DRCTabEnable: boolean = false;
                        DRCTabEnable = this.DRCEnableCheck(this.oResolveItem);
                        if (bOKClickValidationsValue && DRCTabEnable && this.oResolveItem.CanPerformDRC(this.oResolveItem) && !this.IsDRCCompleted) {
                            if (String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase)) {
                                if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                                    this.oResolveItem.bDRCConflictOkVallidation = true;
                                    this.oResolveItem.PerformDRC(this.oResolveItem);
                                    return false;
                                }
                                else {
                                    if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.Value) && (((this.oResolveItem.FormViewerDetails.PresItemDRCVM == null || this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0) || !this.oResolveItem.FormViewerDetails.BasicDetails.IsDRCPerfomedForAmendment) && !this.CheckAmendCreatedNewPresItem()) || (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0))) {
                                        if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count == 0) {
                                            this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("Amend");
                                        }
                                        this.oResolveItem.bDRCConflictOkVallidation = true;
                                        this.oResolveItem.PerformDRC(this.oResolveItem);
                                        return false;
                                    }
                                    else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
                                        this.CheckMandDRC();
                                        return false;
                                    }
                                    else if (bOKClickValidationsValue && !this.IsConflictsMandatory()) {
                                        this.oResolveItem.bDRCConflictOkVallidation = false;
                                        let objMsg: iMessageBox = new iMessageBox();
                                        objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                        this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                        objMsg.MessageButton = MessageBoxButton.OK;
                                        objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                                        objMsg.Show();
                                        return false;
                                    }
                                    else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                                        this.ParacetamolRecordadminOkClickBeingValidated = true;
                                        this.oResolveItem.IsAnyParacetamolAdministered();
                                        return false;
                                    }
                                    else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                                        this.ftbFormViewDetails.Click("frmViewDRC", true);
                                        return false;
                                    }
                                    else return bOKClickValidationsValue;
                                }
                            }
                            else if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0)) {
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0) {
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
                                this.CheckMandDRC();
                                return false;
                            }
                            else if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if (!this.IsConflictsMandatory()) {
                                this.oResolveItem.bDRCConflictOkVallidation = false;
                                let objMsg: iMessageBox = new iMessageBox();
                                objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                objMsg.MessageButton = MessageBoxButton.OK;
                                objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                                objMsg.Show();
                                return false;
                            }
                            else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                                this.ParacetamolRecordadminOkClickBeingValidated = true;
                                this.oResolveItem.IsAnyParacetamolAdministered();
                                return false;
                            }
                            else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                                this.ftbFormViewDetails.Click("frmViewDRC", true);
                                return false;
                            }
                            else {
                                return bOKClickValidationsValue;
                            }
                        }
                        else if (bOKClickValidationsValue && PatientContext.PrescriptionType != PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                            this.oResolveItem.bDRCConflictOkVallidation = false;
                            let objMsg_Conflict: iMessageBox = new iMessageBox();
                            objMsg_Conflict.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                            this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                            objMsg_Conflict.MessageButton = MessageBoxButton.OK;
                            objMsg_Conflict.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                            objMsg_Conflict.Show();
                            return false;
                        }
                        else {
                            return bOKClickValidationsValue;
                        }
                    }
                }
                else {
                    bOKClickValidationsValue = this.OKClickValidations();
                    let DRCTabEnable: boolean = false;
                    DRCTabEnable = this.DRCEnableCheck(this.oResolveItem);
                    if (bOKClickValidationsValue && DRCTabEnable && this.oResolveItem.CanPerformDRC(this.oResolveItem) && !this.IsDRCCompleted) {
                        if (String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase)) {
                            if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else {
                                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.Value) && (((this.oResolveItem.FormViewerDetails.PresItemDRCVM == null || this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0) || !this.oResolveItem.FormViewerDetails.BasicDetails.IsDRCPerfomedForAmendment) && !this.CheckAmendCreatedNewPresItem()) || (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0))) {
                                    if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count == 0) {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("Amend");
                                    }
                                    this.oResolveItem.bDRCConflictOkVallidation = true;
                                    this.oResolveItem.PerformDRC(this.oResolveItem);
                                    return false;
                                }
                                else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
                                    this.CheckMandDRC();
                                    return false;
                                }
                                else if (bOKClickValidationsValue && !this.IsConflictsMandatory()) {
                                    this.oResolveItem.bDRCConflictOkVallidation = false;
                                    let objMsg: iMessageBox = new iMessageBox();
                                    objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                    this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                    objMsg.MessageButton = MessageBoxButton.OK;
                                    objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                                    objMsg.Show();
                                    return false;
                                }
                                else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                                    this.ParacetamolRecordadminOkClickBeingValidated = true;
                                    this.oResolveItem.IsAnyParacetamolAdministered();
                                    return false;
                                }
                                else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                                    this.ftbFormViewDetails.Click("frmViewDRC", true);
                                    return false;
                                }
                                else return bOKClickValidationsValue;
                            }
                        }
                        else if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0)) {
                            this.oResolveItem.bDRCConflictOkVallidation = true;
                            this.oResolveItem.PerformDRC(this.oResolveItem);
                            return false;
                        }
                        else if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0) {
                            this.oResolveItem.bDRCConflictOkVallidation = true;
                            this.oResolveItem.PerformDRC(this.oResolveItem);
                            return false;
                        }
                        else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
                            this.CheckMandDRC();
                            return false;
                        }
                        else if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                            this.oResolveItem.bDRCConflictOkVallidation = true;
                            this.oResolveItem.PerformDRC(this.oResolveItem);
                            return false;
                        }
                        else if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                            this.oResolveItem.bDRCConflictOkVallidation = true;
                            this.oResolveItem.PerformDRC(this.oResolveItem);
                            return false;
                        }
                        else if (!this.IsConflictsMandatory()) {
                            this.oResolveItem.bDRCConflictOkVallidation = false;
                            let objMsg: iMessageBox = new iMessageBox();
                            objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                            this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                            objMsg.MessageButton = MessageBoxButton.OK;
                            objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                            objMsg.Show();
                            return false;
                        }
                        else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                            this.ParacetamolRecordadminOkClickBeingValidated = true;
                            this.oResolveItem.IsAnyParacetamolAdministered();
                            return false;
                        }
                        else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                            this.ftbFormViewDetails.Click("frmViewDRC", true);
                            return false;
                        }
                        else {
                            return bOKClickValidationsValue;
                        }
                    }
                    else if (bOKClickValidationsValue && PatientContext.PrescriptionType != PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                        this.oResolveItem.bDRCConflictOkVallidation = false;
                        let objMsg_Conflict: iMessageBox = new iMessageBox();
                        objMsg_Conflict.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                        this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                        objMsg_Conflict.MessageButton = MessageBoxButton.OK;
                        objMsg_Conflict.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                        objMsg_Conflict.Show();
                        return false;
                    }
                    else {
                        return bOKClickValidationsValue;
                    }
                }
            }
            else if (this.oResolveItem.IsReasonForModificationVisible == Visibility.Visible && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD && (this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD || this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify)) {
                bOKClickValidationsValue = this.OKClickValidations();
                if (bOKClickValidationsValue && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && !this.oResolveItem.FormViewerDetails.BasicDetails.ReviewDurMsgReset && ((this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration == Visibility.Visible && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDuration && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration)) || (this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStopDate && this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleStopDate == Visibility.Visible && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue))) && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && !this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("StopDate") && !this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Duration") && !this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("DurationUOM")) {
                    let oVM: IPPMABaseVM = this.oResolveItem.ParentbaseVM;
                    let IsDurationOnlyChanged: boolean = false;
                    let oCurrentDTTM: DateTime= CommonBB.GetServerDateTime();
                    if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                            let nMultiDoseDetCnt: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[0].OperationMode == 'D')
                                IsDurationOnlyChanged = false;
                            else if (nMultiDoseDetCnt > 0) {
                                for (let nCnt: number = 0; nCnt < nMultiDoseDetCnt; nCnt++) {
                                    if ((this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nCnt].OperationMode == 'N' || this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nCnt].OperationMode == 'U') && DateTime.LessThanOrEqualTo(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nCnt].StartDTTM, oCurrentDTTM)) {
                                        IsDurationOnlyChanged = false;
                                        break;
                                    }
                                    else {
                                        IsDurationOnlyChanged = oVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails);
                                    }
                                }
                            }
                        }
                        else IsDurationOnlyChanged = oVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails);
                        if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.InvariantCultureIgnoreCase)) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD)
                                IsDurationOnlyChanged = false;
                        }
                    }
                    if (PatientContext.PrescriptionType == PrescriptionTypes.Discharge && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count == 1 && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("IsIDSNewmeds")) {
                            if (this.oResolveItem.isnewmedschecked == true)
                                IsDurationOnlyChanged = oVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails);
                        }
                    }
                    if (!IsDurationOnlyChanged && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ModificationAction) && this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.Value)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewDurMsgReset = true;
                        if (this.objMsg != null) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration == Visibility.Visible && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration)) {
                                this.oResolveItem.FocusControl = "udDuration";
                            }
                            else if (this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleStopDate == Visibility.Visible && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)) {
                                this.oResolveItem.FocusControl = "dtpStopDate";
                            }
                            this.objMsg.Message = Resource.prescribedrugs.ReviewDurStopDTmsg;
                            this.objMsg.MessageButton = MessageBoxButton.OK;
                            this.objMsg.Show();
                            //TFS ID - 50647
                            this.objMsg.MessageBoxClose = (s,e) => { this.udDuration_MessageBoxClose(s,e)};   
                        }
                        return false;
                    }
                }
                let DRCTabEnable: boolean = false;
                DRCTabEnable = this.DRCEnableCheck(this.oResolveItem);
                if (bOKClickValidationsValue && DRCTabEnable && this.oResolveItem.CanPerformDRC(this.oResolveItem) && !this.IsDRCCompleted) {
                    if (String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase)) {
                        if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                            this.oResolveItem.bDRCConflictOkVallidation = true;
                            this.oResolveItem.PerformDRC(this.oResolveItem);
                            return false;
                        }
                        else {
                            if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.Value) && (((this.oResolveItem.FormViewerDetails.PresItemDRCVM == null || this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0) || !this.oResolveItem.FormViewerDetails.BasicDetails.IsDRCPerfomedForAmendment) && !this.CheckAmendCreatedNewPresItem()) || (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0))) {
                                if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count == 0) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("Amend");
                                }
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
                                this.CheckMandDRC();
                                return false;
                            }
                            else if (bOKClickValidationsValue && !this.IsConflictsMandatory()) {
                                this.oResolveItem.bDRCConflictOkVallidation = false;
                                let objMsg: iMessageBox = new iMessageBox();
                                objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                objMsg.MessageButton = MessageBoxButton.OK;
                                objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                                objMsg.Show();
                                return false;
                            }
                            else if (bOKClickValidationsValue && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && !this.CheckIfAmendedPrevItemHasDueOverdueSlot()) {
                                return false;
                            }
                            else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                                this.ftbFormViewDetails.Click("frmViewDRC", true);
                                return false;
                            }
                            else return bOKClickValidationsValue;
                        }
                    }
                    else if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && (((this.oResolveItem.FormViewerDetails.PresItemDRCVM == null || this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0) || !this.oResolveItem.FormViewerDetails.BasicDetails.IsDRCPerfomedForAmendment) && !this.CheckAmendCreatedNewPresItem()) || (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0))) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count == 0) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("Amend");
                        }
                        this.oResolveItem.bDRCConflictOkVallidation = true;
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        this.oResolveItem.bDRCConflicttabloaded = true;
                        return false;
                    }
                    else if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0) {
                        this.oResolveItem.bDRCConflictOkVallidation = true;
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        return false;
                    }
                    else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
                        this.CheckMandDRC();
                        return false;
                    }
                    else if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                        this.oResolveItem.bDRCConflictOkVallidation = true;
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        return false;
                    }
                    else if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                        this.oResolveItem.bDRCConflictOkVallidation = true;
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        return false;
                    }
                    else if (!this.IsConflictsMandatory()) {
                        this.oResolveItem.bDRCConflictOkVallidation = false;
                        let objMsg: iMessageBox = new iMessageBox();
                        objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                        this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                        objMsg.MessageButton = MessageBoxButton.OK;
                        objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                        objMsg.Show();
                        return false;
                    }
                    else if (bOKClickValidationsValue && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && !this.CheckIfAmendedPrevItemHasDueOverdueSlot()) {
                        return false;
                    }
                    else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                        this.ftbFormViewDetails.Click("frmViewDRC", true);
                        return false;
                    }
                    else {
                        return bOKClickValidationsValue;
                    }
                }
                else if (bOKClickValidationsValue && PatientContext.PrescriptionType != PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                    this.oResolveItem.bDRCConflictOkVallidation = false;
                    let objMsg: iMessageBox = new iMessageBox();
                    objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                    this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                    objMsg.MessageButton = MessageBoxButton.OK;
                    objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                    objMsg.Show();
                    return false;
                }
                else if (bOKClickValidationsValue && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && !this.CheckIfAmendedPrevItemHasDueOverdueSlot()) {
                    return false;
                }
                else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                    this.ftbFormViewDetails.Click("frmViewDRC", true);
                    return false;
                }
                else {
                    return bOKClickValidationsValue;
                }
            }
            else {
                bOKClickValidationsValue = this.OKClickValidations();
                let DRCTabEnable: boolean = false;
                DRCTabEnable = this.DRCEnableCheck(this.oResolveItem);
                if (bOKClickValidationsValue && DRCTabEnable && this.oResolveItem.CanPerformDRC(this.oResolveItem) && !this.IsDRCCompleted) {
                    if (String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase)) {
                        if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                            this.oResolveItem.bDRCConflictOkVallidation = true;
                            this.oResolveItem.PerformDRC(this.oResolveItem);
                            return false;
                        }
                        else {
                            if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.Value) && (((this.oResolveItem.FormViewerDetails.PresItemDRCVM == null || this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0) || !this.oResolveItem.FormViewerDetails.BasicDetails.IsDRCPerfomedForAmendment) && !this.CheckAmendCreatedNewPresItem()) || (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0))) {
                                if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count == 0) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add("Amend");
                                }
                                this.oResolveItem.bDRCConflictOkVallidation = true;
                                this.oResolveItem.PerformDRC(this.oResolveItem);
                                return false;
                            }
                            else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
                                this.CheckMandDRC();
                                return false;
                            }
                            else if (bOKClickValidationsValue && !this.IsConflictsMandatory()) {
                                this.oResolveItem.bDRCConflictOkVallidation = false;
                                let objMsg: iMessageBox = new iMessageBox();
                                objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                objMsg.MessageButton = MessageBoxButton.OK;
                                objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                                objMsg.Show();
                                return false;
                            }
                            else if (bOKClickValidationsValue && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && !this.CheckIfAmendedPrevItemHasDueOverdueSlot()) {
                                return false;
                            }
                            else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                                this.ParacetamolRecordadminOkClickBeingValidated = true;
                                this.oResolveItem.IsAnyParacetamolAdministered();
                                return false;
                            }
                            else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                                this.ftbFormViewDetails.Click("frmViewDRC", true);
                                return false;
                            }
                            else return bOKClickValidationsValue;
                        }
                    }
                    else if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0)) {
                        this.oResolveItem.bDRCConflictOkVallidation = true;
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        return false;
                    }
                    else if (this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Count > 0) {
                        this.oResolveItem.bDRCConflictOkVallidation = true;
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        return false;
                    }
                    else if (this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
                        this.CheckMandDRC();
                        return false;
                    }
                    else if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                        this.oResolveItem.bDRCConflictOkVallidation = true;
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        return false;
                    }
                    else if (this.oResolveItem.ActionCode != ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0))) {
                        this.oResolveItem.bDRCConflictOkVallidation = true;
                        this.oResolveItem.PerformDRC(this.oResolveItem);
                        return false;
                    }
                    else if (!this.IsConflictsMandatory()) {
                        this.oResolveItem.bDRCConflictOkVallidation = false;
                        let objMsg: iMessageBox = new iMessageBox();
                        objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                        this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                        objMsg.MessageButton = MessageBoxButton.OK;
                        objMsg.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                        objMsg.Show();
                        return false;
                    }
                    else if (bOKClickValidationsValue && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && !this.CheckIfAmendedPrevItemHasDueOverdueSlot()) {
                        return false;
                    }
                    else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                        this.ParacetamolRecordadminOkClickBeingValidated = true;
                        this.oResolveItem.IsAnyParacetamolAdministered();
                        return false;
                    }
                    else if (bOKClickValidationsValue && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && ((!this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
                        this.ftbFormViewDetails.Click("frmViewDRC", true);
                        return false;
                    }
                    else {
                        return bOKClickValidationsValue;
                    }
                }
                else if (bOKClickValidationsValue && PatientContext.PrescriptionType != PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                    this.oResolveItem.bDRCConflictOkVallidation = false;
                    let objMsgConflict: iMessageBox = new iMessageBox();
                    objMsgConflict.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                    this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                    objMsgConflict.MessageButton = MessageBoxButton.OK;
                    objMsgConflict.MessageBoxClose = (s,e) => { this.oCheckMandConflict_MessageBoxClose(s,e)} ;
                    objMsgConflict.Show();
                    return false;
                }
                else if (bOKClickValidationsValue && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && !this.CheckIfAmendedPrevItemHasDueOverdueSlot()) {
                    return false;
                }
                else if (bOKClickValidationsValue && ObjectHelper.HasValue(this.oResolveItem.IsParacetamolIngredient) && this.oResolveItem.IsParacetamolIngredient.Value && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled && !this.ParacetamolAlreadyAdministeredWarning_Displayed) {
                    this.ParacetamolRecordadminOkClickBeingValidated = true;
                    this.oResolveItem.IsAnyParacetamolAdministered();
                    return false;
                }
                else {
                    return bOKClickValidationsValue;
                }
            }
            return false;
        }
        udDuration_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            this.udDuration.Focus();
        }
        RecordAdmin_GetWitnessRequiredEvent(): void {
            this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.WitnessMandatory = this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.bIsWitnessReqd;
            // this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.GetWitnessRequiredEvent -= RecordAdmin_GetWitnessRequiredEvent;
            if (!this.oResolveItem.FormViewerDetails.BasicDetails.isDoseadministeteredmsg) {
                if (this.OKClickValidations()) {
                    this.IsWitnessNonMandatory = true;
                    if (this.onDialogClose != null)
                        this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
        }
        private MessageBoxClose_App(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                this.oResolveItem.FormViewerDetails.BasicDetails.TimeMinValueFlag = true;
                if (this.onDialogClose != null) {
                    this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
            else if (e.MessageBoxResult == MessageBoxResult.No) {
                this.oResolveItem.FormViewerDetails.BasicDetails.TimeMinValueFlag = false;
                if (!String.IsNullOrEmpty(this.oResolveItem.FocusControl) && String.Equals(this.oResolveItem.FocusControl, "iTimeStartDateTime", StringComparison.InvariantCultureIgnoreCase)) {
                    let _StartTimeControl: iTimeBox = ObjectHelper.CreateType<iTimeBox>(this.frmViewBasic.FindName("iTimeStartDateTime"), iTimeBox);
                    if (_StartTimeControl != null) {
                        _StartTimeControl.Focus();
                    }
                }
            }
        }
        public AmendInfusionRateChangedSeq(): boolean {
            let IsRateAloneChanged: boolean = false;
            if (this.CheckUpdatedItem(this.oResolveItem.FormViewerDetails.BasicDetails) && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Rate")) {
                IsRateAloneChanged = true;
            }
            if (IsRateAloneChanged && PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && !this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfSequentialRateChanged && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID > 0) {
                let GetSubSeqEqualRate = this.objItems.Where(c => c.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID && c.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder && c.FormViewerDetails.BasicDetails.InfusionDetails.Rate == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate);
                let GetSubSeqNotEqualRate = this.objItems.Where(c => c.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID && c.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder && c.FormViewerDetails.BasicDetails.InfusionDetails.Rate != this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate);
                if (GetSubSeqEqualRate != null && GetSubSeqEqualRate.Count() > 0) {
                    let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                        Title: "LORENZO",
                        Message: "The infusion rate has been changed for a sequential prescription item. Do you wish to cascade this change to all remaining items in the sequence?",
                        MessageButton: MessageBoxButton.YesNo,
                        IconType: MessageBoxType.Question
                    });
                    iMsgBox.MessageBoxClose  = (s,e) => { this.iMsgBox_AmendInfusionrateChangedMessagecloseBox(s,e); } ;
                    iMsgBox.Show();
                    return false;
                }
                else if (GetSubSeqNotEqualRate != null && GetSubSeqNotEqualRate.Count() > 0) {
                    let oMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                        Title: "LORENZO",
                        Message: "You have changed the infusion rate for a sequential prescription item. Please review the remaining items in the sequence if necessary",
                        MessageButton: MessageBoxButton.OK,
                        IconType: MessageBoxType.Information
                    });
                    oMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_AmendInfusionMessageBoxClose(s,e); } ;
                    oMsgBox.Show();
                    return false;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsSequentiallinkvisi = Visibility.Visible;
            }
            return true;
        }
        iMsgBox_AmendInfusionrateChangedMessagecloseBox(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfSequentialRateChanged = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsSequentiallinkvisi = Visibility.Visible;
                let GetSubSequential = this.objItems.Where(c => c.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID && c.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder >= this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder);
                if (GetSubSequential != null) {
                    this.objItems.ForEach(UpdateInfusionRate => {
                        if (GetSubSequential.Contains(UpdateInfusionRate)) {
                            UpdateInfusionRate.FormViewerDetails.BasicDetails.InfusionDetails.Rate = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
                            UpdateInfusionRate.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
                            UpdateInfusionRate.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
                            UpdateInfusionRate.FormViewerDetails.BasicDetails.ReasonforModification = this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification;
                            UpdateInfusionRate.OperationMode = "UA";
                        }
                    });
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi = Visibility.Visible;
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsSequentiallinkvisi = Visibility.Visible;
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
            else if (e.MessageBoxResult == MessageBoxResult.No) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfSequentialRateChanged = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsSequentiallinkvisi = Visibility.Visible;
                if (super.onDialogClose != null)
                    super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
        }
        oMsgBox_AmendInfusionMessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.OK) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfSequentialRateChanged = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi = Visibility.Visible;
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null)
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.IsCurrentInfusionRateChange = true;
                if (super.onDialogClose != null)
                    super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
        }
        public CheckUpdatedItem(objItemVM: BasicDetailsVM): boolean {
            let sFldname: string = String.Empty;
            let bDurationChange: boolean = true;
            let sDoseType: string = String.Empty;
            let IsMedicalGasDrug: boolean = false;
            if (objItemVM != null && objItemVM.InfusionDetails != null && !String.IsNullOrEmpty(objItemVM.itemSubType) && String.Compare(objItemVM.itemSubType, CConstants.SUBTYPE_GAS, StringComparison.CurrentCultureIgnoreCase) == 0) {
                IsMedicalGasDrug = true;
            }
            for (let i: number = 0; i < objItemVM.lstAmendedFlds.Count; i++) {
                if (objItemVM.DoseType != null)
                    sDoseType = objItemVM.DoseType.Value;
                sFldname = objItemVM.lstAmendedFlds[i];
                if ((String.Compare(sFldname, "Duration", StringComparison.OrdinalIgnoreCase) == 0 && String.Compare(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) != 0) || String.Compare(sFldname, "EndDTTM", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "ReasonforModification", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "DurationUOM", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "ProblemIndication", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "ModificationComments", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "QuantityUOM", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "SupplyInstructionText", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "InstalmentInstructions", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "AdditionalComments", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "TreatmentToContinue", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "Quantity", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "OtherAdminiInstruction", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "EndorsementProperties", StringComparison.OrdinalIgnoreCase) == 0 || (String.Compare(sFldname, "Rate", StringComparison.OrdinalIgnoreCase) == 0) || String.Compare(sFldname, "InfusionPeriodUOM", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "InfusionPeriod", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "ReviewAfter", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "IsOngoingChecked", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "MaxDose", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "TargetLowerSatRange", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sFldname, "TargetUpperSatRange", StringComparison.OrdinalIgnoreCase) == 0 || (String.Compare(sFldname, "DeliveryDeviceFreetext", StringComparison.OrdinalIgnoreCase) == 0 && IsMedicalGasDrug) || (String.Compare(sFldname, "InfRateDinominatorUom", StringComparison.OrdinalIgnoreCase) == 0 && IsMedicalGasDrug) || (String.Compare(sFldname, "InfRateNumeratorUom", StringComparison.OrdinalIgnoreCase) == 0 && IsMedicalGasDrug)) {

                }
                else {
                    bDurationChange = false;
                    break;
                }
            }
            return bDurationChange;
        }
        public InfusionRateChangedSeq(): boolean {
            if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null && !this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.IsInfRateChangedSequential && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null) {
                let GetSubSeqEqualRate = this.objItems.Where(c => c.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber && c.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate) && c.FormViewerDetails.BasicDetails.InfusionDetails.Rate == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate);
                let GetSubSeqNotEqualRate = this.objItems.Where(c => c.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber && c.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate) && c.FormViewerDetails.BasicDetails.InfusionDetails.Rate != this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate);
                if (GetSubSeqEqualRate != null && GetSubSeqEqualRate.Count() > 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate = String.Empty;
                    let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                        Title: "LORENZO",
                        Message: "The infusion rate has been changed for a sequential prescription item. Do you wish to cascade this change to all remaining items in the sequence?",
                        MessageButton: MessageBoxButton.YesNo,
                        IconType: MessageBoxType.Question
                    });
                    iMsgBox.MessageBoxClose  = (s,e) => { this.iMsgBox_InfusionrateChangedMessagecloseBox(s,e); } ;
                    iMsgBox.Show();
                    return false;
                }
                else if (GetSubSeqNotEqualRate != null && GetSubSeqNotEqualRate.Count() > 0) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate = String.Empty;
                    let oMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                        Title: "LORENZO",
                        Message: "You have changed the infusion rate for a sequential prescription item. Please review the remaining items in the sequence if necessary",
                        MessageButton: MessageBoxButton.OK,
                        IconType: MessageBoxType.Information
                    });
                    oMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_InfusionMessageBoxClose(s,e); } ;
                    oMsgBox.Show();
                    return false;
                }
            }
            return true;
        }
        iMsgBox_InfusionrateChangedMessagecloseBox(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.IsInfRateChangedSequential = true;
                let GetSubSequential = this.objItems.Where(c => c.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber == this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber && c.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder >= this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder);
                if (GetSubSequential != null) {
                    this.objItems.ForEach(UpdateInfusionRate => {
                        if (GetSubSequential.Contains(UpdateInfusionRate)) {
                            UpdateInfusionRate.FormViewerDetails.BasicDetails.InfusionDetails.Rate = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
                            UpdateInfusionRate.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
                            UpdateInfusionRate.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
                            UpdateInfusionRate.FormViewerDetails.BasicDetails.InfusionDetails.SeqInfRate = String.Empty;
                        }
                    });
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
            else if (e.MessageBoxResult == MessageBoxResult.No) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.IsInfRateChangedSequential = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi = Visibility.Visible;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsSequentiallinkvisi = Visibility.Visible;
                if (super.onDialogClose != null)
                    super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
        }
        oMsgBox_InfusionMessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.OK) {
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.IsInfRateChangedSequential = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.IsCurrentInfusionRateChange = true;
                if (super.onDialogClose != null)
                    super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
        }
        private OKClickValidations(): boolean {
            let chkNoWitness: iCheckBox = null;                        
            let sfsWitnessedby: iSFS = null;                                  
            
            if (this.ftbFormViewDetails != null && this.ftbFormViewDetails.KeepTabContent) {
                if (!this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.DynamicFormRecAdminTabVisited) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.DynamicFormRecAdminTabVisited = true;
                        this.frmRecordAdmin.ngAfterViewInit();                       
                        this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.SetRecordAdmin();                                                    
                    }
                }
            }

            if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) === 'undefined') ||
                !this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited) {
                if (this.frmRecordAdmin == null) {
                    this.frmRecordAdmin = new medrecordadmin();
                }
                this.ProxychkNoWitness = this.frmRecordAdmin.iCheckBoxForRecordAdministration("chkNoWitness");
                this.ProxysfsWitnessedby = this.frmRecordAdmin.iSFSForRecordAdministration("sfsWitnessedby");
                this.ProxylblWitnessedBy = this.frmRecordAdmin.iLabelForRecordAdministration("lblWitnessedBy");
                this.ProxydtpAdminDate = this.frmRecordAdmin.iDateTimePickerForRecordAdministration("dtpAdminDate");
                this.Proxycboflowratenumuom = this.frmRecordAdmin.iComboBoxForRecordAdministration("cboflowratenumuom");
                this.ProxytxtAdminDose = this.frmRecordAdmin.iTextBoxForRecordAdministration("txtAdminDose");
                this.Proxycboflowratedenuom = this.frmRecordAdmin.iComboBoxForRecordAdministration("cboflowratedenuom");
                this.ProxycboRoute = this.frmRecordAdmin.iComboBoxForRecordAdministration("cboRoute");
                this.ProxycboDoseUoMValue = this.frmRecordAdmin.iComboBoxForRecordAdministration("ProxycboDoseUoMValue");
                this.ProxytxtRecBatchNo = this.frmRecordAdmin.iTextBoxForRecordAdministration("ProxytxtRecBatchNo");

                if (this.oResolveItem?.FormViewerDetails?.BasicDetails?.InfusionDetails != null) {
                    this.ProxytxtRecinfusionrate = this.frmRecordAdmin.iTextBoxForRecordAdministration("txtRecinfusionrate");
                    this.ProxycboInfusionRateUOM = this.frmRecordAdmin.iComboBoxForRecordAdministration("cboInfusionRateUOM");                    
                    this.Proxybagvolumetext = this.frmRecordAdmin.iTextBoxForRecordAdministration("bagvolumetext");
                    this.ProxycbobagUoMValue = this.frmRecordAdmin.iComboBoxForRecordAdministration("cbobagUoMValue");                                        
                }

                sfsWitnessedby = this.ProxysfsWitnessedby;
                chkNoWitness = this.ProxychkNoWitness;                
            }
            let objFormViewerDetails: FormViewerVM = new FormViewerVM();
            objFormViewerDetails = this.oResolveItem.FormViewerDetails;
            this.isTechOkCheck = true;
            this.oResolveItem.FormViewerDetails.BasicDetails.isDoseadministeteredmsg = true;
            let IsItemASequentialChild: boolean = (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && objFormViewerDetails.BasicDetails.InfusionDetails != null && objFormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0 && this.dtpStartDate && !this.dtpStartDate.IsEnabled);
            if (objFormViewerDetails.BasicDetails.TVMsgFormClose) {
                return false;
            }
            if (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && objFormViewerDetails.BasicDetails.launchsupplyinstrmezzanineCheck) {
                return false;
            }
            if (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && objFormViewerDetails.BasicDetails.IsInfusionRateChanged) {
                this.IsInfCheckedAndPass = false;
            }
            if (objFormViewerDetails.BHasFormViewParams && objFormViewerDetails.BasicDetails.StrengthVisibility == Visibility.Collapsed) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.Strength != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.Strength.Tag = "OKVAL";
                    this.oResolveItem.FormViewerDetails.BasicDetails.Strength = null;
                }
            }
            if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.itemSubType) && String.Equals(objFormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase)) {
                this.oResolveItem.GetnamewithoutUOM();
                this.oResolveItem.GetMcchilditemDisplay();
                this.SetDrugHeaderContent(this.oResolveItem);
                let sbDrugOIDTypes: StringBuilder = new StringBuilder();
                let item: string = String.Empty;
                if (objFormViewerDetails.MulticomponentDetails != null && objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null) {
                    let nMCItemBasicInfoCnt: number = objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
                    if (nMCItemBasicInfoCnt <= 1) {
                        this.oResolveItem.FocusControl = "";
                        this.objMsg.Message = Resource.Multicomponent.Multicomponent_msg;
                        this.objMsg.Show();
                        let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmmulticomponent");
                        if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmmulticomponent") {
                            this.ftbFormViewDetails.Click(oFauxTabItem.Key, true);
                        }
                        if (String.Equals(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.InvariantCultureIgnoreCase)) {
                            this.oResolveItem.GetMCFormviewcloseflag();
                        }
                        return false;
                    }
                    else if (nMCItemBasicInfoCnt >= 1) {
                        let nDrugOIDTypeslength: number = sbDrugOIDTypes.Length;
                        for (let rcount: number = 0; rcount < nMCItemBasicInfoCnt; rcount++) {
                            if (objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].IsNonFormulary) {
                                sbDrugOIDTypes.Append(objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].ComponentName);
                                sbDrugOIDTypes.Append(Environment.NewLine);
                                if (!String.IsNullOrEmpty(objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].Nonformularyreason))
                                    this.oResolveItem.MCNonFormularyReason = Common.GetText(objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].Nonformularyreason, ConceptCodeData.NFREASON);
                                if (!String.IsNullOrEmpty(objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].OtherNonformularyreason))
                                    this.oResolveItem.MCOtherNonFormularyReason = objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].OtherNonformularyreason;
                            }
                        }
                        for (let rcount: number = 0; rcount < nMCItemBasicInfoCnt; rcount++) {
                            if (objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].IsNonFormulary) {
                                if (String.IsNullOrEmpty(objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].Nonformularyreason) && String.IsNullOrEmpty(objFormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].OtherNonformularyreason)) {
                                    this.oResolveItem.MCnonformularycheck = false;
                                    break;
                                }
                            }
                        }
                        if (nDrugOIDTypeslength > 0)
                            sbDrugOIDTypes.Remove(nDrugOIDTypeslength - 1, 1);
                        item = Convert.ToString(sbDrugOIDTypes);
                        this.oResolveItem.NonFormularynames = Convert.ToString(item);
                    }
                }
                if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.SNamewithoutQuantitys)) {
                    this.oResolveItem.FocusControl = "";
                    this.objMsg.Message = Resource.Multicomponent.Quantity_msg +" "+ objFormViewerDetails.BasicDetails.SNamewithoutQuantitys;
                    this.objMsg.Show();
                    let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmmulticomponent");
                    if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmmulticomponent") {
                        this.ftbFormViewDetails.Click(oFauxTabItem.Key, true);
                    }
                    if (String.Equals(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.InvariantCultureIgnoreCase)) {
                        this.oResolveItem.GetMCFormviewcloseflag();
                    }
                    return false;
                }
                else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.SNamewithoutUOM)) {
                    this.oResolveItem.FocusControl = "";
                    this.objMsg.Message = Resource.Multicomponent.QuantityUOM_msg + objFormViewerDetails.BasicDetails.SNamewithoutUOM;
                    this.objMsg.Show();
                    let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmmulticomponent");
                    if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmmulticomponent") {
                        this.ftbFormViewDetails.Click(oFauxTabItem.Key, true);
                    }
                    if (String.Equals(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.InvariantCultureIgnoreCase)) {
                        this.oResolveItem.GetMCFormviewcloseflag();
                    }
                    return false;
                }
                else if (objFormViewerDetails.BasicDetails.DosageForm == null && !String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase)) {
                    this.oResolveItem.FocusControl = "cboDosageFormMC";
                    this.objMsg.Message = Resource.Multicomponent.Dosageform_msg;
                    this.objMsg.Show();
                    let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmmulticomponent");
                    if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmmulticomponent") {
                        this.ftbFormViewDetails.Click(oFauxTabItem.Key, true);
                    }
                    if (String.Equals(this.oResolveItem.ItemSubType, CConstants.SUBTYPE, StringComparison.InvariantCultureIgnoreCase)) {
                        this.oResolveItem.GetMCFormviewcloseflag();
                    }
                    return false;
                }
                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                    if (objFormViewerDetails.dupMulticomponentDetails != null && objFormViewerDetails.dupMulticomponentDetails.oMCItemBasicInfo.Count > 0) {
                        this.GetMCamendflag(false);
                        if (objFormViewerDetails.BasicDetails.IsMCenableRSNFORMOD == true) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableModificationcomments = true;
                            this.oResolveItem.IsReasonForModificationVisible = Visibility.Visible;
                        }
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableOnbehalfOf = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = false;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableModificationcomments = false;
                    }
                }
            }
            if (objFormViewerDetails.BasicDetails.IsDoseOverrideViewOpen) {
                return false;
            }
            if (this.oResolveItem.DbOsValues != null) {
                let dct: Dictionary<string, string> = Common.GetOsValues(this.oResolveItem);
                let isInfusion: boolean = dct.ContainsKey(FieldNames.OsIsInfusion) && dct[FieldNames.OsIsInfusion] != null && String.Equals(dct[FieldNames.OsIsInfusion].ToString(), "1", StringComparison.OrdinalIgnoreCase);
                if (this.oResolveItem.ActionCode == ActivityTypes.Prescribe && (this.oResolveItem.OperationMode == null || this.oResolveItem.OperationMode == "N")) {
                    if (!this.oResolveItem.IsAddedToResolveGrid) {
                        if (this.oResolveItem.OsInstance != null && this.oResolveItem.OsInstance.OsIsSequential) {
                            let validation = OsValidation.GetOsValidation(this.oResolveItem, true);
                            if (validation.IsStatOnceOnlyOrPrn) {
                                let errorMessage: string = Resource.MedicationErrors.IsStatOnceOnlyOrPrnBreakError;
                                iMessageBox.Show("LORENZO", errorMessage, MessageBoxType.Information, MessageBoxButton.OK);
                                return false;
                            }
                            else if (validation.IsApplianceMedGasSVOrPCA || validation.IsTitrated || validation.IsInfusion && validation.IsIntermittend) {
                                let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                                let iMsgBoxRole: iMessageBox = new iMessageBox();
                                iMsgBoxRole.Title = "LORENZO";
                                iMsgBoxRole.IconType = MessageBoxType.Information;
                                iMsgBoxRole.Height = 160;
                                iMsgBoxRole.Width = 340;
                                iMsgBoxRole.Message = errorMessage;
                                iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                                iMsgBoxRole.Show();
                                return false;
                            }
                            else if (this.oResolveItem.DbOsValues[FieldNames.OsIsInfusion] != dct[FieldNames.OsIsInfusion]) {
                                let errorMessage: string = Resource.MedicationErrors.ChangeOfRouteInSequence;
                                iMessageBox.Show("LORENZO", errorMessage, MessageBoxType.Information, MessageBoxButton.OK);
                                return false;
                            }
                            else if (this.oResolveItem.formViewerDetails != null && this.oResolveItem.formViewerDetails.BasicDetails != null && (this.oResolveItem.formViewerDetails.BasicDetails.InfusionType != null && (String.Equals(this.oResolveItem.formViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA, StringComparison.OrdinalIgnoreCase) || isInfusion && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase)) || this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase))) {
                                let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                                let iMsgBoxRole: iMessageBox = new iMessageBox();
                                iMsgBoxRole.Title = "LORENZO";
                                iMsgBoxRole.IconType = MessageBoxType.Information;
                                iMsgBoxRole.Height = 160;
                                iMsgBoxRole.Width = 340;
                                iMsgBoxRole.Message = errorMessage;
                                iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                                iMsgBoxRole.Show();
                                return false;
                            }
                            else if (!this.oResolveItem.OsInstance.OsIsLastItem) {
                                if (this.oResolveItem.DbOsValues[FieldNames.OsDurationInfusionPeriod] != dct[FieldNames.OsDurationInfusionPeriod]) {
                                    let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                                    let iMsgBoxRole: iMessageBox = new iMessageBox();
                                    iMsgBoxRole.Title = "LORENZO";
                                    iMsgBoxRole.IconType = MessageBoxType.Information;
                                    iMsgBoxRole.Height = 160;
                                    iMsgBoxRole.Width = 340;
                                    iMsgBoxRole.Message = errorMessage;
                                    iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                                    iMsgBoxRole.Show();
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
            if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                if (objFormViewerDetails.BasicDetails.DupTitratedDoseVM != null && objFormViewerDetails.BasicDetails.DupTitratedDoseVM.GrdTitrated != null && objFormViewerDetails.BasicDetails.TitratedDoseDetails != null && objFormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated != null) {
                    this.GettitratedAmendFlag();
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.isTitratedRSNFORMOD == true) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableModificationcomments = true;
                        this.oResolveItem.IsReasonForModificationVisible = Visibility.Visible;
                    }
                }
            }
            let oTempStartDttm: DateTime= objFormViewerDetails.BasicDetails.StartDTTM.DateTime.Add(objFormViewerDetails.BasicDetails.StartPrescriptionTime.TimeOfDay);
            if (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && objFormViewerDetails.BasicDetails.RouteChangeAmendStartDTM) {
                this.oTempCurrDttm = oTempStartDttm;
            }
            else {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    this.oTempCurrDttm = this.oResolveItem.FormViewerDetails.BasicDetails.FrmViewloadCurrentDTTM;
                }
            }
            let sDoseType: string = objFormViewerDetails.BasicDetails.DoseType != null ? objFormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            let idtpStartDate: iDateTimePicker ;
            if(this.frmViewBasic)
                idtpStartDate = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker);
            if (objFormViewerDetails.BasicDetails.InfusionDetails != null && objFormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno > 1) {

            }
            else if (idtpStartDate != null && this.oResolveItem != null && objFormViewerDetails != null && DateTime.NotEquals(oTempStartDttm,DateTime.MinValue) && objFormViewerDetails.BasicDetails != null && String.Equals(this.oResolveItem.SourcePrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && this.oResolveItem.ActionCode == ActivityTypes.Amend && objFormViewerDetails.BasicDetails.lstAmendedFlds != null && (objFormViewerDetails.BasicDetails.lstAmendedFlds.Contains("StartDTTM") || objFormViewerDetails.BasicDetails.lstAmendedFlds.Contains("StartPrescriptionTime")) && !IsItemASequentialChild) {
                if (DateTime.NotEquals(oTempStartDttm, objFormViewerDetails.BasicDetails.OrginalStartDTTM) && DateTime.LessThan(oTempStartDttm, this.oTempCurrDttm) && this.oResolveItem.OperationMode == null && (!String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase))) {
                    this.oResolveItem.FocusControl = "dtpStartDate";
                    this.objMsg.Message = Resource.MedicationForm.ValidateStartDateTime;
                    this.objMsg.Show();
                    return false;
                }
                else if (DateTime.NotEquals(oTempStartDttm.Date, objFormViewerDetails.BasicDetails.OrginalStartDTTM.Date) && DateTime.LessThan(oTempStartDttm.Date, this.oTempCurrDttm.Date) && this.oResolveItem.OperationMode == null && (String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase))) {
                    this.oResolveItem.FocusControl = "dtpStartDate";
                    this.objMsg.Message = Resource.MedicationForm.ValidateStartDate;
                    this.objMsg.Show();
                    return false;
                }
                else if (String.Equals(this.oResolveItem.OperationMode, "N", StringComparison.OrdinalIgnoreCase) && DateTime.LessThan(oTempStartDttm, this.oTempCurrDttm) && (!String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase))) {
                    let TmpAmendOriginalstartDTTM: DateTime= objFormViewerDetails.BasicDetails.AmendOrginalStartDTTM.DateTime.Add(objFormViewerDetails.BasicDetails.StartPrescriptionTime.TimeOfDay);
                    if (DateTime.NotEquals(oTempStartDttm, TmpAmendOriginalstartDTTM)) {
                        this.oResolveItem.FocusControl = "dtpStartDate";
                        this.objMsg.Message = Resource.MedicationForm.ValidateStartDateTime;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (String.Equals(this.oResolveItem.OperationMode, "N", StringComparison.OrdinalIgnoreCase) && DateTime.LessThan(oTempStartDttm.Date, this.oTempCurrDttm.Date) && (String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase))) {
                    let TmpAmendOriginalstartDTTM: DateTime= objFormViewerDetails.BasicDetails.AmendOrginalStartDTTM.DateTime.Add(objFormViewerDetails.BasicDetails.StartPrescriptionTime.TimeOfDay);
                    if (DateTime.NotEquals(oTempStartDttm.Date, TmpAmendOriginalstartDTTM.Date)) {
                        this.oResolveItem.FocusControl = "dtpStartDate";
                        this.objMsg.Message = Resource.MedicationForm.ValidateStartDate;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            let dDose: number;
            Number.TryParse(objFormViewerDetails.BasicDetails.Dose, (o) => {dDose=o});
            if (String.Equals(objFormViewerDetails.BasicDetails.IdentifyingType, CConstants.NONCATALOGUEITEM, StringComparison.OrdinalIgnoreCase) || String.Equals(objFormViewerDetails.BasicDetails.IdentifyingType, CConstants.Precatalog, StringComparison.OrdinalIgnoreCase)) {
                if (!this.oResolveItem.CheckNonCatalogueItemDetails(this.objMsg)) {
                    return false;
                }
            }
            let blInfusion: boolean = false;
            if (PatientContext.IsINFUSIONON && objFormViewerDetails.BasicDetails.Route != null && objFormViewerDetails.BasicDetails.Route.Tag != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Route.Tag.ToString()) && String.Compare(objFormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0)
                blInfusion = PatientContext.IsINFUSIONON;
            if (objFormViewerDetails.BHasFormViewParams && !blInfusion) {
                if (!this.oResolveItem.CheckDynamicFormMandatoryDynamicForm(this.objMsg)) {
                    return false;
                }
                if (!this.PrescriptionTimeValidate()) {
                    return false;
                }
                if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterVisible == Visibility.Visible) {
                    if (!this.oResolveItem.ValidateReview()) {
                        return false;
                    }
                    else if (!this.oResolveItem.CheckReviewAfterWithDuration()) {
                        return false;
                    }
                    else if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) && !this.oResolveItem.ValidateStopDate()) {
                        return false;
                    }
                }
                if (this.oResolveItem.IsReasonForMedicationClerkModifyVisible == Visibility.Visible && objFormViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify && (objFormViewerDetails.BasicDetails.MedClerkModifyReason == null || String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.MedClerkModifyReason.Value))) {
                    this.oResolveItem.FocusControl = "cboModClerkReason";
                    this.objMsg.Message = Resource.MedicationForm.ManMedClerkModReason;
                    this.objMsg.Show();
                    return false;
                }
                let dLDose: number;
                Number.TryParse(objFormViewerDetails.BasicDetails.Dose,(o) => {dLDose=o});
                let dUDose: number;
                Number.TryParse(objFormViewerDetails.BasicDetails.UpperDose, (o) => {dUDose=o});
                if (objFormViewerDetails.BasicDetails.DoseType != null && String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.CurrentCultureIgnoreCase)) {
                    let llblDoseUOM: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDoseUOM"), iLabel);
                    if (llblDoseUOM != null && llblDoseUOM.Mandatory) {
                        this.IsDoseUOMMand = true;
                    }
                }
                if (objFormViewerDetails.BasicDetails.IsenableDose && objFormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Visible && ((objFormViewerDetails.BasicControls != null && objFormViewerDetails.BasicControls.Contains(CConstants.CONST_DOSE)) || (objFormViewerDetails.AdditionalControls != null && objFormViewerDetails.AdditionalControls.Contains(CConstants.CONST_DOSE)))) {
                    if (String.Equals(sDoseType, DoseTypeCode.NORMAL, StringComparison.OrdinalIgnoreCase) && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && (objFormViewerDetails.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.DoseUOM.Value))) {
                        this.oResolveItem.FocusControl = "txtLowerDose";
                        this.objMsg.Message = "Dose cannot be blank.";
                        this.objMsg.Show();
                        return false;
                    }
                    else if (String.Equals(sDoseType, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose)) {
                        this.oResolveItem.FocusControl = "txtLowerDose";
                        this.objMsg.Message = Resource.MedicationForm.FromDose_Empty;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (String.Equals(sDoseType, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && (objFormViewerDetails.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.DoseUOM.Value))) {
                        this.oResolveItem.FocusControl = "txtLowerDose";
                        this.objMsg.Message = Resource.MedicationForm.ValidateFromDose;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (String.Equals(sDoseType, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && dLDose == dUDose) {
                        this.oResolveItem.FocusControl = "txtUpperDose";
                        this.objMsg.Message = Resource.MedicationForm.ValidateSameDoseVal;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (String.Equals(sDoseType, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && dUDose > 0 && dLDose > dUDose) {
                        this.oResolveItem.FocusControl = "txtLowerDose";
                        this.objMsg.Message = Resource.MedicationForm.ValUpplessthanLower;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && (objFormViewerDetails.BasicDetails.DoseUOM == null || String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.DoseUOM.Value))) {
                        this.oResolveItem.FocusControl = "cboUOM";
                        this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (objFormViewerDetails.BasicDetails.DoseType != null && String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.CurrentCultureIgnoreCase) && objFormViewerDetails.BasicDetails.IsenableDoseUOM && objFormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Visible && PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration) {
                    let _TitratedDoseValidationResult: boolean = true;
                    _TitratedDoseValidationResult = this.ValidationForTitratedDoses(_TitratedDoseValidationResult);
                    if (!_TitratedDoseValidationResult) {
                        return _TitratedDoseValidationResult;
                    }
                }
                if (objFormViewerDetails.BasicDetails.IsEnableInterBwtInstalValue || objFormViewerDetails.BasicDetails.IsEnableInterBwtInstalUoM) {
                    if ((objFormViewerDetails.BasicDetails.IntervalBetweenInstallment == null || (objFormViewerDetails.BasicDetails.IntervalBetweenInstallment != null && objFormViewerDetails.BasicDetails.IntervalBetweenInstallment.Value <= 0)) && (objFormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM.DisplayText))) {
                        this.oResolveItem.FocusControl = "udnIntervalInst";
                        this.objMsg.Message = Resource.MedicationForm.ManIntbwInst;
                        this.objMsg.Show();
                        return false;
                    }
                    else if ((objFormViewerDetails.BasicDetails.IntervalBetweenInstallment != null && objFormViewerDetails.BasicDetails.IntervalBetweenInstallment.Value > 0) && objFormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM == null || (objFormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM != null && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM.DisplayText))) {
                        this.oResolveItem.FocusControl = "cboIntervalInst";
                        this.objMsg.Message = Resource.MedicationForm.ManIntbwInstUOM;
                        this.objMsg.Show();
                        return false;
                    }
                }
                if (this.IsDoseValueIsZero(dDose))
                    return false;
                if (this.IsDoseSafety(dDose))
                    return false;
                    //Revisit Required
                if (!this.Techvalidatevalidation())
                    return false;
                if (this.ValidateSteppedDoseDetails() == false) {
                    return false;
                }
                if (this.ValidateMandatoryforStepedDose() == false) {
                    return false;
                }
                if (!this.CheckDurationEmpty()) {
                    return false;
                }
                if (this.ValidateDeactiveAttributes()) {
                    if (this.ValidateSteppedDoseDetails()) {
                        if (!this.ValidateConditionalDoseDetails()) {
                            return false;
                        }
                    }
                }
                if (!this.ValidateStepDose_UpdateStopDTTM()) {
                    return false;
                }
                if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                    this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                    this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                    this.objMsg.Show();
                    return false;
                }
                if (!this.IsTechValMandatory()) {
                    this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                    this.oResolveItem.FocusControl = "TechValMandatory_ValidateMsg";
                    this.objMsg.Show();
                    return false;
                }
                if (this.oResolveItem.IsReasonForModificationVisible == Visibility.Visible && objFormViewerDetails.BasicDetails.IsenableRSNFORMOD && objFormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD && (objFormViewerDetails.BasicDetails.ReasonforModification == null || String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.ReasonforModification.DisplayText) || objFormViewerDetails.BasicDetails.ReasonforModification.DisplayText == "Select reason")) {
                    this.oResolveItem.CheckRsnforModification();
                    return false;
                }
                if (!this.ValidateAdminTimes()) {
                    this.objMsg.Message = Resource.Infusion.RecAdminAdministrationTime_Msg;
                    this.oResolveItem.FocusControl = "";
                    this.objMsg.Show();
                    return false;
                }
                if (!this.showduplicate()) {
                    return false;
                }
                if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase)) {
                    if (!this.ValidateAdminTimesDaysOfWeek())
                        return false;
                    if (PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && this.IsNextAdminTimeIsTomorrow())
                        return false;
                }
                else if (this.oResolveItem.IsClinicallyVerifyEnable && this.oResolveItem.IsClinicallyVerifyCommentsMandatory && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.VerificationComments)) {
                    if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.OrdinalIgnoreCase)) {
                        this.objMsg.Message = Resource.MedicationForm.AuthoriserCommentsMand;
                        this.oResolveItem.FocusControl = "txtVerificationComments";
                        this.objMsg.Show();
                        return false;
                    }
                }
                if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && !String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase)) {
                    if (!this.ValidateDaysOfWeek()) {
                        return false;
                    }
                }
                if (!this.ValidFollowUpStartDate()) {
                    return false;
                }
                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && !String.Equals(PatientContext.ClerkFormViewDefaultBehavior, ClerkFormViewDeftBehaviour.LaunchFormMandatory) && (objFormViewerDetails.BasicDetails.Route != null && (objFormViewerDetails.BasicDetails.Route.Tag == null || objFormViewerDetails.BasicDetails.Route.Tag.ToString() == "0")) && objFormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Frequency")) {
                    if (!this.CheckAmendFreqValidation()) {
                        return false;
                    }
                }
                else if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && !String.Equals(PatientContext.ClerkFormViewDefaultBehavior, ClerkFormViewDeftBehaviour.LaunchFormMandatory) && (objFormViewerDetails.BasicDetails.Route != null && (objFormViewerDetails.BasicDetails.Route.Tag == null || objFormViewerDetails.BasicDetails.Route.Tag.ToString() == "1")) && objFormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Frequency") && objFormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0) {
                    if (!this.InfAmendFreqValidation()) {
                        return false;
                    }
                }
                if (!this.CheckSubSequentialRoutechanged(this.objMsg)) {
                    return false;
                }
                //Revisit Required
                
                if (this.frmRecordAdmin != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {
                    
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited) {
                            chkNoWitness = ObjectHelper.CreateType<iCheckBox>((ObjectHelper.CreateType<UserControl>(this.oRecordAdminTab.Content, UserControl)).FindName("chkNoWitness"), iCheckBox);
                            sfsWitnessedby = ObjectHelper.CreateType<iSFS>((ObjectHelper.CreateType<UserControl>(this.oRecordAdminTab.Content, UserControl)).FindName("sfsWitnessedby"), iSFS);
                        }
                        else {
                            chkNoWitness = this.ProxychkNoWitness;
                            sfsWitnessedby = this.ProxysfsWitnessedby;
                        }
                    }
                    else
                    {
                        chkNoWitness = this.ProxychkNoWitness;
                        sfsWitnessedby = this.ProxysfsWitnessedby;
                    }              

                    if (!this.CheckAdministeredby(sfsWitnessedby, chkNoWitness))
                        return false;
                    if (objFormViewerDetails.BasicDetails != null && objFormViewerDetails.BasicDetails.RecordAdmin != null) {
                        if (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                            this.oResolveItem.FocusControl = "txtAdminDose";
                            this.objMsg.Message = Resource.MedicationForm.ConditionalDoseModifyMsg;
                            this.objMsg.Show();
                            return false;
                        }
                        let dDose1: number;
                        Number.TryParse(objFormViewerDetails.BasicDetails.RecordAdmin.Dose, (o) => {dDose1=o});
                        if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) && dDose1 < 0.001 && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                            this.oResolveItem.FocusControl = "txtAdminDose";
                            this.objMsg.Message = "Dose value cannot be zero or empty.";
                            this.objMsg.Show();
                            return false;
                        }
                        if (objFormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM == null && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                            this.oResolveItem.FocusControl = "cboDoseUoMValue";
                            this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                            this.objMsg.Show();
                            return false;
                        }
                        if (objFormViewerDetails.BasicDetails.Infusions && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && objFormViewerDetails.BasicDetails.RecordAdmin != null && (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) || Convert.ToDecimal(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) <= 0)) {
                            this.oResolveItem.FocusControl = "txtAdminDose";
                            this.objMsg.Message = Resource.MedicationForm.ManDoseAdministered;
                            this.objMsg.Show();
                            return false;
                        }
                        if (objFormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM == null && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                            this.oResolveItem.FocusControl = "cboDoseUoMValue";
                            this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                            this.objMsg.Show();
                            return false;
                        }
                    }
                }
                
                if (!this.ValidateQuantity())
                    return false;
                if (this.frmViewAdditional != null) {
                // this.udReviewafter = ObjectHelper.CreateType<iUpDownBox>(this.frmViewAdditional.FindName("udReviewafter"), iUpDownBox);
                // this.cboreviewAfterUOM = ObjectHelper.CreateType<iComboBox>(this.frmViewAdditional.FindName("cboreviewAfterUOM"), iComboBox);
                // this.lblReviewafter = ObjectHelper.CreateType<iLabel>(this.frmViewAdditional.FindName("lblReviewafter"), iLabel);
                    if (this.udReviewafter != null && this.cboreviewAfterUOM != null && this.lblReviewafter != null && !this.oResolveItem.ReviewAfterMandatory()) {
                        return false;
                    }
                }
                
                if (!this.CheckIfOmittedSlotExists()) {
                    return false;
                }
                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && !this.ValidateOneSlotAdminTimeInAmend()) {
                    return false;
                }
                return true;
            }
            else if (!objFormViewerDetails.BHasFormViewParams && (String.Equals(this.oResolveItem.ItemMainType, "CC_DRUG", StringComparison.OrdinalIgnoreCase) || String.Equals(objFormViewerDetails.BasicDetails.IdentifyingType, CConstants.NONCATALOGUEITEM, StringComparison.OrdinalIgnoreCase) || String.Equals(objFormViewerDetails.BasicDetails.IdentifyingType, CConstants.Precatalog, StringComparison.OrdinalIgnoreCase))) {
                let dLDose: number;
                Number.TryParse(this.oResolveItem.FormViewerDetails.BasicDetails.Dose, (o) => {dLDose=o});
                let dUDose: number;
                Number.TryParse(this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose, (o) => {dUDose=o});
                switch (PatientContext.PrescriptionType) {
                    case PrescriptionTypes.Clerking:
                        if (this.oResolveItem != null && objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null) {
                            if (objFormViewerDetails.BasicDetails.Infusions) {
                                if (!this.BoosterDose())
                                    break;
                                if (!this.BoosterDoseUOM())
                                    break;
                            }
                            if (objFormViewerDetails.BasicDetails.DoseType != null && String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && (dLDose == dUDose) && dLDose != 0) {
                                this.oResolveItem.FocusControl = "txtUpperDose";
                                this.objMsg.Message = Resource.MedicationForm.ValidateSameDoseVal;
                                this.objMsg.Show();
                                break;
                            }
                            else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && (objFormViewerDetails.BasicDetails.DoseUOM == null || String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.DoseUOM.Value))) {
                                this.oResolveItem.FocusControl = "cboUOM";
                                this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                                this.objMsg.Show();
                                break;
                            }
                            else if (objFormViewerDetails.BasicDetails.DoseType != null && String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.UpperDose) && (objFormViewerDetails.BasicDetails.DoseUOM == null || String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.DoseUOM.Value))) {
                                this.oResolveItem.FocusControl = "cboUOM";
                                this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                                this.objMsg.Show();
                                break;
                            }
                            else if (objFormViewerDetails.BasicDetails.DoseType != null && String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && (objFormViewerDetails.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.DoseUOM.Value))) {
                                this.oResolveItem.FocusControl = "txtLowerDose";
                                this.objMsg.Message = Resource.MedicationForm.FromDose_Empty;
                                this.objMsg.Show();
                                break;
                            }
                            else if (objFormViewerDetails.BasicDetails.DoseType != null && String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.UpperDose) && (objFormViewerDetails.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.DoseUOM.Value))) {
                                this.oResolveItem.FocusControl = "txtUpperDose";
                                this.objMsg.Message = Resource.MedicationForm.txtUpperBlankMsg;
                                this.objMsg.Show();
                                break;
                            }
                            else if (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && (objFormViewerDetails.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.DoseUOM.Value)) && objFormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Visible && objFormViewerDetails.BasicDetails.IsAdminMethodVisible == Visibility.Collapsed && (objFormViewerDetails.BasicDetails.DoseType != null && !String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.OrdinalIgnoreCase))) {
                                this.oResolveItem.FocusControl = "txtLowerDose";
                                this.objMsg.Message = Resource.MedicationForm.ValidateDose;
                                this.objMsg.Show();
                                break;
                            }
                            else if (objFormViewerDetails.BasicDetails.DoseType != null && String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && (dLDose > dUDose) && dUDose != 0) {
                                this.oResolveItem.FocusControl = "txtLowerDose";
                                this.objMsg.Message = Resource.MedicationForm.ValUpplessthanLower;
                                this.objMsg.Show();
                                break;
                            }
                            else if (objFormViewerDetails.BasicDetails.Completedate && DateTime.GreaterThan(objFormViewerDetails.BasicDetails.CompleteStartDTTM.Date, CommonBB.GetServerDateTime().Date)) {
                                this.oResolveItem.FocusControl = "dtpStartDate";
                                this.objMsg.Message = Resource.MedicationForm.ValidateDate;
                                this.objMsg.Show();
                                break;
                            }
                            else if (!this.CheckQuantity())
                                break;
                            else if (!this.CheckDurationEmpty())
                                break;
                            else if (objFormViewerDetails.BasicDetails.MedicationClerkingSource != null && objFormViewerDetails.BasicDetails.MedicationClerkingSource.Select(item => item.IsSelected).Count() <= 0) {
                                this.oResolveItem.FocusControl = "lblMedicationClerk";
                                this.objMsg.Message = Resource.MedicationForm.ManMedClerkSource;
                                this.objMsg.Show();
                                break;
                            }
                            else if (objFormViewerDetails.BasicDetails.Partialdate && objFormViewerDetails.BasicDetails.IsenableMonthYear && objFormViewerDetails.BasicDetails.Month != null && objFormViewerDetails.BasicDetails.Year < 1900) {
                                this.oResolveItem.FocusControl = "udYear";
                                this.objMsg.Message = Resource.MedicationForm.ManYear;
                                this.objMsg.Show();
                                break;
                            }
                            else if (objFormViewerDetails.BasicDetails.Partialdate) {
                                let MonthNo: number = 1;
                                if (objFormViewerDetails.BasicDetails.Month != null) {
                                    MonthNo = Convert.ToInt32(Enum.Parse(typeof(EnumVals), objFormViewerDetails.BasicDetails.Month.Value, true));
                                }
                                let YearNo: number = objFormViewerDetails.BasicDetails.Year > 0 ? Convert.ToInt32(objFormViewerDetails.BasicDetails.Year) : 1;
                                if (DateTime.GreaterThan(new DateTime(YearNo, MonthNo, 1), CommonBB.GetServerDateTime().Date)) {
                                    this.oResolveItem.FocusControl = "udYear";
                                    this.objMsg.Message = Resource.MedicationForm.ValidateDate;
                                    this.objMsg.Show();
                                    break;
                                }
                            }
                            if (this.oResolveItem.IsClinicallyVerifyEnable && this.oResolveItem.IsClinicallyVerifyCommentsMandatory && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.VerificationComments)) {
                                if (String.Compare(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode, StringComparison.InvariantCultureIgnoreCase) == 0) {
                                    this.objMsg.Message = Resource.MedicationForm.VerificationCommentsMand;
                                }
                                else if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.OrdinalIgnoreCase)) {
                                    this.objMsg.Message = Resource.MedicationForm.AuthoriserCommentsMand;
                                }
                                this.oResolveItem.FocusControl = "txtVerificationComments";
                                this.objMsg.Show();
                                break;
                            }
                            if (!this.oResolveItem.CheckRsnforModification(this.objMsg)) {
                                break;
                            }
                            if (this.ValidateSteppedDoseDetails() == false) {
                                break;
                            }
                            if (!this.ValidateStepDose_UpdateStopDTTM()) {
                                return false;
                            }
                            if (this.oResolveItem.IsClinicallyVerifyEnable && this.oResolveItem.IsClinicallyVerifyCommentsMandatory && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.VerificationComments)) {
                                if (String.Compare(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode, StringComparison.InvariantCultureIgnoreCase) == 0) {
                                    this.objMsg.Message = Resource.MedicationForm.VerificationCommentsMand;
                                }
                                else if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.OrdinalIgnoreCase)) {
                                    this.objMsg.Message = Resource.MedicationForm.AuthoriserCommentsMand;
                                }
                                this.oResolveItem.FocusControl = "txtVerificationComments";
                                this.objMsg.Show();
                                break;
                            }
                            else if (objFormViewerDetails.BasicDetails.Route != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Route.DisplayText) && objFormViewerDetails.BasicDetails.RouteRecorded != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RouteRecorded.DisplayText) && String.Equals(objFormViewerDetails.BasicDetails.Route.Value, objFormViewerDetails.BasicDetails.RouteRecorded.Value, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.IsProhibitedRoute) {
                                this.oResolveItem.CheckRoute();
                                break;
                            }
                            //Revisit Required
                            if (!this.Techvalidatevalidation())
                                break;

                            if (!this.IsTechValMandatory()) {
                                this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                this.oResolveItem.FocusControl = "TechValMandatory_ValidateMsg";
                                this.objMsg.Show();
                                break;
                            }
                            if ((objFormViewerDetails.BasicDetails.IsValidateDose) && objFormViewerDetails.BasicDetails.DoseType != null && (String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.NORMAL, StringComparison.OrdinalIgnoreCase) || String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.OrdinalIgnoreCase)) && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && (dDose < 1)) {
                                this.oResolveItem.FocusControl = "txtLowerDose";
                                let oMsgBox: iMessageBox = new iMessageBox();
                                oMsgBox.Title = "Lorenzo - Manage prescription";
                                oMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_MessageBoxClose(s,e); } ;
                                if (dDose == 0) {
                                    oMsgBox.Message = Resource.MedicationForm.ValidateDose;
                                    oMsgBox.MessageButton = MessageBoxButton.OK;
                                    oMsgBox.Show();
                                    break;
                                }
                                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value != InfusionTypesCode.PCA) {
                                    if (dDose < 1 && !this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateDoseSafty) {
                                        oMsgBox.Message = "For safety, avoid entering a dose value of less than 1, change unit of measure if necessary. Do you wish to continue?";
                                        oMsgBox.MessageButton = MessageBoxButton.YesNo;
                                        oMsgBox.Show();
                                        break;
                                    }
                                }
                            }
                            if (this.oResolveItem.objMsgBox == null) {
                                this.oResolveItem.objMsgBox = new iMessageBox();
                                this.oResolveItem.objMsgBox.MessageBoxClose  = (s,e) => { this.objMsg_MessageBoxClose(s,e); } ;
                            }
                            if (PatientContext.IsINFUSIONON && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_GAS)) {
                                if (!this.oResolveItem.CheckFlowrate()) {
                                    return false;
                                }
                            }
                            if (objFormViewerDetails.BasicDetails.InfusionDetails != null) {
                                if (!this.CheckSaturationRange())
                                    break;
                            }
                            if (objFormViewerDetails.BasicDetails.Infusions) {
                                if (objFormViewerDetails.BasicDetails.InfusionDetails != null) {
                                    if (objFormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible == Visibility.Visible) {
                                        if (!this.CheckVolume())
                                            break;
                                        if (!this.CheckVolumeUOM())
                                            break;
                                    }
                                    if (objFormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible == Visibility.Visible) {
                                        if (!this.InfConcentration())
                                            break;
                                    }
                                }
                                if (!this.InfusionPeriod())
                                    break;
                                if (!this.InfusionPeriodUOM())
                                    break;
                                if (!this.InfusionRate())
                                    break;
                                if (!this.CheckDurationEmpty())
                                    break;
                                if (objFormViewerDetails.BasicDetails.InfusionType != null && String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA, StringComparison.OrdinalIgnoreCase)) {
                                    if (!this.CheckLockoutPeriod())
                                        break;
                                    if (this.ISBoosterValueisNegative())
                                        break;
                                    if (!this.CheckBolus())
                                        break;
                                    if (this.IsDoseSafety(dDose))
                                        break;
                                    if (this.ISBolusValueisNegative())
                                        break;
                                }
                                if (this.ISBoosterValueisNegative())
                                    break;
                                if (this.IsDoseSafety(dDose))
                                    break;
                                if ((objFormViewerDetails.BasicDetails.InfusionType != null && objFormViewerDetails.BasicDetails.DoseType != null && (String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.OrdinalIgnoreCase) || String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME, StringComparison.OrdinalIgnoreCase) || String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID, StringComparison.OrdinalIgnoreCase) || String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase)) && ((String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.OrdinalIgnoreCase)) || (String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase))))) {
                                    if (!this.CheckMonitoringPeriod())
                                        break;
                                }
                                if (objFormViewerDetails.BasicDetails.DoseType != null && String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.OrdinalIgnoreCase) && objFormViewerDetails.BasicDetails.InfusionType != null && String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) && objFormViewerDetails.BasicDetails.InfusionDetails.InfMonitoringperiodVisi == Visibility.Visible) {
                                    if (!this.ValidateMonitoringPeriod())
                                        break;
                                }
                                if (!this.ValidateDeactiveAttributes())
                                    break;
                                if (!this.ValidateSteppedDoseDetails())
                                    break;
                                if (!this.ValidateConditionalDoseDetails())
                                    break;
                                if (!this.ValidateSteppedDoseInfusionPeriod())
                                    break;
                                if (!this.oResolveItem.CheckDuration()) {
                                    break;
                                }
                                if (!this.IsType1()) {
                                    if (this.oResolveItem.FormViewerDetails.ConflictDetails != null) {
                                        this.objMsg.Message = "The " + this.oResolveItem.FormViewerDetails.ConflictDetails[0].DrugName + " cannot be prescribed. Please remove item to continue.";
                                        this.objMsg.Show();
                                        break;
                                    }
                                }
                                else if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                                    this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                    this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                    this.objMsg.Show();
                                    break;
                                }
                                if (!this.IsInfCheckedAndPass) {
                                    if (!this.IsInfusionRateUOMChanged())
                                        break;
                                }
                                if (sDoseType == DoseTypeCode.TITRATED) {
                                    let _TitratedDoseValidationResult: boolean = true;
                                    _TitratedDoseValidationResult = this.ValidationForTitratedDoses(_TitratedDoseValidationResult);
                                    if (!_TitratedDoseValidationResult) {
                                        return _TitratedDoseValidationResult;
                                    }
                                }
                                if (!this.CheckBloodProductMsg())
                                    break;
                                if (!this.CheckSubSequentialRoutechanged(this.objMsg))
                                    break;
                                return true;
                            }
                            else {
                                if (sDoseType == DoseTypeCode.TITRATED) {
                                    let _TitratedDoseValidationResult: boolean = true;
                                    _TitratedDoseValidationResult = this.ValidationForTitratedDoses(_TitratedDoseValidationResult);
                                    if (!_TitratedDoseValidationResult) {
                                        return _TitratedDoseValidationResult;
                                    }
                                }
                                if (this.ValidateDeactiveAttributes()) {
                                    if (this.ValidateSteppedDoseDetails()) {
                                        if (this.ValidateConditionalDoseDetails()) {
                                            if (!this.IsType1()) {
                                                if (this.oResolveItem.FormViewerDetails.ConflictDetails != null) {
                                                    this.objMsg.Message = "The " + this.oResolveItem.FormViewerDetails.ConflictDetails[0].DrugName + " cannot be prescribed. Please remove item to continue.";
                                                    this.objMsg.Show();
                                                    break;
                                                }
                                            }
                                            else if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                                                this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                                this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                                this.objMsg.Show();
                                                break;
                                            }
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case PrescriptionTypes.Leave:
                    case PrescriptionTypes.Outpatient:
                    case PrescriptionTypes.Discharge:
                    case PrescriptionTypes.ForAdministration:
                        if (this.oResolveItem != null && objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null) {
                            //Revisit Required
                            if (!this.Techvalidatevalidation())
                                break;
                            if (this.oResolveItem.CheckSequentialAA()) {
                                return false;
                            }
                            if (this.oResolveItem.CheckBasicMandatory(this.objMsg)) {
                                if (!this.PrescriptionTimeValidate()) {
                                    return false;
                                }
                                let IsContInfType: boolean = (PatientContext.IsINFUSIONON && objFormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.InfusionType.Value) && (String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS) || String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.SINGLEDOSEVOLUME) || String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.FLUID))) ? true : false;
                                if (!IsContInfType && objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && (objFormViewerDetails.BasicDetails.Frequency != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Frequency.Value)) && objFormViewerDetails.BasicDetails.AdminTimes != null) {
                                    if (!this.ValidateAdminTimes()) {
                                        if (this.grdAdminTimes != null) {
                                            this.objMsg.Message = Resource.Infusion.RecAdminAdministrationTime_Msg;
                                            this.oResolveItem.FocusControl = "";
                                            this.objMsg.Show();
                                            break;
                                        }
                                        else {
                                            this.objMsg.Message = Resource.Infusion.RecAdminAdministrationTime_Msg;
                                            this.oResolveItem.FocusControl = "grdAdminTimes";
                                            this.objMsg.Show();
                                            break;
                                        }
                                    }
                                }
                                if (!this.showduplicate()) {
                                    return false;
                                }
                                if (!this.ValidateAdminTimesDaysOfWeek())
                                    break;
                                if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && !String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase)) {
                                    if (!this.ValidateDaysOfWeek()) {
                                        return false;
                                    }
                                }
                                if (PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && this.IsNextAdminTimeIsTomorrow())
                                    break;
                                else if (!this.IsType1()) {
                                    this.objMsg.Message = "The " + objFormViewerDetails.ConflictDetails[0].DrugName + " cannot be prescribed. Please remove item to continue.";
                                    this.objMsg.Show();
                                    break;
                                }
                                if (this.ValidateSteppedDoseDetails() == false || this.IsSteppedDoseRegimeExists() == false) {
                                    break;
                                }
                                if (this.IsDoseValueIsZero(dDose)) {
                                    break;
                                }
                                if (objFormViewerDetails.BasicDetails.Infusions) {
                                    if (objFormViewerDetails.BasicDetails.InfusionDetails != null) {
                                        if (objFormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible == Visibility.Visible) {
                                            if (!this.CheckVolume())
                                                break;
                                            if (!this.CheckVolumeUOM())
                                                break;
                                        }
                                        if (objFormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible == Visibility.Visible) {
                                            if (!this.InfConcentration())
                                                break;
                                        }
                                        if (objFormViewerDetails.BasicDetails.InfusionDetails.InfBoosterDoseVisi == Visibility.Visible) {
                                            if (!this.BoosterDose())
                                                break;
                                            if (!this.BoosterDoseUOM())
                                                break;
                                        }
                                    }
                                    if (!this.InfusionPeriod())
                                        break;
                                    if (!this.InfusionPeriodUOM())
                                        break;
                                    if (!this.InfusionRate())
                                        break;
                                    if (objFormViewerDetails.BasicDetails.InfusionType != null && String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA, StringComparison.OrdinalIgnoreCase)) {
                                        if (!this.CheckBolus())
                                            break;
                                        if (!this.CheckLockoutPeriod())
                                            break;
                                    }
                                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL) == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME, StringComparison.CurrentCultureIgnoreCase) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID, StringComparison.CurrentCultureIgnoreCase) == 0) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfMonitoringperiodVisi == Visibility.Visible) {
                                        if (!this.ValidateMonitoringPeriod())
                                            break;
                                    }
                                    if ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.CONTINUOUS || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value == InfusionTypesCode.INTERMITTENT) && ((this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.CONDITIONAL) || (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value == DoseTypeCode.STEPPEDVARIABLE)))) {
                                        if (!this.CheckMonitoringPeriod())
                                            break;
                                    }
                                    if (!this.ValidateSteppedDoseInfusionPeriod())
                                        break;
                                    if (PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && !this.ValidateAdmintrationTime(this.oResolveItem))
                                        break;
                                }
                                if (this.oResolveItem.IsClinicallyVerifyEnable && this.oResolveItem.IsClinicallyVerifyCommentsMandatory && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.VerificationComments)) {
                                    if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.InvariantCultureIgnoreCase)) {
                                        this.objMsg.Message = Resource.MedicationForm.AuthoriserCommentsMand;
                                        this.oResolveItem.FocusControl = "txtVerificationComments";
                                        this.objMsg.Show();
                                        break;
                                    }
                                }
                                //Revisit Required
                                
                                if (objFormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {                                    
                                    let lblWitnessedBy: iLabel = null;     
                                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited) {
                                            lblWitnessedBy = ObjectHelper.CreateType<iLabel>((ObjectHelper.CreateType<UserControl>(this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content, UserControl)).FindName("lblWitnessedBy"), iLabel);
                                            chkNoWitness = ObjectHelper.CreateType<iCheckBox>((ObjectHelper.CreateType<UserControl>(this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content, UserControl)).FindName("chkNoWitness"), iCheckBox);
                                            sfsWitnessedby = ObjectHelper.CreateType<iSFS>((ObjectHelper.CreateType<UserControl>(this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content, UserControl)).FindName("sfsWitnessedby"), iSFS);
                                        }
                                        else {
                                            chkNoWitness = this.ProxychkNoWitness;
                                            sfsWitnessedby = this.ProxysfsWitnessedby;
                                            lblWitnessedBy = this.ProxylblWitnessedBy;
                                        }
                                    }
                                    else {
                                        chkNoWitness = this.ProxychkNoWitness;
                                        sfsWitnessedby = this.ProxysfsWitnessedby;
                                        lblWitnessedBy = this.ProxylblWitnessedBy;
                                    }
                                    
                                    if (objFormViewerDetails.BasicDetails.RecordAdmin != null) {
                                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME, StringComparison.CurrentCultureIgnoreCase) == 0 || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID, StringComparison.CurrentCultureIgnoreCase) == 0)) {
                                            if (!this.CheckRecAdminDose())
                                                break;
                                            if (!this.CheckInfusionRateRecAdmin())
                                                break;
                                            if (!this.CheckBagVolume())
                                                break;
                                            if (!this.CheckBagVolumeUOM())
                                                break;
                                            if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.itemSubType) && (String.Equals(objFormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.CurrentCultureIgnoreCase))) {
                                                if (!this.CheckBatchNumber())
                                                    break;
                                                if (!this.CheckExpiryDate())
                                                    break;
                                            }
                                            if (!this.CheckAdministeredDate())
                                                break;
                                            if (!this.CheckAdministeredDateTime())
                                                break;
                                            if (!this.CheckAdministeredby(sfsWitnessedby, chkNoWitness))
                                                break;
                                            if (!this.CheckWitnessby())
                                                break;
                                            if (!this.InfConcentrationRecAdmin())
                                                break;
                                            if (!this.InfusionPeriodRecAdmin())
                                                break;
                                        }
                                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA, StringComparison.CurrentCultureIgnoreCase) == 0)) {
                                            if (!this.CheckRecAdminBolus())
                                                break;
                                            if (!this.CheckBagVolume())
                                                break;
                                            if (!this.CheckBagVolumeUOM())
                                                break;
                                            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.CurrentCultureIgnoreCase) == 0)) {
                                                if (!this.CheckBatchNumber())
                                                    break;
                                                if (!this.CheckExpiryDate())
                                                    break;
                                            }
                                            if (!this.CheckAdministeredDate())
                                                break;
                                            if (!this.CheckAdministeredDateTime())
                                                break;
                                            if (!this.CheckAdministeredby(sfsWitnessedby, chkNoWitness))
                                                break;
                                            if (!this.CheckWitnessby())
                                                break;
                                            if (!this.InfConcentrationRecAdmin())
                                                break;
                                            if (!this.InfusionPeriodRecAdmin())
                                                break;
                                        }
                                        if (!this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.isBolusIntermittent && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0) && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Route.Tag.ToString() == "1") {
                                            if (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                                                this.oResolveItem.FocusControl = "txtAdminDose";
                                                this.objMsg.Message = Resource.MedicationForm.ConditionalDoseModifyMsg;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            let dDose1: number;
                                            Number.TryParse(objFormViewerDetails.BasicDetails.RecordAdmin.Dose, (o) => {dDose1=o});
                                            if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) && dDose1 < 0.001 && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                                                this.oResolveItem.FocusControl = "txtAdminDose";
                                                this.objMsg.Message = "Dose value cannot be zero or empty.";
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (objFormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM == null && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                                                this.oResolveItem.FocusControl = "cboDoseUoMValue";
                                                this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (objFormViewerDetails.BasicDetails.Infusions && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && objFormViewerDetails.BasicDetails.RecordAdmin != null && (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) || Convert.ToDecimal(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) <= 0)) {
                                                this.oResolveItem.FocusControl = "txtAdminDose";
                                                this.objMsg.Message = Resource.MedicationForm.ManDoseAdministered;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (objFormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM == null && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                                                this.oResolveItem.FocusControl = "cboDoseUoMValue";
                                                this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (!this.CheckRecAdminDose())
                                                break;
                                            if (!this.CheckInfusionRateRecAdmin())
                                                break;
                                            if (!this.CheckBagVolume())
                                                break;
                                            if (!this.CheckBagVolumeUOM())
                                                break;
                                            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.CurrentCultureIgnoreCase) == 0)) {
                                                if (!this.CheckBatchNumber())
                                                    break;
                                                if (!this.CheckExpiryDate())
                                                    break;
                                            }
                                            if (!this.CheckAdministeredDate())
                                                break;
                                            if (!this.CheckAdministeredDateTime())
                                                break;
                                            if (!this.CheckAdministeredby(sfsWitnessedby, chkNoWitness))
                                                break;
                                            if (!this.CheckWitnessby())
                                                break;
                                            if (!this.InfConcentrationRecAdmin())
                                                break;
                                            if (!this.InfusionPeriodRecAdmin())
                                                break;
                                        }
                                        else if (PatientContext.IsINFUSIONON && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.itemSubType) && String.Equals(objFormViewerDetails.BasicDetails.itemSubType, "CC_MEDGAS", StringComparison.CurrentCultureIgnoreCase)) {
                                            if (!this.CheckInfusionFlowrateRecAdmin())
                                                break;
                                            if (!this.CheckAdministeredDate())
                                                break;
                                            if (!this.CheckAdministeredDateTime())
                                                break;
                                            if (!this.CheckAdministeredby(sfsWitnessedby, chkNoWitness))
                                                break;
                                            if (!this.CheckWitnessby())
                                                break;
                                        }
                                        else {
                                            if (objFormViewerDetails.BasicDetails.DoseType != null && (String.Equals(objFormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.OrdinalIgnoreCase)) && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose)) {
                                                this.oResolveItem.FocusControl = "txtLowerDose";
                                                this.objMsg.Message = Resource.MedicationForm.ConditionalDoseModifyMsg;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                                                this.oResolveItem.FocusControl = "txtAdminDose";
                                                this.objMsg.Message = Resource.MedicationForm.ConditionalDoseModifyMsg;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            let dDose1: number;
                                            Number.TryParse(objFormViewerDetails.BasicDetails.RecordAdmin.Dose, (o) => {dDose1=o});
                                            if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) && dDose1 < 0.001 && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                                                this.oResolveItem.FocusControl = "txtAdminDose";
                                                this.objMsg.Message = "Dose value cannot be zero or empty.";
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (objFormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM == null && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                                                this.oResolveItem.FocusControl = "cboDoseUoMValue";
                                                this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (objFormViewerDetails.BasicDetails.Infusions && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Dose) && objFormViewerDetails.BasicDetails.RecordAdmin != null && (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) || Convert.ToDecimal(objFormViewerDetails.BasicDetails.RecordAdmin.Dose) <= 0)) {
                                                this.oResolveItem.FocusControl = "txtAdminDose";
                                                this.objMsg.Message = Resource.MedicationForm.ManDoseAdministered;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (objFormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM == null && objFormViewerDetails.BasicDetails.RecordAdmin.DoseMandatory) {
                                                this.oResolveItem.FocusControl = "cboDoseUoMValue";
                                                this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            let listselectedClistitem: ObservableCollection<CListItem> = null;
                                            if (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && objFormViewerDetails.BasicDetails.DefaultDetails != null) {
                                                if (objFormViewerDetails.BasicDetails.DefaultDetails.Routes != null && objFormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0) {
                                                    listselectedClistitem = new ObservableCollection<CListItem>();
                                                    objFormViewerDetails.BasicDetails.DefaultDetails.Routes.forEach( (selectedClistitem)=> {
                                                        if (selectedClistitem.IsSelected) {
                                                            listselectedClistitem.Add(ObjectHelper.CreateObject(new CListItem(), { DisplayText: selectedClistitem.DisplayText, Value: selectedClistitem.Value }));
                                                        }
                                                    });
                                                }
                                            }
                                            if (listselectedClistitem != null && listselectedClistitem.Count > 1 && objFormViewerDetails.BasicDetails.RecordAdmin != null && objFormViewerDetails.BasicDetails.RecordAdmin.Route == null) {
                                                this.oResolveItem.FocusControl = "cborecordAdminRoute";
                                                this.objMsg.Message = Resource.MedicationForm.ValidateRouteAdministered;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (objFormViewerDetails.BasicDetails.RecordAdmin.isBolusIntermittent && objFormViewerDetails.BasicDetails.InfusionDetails != null && objFormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.InfusionType.Value) && (String.Equals(objFormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase))) {
                                                if (objFormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.itemSubType) && (String.Equals(objFormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.CurrentCultureIgnoreCase))) {
                                                    if (!this.CheckBatchNumber())
                                                        break;
                                                    if (!this.CheckExpiryDate())
                                                        break;
                                                }
                                            }
                                            if (!this.CheckAdministeredDateTime())
                                                break;
                                            if (DateTime.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue)) {
                                                this.oResolveItem.FocusControl = "dtpAdminDate";
                                                this.objMsg.Message = Resource.MedicationForm.ManDateTimeGiven;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            else if (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && objFormViewerDetails.BasicDetails.RecordAdmin != null && objFormViewerDetails.BasicDetails.RecordAdmin.WitnessMandatory && (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.WitnessBy) && (chkNoWitness.IsChecked == false))) {
                                                this.oResolveItem.FocusControl = "sfsWitnessedby";
                                                this.objMsg.Message = Resource.MedicationForm.WitnessBy;
                                                this.objMsg.Tag = "WitnessBy";
                                                this.objMsg.Show(true);
                                                return false;
                                            }
                                            if (this.oResolveItem != null && objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && (String.Equals(Convert.ToString(this.oResolveItem.PrescriberDetails.OID), objFormViewerDetails.BasicDetails.RecordAdmin.WitnessByOID, StringComparison.OrdinalIgnoreCase)) && objFormViewerDetails.BasicDetails.RecordAdmin.WitnessMandatory) {
                                                this.objMsg.Title = "LORENZO";
                                                this.oResolveItem.FocusControl = "sfsWitnessedby";
                                                this.objMsg.Message = RecordAdmin.Witness_message;
                                                this.objMsg.MessageButton = MessageBoxButton.OK;
                                                this.objMsg.IconType = MessageBoxType.Information;
                                                this.objMsg.Width = 400;
                                                this.objMsg.Show();
                                                return false;
                                            }
                                            if (objFormViewerDetails.BasicDetails.RecordAdmin.WitnessMandatory && !objFormViewerDetails.BasicDetails.RecordAdmin.bAutRecSuccess)
                                                return false;
                                            if (objFormViewerDetails.BasicDetails.RecordAdmin.isBolusIntermittent) {
                                                if (!this.InfConcentrationRecAdmin())
                                                    break;
                                                if (!this.InfusionPeriodRecAdmin())
                                                    break;
                                            }
                                        }
                                    }
                                }
                                
                                if (!this.ValidFollowUpStartDate()) {
                                    return false;
                                }
                                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && !String.Equals(PatientContext.ClerkFormViewDefaultBehavior, ClerkFormViewDeftBehaviour.LaunchFormMandatory) && (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag == null || this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "0")) && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Frequency")) {
                                    if (!this.CheckAmendFreqValidation()) {
                                        return false;
                                    }
                                }
                                else if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && !String.Equals(PatientContext.ClerkFormViewDefaultBehavior, ClerkFormViewDeftBehaviour.LaunchFormMandatory) && (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag == null || this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "1")) && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Frequency") && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0) {
                                    if (!this.InfAmendFreqValidation()) {
                                        return false;
                                    }
                                }
                                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && ((this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsOxygen)) && this.oResolveItem.IsReasonForModificationVisible == Visibility.Visible && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD == true && this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD == true && (this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText) || this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText == "Select reason")) {
                                    this.oResolveItem.FocusControl = "cboRsnForMod";
                                    this.objMsg.Message = "Reason for modification cannot be blank.";
                                    this.objMsg.Show();
                                    return false;
                                }
                                if (!this.ValidateDeactiveAttributes())
                                    break;
                                if (!this.ValidateSteppedDoseDetails())
                                    break;
                                let isSteppedDose: boolean = (String.Compare(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) == 0);
                                if (!this.ValidateSteppedDoseForBlankDose(isSteppedDose))
                                    break;
                                if (!this.ValidateSteppedDoseForBlankDuration(isSteppedDose))
                                    break;
                                if (sDoseType == DoseTypeCode.TITRATED && !String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase)) {
                                    let _TitratedDoseValidationResult: boolean = true;
                                    _TitratedDoseValidationResult = this.ValidationForTitratedDoses(_TitratedDoseValidationResult);
                                    if (!_TitratedDoseValidationResult) {
                                        return _TitratedDoseValidationResult;
                                    }
                                }
                                if (!this.ValidateConditionalDoseDetails())
                                    break;
                                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsVisibleDuration == Visibility.Visible && !this.CheckDurationEmpty())
                                    break;
                                if (!this.ValidateQuantity())
                                    break;
                                if (this.ISBoosterValueisNegative())
                                    break;
                                if (this.IsDoseSafety(dDose))
                                    break;
                                if (this.ISBolusValueisNegative())
                                    break;
                                if (objFormViewerDetails.BasicDetails.Infusions) {
                                    if (!this.IsInfCheckedAndPass) {
                                        if (!this.IsInfusionRateUOMChanged())
                                            break;
                                    }
                                }
                                if (!this.ValidateStepDose_UpdateStopDTTM()) {
                                    return false;
                                }
                                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && !this.ValidateOneSlotAdminTimeInAmend()) {
                                    return false;
                                }
                                if (!this.CheckBloodProductMsg())
                                    break;
                                if (!this.CheckSubSequentialRoutechanged(this.objMsg))
                                    break;
                                if (!this.ValidateSequence())
                                    break;
                                if (!this.IsTechValMandatory()) {
                                    this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                    this.oResolveItem.FocusControl = "TechValMandatory_ValidateMsg";
                                    this.objMsg.Show();
                                    break;
                                }
                                if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                                    this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                                    this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                                    this.objMsg.Show();
                                    break;
                                }
                                if (!this.CheckIfOmittedSlotExists()) {
                                    return false;
                                }
                                return true;
                            }
                            else {
                                break;
                            }
                        }
                        break;
                }
            }
            else if (!objFormViewerDetails.BHasFormViewParams && String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase)) {
                if (this.oResolveItem.objMsgBox == null) {
                    this.oResolveItem.objMsgBox = new iMessageBox();
                    this.oResolveItem.objMsgBox.MessageBoxClose  = (s,e) => { this.objMsg_MessageBoxClose(s,e); } ;
                }
                if (PatientContext.IsINFUSIONON && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_GAS, StringComparison.InvariantCultureIgnoreCase)) {
                    if (!this.oResolveItem.CheckConcentration()) {
                        return false;
                    }
                }
                if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.CurrentCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.CurrentCultureIgnoreCase)) {
                    let CVwithInpat: boolean = false;
                    if( String.Compare(ContextInfo.MenuCode, "MED_CA_CLN_VRFY_SL_P2", StringComparison.CurrentCultureIgnoreCase) == 0 && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.CurrentCultureIgnoreCase) ) {
                        CVwithInpat = true;    
                    }
                    if ((this.oResolveItem.formViewerDetails.BasicDetails.IsMandatoryRSNFORMOD && !this.oResolveItem.IsSkipStartDateValidation) &&  //(this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder) &&
                        String.Compare(ContextInfo.MenuCode, "MN_MEDADMINISTRAT_P2", StringComparison.CurrentCultureIgnoreCase) != 0 && String.Compare(ContextInfo.MenuCode, "MN_MEDINPATSL_P2", StringComparison.CurrentCultureIgnoreCase) != 0 && String.Compare(ContextInfo.MenuCode, "CC_FOR_ADMIN", StringComparison.CurrentCultureIgnoreCase) != 0 
                        && !CVwithInpat
                        //&& ( String.Compare(ContextInfo.MenuCode, "MED_CA_CLN_VRFY_SL_P2", StringComparison.CurrentCultureIgnoreCase) == 0 && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.CurrentCultureIgnoreCase) ) 
                        && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && DateTime.LessThan(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date, CommonBB.GetServerDateTime().Date)) {
                        let dtCurrentDateTime: DateTime = FormviewerCommonData.ServerDateTime;

                        if (DateTime.NotEquals(oTempStartDttm, objFormViewerDetails.BasicDetails.OrginalStartDTTM) && DateTime.LessThan(oTempStartDttm, dtCurrentDateTime) )
                        {
                            this.oResolveItem.FocusControl = "dtpStartDate";
                            this.objMsg.Message = "Start date cannot be earlier than current date";
                            this.objMsg.Show();
                            return false;
                        }                     
                    }
                    else if (String.Compare(ContextInfo.MenuCode, "MN_MEDADMINISTRAT_P2", StringComparison.CurrentCultureIgnoreCase) == 0 && DateTime.LessThan(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date, PatientContext.EncounterStartDate.Date)) {
                        this.oResolveItem.FocusControl = "dtpStartDate";
                        this.objMsg.Message = "Start date cannot be earlier than encounter start date";
                        this.objMsg.Show();
                        return false;
                    }
                    if (PatientContext.IsINFUSIONON && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_GAS)) {
                        if (!this.oResolveItem.CheckRoute()) {
                            return false;
                        }
                        if (!this.oResolveItem.CheckFlowrate()) {
                            return false;
                        }
                        if (!this.oResolveItem.CheckSaturationRange()) {
                            return false;
                        }
                        if (!this.CheckPrnInstructions()) {
                            return false;
                        }
                        if (objFormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {
                            if (!this.CheckInfusionFlowrateRecAdmin())
                                return false;
                            if (!this.CheckAdministeredDate())
                                return false;
                            if (!this.CheckAdministeredDateTime())
                                return false;
                                //Revisit Required
                                /*
                            if (!this.CheckAdministeredby(sfsWitnessedby, chkNoWitness))
                                return false;
                                */
                            if (!this.CheckWitnessby())
                                return false;
                        }
                    }
                    if (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && DateTime.Equals(objFormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)) {
                        this.oResolveItem.FocusControl = "dtpStartDate";
                        this.objMsg.Message = Resource.MedicationForm.ValidateStartDateTimeBlank;
                        this.objMsg.Show();
                        return false;
                    }
                    if (!this.PrescriptionTimeValidate()) {
                        return false;
                    }
                }
                else if (PatientContext.IsINFUSIONON && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_GAS)) {
                    if (!this.oResolveItem.CheckFlowrate()) {
                        return false;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                        if (!this.CheckSaturationRange()) {
                            return false;
                        }
                    }
                }
                else if (PatientContext.IsINFUSIONON && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase)) {
                    if (objFormViewerDetails.BasicDetails.Completedate && DateTime.GreaterThan(objFormViewerDetails.BasicDetails.CompleteStartDTTM.Date, CommonBB.GetServerDateTime().Date)) {
                        this.oResolveItem.FocusControl = "dtpStartDate";
                        this.objMsg.Message = Resource.MedicationForm.ValidateDate;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (objFormViewerDetails.BasicDetails.Partialdate && objFormViewerDetails.BasicDetails.IsenableMonthYear && objFormViewerDetails.BasicDetails.Month != null && objFormViewerDetails.BasicDetails.Year < 1900) {
                        this.oResolveItem.FocusControl = "udYear";
                        this.objMsg.Message = Resource.MedicationForm.ManYear;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (objFormViewerDetails.BasicDetails.Partialdate) {
                        let MonthNo: number = 1;
                        if (objFormViewerDetails.BasicDetails.Month != null) {
                            MonthNo = Convert.ToInt32(Enum.Parse(typeof(EnumVals), objFormViewerDetails.BasicDetails.Month.Value, true));
                        }
                        let YearNo: number = objFormViewerDetails.BasicDetails.Year > 0 ? Convert.ToInt32(objFormViewerDetails.BasicDetails.Year) : 1;
                        if (DateTime.GreaterThan(new DateTime(YearNo, MonthNo, 1), CommonBB.GetServerDateTime().Date)) {
                            this.oResolveItem.FocusControl = "udYear";
                            this.objMsg.Message = Resource.MedicationForm.ValidateDate;
                            this.objMsg.Show();
                            return false;
                        }
                    }
                }
                let IsMedOxygen: boolean = false;
                if (PatientContext.IsINFUSIONON && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_GAS)) {
                    IsMedOxygen = true;
                }
                if (!IsMedOxygen && this.oResolveItem.formViewerDetails.BasicDetails.IsenableFrequency && this.oResolveItem.formViewerDetails.BasicDetails.IsMandatoryFrequency && (this.oResolveItem.formViewerDetails.BasicDetails.Frequency == null || (this.oResolveItem.formViewerDetails.BasicDetails.Frequency != null && String.IsNullOrEmpty(this.oResolveItem.formViewerDetails.BasicDetails.Frequency.Value))) && this.oResolveItem.formViewerDetails.BasicDetails.IsVisibleFrequency == Visibility.Visible) {
                    if (!this.CheckFrequency())
                        return false;
                }
                if (this.oResolveItem.IsClinicallyVerifyEnable && this.oResolveItem.IsClinicallyVerifyCommentsMandatory && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.VerificationComments)) {
                    if (String.Equals(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode, StringComparison.OrdinalIgnoreCase)) {
                        this.objMsg.Message = Resource.MedicationForm.VerificationCommentsMand;
                    }
                    else if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.OrdinalIgnoreCase)) {
                        this.objMsg.Message = Resource.MedicationForm.AuthoriserCommentsMand;
                    }
                    this.oResolveItem.FocusControl = "txtVerificationComments";
                    this.objMsg.Show();
                    return false;
                }
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify && this.oResolveItem.IsReasonForMedicationClerkModifyVisible == Visibility.Visible && (this.oResolveItem.FormViewerDetails.BasicDetails.MedClerkModifyReason == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MedClerkModifyReason.DisplayText))) {
                    this.oResolveItem.FocusControl = "cboModClerkReason";
                    this.objMsg.Message = Resource.MedicationForm.ManMedClerkModReason;
                    this.objMsg.MessageButton = MessageBoxButton.OK;
                    this.objMsg.Show();
                    return false;
                }
                if (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && (objFormViewerDetails.BasicDetails.Frequency != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Frequency.Value)) && objFormViewerDetails.BasicDetails.AdminTimes != null && objFormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Count > 0) {
                    if (!this.ValidateAdminTimes()) {
                        this.objMsg.Message = Resource.Infusion.RecAdminAdministrationTime_Msg;
                        this.oResolveItem.FocusControl = "";
                        this.objMsg.Show();
                        return false;
                    }
                    else if (!this.ValidateAdminTimesDaysOfWeek())
                        return false;
                }
                if (objFormViewerDetails != null && objFormViewerDetails.BasicDetails != null && objFormViewerDetails.BasicDetails.IsMandatoryFrequency && (objFormViewerDetails.BasicDetails.Frequency != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Frequency.Value))) {
                    if (!this.ValidateAdminTimesDaysOfWeek())
                        return false;
                }
                if (!this.showduplicate()) {
                    return false;
                }
                
                if (this.frmRecordAdmin != null && objFormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited) {
                            chkNoWitness = ObjectHelper.CreateType<iCheckBox>((ObjectHelper.CreateType<UserControl>(this.oRecordAdminTab.Content, UserControl)).FindName("chkNoWitness"), iCheckBox);
                            sfsWitnessedby = ObjectHelper.CreateType<iSFS>((ObjectHelper.CreateType<UserControl>(this.oRecordAdminTab.Content, UserControl)).FindName("sfsWitnessedby"), iSFS);
                        }
                        else
                        {
                            chkNoWitness = this.ProxychkNoWitness;
                            sfsWitnessedby = this.ProxysfsWitnessedby;
                        }
                    }
                    else
                    {
                        chkNoWitness = this.ProxychkNoWitness;
                        sfsWitnessedby = this.ProxysfsWitnessedby;
                    }

                    if (!this.CheckAdministeredby(sfsWitnessedby, chkNoWitness))
                        return false;
                }
                
                if (this.oResolveItem.IsReasonForModificationVisible == Visibility.Visible && objFormViewerDetails.BasicDetails.IsenableRSNFORMOD && objFormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD && (objFormViewerDetails.BasicDetails.ReasonforModification == null || String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.ReasonforModification.DisplayText) || objFormViewerDetails.BasicDetails.ReasonforModification.DisplayText == "Select reason")) {
                    this.oResolveItem.FocusControl = "cboRsnForMod";
                    this.objMsg.Message = Resource.MedicationForm.ManModifyReason;
                    this.objMsg.Show();
                    return false;
                }
                else if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && !this.ValidateOneSlotAdminTimeInAmend()) {
                    return false;
                }
                else {
                    if (!this.CheckDurationEmpty())
                        return false;
                    if (!this.oResolveItem.ValidateStopDateTime())
                        return false;
                    if (!this.IsType1()) {
                        this.objMsg.Message = "The " + objFormViewerDetails.ConflictDetails[0].DrugName + " cannot be prescribed. Please remove item to continue.";
                        this.objMsg.Show();
                    }
                    else if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                        this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                        this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                        this.objMsg.Show();
                    }
                    else if (!this.IsTechValMandatory()) {
                        this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                        this.oResolveItem.FocusControl = "TechValMandatory_ValidateMsg";
                        this.objMsg.Show();
                        return false;
                    }
                    //Revisit Required
                    else if (!this.Techvalidatevalidation())
                        return false;
                    else {
                        if (!this.ValidFollowUpStartDate()) {
                            return false;
                        }
                        if (!this.ValidateQuantityforClerking())
                            return false;
                        if (this.ValidateDeactiveAttributes()) {
                            if (!this.StationaryType())
                                return false;
                            return true;
                        }
                    }
                }
                if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && !String.Equals(PatientContext.ClerkFormViewDefaultBehavior, ClerkFormViewDeftBehaviour.LaunchFormMandatory) && (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag == null || this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "0")) && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Frequency")) {
                    if (!this.CheckAmendFreqValidation()) {
                        return false;
                    }
                }
                else if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && !String.Equals(PatientContext.ClerkFormViewDefaultBehavior, ClerkFormViewDeftBehaviour.LaunchFormMandatory) && (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag == null || this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "1")) && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Frequency") && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0) {
                    if (!this.InfAmendFreqValidation()) {
                        return false;
                    }
                }
                if (!this.StationaryType())
                    return false;
                if (!this.ValidateQuantity())
                    return false;
                if (!this.CheckIfOmittedSlotExists())
                    return false;
            }
            else {
                if (objFormViewerDetails.BasicDetails.Route != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.Route.DisplayText) && objFormViewerDetails.BasicDetails.RouteRecorded != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RouteRecorded.DisplayText) && String.Equals(objFormViewerDetails.BasicDetails.Route.Value, objFormViewerDetails.BasicDetails.RouteRecorded.Value, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.IsProhibitedRoute) {
                    this.oResolveItem.FocusControl = "cboRoute";
                    this.objMsg.Message = Resource.MedicationForm.ValidateRouteIsProhibited;
                    this.objMsg.Show();
                }
                else {
                    if (!this.IsType1()) {
                        this.objMsg.Message = "The " + objFormViewerDetails.ConflictDetails[0].DrugName + " cannot be prescribed. Please remove item to continue.";
                        this.objMsg.Show();
                    }
                    else if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking && !this.IsConflictsMandatory()) {
                        this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
                        this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
                        this.objMsg.Show();
                    }
                    //Revisit Required
                    else if (!this.Techvalidatevalidation())
                        return false;
                    else {
                        if (!this.ValidFollowUpStartDate()) {
                            return false;
                        }                        
                        if (this.frmRecordAdmin != null && objFormViewerDetails.BasicDetails.IsRecordAdminTabEnabled) {

                            if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                                if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited) {
                                    chkNoWitness = ObjectHelper.CreateType<iCheckBox>((ObjectHelper.CreateType<UserControl>(this.oRecordAdminTab.Content, UserControl)).FindName("chkNoWitness"), iCheckBox);
                                    sfsWitnessedby = ObjectHelper.CreateType<iSFS>((ObjectHelper.CreateType<UserControl>(this.oRecordAdminTab.Content, UserControl)).FindName("sfsWitnessedby"), iSFS);
                                }
                                else
                                {
                                    chkNoWitness = this.ProxychkNoWitness;
                                    sfsWitnessedby = this.ProxysfsWitnessedby;
                                }
                            }
                            else
                            {
                                chkNoWitness = this.ProxychkNoWitness;
                                sfsWitnessedby = this.ProxysfsWitnessedby;
                            }

                            if (!this.CheckAdministeredby(sfsWitnessedby, chkNoWitness))
                                return false;
                        }
                        
                        if (this.ValidateDeactiveAttributes()) {
                            return true;
                        }
                    }
                }
                if (!this.ValidateQuantity())
                    return false;
                if (!this.CheckIfOmittedSlotExists())
                    return false;
            }
            return false;
        }
        private PrescriptionTimeValidate(): boolean {
            let IsAnySubSequentialItem: boolean = false;
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0 && this.oResolveItem.ParentbaseVM != null && this.oResolveItem.ParentbaseVM.MedsResolve != null && this.oResolveItem.ParentbaseVM.MedsResolve.Count > 0) {
                    let seqitem = CSequentialHelper.GetFirstActiveItemInfusionVM(this.oResolveItem.ParentbaseVM.MedsResolve, this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo);
                    if (seqitem != null && seqitem.ItemSequenceNo != this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo) {
                        IsAnySubSequentialItem = true;
                    }
                }
                else if (this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0) {
                    IsAnySubSequentialItem = CommonSequentialHelper.IsSequeneSubsequentItem(this.oResolveItem);
                }
            }
            if (!IsAnySubSequentialItem && !String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue) && !this.oResolveItem.FormViewerDetails.BasicDetails.TimeMinValueFlag && this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime.TimeOfDay.Equals(DateTime.MinValue.TimeOfDay)) {
                this.TimeValidateAlertBox();
                return false;
            }
            return true;
        }
        private TimeValidateAlertBox(): void {
            this.oResolveItem.FocusControl = "iTimeStartDateTime";
            let objMsgBox: iMessageBox = new iMessageBox();
            objMsgBox.Message = Resource.MedicationForm.ValidateStartDTTM;
            objMsgBox.MessageButton = MessageBoxButton.YesNo;
            objMsgBox.MessageBoxClose  = (s,e) => { this.MessageBoxClose_App(s,e); } ;
            objMsgBox.Show();
        }
        private ValidationForTitratedDoses(_TitratedDoseValidationResult: boolean): boolean {
            let _TitratedDoseValidationMessage: string = String.Empty;
            if (this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Count > 0) {
                let oDose: boolean = this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Any(x => x.ScheduleDoseValue.Any(m => !String.IsNullOrEmpty(m)));
                if (oDose == true && (this.objfrm.formViewerDetails.BasicDetails.DoseUOM == null || String.IsNullOrEmpty(this.objfrm.formViewerDetails.BasicDetails.DoseUOM.Value))) {
                    this.oResolveItem.FocusControl = "cboUOM";
                    this.objMsg.Message = Resource.MedicationForm.cboUOMBlankMsg;
                    this.objMsg.Show();
                    return false;
                }
            }
            if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking) {
                if (DateTime.LessThan(DateTime.Now.AddDays(-7), this.objfrm.formViewerDetails.BasicDetails.CompleteStartDTTM)) {
                    if (this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Count > 0) {
                        let _MinimumCommencentDate: DateTime= this.objfrm.formViewerDetails.BasicDetails.CompleteStartDTTM;
                        this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.forEach( (_oTitratedScheduleDetails)=> {
                            for (let i: number = 0; i < _oTitratedScheduleDetails.ScheduledDate.Count(); i++) {
                                if (DateTime.LessThan(_oTitratedScheduleDetails.ScheduledDate[i], _MinimumCommencentDate) && !String.IsNullOrEmpty(_oTitratedScheduleDetails.ScheduleDoseValue[i]) && _TitratedDoseValidationResult) {
                                    _TitratedDoseValidationMessage = Resource.steppeddose.ClerkTitrartedDoseMessage;
                                    this.ShowErrorMesssage(_TitratedDoseValidationMessage, MessageBoxType.Information, MessageBoxButton.OK, "");
                                    _TitratedDoseValidationResult = false;
                                }
                            }
                        });
                    }
                }
            }
            if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking || PatientContext.PrescriptionType == PrescriptionTypes.Discharge || PatientContext.PrescriptionType == PrescriptionTypes.Leave || PatientContext.PrescriptionType == PrescriptionTypes.Outpatient) {
                if ((this.objfrm.formViewerDetails.BHasFormViewParams && this.IsDoseUOMMand) || (!this.objfrm.formViewerDetails.BHasFormViewParams && PatientContext.PrescriptionType != PrescriptionTypes.Clerking)) {
                    if (String.IsNullOrEmpty(this.objfrm.formViewerDetails.BasicDetails.TitratedDoseAdtnlComments) && (this.objfrm.formViewerDetails.BasicDetails.TitratedDoseInstruction == null || (this.objfrm.formViewerDetails.BasicDetails.TitratedDoseInstruction != null && String.IsNullOrEmpty(this.objfrm.formViewerDetails.BasicDetails.TitratedDoseInstruction.Value))) && (this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails?.GrdTitrated?.SelectMany(n => n.ScheduleDoseValue).Where(c => (!String.IsNullOrEmpty(c))).Count() == 0 || this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails?.GrdTitrated?.SelectMany(n => n.ScheduleDoseValue).Where(c => !String.IsNullOrEmpty(c) && (Convert.ToDouble(c) >= 0)).Count() == 0) && _TitratedDoseValidationResult) {
                        _TitratedDoseValidationMessage = Resource.steppeddose.TitAddnlDoseInsMessage;
                        _TitratedDoseValidationMessage += Environment.NewLine;
                        _TitratedDoseValidationMessage += Resource.steppeddose.TitratedDosemandatoryMes;
                        this.ShowErrorMesssage(_TitratedDoseValidationMessage, MessageBoxType.Information, MessageBoxButton.OK, "");
                        _TitratedDoseValidationResult = false;
                    }
                }
                if ((this.objfrm.formViewerDetails.BHasFormViewParams && PatientContext.PrescriptionType != PrescriptionTypes.Clerking)) {
                    if (String.IsNullOrEmpty(this.objfrm.formViewerDetails.BasicDetails.TitratedDoseAdtnlComments) && (this.objfrm.formViewerDetails.BasicDetails.TitratedDoseInstruction == null || (this.objfrm.formViewerDetails.BasicDetails.TitratedDoseInstruction != null && String.IsNullOrEmpty(this.objfrm.formViewerDetails.BasicDetails.TitratedDoseInstruction.Value))) && (this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails?.GrdTitrated?.SelectMany(n => n.ScheduleDoseValue).Where(c => (!String.IsNullOrEmpty(c))).Count() == 0 || this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails?.GrdTitrated?.SelectMany(n => n.ScheduleDoseValue).Where(c => !String.IsNullOrEmpty(c) && (Convert.ToDouble(c) >= 0)).Count() == 0) && _TitratedDoseValidationResult) {
                        _TitratedDoseValidationMessage = Resource.steppeddose.TitAddnlDoseInsMessage;
                        _TitratedDoseValidationMessage += Environment.NewLine;
                        _TitratedDoseValidationMessage += Resource.steppeddose.TitratedDosemandatoryMes;
                        this.ShowErrorMesssage(_TitratedDoseValidationMessage, MessageBoxType.Information, MessageBoxButton.OK, "");
                        _TitratedDoseValidationResult = false;
                    }
                }
            }
            if (PatientContext.PrescriptionType == PrescriptionTypes.Discharge || PatientContext.PrescriptionType == PrescriptionTypes.Leave || PatientContext.PrescriptionType == PrescriptionTypes.Outpatient) {
                if (this.objfrm.FormViewerDetails.BasicControls != null && !this.objfrm.FormViewerDetails.BasicControls.Contains("CC_STOPDTTM")) {
                    this.objfrm.FormViewerDetails.BasicDetails.IsVisibleStopDate = Visibility.Collapsed;
                }
                if (this.objfrm.formViewerDetails.BasicDetails.IsVisibleStopDate == Visibility.Visible && (DateTime.NotEquals(this.objfrm.formViewerDetails.BasicDetails.StopDate, DateTime.MinValue))) {
                    let _StopDate: DateTime= this.objfrm.formViewerDetails.BasicDetails.StopDate;
                    this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.forEach( (_oTitratedScheduleDetails)=> {
                        for (let i: number = 0; i < _oTitratedScheduleDetails.ScheduledDate.Count(); i++) {
                            if (DateTime.GreaterThan(_oTitratedScheduleDetails.ScheduledDate[i].Date, _StopDate.Date) && !String.IsNullOrEmpty(_oTitratedScheduleDetails.ScheduleDoseValue[i]) && Convert.ToDecimal(_oTitratedScheduleDetails.ScheduleDoseValue[i]) >= 0 && _TitratedDoseValidationResult) {
                                _TitratedDoseValidationMessage = Resource.steppeddose.TDDosevalidationMessage;
                                this.ShowErrorMesssage(_TitratedDoseValidationMessage, MessageBoxType.Information, MessageBoxButton.OK, "");
                                _TitratedDoseValidationResult = false;
                            }
                        }
                    });
                }
                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Count > 0 && (PatientContext.PrescriptionType == PrescriptionTypes.Discharge || PatientContext.PrescriptionType == PrescriptionTypes.Leave || PatientContext.PrescriptionType == PrescriptionTypes.Outpatient)) {
                    let _StartDate: DateTime= this.objfrm.formViewerDetails.BasicDetails.StartDTTM;
                    let oTitratedScheduleDetail: TitratedScheduleDetails = null;
                    let lstTitratedDoseDaywise: List<TitratedDoseDaywise> = new List<TitratedDoseDaywise>();
                    let oTitratedDoseDaywise: TitratedDoseDaywise = null;
                    let nCount: number, nScheduledDateCount = 0;
                    nCount = this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Count;
                    for (let i: number = 0; i < nCount; i++) {
                        oTitratedScheduleDetail = new TitratedScheduleDetails();
                        oTitratedScheduleDetail = this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated[i];
                        nScheduledDateCount = (oTitratedScheduleDetail != null && oTitratedScheduleDetail.ScheduledDate != null && oTitratedScheduleDetail.ScheduledDate.Count() > 0) ? oTitratedScheduleDetail.ScheduledDate.Count() : 0;
                        for (let j: number = 0; j < nScheduledDateCount; j++) {
                            oTitratedDoseDaywise = new TitratedDoseDaywise();
                            oTitratedDoseDaywise.ScheduledDate = oTitratedScheduleDetail.ScheduledDate[j];
                            oTitratedDoseDaywise.DoseUomValue = oTitratedScheduleDetail.ScheduleDoseValue[j];
                            lstTitratedDoseDaywise.Add(oTitratedDoseDaywise);
                        }
                    }
                    if (this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendStartDTTMChanged && DateTime.NotEquals(this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.Stardate, DateTime.MinValue) && DateTime.NotEquals(this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.Stardate.Date, _StartDate.Date)) {
                        this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendDoseClear = false;
                        this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendStartDTTMChanged = false;
                    }
                    else if (lstTitratedDoseDaywise != null && lstTitratedDoseDaywise.Count > 0) {
                        let oTitratedDosePerDaywise = lstTitratedDoseDaywise.Where(c => c.ScheduledDate.Date < _StartDate.Date && !String.IsNullOrEmpty(c.DoseUomValue)).Select(s => s).FirstOrDefault();
                        if (oTitratedDosePerDaywise != null && !String.IsNullOrEmpty(oTitratedDosePerDaywise.DoseUomValue)) {
                            this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendDoseClear = false;
                        }
                        else {
                            this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendDoseClear = true;
                        }
                    }
                    else {
                        this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendDoseClear = true;
                    }
                    if (_TitratedDoseValidationResult && !this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendDoseClear) {
                        let iMsgBox: iMessageBox = new iMessageBox();
                        let _ValidationMessage: string = (Resource.steppeddose.TDDoseStartDTTMmessage + Environment.NewLine + Resource.steppeddose.TDClearMessage);
                        iMsgBox.IconType = MessageBoxType.Information;
                        iMsgBox.MessageButton = MessageBoxButton.YesNo;
                        iMsgBox.Message = _ValidationMessage;
                        iMsgBox.MessageBoxClose  = (s,e) => { this.TitratedValidationMessageBoxYesNo(s,e); } ;
                        iMsgBox.Show();
                        oTitratedScheduleDetail = null;
                        lstTitratedDoseDaywise = null;
                        oTitratedDoseDaywise = null;
                        _TitratedDoseValidationResult = false;
                    }
                }
            }
            if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking || PatientContext.PrescriptionType == PrescriptionTypes.Discharge || PatientContext.PrescriptionType == PrescriptionTypes.Leave || PatientContext.PrescriptionType == PrescriptionTypes.Outpatient) {
                if (_TitratedDoseValidationResult && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails != null && this.objfrm.formViewerDetails.BasicDetails.Frequency != null && !String.IsNullOrEmpty(this.objfrm.formViewerDetails.BasicDetails.DrugFreqUOMCode) && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated != null && String.Equals(this.objfrm.formViewerDetails.BasicDetails.DrugFreqUOMCode, "CC_MEDDRSN2", StringComparison.InvariantCultureIgnoreCase) && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Count > 0 && this.objfrm.formViewerDetails.BasicDetails.FrequencyLowEvent > 0) {
                    let ScheduleDoseValues: string[] = this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated[0].ScheduleDoseValue.Where(c => !String.IsNullOrEmpty(c)).ToArray();
                    if (ScheduleDoseValues != null && (ScheduleDoseValues.Count() > this.objfrm.formViewerDetails.BasicDetails.FrequencyLowEvent)) {
                        _TitratedDoseValidationMessage = Resource.steppeddose.ValidateTitratedDoseWeeklyFrequency_Msg;
                        this.ShowErrorMesssage(_TitratedDoseValidationMessage, MessageBoxType.Information, MessageBoxButton.OK, "");
                        _TitratedDoseValidationResult = false;
                    }
                }
            }
            return _TitratedDoseValidationResult;
        }
        //Revisit Required --- Unreachable code
        /*
        ValMInStartDatetime_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            let _ErrorID: number = 80000012;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, medFormViewer.ValMInStartDatetime_MessageBoxClose()";
            if (e.MessageBoxResult == MessageBoxResult.No) {
                let _CtrlTimeBox: iTimeBox = ObjectHelper.CreateType<iTimeBox>(this.frmViewBasic.FindName("iTimeStartDateTime"), iTimeBox);
                if (_CtrlTimeBox instanceof iTimeBox) {
                    if (!String.IsNullOrEmpty(this.ftbFormViewDetails.SelectedKey) && !String.Equals(this.ftbFormViewDetails.SelectedKey, "frmBasic", StringComparison.CurrentCultureIgnoreCase)) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                    this.ftbFormViewDetails.UpdateLayout();
                    try {
                        let oGenTrans: GeneralTransform = _CtrlTimeBox.TransformToVisual(ObjectHelper.CreateType<UIElement>(this.frmViewBasic, UIElement));
                        if (oGenTrans != null) {
                            let _TimeBoxPosition: Point = {X:0,Y:0};
                            let svwFormViewer: ScrollViewer = ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.FindName("svwFormViewer"), ScrollViewer);
                            if (svwFormViewer != null) {
                                svwFormViewer.ScrollToVerticalOffset(_TimeBoxPosition.Y);
                            }
                        }
                    }
                   catch(ex:any)  {
                        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
                    }

                    _CtrlTimeBox.Focus();
                }
            }
            else {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ValMinStartTimePopup = true;
                    if (this.OKClickValidations()) {
                        if (super.onDialogClose != null)
                            super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                    }
                }
            }
        }
        */

        public InfConcentrationRecAdmin(): boolean {
            let objFormViewerDetails: FormViewerVM = new FormViewerVM();
            objFormViewerDetails = this.oResolveItem.FormViewerDetails;
            if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength) && String.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength, "0")) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtConStrengthValue";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (((String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength) || objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength.Equals("0"))) && objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM.Value)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtConStrengthValue";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength) && (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM == null || (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM != null && String.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM.Value, "0")))) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboConStrengthUoMValue";
                    this.objMsg.Message = "Concentration UOM cannot be blank.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume) && String.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume, "0")) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtConVolumeValue";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (((String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume) || objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume.Equals("0"))) && objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM.Value)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtConVolumeValue";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume) && (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM == null || (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM != null && String.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM.Value, "0")))) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboConVolumeUoMValue";
                    this.objMsg.Message = "Concentration UOM cannot be blank.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength) && objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM.Value)) {
                if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume) && String.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume, "0")) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtConVolumeValue";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume) && (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM == null || (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM != null && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM.DisplayText)))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtConVolumeValue";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (((String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume) || objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume.Equals("0"))) && objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM.Value)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtConVolumeValue";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume) && (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM == null || (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM != null && String.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM.Value, "0")))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboConVolumeUoMValue";
                        this.objMsg.Message = "Concentration UOM cannot be blank.";
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume) && objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM.Value)) {
                if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength) && String.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength, "0")) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtConStrengthValue";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength) && (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM == null || (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM != null && String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM.DisplayText)))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtConStrengthValue";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (((String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength) || objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength.Equals("0"))) && objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM != null && !String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM.Value)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtConStrengthValue";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (!String.IsNullOrEmpty(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength) && (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM == null || (objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM != null && String.Equals(objFormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM.Value, "0")))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboConStrengthUoMValue";
                        this.objMsg.Message = "Concentration UOM cannot be blank.";
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        public InfusionPeriodRecAdmin(): boolean {
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdmin) && Convert.ToDecimal(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdmin) == 0) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "Infusionperiodtext";
                    this.objMsg.Message = Resource.Infusion.InfuPer_Zero_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdmin) && (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdminUOM != null)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "Infusionperiodtext";
                    this.objMsg.Message = Resource.Infusion.InfuPer_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            else if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdmin)) && (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdminUOM == null)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboInfusionperiodUoMValue";
                    this.objMsg.Message = Resource.Infusion.InfuPerUOM_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public CheckFrequency(): boolean {
            let IsInfusionRoutes: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Value) && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Value.Equals("1")) {
                IsInfusionRoutes = true;
            }
            if ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase) == 0)) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsenableFrequency && this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency && (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.DisplayText))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboFrequency";
                        this.objMsg.Message = Resource.MedicationForm.FrequencyBlank;
                        this.objMsg.MessageButton = MessageBoxButton.OK;
                        this.objMsg.Show();
                    }
                    return false;
                }
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType == null || !IsInfusionRoutes) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryFrequency && (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.DisplayText))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboFrequency";
                        this.objMsg.Message = Resource.MedicationForm.FrequencyBlank;
                        this.objMsg.MessageButton = MessageBoxButton.OK;
                        this.objMsg.Show();
                    }
                    return false;
                }
            }
            return true;
        }
        public CheckPrnInstructions(): boolean {
            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsPRNInstructionMandatory && (this.oResolveItem.FormViewerDetails.BasicDetails.PRNInstruction == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.PRNInstruction.DisplayText)) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.PRNInstructionFreeText)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboPRNInstruction";
                    this.objMsg.Message = Resource.Infusion.PrnInstructions_Blank_Msg;
                    this.objMsg.MessageButton = MessageBoxButton.OK;
                    this.objMsg.Show();
                }
                return false;
            }
            return true;
        }
        public StationaryType(): boolean {
            let IsValidateApplianceGasForAdmin: boolean = false;
            if (PatientContext.IsINFUSIONON && PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && !String.IsNullOrEmpty(this.oResolveItem.ItemSubType) && String.Compare(this.oResolveItem.ItemSubType, CConstants.SUBTYPE_GAS, StringComparison.CurrentCultureIgnoreCase) == 0 && !String.IsNullOrEmpty(this.oResolveItem.ItemMainType) && String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase)) {
                IsValidateApplianceGasForAdmin = true;
            }
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (this.oResolveItem != null && !String.IsNullOrEmpty(this.oResolveItem.ItemMainType) && String.Equals(this.oResolveItem.ItemMainType, "CC_APPLIANCE", StringComparison.OrdinalIgnoreCase) && PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && !objFormViewerDets.BHasFormViewParams)
                return true;
            if (!IsValidateApplianceGasForAdmin && objFormViewerDets.BasicDetails.IsEnableStationeryType && objFormViewerDets.BasicDetails.StationaryType == null) {
                this.oResolveItem.FocusControl = "cboStationary";
                this.objMsg.Message = Resource.MedicationForm.StationaryTypeMandMsg;
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        sMandMsgChck: string = String.Empty;
        public ValidateQuantity(): boolean {
            if(this.frmViewBasic==null)
            {
                this.frmViewBasic=new UserControl();
            }
            let txtQty: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtQuantity"), iTextBox);
            let cboQty: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox);
            if (txtQty == null && this.frmViewAdditional != null) {
                txtQty = ObjectHelper.CreateType<iTextBox>(this.frmViewAdditional.FindName("txtQuantity"), iTextBox);
                cboQty = ObjectHelper.CreateType<iComboBox>(this.frmViewAdditional.FindName("cboQuantity"), iComboBox);
            }
            
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.IsQuantityEnabled) {
                if ((txtQty != null && cboQty != null) || (objFormViewerDets.BHasFormViewParams && txtQty != null)) {
                    if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.InvariantCultureIgnoreCase)) && (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) && (Convert.ToDouble(objFormViewerDets.BasicDetails.Quantity) > 0) && (objFormViewerDets.BasicDetails.QuantityUOM == null || String.IsNullOrEmpty(objFormViewerDets.BasicDetails.QuantityUOM.Value))) || (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase)) && (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) && (objFormViewerDets.BasicDetails.QuantityUOM == null || String.IsNullOrEmpty(objFormViewerDets.BasicDetails.QuantityUOM.Value)))) {
                        this.oResolveItem.FocusControl = "cboQuantity";
                        this.sMandMsgChck = "QuantityUOM";
                        this.objMsg.Message = Resource.MedicationForm.ManQtyUOM;
                        this.objMsg.Show();
                        return false;
                    }
                    else if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.InvariantCultureIgnoreCase)) && ((objFormViewerDets.BasicDetails.IsQuantityMandatory && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity)) || ((objFormViewerDets.BasicDetails.QuantityUOM != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.QuantityUOM.Value)) && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity)))) {
                        this.oResolveItem.FocusControl = "txtQuantity";
                        this.sMandMsgChck = "Quantity";
                        this.objMsg.Message = Resource.MedicationForm.ManQty;
                        this.objMsg.Show();
                        return false;
                    }
                    else if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) == 0 || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase)) && (objFormViewerDets.BasicDetails.IsQuantityMandatory && ((String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) || (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) && Convert.ToDouble(objFormViewerDets.BasicDetails.Quantity) == 0))) || (objFormViewerDets.BasicDetails.QuantityUOM != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.QuantityUOM.Value) && (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) || (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) && Convert.ToDouble(objFormViewerDets.BasicDetails.Quantity) == 0))))) {
                        this.oResolveItem.FocusControl = "txtQuantity";
                        this.sMandMsgChck = "Quantity";
                        this.objMsg.Message = Resource.MedicationForm.ManQuantity;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (objFormViewerDets.BasicDetails.IsenableSupplyInstruction && objFormViewerDets.BasicDetails.IsMandatorySupplyInstr && String.Equals(objFormViewerDets.BasicDetails.SupplyInsText, "Select supply instructions to enter value(s)")) {
                        this.oResolveItem.FocusControl = "txtQuantity";
                        this.sMandMsgChck = "Supplyinstr";
                        this.objMsg.Message = Resource.TechValProdOpt.SupplyInstMand;
                        this.objMsg.Show();
                        this.objMsg.MessageBoxClose  = (s,e) => { this.objmsgsupply_Close(s,e); } ;
                        return false;
                    }
                }
            }
            return true;
        }
        objmsgsupply_Close(sender: Object, e: MessageEventArgs): void {
            if (String.Equals(this.sMandMsgChck, "Supplyinstr")) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.oPrescitemVM = this.oResolveItem;
                    if (this.oResolveItem.FormViewerDetails.TechValidateDetails != null) {
                        this.oResolveItem.FormViewerDetails.TechValidateDetails.FetchfrombasicDetails = true;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.TechValidateDetails = new TechValidateVM();
                        this.oResolveItem.FormViewerDetails.TechValidateDetails.FetchfrombasicDetails = true;
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.LaunchedFromTechValidate = false;
                    this.oResolveItem.FormViewerDetails.TechValidateDetails.IslaunchedFromProductOptions = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.launchsupplyinstrmezzanine();
                }
                this.sMandMsgChck = String.Empty;
            }
        }
        public ValidateQuantityforClerking(): boolean {
            let txtQty: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtQuantity"), iTextBox);
            let cboQty: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox);
            if (txtQty == null && this.frmViewAdditional != null) {
                txtQty = ObjectHelper.CreateType<iTextBox>(this.frmViewAdditional.FindName("txtQuantity"), iTextBox);
                cboQty = ObjectHelper.CreateType<iComboBox>(this.frmViewAdditional.FindName("cboQuantity"), iComboBox);
            }
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.IsQuantityEnabled) {
                if (txtQty != null && cboQty != null) {
                    if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.InvariantCultureIgnoreCase)) && (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) && (Convert.ToDouble(objFormViewerDets.BasicDetails.Quantity) > 0) && (objFormViewerDets.BasicDetails.QuantityUOM == null || String.IsNullOrEmpty(objFormViewerDets.BasicDetails.QuantityUOM.Value))) || (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase)) && (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) && (objFormViewerDets.BasicDetails.QuantityUOM == null || String.IsNullOrEmpty(objFormViewerDets.BasicDetails.QuantityUOM.Value)))) {
                        this.oResolveItem.FocusControl = "cboQuantity";
                        this.sMandMsgChck = "QuantityUOM";
                        this.objMsg.Message = Resource.MedicationForm.ManQtyUOM;
                        this.objMsg.Show();
                        return false;
                    }
                    else if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.InvariantCultureIgnoreCase)) && ((objFormViewerDets.BasicDetails.IsQuantityMandatory && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity)) || ((objFormViewerDets.BasicDetails.QuantityUOM != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.QuantityUOM.Value)) && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity)))) {
                        this.oResolveItem.FocusControl = "txtQuantity";
                        this.sMandMsgChck = "Quantity";
                        this.objMsg.Message = Resource.MedicationForm.ManQty;
                        this.objMsg.Show();
                        return false;
                    }
                    else if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase) == 0) && (objFormViewerDets.BasicDetails.IsQuantityMandatory && ((String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) || (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) && Convert.ToDouble(objFormViewerDets.BasicDetails.Quantity) == 0))) || (objFormViewerDets.BasicDetails.QuantityUOM != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.QuantityUOM.Value) && (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) || (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Quantity) && Convert.ToDouble(objFormViewerDets.BasicDetails.Quantity) == 0))))) {
                        this.oResolveItem.FocusControl = "txtQuantity";
                        this.sMandMsgChck = "Quantity";
                        this.objMsg.Message = Resource.MedicationForm.ManQuantity;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (objFormViewerDets.BasicDetails.IsenableSupplyInstruction && objFormViewerDets.BasicDetails.IsMandatorySupplyInstr && String.Equals(objFormViewerDets.BasicDetails.SupplyInsText, "Select supply instructions to enter value(s)")) {
                        this.oResolveItem.FocusControl = "txtQuantity";
                        this.sMandMsgChck = "Supplyinstr";
                        this.objMsg.Message = Resource.TechValProdOpt.SupplyInstMand;
                        this.objMsg.Show();
                        this.objMsg.MessageBoxClose  = (s,e) => { this.objmsgsupply_Close(s,e); } ;
                        return false;
                    }
                }
            }
            return true;
        }
        public CheckInfusionRateRecAdmin(): boolean {
            let msg: string = String.Empty;
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.InfusionType != null && objFormViewerDets.BasicDetails != null) {
                if (String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA, StringComparison.CurrentCultureIgnoreCase))
                    msg = Resource.Infusion.lblInfusionRateLabel_Text;
                else if (String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) || String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase))
                    msg = Resource.Infusion.lblInfusionRateLabel1_Text;
            }
            else if ((objFormViewerDets.BasicDetails.itemSubType != null) && (String.Equals(objFormViewerDets.BasicDetails.itemSubType, "CC_MEDGAS"))) {
                msg = Resource.Infusion.FlowrateLabel_Msg;
            }
            if (objFormViewerDets.BasicDetails != null && objFormViewerDets.BasicDetails.RecordAdmin != null && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.InfusionRate)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtRecinfusionrate";
                    this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            if (objFormViewerDets.BasicDetails != null && objFormViewerDets.BasicDetails.RecordAdmin != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.InfusionRate) && Convert.ToDecimal(objFormViewerDets.BasicDetails.RecordAdmin.InfusionRate) == 0) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtRecinfusionrate";
                    this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.InfusionRate) && ((objFormViewerDets.BasicDetails.RecordAdmin.InfRateNumeratorUom == null || String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.InfRateNumeratorUom.Value)) || (objFormViewerDets.BasicDetails.RecordAdmin.InfRateDinominatorUom == null || String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.InfRateDinominatorUom.Value)))) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtRecinfusionrate";
                    this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRateUOM_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public CheckInfusionFlowrateRecAdmin(): boolean {
            let msg: string = String.Empty;
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if ((objFormViewerDets.BasicDetails.itemSubType != null) && (String.Equals(objFormViewerDets.BasicDetails.itemSubType, "CC_MEDGAS"))) {
                msg = Resource.Infusion.FlowrateLabel_Msg;
            }
            if (objFormViewerDets.BasicDetails != null && objFormViewerDets.BasicDetails.RecordAdmin != null && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.InfusionRate) || (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.InfusionRate) && String.Equals(objFormViewerDets.BasicDetails.RecordAdmin.InfusionRate, "0"))) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtRecFlowRate";
                    this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                    this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (objFormViewerDets.BasicDetails.RecordAdmin.FlowrateNumUom == null) {
                this.oResolveItem.FocusControl = "cboflowratenumuom";
                this.objMsg.Message = Resource.Infusion.InfusionFlowRateUOM_Msg;
                this.objMsg.Show();
                return false;
            }
            else if (objFormViewerDets.BasicDetails.RecordAdmin.FlowrateDenUom == null) {
                this.oResolveItem.FocusControl = "cboflowratedenuom";
                this.objMsg.Message = Resource.Infusion.InfusionFlowRateUOM_Msg;
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        public CheckBagVolume(): boolean {
            if (CommonFlags.IsbagvolumeMsgDisplayed) {
                let objFormViewerDets: FormViewerVM = new FormViewerVM();
                objFormViewerDets = this.oResolveItem.FormViewerDetails;
                if (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.BagVolume) && (objFormViewerDets.BasicDetails.RecordAdmin.BagVolumeUOM != null)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "BagVolume";
                        this.objMsg.Message = Resource.MedicationForm.BagVol_Blank_Msg;
                        this.objMsg.Show();
                        CommonFlags.IsbagvolumeMsgDisplayed = false;
                        return false;
                    }
                }
                if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.BagVolume) && Convert.ToDecimal(objFormViewerDets.BasicDetails.RecordAdmin.BagVolume) == 0) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "BagVolume";
                        this.objMsg.Message = Resource.MedicationForm.BagVol_Blank_Msg;
                        this.objMsg.Show();
                        CommonFlags.IsbagvolumeMsgDisplayed = false;
                        return false;
                    }
                }
                if (objFormViewerDets.BasicDetails.RecordAdmin.BagVolumeUOM == null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.BagVolume)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cbobagUoMValue";
                        this.objMsg.Message = Resource.MedicationForm.BagVolUOM_Blank_Msg;
                        this.objMsg.Show();
                        CommonFlags.IsbagvolumeMsgDisplayed = false;
                        return false;
                    }
                }
                if (objFormViewerDets.BasicDetails.RecordAdmin.BagVolumeUOM == null && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.BagVolume)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "BagVolume";
                        this.objMsg.Message = Resource.MedicationForm.BagVol_Blank_Msg;
                        this.objMsg.Show();
                        CommonFlags.IsbagvolumeMsgDisplayed = false;
                        return false;
                    }
                }
                return true;
            }
            else {
                return false;
            }
            //return true;
        }
        public CheckBagVolumeUOM(): boolean {
            if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.BagVolume)) && (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.BagVolumeUOM == null)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cbobagUoMValue";
                    this.objMsg.Message = Resource.MedicationForm.BagVolUOM_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public CheckAdministeredDate(): boolean {
            if (DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue)) {
                this.oResolveItem.FocusControl = "dtpAdminDate";
                this.objMsg.Message = Resource.MedicationForm.AdminDateBlank_Msg;
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        public CheckAdministeredDateTime(): boolean {
            let AdmDttm: DateTime= DateTime.MinValue;
            let CurrentDttmForRecAdmin: DateTime= CommonBB.GetServerDateTime();
            if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate, DateTime.MinValue) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime, DateTime.MinValue)) {
                let dt1: DateTime= new DateTime(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime.Year, this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime.Month, this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime.Day, this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime.Hour, this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime.Minute, 0);
                let dt2: DateTime= new DateTime(CurrentDttmForRecAdmin.Year, CurrentDttmForRecAdmin.Month, CurrentDttmForRecAdmin.Day, CurrentDttmForRecAdmin.Hour, CurrentDttmForRecAdmin.Minute, 0);
                if (DateTime.GreaterThan(dt1, dt2)) {
                    this.oResolveItem.FocusControl = "iTimeStartDateTime";
                    this.objMsg.Message = Resource.MedicationForm.AdminsteredDttmCheck;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public CheckExpiryDate(): boolean {
            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.ExpiryDate == null || DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.ExpiryDate, DateTime.MinValue)) {
                this.oResolveItem.FocusControl = "dtpRecExpiryDate";
                this.objMsg.Message = Resource.MedicationForm.ExpiryDateBlank_Msg;
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        public CheckBatchNumber(): boolean {
            if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.BatchNo)) {
                this.oResolveItem.FocusControl = "txtRecBatchNo";
                this.objMsg.Message = Resource.MedicationForm.BatchNumber_msg;
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        //Revisit Required
        
        public CheckAdministeredby(sfsWitnessedby: iSFS, chkNoWitness: iCheckBox): boolean {
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.WitnessMandatory && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.WitnessBy) && (chkNoWitness != null && chkNoWitness.IsChecked == false))) {
                this.oResolveItem.FocusControl = "sfsWitnessedby";
                this.objMsg.Message = Resource.MedicationForm.WitnessBy;
                this.objMsg.Tag = "WitnessBy";
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        
        public CheckWitnessby(): boolean {
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && (String.Compare(Convert.ToString(this.oResolveItem.PrescriberDetails.OID), this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.WitnessByOID) == 0) && this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.WitnessMandatory) {
                this.objMsg.Title = "LORENZO";
                this.oResolveItem.FocusControl = "sfsWitnessedby";
                this.objMsg.Message = Resource.RecordAdmin.Witness_message;
                this.objMsg.MessageButton = MessageBoxButton.OK;
                this.objMsg.IconType = MessageBoxType.Information;
                this.objMsg.Width = 400;
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        oMessagebox2_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
        }
        private CheckAmendFreqValidation(): boolean {
            if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Count > 0) {
                let sEntityName: string = String.Empty;
                let SetChartOpen: boolean = false;
                let sTime: string = String.Empty;
                let Amendmessage: boolean = false;
                sEntityName = "MAMedChart";
                let objFormViewerDet: FormViewerVM = new FormViewerVM();
                objFormViewerDet = this.oResolveItem.FormViewerDetails;
                if (!this.oResolveItem.FormViewerDetails.FreqAmendment) {
                    let _LockedUserDetails: LockedUsersDetails;
                    let bResult: boolean = MedicationCommonBB.IsLockedByAnotherUser(sEntityName, false, (o) => {_LockedUserDetails = o});
                    if ((_LockedUserDetails != null && !String.IsNullOrEmpty(_LockedUserDetails.ActivityLock) && String.Equals(_LockedUserDetails.ActivityLock, "MAMedChart", StringComparison.InvariantCultureIgnoreCase)) || (String.Compare(QueryStringInfo.IsLaunchformInfchart, "True") == 0)) {
                        SetChartOpen = true;
                    }
                    if (DateTime.NotEquals(objFormViewerDet.BasicDetails.Scheduletime, DateTime.MinValue)) {
                        if (!objFormViewerDet.BasicDetails.IsDueNow || !SetChartOpen) {
                            Amendmessage = true;
                            this.AmendmentFreqvalidate(Amendmessage, objFormViewerDet.BasicDetails);
                            return false;
                        }
                        else if (objFormViewerDet.BasicDetails.IsDueNow && SetChartOpen) {
                            this.AmendmentFreqvalidate(Amendmessage, objFormViewerDet.BasicDetails);
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        AmendmentFreqvalidate(Amendmessage: boolean, Basicdetails: BasicDetailsVM): void {
            let PrevSchedule: string = String.Empty;
            let dtCurrentDate: DateTime= CommonBB.GetServerDateTime();
            if (Basicdetails != null && Basicdetails.AdminTimes != null && Basicdetails.AdminTimes.AdministrationScheduleTimes != null && Basicdetails.AdminTimes.AdministrationScheduleTimes.Count > 0) {
                if (DateTime.LessThan(Basicdetails.Scheduletime.Date, dtCurrentDate.Date)) {
                    PrevSchedule = Basicdetails.Scheduletime.ToUserDateTimeString(CConstants.DateHMFormat);
                }
                else {
                    PrevSchedule = Basicdetails.Scheduletime.ToUserDateTimeString(CConstants.TimeFormat);
                }
                let lstSortedAdminTimes: IEnumerable<DateTime>;
                if (Basicdetails.AdminTimes.IsDrugroundTime) {
                    lstSortedAdminTimes = Basicdetails.AdminTimes.AdministrationScheduleTimes.OrderBy(x => x.DrugroundDTTM).Select(x=>x.DrugroundDTTM);
                }
                else {
                    lstSortedAdminTimes = Basicdetails.AdminTimes.AdministrationScheduleTimes.OrderBy(x => x.ScheduleDTTM).Select(x=>x.ScheduleDTTM);                    
                }
                let _PresItemStartTime: DateTime= (DateTime.LessThan(Basicdetails.StartDTTM, dtCurrentDate)) ? dtCurrentDate : Basicdetails.StartDTTM;
                let NewSchedule: string = String.Empty;
                for( let i:number=0; i< lstSortedAdminTimes.Count() ; i++){
                    let dt : DateTime =  lstSortedAdminTimes[i];                
                    if (_PresItemStartTime.TimeOfDay <= dt.TimeOfDay) {
                        NewSchedule = dt.ToUserDateTimeString(CConstants.TimeFormat);
                        break;
                    }
                }
                if (String.IsNullOrEmpty(NewSchedule)) {
                    NewSchedule = lstSortedAdminTimes.ElementAt(0).ToUserDateTimeString(CConstants.TimeFormat);
                }
                let objAmend: iMessageBox = new iMessageBox();
                objAmend.Title = "Lorenzo - Manage prescription";
                objAmend.MessageButton = MessageBoxButton.YesNo;
                objAmend.IconType = MessageBoxType.Question;
                objAmend.Width = 420;
                objAmend.MessageBoxClose  = (s,e) => { this.objAmendFreqMsgBox_MessageBoxClose(s,e); } ;
                if (Amendmessage)
                    objAmend.Message = "Last dose for administration was at " + PrevSchedule + " hrs; \n next scheduled administration is at " + NewSchedule + " hrs.";
                else objAmend.Message = "An administration is due now at " + PrevSchedule + " hrs; \n next scheduled administration is at " + NewSchedule + " hrs.";
                objAmend.Show();
            }
        }
        objAmendFreqMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult != MessageBoxResult.Yes) {
                let dtpStartDate: iDateTimePicker = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker);
                if (dtpStartDate instanceof iDateTimePicker) {
                    dtpStartDate.Focus();
                }
            }
            else {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null) {
                    this.oResolveItem.FormViewerDetails.FreqAmendment = true;
                    if (this.OKClickValidations()) {
                        if (super.onDialogClose != null)
                            super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                    }
                }
            }
        }
        private InfAmendFreqValidation(): boolean {
            let sEntityName: string = String.Empty;
            let SetChartOpen: boolean = false;
            let sTime: string = String.Empty;
            let Amendmessage: boolean = false;
            let InfInprogress: boolean = false;
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            let sMenuCode: string = "MAMedChart";
            if (!this.oResolveItem.FormViewerDetails.FreqAmendment) {
                let _LockedUserDetails: LockedUsersDetails;
                let bResult: boolean = MedicationCommonBB.IsLockedByAnotherUser(sMenuCode, false, (o) => {_LockedUserDetails = o});
                if ((_LockedUserDetails != null && !String.IsNullOrEmpty(_LockedUserDetails.ActivityLock) && String.Equals(_LockedUserDetails.ActivityLock, "MAMedChart", StringComparison.InvariantCultureIgnoreCase)) || String.Equals(QueryStringInfo.IsLaunchformInfchart, "True")) {
                    SetChartOpen = true;
                }
                if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.Scheduletime, DateTime.MinValue)) {
                    if (this.oResolveItem.IsInfInprogress) {
                        InfInprogress = true;
                        this.InfAmendmentFreqvalidate(Amendmessage, InfInprogress, objFormViewerDets.BasicDetails);
                        return false;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsDueNow && SetChartOpen) {
                        this.InfAmendmentFreqvalidate(Amendmessage, false, objFormViewerDets.BasicDetails);
                        return false;
                    }
                    else if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsDueNow || !SetChartOpen) {
                        Amendmessage = true;
                        this.InfAmendmentFreqvalidate(Amendmessage, false, objFormViewerDets.BasicDetails);
                        return false;
                    }
                }
            }
            return true;
        }
        InfAmendmentFreqvalidate(Amendmessage: boolean, InfInprogress: boolean, Basicdetails: BasicDetailsVM): void {
            let PrevSchedule: string = String.Empty;
            let dtCurrentDate: DateTime= CommonBB.GetServerDateTime();
            if (DateTime.LessThan(Basicdetails.Scheduletime.Date, dtCurrentDate.Date)) {
                PrevSchedule = Basicdetails.Scheduletime.ToUserDateTimeString(CConstants.DateHMFormat);
            }
            else {
                PrevSchedule = Basicdetails.Scheduletime.ToUserDateTimeString(CConstants.TimeFormat);
            }
            let inProgScheduleDTTM: string = Basicdetails.InProgSchDTTM.ToUserDateTimeString(CConstants.TimeFormat);
            let NewSchedule: string = String.Empty;
            let nAdminSchTimeCnt: number = Basicdetails.AdminTimes.AdministrationScheduleTimes.Count;
            for (let i: number = 0; i < nAdminSchTimeCnt; i++) {
                if (Basicdetails.AdminTimes.IsFixedTime) {
                    if (dtCurrentDate.TimeOfDay <= Basicdetails.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM.TimeOfDay) {
                        NewSchedule = Basicdetails.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM.ToUserDateTimeString(CConstants.TimeFormat);
                        break;
                    }
                    else if (Basicdetails.Scheduletime.TimeOfDay <= Basicdetails.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM.TimeOfDay && String.IsNullOrEmpty(NewSchedule)) {
                        NewSchedule = Basicdetails.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM.ToUserDateTimeString(CConstants.TimeFormat);
                    }
                }
                else {
                    if (dtCurrentDate.TimeOfDay <= Basicdetails.AdminTimes.AdministrationScheduleTimes[i].DrugroundDTTM.TimeOfDay) {
                        NewSchedule = Basicdetails.AdminTimes.AdministrationScheduleTimes[i].DrugroundDTTM.ToUserDateTimeString(CConstants.TimeFormat);
                        break;
                    }
                    else if (Basicdetails.Scheduletime.TimeOfDay <= Basicdetails.AdminTimes.AdministrationScheduleTimes[i].DrugroundDTTM.TimeOfDay && String.IsNullOrEmpty(NewSchedule)) {
                        NewSchedule = Basicdetails.AdminTimes.AdministrationScheduleTimes[i].DrugroundDTTM.ToUserDateTimeString(CConstants.TimeFormat);
                    }
                }
            }
            if (String.IsNullOrEmpty(NewSchedule)) {
                if (Basicdetails != null && Basicdetails.AdminTimes != null && Basicdetails.AdminTimes.AdministrationScheduleTimes.Count > 0) {
                    NewSchedule = Basicdetails.AdminTimes.AdministrationScheduleTimes[0].ScheduleDTTM.ToUserDateTimeString(CConstants.TimeFormat);
                }
            }
            let objAmend: iMessageBox = new iMessageBox();
            objAmend.Title = "Lorenzo - Manage prescription";
            objAmend.MessageButton = MessageBoxButton.YesNo;
            objAmend.IconType = MessageBoxType.Question;
            objAmend.Width = 420;
            objAmend.MessageBoxClose  = (s,e) => { this.InfAmendFreqMsgBox_MessageBoxClose(s,e); } ;
            if (InfInprogress)
                objAmend.Message = "The infusion scheduled at " + inProgScheduleDTTM + "hrs; is currently in progress and the next administration is scheduled at " + NewSchedule + " hrs.";
            else if (Amendmessage)
                objAmend.Message = "Last infusion was scheduled at " + PrevSchedule + " hrs; \n next scheduled infusion is at " + NewSchedule + " hrs.";
            else objAmend.Message = "A infusion is due now at " + PrevSchedule + " hrs; \n next scheduled infusion is at " + NewSchedule + " hrs.";
            objAmend.Show();
        }
        InfAmendFreqMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult != MessageBoxResult.Yes) {
                let dtpStartDate: iDateTimePicker = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker);
                if (dtpStartDate instanceof iDateTimePicker) {
                    dtpStartDate.Focus();
                }
            }
            else {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null) {
                    this.oResolveItem.FormViewerDetails.FreqAmendment = true;
                    this.OKClickValidations();
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
        }
        private GetMCamendflag(IsLoad: boolean): void {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText) || this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText == "Select reason") {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.MCIDosageForm != null && this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm != null && this.oResolveItem.FormViewerDetails.BasicDetails.MCIDosageForm.Value != this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm.Value) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD = true;
                }
                else {
                    let nMCIDupCnt: number = objFormViewerDets.dupMulticomponentDetails.oMCItemBasicInfo.Count;
                    let nMCICnt: number = objFormViewerDets.MulticomponentDetails.oMCItemBasicInfo.Count;
                    for (let ncount: number = 0; ncount < nMCIDupCnt; ncount++) {
                        if ((nMCIDupCnt != nMCICnt) || ((objFormViewerDets.dupMulticomponentDetails.oMCItemBasicInfo[ncount].IdentifyingOID != objFormViewerDets.MulticomponentDetails.oMCItemBasicInfo[ncount].IdentifyingOID) || (objFormViewerDets.dupMulticomponentDetails.oMCItemBasicInfo[ncount].IdentifyingType != objFormViewerDets.MulticomponentDetails.oMCItemBasicInfo[ncount].IdentifyingType) || (objFormViewerDets.dupMulticomponentDetails.oMCItemBasicInfo[ncount].Quantity != objFormViewerDets.MulticomponentDetails.oMCItemBasicInfo[ncount].Quantity) || (objFormViewerDets.dupMulticomponentDetails.oMCItemBasicInfo[ncount].QuantityUOM != objFormViewerDets.MulticomponentDetails.oMCItemBasicInfo[ncount].QuantityUOM) || (objFormViewerDets.dupMulticomponentDetails.oMCItemBasicInfo[ncount].IsUpto != objFormViewerDets.MulticomponentDetails.oMCItemBasicInfo[ncount].IsUpto) || (objFormViewerDets.dupMulticomponentDetails.oMCItemBasicInfo[ncount].MCUomName != objFormViewerDets.MulticomponentDetails.oMCItemBasicInfo[ncount].MCUomName))) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD = true;
                            break;
                        }
                    }
                }
            }
            else if (this.ftbFormViewDetails.SelectedKey == "frmBasic" && this.oResolveItem.ActionCode == ActivityTypes.Amend && IsLoad) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD = false;
            }
        }
        private GettitratedAmendFlag(): void {
            let objFormViewerDets: BasicDetailsVM = new BasicDetailsVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails.BasicDetails;
            if (objFormViewerDets != null) {
                if (objFormViewerDets.ReasonforModification == null || String.IsNullOrEmpty(objFormViewerDets.ReasonforModification.DisplayText) || objFormViewerDets.ReasonforModification.DisplayText == "Select reason") {
                    let nTDDupCnt: number = objFormViewerDets.DupTitratedDoseVM.GrdTitrated.Count;
                    let nTDCnt: number = objFormViewerDets.TitratedDoseDetails.GrdTitrated.Count;
                    for (let ncount: number = 0; ncount < nTDDupCnt; ncount++) {
                        if (nTDDupCnt != nTDCnt) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.isTitratedRSNFORMOD = true;
                            break;
                        }
                        else {
                            if (objFormViewerDets.DupTitratedDoseVM.GrdTitrated[ncount].ScheduleTime != objFormViewerDets.TitratedDoseDetails.GrdTitrated[ncount].ScheduleTime) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.isTitratedRSNFORMOD = true;
                                break;
                            }
                            else if (objFormViewerDets.DupTitratedDoseVM.GrdTitrated[ncount].ScheduleDoseValue.Count() != objFormViewerDets.TitratedDoseDetails.GrdTitrated[ncount].ScheduleDoseValue.Count()) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.isTitratedRSNFORMOD = true;
                                break;
                            }
                            else if (objFormViewerDets.DupTitratedDoseVM.GrdTitrated[ncount].ScheduleDoseValue != null) {
                                for (let i: number = 0; i < objFormViewerDets.DupTitratedDoseVM.GrdTitrated[ncount].ScheduleDoseValue.Count(); i++) {
                                    if (objFormViewerDets.DupTitratedDoseVM.GrdTitrated[ncount].ScheduleDoseValue[i] != objFormViewerDets.TitratedDoseDetails.GrdTitrated[ncount].ScheduleDoseValue[i]) {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.isTitratedRSNFORMOD = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        private ValidFollowUpStartDate(): boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.FollowUpStatLaunch.Equals('S')) {
                let PreviousPrescStartDate: DateTime= DateTime.MinValue;
                let FollowUpPrescStartDate: DateTime= new DateTime(objFormViewerDets.BasicDetails.StartDTTM.DateTime.AddMinutes(objFormViewerDets.BasicDetails.StartPrescriptionTime.TimeOfDay.TotalMinutes).Ticks, DateTimeKind.Local);
                let Prevfirstscheduledatetime: DateTime= objFormViewerDets.BasicDetails.Firstscheduledatetime;
                if (Prevfirstscheduledatetime != null && DateTime.NotEquals(Prevfirstscheduledatetime, DateTime.MinValue)) {
                    PreviousPrescStartDate = Prevfirstscheduledatetime;
                }
                else {
                    PreviousPrescStartDate = new DateTime(objFormViewerDets.BasicDetails.FollowUpStatStartDTTM.DateTime.AddMinutes(objFormViewerDets.BasicDetails.FollowUpStatFirstAdmnSchTime.TimeOfDay.TotalMinutes).Ticks, DateTimeKind.Local);
                }
                if (DateTime.GreaterThanOrEqualTo(FollowUpPrescStartDate, PreviousPrescStartDate)) {
                    this.oResolveItem.FocusControl = "dtpStartDate";
                    this.objMsg.Message = Resource.MedicationForm.ValidateStartTime;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }

        private Techvalidatevalidation(): boolean {
            this.TechDefaultVal();
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (this.oResolveItem != null && this.oResolveItem.IsNextSupply) {
                return false;
            }
            if ((this.oResolveItem != null && objFormViewerDets != null && objFormViewerDets.TechValidateDetails != null && !objFormViewerDets.Popup) && (!String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.Quantity) || !String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.TotalQuantity) || !String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.QuantityUOM) || !String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.TotalQuantityUOM)) && this.frmViewTech != null && this.frmViewTech.cmdAdd != null && this.frmViewTech.cmdAdd.IsEnabled) {
                if (this.oResolveItem.formViewerDetails.TechValidateDetails.launchTechvalsupplyinstrmezzanineCheck) {
                    return false;
                }
                this.TeckOkVal();
                return false;
            }
            else if (this.frmViewTech != null && this.frmViewTech.cmdUpdate != null && this.frmViewTech.cmdUpdate.IsEnabled) {
                if (this.oResolveItem != null && objFormViewerDets != null && objFormViewerDets.TechValidateDetails != null && objFormViewerDets.TechValidateDetails.TechValidatedItems != null) {
                    let TechCount = objFormViewerDets.TechValidateDetails.TechValidatedItems.Count;
                    let nQtyPerDose: string, nTotalQty, sQntyUOM, sTotQntyUOM;
                    let oTechValidatedItem: TechValidatedItem = null;
                    let IsModified: boolean = false;
                    if (this.frmViewTech != null && this.frmViewTech.grdDosecombinations != null && this.frmViewTech.grdDosecombinations.SelectedItem != null)
                        oTechValidatedItem = <TechValidatedItem>(this.frmViewTech.grdDosecombinations.SelectedItem);
                    if (objFormViewerDets.TechValidateDetails.QuantityUOM != null)
                        sQntyUOM = objFormViewerDets.TechValidateDetails.QuantityUOM;
                    else sQntyUOM = String.Empty;
                    if (objFormViewerDets.TechValidateDetails.TotalQuantityUOM != null)
                        sTotQntyUOM = objFormViewerDets.TechValidateDetails.TotalQuantityUOM;
                    else sTotQntyUOM = String.Empty;
                    for (let i: number = 0; i < TechCount; i++) {
                        nQtyPerDose = objFormViewerDets.TechValidateDetails.TechValidatedItems[i].QuantityPerDose;
                        nTotalQty = objFormViewerDets.TechValidateDetails.TechValidatedItems[i].TotalQuantity;
                        if (!String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.TechValidatedItems[i].SupplyInstructionText))
                            this.sSupplyInst = objFormViewerDets.TechValidateDetails.TechValidatedItems[i].SupplyInstructionText;
                        if (!String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.TechValidatedItems[i].DispensingInstructionText))
                            this.sDispInst = objFormViewerDets.TechValidateDetails.TechValidatedItems[i].DispensingInstructionText;
                        if (oTechValidatedItem != null && oTechValidatedItem.DrugItem != null && objFormViewerDets.TechValidateDetails.TechValidatedItems[i].DrugItem != null && oTechValidatedItem.DrugItem.IdentifyingOID == objFormViewerDets.TechValidateDetails.TechValidatedItems[i].DrugItem.IdentifyingOID && oTechValidatedItem.DrugItem.IdentifyingType == objFormViewerDets.TechValidateDetails.TechValidatedItems[i].DrugItem.IdentifyingType && (!objFormViewerDets.Popup) && (((String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.Quantity) && !String.IsNullOrEmpty(nQtyPerDose)) || (!String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.Quantity) && String.IsNullOrEmpty(nQtyPerDose)) || (!String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.Quantity) && !String.IsNullOrEmpty(nQtyPerDose) && !String.Equals(objFormViewerDets.TechValidateDetails.Quantity, nQtyPerDose, StringComparison.InvariantCultureIgnoreCase))) || ((String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.TotalQuantity) && !String.IsNullOrEmpty(nTotalQty)) || (!String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.TotalQuantity) && String.IsNullOrEmpty(nTotalQty)) || (!String.IsNullOrEmpty(objFormViewerDets.TechValidateDetails.TotalQuantity) && !String.IsNullOrEmpty(nTotalQty) && !String.Equals(objFormViewerDets.TechValidateDetails.TotalQuantity, nTotalQty, StringComparison.InvariantCultureIgnoreCase))) || (sQntyUOM != objFormViewerDets.TechValidateDetails.TechValidatedItems[i].QuantityPerDoseUOM.Name) || (sTotQntyUOM != objFormViewerDets.TechValidateDetails.TechValidatedItems[i].TotalQuantityUOM.Name))) {
                            IsModified = true;
                            break;
                        }
                    }
                    if (IsModified) {
                        if (this.oResolveItem.formViewerDetails.TechValidateDetails.launchTechvalsupplyinstrmezzanineCheck) {
                            return false;
                        }
                        this.TeckOkVal();
                        return false;
                    }
                    else {
                        this.frmViewTech.ClearControlsInit();
                    }
                }
            }
            if (this.frmViewTech != null) {
                this.frmViewTech.DisposeFormEvents();
                this.frmViewTech.DisposeFormObjects();
                this.isTechOkCheck = false;
            }
            return true;
        }
        TeckOkVal(): void {
            let objTech: iMessageBox = new iMessageBox();
            objTech.Title = "Lorenzo - Manage prescription";
            objTech.MessageButton = MessageBoxButton.YesNo;
            objTech.IconType = MessageBoxType.Question;
            objTech.MessageBoxClose  = (s,e) => { this.objTechValMsgBox_MessageBoxClose(s,e); } ;
            objTech.Message = Resource.MedicationForm.SteppedDetailsModify_Message;
            objTech.Show();
        }
        objTechValMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                if(this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.frmViewTechValidatecmdUpdateThat != null){
                    if(this.frmViewTech.cmdUpdate == null){
                        if(this.frmViewTech.cmdAdd.IsEnabled)
                            this.frmViewTech.cmdAdd.IsEnabled = false;
                        this.frmViewTech.cmdUpdate = this.oResolveItem.FormViewerDetails.frmViewTechValidatecmdUpdateThat;
                    }
                }
                if (this.frmViewTech.cmdAdd.IsEnabled) {
                    if (!this.frmViewTech.AddClick())
                        return
                }
                else if (this.frmViewTech.cmdUpdate.IsEnabled) {
                    if (!this.frmViewTech.UpdateClick())
                        return
                }
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null) {
                    // this.oResolveItem.FormViewerDetails.Popup = true;
                    this.OKClickValidations();
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
            else {
                this.isSelected = true;
                this.frmViewTech.ClearControlsInit();
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null) {
                    this.oResolveItem.FormViewerDetails.frmViewTechValidatecmdUpdateThat = null;
                    // this.oResolveItem.FormViewerDetails.Popup = true;
                    this.OKClickValidations();
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
        }

        sDupliTimeDet: string = String.Empty;
        private showduplicate(): boolean {
            let bIsValid: boolean = true;
            this.sDupliTimeDet = String.Empty;
            let oAdminTimesVM: AdminScheduleTimeVM = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes;
            if (oAdminTimesVM != null && oAdminTimesVM.FreqDetails != null && oAdminTimesVM.FreqDetails.oFrequency != null && String.Equals(oAdminTimesVM.FreqDetails.oFrequency.Type, CConstants.PeriodFrequency, StringComparison.CurrentCultureIgnoreCase)) {
                this.sDupliTimeDet = oAdminTimesVM.duplicatecheck(true);
                if (!String.IsNullOrEmpty(this.sDupliTimeDet)) {
                    this.sDupliTimeDet = this.sDupliTimeDet.ToString().Substring(0, this.sDupliTimeDet.length - 1);
                    if (!oAdminTimesVM.IsMsgShownAlready) {
                        let objMsg: iMessageBox = new iMessageBox();
                        objMsg.MessageButton = MessageBoxButton.OK;
                        objMsg.Message = "Time" + " " + this.sDupliTimeDet + " " + "has already been selected as an administration time. Duplicate administration times cannot be added";
                        objMsg.Closed  = (s,e) => { this.objMsg_Closed(s,e); } ;
                        objMsg.Show();
                    }
                    bIsValid = false;
                    //Revisit Required
                    /*
                    this.frmViewBasic.FindName("adminslotuc");
                    this.frm = ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes);
                    let grdAdminTimes: iGrid = ObjectHelper.CreateType<iGrid>(this.frm.FindName("grdAdminTimes"), iGrid);
                    if (grdAdminTimes != null) {
                        let bindedCollection: ObservableCollection<AdminScheduleTime> = ObjectHelper.CreateType<ObservableCollection<AdminScheduleTime>>(grdAdminTimes.ItemsSource, ObservableCollection<AdminScheduleTime> );
                        grdAdminTimes.SelectedItem = bindedCollection[this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.LastDuplicateIndex];
                        this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.LastDuplicateIndex = -1;
                    }
                    */
                }
            }
            return bIsValid;
        }
        objMsg_Closed(sender: Object, e: EventArgs): void {
            this.sDupliTimeDet = String.Empty;
        }
        private ValidateDaysOfWeek(): boolean {
            let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            let IsAsRequired: boolean = this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired;
            if ((!String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase))) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DaysOfWeekVisibility == Visibility.Visible && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DrugFreqUOMCode) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DrugFreqUOMCode, "CC_MEDDRSN2", StringComparison.CurrentCultureIgnoreCase)) {
                    let nDayCnt: number = 0;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMon)
                        nDayCnt++;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsTue)
                        nDayCnt++;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsWed)
                        nDayCnt++;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsThu)
                        nDayCnt++;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsFri)
                        nDayCnt++;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsSat)
                        nDayCnt++;
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.IsSun)
                        nDayCnt++;
                    if (nDayCnt < this.oResolveItem.FormViewerDetails.BasicDetails.FrequencyLowEvent) {
                        this.ShowDaysOfWeekMsg();
                        return false;
                    }
                }
            }
            return true;
        }
        private ValidateAdminTimesDaysOfWeek(): boolean {
            let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            let IsAsRequired: boolean = this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired;
            let oAdminTimesVM: AdminScheduleTimeVM = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes;
            if ((this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder || this.oResolveItem.ActionCode == ActivityTypes.Amend) || IsAsRequired) {
                if (!this.ValidateDaysOfWeek()) {
                    return false;
                }
            }
            if ((!String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase)) && oAdminTimesVM != null) {
                if (((this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder || this.oResolveItem.ActionCode == ActivityTypes.Amend) && ProfileData.ScheduleConfig != null && ProfileData.ScheduleConfig.AdminTimeReqforPRN)) {
                    if (!oAdminTimesVM.ValidateDayOfWeek()) {
                        this.ShowDaysOfWeekMsg();
                        return false;
                    }
                }
                else if (!IsAsRequired) {
                    if (!oAdminTimesVM.ValidateDayOfWeek()) {
                        this.ShowDaysOfWeekMsg();
                        return false;
                    }
                }
            }
            else {
                if ((!String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) && !String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase)) && oAdminTimesVM != null && oAdminTimesVM.AdministrationScheduleTimes != null && oAdminTimesVM.AdministrationScheduleTimes.Count >= 0) {
                    let IsvaildTimes: number = oAdminTimesVM.AdministrationScheduleTimes.Where(c => c.ScheduleDTTM != DateTime.MinValue && c.ScheduleDTTM.ToUserDateTimeString("HH:mm") != "00:00").Select(s => s).Count();
                    if (IsvaildTimes > 0) {
                        if (!oAdminTimesVM.ValidateDayOfWeek()) {
                            this.ShowDaysOfWeekMsg();
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        private ShowDaysOfWeekMsg(): void {
            let objMsgBox: iMessageBox = new iMessageBox();
            this.oResolveItem.FocusControl = "cboFrequency";
            objMsgBox.Title = "Lorenzo - Manage prescription";
            objMsgBox.IconType = MessageBoxType.Information;
            objMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_MessageBoxDaysOfWeek(s,e); } ;
            objMsgBox.Message = Resource.MedicationForm.ManDaysofWeek;
            objMsgBox.MessageButton = MessageBoxButton.OK;
            objMsgBox.Show();
        }
        oMsgBox_MessageBoxDaysOfWeek(sender: Object, e: MessageEventArgs): void {
            //Revisit Required
            
            //this.frm = ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes);
            //this.frmweekdays = ObjectHelper.CreateType<frmWeekdays>(this.frmViewBasic.FindName("Weekdays"), frmWeekdays);
            if (this.frm != null) {
                let chkSunday: iCheckBox = ObjectHelper.CreateType<iCheckBox>(this.frm.FindName("chkSunday"), iCheckBox);
                if (chkSunday instanceof iCheckBox) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    chkSunday.Focus();
                }
            }
            if (this.frmweekdays != null) {
                let chkSunday: iCheckBox = ObjectHelper.CreateType<iCheckBox>(this.frmweekdays.FindName("chkSunday"), iCheckBox);
                if (chkSunday instanceof iCheckBox) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    chkSunday.Focus();
                }
            }
            if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase)) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase)) {
                    let ContentCtrlMedResolveStepped: ContentControl = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                   
                    if (ContentCtrlMedResolveStepped != null && ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) {
                        if ((ObjectHelper.CreateType<medConditionalDose>(ContentCtrlMedResolveStepped.Content, medConditionalDose)) != null) {
                           // this.frm = ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<medConditionalDose>(ContentCtrlMedResolveStepped.Content, medConditionalDose)).FindName("adminslotuc"), frmAdminSlotTimes);
                            if (this.frm != null) {
                                let checkSunday: iCheckBox = ObjectHelper.CreateType<iCheckBox>(this.frm.FindName("chkSunday"), iCheckBox);
                                if (checkSunday instanceof iCheckBox) {
                                    checkSunday.Focus();
                                }
                            }
                        }
                    }
                    
                }
            }
            
        }
        private ValidateAdminTimes(): boolean {
            let IsVaildTime: boolean = true;
            let nCntZero: number = 0;
            let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            let oAdminTimesVM: AdminScheduleTimeVM = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes;
            if (oAdminTimesVM != null && !this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired && oAdminTimesVM.IsAdminTimesEnabled && (String.Equals(sDoseType, DoseTypeCode.NORMAL, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.CONDITIONAL, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.TITRATED, StringComparison.OrdinalIgnoreCase))) {
                let nAdminSchTimeCount: number = oAdminTimesVM.AdministrationScheduleTimes == null ? 0 : oAdminTimesVM.AdministrationScheduleTimes.Count;
                IsVaildTime = oAdminTimesVM.AdministrationScheduleTimes != null && nAdminSchTimeCount > 0;
                if (IsVaildTime) {
                    for (let i: number = 0; i < nAdminSchTimeCount; i++) {
                        if (oAdminTimesVM.IsSlotTimeModeEnable && oAdminTimesVM.IsFixedTime && oAdminTimesVM.AdministrationScheduleTimes[i].ScheduleDTTM.TimeOfDay.TotalMinutes == 0) {
                            nCntZero++;
                            if (nCntZero > 1) {
                                IsVaildTime = false;
                                break;
                            }
                        }
                    }
                }
            }
            return IsVaildTime;
        }
        private ISBoosterValueisNegative(): Boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.InfusionDetails.InfBoosterDoseVisi == Visibility.Visible) {
                if (!objFormViewerDets.BasicDetails.IsValidateBoosterSafty && objFormViewerDets.BasicDetails.InfusionDetails != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose) && Convert.ToDecimal(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose) < 1) {
                    let objMsgBox: iMessageBox = new iMessageBox();
                    this.oResolveItem.FocusControl = "txtBoosterDose";
                    objMsgBox.Title = "Lorenzo - Manage prescription";
                    objMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_MessageBoxCloseBooster(s,e); } ;
                    objMsgBox.Message = Resource.Infusion.BooserDose_Safety_Msg;
                    objMsgBox.MessageButton = MessageBoxButton.YesNo;
                    objMsgBox.Show();
                    return true;
                }
            }
            return false;
        }
        private ISBolusValueisNegative(): Boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.InfusionDetails.isBolusMandatory) {
                if (!objFormViewerDets.BasicDetails.IsValidateBolusSafty && objFormViewerDets.BasicDetails.InfusionDetails.Bolus != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Bolus) && Convert.ToDecimal(objFormViewerDets.BasicDetails.InfusionDetails.Bolus) < 1) {
                    let objMsgBox: iMessageBox = new iMessageBox();
                    this.oResolveItem.FocusControl = "txtBolus";
                    objMsgBox.Title = "Lorenzo - Manage prescription";
                    objMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_MessageBoxCloseBolus(s,e); } ;
                    objMsgBox.Message = Resource.Infusion.Bolus_Safety_Msg;
                    objMsgBox.MessageButton = MessageBoxButton.YesNo;
                    objMsgBox.Show();
                    return true;
                }
            }
            return false;
        }
        public CheckRecAdminBolus(): boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.Dose) && (objFormViewerDets.BasicDetails.RecordAdmin.DoseUOMValue != null)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtDoseValue";
                    this.objMsg.Message = Resource.Infusion.Bolus_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.Dose) && Convert.ToDecimal(objFormViewerDets.BasicDetails.RecordAdmin.Dose) == 0) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtDoseValue";
                    this.objMsg.Message = Resource.Infusion.Bolus_Zero_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public CheckRecAdminDose(): boolean {
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Dose) && Convert.ToDecimal(this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Dose) == 0) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtDoseValue";
                    this.objMsg.Message = Resource.Infusion.RecAdminDose_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        private ISBolusValueisNegativeRecordAdmin(): Boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.RecordAdmin.Dose != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.RecordAdmin.Dose) && Convert.ToDecimal(objFormViewerDets.BasicDetails.RecordAdmin.Dose) < 1) {
                let sMsg: string = String.Empty;
                if (objFormViewerDets.BasicDetails.InfusionType != null && String.Compare(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) == 0)
                    sMsg = Resource.Infusion.Dose_Safety_Msg;
                else if (objFormViewerDets.BasicDetails.InfusionType != null && String.Compare(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA, StringComparison.CurrentCultureIgnoreCase) == 0)
                    sMsg = Resource.Infusion.Bolus_Safety_Msg;
                let objMsgBox: iMessageBox = new iMessageBox();
                this.oResolveItem.FocusControl = "txtDoseValue";
                objMsgBox.Title = "Lorenzo - Manage prescription";
                objMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_MessageBoxCloseBolusRecordAdmin(s,e); } ;
                objMsgBox.Message = sMsg;
                objMsgBox.MessageButton = MessageBoxButton.YesNo;
                objMsgBox.Show();
                return true;
            }
            return false;
        }
        DoseUOMBaseLzoID: string = String.Empty;
        DoseUOMMultiplier: number = 0;
        RateUOMBaseLzoID: string = String.Empty;
        RateUOMMultiplier: number = 0;
        InfRateRoundOffValueForDose: string = String.Empty;
        doseUOMOID: number;
        rateUOMOID: number;
        InfusionPeriodMismatch: boolean = false;
        private IsInfusionRateUOMChanged(): Boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            this.bIsShowMessage = false;
            this.IsInfCheckedAndPass = false;
            this.InfusionPeriodMismatch = false;
            if (objFormViewerDets.BasicDetails.InfusionDetails != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom != null && objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriodUom != null && objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom != null && objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriodUom != null && (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Dose) || !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume))) {
                if (objFormViewerDets.BasicDetails.InfusionDetails != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && Convert.ToDecimalwithThreeprecision(objFormViewerDets.BasicDetails.InfusionDetails.Rate) == 0) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboInfustionRateUOM";
                        this.objMsg.Message = "Infusion rate cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionType.Value) && (String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypeCode.INTERMITTENT) || String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypeCode.SINGLEDOSEVOLUME))) {
                    let IsDoseBasedInfRate: boolean = false;
                    let IsVolumeBasedInfRate: boolean = false;
                    if (objFormViewerDets.BasicDetails.InfusionDetails.IsVolumeChecked != null || objFormViewerDets.BasicDetails.InfusionDetails.IsDoseChecked != null) {
                        IsDoseBasedInfRate = !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Dose) && ((objFormViewerDets.BasicDetails.InfusionDetails.IsDoseChecked != null && Convert.ToBoolean(objFormViewerDets.BasicDetails.InfusionDetails.IsDoseChecked)) || (objFormViewerDets.BasicDetails.InfusionDetails.IsVolumeChecked != null && !Convert.ToBoolean(objFormViewerDets.BasicDetails.InfusionDetails.IsVolumeChecked)));
                        IsVolumeBasedInfRate = !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume) && ((objFormViewerDets.BasicDetails.InfusionDetails.IsVolumeChecked != null && Convert.ToBoolean(objFormViewerDets.BasicDetails.InfusionDetails.IsVolumeChecked)) || (objFormViewerDets.BasicDetails.InfusionDetails.IsDoseChecked != null && !Convert.ToBoolean(objFormViewerDets.BasicDetails.InfusionDetails.IsDoseChecked)));
                    }
                    if (!IsDoseBasedInfRate && !IsVolumeBasedInfRate) {
                        if (String.Equals(objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.DisplayText, InfusionVolume.ml) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Dose)) {
                            IsDoseBasedInfRate = false;
                            IsVolumeBasedInfRate = true;
                        }
                        else if (!String.Equals(objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.DisplayText, InfusionVolume.ml) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Dose)) {
                            IsDoseBasedInfRate = true;
                            IsVolumeBasedInfRate = false;
                        }
                        else if (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Dose)) {
                            IsDoseBasedInfRate = true;
                            IsVolumeBasedInfRate = false;
                        }
                        else if (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Dose) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume)) {
                            IsDoseBasedInfRate = false;
                            IsVolumeBasedInfRate = true;
                        }
                    }
                    if (objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriodUom.Value != objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom.Value && !this.bIsShowMessage) {
                        this.InfusionPeriodMismatch = true;
                    }
                    if (IsVolumeBasedInfRate && (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume) && Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume) > 0)) {
                        let sCalculatedInfusionrateValue: string = String.Empty;
                        let CalValu1: number = 0;
                        let IsInfRateMismatch: boolean = false;
                        CalValu1 = Math.Round(Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.FluidVolume) / Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriod), 3);
                        if (this.InfusionPeriodMismatch) {
                            CalValu1 = this.CalcInfRateForPeriodConversion(CalValu1);
                        }
                        if (CalValu1 > 0) {
                            sCalculatedInfusionrateValue = Math.Round(CalValu1, 3).ToString();
                        }
                        if (objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto != null) {
                            if (objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto.Value == Roundoff.NONE) {
                                IsInfRateMismatch = objFormViewerDets.BasicDetails.InfusionDetails.Rate != sCalculatedInfusionrateValue;
                            }
                            else if ((objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto.Value == Roundoff.NEARESRHALF) || (objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto.Value == Roundoff.NEARESTFULL)) {
                                if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue)) {
                                    IsInfRateMismatch = ((Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) < Convert.ToDouble(sCalculatedInfusionrateValue)) && (Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) < Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue))) || ((Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) > Convert.ToDouble(sCalculatedInfusionrateValue)) && (Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) > Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue)));
                                }
                            }
                        }
                        if (((!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && IsInfRateMismatch) || (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate))) && !this.bIsShowMessage && objFormViewerDets.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionType.Value)) {
                            if (this.objMsg != null && IsVolumeBasedInfRate) {
                                this.bIsShowMessage = true;
                                this.oResolveItem.FocusControl = "txtInfusionRate";
                                this.objMsg.Title = "Lorenzo - Manage prescription";
                                this.objMsg.Message = Resource.Infusion.InfusionRateChange_Msg;
                                this.objMsg.MessageButton = MessageBoxButton.OK;
                                this.objMsg.Show();
                                return false;
                            }
                        }
                        if (objFormViewerDets.BasicDetails.InfusionDetails.VolumeUOM != null && (objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.Value != objFormViewerDets.BasicDetails.InfusionDetails.VolumeUOM.Value) && !this.bIsShowMessage) {
                            if (this.objMsg != null) {
                                this.bIsShowMessage = true;
                                this.oResolveItem.FocusControl = "cboInfustionRateUOM";
                                this.objMsg.Title = "Lorenzo - manage prescription";
                                this.objMsg.Message = Resource.Infusion.InfusionRateChange_Msg;
                                this.objMsg.MessageButton = MessageBoxButton.OK;
                                this.objMsg.Show();
                                return false;
                            }
                        }
                    }
                    else if (IsDoseBasedInfRate && (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Dose) && Convert.ToDouble(objFormViewerDets.BasicDetails.Dose) > 0)) {
                        let sCalculatedInfusionrateValue: string = String.Empty;
                        let CalValu1: number = 0;
                        let IsInfRateMismatch: boolean = false;
                        if (objFormViewerDets.BasicDetails.DoseUOM != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.DoseUOM.DisplayText) && objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.DisplayText)) {
                            if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate) && !this.bIsShowMessage) {
                                if (this.objMsg != null) {
                                    this.bIsShowMessage = true;
                                    this.oResolveItem.FocusControl = "txtInfusionRate";
                                    this.objMsg.Title = "Lorenzo - manage prescription";
                                    this.objMsg.Message = Resource.Infusion.InfusionRateChangeDose_Msg;
                                    this.objMsg.MessageButton = MessageBoxButton.OK;
                                    this.objMsg.Show();
                                    this.IsInfCheckedAndPass = false;
                                    return false;
                                }
                            }
                            if (!this.bIsShowMessage && objFormViewerDets.BasicDetails.DoseUOM.Tag != null && objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag != null) {
                                if (String.Equals(objFormViewerDets.BasicDetails.DoseUOM.Tag, objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag)) {
                                    CalValu1 = Convert.ToDouble(objFormViewerDets.BasicDetails.Dose) / Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriod);
                                    if (this.InfusionPeriodMismatch) {
                                        CalValu1 = this.CalcInfRateForPeriodConversion(CalValu1);
                                    }
                                    if (CalValu1 > 0) {
                                        sCalculatedInfusionrateValue = Math.Round(CalValu1, 3).ToString();
                                    }
                                    if (objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto != null) {
                                        if (objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto.Value == Roundoff.NONE) {
                                            IsInfRateMismatch = objFormViewerDets.BasicDetails.InfusionDetails.Rate != sCalculatedInfusionrateValue;
                                        }
                                        else if ((objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto.Value == Roundoff.NEARESRHALF) || (objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto.Value == Roundoff.NEARESTFULL)) {
                                            if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue)) {
                                                IsInfRateMismatch = ((Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) < CalValu1) && (Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) < Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue))) || ((Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) > CalValu1) && (Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) > Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue)));
                                            }
                                        }
                                    }
                                    if (((!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && IsInfRateMismatch)) && !this.bIsShowMessage && objFormViewerDets.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionType.Value)) {
                                        if (this.objMsg != null) {
                                            this.bIsShowMessage = true;
                                            this.oResolveItem.FocusControl = "txtInfusionRate";
                                            this.objMsg.Title = "Lorenzo - Manage prescription";
                                            this.objMsg.Message = Resource.Infusion.InfusionRateChangeDose_Msg;
                                            this.objMsg.MessageButton = MessageBoxButton.OK;
                                            this.objMsg.Show();
                                            return false;
                                        }
                                    }
                                }
                                else if (!String.Equals(objFormViewerDets.BasicDetails.DoseUOM.Tag, objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag)) {
                                    if (objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto.Value)) {
                                        this.InfRateRoundOffValueForDose = objFormViewerDets.BasicDetails.InfusionDetails.InfusionRateRndto.Value;
                                    }
                                    if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.DoseUOM.Value) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.Value)) {
                                        this.doseUOMOID = Convert.ToInt64(objFormViewerDets.BasicDetails.DoseUOM.Value);
                                        this.rateUOMOID = Convert.ToInt64(objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.Value);
                                        let mcVersion: string = String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion) ? AppSessionInfo.AMCV : this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion;
                                        this.GetDoseUOMDetails(this.doseUOMOID, this.rateUOMOID, mcVersion);
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }
        public CalcInfRateForPeriodConversion(Rate: number): number {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            let CalculatedInfusionRate: number = Rate;
            try {
                if ((String.Compare(objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom.DisplayText, Conversion.hour, StringComparison.InvariantCultureIgnoreCase) == 0)) {
                    switch (objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText) {
                        case Conversion.minute:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) * 60), 3);
                            break;
                        case Conversion.day:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / 24), 3);
                            break;
                        case Conversion.week:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / (7 * 24)), 3);
                            break;
                    }
                }
                else if ((String.Compare(objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom.DisplayText, Conversion.minute, StringComparison.InvariantCultureIgnoreCase) == 0)) {
                    switch (objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText) {
                        case Conversion.hour:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / 60), 3);
                            break;
                        case Conversion.day:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / (24 * 60)), 3);
                            break;
                        case Conversion.week:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / (7 * 24 * 60)), 3);
                            break;
                    }
                }
                else if ((String.Compare(objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom.DisplayText, Conversion.day, StringComparison.InvariantCultureIgnoreCase) == 0)) {
                    switch (objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText) {
                        case Conversion.minute:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) * (24 * 60)), 3);
                            break;
                        case Conversion.hour:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) * 24), 3);
                            break;
                        case Conversion.week:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / (0.14)), 3);
                            break;
                    }
                }
                else if ((String.Compare(objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom.DisplayText, Conversion.week, StringComparison.InvariantCultureIgnoreCase) == 0)) {
                    switch (objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText) {
                        case Conversion.minute:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / (7 * 24 * 60)), 3);
                            break;
                        case Conversion.hour:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / (7 * 24)), 3);
                            break;
                        case Conversion.day:
                            CalculatedInfusionRate = Math.Round((Convert.ToDouble(Rate) / 7), 3);
                            break;
                    }
                }
            }
            catch (e) {
                CalculatedInfusionRate = Rate;
            }

            return CalculatedInfusionRate;
        }
        public GetDoseUOMDetails(firstDoseUOMOID: number, secondDoseUOMOID: number, mcVersion: string): void {
            let oReq: IPPManagePrescSer.CReqMsgGetDoseUOMDetails = new IPPManagePrescSer.CReqMsgGetDoseUOMDetails();
            oReq.mcVersionBC = mcVersion;
            oReq.oContextInformation = Common.FillContext();
            oReq.firstDoseUOMOIDBC = firstDoseUOMOID;
            oReq.secondDoseUOMOIDBC = secondDoseUOMOID;
            let objServiceProxy: IPPManagePrescSer.IPPMAManagePrescriptionWSSoapClient = new IPPManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
            objServiceProxy.GetDoseUOMDetailsCompleted  = (s,e) => { this.objServiceProxy_GetDoseUOMDetailsCompleted(s,e); } ;
            objServiceProxy.GetDoseUOMDetailsAsync(oReq);
        }
        IsInfCheckedAndPass: boolean = false;
        objServiceProxy_GetDoseUOMDetailsCompleted(sender: Object, e: IPPManagePrescSer.GetDoseUOMDetailsCompletedEventArgs): void {
            let _ErrorID: number = 80000012;
            let _ErrorSource: string = "LorAppManagePrescriptionBBUI_P2.dll, PrescriptionItemVM.GetDoseUOMDetailsCompleted()";
            if (e.Error == null) {
                try {
                    let oRes: IPPManagePrescSer.CResMsgGetDoseUOMDetails = e.Result;
                    if (oRes != null && oRes.doseUOMDetails != null && oRes.doseUOMDetails.Count > 0) {
                        this.DoseUOMBaseDetails = new ObservableCollection<IPPManagePrescSer.DoseUOMBaseDetails>();
                        oRes.doseUOMDetails.forEach( (objDoseUOMBaseDetails)=> {
                            let oDoseUOMBaseDetails: IPPManagePrescSer.DoseUOMBaseDetails = new IPPManagePrescSer.DoseUOMBaseDetails();
                            oDoseUOMBaseDetails.OID = objDoseUOMBaseDetails.OID;
                            oDoseUOMBaseDetails.LzoID = objDoseUOMBaseDetails.LzoID;
                            oDoseUOMBaseDetails.UOMBaseLzoID = objDoseUOMBaseDetails.UOMBaseLzoID;
                            oDoseUOMBaseDetails.UOMMultiplier = objDoseUOMBaseDetails.UOMMultiplier;
                            this.DoseUOMBaseDetails.Add(oDoseUOMBaseDetails);
                        });
                        if (this.DoseUOMBaseDetails != null && this.DoseUOMBaseDetails.Count > 0) {
                            let objFormViewerDets: FormViewerVM = new FormViewerVM();
                            objFormViewerDets = this.oResolveItem.FormViewerDetails;
                            this.DoseUOMBaseLzoID = this.DoseUOMBaseDetails.FirstOrDefault(x => x.OID == this.doseUOMOID).UOMBaseLzoID;
                            this.DoseUOMMultiplier = Convert.ToDouble(this.DoseUOMBaseDetails.FirstOrDefault(x => x.OID == this.doseUOMOID).UOMMultiplier);
                            this.RateUOMBaseLzoID = this.DoseUOMBaseDetails.FirstOrDefault(x => x.OID == this.rateUOMOID).UOMBaseLzoID;
                            this.RateUOMMultiplier = Convert.ToDouble(this.DoseUOMBaseDetails.FirstOrDefault(x => x.OID == this.rateUOMOID).UOMMultiplier);
                            if (!String.Equals(this.DoseUOMBaseLzoID, this.RateUOMBaseLzoID) && !this.bIsShowMessage) {
                                if (this.objMsg != null) {
                                    this.bIsShowMessage = true;
                                    this.oResolveItem.FocusControl = "cboInfustionRateUOM";
                                    this.objMsg.Title = "Lorenzo - manage prescription";
                                    this.objMsg.Message = Resource.Infusion.InfusionRateChangeDose_Msg;
                                    this.objMsg.MessageButton = MessageBoxButton.OK;
                                    this.objMsg.Show();
                                    this.IsInfCheckedAndPass = false;
                                }
                            }
                            else if (String.Equals(this.DoseUOMBaseLzoID, this.RateUOMBaseLzoID)) {
                                let sCalculatedInfusionrateValue: number = 0;
                                let CalValu1: number = 0;
                                let IsInfRateMismatch: boolean = false;
                                if (objFormViewerDets != null && objFormViewerDets.BasicDetails != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Dose) && objFormViewerDets.BasicDetails.InfusionDetails != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriod) && this.DoseUOMMultiplier > 0 && this.RateUOMMultiplier > 0) {
                                    CalValu1 = Convert.ToDouble(objFormViewerDets.BasicDetails.Dose) / Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.InfusionPeriod);
                                    if (this.InfusionPeriodMismatch) {
                                        CalValu1 = this.CalcInfRateForPeriodConversion(CalValu1);
                                        if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue)) {
                                            let roundOffCalcValue: number = this.CalcInfRateForPeriodConversion(Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue));
                                            if (roundOffCalcValue > 0) {
                                                objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue = roundOffCalcValue.ToString();
                                            }
                                        }
                                    }
                                    if (CalValu1 > 0) {
                                        sCalculatedInfusionrateValue = Math.Round(CalValu1, 3);
                                    }
                                    if (String.Equals(this.InfRateRoundOffValueForDose, Roundoff.NONE)) {
                                        IsInfRateMismatch = (sCalculatedInfusionrateValue * this.DoseUOMMultiplier) != (Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) * this.RateUOMMultiplier);
                                        if (IsInfRateMismatch && !this.bIsShowMessage) {
                                            if (this.objMsg != null) {
                                                this.bIsShowMessage = true;
                                                this.oResolveItem.FocusControl = "txtInfusionRate";
                                                this.objMsg.Title = "Lorenzo - manage prescription";
                                                this.objMsg.Message = Resource.Infusion.InfusionRateChangeDose_Msg;
                                                this.objMsg.MessageButton = MessageBoxButton.OK;
                                                this.objMsg.Show();
                                                this.IsInfCheckedAndPass = false;
                                            }
                                        }
                                        else if (!IsInfRateMismatch) {
                                            this.IsInfCheckedAndPass = true;
                                            if (objFormViewerDets != null && objFormViewerDets.BasicDetails != null && objFormViewerDets.BasicDetails.IsInfusionRateChanged) {
                                                objFormViewerDets.BasicDetails.IsInfusionRateChanged = false;
                                            }
                                            if (this.OKClickValidations()) {
                                                if (this.onDialogClose != null) {
                                                    this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                                                }
                                            }
                                        }
                                    }
                                    else if ((this.InfRateRoundOffValueForDose == Roundoff.NEARESRHALF) || (this.InfRateRoundOffValueForDose == Roundoff.NEARESTFULL)) {
                                        IsInfRateMismatch = (((Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) * this.RateUOMMultiplier) < (sCalculatedInfusionrateValue * this.DoseUOMMultiplier)) && ((Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) * this.RateUOMMultiplier) < (Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue) * this.DoseUOMMultiplier))) || ((Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) * this.RateUOMMultiplier) > (sCalculatedInfusionrateValue * this.DoseUOMMultiplier)) && ((Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate) * this.RateUOMMultiplier) > (Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.CalculatedInfusionrateValue) * this.DoseUOMMultiplier));
                                        if (IsInfRateMismatch && !this.bIsShowMessage) {
                                            if (this.objMsg != null) {
                                                this.bIsShowMessage = true;
                                                this.IsInfCheckedAndPass = false;
                                                this.oResolveItem.FocusControl = "txtInfusionRate";
                                                this.objMsg.Title = "Lorenzo - manage prescription";
                                                this.objMsg.Message = Resource.Infusion.InfusionRateChangeDose_Msg;
                                                this.objMsg.MessageButton = MessageBoxButton.OK;
                                                this.objMsg.Show();
                                            }
                                        }
                                        else if (!IsInfRateMismatch) {
                                            this.IsInfCheckedAndPass = true;
                                            if (objFormViewerDets != null && objFormViewerDets.BasicDetails != null && objFormViewerDets.BasicDetails.IsInfusionRateChanged) {
                                                objFormViewerDets.BasicDetails.IsInfusionRateChanged = false;
                                            }
                                            if (this.OKClickValidations()) {
                                                if (this.onDialogClose != null) {
                                                    this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
               catch(ex:any)  {
                    let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, ex);
                }

            }
            else {
                let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(_ErrorID, _ErrorSource, e.Error);
            }
        }
        public CheckVolume(): boolean {
            if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume) && Convert.ToDecimal(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume) == 0) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeMandatory && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume) || Convert.ToDecimal(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume) == 0))) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtVolume";
                    this.objMsg.Message = Resource.Infusion.Volume_Zero_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM != null)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtVolume";
                    this.objMsg.Message = Resource.Infusion.Volume_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public CheckVolumeUOM(): boolean {
            {
                if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume)) && Convert.ToDecimal(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume) > 0 && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM == null)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboVolumeUOM";
                        this.objMsg.Message = Resource.Infusion.VolumeUOM_Blank_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        public BoosterDose(): boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.InfusionDetails.InfBoosterDoseVisi == Visibility.Visible) {
                if ((String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose) || Convert.ToDecimal(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose) == 0) && (objFormViewerDets.BasicDetails.InfusionDetails.Boosterdoseuom != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdoseuom.Value) && String.Compare(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdoseuom.Value, "0", StringComparison.CurrentCultureIgnoreCase) != 0)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtBoosterDose";
                        this.objMsg.Message = Resource.Infusion.BoosterDose_Zero_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose) && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose.ToString().Where(String.IsLetter).ToArray().join('')) && !objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose.ToString().Trim().Contains(" ")) {
                    if (!String.Equals(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose, Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose).ToString())) {
                        objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose = Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Boosterdose).ToString();
                    }
                }
            }
            return true;
        }
        public BoosterDoseUOM(): boolean {
            if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose)) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom == null)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboBoosterUOM";
                    this.objMsg.Message = Resource.Infusion.BoosterUOM_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public InfusionPeriod(): boolean {
            if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) && Convert.ToDecimal(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) == 0) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusionPeriodMandatory && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) || Convert.ToDecimal(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) == 0))) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtInfusionperiod";
                    this.objMsg.Message = Resource.Infusion.InfuPer_Zero_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom != null)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtInfusionperiod";
                    this.objMsg.Message = Resource.Infusion.InfuPer_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public InfusionPeriodUOM(): boolean {
            if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod)) && Convert.ToDecimal(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) > 0 && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom == null)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboinfustionPeriodUOM";
                    this.objMsg.Message = Resource.Infusion.InfuPerUOM_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public InfConcentration(): boolean {
            if (((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration)) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationMandatory) || ((String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration, "0")) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationMandatory)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtLowConcentration";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration) || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration.toString().Equals("0"))) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM.Value)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtLowConcentration";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration) || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration.toString().Equals("0"))) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM.Value)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtLowConcentration";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM.Value, "0")))) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboLowConcentrationUOMlist";
                    this.objMsg.Message = "Concentration UOM cannot be blank.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration, "0")) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtUpperConcentration";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration) || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration.toString().Equals("0"))) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM.Value)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtUpperConcentration";
                    this.objMsg.Message = "Concentration cannot be zero or empty.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM.Value, "0")))) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboUpperConcentrationUOMlist";
                    this.objMsg.Message = "Concentration UOM cannot be blank.";
                    this.objMsg.Show();
                    return false;
                }
            }
            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM.Value)) {
                if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration, "0")) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtUpperConcentration";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM != null && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM.DisplayText)))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtUpperConcentration";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration) || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration.toString().Equals("0"))) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM.Value)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtUpperConcentration";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM.Value, "0")))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboUpperConcentrationUOMlist";
                        this.objMsg.Message = "Concentration UOM cannot be blank.";
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM.Value)) {
                if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration, "0")) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtLowConcentration";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM != null && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM.DisplayText)))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtLowConcentration";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration) || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration.toString().Equals("0"))) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM.Value)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtLowConcentration";
                        this.objMsg.Message = "Concentration cannot be zero or empty.";
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM.Value, "0")))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboLowConcentrationUOMlist";
                        this.objMsg.Message = "Concentration UOM cannot be blank.";
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        public InfusionRate(): boolean {
            let msg: string;
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if ((objFormViewerDets.BasicDetails.InfusionType != null) && (String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypesCode.PCA, StringComparison.OrdinalIgnoreCase)) && (objFormViewerDets.BasicDetails.InfusionDetails.InfInfusionRateVisi == Visibility.Visible))
                msg = Resource.Infusion.lblInfusionRateLabel_Text;
            else if ((objFormViewerDets.BasicDetails.itemSubType != null) && (String.Equals(objFormViewerDets.BasicDetails.itemSubType, "CC_MEDGAS", StringComparison.OrdinalIgnoreCase))) {
                msg = Resource.Infusion.FlowrateLabel_Msg;
            }
        else msg = Resource.Infusion.lblInfusionRateLabel1_Text;
        if (objFormViewerDets.BasicDetails.InfusionDetails != null && objFormViewerDets.BasicDetails.DoseType != null && (!String.Equals(objFormViewerDets.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.OrdinalIgnoreCase))) {
            let dLRate: number = 0, dURate = 0;
            Number.TryParse(objFormViewerDets.BasicDetails.InfusionDetails.Rate, (o) => { dLRate = o });
            Number.TryParse(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate, (o) => { dURate = o });
            if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate)) {
                if (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate?.toString().Where(String.IsLetter).ToArray().join('')) && !objFormViewerDets.BasicDetails.InfusionDetails.Rate?.toString().Trim().Contains(" ")) {
                    if (!String.Equals(objFormViewerDets.BasicDetails.InfusionDetails.Rate, Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate, 3).ToString())) {
                        objFormViewerDets.BasicDetails.InfusionDetails.Rate = Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.Rate).ToString();
                    }
                }
                else {
                    Number.TryParse(objFormViewerDets.BasicDetails.InfusionDetails.Rate, (o) => { dLRate = o });
                }
            }
            if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate)) {
                if (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate?.toString().Where(String.IsLetter).ToArray().join('')) && !objFormViewerDets.BasicDetails.InfusionDetails.UpperRate?.toString().Trim().Contains(" ")) {
                    let sUpperRate: string = String.Empty;
                    sUpperRate = Convert.ToDouble(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate).ToString();
                    if (!String.Equals(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate, sUpperRate)) {
                        objFormViewerDets.BasicDetails.InfusionDetails.UpperRate = sUpperRate;
                    }
                }
                    else {
                        Number.TryParse(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate, (o) => {dURate=o});
                    }
                }
                if (objFormViewerDets.BasicDetails.InfusionDetails != null && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate)) {
                    if ((objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom != null) && (objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom == null)) {
                        if (this.objMsg != null) {
                            if ((objFormViewerDets.BasicDetails.itemSubType != null) && (String.Equals(objFormViewerDets.BasicDetails.itemSubType, "CC_MEDGAS", StringComparison.OrdinalIgnoreCase)))
                                this.oResolveItem.FocusControl = "txtFlowRate";
                            else this.oResolveItem.FocusControl = "txtInfusionRate";
                            this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                            this.objMsg.Show();
                            return false;
                        }
                    }
                    else if ((objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom == null) && (objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom != null)) {
                        if (this.objMsg != null) {
                            if ((objFormViewerDets.BasicDetails.itemSubType != null) && (String.Equals(objFormViewerDets.BasicDetails.itemSubType, "CC_MEDGAS", StringComparison.OrdinalIgnoreCase)))
                                this.oResolveItem.FocusControl = "txtFlowRate";
                            else this.oResolveItem.FocusControl = "txtInfusionRate";
                            this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                            this.objMsg.Show();
                            return false;
                        }
                    }
                    else if ((objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom.Value)) && (objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom.Value))) {
                        if (this.objMsg != null) {
                            if ((objFormViewerDets.BasicDetails.itemSubType != null) && (String.Equals(objFormViewerDets.BasicDetails.itemSubType, "CC_MEDGAS", StringComparison.OrdinalIgnoreCase)))
                                this.oResolveItem.FocusControl = "txtFlowRate";
                            else this.oResolveItem.FocusControl = "txtInfusionRate";
                            this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                            this.objMsg.Show();
                            return false;
                        }
                    }
                    else if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate) && Convert.ToDecimal(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate) <= 0) {
                        if (this.objMsg != null) {
                            this.oResolveItem.FocusControl = "txtUpperInfusionRate";
                            this.objMsg.Message = "Upper " + Resource.Infusion.lblInfusionRateLabelforlower_Text + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                            this.objMsg.MessageButton = MessageBoxButton.OK;
                            this.objMsg.Show();
                            return false;
                        }
                    }
                    else if (dLRate > 0 && dURate > 0 && dLRate == dURate) {
                        this.oResolveItem.FocusControl = "txtUpperInfusionRate";
                        this.objMsg.Message = "Lower and upper limit values are the same. Please change either.";
                        this.objMsg.MessageButton = MessageBoxButton.OK;
                        this.objMsg.Show();
                        return false;
                    }
                    else if (dLRate > 0 && dURate > 0 && dLRate > dURate) {
                        if (this.objMsg != null) {
                            this.oResolveItem.FocusControl = "txtInfusionRate";
                            this.objMsg.Message = "Upper limit value is less than the lower limit value. Please change the value.";
                            this.objMsg.MessageButton = MessageBoxButton.OK;
                            this.objMsg.Show();
                        }
                        return false;
                    }
                }
                if (objFormViewerDets.BasicDetails.InfusionDetails != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && Convert.ToDecimalwithThreeprecision(objFormViewerDets.BasicDetails.InfusionDetails.Rate) == 0) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtInfusionRate";
                        this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate) && Convert.ToDecimal(objFormViewerDets.BasicDetails.InfusionDetails.UpperRate) <= 0) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtUpperInfusionRate";
                        this.objMsg.Message = "Upper " + Resource.Infusion.lblInfusionRateLabelforlower_Text + " " + Resource.Infusion.InfusionRate_Zero_Msg;
                        this.objMsg.MessageButton = MessageBoxButton.OK;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (dLRate > 0 && dURate > 0 && dLRate == dURate) {
                    this.oResolveItem.FocusControl = "txtUpperInfusionRate";
                    this.objMsg.Message = "Lower and upper limit values are the same. Please change either.";
                    this.objMsg.MessageButton = MessageBoxButton.OK;
                    this.objMsg.Show();
                    return false;
                }
                else if (dLRate > 0 && dURate > 0 && dLRate > dURate) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtInfusionRate";
                        this.objMsg.Message = "Upper limit value is less than the lower limit value. Please change the value.";
                        this.objMsg.MessageButton = MessageBoxButton.OK;
                        this.objMsg.Show();
                    }
                    return false;
                }
                if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && (objFormViewerDets.BasicDetails.InfusionDetails.InfRateNumeratorUom == null)) {
                    if (this.objMsg != null) {
                        if ((objFormViewerDets.BasicDetails.itemSubType != null) && (String.Equals(objFormViewerDets.BasicDetails.itemSubType, "CC_MEDGAS", StringComparison.OrdinalIgnoreCase)))
                            this.oResolveItem.FocusControl = "cboUOMFlowrate";
                        else this.oResolveItem.FocusControl = "cboInfustionRateUOM";
                        this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRateUOM_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Rate) && (objFormViewerDets.BasicDetails.InfusionDetails.InfRateDinominatorUom == null)) {
                    if (this.objMsg != null) {
                        if ((objFormViewerDets.BasicDetails.itemSubType != null) && (String.Equals(objFormViewerDets.BasicDetails.itemSubType, "CC_MEDGAS", StringComparison.OrdinalIgnoreCase)))
                            this.oResolveItem.FocusControl = "cboUOMFlowrate1";
                        else this.oResolveItem.FocusControl = "cboInfusionRateUOM";
                        this.objMsg.Message = msg + " " + Resource.Infusion.InfusionRateUOM_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        public CheckDurationEmpty(): boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.DurationUOM != null && (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.DurationUOM.Value) && !String.Equals(objFormViewerDets.BasicDetails.DurationUOM.Value, "0", StringComparison.OrdinalIgnoreCase)) && (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Duration) || String.Equals(Convert.ToString(objFormViewerDets.BasicDetails.Duration), "0", StringComparison.OrdinalIgnoreCase))) {
                this.oResolveItem.FocusControl = "udDuration";
                this.objMsg.Message = Resource.MedicationForm.DurationEmpty_Message;
                this.objMsg.Show();
                return false;
            }
            else if ((!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.Duration) && Convert.ToDouble(objFormViewerDets.BasicDetails.Duration) > 0) && (objFormViewerDets.BasicDetails.DurationUOM == null || String.IsNullOrEmpty(objFormViewerDets.BasicDetails.DurationUOM.Value))) {
                this.oResolveItem.FocusControl = "cboDuration";
                this.objMsg.Message = "Duration UOM cannot be blank";
                this.objMsg.Show();
                return false;
            }
            else if ((String.Compare(Convert.ToString(objFormViewerDets.BasicDetails.Duration), "0") == 0) && (objFormViewerDets.BasicDetails.DurationUOM == null)) {
                this.oResolveItem.FocusControl = "udDuration";
                this.objMsg.Message = Resource.MedicationForm.DurationEmpty_Message;
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        public CheckBolus(): boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Bolus) && (objFormViewerDets.BasicDetails.InfusionDetails.BolusUOM != null) && !(String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.BolusUOM.Value)) && (String.Compare(objFormViewerDets.BasicDetails.InfusionDetails.BolusUOM.Value, "0") != 0)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtBolus";
                    this.objMsg.Message = Resource.Infusion.Bolus_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            if (!String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Bolus) && Convert.ToDecimal(objFormViewerDets.BasicDetails.InfusionDetails.Bolus) == 0) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "txtBolus";
                    this.objMsg.Message = Resource.Infusion.Bolus_Zero_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            if (objFormViewerDets.BasicDetails.InfusionDetails.BolusUOM == null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.Bolus)) {
                if (this.objMsg != null) {
                    this.oResolveItem.FocusControl = "cboBolusUOM";
                    this.objMsg.Message = Resource.Infusion.BolusUOM_Blank_Msg;
                    this.objMsg.Show();
                    return false;
                }
            }
            return true;
        }
        public CheckMonitoringPeriod(): boolean {
            let objFormViewerDets: FormViewerVM = new FormViewerVM();
            objFormViewerDets = this.oResolveItem.FormViewerDetails;
            if (objFormViewerDets.BasicDetails.InfusionDetails.IsMandatoryMonitoringPeriod && objFormViewerDets.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionType.Value) && (String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS) || String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypeCode.SINGLEDOSEVOLUME) || String.Equals(objFormViewerDets.BasicDetails.InfusionType.Value, InfusionTypeCode.FLUID)) && objFormViewerDets.BasicDetails.DoseType != null && String.Equals(objFormViewerDets.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.OrdinalIgnoreCase)) {
                if (String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.MonitoringPeriod)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtMonitoringdevice";
                        this.objMsg.Message = Resource.Infusion.MoniPer_Zero_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (Convert.ToDecimal(objFormViewerDets.BasicDetails.InfusionDetails.MonitoringPeriod) == 0) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtMonitoringdevice";
                        this.objMsg.Message = Resource.Infusion.MoniPer_Zero_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                if (objFormViewerDets.BasicDetails.InfusionDetails.MonitoringPeriodUOM == null && String.IsNullOrEmpty(objFormViewerDets.BasicDetails.InfusionDetails.MonitoringPeriod) && Convert.ToDecimal(objFormViewerDets.BasicDetails.InfusionDetails.MonitoringPeriod) == 0) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboMonitoringdeviceUOM";
                        this.objMsg.Message = Resource.Infusion.MoniPerUOM_Blank_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        public CheckLockoutPeriod(): boolean {
            if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase)) {
                if ((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod, "0", StringComparison.OrdinalIgnoreCase))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtLockoutPeriod";
                        this.objMsg.Message = Resource.Infusion.LOP_Blank_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if ((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod) || (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod, "0") == 0)) && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.Value, "0") != 0))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtLockoutPeriod";
                        this.objMsg.Message = Resource.Infusion.LOP_Blank_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod, "0") != 0)) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.Value) && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.Value, "0") == 0))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboLockoutPeriodUOM";
                        this.objMsg.Message = Resource.Infusion.LOPUOM_Blank_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            else {
                if ((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod) || String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod, "0") == 0)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtLockoutPeriod";
                        this.objMsg.Message = Resource.Infusion.LOP_Blank_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if ((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod) || (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod, "0", StringComparison.OrdinalIgnoreCase))) && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.Value) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.Value, "0", StringComparison.OrdinalIgnoreCase)))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtLockoutPeriod";
                        this.objMsg.Message = Resource.Infusion.LOP_Blank_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (((!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod, "0", StringComparison.OrdinalIgnoreCase))) && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration == null || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.Value, "0", StringComparison.OrdinalIgnoreCase)))) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "cboLockoutPeriodUOM";
                        this.objMsg.Message = Resource.Infusion.LOPUOM_Blank_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        private ValidateMonitoringPeriod(): boolean {
            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM.DisplayText) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration)) {
                let CurrentDTTM: DateTime= CommonBB.GetServerDateTime();
                let DurationDTTM: DateTime= DateTime.MinValue;
                let MonPrdDTTM: DateTime= DateTime.MinValue;
                if (!String.IsNullOrEmpty(this.cboDuration.GetValue()) && !String.IsNullOrEmpty(this.udDuration.Value.ToString()) && this.udDuration.Value > 0) {
                    switch (this.cboDuration.GetValue()) {
                        case "CC_MINUTES":
                            DurationDTTM = CurrentDTTM.AddMinutes(this.udDuration.Value);
                            break;
                        case "CC_HOURS":
                            DurationDTTM = CurrentDTTM.AddHours(this.udDuration.Value);
                            break;
                        case "CC_MEDDRSN1":
                            DurationDTTM = CurrentDTTM.AddDays(this.udDuration.Value);
                            break;
                        case "CC_MEDDRSN2":
                            DurationDTTM = CurrentDTTM.AddDays(this.udDuration.Value * 7);
                            break;
                        case "CC_MEDRSN3":
                            DurationDTTM = CurrentDTTM.AddMonths(Convert.ToInt32(this.udDuration.Value));
                            break;
                        case "CC_MEDRSN4":
                            DurationDTTM = CurrentDTTM.AddYears(Convert.ToInt32(this.udDuration.Value));
                            break;
                    }
                }
                if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM.DisplayText) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod)) {
                    let MonPrdUOM: number = Convert.ToDouble(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod);
                    switch (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM.DisplayText) {
                        case "minute":
                            MonPrdDTTM = CurrentDTTM.AddMinutes(MonPrdUOM);
                            break;
                        case "hour":
                            MonPrdDTTM = CurrentDTTM.AddHours(MonPrdUOM);
                            break;
                        case "day":
                            MonPrdDTTM = CurrentDTTM.AddDays(MonPrdUOM);
                            break;
                        case "week":
                            MonPrdDTTM = CurrentDTTM.AddDays(MonPrdUOM * 7);
                            break;
                        case "month":
                            MonPrdDTTM = CurrentDTTM.AddMonths(Convert.ToInt32(MonPrdUOM));
                            break;
                        case "year":
                            MonPrdDTTM = CurrentDTTM.AddYears(Convert.ToInt32(MonPrdUOM));
                            break;
                    }
                }
                if (DateTime.NotEquals(DurationDTTM, DateTime.MinValue) && DateTime.NotEquals(MonPrdDTTM, DateTime.MinValue) && DateTime.GreaterThanOrEqualTo(MonPrdDTTM, DurationDTTM)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtMonitoringdevice";
                        this.objMsg.Message = Resource.Infusion.MonitoringPeriod_Msg;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        private IsDoseValueIsZero(dDose: number): Boolean {
            if ((this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateDose) && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.NORMAL, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.OrdinalIgnoreCase)) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Dose) && (dDose < 0.001)) {
                this.oResolveItem.FocusControl = "txtLowerDose";
                let oMsgBox: iMessageBox = new iMessageBox();
                oMsgBox.Message = "Dose value cannot be zero or empty.";
                oMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_MessageBoxCloseDose(s,e); } ;
                oMsgBox.IconType = MessageBoxType.Information;
                oMsgBox.Title = "Lorenzo - Manage prescription";
                oMsgBox.Tag = "Dose";
                oMsgBox.Show();
                return true;
            }
            return false;
        }
        private IsDoseSafety(dDose: number): Boolean {
            let dUpperDose: number;
            if ((!this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateDoseSafty && this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateDose) && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.NORMAL, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.OrdinalIgnoreCase)) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Dose) && (dDose < 1 && dDose > 0)) {
                this.oResolveItem.FocusControl = "txtLowerDose";
                let oMsgBox: iMessageBox = new iMessageBox();
                oMsgBox.Title = "Lorenzo - Manage prescription";
                oMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_MessageBoxClose(s,e); } ;
                oMsgBox.Message = "For safety, avoid entering a dose value of less than 1, change unit of measure if necessary. Do you wish to continue?";
                oMsgBox.MessageButton = MessageBoxButton.YesNo;
                oMsgBox.Show();
                return true;
            }
            else if ((!this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateDoseSafty && this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateDose) && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose)) {
                Number.TryParse(this.oResolveItem.FormViewerDetails.BasicDetails.UpperDose, (o) => {dUpperDose=o});
                if (dUpperDose < 1 && dUpperDose > 0) {
                    this.oResolveItem.FocusControl = "txtUpperDose";
                    let oMsgBox: iMessageBox = new iMessageBox();
                    oMsgBox.Title = "Lorenzo - Manage prescription";
                    oMsgBox.MessageBoxClose  = (s,e) => { this.oMsgBox_MessageBoxClose(s,e); } ;
                    oMsgBox.Message = "For safety, avoid entering a dose value of less than 1, change unit of measure if necessary. Do you wish to continue?";
                    oMsgBox.MessageButton = MessageBoxButton.YesNo;
                    oMsgBox.Tag = "UpperDose";
                    oMsgBox.Show();
                    return true;
                }
            }
            return false;
        }
        private IsNextAdminTimeIsTomorrow(): Boolean {
            let bReturn: boolean = false;
            let dtCurrent: DateTime= CommonBB.GetServerDateTime();
            if (this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM, CConstants.OnceOnlyFrequency, StringComparison.OrdinalIgnoreCase) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.Type, "CC_PERIOD", StringComparison.OrdinalIgnoreCase) && DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date, dtCurrent.Date)) {
                let sMaxTime: DateTime;
                let oAdminTimesVM: AdminScheduleTimeVM = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes;
                if (oAdminTimesVM != null && oAdminTimesVM.AdministrationScheduleTimes != null && oAdminTimesVM.AdministrationScheduleTimes.Count > 0 && this.IsAsRequiredWithZeroHoursAndMins(this.oResolveItem)) {
                    if (oAdminTimesVM.IsSlotTimeModeEnable && oAdminTimesVM.IsDrugroundTime) {
                        sMaxTime = oAdminTimesVM.AdministrationScheduleTimes.Select(y=>y.DrugroundDTTM).Max(o=>o);  
                    }
                    else {
                        sMaxTime = oAdminTimesVM.AdministrationScheduleTimes.Select(y=>y.ScheduleDTTM).Max(o=>o);                        
                    }
                    if (DateTime.GreaterThan(dtCurrent.DateTime.AddHours(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime.Hour).AddMinutes(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime.Minute), dtCurrent.DateTime.AddMinutes(sMaxTime.TimeOfDay.TotalMinutes)) && this.frmViewBasic != null && ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes) != null) {
                        let oMsgBox: iMessageBox = new iMessageBox();
                        oMsgBox.MessageBoxClose  = (s,e) => { this.oMaxTimeMsgBox_MessageBoxClose(s,e); } ;
                        oMsgBox.Title = "LORENZO";
                        oMsgBox.Message = "The next available administration time is tomorrow. Click Ok to schedule tomorrow";
                        oMsgBox.MessageButton = MessageBoxButton.OKCancel;
                        oMsgBox.Show();
                        bReturn = true;
                    }
                }
            }
            return bReturn;
        }
        public IsAsRequiredWithZeroHoursAndMins(oResolveItem: PrescriptionItemVM): boolean {
            let oAdminTimesVM: AdminScheduleTimeVM;
            if (oResolveItem != null && oResolveItem.FormViewerDetails != null && oResolveItem.FormViewerDetails.BasicDetails != null && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && oResolveItem.FormViewerDetails.BasicDetails.AsRequired) {
                oAdminTimesVM = oResolveItem.FormViewerDetails.BasicDetails.AdminTimes;
                if (oAdminTimesVM.IsFixedTime) {
                    if (oAdminTimesVM.AdministrationScheduleTimes != null && oAdminTimesVM.AdministrationScheduleTimes.Count > 0 && DateTime.NotEquals(oAdminTimesVM.AdministrationScheduleTimes[0].ScheduleDTTM, DateTime.MinValue) && oAdminTimesVM.AdministrationScheduleTimes[0].ScheduleDTTM.Hour == 0 && oAdminTimesVM.AdministrationScheduleTimes[0].ScheduleDTTM.Minute == 0)
                        return false;
                }
                else if (oAdminTimesVM.IsDrugroundTime) {
                    if (oAdminTimesVM.AdministrationScheduleTimes != null && oAdminTimesVM.AdministrationScheduleTimes.Count > 0 && DateTime.NotEquals(oAdminTimesVM.AdministrationScheduleTimes[0].DrugroundDTTM, DateTime.MinValue) && oAdminTimesVM.AdministrationScheduleTimes[0].DrugroundDTTM.Hour == 0 && oAdminTimesVM.AdministrationScheduleTimes[0].DrugroundDTTM.Minute == 0)
                        return false;
                }
            }
            return true;
        }
        GetDeactiveAttributeMessage(): string {
            if (this.oResolveItem == null || String.IsNullOrEmpty(this.oResolveItem.IsDeactivate) || this.oDefaultBasicDetails == null)
                return String.Empty;
            let resultMessage: string = String.Empty;
            let sStartmsg: string = "The value entered for ";
            let sEndmsg: string = " is no longer valid. Enter another value";
            let IsFrequencyModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && this.oDefaultBasicDetails.Frequency != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.Frequency,this.oResolveItem.FormViewerDetails.BasicDetails.Frequency) : false;
            let IsDosageFormModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm != null && this.oDefaultBasicDetails.DosageForm != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.DosageForm,this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm) : false;
            let IsQuantityUOMModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM != null && this.oDefaultBasicDetails.QuantityUOM != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.QuantityUOM,this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM) : false;
            let IsRouteModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oDefaultBasicDetails.Route != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.Route,this.oResolveItem.FormViewerDetails.BasicDetails.Route) : false;
            let IsDoseUOMModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM != null && this.oDefaultBasicDetails.DoseUOM != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.DoseUOM,this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM) : false;
            let IsSiteModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.Site != null && this.oDefaultBasicDetails.Site != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.Site,this.oResolveItem.FormViewerDetails.BasicDetails.Site) : false;
            let IsAdminInstructionModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.AdminInstruction != null && this.oDefaultBasicDetails.AdminInstruction != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.AdminInstruction,this.oResolveItem.FormViewerDetails.BasicDetails.AdminInstruction) : false;
            let IsAdminMethodModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod != null && this.oDefaultBasicDetails.AdminMethod != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.AdminMethod,this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod) : false;
            let IsProblemIndicationModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication != null && this.oDefaultBasicDetails.ProblemIndication != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.ProblemIndication,this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication) : false;
            let IsPatientProblemCodeModified: boolean = (this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode != null && this.oDefaultBasicDetails.PatientProblemCode != null) ? ObjectHelper.Equals(this.oDefaultBasicDetails.PatientProblemCode,this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode) : false;
            let Ischeck: boolean = false;
            let IsDeactive: string[] = !String.IsNullOrEmpty(this.oResolveItem.IsDeactivate) ? this.oResolveItem.IsDeactivate.Split('-') : null;
            let problem: string[] = (IsDeactive != null && !String.IsNullOrEmpty(IsDeactive[3])) ? IsDeactive[3].Split('^') : null;
            if (IsDeactive != null && IsDeactive.length == 0)
                return String.Empty;
            if (String.Equals(IsDeactive[0], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsAdminInstructionModified) {
                sStartmsg += "Administration instructions" + ",";
                Ischeck = true;
            }
            if (String.Equals(IsDeactive[1], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsAdminMethodModified) {
                sStartmsg += "Administration method" + ",";
                Ischeck = true;
            }
            if (String.Equals(IsDeactive[2], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsSiteModified) {
                sStartmsg += "Site" + ",";
                Ischeck = true;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication) && problem != null && problem.length > 0 && String.Equals(problem[1], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsProblemIndicationModified && IsPatientProblemCodeModified) {
                let bdeactive: boolean = false;
                if (!String.Equals(problem[0], "TRUE", StringComparison.CurrentCultureIgnoreCase)) {
                    let sProblem: string[] = problem[0].Split(',');
                    let nLength: number = sProblem.length;
                    for (let i = 0; i < nLength - 1; i++) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication.IndexOf(sProblem[i]) != -1)
                            bdeactive = true;
                    }
                }
                if (bdeactive) {
                    sStartmsg += "Indication" + ",";
                    Ischeck = true;
                }
            }
            if (String.Equals(IsDeactive[4], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsFrequencyModified) {
                if (this.oResolveItem != null && this.oDefaultBasicDetails != null) {
                    if (!IsFrequencyModified  && this.oDefaultBasicDetails.Frequency != null) {
                        let lqFreq = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Where(x => x.Value.Contains(this.oDefaultBasicDetails.Frequency.Value));
                        if (lqFreq != null && lqFreq.Count() > 0)
                            this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Remove(this.oDefaultBasicDetails.Frequency);
                    }
                }
                sStartmsg += "Frequency" + ",";
                Ischeck = true;
            }
            if (String.Equals(IsDeactive[5], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsDosageFormModified) {
                sStartmsg += "Dosage form" + ",";
                Ischeck = true;
            }
            if (String.Equals(IsDeactive[6], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsQuantityUOMModified) {
                sStartmsg += "Quantity UOM" + ",";
                Ischeck = true;
            }
            if (String.Equals(IsDeactive[7], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsRouteModified) {
                if (this.oResolveItem != null && this.oDefaultBasicDetails != null) {
                    if (!IsRouteModified  && this.oDefaultBasicDetails.Route != null) {
                        let lqRoute = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(x => x.Value.Contains(this.oDefaultBasicDetails.Route.Value));
                        if (lqRoute != null && lqRoute.Count() > 0)
                            this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Remove(this.oDefaultBasicDetails.Route);
                    }
                }
                sStartmsg += "Route" + ",";
                Ischeck = true;
            }
            if (String.Equals(IsDeactive[8], "TRUE", StringComparison.CurrentCultureIgnoreCase) && IsDoseUOMModified) {
                sStartmsg += "Dose UOM" + ",";
                Ischeck = true;
            }
            if (Ischeck) {
                sStartmsg = sStartmsg.Substring(0, sStartmsg.length - 1) + sEndmsg;
                resultMessage = sStartmsg;
            }
            return resultMessage;
        }
        ValidateConditionalDoseDetails(): boolean {
            let IsValidateCondDose: boolean = this.ValidateConditionalDose();
            let isValidationSuccess: boolean = false;
            let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) && String.Equals(sDoseType, DoseTypeCode.CONDITIONAL, StringComparison.OrdinalIgnoreCase) && (!this.oResolveItem.FormViewerDetails.SteppedPopup) && (!IsValidateCondDose)) {
                let objCondtMsgBox: iMessageBox = new iMessageBox();
                objCondtMsgBox.Title = "Lorenzo - Manage prescription";
                objCondtMsgBox.MessageButton = MessageBoxButton.YesNo;
                objCondtMsgBox.IconType = MessageBoxType.Question;
                objCondtMsgBox.MessageBoxClose  = (s,e) => { this.objSteppedMsgBox_MessageBoxClose(s,e); } ;
                objCondtMsgBox.Message = Resource.MedicationForm.SteppedDetailsModify_Message;
                objCondtMsgBox.Show();
            }
            else {
                isValidationSuccess = true;
            }
            return isValidationSuccess;
        }
        private ValidateMandatoryConditinoalDose(): boolean {
            if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails.Count > 0) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value)) {
                    if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID, StringComparison.CurrentCultureIgnoreCase)) {
                        let IsMadatoryCondDose = this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails.Where(oCondDoseData => String.IsNullOrEmpty(oCondDoseData.Infusionrate)&&String.IsNullOrEmpty(oCondDoseData.Instruction));
                        if (IsMadatoryCondDose != null && IsMadatoryCondDose.Count() > 0) {
                            return false;
                        }
                    }
                    else {
                       
                        let IsMadatoryCondDose = this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails.Where(oCondDoseData => String.IsNullOrEmpty(oCondDoseData.Dose)&&String.IsNullOrEmpty(oCondDoseData.Instruction));
                        if (IsMadatoryCondDose != null && IsMadatoryCondDose.Count() > 0) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        private IsConditionalDoseRegimeExists(): boolean {
            //Revisit Required
            
            let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            if (String.Equals(sDoseType, DoseTypeCode.CONDITIONAL, StringComparison.OrdinalIgnoreCase)) {
                let _CboUOMRange: string = String.Empty;
                if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && (this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) && (ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose)).cboRangeUOM != null) {
                    _CboUOMRange = (<medConditionalDose>this.ContentCtrlMedResolveStepped.Content).cboRangeUOM.Text;
                }
                else if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose) && (ObjectHelper.CreateType<medContConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medContConditionalDose)).cboRangeUOM != null) {
                    _CboUOMRange = (<medContConditionalDose>this.ContentCtrlMedResolveStepped.Content).cboRangeUOM.Text;
                }
                if ((!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) || (String.IsNullOrEmpty(_CboUOMRange) == false)) && (this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails == null || this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails.Count == 0)) {
                    let objCondtMsgBox: iMessageBox = new iMessageBox();
                    objCondtMsgBox.Title = "Lorenzo - Manage prescription";
                    objCondtMsgBox.MessageButton = MessageBoxButton.OK;
                    objCondtMsgBox.IconType = MessageBoxType.Critical;
                    objCondtMsgBox.Message = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.DisplayText + " dose regime cannot be blank.";
                    objCondtMsgBox.Closed  = (s,e) => { this.objCondtMsgBox_Closed(s,e); } ;
                    objCondtMsgBox.Show();
                    return false;
                }
                else if (!this.ValidateMandatoryConditinoalDose()) {
                    let objCondtMsgBox: iMessageBox = new iMessageBox();
                    objCondtMsgBox.Title = "Lorenzo - Manage prescription";
                    objCondtMsgBox.MessageButton = MessageBoxButton.OK;
                    objCondtMsgBox.IconType = MessageBoxType.Critical;
                    objCondtMsgBox.Message = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.DisplayText + " dose regime cannot be blank.";
                    objCondtMsgBox.Closed  = (s,e) => { this.oMandatoryConditinoalDose_Closed(s,e); } ;
                    objCondtMsgBox.Show();
                    return false;
                }
            }
            
            return true;
        }
        //Revisit Required
        
        oMandatoryConditinoalDose_Closed(sender: Object, e: EventArgs): void {
            if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                this.ftbFormViewDetails.Click("frmBasic", true);
            if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && (this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose)) {
                let RowCount: number = (<medConditionalDose>this.ContentCtrlMedResolveStepped.Content).grdCondition.GetRowCount();
                if (RowCount > 0) {
                    (<medConditionalDose>this.ContentCtrlMedResolveStepped.Content).grdCondition.setSelectedItemByIndex(RowCount - 1);
                }
            }
            else if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose)) {
                let RowCount: number = (<medContConditionalDose>this.ContentCtrlMedResolveStepped.Content).grdCondition.GetRowCount();
                if (RowCount > 0) {
                    (<medContConditionalDose>this.ContentCtrlMedResolveStepped.Content).grdCondition.setSelectedItemByIndex(RowCount - 1);
                }
            }
        }
        objCondtMsgBox_Closed(sender: Object, e: EventArgs): void {
            if (this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) {
                (<medConditionalDose>this.ContentCtrlMedResolveStepped.Content).tvwCondition.Focus();
            }
            else if (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose) {
                (<medContConditionalDose>this.ContentCtrlMedResolveStepped.Content).tvwCondition.Focus();
            }
        }
        
        private IsSteppedDoseRegimeExists(): boolean {
            let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            let IsSteppVal: boolean = false;
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) != 0 && (String.Compare(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) == 0)) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails == null || (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count == 0)) {
                    IsSteppVal = true;
                }
                else if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                    let IsMandFrequency = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(oMultiDoseData => (oMultiDoseData.Frequency==null)||(oMultiDoseData.Frequency!=null&&String.IsNullOrEmpty(oMultiDoseData.Frequency.DisplayText))||(oMultiDoseData.DoseUOM==null&&oMultiDoseData.ScheduleDetailsData==null));
                    if (IsMandFrequency != null && IsMandFrequency.Count() > 0) {
                        IsSteppVal = true;
                    }
                }
                if (IsSteppVal) {
                    let objStepMsgBox: iMessageBox = new iMessageBox();
                    objStepMsgBox.Title = "Lorenzo - Manage prescription";
                    objStepMsgBox.MessageButton = MessageBoxButton.OK;
                    objStepMsgBox.IconType = MessageBoxType.Critical;
                    objStepMsgBox.Message = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.DisplayText + " dose regime cannot be blank.";
                    objStepMsgBox.Closed  = (s,e) => { this.objStepMsgBox_Closed(s,e); } ;
                    objStepMsgBox.Show();
                    return false;
                }
            }
            else if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0 && this.oResolveItem.formViewerDetails.BHasFormViewParams && (String.Compare(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) == 0)) {
                if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null) {
                    let _SVForm: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                    if (_SVForm != null && (_SVForm.lblDose.Mandatory || _SVForm.lblFrequency.Mandatory)) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails == null || (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count == 0)) {
                            IsSteppVal = true;
                        }
                    }
                }
                if (IsSteppVal) {
                    let objStepMsgBox: iMessageBox = new iMessageBox();
                    objStepMsgBox.Title = "Lorenzo - Manage prescription";
                    objStepMsgBox.MessageButton = MessageBoxButton.OK;
                    objStepMsgBox.IconType = MessageBoxType.Critical;
                    objStepMsgBox.Message = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.DisplayText + " dose regime cannot be blank.";
                    objStepMsgBox.Closed  = (s,e) => { this.objStepMsgBox_Closed(s,e); } ;
                    objStepMsgBox.Show();
                    return false;
                }
            }
            return true;
        }
        objStepMsgBox_Closed(sender: Object, e: EventArgs): void {
            if (!String.Equals(this.ftbFormViewDetails.SelectedKey, "frmBasic"))
                this.ftbFormViewDetails.Click("frmBasic", true);
            {
                (<medipresolvestepped>this.ContentCtrlMedResolveStepped.Content).txtLowerDose.Focus();
            }
        }
        ValidateMandatoryforStepedDose(): boolean {
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
                let isSteppedDose: boolean = (String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase));
                if (isSteppedDose && this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase))) {
                    let _SVForm: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                    if (_SVForm != null && (_SVForm.lblDose.Mandatory || _SVForm.lblFrequency.Mandatory)) {
                        if ((this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails == null || (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count == 0))) {
                            if (this.ftbFormViewDetails != null && String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                                this.ftbFormViewDetails.Click("frmBasic", true);
                            let objStepMsgBox: iMessageBox = new iMessageBox();
                            objStepMsgBox.Title = "Lorenzo - Manage prescription";
                            objStepMsgBox.MessageButton = MessageBoxButton.OK;
                            objStepMsgBox.IconType = MessageBoxType.Critical;
                            objStepMsgBox.Message = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.DisplayText + " dose regime cannot be blank.";
                            objStepMsgBox.Closed  = (s,e) => { this.objStepMsgBox_Closed(s,e); } ;
                            objStepMsgBox.Show();
                            return false;
                        }
                    }
                }
                if (isSteppedDose && this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase))) {
                    if ((<medipresolvestepped>this.ContentCtrlMedResolveStepped.Content).lblDose.Mandatory || (<medipresolvestepped>this.ContentCtrlMedResolveStepped.Content).lblFrequency.Mandatory) {
                        if ((this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails == null || (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count == 0))) {
                            if (this.ftbFormViewDetails != null && String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                                this.ftbFormViewDetails.Click("frmBasic", true);
                            let objStepMsgBox: iMessageBox = new iMessageBox();
                            objStepMsgBox.Title = "Lorenzo - Manage prescription";
                            objStepMsgBox.MessageButton = MessageBoxButton.OK;
                            objStepMsgBox.IconType = MessageBoxType.Critical;
                            objStepMsgBox.Message = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.DisplayText + " dose regime cannot be blank.";
                            objStepMsgBox.Closed  = (s,e) => { this.objStepMsgBox_Closed(s,e); } ;
                            objStepMsgBox.Show();
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        ValidateSteppedDoseDetails(): boolean {
            let bDuplicateAdminTimes: boolean = false;
            let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            let isSteppedDose: boolean = (String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase));
            if (isSteppedDose && this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped && ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped) != null) {
                bDuplicateAdminTimes = (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).bDuplicateAdminTimesPrompt;
                if (bDuplicateAdminTimes) {
                    return false;
                }
                else {
                    bDuplicateAdminTimes = (ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped)).showduplicate();
                    if (!bDuplicateAdminTimes) {
                        return false;
                    }
                }
            }
            let IsValidateSteppedD: boolean = this.ValidateSteppedDose();
            let isValidationSuccess: boolean = false;
            if (isSteppedDose && (!this.oResolveItem.FormViewerDetails.SteppedPopup) && (!IsValidateSteppedD)) {
                let objSteppedMsgBox: iMessageBox = new iMessageBox();
                objSteppedMsgBox.Title = "Lorenzo - Manage prescription";
                objSteppedMsgBox.MessageButton = MessageBoxButton.YesNo;
                objSteppedMsgBox.IconType = MessageBoxType.Question;
                objSteppedMsgBox.MessageBoxClose  = (s,e) => { this.objSteppedMsgBox_MessageBoxClose(s,e); } ;
                objSteppedMsgBox.Message = Resource.MedicationForm.SteppedDetailsModify_Message;
                objSteppedMsgBox.Show();
                return false;
            }
            else {
                isValidationSuccess = true;
                if ((this.oResolveItem.FormViewerDetails.BasicDetails.Route == null || (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag == null || String.Equals(Convert.ToString(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag), "0", StringComparison.OrdinalIgnoreCase)))) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase)))) {
                    isValidationSuccess = this.ValidateSteppedDoseForBlankAdminTimes(isSteppedDose);
                }
            }
            if (this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                let oMediPresolveStepped: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                if (isValidationSuccess && isSteppedDose) {
                    isValidationSuccess = this.ValidateSteppedDayofWeek(isValidationSuccess);
                }
            }
            if (isSteppedDose && isValidationSuccess) {
                if (this.ContentCtrlMedResolveStepped != null) {
                    if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                        let objStepped: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                        if (objStepped != null) {
                            objStepped.grdData.UnselectAll();
                        }
                    }
                }
            }
            return isValidationSuccess;
        }
        private ValidateSteppedDayofWeek(isValidationSuccess: boolean): boolean {
            let nCount: number = 0;
            let LowEvent: number = 0;
            let isValidateDayofWeek: boolean = isValidationSuccess;
            let oTempAdminTimesVM: AdminstrativeTimesVM = null;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                nCount = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                for (let i: number = 0; i < nCount; i++) {
                    oTempAdminTimesVM = new AdminstrativeTimesVM();
                    if (this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i] != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM == null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].FreqDetails != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM = new AdminstrativeTimesVM();
                        this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].FreqDetails;
                    }
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.UOM) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.UOM, "CC_MEDDRSN2")) {
                        let oDaysOfWeek = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].DaysOfWeek;
                        LowEvent = (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.LowEvent > 0 ? this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.LowEvent : 0);
                        if (oDaysOfWeek != null) {
                            oTempAdminTimesVM.IsSun = oDaysOfWeek[0].StartsWith("T") ? true : false;
                            oTempAdminTimesVM.IsMon = oDaysOfWeek[1].StartsWith("T") ? true : false;
                            oTempAdminTimesVM.IsTue = oDaysOfWeek[2].StartsWith("T") ? true : false;
                            oTempAdminTimesVM.IsWed = oDaysOfWeek[3].StartsWith("T") ? true : false;
                            oTempAdminTimesVM.IsThu = oDaysOfWeek[4].StartsWith("T") ? true : false;
                            oTempAdminTimesVM.IsFri = oDaysOfWeek[5].StartsWith("T") ? true : false;
                            oTempAdminTimesVM.IsSat = oDaysOfWeek[6].StartsWith("T") ? true : false;
                        }
                        else {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency != null) {
                                oTempAdminTimesVM.IsSun = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.IsSunday;
                                oTempAdminTimesVM.IsMon = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.IsMonday;
                                oTempAdminTimesVM.IsTue = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.IsTuesday;
                                oTempAdminTimesVM.IsWed = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.IsWednesday;
                                oTempAdminTimesVM.IsThu = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.IsThursday;
                                oTempAdminTimesVM.IsFri = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.IsFriday;
                                oTempAdminTimesVM.IsSat = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].oAdminTimesVM.FreqDetails.oFrequency.IsSaturday;
                            }
                        }
                        if (oTempAdminTimesVM != null && this.CheckAndSetDaysOfWeek(oTempAdminTimesVM, LowEvent)) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.SelectedDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i];
                            isValidateDayofWeek = false;
                            let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                                Title: "LORENZO",
                                Message: Resource.MedicationForm.ManDaysofWeek,
                                MessageButton: MessageBoxButton.OK,
                                IconType: MessageBoxType.Question
                            });
                            iMsgBox.Show();
                            break;
                        }
                        else {
                            isValidateDayofWeek = true;
                        }
                    }
                }
            }
            return isValidateDayofWeek;
        }
        private ValidateOneSlotAdminTimeInAmend(): boolean {
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.ParentbaseVM != null && !this.oResolveItem.ParentbaseVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails) && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value)) {
                let _IsInfusion: boolean = false;
                if (this.oResolveItem.formViewerDetails.BasicDetails.Route != null && this.oResolveItem.formViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.formViewerDetails.BasicDetails.Route.Tag.ToString().Contains("1") && this.oResolveItem.formViewerDetails.BasicDetails.InfusionDetails != null && !this.oResolveItem.formViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Infused) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.Infused, "1", StringComparison.InvariantCultureIgnoreCase)) {
                    _IsInfusion = true;
                }
                if (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.NORMAL, StringComparison.CurrentCultureIgnoreCase) || (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.DOSAGERANGE, StringComparison.CurrentCultureIgnoreCase)) || (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.CurrentCultureIgnoreCase)) || (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase)) || (!String.IsNullOrEmpty(this.oResolveItem.ItemMainType) && String.Equals(this.oResolveItem.ItemMainType, CConstants.Formulary_Appliance, StringComparison.CurrentCultureIgnoreCase))) {
                    if ((!_IsInfusion || (_IsInfusion && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.INTERMITTENT, StringComparison.CurrentCultureIgnoreCase))) && !this.ValidateOneEventFreq()) {
                        this.oResolveItem.FocusControl = "grdAdminTimeOneslotInAmend";
                        this.objMsg.Message = Resource.MedicationForm.ValidateAmendAdminTime;
                        this.objMsg.MessageButton = MessageBoxButton.OK;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        private ValidateOneEventFreq(): boolean {
            let FrequencyType: string = String.Empty;
            let FrequencyLzoID: string = String.Empty;
            let FrequencyUom: string = String.Empty;
            let IsValidDurationOnlyOneDose: boolean = false;
            let dDuration: number = 0;
            let FixedScheduleDTTM: DateTime= DateTime.MinValue;
            let DrugroundScheduleDTTM: DateTime= DateTime.MinValue;
            let IsFixedTime: boolean = false;
            let IsDrugroundTime: boolean = false;
            let arrDaysOfWeek: string[] = null;
            let StartDTTM: DateTime= DateTime.MinValue;
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                let oCurrentDTTM: DateTime= CommonBB.GetServerDateTime();
                if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue)) {
                    StartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime);
                }
                if (DateTime.NotEquals(StartDTTM, DateTime.MinValue) && DateTime.LessThan(StartDTTM, oCurrentDTTM) && this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency.LowEvent == 1) {
                    let FreqTagdetail: string[] = ObjectHelper.CreateType<string[]>(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Tag, Array<string>);
                    if (FreqTagdetail != null && FreqTagdetail.length > 0) {
                        FrequencyUom = (FreqTagdetail.length > 1) ? FreqTagdetail[1] : String.Empty;
                        FrequencyType = (FreqTagdetail.length > 4) ? FreqTagdetail[4] : String.Empty;
                        FrequencyLzoID = (FreqTagdetail.length > 5) ? FreqTagdetail[5] : String.Empty;
                    }
                    if (!String.IsNullOrEmpty(FrequencyType) && String.Equals(FrequencyType, CConstants.PeriodFrequency, StringComparison.InvariantCultureIgnoreCase)) {
                        if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration) && this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value, ConstDurationUOM.Doses, StringComparison.InvariantCultureIgnoreCase)) {
                            Number.TryParse(this.oResolveItem.FormViewerDetails.BasicDetails.Duration, (o) => {dDuration=o});
                            IsValidDurationOnlyOneDose = dDuration == 1 ? true : false;
                        }
                        if (!this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsAdminTimeReqORNonForPRN && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Count > 0) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].IsFixedEnable && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].ScheduleDTTM, DateTime.MinValue)) {
                                IsFixedTime = true;
                                FixedScheduleDTTM = oCurrentDTTM.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].ScheduleDTTM);
                            }
                            else if (this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].IsDrugroundEnable && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].DrugroundDTTM, DateTime.MinValue)) {
                                IsDrugroundTime = true;
                                DrugroundScheduleDTTM = oCurrentDTTM.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].DrugroundDTTM);
                            }
                            if (IsValidDurationOnlyOneDose && !String.IsNullOrEmpty(FrequencyUom) && String.Equals(FrequencyUom, CConstants.WeeklyFreq, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.StartDTTM, DateTime.MinValue) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.StopDTTM, DateTime.MinValue) && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.DaysOfWeekVisibility == Visibility.Visible) {
                                arrDaysOfWeek = new Array(7);
                                arrDaysOfWeek[0] = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsSun.ToString();
                                arrDaysOfWeek[1] = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsMon.ToString();
                                arrDaysOfWeek[2] = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsTue.ToString();
                                arrDaysOfWeek[3] = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsWed.ToString();
                                arrDaysOfWeek[4] = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsThu.ToString();
                                arrDaysOfWeek[5] = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsFri.ToString();
                                arrDaysOfWeek[6] = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsSat.ToString();
                                let TmpStartDTTM: DateTime= DateTime.MinValue;
                                let TmpStopDTTM: DateTime= DateTime.MinValue;
                                let FirstDateOfWeek: DateTime= DateTime.MinValue;
                                TmpStartDTTM = oCurrentDTTM.DateTime.AddTime(FixedScheduleDTTM);
                                TmpStopDTTM = this.oResolveItem.GetEnddatetimeforDoseDuration(oCurrentDTTM);
                                if (DateTime.NotEquals(TmpStopDTTM, DateTime.MinValue)) {
                                    FirstDateOfWeek = PrescriptionHelper.GetFirstDateOfweek(TmpStartDTTM, TmpStopDTTM, arrDaysOfWeek);
                                }
                                if (DateTime.NotEquals(FirstDateOfWeek, DateTime.MinValue)) {
                                    if (IsFixedTime) {
                                        FixedScheduleDTTM = FirstDateOfWeek.DateTime.AddTime(FixedScheduleDTTM);
                                    }
                                    else if (IsDrugroundTime) {
                                        DrugroundScheduleDTTM = FirstDateOfWeek.DateTime.AddTime(DrugroundScheduleDTTM);
                                    }
                                }
                            }
                        }
                        if ((String.Equals(FrequencyUom, CConstants.OnceOnlyFrequency, StringComparison.CurrentCultureIgnoreCase) || IsValidDurationOnlyOneDose) && DateTime.NotEquals(oCurrentDTTM, DateTime.MinValue) && ((IsFixedTime && DateTime.NotEquals(FixedScheduleDTTM, DateTime.MinValue) && DateTime.LessThan(FixedScheduleDTTM, oCurrentDTTM)) || (IsDrugroundTime && DateTime.NotEquals(DrugroundScheduleDTTM, DateTime.MinValue) && DateTime.LessThan(DrugroundScheduleDTTM, oCurrentDTTM)))) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        private ValidateStepDose_UpdateStopDTTM(): boolean {
            let StepEndDTTM: DateTime= DateTime.MinValue;
            let StepStartDTTM: DateTime= DateTime.MinValue;
            let IsStartDateAvailable: boolean = true;
            let IsStopDateAvailable: boolean = true;
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE))) {
                if (this.oResolveItem.FormViewerDetails.BHasFormViewParams && this.oResolveItem.FormViewerDetails.BasicControls != null && this.oResolveItem.FormViewerDetails.BasicControls.Count() > 0) {
                    IsStartDateAvailable = (this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_STARTDTTM")) ? true : false;
                    IsStopDateAvailable = (this.oResolveItem.FormViewerDetails.BasicControls.Contains("CC_STOPDTTM")) ? true : false;
                }
                let nDoseCnt: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                if (nDoseCnt > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1] != null) {
                    if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].DurationUOM != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].Duration > 0 && (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].DurationUOM.Value) || !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].DurationUOM.DisplayText)) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].EndDTTM, DateTime.MinValue)) {
                        StepEndDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].EndDTTM;
                    }
                    else {
                        StepEndDTTM = DateTime.MinValue;
                    }
                    StepStartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].StartDTTM;
                }
                if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking) {
                    let tmpStopDTTM: DateTime= DateTime.MinValue;
                    if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)) {
                        tmpStopDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StopDate.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value);
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = tmpStopDTTM;
                    }
                    if (DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue) && DateTime.NotEquals(StepEndDTTM, DateTime.MinValue)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = StepEndDTTM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = StepEndDTTM;
                    }
                    else if (IsStopDateAvailable && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue) && DateTime.NotEquals(StepEndDTTM, DateTime.MinValue) && DateTime.LessThan(tmpStopDTTM, StepEndDTTM) && this.objfrm.FormViewerDetails.BasicDetails.IsStopDTTMAutoUpdate) {
                        let objMsg: iMessageBox = new iMessageBox();
                        objMsg.MessageButton = MessageBoxButton.OKCancel;
                        objMsg.IconType = MessageBoxType.Information;
                        objMsg.Title = "Lorenzo - Manage prescription";
                        objMsg.MessageBoxClose  = (s,e) => { this.SteppedStopDTTMMismatchDuration_MessageBoxClose(s,e); } ;
                        objMsg.Message = String.Format(Resource.MedicationForm.Stepped_StopDTTMMismatchDurationMessage, StepEndDTTM.ToUserDateTimeString("dd-MMM-yyyy HH:mm"));
                        objMsg.Show();
                        return false;
                    }
                    else if (IsStopDateAvailable && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue) && DateTime.NotEquals(StepStartDTTM, DateTime.MinValue) && DateTime.Equals(StepEndDTTM, DateTime.MinValue) && DateTime.LessThan(tmpStopDTTM, StepStartDTTM) && this.objfrm.FormViewerDetails.BasicDetails.IsStopDTTMAutoUpdate) {
                        let objMsg: iMessageBox = new iMessageBox();
                        objMsg.MessageButton = MessageBoxButton.OKCancel;
                        objMsg.IconType = MessageBoxType.Information;
                        objMsg.Title = "Lorenzo - Manage prescription";
                        objMsg.MessageBoxClose  = (s,e) => { this.SteppedStopDTTMWithoutDuration_MessageBoxClose(s,e); } ;
                        objMsg.Message = Resource.MedicationForm.Stepped_StopDTTMWithoutDurationMsg;
                        objMsg.Show();
                        return false;
                    }
                    else if (DateTime.NotEquals(StepEndDTTM, DateTime.MinValue)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = StepEndDTTM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = StepEndDTTM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.EndDTTM = StepEndDTTM;
                    }
                    if (this.oResolveItem.formViewerDetails.BasicDetails.ReviewAfterVisible == Visibility.Visible && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterDTTM, DateTime.MinValue) && DateTime.NotEquals(StepEndDTTM, DateTime.MinValue) && DateTime.GreaterThanOrEqualTo(this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterDTTM, StepEndDTTM)) {
                        let objMsgBox: iMessageBox = new iMessageBox();
                        this.oResolveItem.FocusControl = "udReviewafter";
                        objMsgBox.Message = Resource.Infusion.ReviewAfter_Dur_StopDt_Val_Msg;
                        objMsgBox.MessageButton = MessageBoxButton.OK;
                        objMsgBox.Show();
                        return false;
                    }
                }
                else {
                    if (DateTime.NotEquals(StepEndDTTM, DateTime.MinValue)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = StepEndDTTM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = StepEndDTTM;
                        this.oResolveItem.FormViewerDetails.BasicDetails.EndDTTM = StepEndDTTM;
                    }
                }
            }
            return true;
        }
        SteppedStopDTTMMismatchDuration_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.OK) {
                let StepEndDTTM: DateTime= DateTime.MinValue;
                let nDoseCnt: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                if (nDoseCnt > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1] != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].DurationUOM != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].Duration > 0 && (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].DurationUOM.Value) || !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].DurationUOM.DisplayText)) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].EndDTTM, DateTime.MinValue)) {
                    StepEndDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nDoseCnt - 1].EndDTTM;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopDate = StepEndDTTM;
                    this.oResolveItem.FormViewerDetails.BasicDetails.StopPrescriptionTime = StepEndDTTM;
                    if (this.OKClickValidations()) {
                        if (super.onDialogClose != null)
                            super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                    }
                }
            }
            else if (e.MessageBoxResult == MessageBoxResult.Cancel) {

            }
        }
        public CloseFormViewer(_CloseAction: AppDialogResult): void {
            if (super.onDialogClose != null)
                super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: _CloseAction, AppChildWindow: super.appDialog }));
        }
        SteppedStopDTTMWithoutDuration_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.OK) {
                this.objfrm.FormViewerDetails.BasicDetails.StopDate = DateTime.MinValue;
                this.objfrm.FormViewerDetails.BasicDetails.StopPrescriptionTime = DateTime.MinValue;
                if (this.OKClickValidations()) {
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
            else if (e.MessageBoxResult == MessageBoxResult.Cancel) {

            }
        }
        private CheckAndSetDaysOfWeek(oAdminDayofWeek: AdminstrativeTimesVM, LowEvent: number): boolean {
            let nCheckedCount: number = 0;
            if (oAdminDayofWeek.IsSun) {
                nCheckedCount++;
            }
            if (oAdminDayofWeek.IsMon) {
                nCheckedCount++;
            }
            if (oAdminDayofWeek.IsTue) {
                nCheckedCount++;
            }
            if (oAdminDayofWeek.IsWed) {
                nCheckedCount++;
            }
            if (oAdminDayofWeek.IsThu) {
                nCheckedCount++;
            }
            if (oAdminDayofWeek.IsFri) {
                nCheckedCount++;
            }
            if (oAdminDayofWeek.IsSat) {
                nCheckedCount++;
            }
            if (nCheckedCount < LowEvent) {
                return true;
            }
            return false;
        }
        private ValidateForAdditionalDose(): boolean {
            let bReuslt: boolean = true;
            if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.ActionCode != ActivityTypes.Amend && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPED) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.VARIABLE) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE))) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                    let objStepped: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                    if (objStepped != null)
                        bReuslt = objStepped.ConfirmAdditionalDose(CConstants.SVActionFormViewerOk);
                    if (bReuslt) {
                        bReuslt = this.ToFindOverLapDoseInStep();
                    }
                }
            }
            return bReuslt;
        }
        private ToFindOverLapDoseInStep(): boolean {
            let bReturnValue: boolean = true;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 1) {
                let nCount: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                for (let i: number = 1; i < nCount; i++) {
                    if (!this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].IsStartFromNextDay && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].AdminTimesData != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].AdminTimesData.Count > 0 && DateTime.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i - 1].EndDTTM.Date, this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].StartDTTM.Date) && PrescriptionHelper.ValidateAdminTimesAgainstGivenDTTM(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i - 1].EndDTTM, this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].AdminTimesData, this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i].SlotTimeMode == 'F')) {
                        this.oMultipleDoseDetailToFocus = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[i];
                        bReturnValue = false;
                        let objMsg: iMessageBox = new iMessageBox();
                        objMsg.MessageButton = MessageBoxButton.OK;
                        objMsg.IconType = MessageBoxType.Information;
                        objMsg.Title = "Lorenzo - Manage prescription";
                        objMsg.Message = Resource.steppeddose.ScheduledTimeOverLap;
                        objMsg.Closed  = (s,e) => { this.FindOverLapDoseInStepMsg_Closed(s,e); } ;
                        objMsg.Show();
                        break;
                    }
                }
            }
            return bReturnValue;
        }
        FindOverLapDoseInStepMsg_Closed(sender: Object, e: EventArgs): void {
            if (this.oMultipleDoseDetailToFocus != null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                this.oResolveItem.FormViewerDetails.BasicDetails.SelectedDoseDetail = this.oMultipleDoseDetailToFocus;
            }
        }
        ValidateConditionalDose(): boolean {
            
            if (this.ContentCtrlMedResolveStepped != null && (this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose)) {
                let oMedConditionalDose: medConditionalDose = ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content,medConditionalDose);
                if (oMedConditionalDose.cmdAdd.IsEnabled && (!this.oResolveItem.FormViewerDetails.SteppedPopup) && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ObservationsResults != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ObservationsResults.Count > 0 && ((oMedConditionalDose.cboRangeValInf.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboRangeValInf.GetText())) || (oMedConditionalDose.txtUpperRange.IsEnabled && oMedConditionalDose.txtUpperRange.Text != "") || (oMedConditionalDose.optInstruction.IsChecked == true && oMedConditionalDose.txtInstruction.IsEnabled && oMedConditionalDose.txtInstruction.Text != "") || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.txtDoseValue.IsEnabled && oMedConditionalDose.txtDoseValue.Text != "") || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.cboDoseValueUOM.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboDoseValueUOM.GetText())) || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.txtLowerInfusionrate.IsEnabled && oMedConditionalDose.txtLowerInfusionrate.Text != "") || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboUOMInfusionrate.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboUOMInfusionrate.GetText())) || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboUOMInfusionrate1.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboUOMInfusionrate1.GetText())))) {
                    this.oResolveItem.FormViewerDetails.SteppedPopup = false;
                    return false;
                }
                else if ((oMedConditionalDose.cmdUpdate.IsEnabled && (!this.oResolveItem.FormViewerDetails.SteppedPopup) && oMedConditionalDose.grdCondition.SelectedItems.Count == 1)) {
                    let nSelectedRowCount: number = oMedConditionalDose.grdCondition.GetSelectedRowCount();
                    if (nSelectedRowCount == 1) {
                        let objgrddata: ConditionalDose = this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.SelectedDose;
                        let tvObservationResults: string = String.Empty;
                        let sSelectedValueRange: string = String.Empty;
                        let sSelectedDoseInstruction: string = String.Empty;
                        if ((oMedConditionalDose.tvwCondition && oMedConditionalDose.tvwCondition.SelectedItem) != null)
                            tvObservationResults = oMedConditionalDose.tvwCondition.SelectedItem.ToString();
                        if (oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboRangeValInf.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboRangeValInf.GetText()))
                            sSelectedValueRange = sSelectedValueRange + oMedConditionalDose.cboRangeValInf.GetText();
                        if (oMedConditionalDose.txtLowerRange.IsEnabled && oMedConditionalDose.txtLowerRange.Text != "")
                            sSelectedValueRange = sSelectedValueRange + oMedConditionalDose.txtLowerRange.Text;
                        if (oMedConditionalDose.txtUpperRange.IsEnabled && oMedConditionalDose.txtUpperRange.Text != "")
                            sSelectedValueRange = sSelectedValueRange + "-" + oMedConditionalDose.txtUpperRange.Text;
                        if (oMedConditionalDose.cboRangeUOM.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboRangeUOM.GetText()))
                            sSelectedValueRange = sSelectedValueRange + " " + oMedConditionalDose.cboRangeUOM.GetText();
                        if (oMedConditionalDose.optInstruction.IsChecked == true) {
                            if (oMedConditionalDose.txtInstruction.IsEnabled && oMedConditionalDose.txtInstruction.Text != "")
                                sSelectedDoseInstruction = sSelectedDoseInstruction + oMedConditionalDose.txtInstruction.Text;
                        }
                        else if (oMedConditionalDose.optNumeric.IsChecked == true) {
                            if (oMedConditionalDose.txtDoseValue.IsEnabled && oMedConditionalDose.txtDoseValue.Text != "")
                                sSelectedDoseInstruction = sSelectedDoseInstruction + oMedConditionalDose.txtDoseValue.Text;
                            if (oMedConditionalDose.cboDoseValueUOM.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboDoseValueUOM.GetText()))
                                sSelectedDoseInstruction = sSelectedDoseInstruction + " " + oMedConditionalDose.cboDoseValueUOM.GetText();
                            if (oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.txtLowerInfusionrate.IsEnabled && oMedConditionalDose.txtLowerInfusionrate.Text != "")
                                sSelectedDoseInstruction = sSelectedDoseInstruction + oMedConditionalDose.txtLowerInfusionrate.Text;
                            if (oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboUOMInfusionrate.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboUOMInfusionrate.GetText()))
                                sSelectedDoseInstruction = sSelectedDoseInstruction + " " + oMedConditionalDose.cboUOMInfusionrate.GetText();
                            if (oMedConditionalDose.InfusionrateLayoutRoot.Visibility ==  Visibility.Visible && oMedConditionalDose.cboUOMInfusionrate1.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboUOMInfusionrate1.GetText()))
                                sSelectedDoseInstruction = sSelectedDoseInstruction + "/" + oMedConditionalDose.cboUOMInfusionrate1.GetText();
                        }
                        let sDoseInstruction: string = objgrddata.DoseInstruction.Trim();
                        // if (String.Compare(tvObservationResults, objgrddata.ObservationResult, StringComparison.InvariantCulture) != 0 || String.Compare(sSelectedValueRange, objgrddata.ValueRange, StringComparison.InvariantCulture) != 0 || String.Compare(sSelectedDoseInstruction, sDoseInstruction, CultureInfo.InvariantCulture, CompareOptions.IgnoreSymbols) != 0) {
                        //     this.oResolveItem.FormViewerDetails.SteppedPopup = false;
                        //     return false;
                        // }
                    }
                }
            }
             else if (this.ContentCtrlMedResolveStepped != null && (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose)) {
                let oMedConditionalDose: medContConditionalDose = <medContConditionalDose>this.ContentCtrlMedResolveStepped.Content;
            if (oMedConditionalDose.cmdAdd.IsEnabled && (!this.oResolveItem.FormViewerDetails.SteppedPopup) && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ObservationsResults != null && this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ObservationsResults.Count > 0 && ((oMedConditionalDose.cboRangeValInf.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboRangeValInf.GetText())) || (oMedConditionalDose.txtUpperRange.IsEnabled && oMedConditionalDose.txtUpperRange.Text != "") || (oMedConditionalDose.optInstruction.IsChecked == true && oMedConditionalDose.txtInstruction.IsEnabled && oMedConditionalDose.txtInstruction.Text != "") || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.txtDoseValue.IsEnabled && oMedConditionalDose.txtDoseValue.Text != "") || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.cboDoseValueUOM.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboDoseValueUOM.GetText())) || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.txtLowerInfusionrate.IsEnabled && oMedConditionalDose.txtLowerInfusionrate.Text != "") || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboUOMInfusionrate.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboUOMInfusionrate.GetText())) || (oMedConditionalDose.optNumeric.IsChecked == true && oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboUOMInfusionrate1.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboUOMInfusionrate1.GetText())))) {
                    this.oResolveItem.FormViewerDetails.SteppedPopup = false;
                    return false;
                }
                else if ((oMedConditionalDose.cmdUpdate.IsEnabled && (!this.oResolveItem.FormViewerDetails.SteppedPopup) && oMedConditionalDose.grdCondition.SelectedItems.Count == 1)) {
                    let nSelectedRowCount: number = oMedConditionalDose.grdCondition.GetSelectedRowCount();
                    if (nSelectedRowCount == 1) {
                        let objgrddata: ConditionalDose = this.oResolveItem.FormViewerDetails.BasicDetails.ConditionalDosingDetails.SelectedDose;
                        let tvObservationResults: string = String.Empty;
                        let sSelectedValueRange: string = String.Empty;
                        let sSelectedDoseInstruction: string = String.Empty;
                        if ((oMedConditionalDose.tvwCondition && oMedConditionalDose.tvwCondition.SelectedItem) != null)
                            tvObservationResults = oMedConditionalDose.tvwCondition.SelectedItem.ToString();
                    if (oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboRangeValInf.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboRangeValInf.GetText()))
                            sSelectedValueRange = sSelectedValueRange + oMedConditionalDose.cboRangeValInf.GetText();
                        if (oMedConditionalDose.txtLowerRange.IsEnabled && oMedConditionalDose.txtLowerRange.Text != "")
                            sSelectedValueRange = sSelectedValueRange + oMedConditionalDose.txtLowerRange.Text;
                        if (oMedConditionalDose.txtUpperRange.IsEnabled && oMedConditionalDose.txtUpperRange.Text != "")
                            sSelectedValueRange = sSelectedValueRange + "-" + oMedConditionalDose.txtUpperRange.Text;
                    if (oMedConditionalDose.cboRangeUOM.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboRangeUOM.GetText()))
                            sSelectedValueRange = sSelectedValueRange + " " + oMedConditionalDose.cboRangeUOM.GetText();
                        if (oMedConditionalDose.optInstruction.IsChecked == true) {
                            if (oMedConditionalDose.txtInstruction.IsEnabled && oMedConditionalDose.txtInstruction.Text != "")
                                sSelectedDoseInstruction = sSelectedDoseInstruction + oMedConditionalDose.txtInstruction.Text;
                        }
                        else if (oMedConditionalDose.optNumeric.IsChecked == true) {
                            if (oMedConditionalDose.txtDoseValue.IsEnabled && oMedConditionalDose.txtDoseValue.Text != "")
                                sSelectedDoseInstruction = sSelectedDoseInstruction + oMedConditionalDose.txtDoseValue.Text;
                        if (oMedConditionalDose.cboDoseValueUOM.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboDoseValueUOM.GetText()))
                                sSelectedDoseInstruction = sSelectedDoseInstruction + " " + oMedConditionalDose.cboDoseValueUOM.GetText();
                            if (oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.txtLowerInfusionrate.IsEnabled && oMedConditionalDose.txtLowerInfusionrate.Text != "")
                                sSelectedDoseInstruction = sSelectedDoseInstruction + oMedConditionalDose.txtLowerInfusionrate.Text;
                        if (oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboUOMInfusionrate.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboUOMInfusionrate.GetText()))
                                sSelectedDoseInstruction = sSelectedDoseInstruction + " " + oMedConditionalDose.cboUOMInfusionrate.GetText();
                        if (oMedConditionalDose.InfusionrateLayoutRoot.Visibility == Visibility.Visible && oMedConditionalDose.cboUOMInfusionrate1.IsEnabled && !String.IsNullOrEmpty(oMedConditionalDose.cboUOMInfusionrate1.GetText()))
                                sSelectedDoseInstruction = sSelectedDoseInstruction + "/" + oMedConditionalDose.cboUOMInfusionrate1.GetText();
                        }
                        let sDoseInstruction: string = objgrddata.DoseInstruction.Trim();
                        // if (String.Compare(tvObservationResults, objgrddata.ObservationResult, StringComparison.InvariantCulture) != 0 || String.Compare(sSelectedValueRange, objgrddata.ValueRange, StringComparison.InvariantCulture) != 0 || String.Compare(sSelectedDoseInstruction, sDoseInstruction, CultureInfo.InvariantCulture, CompareOptions.IgnoreSymbols) != 0) {
                        //     this.oResolveItem.FormViewerDetails.SteppedPopup = false;
                        //     return false;
                        // }
                    }
                }
            }
            
            return true;
        }
        public ValidateSteppedDose(): boolean {
            if (this.oResolveItem.FormViewerDetails.SteppedPopup)
                return true;
            
            //Below code ensures that we are able to access control instances with in SteppedVariable component of DFV. 
            if (this.frmViewBasic != undefined && (this.frmViewBasic as any).constructor.name == 'frmBasicFormViewer' && this.ContentCtrlMedResolveStepped != null && (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) && this.ContentCtrlMedResolveStepped.Content.cmdAdd == undefined) {
                this.ContentCtrlMedResolveStepped.Content = (this.frmViewBasic as frmBasicFormViewer).MedIPResolveStepped;
            }

            if (this.ContentCtrlMedResolveStepped != null && (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped)) {
                if((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).CanCloseFormViewerWithSVValidation)
                    {
                        this.ContentCtrlMedResolveStepped.Content = (this.frmViewBasic as any).MedIPResolveStepped;
                    }
                if ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cmdAdd.IsEnabled && (!this.oResolveItem.FormViewerDetails.SteppedPopup) && ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtLowerDose.Text != "" || (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtUpperDose.Text != "" || (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtVariable.Text != "" || (this.oResolveItem.FormViewerDetails.BasicDetails.SteppedDoseUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SteppedDoseUOM.Value) && (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboUOM.IsEnabled && this.oResolveItem.IsLoadBasicFaxTab) || Convert.ToDouble((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).udDuration.GetValue()) > 0 || (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboFrequency.GetValue() != "" || (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboDuration.GetValue() != "" || (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtInfusionRate.Text != "" || (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateDenoUOM.GetValue() != "" || (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboInfRateNumUOM.GetValue() != "")) {
                    return false;
                }
                else if (((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cmdUpdate.IsEnabled && (!this.oResolveItem.FormViewerDetails.SteppedPopup) && (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).grdData.SelectedItems.Count == 1)) {
                    let nSelectedRowCount: number = (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).grdData.GetSelectedRowCount();
                    if (nSelectedRowCount == 1) {
                        let objgrddata: MultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.SelectedDoseDetail;
                        let cdDuration: number = 0.0;
                        let odDuration: number = 0.0;
                        let clFrequencyVal: number = 0;
                        let olFrequencyVal: number = 0;
                        let csDurationUOID: string = String.Empty;
                        let osDurationUOID: string = String.Empty;
                        let blDirection: boolean = false;
                        if (Convert.ToDouble((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).udDuration.GetValue()) > 0) {
                            cdDuration = Convert.ToDouble((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).udDuration.GetValue());
                        }
                        if ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboFrequency.GetValue() != "") {
                            clFrequencyVal = Convert.ToInt64((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboFrequency.GetValue());
                        }
                        if ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboDuration.GetValue() != "") {
                            csDurationUOID = (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboDuration.GetValue();
                        }
                        if (objgrddata != null) {
                            if (!String.IsNullOrEmpty(objgrddata.Direction)) {
                                blDirection = objgrddata.Direction == "1" ? true : false;
                            }
                            if (objgrddata.DurationUOM != null && !String.IsNullOrEmpty(objgrddata.DurationUOM.Value)) {
                                osDurationUOID = objgrddata.DurationUOM.Value;
                            }
                            if (objgrddata.Frequency != null && !String.IsNullOrEmpty(objgrddata.Frequency.Value)) {
                                olFrequencyVal = Convert.ToInt64(objgrddata.Frequency.Value);
                            }
                            if (objgrddata.Duration > 0) {
                                odDuration = objgrddata.Duration;
                            }
                        }
                        let cCount: number = 0;
                        let sAdministrationTimes: string = this.oResolveItem.FormViewerDetails.BasicDetails.SelectedDoseDetail.AdministrationTimes;
                        let scAdministrationTimes: string = String.Empty;
                        cCount = (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).grdAdminTimes.GetRowCount();
                        let sFrequencyDisplayText: string = String.Empty;
                        if (cCount > 0) {
                            let objgrdAdminTimes: GrdAdminstrativeTimesCols = ObjectHelper.CreateType<GrdAdminstrativeTimesCols>((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).grdAdminTimes.GetRowData(0), GrdAdminstrativeTimesCols);
                            if (objgrdAdminTimes != null && !String.IsNullOrEmpty(objgrdAdminTimes.FrequencyType) && String.Compare(objgrdAdminTimes.FrequencyType, "CC_PERIOD", StringComparison.CurrentCultureIgnoreCase) == 0) {
                                if ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).iRdBtnFixedTime.IsChecked == true) {
                                    if (cCount > 0) {
                                        scAdministrationTimes = "Fixed - ";
                                        for (let nAdminCnt: number = 0; nAdminCnt < cCount; nAdminCnt++) {
                                            let cGrdData: GrdAdminstrativeTimesCols = ObjectHelper.CreateType<GrdAdminstrativeTimesCols>((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).grdAdminTimes.GetRowData(nAdminCnt), GrdAdminstrativeTimesCols);
                                            if (!String.IsNullOrEmpty(cGrdData.FixedTimes)) {
                                                scAdministrationTimes += cGrdData.FixedTimes + "/";
                                            }
                                        }
                                    }
                                }
                                else if ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).iRdBtndrgRoundTime.IsChecked == true) {
                                    if (cCount > 0) {
                                        scAdministrationTimes = "Drug round - ";
                                        for (let nAdminCnt: number = 0; nAdminCnt < cCount; nAdminCnt++) {
                                            let cGrdData: GrdAdminstrativeTimesCols = ObjectHelper.CreateType<GrdAdminstrativeTimesCols>((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).grdAdminTimes.GetRowData(nAdminCnt), GrdAdminstrativeTimesCols);
                                            if (!String.IsNullOrEmpty(cGrdData.DruRoundTimes)) {
                                                scAdministrationTimes += cGrdData.DruRoundTimes + "/";
                                            }
                                        }
                                    }
                                }
                                if (scAdministrationTimes.length > 1) {
                                    scAdministrationTimes = scAdministrationTimes.Substring(0, scAdministrationTimes.length - 1);
                                }
                            }
                            else if (objgrdAdminTimes != null && !String.IsNullOrEmpty(objgrdAdminTimes.FrequencyType) && String.Compare(objgrdAdminTimes.FrequencyType, "CC_INTERVAL", StringComparison.CurrentCultureIgnoreCase) == 0) {
                                sFrequencyDisplayText = (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).cboFrequency.GetText();
                                scAdministrationTimes = objgrdAdminTimes.FixedTimes + " " + objgrdAdminTimes.DruRoundTimes + " repeats " + ((sFrequencyDisplayText != null) ? sFrequencyDisplayText : String.Empty);
                            }
                        }
                        let LDose: string = String.Empty;
                        let UDose: string = String.Empty;
                        let _SelectedDoseUOMOID: number = 0;
                        if (objgrddata.LowerDose > 0) {
                            LDose = Convert.ToString(objgrddata.LowerDose);
                        }
                        if (objgrddata.UpperDose > 0) {
                            UDose = Convert.ToString(objgrddata.UpperDose);
                        }
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.SteppedDoseUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SteppedDoseUOM.Value)) {
                            Number.TryParse(this.oResolveItem.FormViewerDetails.BasicDetails.SteppedDoseUOM.Value, (o) => {_SelectedDoseUOMOID=o});
                        }
                        if ((objgrddata.LowerDose != 0 && (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtLowerDose.Text != LDose) || (objgrddata.UpperDose != 0 && (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtUpperDose.Text != UDose) || (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content)).txtVariable.Text != objgrddata.DoseInstructions || (_SelectedDoseUOMOID != Convert.ToInt64(objgrddata.DoseUOM.Value)) || (cdDuration != odDuration) || (clFrequencyVal != olFrequencyVal) || (csDurationUOID != osDurationUOID) || (sAdministrationTimes != scAdministrationTimes) || (((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content))).ChangedDoseScheduleDetails != null && ((<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content))).ChangedDoseScheduleDetails.IsDataModified)) {
                            return false;
                        }
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.IsChangingDoseContentModified) {
                            this.oResolveItem.FormViewerDetails.BasicDetails.IsChangingDoseContentModified = false;
                            return false;
                        }
                        let objSVSteppendContent: medipresolvestepped = (<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content));
                        if (objSVSteppendContent != null && objSVSteppendContent.lblDaysOfWeek != null && objSVSteppendContent.lblDaysOfWeek.Mandatory && objSVSteppendContent.oAdminTimesVM != null && objgrddata != null && objgrddata.FreqDetails != null && objgrddata.FreqDetails.oFrequency != null && !String.IsNullOrEmpty(objgrddata.FreqDetails.oFrequency.UOM) && String.Equals(objgrddata.FreqDetails.oFrequency.UOM, CConstants.WeeklyFreq, StringComparison.InvariantCultureIgnoreCase)) {
                            let _adminTimesVM: AdminstrativeTimesVM = objSVSteppendContent.oAdminTimesVM;
                            let _freq: IPPManagePrescSer.IPPFrequency = objgrddata.FreqDetails.oFrequency;
                            if (_adminTimesVM.IsSun != _freq.IsSunday || _adminTimesVM.IsMon != _freq.IsMonday || _adminTimesVM.IsTue != _freq.IsTuesday || _adminTimesVM.IsWed != _freq.IsWednesday || _adminTimesVM.IsThu != _freq.IsThursday || _adminTimesVM.IsFri != _freq.IsFriday || _adminTimesVM.IsSat != _freq.IsSaturday) {
                                return false;
                            }
                        }
                    }
                }
                this.oResolveItem.FormViewerDetails.SteppedPopup = false;
            }
            return true;
        }
        ValidateSteppedDoseForBlankDose(isSteppedDose: boolean): boolean {
            let isValidationSuccess: boolean = true;
            if (isSteppedDose) {
                if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null) {
                    let lstMultipleDoseDetail: IEnumerable<MultipleDoseDetail> = null;
                    if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) == 0) {
                        lstMultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(oItem => oItem.LowerDose <= 0 && oItem.DoseUOM != null && !String.IsNullOrEmpty(oItem.DoseUOM.Value) && (!oItem.IsDaywiseView && String.Compare(oItem.HyperlinkText, "Changing dose", StringComparison.CurrentCultureIgnoreCase) != 0));
                    }
                    else {
                        lstMultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(oItem => oItem.LowerDose <= 0 && (!oItem.IsDaywiseView && String.Compare(oItem.HyperlinkText, "Changing dose", StringComparison.CurrentCultureIgnoreCase) != 0));
                    }
                    if (lstMultipleDoseDetail != null && lstMultipleDoseDetail.Count() > 0) {
                        isValidationSuccess = false;
                        this.oMultipleDoseDetailToFocus = lstMultipleDoseDetail.First();
                        let objSteppedDosMsgBox: iMessageBox = new iMessageBox();
                        objSteppedDosMsgBox.Title = "Lorenzo - Manage prescription";
                        objSteppedDosMsgBox.MessageButton = MessageBoxButton.OK;
                        objSteppedDosMsgBox.IconType = MessageBoxType.Information;
                        objSteppedDosMsgBox.MessageBoxClose  = (s,e) => { this.objSteppedDosMsgBox_MessageBoxClose(s,e); } ;
                        objSteppedDosMsgBox.Message = "From dose cannot be blank.";
                        objSteppedDosMsgBox.Show();
                    }
                }
            }
            return isValidationSuccess;
        }
        ValidateSteppedDoseForBlankDuration(isSteppedDose: boolean): boolean {
            let isValidationSuccess: boolean = true;
            if (isSteppedDose) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null) {
                    let lstMultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(oItem => oItem.Duration <= 0 && oItem.DurationUOM != null && !String.IsNullOrEmpty(oItem.DurationUOM.Value));
                    if (lstMultipleDoseDetail != null && lstMultipleDoseDetail.Count() > 0) {
                        isValidationSuccess = false;
                        this.oMultipleDoseDetailToFocus = lstMultipleDoseDetail.First();
                        let objSteppedDurMsgBox: iMessageBox = new iMessageBox();
                        objSteppedDurMsgBox.Title = "Lorenzo - Manage prescription";
                        objSteppedDurMsgBox.MessageButton = MessageBoxButton.OK;
                        objSteppedDurMsgBox.IconType = MessageBoxType.Information;
                        objSteppedDurMsgBox.MessageBoxClose  = (s,e) => { this.objSteppedDosMsgBox_MessageBoxClose(s,e); } ;
                        objSteppedDurMsgBox.Message = "Duration cannot be zero or empty.";
                        objSteppedDurMsgBox.Show();
                    }
                }
            }
            return isValidationSuccess;
        }
        public ValidateSteppedDoseForBlankAdminTimes(isSteppedDose: boolean): boolean {
            let isValidationSuccess: boolean = true;
            let _IsDoseValueEmpty: boolean = false;
            if (isSteppedDose) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                    let isAdminTimesEmpty: boolean = false;
                    let isFrequencyEmpty: boolean = false;
                    let objMultipleDoseDetail: MultipleDoseDetail = null;
                    let lstAdminTimesDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(oItem => String.IsNullOrEmpty(oItem.AdministrationTimes) && oItem.Frequency != null && !String.IsNullOrEmpty(oItem.Frequency.Value) && !String.Equals(oItem.Frequency.Value, "0"));
                    if (lstAdminTimesDetail != null && lstAdminTimesDetail.Count() > 0) {
                        isAdminTimesEmpty = true;
                        objMultipleDoseDetail = lstAdminTimesDetail.First();
                    }
                    if (!isAdminTimesEmpty) {
                        let nTotalCount: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                        for (let iCount: number = 0; iCount < nTotalCount; iCount++) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].SlotTimeMode == 'F' && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency.Value) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency.Value, "0") && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].AdminTimesData != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].AdminTimesData.Count > 0 && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].AdminTimesData[0].FrequencyType, "CC_PERIOD", StringComparison.CurrentCultureIgnoreCase)) {
                                let lstAdminTimesWithZeroTimes = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].AdminTimesData.Where(oItm => oItm.FixedTimes.IndexOf("00:00") >= 0);
                                if (lstAdminTimesWithZeroTimes != null && lstAdminTimesWithZeroTimes.Count() > 1) {
                                    isAdminTimesEmpty = true;
                                    objMultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount];
                                    break;
                                }
                            }
                        }
                    }
                    if (!isAdminTimesEmpty) {
                        let nTotalCount: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                        for (let iCount: number = 0; iCount < nTotalCount; iCount++) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency.Value) && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency.Value, "0") && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData.Count > 0) {
                                let lstAdminTimesWithZeroTimes = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData.Where(oItm => String.Equals(oItm.ScheduleDTTM.ToString("HH:mm"), "00:00"));
                                if (lstAdminTimesWithZeroTimes != null && lstAdminTimesWithZeroTimes.Count() > 1) {
                                    isAdminTimesEmpty = true;
                                    objMultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount];
                                    break;
                                }
                            }
                            else if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase) && (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency == null || (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].Frequency.Value, "0")))) {
                                isFrequencyEmpty = true;
                                objMultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount];
                                break;
                            }
                        }
                    }
                    if (!isAdminTimesEmpty && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                        let nTotalCount: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                        let IsDoseValueExist: boolean = false;
                        let IsDoseUOMExist: boolean = false;
                        for (let iCount: number = 0; (!_IsDoseValueEmpty && iCount < nTotalCount); iCount++) {
                            IsDoseValueExist = true;
                            IsDoseUOMExist = true;
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount] != null) {
                                if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData.Count > 0) {
                                    let ScheduleDetailsData: ObservableCollection<ScheduleDetailsCols> = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData;
                                    let _AdminTimesCount: number = ScheduleDetailsData.Count;
                                    for (let _AdminTimeIndex: number = 0; (!_IsDoseValueEmpty && _AdminTimeIndex < _AdminTimesCount); _AdminTimeIndex++) {
                                        let _GridDaysCount: number = ScheduleDetailsData[_AdminTimeIndex].ScheduleDate != null ? ScheduleDetailsData[0].ScheduleDate.Length : 0;
                                        for (let _GridDayIndex: number = 0; (!_IsDoseValueEmpty && _GridDayIndex < _GridDaysCount); _GridDayIndex++) {
                                            if (ScheduleDetailsData[_AdminTimeIndex].Scheduledoseflag[_GridDayIndex] && String.IsNullOrEmpty(ScheduleDetailsData[_AdminTimeIndex].ScheduleDoseValue[_GridDayIndex])) {
                                                _IsDoseValueEmpty = true;
                                                objMultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount];
                                                break;
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].LowerDose == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].UpperDose == 0) {
                                        IsDoseValueExist = false;
                                    }
                                    else if (IsDoseValueExist && (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].DoseUOM == null || (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].DoseUOM.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].DoseUOM.Value, "0", StringComparison.InvariantCultureIgnoreCase)))) {
                                        IsDoseUOMExist = false;
                                    }
                                    if ((!IsDoseUOMExist || !IsDoseValueExist)) {
                                        _IsDoseValueEmpty = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (isAdminTimesEmpty || _IsDoseValueEmpty || isFrequencyEmpty) {
                        if (objMultipleDoseDetail == null) {
                            objMultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[0];
                        }
                        isValidationSuccess = false;
                        this.oMultipleDoseDetailToFocus = objMultipleDoseDetail;
                        let objSteppedAdminTimeMsgBox: iMessageBox = new iMessageBox();
                        objSteppedAdminTimeMsgBox.Title = "Lorenzo - Manage prescription";
                        objSteppedAdminTimeMsgBox.MessageButton = MessageBoxButton.OK;
                        objSteppedAdminTimeMsgBox.IconType = MessageBoxType.Information;
                        objSteppedAdminTimeMsgBox.MessageBoxClose  = (s,e) => { this.objSteppedDosMsgBox_MessageBoxClose(s,e); } ;
                        let strMsgDisplay: string = String.Empty;
                        if (isAdminTimesEmpty)
                            strMsgDisplay = Resource.Infusion.RecAdminAdministrationTime_Msg;
                        else if (_IsDoseValueEmpty)
                            strMsgDisplay = Resource.steppeddose.DoseValueEmpty;
                        else if (isFrequencyEmpty)
                            strMsgDisplay = "Frequency cannot be blank.";
                        objSteppedAdminTimeMsgBox.Message = strMsgDisplay;
                        objSteppedAdminTimeMsgBox.Show();
                    }
                }
            }
            return isValidationSuccess;
        }
        ValidateSteppedDoseForBlankChangingDoseTimesForNonForAdmin(): boolean {
            let isValidationSuccess: boolean = true;
            if (!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase)) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                    let isAdminTimesEmpty: boolean = false;
                    this.oMultipleDoseDetailToFocus = null;
                    if (!isAdminTimesEmpty) {
                        let nTotalCount: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                        for (let iCount: number = 0; iCount < nTotalCount; iCount++) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount] != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData.Count > 0 && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].HyperlinkText) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].HyperlinkText, CConstants.ChangingDose)) {
                                let lstAdminTimesWithZeroTimes = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount].ScheduleDetailsData.Where(oItm => String.Equals(oItm.ScheduleDTTM.ToString("HH:mm"), "00:00"));
                                if (lstAdminTimesWithZeroTimes != null && lstAdminTimesWithZeroTimes.Count() > 1) {
                                    isAdminTimesEmpty = true;
                                    this.oMultipleDoseDetailToFocus = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[iCount];
                                    break;
                                }
                            }
                        }
                    }
                    if (isAdminTimesEmpty && this.oMultipleDoseDetailToFocus != null) {
                        isValidationSuccess = false;
                        let objSteppedAdminTimeMsgBox: iMessageBox = new iMessageBox();
                        objSteppedAdminTimeMsgBox.Title = "Lorenzo - Manage prescription";
                        objSteppedAdminTimeMsgBox.MessageButton = MessageBoxButton.OK;
                        objSteppedAdminTimeMsgBox.IconType = MessageBoxType.Information;
                        objSteppedAdminTimeMsgBox.MessageBoxClose  = (s,e) => { this.objSteppedDosMsgBox_MessageBoxClose(s,e); } ;
                        objSteppedAdminTimeMsgBox.Message = Resource.Infusion.RecAdminAdministrationTime_Msg;
                        objSteppedAdminTimeMsgBox.Show();
                    }
                }
            }
            return isValidationSuccess;
        }
        objSteppedMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult != MessageBoxResult.Yes) {
                this.oResolveItem.FormViewerDetails.Popup = true;
                let sDoseType: string = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
                let isSteppedDose: boolean = (String.Equals(sDoseType, DoseTypeCode.STEPPED, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.VARIABLE, StringComparison.OrdinalIgnoreCase) || String.Equals(sDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase));
                let isConditionalDose: boolean = (String.Equals(sDoseType, DoseTypeCode.CONDITIONAL, StringComparison.OrdinalIgnoreCase));
                if (isSteppedDose && this.IsSteppedDoseRegimeExists()) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.RestoreSelectedDoseDetail(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedDoseDetail);
                    this.oResolveItem.FormViewerDetails.SteppedPopup = true;
                    if (this.ContentCtrlMedResolveStepped != null) {
                        if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                            let objStepped: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                            if (objStepped != null) {
                                objStepped.grdData.UnselectAll();
                            }
                        }
                    }
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
                else if (isConditionalDose) {
                    this.oResolveItem.FormViewerDetails.SteppedPopup = true;
                    if (super.onDialogClose != null)
                        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
            else if (e.MessageBoxResult == MessageBoxResult.Yes) {
                if (this.ftbFormViewDetails != null && String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                    this.ftbFormViewDetails.Click("frmBasic", true);
                if (this.ContentCtrlMedResolveStepped != null) {
                    if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                        setTimeout(() => {
                            let objStepped: medipresolvestepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                            let bNoError: boolean = false;
                            if (objStepped != null) {
                                objStepped.CanCloseFormViewerWithSVValidation = true;
                                this.CanCloseFormViewerWithSVValidation = objStepped.CanCloseFormViewerWithSVValidation;
                                if (objStepped.cmdAdd.IsEnabled) {
                                    objStepped.IsChangingDoseMezzaineLaunched = false;
                                    bNoError = objStepped.AddClick();
                                }
                                else if (objStepped.cmdUpdate.IsEnabled) {
                                    objStepped.IsChangingDoseMezzaineLaunched = false;
                                    bNoError = objStepped.UpdateClick();
                                }
                                else if (!objStepped.cmdAdd.IsEnabled && !objStepped.cmdUpdate.IsEnabled) {

                                }
                                if (super.onDialogClose != null && bNoError)
                                    super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                            }
                        }, 10);
                    }
                    //Revisit Required
                    
                    else if (this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) {
                        let objStepped: medConditionalDose = ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose);
                        if (objStepped != null) {
                            if (objStepped.cmdAdd.IsEnabled) {
                                objStepped.cmdAdd.Focus();
                            }
                            else if (objStepped.cmdUpdate.IsEnabled) {
                                objStepped.cmdUpdate.Focus();
                            }
                        }
                    }
		    
                    else if (this.ContentCtrlMedResolveStepped.Content instanceof medContConditionalDose) {
                        let objStepped: medContConditionalDose = ObjectHelper.CreateType<medContConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medContConditionalDose);
                        if (objStepped != null) {
                            if (objStepped.cmdAdd.IsEnabled) {
                                objStepped.cmdAdd.Focus();
                            }
                            else if (objStepped.cmdUpdate.IsEnabled) {
                                objStepped.cmdUpdate.Focus();
                            }
                        }
                    }
                    
                }
            }
        }
        ValidateSteppedDoseInfusionPeriod(): boolean {
            let isValidationSuccess: boolean = true;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.Infusions && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.CurrentCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.CONTINUOUS, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME, StringComparison.CurrentCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID, StringComparison.CurrentCultureIgnoreCase)) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText) && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                let InfusionPeriodInMins: number = PrescriptionHelper.GetDurationInMinutesByUOM(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod, this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText);
                let StepDoseInfusionPeriodInMins: number = 0;
                let nTotalCount: number = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
                for (let nCount: number = 0; nCount < nTotalCount; nCount++) {
                    let oTmpMultipleDoseDetail: MultipleDoseDetail = this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[nCount];
                    if (oTmpMultipleDoseDetail.Duration > 0 && oTmpMultipleDoseDetail.DurationUOM != null && !String.IsNullOrEmpty(oTmpMultipleDoseDetail.DurationUOM.Value))
                        StepDoseInfusionPeriodInMins += PrescriptionHelper.GetDurationInMinutesByUOM(oTmpMultipleDoseDetail.Duration.ToString(), oTmpMultipleDoseDetail.DurationUOM.Value);
                }
                if (StepDoseInfusionPeriodInMins > InfusionPeriodInMins) {
                    isValidationSuccess = false;
                    this.objMsg.Message = "The combined duration of each step in the stepped dosing regimen currently exceeds the infusion period.\r\nPlease revisit the step duration to proceed.";
                    this.oResolveItem.FocusControl = "";
                    this.objMsg.Show();
                }
                else if (StepDoseInfusionPeriodInMins < InfusionPeriodInMins) {
                    let InfDurationMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                        Title: "Lorenzo - Manage prescription",
                        Message: "The combined duration of each step in the stepped dosing regimen is less than the infusion period. The infusion rate of the last step shall be continued for the remaining period.\r\nClick on Yes to proceed, No to change the duration.",
                        MessageButton: MessageBoxButton.YesNo,
                        IconType: MessageBoxType.Information
                    });
                    isValidationSuccess = false;
                    InfDurationMsgBox.MessageBoxClose  = (s,e) => { this.InfDurationMsgBox_MessageBoxClose(s,e); } ;
                    InfDurationMsgBox.Show();
                }
            }
            return isValidationSuccess;
        }
        CheckBloodProductMsg(): boolean {
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE_BLOOD, StringComparison.OrdinalIgnoreCase)) && this.bBloodMsgShown) {
                this.bBloodMsgShown = false;
                let oMessagebox2: iMessageBox = new iMessageBox();
                oMessagebox2.Title = "Lorenzo";
                oMessagebox2.Message = Resource.MedicationForm.BloodproductMsg;
                oMessagebox2.MessageButton = MessageBoxButton.OK;
                oMessagebox2.MessageBoxClose  = (s,e) => { this.oMessagebox2_MessageBoxClose(s,e); } ;
                oMessagebox2.IconType = MessageBoxType.Information;
                oMessagebox2.Height = Number.NaN;
                oMessagebox2.Show();
                return false;
            }
            return true;
        }
        CheckSaturationRange(): boolean {
            if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange)) {
                return true;
            }
            else {
                let iTargetLow: number, iTargetHigh = 0;
                iTargetLow = !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange) ? Convert.ToInt32(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange) : 0;
                iTargetHigh = !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange) ? Convert.ToInt32(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange) : 0;
                if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange)) {
                    if (iTargetLow == iTargetHigh) {
                        if (this.objMsg != null) {
                            this.oResolveItem.FocusControl = "txtTargetHigh";
                            this.objMsg.Message = "Target saturation range lower and upper limit values are the same. please change either.";
                            this.objMsg.MessageButton = MessageBoxButton.OK;
                            this.objMsg.Show();
                            return false;
                        }
                    }
                    else if (iTargetHigh < iTargetLow) {
                        if (this.objMsg != null) {
                            this.oResolveItem.FocusControl = "txtTargetHigh";
                            this.objMsg.Message = "Upper limit value is less than the lower limit value. please change the value.";
                            this.objMsg.MessageButton = MessageBoxButton.OK;
                            this.objMsg.Show();
                            return false;
                        }
                    }
                }
                else if (iTargetLow > 0 && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange)) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtTargetHigh";
                        this.objMsg.Message = "Target saturation range upper value cannot be blank.";
                        this.objMsg.MessageButton = MessageBoxButton.OK;
                        this.objMsg.Show();
                        return false;
                    }
                }
                else if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange) && iTargetHigh > 0) {
                    if (this.objMsg != null) {
                        this.oResolveItem.FocusControl = "txtTargetLow";
                        this.objMsg.Message = "Target saturation range lower value cannot be blank.";
                        this.objMsg.MessageButton = MessageBoxButton.OK;
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
            return true;
        }
        public CheckQuantity(): boolean {
            if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.InvariantCultureIgnoreCase)) && (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) && (Convert.ToDouble(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) > 0) && (this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM.Value))) || (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase) == 0) && (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) && (this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM == null || String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM.Value)))) {
                this.oResolveItem.FocusControl = "cboQuantity";
                this.sMandMsgChck = "QuantityUOM";
                this.objMsg.Message = Resource.MedicationForm.ManQtyUOM;
                this.objMsg.Show();
                return false;
            }
            else if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Discharge, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Leave, StringComparison.InvariantCultureIgnoreCase)) && ((this.oResolveItem.FormViewerDetails.BasicDetails.IsQuantityMandatory && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity)) || ((this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM.Value)) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity)))) {
                this.oResolveItem.FocusControl = "txtQuantity";
                this.sMandMsgChck = "Quantity";
                this.objMsg.Message = Resource.MedicationForm.ManQty;
                this.objMsg.Show();
                return false;
            }
            else if ((String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) || String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Inpatient, StringComparison.InvariantCultureIgnoreCase)) && (this.oResolveItem.FormViewerDetails.BasicDetails.IsQuantityMandatory && ((String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) || (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) && Convert.ToDouble(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) == 0))) || (this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM.Value) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) || (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) && Convert.ToDouble(this.oResolveItem.FormViewerDetails.BasicDetails.Quantity) == 0))))) {
                this.oResolveItem.FocusControl = "txtQuantity";
                this.sMandMsgChck = "Quantity";
                this.objMsg.Message = Resource.MedicationForm.ManQuantity;
                this.objMsg.Show();
                return false;
            }
            return true;
        }
        objSteppedDosMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            let objStepped: medipresolvestepped;
            if (this.ContentCtrlMedResolveStepped != null) {
                //Revisit Required
                /*
                if (this.ContentCtrlMedResolveStepped.Content instanceof medresolvestepped) {
                    let objStepped: medresolvestepped = ObjectHelper.CreateType<medresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medresolvestepped);
                    if (objStepped != null) {
                        objStepped.grdData.UnselectAll();
                    }
                }
                else */ 
                if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                    objStepped = ObjectHelper.CreateType<medipresolvestepped>(this.ContentCtrlMedResolveStepped.Content, medipresolvestepped);
                    if (objStepped != null) {
                        objStepped.ClearControls();
                        objStepped.grdData.SelectedItems.Clear();
                        if (objStepped.grdData.selectedRowsIndex && objStepped.grdData.selectedRowsIndex.length > 0) objStepped.grdData.selectedRowsIndex = [];
                        if (objStepped.grdData.SelectedItem) objStepped.grdData.SelectedItem = [];
                        if (objStepped._chkGridSelectionRef && objStepped._chkGridSelectionRef.length > 0) {
                            objStepped._chkGridSelectionRef.forEach(item => item.IsChecked = false)
                        }
                    }
                }
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.SelectedDoseDetail = this.oMultipleDoseDetailToFocus;
         if (  this.oResolveItem.FormViewerDetails.IsFlgStpCheck ) {
          objStepped.grdData.SelectedItem =this.objfrm.FormViewerDetails.BasicDetails.SelectedDoseDetail;          
          objStepped._chkGridSelectionRef.toArray()[(objStepped.grdData.SelectedItem.StepSequenceNo-1)].IsChecked =true;
          objStepped.grdData.UpdateCheckBoxSelection(objStepped._chkHeaderRowCheckbox, objStepped._chkGridSelectionRef, false);           
          objStepped.grdData_SelectionChanged({}, {}); 
       }
}
        ValidateDeactiveAttributes(): boolean {
            let isValidationSuccess: boolean = false;
            if (!this.bMsgShown) {
                let objMsgBox: iMessageBox = new iMessageBox();
                objMsgBox.Title = "Lorenzo - Manage prescription";
                objMsgBox.MessageButton = MessageBoxButton.OK;
                objMsgBox.IconType = MessageBoxType.Information;
                objMsgBox.MessageBoxClose  = (s,e) => { this.objMsgBox_MessageBoxClose(s,e); } ;
                this.errMessage = this.GetDeactiveAttributeMessage();
                if (!String.IsNullOrEmpty(this.errMessage)) {
                    objMsgBox.Message = this.errMessage;
                    this.bMsgShown = true;
                    objMsgBox.Show();
                }
                else {
                    isValidationSuccess = true;
                }
            }
            return isValidationSuccess;
        }
        objMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (this.errMessage.Contains("Administration instructions")) {
            // let cboAdmin: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox) != null) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox).Focus();
                }
            }
            else if (this.errMessage.Contains("Administration method")) {
            // let cboAdminMethod: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox) != null) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox).Focus();
                }
            }
            else if (this.errMessage.Contains("Site")) {
            // let cboSite: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox) != null) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox).Focus();
                }
            }
            else if (this.errMessage.Contains("Frequency")) {
            // let cboFrequency: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox) != null) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox).Focus();
                }
            }
            else if (this.errMessage.Contains("Dosage form")) {
            // let cboDosageForm: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox) != null) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox).Focus();
                }
            }
            else if (this.errMessage.Contains("Quantity UOM")) {
            // let cboQty: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQty"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQty"), iComboBox) != null) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQty"), iComboBox).Focus();
                }
            }
            else if (this.errMessage.Contains("Route")) {
            // let cboRoute: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox) != null) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox).Focus();
                }
            }
            else if (this.errMessage.Contains("Dose UOM")) {
            // let cboUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox) != null) {
                if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                    this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox).Focus();
                }
            }
        }
        oMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value != null || this.oResolveItem.FormViewerDetails.BasicDetails.Dose != "0") {
                    this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateDoseSafty = true;
                    this.IsValidationAsyncCallback = false;
                    this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
            else {
                if (String.Equals(this.oResolveItem.FocusControl, "txtUpperDose", StringComparison.CurrentCultureIgnoreCase)) {
                // let txtUpperDose1: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox) instanceof iTextBox) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                            this.ftbFormViewDetails.Click("frmBasic", true);
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox).Focus();
                    }
                }
                else {
                // let txtLowerDose1: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox) instanceof iTextBox) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                            this.ftbFormViewDetails.Click("frmBasic", true);
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox).Focus();
                    }
                }
            }
        }
        InfDurationMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                this.IsValidationAsyncCallback = true;
                this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
            else {
                if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                    this.ftbFormViewDetails.Click("frmBasic", true);
                if (this.ContentCtrlMedResolveStepped.Content instanceof medipresolvestepped) {
                    let RowCount: number = (<medipresolvestepped>this.ContentCtrlMedResolveStepped.Content).grdData.GetRowCount();
                    if (RowCount > 0) {
                        (<medipresolvestepped>this.ContentCtrlMedResolveStepped.Content).grdData.setSelectedItemByIndex(RowCount - 1);
                    }
                    else {
                        (<medipresolvestepped>this.ContentCtrlMedResolveStepped.Content).grdData.Focus();
                    }
                }
            }
        }
        oMsgBox_MessageBoxCloseDose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.OK) {
            // let txtLowerDose: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox);
            if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox) instanceof iTextBox) {
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                        this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox).Focus();
                }
            }
        }
        oMaxTimeMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.OK) {
                this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddDays(1);
                this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
        }

        objMsg_MessageBoxClose_Focus(sender: Object, e: MessageEventArgs): void {

            let ErrorMsgExistForBasicDetails : boolean =  false;
            if(this.dupDialogRef != null && this.dupDialogRef.content != null && this.dupDialogRef.content.instance != null
                && this.dupDialogRef.content.instance.Component != null)
                this.frmRecordAdmin = this.dupDialogRef.content.instance.Component.frmRecordAdmin;

            switch (this.oResolveItem.FocusControl) {
                case "dtpStartDate":
                    let dtpStartDate: iDateTimePicker = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker);
                if (ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker) instanceof iDateTimePicker) {
                    ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                    //Revisit Required
                    /*
                case "Weekdays":
                    this.frmweekdays = ObjectHelper.CreateType<frmWeekdays>(this.frmViewBasic.FindName("Weekdays"), frmWeekdays);
                    if (this.frmweekdays instanceof frmWeekdays) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                            this.ftbFormViewDetails.Click("frmBasic", true);
                        }
                        this.frmweekdays.Focus();
                    }
                    break;
                    */
                case "cboRoute":
                // let cboRoute: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "Conflict_ValidateMsg":
                    break;
                case "TechValMandatory_ValidateMsg":
                    break;                                       
                case "cborecordAdminRoute":
                    if (this.frmRecordAdmin != null) {
                        let cborecordAdminRoute: iComboBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited) {
                                cborecordAdminRoute = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboRoute"), iComboBox);
                            }
                            else
                                cborecordAdminRoute = this.ProxycboRoute != null ? this.ProxycboRoute : this.dupDialogRef.content.instance.Component.ProxycboRoute;
                        } else 
                            cborecordAdminRoute = this.ProxycboRoute != null ? this.ProxycboRoute : this.dupDialogRef.content.instance.Component.ProxycboRoute;                                                    
                        if (cborecordAdminRoute instanceof iComboBox) {
                            cborecordAdminRoute.Focus();
                        }
                    }
                    break;                
                case "cboDoseType":
                // let cboDoseType: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboUOM":
                // let cboUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtLowerDose":
                // let txtLowerDose: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtUpperDose":
                // let txtUpperDose: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboFrequency":
                // let cboFrequency: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }

                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase)) {
                    // let TmpContentCtrlMedResolveStepped: ContentControl = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                    if (ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl) != null && ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content instanceof medConditionalDose) {
                        if ((ObjectHelper.CreateType<medConditionalDose>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medConditionalDose)) != null) {
                            (ObjectHelper.CreateType<medConditionalDose>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medConditionalDose)).cboFrequency.Focus();
                            }
                        }
                    }
                    
                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.CurrentCultureIgnoreCase)) {
                    // let TmpContentCtrlMedResolveStepped: ContentControl = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                        //Revisit Required
                        
                    if (ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl) != null && ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content instanceof medresolvetitrated) {
                        if ((ObjectHelper.CreateType<medresolvetitrated>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medresolvetitrated)) != null) {
                            (ObjectHelper.CreateType<medresolvetitrated>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medresolvetitrated)).cboFrequency.Focus();
                            }
                        }
                        
                    }
                    break;
                case "cboMonth":
                // let cboMonth: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonth"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonth"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonth"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboRsnForMod":
                    if(this.cboRsnForMod){
                        if (this.cboRsnForMod instanceof iComboBox) {
                            this.cboRsnForMod.Focus();
                        }
                    }
                // let cboRsnForMod: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtLegalCatag":
                // let txtLegalCatag: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLegalCatag"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLegalCatag"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLegalCatag"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboAdmin":
                // let cboAdmin: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "chkPRN":
                // let chkPRN: iCheckBox = ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chkPRN"), iCheckBox);
                if (ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chkPRN"), iCheckBox) instanceof iCheckBox) {
                    ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chkPRN"), iCheckBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtAdminInstruction":
                // let txtAdminInstruction: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAdminInstruction"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAdminInstruction"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAdminInstruction"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboPRNInstruction":
                // let cboPRNInstruction: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboPRNInstruction"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboPRNInstruction"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboPRNInstruction"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }

                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase)) {
                    // let TmpContentCtrlMedResolveStepped: ContentControl = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                    if (ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl) != null && ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content instanceof medConditionalDose) {
                        if ((ObjectHelper.CreateType<medConditionalDose>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medConditionalDose)) != null) {
                            (ObjectHelper.CreateType<medConditionalDose>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medConditionalDose)).cboPRNInstruction.Focus();
                            }
                        }
                    }

                    break;
                case "cboStationary":
                // let cboStationary: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtBatchNo":
                // let txtBatchNo: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBatchNo"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBatchNo"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBatchNo"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "lblDispensinstruction":
                // let lblDispensinstruction: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDispensinstruction"), iLabel);
                if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDispensinstruction"), iLabel) instanceof iLabel) {
                    ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDispensinstruction"), iLabel).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtDispenInstruction":
                // let txtDispenInstruction: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDispenInstruction"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDispenInstruction"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDispenInstruction"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboDosageForm":
                // let cboDosageForm: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                    //Revisit Required
                    /*
                case "cboDosageFormMC":
                    let cboDosageFormMC: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewMulticomponent.FindName("cboDosageFormMC"), iComboBox);
                    if (cboDosageFormMC instanceof iComboBox) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmmulticomponent") != 0) {
                            this.ftbFormViewDetails.Click("frmmulticomponent", true);
                        }
                        cboDosageFormMC.Focus();
                    }
                    break;
                    */
                case "dtpStopDate":
                // let dtpStopDate: iDateTimePicker = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker);
                if (ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker) instanceof iDateTimePicker) {
                    ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtAddComments":
                // let txtAddComments: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboAdminMethod":
                // let cboAdminMethod: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboIntervalInst":
                // let cboIntervalInst: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboIntervalInst"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboIntervalInst"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboIntervalInst"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "dtpExpirydate":
                // let dtpExpirydate: iDateTimePicker = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpExpirydate"), iDateTimePicker);
                if (ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpExpirydate"), iDateTimePicker) instanceof iDateTimePicker) {
                    ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpExpirydate"), iDateTimePicker).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtDrugName":
                // let txtDrugName: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDrugName"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDrugName"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDrugName"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtNonCatItem":
                // let txtNonCatItem: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtNonCatItem"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtNonCatItem"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtNonCatItem"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboNONCATReason":
                // let cboNONCATReason: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboNONCATReason"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboNONCATReason"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboNONCATReason"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtOtherNonCatReason":
                // let txtOtherNonCatReason: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtOtherNonCatReason"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtOtherNonCatReason"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtOtherNonCatReason"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboSite":
                // let cboSite: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtProblem":
                // let txtProblem: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "clbEndorprop":
                // let clbEndorprop: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("clbEndorprop"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("clbEndorprop"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("clbEndorprop"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboTreatment":
                // let cboTreatment: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboTreatment"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboTreatment"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboTreatment"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboSupply":
                // let cboSupply: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSupply"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSupply"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSupply"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtQuantity":
                // let txtQuantity: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtQuantity"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtQuantity"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtQuantity"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboQuantity":
                // let cboQuantity: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox).Focus();
                    }
                    break;
                case "cboDuration":
                // let cboDuration: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDuration"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDuration"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDuration"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "udDuration":
                // let udDuration: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udDuration"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udDuration"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udDuration"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "udnIntervalInst":
                // let udnIntervalInst: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnIntervalInst"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnIntervalInst"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnIntervalInst"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "udnNumberofIns":
                // let udnNumberofIns: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnNumberofIns"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnNumberofIns"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnNumberofIns"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtVerificationComments":
                // let txtVerificationComments: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVerificationComments"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVerificationComments"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVerificationComments"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboStrength":
                // let cboStrength: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtAdminDose":
                    let txtAdminDose: iTextBox = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            txtAdminDose = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtDoseValue"), iTextBox);
                        else
                            txtAdminDose = this.ProxytxtAdminDose != null ? this.ProxytxtAdminDose : this.dupDialogRef.content.instance.Component.ProxytxtAdminDose;
                    }
                    else
                        txtAdminDose = this.ProxytxtAdminDose != null ? this.ProxytxtAdminDose : this.dupDialogRef.content.instance.Component.ProxytxtAdminDose;
                    if (txtAdminDose instanceof iTextBox) {
                        txtAdminDose.Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "sfsWitnessedby":
                    if (this.frmRecordAdmin != null) {
                        let sfsWitnessedby: iSFS = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                sfsWitnessedby = ObjectHelper.CreateType<iSFS>(this.oRecordAdminTab.Content.FindName("sfsWitnessedby"), iSFS);                            
                            else
                                sfsWitnessedby = this.ProxysfsWitnessedby != null ? this.ProxysfsWitnessedby : this.dupDialogRef.content.instance.Component.ProxysfsWitnessedby;                        
                        }
                        else
                            sfsWitnessedby = this.ProxysfsWitnessedby != null ? this.ProxysfsWitnessedby : this.dupDialogRef.content.instance.Component.ProxysfsWitnessedby;                        
                        if (sfsWitnessedby instanceof iSFS) {
                            sfsWitnessedby.ClearAll();
                            sfsWitnessedby.Focus();
                            this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Focus = true;
                        }
                    }
                    break;
                case "cboDoseUoMValue":
                    let cboDoseUoMValue: iComboBox = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            cboDoseUoMValue = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboDoseUoMValue"), iComboBox);
                        else
                            cboDoseUoMValue = this.ProxycboDoseUoMValue != null ? this.ProxycboDoseUoMValue : this.dupDialogRef.content.instance.Component.ProxycboDoseUoMValue;
                    }
                    else
                        cboDoseUoMValue = this.ProxycboDoseUoMValue != null ? this.ProxycboDoseUoMValue : this.dupDialogRef.content.instance.Component.ProxycboDoseUoMValue;
                    if (cboDoseUoMValue instanceof iComboBox) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                            cboDoseUoMValue.TabIndex = 0;
                        }
                        else {
                            cboDoseUoMValue.Focus();
                        }
                    }                    
                    break;                    
                case "cboModClerkReason":
                    if (this.frmViewBasic != null) {
                    // let cboModClerkReasongas: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox);
                    if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox) instanceof iComboBox) {
                        ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox).Focus();
                        }
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "dtpAdminDate":
                    let dtpAdminDate: iDateTimePicker = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            dtpAdminDate = ObjectHelper.CreateType<iDateTimePicker>(this.oRecordAdminTab.Content.FindName("dtpAdminDate"), iDateTimePicker);
                        else
                            dtpAdminDate = this.ProxydtpAdminDate != null ? this.ProxydtpAdminDate : this.dupDialogRef.content.instance.Component.ProxydtpAdminDate;
                    }
                    else
                        dtpAdminDate = this.ProxydtpAdminDate != null ? this.ProxydtpAdminDate : this.dupDialogRef.content.instance.Component.ProxydtpAdminDate;

                    if (dtpAdminDate instanceof iDateTimePicker) {
                        dtpAdminDate.Focus();
                    }
                    break;                    
                case "udYear":
                // let udYear: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udYear"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udYear"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udYear"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cmdBrand":
                // let cmdbrand: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("cmdBrand"), iLabel);
                if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("cmdBrand"), iLabel) instanceof iLabel) {
                        this.cmdBrand.Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboBolusUOM":
                // let cboBolusUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBolusUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBolusUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBolusUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboUOMFlowrate":
                // let cboUOMFlowrate: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboUOMFlowrate1":
                // let cboUOMFlowrate1: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate1"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate1"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate1"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtFlowRate":
                // let txtFlowRate: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtFlowRate"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtFlowRate"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtFlowRate"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboInfusionRateUOM":

                    let cboInfusionRateUOM: iComboBox = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            cboInfusionRateUOM = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboInfusionRateUOM"), iComboBox);
                        else
                            cboInfusionRateUOM = this.ProxycboInfusionRateUOM != null ? this.ProxycboInfusionRateUOM : this.dupDialogRef.content.instance.Component.ProxycboInfusionRateUOM;
                    }
                    else
                        cboInfusionRateUOM = this.ProxycboInfusionRateUOM != null ? this.ProxycboInfusionRateUOM : this.dupDialogRef.content.instance.Component.ProxycboInfusionRateUOM;
                    if (cboInfusionRateUOM instanceof iComboBox) {
                        cboInfusionRateUOM.Focus();
                    }
                    break;
                case "cboInfustionRateUOM":
                // let cboInfustionRateUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtInfusionRate":
                // let txtInfusionRate: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboinfustionPeriodUOM":
                // let cboinfustionPeriodUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboinfustionPeriodUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboinfustionPeriodUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboinfustionPeriodUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtInfusionperiod":
                // let txtInfusionperiod: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionperiod"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionperiod"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionperiod"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtTargetHigh":
                // let txtTargetHigh: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetHigh"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetHigh"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetHigh"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtTargetLow":
                // let txtTargetLow: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetLow"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetLow"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetLow"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtBoosterDose":
                // let txtBoosterDose: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboBoosterUOM":
                // let cboBoosterUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtVolume":
                // let txtVolume: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboVolumeUOM":
                // let cboVolumeUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboVolumeUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboVolumeUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboVolumeUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtLowConcentration":
                // let txtLowConcentration: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowConcentration"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowConcentration"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowConcentration"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtUpperInfusionRate":
                // let txtUpperInfusionRate: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperInfusionRate"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperInfusionRate"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperInfusionRate"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboLowConcentrationUOMlist":
                // let cboLowConcentrationUOMlist: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLowConcentrationUOMlist"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLowConcentrationUOMlist"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLowConcentrationUOMlist"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtUpperConcentration":
                // let txtUpperConcentration: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperConcentration"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperConcentration"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperConcentration"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboUpperConcentrationUOMlist":
                // let cboUpperConcentrationUOMlist: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUpperConcentrationUOMlist"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUpperConcentrationUOMlist"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUpperConcentrationUOMlist"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtLockoutPeriod":
                // let txtLockoutPeriod: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLockoutPeriod"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLockoutPeriod"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLockoutPeriod"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboLockoutPeriodUOM":
                // let cboLockoutPeriodUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLockoutPeriodUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLockoutPeriodUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLockoutPeriodUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtBolus":
                // let txtBolus: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtMonitoringdevice":
                // let txtMonitoringdevice: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtMonitoringdevice"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtMonitoringdevice"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtMonitoringdevice"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboMonitoringdeviceUOM":
                // let cboMonitoringdeviceUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonitoringdeviceUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonitoringdeviceUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonitoringdeviceUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "udReviewafter":
                // let udReviewafter: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udReviewafter"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udReviewafter"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udReviewafter"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboInfusion":
                // let cboInfusion: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboConcentration":
                // let cboConcentration: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboConcentration"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboConcentration"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboConcentration"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "BagVolume":
                    if (this.frmRecordAdmin != null) {
                        let BagVolume: iTextBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                BagVolume = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("bagvolumetext"), iTextBox);
                            else
                                BagVolume = this.Proxybagvolumetext != null ? this.Proxybagvolumetext : this.dupDialogRef.content.instance.Component.Proxybagvolumetext;
                        }
                        else
                            BagVolume = this.Proxybagvolumetext != null ? this.Proxybagvolumetext : this.dupDialogRef.content.instance.Component.Proxybagvolumetext;                            
                        if (BagVolume instanceof iTextBox) {
                            BagVolume.Focus();
                        }
                    }
                    break;
                case "cbobagUoMValue":
                    if (this.frmRecordAdmin != null) {
                        let icboBagVolume: iComboBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                icboBagVolume = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cbobagUoMValue"), iComboBox);                            
                            else
                                icboBagVolume = this.ProxycbobagUoMValue;
                        } else
                            icboBagVolume = this.ProxycbobagUoMValue;                        
                        if (icboBagVolume instanceof iComboBox) {
                            icboBagVolume.Focus();
                        }
                    }
                    break;
                case "txtRecinfusionrate":
                    if (this.frmRecordAdmin != null) {

                        let itxtRecinfusionrate: iTextBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                itxtRecinfusionrate = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtRecinfusionrate"), iTextBox);
                            else 
                                itxtRecinfusionrate = this.ProxytxtRecinfusionrate != null ? this.ProxytxtRecinfusionrate : this.dupDialogRef.content.instance.Component.ProxytxtRecinfusionrate;
                        }
                        else 
                            itxtRecinfusionrate = this.ProxytxtRecinfusionrate != null ? this.ProxytxtRecinfusionrate : this.dupDialogRef.content.instance.Component.ProxytxtRecinfusionrate;
                        if (itxtRecinfusionrate instanceof iTextBox) {
                            itxtRecinfusionrate.Focus();
                        }
                    }
                    break;
                case "dtpRecExpiryDate":
                    let dtpRecExpiryDate: iDateTimePicker = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            dtpRecExpiryDate = ObjectHelper.CreateType<iDateTimePicker>(this.oRecordAdminTab.Content.FindName("dtpRecExpiryDate"), iDateTimePicker);
                        else
                            dtpRecExpiryDate = this.ProxyRecExpiryDate != null ? this.ProxyRecExpiryDate : this.dupDialogRef.content.instance.Component.ProxyRecExpiryDate;
                    }
                    else
                        dtpRecExpiryDate = this.ProxyRecExpiryDate != null ? this.ProxyRecExpiryDate : this.dupDialogRef.content.instance.Component.ProxyRecExpiryDate;
                    if (dtpRecExpiryDate instanceof iDateTimePicker) {
                        dtpRecExpiryDate.Focus();
                    }
                    break;
                case "txtRecBatchNo":
                    let txtRecBatchNo: iTextBox = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            txtRecBatchNo = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtRecBatchNo"), iTextBox);
                        else
                            txtRecBatchNo = this.ProxytxtRecBatchNo != null ? this.ProxytxtRecBatchNo : this.dupDialogRef.content.instance.Component.ProxytxtRecBatchNo;
                    }
                    else
                        txtRecBatchNo = this.ProxytxtRecBatchNo != null ? this.ProxytxtRecBatchNo : this.dupDialogRef.content.instance.Component.ProxytxtRecBatchNo;
                    if (txtRecBatchNo instanceof iTextBox) {
                        txtRecBatchNo.Focus();
                    }
                    break;                    
                case "cboDeliveryDevice":
                // let cboDeliveryDevice: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDeliveryDevice"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDeliveryDevice"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDeliveryDevice"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "iTimeScheduled":
                    //Revisit Required
                    /*
                    if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase) == 0) && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)) != null && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc") != null && ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes) != null && (ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes") != null && ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid) != null) {
                        let _grdAdminTime: iGrid = (ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid));
                        if (_grdAdminTime != null && _grdAdminTime.ItemsSource != null) {
                            if (_grdAdminTime.Rows.Count > 1) {
                                (<Telerik.Windows.Controls.GridView.GridViewCell>_grdAdminTime.Rows[1].Cells[0]).IsCurrent = true;
                            }
                            _grdAdminTime.BeginEdit();
                        }
                    }
                    
                    break;
                    */
                case "txtRecFlowRate":
                    if (this.frmRecordAdmin != null) {
                        let itxtRecFlowRate: iTextBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                itxtRecFlowRate = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtRecFlowRate"), iTextBox);
                            else
                                itxtRecFlowRate = this.ProxytxtRecFlowRate != null ? this.ProxytxtRecFlowRate : this.dupDialogRef.content.instance.Component.ProxytxtRecFlowRate;
                        }
                        else
                            itxtRecFlowRate = this.ProxytxtRecFlowRate != null ? this.ProxytxtRecFlowRate : this.dupDialogRef.content.instance.Component.ProxytxtRecFlowRate;                            
                        if (itxtRecFlowRate instanceof iTextBox) {
                            if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null)
                                    this.oResolveItem.FormViewerDetails.BasicDetails.bIsFlowRateAtRecAdmShown = true;
                                // this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                            }
                            itxtRecFlowRate.Focus();
                        }
                    }
                    break;
                case "cboflowratenumuom":
                    if (this.frmRecordAdmin != null) {
                        let cboFlowRateNumUOM: iComboBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                cboFlowRateNumUOM = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboflowratenumuom"), iComboBox);                        
                            else 
                                cboFlowRateNumUOM = this.Proxycboflowratenumuom != null ? this.Proxycboflowratenumuom : this.dupDialogRef.content.instance.Component.Proxycboflowratenumuom;
                        } else 
                            cboFlowRateNumUOM = this.Proxycboflowratenumuom != null ? this.Proxycboflowratenumuom : this.dupDialogRef.content.instance.Component.Proxycboflowratenumuom;                                                                   
                        if (cboFlowRateNumUOM instanceof iComboBox) {
                            cboFlowRateNumUOM.Focus();
                        }
                    }
                    break;
                case "cboflowratedenuom":
                    if (this.frmRecordAdmin != null) {
                        let cboFlowRateDenUOM: iComboBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                cboFlowRateDenUOM = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboflowratedenuom"), iComboBox);                            
                            else
                                cboFlowRateDenUOM = this.Proxycboflowratedenuom ? this.Proxycboflowratedenuom : this.dupDialogRef.content.instance.Component.Proxycboflowratedenuomuom;
                        } else
                            cboFlowRateDenUOM = this.Proxycboflowratedenuom ? this.Proxycboflowratedenuom : this.dupDialogRef.content.instance.Component.Proxycboflowratedenuomuom;                          
                        if (cboFlowRateDenUOM instanceof iComboBox) {
                            cboFlowRateDenUOM.Focus();
                        }
                    }
                    break;                    
                case "cboFluid":
                // let cboFluid: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFluid"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFluid"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFluid"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "SelectProduct":
                // let lblSelProduct: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("SelectProduct"), iLabel);
                if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("SelectProduct"), iLabel) instanceof iLabel) {
                    ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("SelectProduct"), iLabel).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "chkSunday":
                    //Revisit Required
                    /*
                    if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase) == 0) && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)) != null && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc") != null && ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes) != null && (ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes") != null && ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid) != null) {
                        let _grdAdminTime: iGrid = (ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid));
                        let checsunday: iCheckBox = ObjectHelper.CreateType<iCheckBox>(_grdAdminTime.FindName("chkSunday"), iCheckBox);
                        if (_grdAdminTime != null && _grdAdminTime.ItemsSource != null) {
                            if (checsunday instanceof iCheckBox) {
                                this.ftbFormViewDetails.Click("frmBasic", true);
                                checsunday.Focus();
                            }
                        }
                    }
                    */
                    break;
                case "grdAdminTimes":
                    //Revisit Required
                    /*
                    if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase) == 0) && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)) != null && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc") != null && ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes) != null && (ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes") != null && ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid) != null) {
                        let _grdAdminTime: iGrid = (ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid));
                        if (_grdAdminTime != null && _grdAdminTime.ItemsSource != null) {
                            if (_grdAdminTime instanceof iGrid) {
                                this.ftbFormViewDetails.Click("frmBasic", true);
                                _grdAdminTime.Focus();
                            }
                        }
                    }
                    */
                    break;
                case "grdAdminTimeOneslotInAmend":
                    break;
            }                       
        } 
        objMsg_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
        if (this.ftbFormViewDetails?.SelectedIndex == 0||this.ftbFormViewDetails?.SelectedIndex == this.ftbFormViewDetails.itabs.length-1) {
            this.frmViewBasic = this.ftbFormViewDetails.itabs[0].Content;
        }
            let ErrorMsgExistForBasicDetails : boolean =  false;
            if(this.dupDialogRef != null && this.dupDialogRef.content != null && this.dupDialogRef.content.instance != null
                && this.dupDialogRef.content.instance.Component != null)
                this.frmRecordAdmin = this.dupDialogRef.content.instance.Component.frmRecordAdmin;

            switch (this.oResolveItem.FocusControl) {
                case "dtpStartDate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let dtpStartDate: iDateTimePicker = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker);
                if (ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker) instanceof iDateTimePicker) {
                    ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStartDate"), iDateTimePicker).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                    //Revisit Required
                    /*
                case "Weekdays":
                    this.frmweekdays = ObjectHelper.CreateType<frmWeekdays>(this.frmViewBasic.FindName("Weekdays"), frmWeekdays);
                    if (this.frmweekdays instanceof frmWeekdays) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                            this.ftbFormViewDetails.Click("frmBasic", true);
                        }
                        this.frmweekdays.Focus();
                    }
                    break;
                    */
                case "cboRoute":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboRoute: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox) instanceof iComboBox) {
                        // cboRoute.Focus();
                        setTimeout(() => {                           
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox).Focus();
                    }, 0);
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "Conflict_ValidateMsg":
                    let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmConflicts");
		    if (oFauxTabItem != null && !String.IsNullOrEmpty(this.ftbFormViewDetails.SelectedKey)) {
                        this.ftbFormViewDetails.Click("frmConflicts", true);
                    }
                    break;
                case "TechValMandatory_ValidateMsg":
                    let oFauxTabTech: iTabItem = this.ftbFormViewDetails.GetItem("frmTech");
		    if (oFauxTabTech != null && String.Compare(this.ftbFormViewDetails.SelectedKey, "frmTech") != 0) {
                        this.ftbFormViewDetails.Click("frmTech", true);
                    }
                    break;                                       
                case "cborecordAdminRoute":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                    }
                    if (this.frmRecordAdmin != null) {
                        let cborecordAdminRoute: iComboBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited) {
                                cborecordAdminRoute = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboRoute"), iComboBox);
                            }
                            else
                                cborecordAdminRoute = this.ProxycboRoute != null ? this.ProxycboRoute : this.dupDialogRef.content.instance.Component.ProxycboRoute
                        } else 
                            cborecordAdminRoute = this.ProxycboRoute != null ? this.ProxycboRoute : this.dupDialogRef.content.instance.Component.ProxycboRoute;                                                    
                        if (cborecordAdminRoute instanceof iComboBox) {
                            cborecordAdminRoute.Focus();
                        }
                    }
                    break;                
                case "cboDoseType":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboDoseType: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboUOM":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtLowerDose":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtLowerDose: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowerDose"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtUpperDose":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtUpperDose: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperDose"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboFrequency":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboFrequency: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFrequency"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }

                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase)) {
                    // let TmpContentCtrlMedResolveStepped: ContentControl = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                    if (ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl) != null && ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content instanceof medConditionalDose) {
                        if ((ObjectHelper.CreateType<medConditionalDose>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medConditionalDose)) != null) {
                            (ObjectHelper.CreateType<medConditionalDose>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medConditionalDose)).cboFrequency.Focus();
                            }
                        }
                    }
                    
                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.TITRATED, StringComparison.CurrentCultureIgnoreCase)) {
                    // let TmpContentCtrlMedResolveStepped: ContentControl = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                        //Revisit Required
                        
                    if (ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl) != null && ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content instanceof medresolvetitrated) {
                        if ((ObjectHelper.CreateType<medresolvetitrated>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medresolvetitrated)) != null) {
                            (ObjectHelper.CreateType<medresolvetitrated>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medresolvetitrated)).cboFrequency.Focus();
                            }
                        }
                        
                    }
                    break;
                case "cboMonth":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboMonth: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonth"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonth"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonth"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboRsnForMod":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                    if (this.cboRsnForMod && this.cboRsnForMod instanceof iComboBox) {
                        this.cboRsnForMod.Focus();
                    }
                // let cboRsnForMod: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox) instanceof iComboBox) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                            this.ftbFormViewDetails.Click("frmBasic", true);
                        }
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRsnForMod"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtLegalCatag":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtLegalCatag: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLegalCatag"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLegalCatag"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLegalCatag"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboAdmin":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboAdmin: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdmin"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "chkPRN":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let chkPRN: iCheckBox = ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chkPRN"), iCheckBox);
                if (ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chkPRN"), iCheckBox) instanceof iCheckBox) {
                    ObjectHelper.CreateType<iCheckBox>(this.frmViewBasic.FindName("chkPRN"), iCheckBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtAdminInstruction":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtAdminInstruction: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAdminInstruction"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAdminInstruction"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAdminInstruction"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboPRNInstruction":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboPRNInstruction: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboPRNInstruction"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboPRNInstruction"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboPRNInstruction"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }

                    if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.CONDITIONAL, StringComparison.CurrentCultureIgnoreCase)) {
                    // let TmpContentCtrlMedResolveStepped: ContentControl = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
                    if (ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl) != null && ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content instanceof medConditionalDose) {
                        if ((ObjectHelper.CreateType<medConditionalDose>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medConditionalDose)) != null) {
                            (ObjectHelper.CreateType<medConditionalDose>(ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl).Content, medConditionalDose)).cboPRNInstruction.Focus();
                            }
                        }
                    }

                    break;
                case "cboStationary":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboStationary: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStatType"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtBatchNo":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtBatchNo: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBatchNo"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBatchNo"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBatchNo"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "lblDispensinstruction":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let lblDispensinstruction: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDispensinstruction"), iLabel);
                if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDispensinstruction"), iLabel) instanceof iLabel) {
                    ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("lblDispensinstruction"), iLabel).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtDispenInstruction":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtDispenInstruction: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDispenInstruction"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDispenInstruction"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDispenInstruction"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboDosageForm":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboDosageForm: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDosageForm"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                    //Revisit Required
                    /*
                case "cboDosageFormMC":
                    let cboDosageFormMC: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewMulticomponent.FindName("cboDosageFormMC"), iComboBox);
                    if (cboDosageFormMC instanceof iComboBox) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmmulticomponent") != 0) {
                            this.ftbFormViewDetails.Click("frmmulticomponent", true);
                        }
                        cboDosageFormMC.Focus();
                    }
                    break;
                    */
                case "dtpStopDate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let dtpStopDate: iDateTimePicker = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker);
                if (ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker) instanceof iDateTimePicker) {
                    ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpStopDate"), iDateTimePicker).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtAddComments":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtAddComments: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtAddComments"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboAdminMethod":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboAdminMethod: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboAdminMethod"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboIntervalInst":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboIntervalInst: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboIntervalInst"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboIntervalInst"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboIntervalInst"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "dtpExpirydate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let dtpExpirydate: iDateTimePicker = ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpExpirydate"), iDateTimePicker);
                if (ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpExpirydate"), iDateTimePicker) instanceof iDateTimePicker) {
                    ObjectHelper.CreateType<iDateTimePicker>(this.frmViewBasic.FindName("dtpExpirydate"), iDateTimePicker).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtDrugName":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtDrugName: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDrugName"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDrugName"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtDrugName"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtNonCatItem":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtNonCatItem: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtNonCatItem"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtNonCatItem"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtNonCatItem"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboNONCATReason":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboNONCATReason: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboNONCATReason"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboNONCATReason"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboNONCATReason"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtOtherNonCatReason":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtOtherNonCatReason: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtOtherNonCatReason"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtOtherNonCatReason"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtOtherNonCatReason"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboSite":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboSite: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSite"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtProblem":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtProblem: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtProblem"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "clbEndorprop":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let clbEndorprop: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("clbEndorprop"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("clbEndorprop"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("clbEndorprop"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboTreatment":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboTreatment: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboTreatment"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboTreatment"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboTreatment"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboSupply":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboSupply: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSupply"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSupply"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboSupply"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtQuantity":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtQuantity: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtQuantity"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtQuantity"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtQuantity"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboQuantity":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboQuantity: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboQuantity"), iComboBox).Focus();
                    }
                    break;
                case "cboDuration":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboDuration: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDuration"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDuration"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDuration"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "udDuration":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let udDuration: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udDuration"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udDuration"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udDuration"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "udnIntervalInst":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let udnIntervalInst: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnIntervalInst"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnIntervalInst"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnIntervalInst"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "udnNumberofIns":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let udnNumberofIns: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnNumberofIns"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnNumberofIns"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udnNumberofIns"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtVerificationComments":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtVerificationComments: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVerificationComments"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVerificationComments"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVerificationComments"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboStrength":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboStrength: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboStrength"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtAdminDose":
                    
                if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                    this.ftbFormViewDetails.Click("frmRecordAdmin", true);
            }
                    let txtAdminDose: iTextBox = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            txtAdminDose = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtDoseValue"), iTextBox);
                        else
                            txtAdminDose = this.ProxytxtAdminDose != null ? this.ProxytxtAdminDose : this.dupDialogRef.content.instance.Component.ProxytxtAdminDose;
                    }
                    else
                        txtAdminDose = this.ProxytxtAdminDose != null ? this.ProxytxtAdminDose : this.dupDialogRef.content.instance.Component.ProxytxtAdminDose;

                    if (txtAdminDose instanceof iTextBox) {
                        txtAdminDose.Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "sfsWitnessedby":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                } 
                    if (this.frmRecordAdmin != null) {
                        let sfsWitnessedby: iSFS = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                sfsWitnessedby = ObjectHelper.CreateType<iSFS>(this.oRecordAdminTab.Content.FindName("sfsWitnessedby"), iSFS);                            
                            else
                                sfsWitnessedby = this.ProxysfsWitnessedby != null ? this.ProxysfsWitnessedby : this.dupDialogRef.content.instance.Component.ProxysfsWitnessedby;                        
                        }
                        else
                            sfsWitnessedby = this.ProxysfsWitnessedby != null ? this.ProxysfsWitnessedby : this.dupDialogRef.content.instance.Component.ProxysfsWitnessedby; 
                           
                        if (sfsWitnessedby instanceof iSFS) {
                            sfsWitnessedby.ClearAll();
                            sfsWitnessedby.Focus();
                            this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.Focus = true;
                        }
                    }
                    break;
                case "cboDoseUoMValue":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {  
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                    }
                    let cboDoseUoMValue: iComboBox = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            cboDoseUoMValue = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboDoseUoMValue"), iComboBox);
                        else
                            cboDoseUoMValue = this.ProxycboDoseUoMValue != null ? this.ProxycboDoseUoMValue : this.dupDialogRef.content.instance.Component.ProxycboDoseUoMValue;
                    }
                    else
                        cboDoseUoMValue = this.ProxycboDoseUoMValue != null ? this.ProxycboDoseUoMValue : this.dupDialogRef.content.instance.Component.ProxycboDoseUoMValue;
                    if (cboDoseUoMValue instanceof iComboBox) {
                        if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        cboDoseUoMValue.TabIndex = 0;
                        }else{
                            cboDoseUoMValue.Focus();
                        }
                    }                    
                    break;                    
                case "cboModClerkReason":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                    if (this.frmViewBasic != null) {
                    // let cboModClerkReasongas: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox);
                    if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox) instanceof iComboBox) {
                        ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboModClerkReason"), iComboBox).Focus();
                        }
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "dtpAdminDate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                }
                    let dtpAdminDate: iDateTimePicker = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            dtpAdminDate = ObjectHelper.CreateType<iDateTimePicker>(this.oRecordAdminTab.Content.FindName("dtpAdminDate"), iDateTimePicker);
                        else
                            dtpAdminDate = this.ProxydtpAdminDate != null ? this.ProxydtpAdminDate : this.dupDialogRef.content.instance.Component.ProxydtpAdminDate;
                    }
                    else
                        dtpAdminDate = this.ProxydtpAdminDate != null ? this.ProxydtpAdminDate : this.dupDialogRef.content.instance.Component.ProxydtpAdminDate;


                    if (dtpAdminDate instanceof iDateTimePicker) {
                        dtpAdminDate.Focus();
                    }
                    break;                    
                case "udYear":
                // let udYear: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udYear"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udYear"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udYear"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cmdBrand":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cmdbrand: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("cmdBrand"), iLabel);
                if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("cmdBrand"), iLabel) instanceof iLabel) {
                        this.cmdBrand.Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboBolusUOM":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboBolusUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBolusUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBolusUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBolusUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboUOMFlowrate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboUOMFlowrate: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboUOMFlowrate1":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboUOMFlowrate1: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate1"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate1"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUOMFlowrate1"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtFlowRate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtFlowRate: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtFlowRate"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtFlowRate"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtFlowRate"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboInfusionRateUOM":
                if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                    this.ftbFormViewDetails.Click("frmBasic", true);
            }
                    let cboInfusionRateUOM: iComboBox = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            cboInfusionRateUOM = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboInfusionRateUOM"), iComboBox);
                        else
                            cboInfusionRateUOM = this.ProxycboInfusionRateUOM != null ? this.ProxycboInfusionRateUOM : this.dupDialogRef.content.instance.Component.ProxycboInfusionRateUOM;
                    }
                    else
                        cboInfusionRateUOM = this.ProxycboInfusionRateUOM != null ? this.ProxycboInfusionRateUOM : this.dupDialogRef.content.instance.Component.ProxycboInfusionRateUOM;

                    if (cboInfusionRateUOM instanceof iComboBox) {
                        cboInfusionRateUOM.Focus();
                    }
                    break;
                case "cboInfustionRateUOM":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboInfustionRateUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfustionRateUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtInfusionRate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtInfusionRate: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionRate"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboinfustionPeriodUOM":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboinfustionPeriodUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboinfustionPeriodUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboinfustionPeriodUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboinfustionPeriodUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtInfusionperiod":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtInfusionperiod: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionperiod"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionperiod"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtInfusionperiod"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtTargetHigh":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtTargetHigh: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetHigh"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetHigh"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetHigh"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtTargetLow":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtTargetLow: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetLow"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetLow"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtTargetLow"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtBoosterDose":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtBoosterDose: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboBoosterUOM":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboBoosterUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboBoosterUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtVolume":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtVolume: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtVolume"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboVolumeUOM":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboVolumeUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboVolumeUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboVolumeUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboVolumeUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtLowConcentration":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtLowConcentration: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowConcentration"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowConcentration"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLowConcentration"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtUpperInfusionRate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtUpperInfusionRate: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperInfusionRate"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperInfusionRate"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperInfusionRate"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboLowConcentrationUOMlist":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboLowConcentrationUOMlist: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLowConcentrationUOMlist"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLowConcentrationUOMlist"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLowConcentrationUOMlist"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtUpperConcentration":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtUpperConcentration: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperConcentration"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperConcentration"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtUpperConcentration"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboUpperConcentrationUOMlist":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboUpperConcentrationUOMlist: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUpperConcentrationUOMlist"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUpperConcentrationUOMlist"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboUpperConcentrationUOMlist"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtLockoutPeriod":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtLockoutPeriod: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLockoutPeriod"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLockoutPeriod"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtLockoutPeriod"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboLockoutPeriodUOM":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboLockoutPeriodUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLockoutPeriodUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLockoutPeriodUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboLockoutPeriodUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtBolus":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtBolus: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "txtMonitoringdevice":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let txtMonitoringdevice: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtMonitoringdevice"), iTextBox);
                if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtMonitoringdevice"), iTextBox) instanceof iTextBox) {
                    ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtMonitoringdevice"), iTextBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboMonitoringdeviceUOM":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboMonitoringdeviceUOM: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonitoringdeviceUOM"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonitoringdeviceUOM"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboMonitoringdeviceUOM"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "udReviewafter":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let udReviewafter: iUpDownBox = ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udReviewafter"), iUpDownBox);
                if (ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udReviewafter"), iUpDownBox) instanceof iUpDownBox) {
                    ObjectHelper.CreateType<iUpDownBox>(this.frmViewBasic.FindName("udReviewafter"), iUpDownBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboInfusion":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboInfusion: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboInfusion"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "cboConcentration":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboConcentration: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboConcentration"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboConcentration"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboConcentration"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "BagVolume":
                    
                if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                    this.ftbFormViewDetails.Click("frmRecordAdmin", true);
        } 
                    if (this.frmRecordAdmin != null) {
                        let BagVolume: iTextBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                BagVolume = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("bagvolumetext"), iTextBox);
                            else
                                BagVolume = this.Proxybagvolumetext != null ? this.Proxybagvolumetext : this.dupDialogRef.content.instance.Component.Proxybagvolumetext;
                        }
                        else
                            BagVolume = this.Proxybagvolumetext != null ? this.Proxybagvolumetext : this.dupDialogRef.content.instance.Component.Proxybagvolumetext;  
                       
                        if (BagVolume instanceof iTextBox) {
                            BagVolume.Focus();
                        }
                    }
                    break;
                case "cbobagUoMValue":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("cbobagUoMValue", true);
            }
                    if (this.frmRecordAdmin != null) {
                        let icboBagVolume: iComboBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                icboBagVolume = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cbobagUoMValue"), iComboBox);                            
                            else
                                icboBagVolume = this.ProxycbobagUoMValue;
                        } else
                            icboBagVolume = this.ProxycbobagUoMValue; 
                            
                    if (icboBagVolume instanceof iComboBox) {
                        icboBagVolume.Focus();
                    }
                    }
                    break;
                case "txtRecinfusionrate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                }
                    if (this.frmRecordAdmin != null) {

                        let itxtRecinfusionrate: iTextBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                itxtRecinfusionrate = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtRecinfusionrate"), iTextBox);
                            else 
                                itxtRecinfusionrate = this.ProxytxtRecinfusionrate != null ? this.ProxytxtRecinfusionrate : this.dupDialogRef.content.instance.Component.ProxytxtRecinfusionrate;
                        }
                        else 
                            itxtRecinfusionrate = this.ProxytxtRecinfusionrate != null ? this.ProxytxtRecinfusionrate : this.dupDialogRef.content.instance.Component.ProxytxtRecinfusionrate;
                        
                        
                        if (itxtRecinfusionrate instanceof iTextBox) {
                            itxtRecinfusionrate.Focus();
                        }
                    }
                    break;
                case "dtpRecExpiryDate":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                }
                    let dtpRecExpiryDate: iDateTimePicker = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            dtpRecExpiryDate = ObjectHelper.CreateType<iDateTimePicker>(this.oRecordAdminTab.Content.FindName("dtpRecExpiryDate"), iDateTimePicker);
                        else
                            dtpRecExpiryDate = this.ProxyRecExpiryDate != null ? this.ProxyRecExpiryDate : this.dupDialogRef.content.instance.Component.ProxyRecExpiryDate;
                    }
                    else
                        dtpRecExpiryDate = this.ProxyRecExpiryDate != null ? this.ProxyRecExpiryDate : this.dupDialogRef.content.instance.Component.ProxyRecExpiryDate;
                    
                    if (dtpRecExpiryDate instanceof iDateTimePicker) {
                        dtpRecExpiryDate.Focus();
                    }
                    break;
                case "txtRecBatchNo":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                    } 
                    let txtRecBatchNo: iTextBox = null;
                    if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                        if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                            txtRecBatchNo = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtRecBatchNo"), iTextBox);
                        else
                            txtRecBatchNo = this.ProxytxtRecBatchNo != null ? this.ProxytxtRecBatchNo : this.dupDialogRef.content.instance.Component.ProxytxtRecBatchNo;
                    }
                    else
                        txtRecBatchNo = this.ProxytxtRecBatchNo != null ? this.ProxytxtRecBatchNo : this.dupDialogRef.content.instance.Component.ProxytxtRecBatchNo;
   
                    if (txtRecBatchNo instanceof iTextBox) {
                        txtRecBatchNo.Focus();
                    }
                    break;                    
                case "cboDeliveryDevice":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboDeliveryDevice: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDeliveryDevice"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDeliveryDevice"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDeliveryDevice"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "iTimeScheduled":
                    //Revisit Required
                    /*
                    if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase) == 0) && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)) != null && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc") != null && ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes) != null && (ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes") != null && ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid) != null) {
                        let _grdAdminTime: iGrid = (ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid));
                        if (_grdAdminTime != null && _grdAdminTime.ItemsSource != null) {
                            if (_grdAdminTime.Rows.Count > 1) {
                                (<Telerik.Windows.Controls.GridView.GridViewCell>_grdAdminTime.Rows[1].Cells[0]).IsCurrent = true;
                            }
                            _grdAdminTime.BeginEdit();
                        }
                    }
                    
                    break;
                    */
                case "txtRecFlowRate":
                    if (this.frmRecordAdmin != null) {
                        let itxtRecFlowRate: iTextBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                itxtRecFlowRate = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtRecFlowRate"), iTextBox);
                            else
                                itxtRecFlowRate = this.ProxytxtRecFlowRate != null ? this.ProxytxtRecFlowRate : this.dupDialogRef.content.instance.Component.ProxytxtRecFlowRate;
                        }
                        else
                            itxtRecFlowRate = this.ProxytxtRecFlowRate != null ? this.ProxytxtRecFlowRate : this.dupDialogRef.content.instance.Component.ProxytxtRecFlowRate;                            
                        if (itxtRecFlowRate instanceof iTextBox) {
                            if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null)
                                    this.oResolveItem.FormViewerDetails.BasicDetails.bIsFlowRateAtRecAdmShown = true;
                                this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                            }
                            itxtRecFlowRate.Focus();
                        }
                    }
                    break;
                case "cboflowratenumuom":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                    }
                    if (this.frmRecordAdmin != null) {
                        let cboFlowRateNumUOM: iComboBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                cboFlowRateNumUOM = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboflowratenumuom"), iComboBox);                        
                            else 
                                cboFlowRateNumUOM = this.Proxycboflowratenumuom != null ? this.Proxycboflowratenumuom : this.dupDialogRef.content.instance.Component.Proxycboflowratenumuom;
                        } else 
                            cboFlowRateNumUOM = this.Proxycboflowratenumuom != null ? this.Proxycboflowratenumuom : this.dupDialogRef.content.instance.Component.Proxycboflowratenumuom;                                                                   
   
                        if (cboFlowRateNumUOM instanceof iComboBox) {
                            cboFlowRateNumUOM.Focus();
                        }
                    }
                    break;
                case "cboflowratedenuom":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmRecordAdmin") != 0) {
                        this.ftbFormViewDetails.Click("frmRecordAdmin", true);
                    }
                    if (this.frmRecordAdmin != null) {
                        let cboFlowRateDenUOM: iComboBox = null;
                        if ((this.ftbFormViewDetails && this.ftbFormViewDetails.GetItem("frmRecordAdmin") && typeof (this.ftbFormViewDetails.GetItem("frmRecordAdmin").Content) !== 'undefined')) {
                            if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.TabVisited)
                                cboFlowRateDenUOM = ObjectHelper.CreateType<iComboBox>(this.oRecordAdminTab.Content.FindName("cboflowratedenuom"), iComboBox);                            
                            else
                                cboFlowRateDenUOM = this.Proxycboflowratedenuom ? this.Proxycboflowratedenuom : this.dupDialogRef.content.instance.Component.Proxycboflowratedenuomuom;
                        } else
                            cboFlowRateDenUOM = this.Proxycboflowratedenuom ? this.Proxycboflowratedenuom : this.dupDialogRef.content.instance.Component.Proxycboflowratedenuomuom;                          
                        if (cboFlowRateDenUOM instanceof iComboBox) {
                            cboFlowRateDenUOM.Focus();
                        }
                    }
                    break;                    
                case "cboFluid":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let cboFluid: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFluid"), iComboBox);
                if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFluid"), iComboBox) instanceof iComboBox) {
                    ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboFluid"), iComboBox).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "SelectProduct":
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                // let lblSelProduct: iLabel = ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("SelectProduct"), iLabel);
                if (ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("SelectProduct"), iLabel) instanceof iLabel) {
                    ObjectHelper.CreateType<iLabel>(this.frmViewBasic.FindName("SelectProduct"), iLabel).Focus();
                    }
                    else if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                        ErrorMsgExistForBasicDetails = true;
                    }
                    break;
                case "chkSunday":
                    //Revisit Required
                    /*
                    if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase) == 0) && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)) != null && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc") != null && ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes) != null && (ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes") != null && ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid) != null) {
                        let _grdAdminTime: iGrid = (ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid));
                        let checsunday: iCheckBox = ObjectHelper.CreateType<iCheckBox>(_grdAdminTime.FindName("chkSunday"), iCheckBox);
                        if (_grdAdminTime != null && _grdAdminTime.ItemsSource != null) {
                            if (checsunday instanceof iCheckBox) {
                                this.ftbFormViewDetails.Click("frmBasic", true);
                                checsunday.Focus();
                            }
                        }
                    }
                    */
                    break;
                case "grdAdminTimes":
                    //Revisit Required
                    /*
                    if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase) == 0) && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)) != null && (ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc") != null && ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes) != null && (ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes") != null && ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid) != null) {
                        let _grdAdminTime: iGrid = (ObjectHelper.CreateType<iGrid>((ObjectHelper.CreateType<frmAdminSlotTimes>((ObjectHelper.CreateType<formViewIntermittent>((<iTabItem>(this.ftbFormViewDetails[0])).Content, formViewIntermittent)).FindName("adminslotuc"), frmAdminSlotTimes)).FindName("grdAdminTimes"), iGrid));
                        if (_grdAdminTime != null && _grdAdminTime.ItemsSource != null) {
                            if (_grdAdminTime instanceof iGrid) {
                                this.ftbFormViewDetails.Click("frmBasic", true);
                                _grdAdminTime.Focus();
                            }
                        }
                    }
                    */
                    break;
                case "grdAdminTimeOneslotInAmend":
                    if (this.frmViewBasic != null) {
                    // let oCboDoseType: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox);
                        let Dosetype: CListItem = new CListItem();
                        let ofrmAdminSlotTimes: frmAdminSlotTimes = null;
                    if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox) instanceof iComboBox && ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox).SelectedValue instanceof CListItem) {
                        Dosetype = ObjectHelper.CreateType<CListItem>(ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboDoseType"), iComboBox).SelectedValue, CListItem);
                        }
                        //Revisit Required                        
                        if (Dosetype != null && !String.IsNullOrEmpty(Dosetype.Value) && String.Equals(Dosetype.Value, DoseTypeCode.CONDITIONAL, StringComparison.InvariantCultureIgnoreCase) && this.ContentCtrlMedResolveStepped.Content instanceof medConditionalDose) {
                            let omedConditionalDose: medConditionalDose = (ObjectHelper.CreateType<medConditionalDose>(this.ContentCtrlMedResolveStepped.Content, medConditionalDose));
                            if (omedConditionalDose != null) {
                                ofrmAdminSlotTimes = ObjectHelper.CreateType<frmAdminSlotTimes>(omedConditionalDose.FindName("adminslotuc"), frmAdminSlotTimes);
                            }
                        }
                        else {
                            ofrmAdminSlotTimes = ObjectHelper.CreateType<frmAdminSlotTimes>(this.frmViewBasic.FindName("adminslotuc"), frmAdminSlotTimes);
                        }
                        if (ofrmAdminSlotTimes != null) {
                            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsDrugroundEnable && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsDrugroundTime) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsFixedTime = true;
                                this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsSlotTimeModeEnable = true;
                            }
                        // let _grdAdminTime: GridExtension = ObjectHelper.CreateType<GridExtension>(ofrmAdminSlotTimes.FindName("grdAdminTimes"), GridExtension);
                        if (ObjectHelper.CreateType<GridExtension>(ofrmAdminSlotTimes.FindName("grdAdminTimes"), GridExtension) != null && ObjectHelper.CreateType<GridExtension>(ofrmAdminSlotTimes.FindName("grdAdminTimes"), GridExtension).ItemsSource != null) {
                            if (ObjectHelper.CreateType<GridExtension>(ofrmAdminSlotTimes.FindName("grdAdminTimes"), GridExtension).Rows.Count > 1) {
                                (<GridViewCell>ObjectHelper.CreateType<GridExtension>(ofrmAdminSlotTimes.FindName("grdAdminTimes"), GridExtension).Rows[1].Cells[0]).IsCurrent = true;
                                }
                            ObjectHelper.CreateType<GridExtension>(ofrmAdminSlotTimes.FindName("grdAdminTimes"), GridExtension).BeginEdit();
                                if (!String.Equals(this.ftbFormViewDetails.SelectedKey, "frmBasic", StringComparison.InvariantCultureIgnoreCase)) {
                                    this.ftbFormViewDetails.Click("frmBasic", true);
                                }
                            }
                        }
                    }
                    break;
            }
            
            if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                if (ErrorMsgExistForBasicDetails) {               
                    if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0) {
                        this.ftbFormViewDetails.Click("frmBasic", true);
                    }
                }
            }                       
        }
        iMsgBox_MessageBoxClose(sender: any, e: MessageEventArgs): void {
            this['oResolveItem'] = sender.oResolveItem;
            this.oResolveItem.FormViewerDetails.BasicDetails.QuantTaboutFormClose = false;
            if (e.MessageBoxResult == MessageBoxResult.Yes || e.MessageBoxResult == MessageBoxResult.OK) {
                // if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                //     this.oResolveItem.FormViewerDetails.BasicDetails.RouteFormChangedEvent -= this.RouteFormChanged;
                // }
                Busyindicator.SetStatusIdle("OrderSetPrescribe");
                Busyindicator.SetStatusIdle("IndicationreqForm");
                //this.appDialog.DialogResult = false;
                 let objbase: IPPMABaseVM = ObjectHelper.CreateType<IPPMABaseVM>(this.oResolveItem.ParentbaseVM, IPPMABaseVM);
                 this.dupDialogRef.close();
                if (objbase != null) {
                    objbase.CallOrderSetSequence(objbase.orsseqcount);
                    objbase.orsseqcount++;
                    if (objbase.objRePresItmCollection != null && objbase.objRePresItmCollection.Count > 0) {
                        objbase.CallRePresSequence(objbase.represcseqcount);
                        objbase.represcseqcount++;
                    }
                }
                // ObjectHelper.OpenWindowInst = false;
                // ObjectHelper.stopFinishAndCancelEvent(false);
            }            
        }
        private ValidateAdmintrationTime(oResolveItem: PrescriptionItemVM): boolean {
            let strDoseType: string = oResolveItem.FormViewerDetails.BasicDetails.DoseType != null ? oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value : String.Empty;
            if (oResolveItem.FormViewerDetails.BasicDetails != null && (oResolveItem.FormViewerDetails.BasicDetails.Infusions) && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes != null && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Count >= 1 && ((String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) == 0)) && ((String.Compare(strDoseType, DoseTypeCode.NORMAL, StringComparison.OrdinalIgnoreCase) == 0) || (String.Compare(strDoseType, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) == 0)) && (String.Compare(oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase) == 0)) {
                let nAdminCount: number = oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Count;
                if (oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Where(c => c.ScheduleDTTM.TimeOfDay == TimeSpan.Zero && c.IsFixedEnable).Select(s => s).Count() != nAdminCount) {
                    let sSlotTimeMode: string = String.Empty;
                    let errorMsgFound: boolean = false;
                    if (oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails != null && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency != null && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency.LowEvent < 2 && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency.UOM == "CC_MINUTES") {
                        this.objMsg.Message = Resource.Infusion.cbofrequency_Msg;
                        oResolveItem.FocusControl = "cboFrequency";
                        this.objMsg.Show();
                        return false;
                    }
                    if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) == 0) {
                        let AdminSchORDrugRndTimes: List<DateTime> = new List<DateTime>();
                        if (oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes != null && oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Count > 0) {
                            if (oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsFixedTime)
                                sSlotTimeMode = "F";
                            else if (oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsDrugroundTime)
                                sSlotTimeMode = "D";
                            if (!String.IsNullOrEmpty(sSlotTimeMode) && String.Compare(sSlotTimeMode, "F") == 0) {
                                let AdminscheduleTimes = oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Select(s => s).OrderBy(o => o.ScheduleDTTM).ToList();
                                AdminSchORDrugRndTimes = AdminscheduleTimes.Select(s => s.ScheduleDTTM).ToList();
                            }
                            else {
                                AdminSchORDrugRndTimes = oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Select(s => s.DrugroundDTTM).ToList();
                            }
                            if (AdminSchORDrugRndTimes != null && AdminSchORDrugRndTimes.Count > 0) {
                                let nCount: number = AdminSchORDrugRndTimes.Count;
                                let dtprevScheduleDTTM: DateTime= DateTime.MinValue;
                                let dtlatestSchedulDTTM: DateTime= DateTime.MinValue;
                                let dtCurrentTime: DateTime= CommonBB.GetServerDateTime();
                                let dtpTemprevScheduleDTTM: DateTime= DateTime.MinValue;
                                if (nCount > 1) {
                                    for (let i: number = 0; i < nCount; i++) {
                                        let Currentts: TimeSpan = new TimeSpan(dtCurrentTime.Hour, dtCurrentTime.Minute, dtCurrentTime.Second);
                                        let dtScheduleDTTM: DateTime= AdminSchORDrugRndTimes[i];
                                        let ts: TimeSpan = new TimeSpan(dtScheduleDTTM.Hour, dtScheduleDTTM.Minute, dtScheduleDTTM.Second);
                                        if (ts < Currentts) {
                                            AdminSchORDrugRndTimes[i] = dtScheduleDTTM.AddDays(1);
                                        }
                                    }
                                    let TempAdminSchORDrugRndTimes: IEnumerable<DateTime> = AdminSchORDrugRndTimes.OrderBy(x=>x.Date).AsEnumerable();
                                    
                                    if (TempAdminSchORDrugRndTimes != null) {
                                        let nTempCount: number = TempAdminSchORDrugRndTimes.Count();
                                        if (nTempCount > 0) {
                                            for( let i:number=0; i< TempAdminSchORDrugRndTimes.Count() ; i++){
                                                let Tempdt : DateTime =  TempAdminSchORDrugRndTimes[i];                                            
                                                dtprevScheduleDTTM = Tempdt;
                                                let ts: TimeSpan = new TimeSpan(dtprevScheduleDTTM.Hour, dtprevScheduleDTTM.Minute, dtprevScheduleDTTM.Second);
                                                if (DateTime.NotEquals(dtlatestSchedulDTTM, DateTime.MinValue) && DateTime.NotEquals(dtprevScheduleDTTM, dtlatestSchedulDTTM)) {
                                                    errorMsgFound = Common.IsWrongAdminTime(dtprevScheduleDTTM, dtlatestSchedulDTTM);
                                                    if (errorMsgFound)
                                                        break;
                                                }
                                                dtlatestSchedulDTTM = dtprevScheduleDTTM;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (errorMsgFound) {
                            if (sSlotTimeMode == "F" || sSlotTimeMode == "D")
                                this.objMsg.Message = Resource.Infusion.grdAdminTimes_Msg;
                            oResolveItem.FocusControl = "iTimeScheduled";
                            this.objMsg.Show();
                            return false;
                        }
                        let Infperdmin: number = oResolveItem.Infusionperiodmin(oResolveItem.FormViewerDetails);
                        let stDTTM: DateTime= DateTime.MinValue;
                        let endDTTM: DateTime= DateTime.MinValue;
                        let tsIntervalmin: TimeSpan = new TimeSpan();
                        let errmsg: boolean = false;
                        if (AdminSchORDrugRndTimes != null && AdminSchORDrugRndTimes.Count > 0) {
                            for( let i:number=0; i< AdminSchORDrugRndTimes.Count ; i++){
                                let dttm : DateTime =  AdminSchORDrugRndTimes[i];                            
                                stDTTM = dttm;
                                if (DateTime.NotEquals(endDTTM, DateTime.MinValue)) {
                                    tsIntervalmin = TimeSpan.Parse(stDTTM.Subtract(endDTTM).ToString("HH:mm"));
                            if (tsIntervalmin.TotalMinutes <= Infperdmin) {
                                errmsg = true;
                                break;
                            }
                        }
                        endDTTM = stDTTM;
                    }
                    
                }
                if (errmsg) {
                    if (oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom != null) {
                        this.objMsg.Message = String.Format(Resource.Infusion.InfusionPeriod_Msg, oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod + ' ' + oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText);
                        oResolveItem.FocusControl = "iTimeScheduled";
                        this.objMsg.Show();
                        return false;
                    }
                }
            }
        }
    }
 else if (oResolveItem.FormViewerDetails.BasicDetails != null && (oResolveItem.FormViewerDetails.BasicDetails.Infusions) && (!oResolveItem.FormViewerDetails.BasicDetails.AsRequired) && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count >= 1 && ((String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) == 0)) && ((String.Compare(strDoseType, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase) == 0) || (String.Compare(strDoseType, DoseTypeCode.DOSAGERANGE, StringComparison.OrdinalIgnoreCase) == 0)) && (String.Compare(oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT, StringComparison.OrdinalIgnoreCase) == 0)) {
        let sSlotTimeMode: string = String.Empty;
        let errorMsgFound: boolean = false;
        let ncount: number = oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
        for (let j: number = 0; j < ncount; j++) {
            if (oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdministrationTimes != null && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].FreqDetails != null && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].FreqDetails.oFrequency != null && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].FreqDetails.oFrequency.LowEvent < 2 && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].FreqDetails.oFrequency.UOM == "CC_MINUTES") {
                this.objMsg.Message = Resource.Infusion.cbofrequency_Msg;
                oResolveItem.FocusControl = "cboFrequency";
                this.objMsg.Show();
                return false;
            }
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) == 0) {
                if (oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData != null) {
                    let nCount: number = oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData.Count;
                    let CurrDateTime: DateTime= CommonBB.GetServerDateTime().Date;
                    let dtprevScheduleDTTM: DateTime= DateTime.MinValue;
                    let dtlatestSchedulDTTM: DateTime= DateTime.MinValue;
                    if (oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData != null && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData.Count > 0) {
                        if (oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData != null) {
                            let SlotMode = oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData.Where(OItem => OItem.IsFixedEnabled);
                            if (SlotMode != null && SlotMode.Count() > 0) {
                                sSlotTimeMode = "F";
                            }
                            else {
                                sSlotTimeMode = "D";
                            }
                        }
                        if (nCount > 1 && sSlotTimeMode == "F") {
                            for (let i: number = 0; i < nCount; i++) {
                                if (!String.IsNullOrEmpty(oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData[i].FixedTimes) && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData[i].FixedTimes.Contains(':')) {
                                    let strHHMM: string[] = oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData[i].FixedTimes.Split(':');
                                    if (strHHMM != null && strHHMM.length > 1) {
                                        dtprevScheduleDTTM = CurrDateTime.AddHours(Convert.ToDouble(strHHMM[0])).AddMinutes(Convert.ToDouble(strHHMM[1]));
                                    }
                                    let ts: TimeSpan = new TimeSpan(dtprevScheduleDTTM.Hour, dtprevScheduleDTTM.Minute, dtprevScheduleDTTM.Second);
                                    if (DateTime.NotEquals(dtlatestSchedulDTTM, DateTime.MinValue) && DateTime.NotEquals(dtprevScheduleDTTM, dtlatestSchedulDTTM)) {
                                        errorMsgFound = Common.IsWrongAdminTime(dtprevScheduleDTTM, dtlatestSchedulDTTM);
                                        if (errorMsgFound)
                                            break;
                                    }
                                    dtlatestSchedulDTTM = dtprevScheduleDTTM;
                                }
                            }
                        }
                        else if (nCount > 1 && sSlotTimeMode == "D") {
                            for (let i: number = 0; i < nCount; i++) {
                                if (!String.IsNullOrEmpty(oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData[i].DruRoundTimes) && oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData[i].DruRoundTimes.Contains(':')) {
                                    let strHHMM: string[] = oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData[i].DruRoundTimes.Split(':');
                                    if (strHHMM != null && strHHMM.length > 1) {
                                        dtprevScheduleDTTM = CurrDateTime.AddHours(Convert.ToDouble(strHHMM[0])).AddMinutes(Convert.ToDouble(strHHMM[1]));
                                    }
                                    let ts: TimeSpan = new TimeSpan(dtprevScheduleDTTM.Hour, dtprevScheduleDTTM.Minute, dtprevScheduleDTTM.Second);
                                    if (DateTime.NotEquals(dtlatestSchedulDTTM, DateTime.MinValue) && DateTime.NotEquals(dtprevScheduleDTTM, dtlatestSchedulDTTM)) {
                                        errorMsgFound = Common.IsWrongAdminTime(dtprevScheduleDTTM, dtlatestSchedulDTTM);
                                        if (errorMsgFound)
                                            break;
                                    }
                                    dtlatestSchedulDTTM = dtprevScheduleDTTM;
                                }
                            }
                        }
                    }
                    if (errorMsgFound) {
                        if (sSlotTimeMode == "D" || sSlotTimeMode == "F")
                            this.objMsg.Message = Resource.Infusion.grdAdminTimes_Msg;
                        oResolveItem.FocusControl = "iTimeScheduled";
                        this.objMsg.Show();
                        return false;
                    }
                    if (oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod != null && oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom != null) {
                        let Infperdmin: number = oResolveItem.Infusionperiodmin(oResolveItem.FormViewerDetails);
                        let Admintimes = oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[j].AdminTimesData.Select(s => s.FixedTimes).ToList();
                        let stDTTM: DateTime= DateTime.MinValue;
                        let endDTTM: DateTime= DateTime.MinValue;
                        let tsIntervalmin: TimeSpan = new TimeSpan();
                        let errmsg: boolean = false;
                        if (Admintimes.Count > 0) {
                            for( let i:number=0; i< Admintimes.Count ; i++){
                                let dttm : DateTime =  Admintimes[i];                            
                                stDTTM = Convert.ToDateTime(dttm);
                                if (DateTime.NotEquals(endDTTM, DateTime.MinValue)) {
                                    tsIntervalmin = TimeSpan.Parse(stDTTM.Subtract(endDTTM).ToString("HH:mm"));
                            if (tsIntervalmin.TotalMinutes <= Infperdmin) {
                                errmsg = true;
                                break;
                            }
                        }
                        endDTTM = stDTTM;
                    }
                }
                if (errmsg) {
                    this.objMsg.Message = String.Format(Resource.Infusion.InfusionPeriod_Msg, oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod + ' ' + oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText);
                    oResolveItem.FocusControl = "iTimeScheduled";
                    this.objMsg.Show();
                    return false;
                }
            }
                    }
                }
            }
        }
        return true;
    }
    medformviewChild_Loaded(sender: Object, e: RoutedEventArgs): void {
        this.oResolveItem.FormViewerDetails.SteppedPopup = false;
        if (!this.bIsLoaded) {
            this.bIsLoaded = true;
            this.cbCallConflictHeaderUpdate = true;
            this.bTechimage = true;
            this.SetDrugHeaderContent(this.oResolveItem);
            if (this.oResolveItem != null && this.oResolveItem.UniqueRowID == 0) {
                let UnqID: Random = new Random();
        this.oResolveItem.UniqueRowID = UnqID.Next();
    }
    if (this.oResolveItem != null && this.oResolveItem.bIsReprescribe && !this.oResolveItem.IsAddedToResolveGrid) {
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) {
                CSequentialHelper.ClearSeqProperties(this.oResolveItem);
            }
            this.oResolveItem.FormViewerDetails.BasicDetails.IsEnableStartdtSeq = true;
        }
    }
    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
        this.SetSTATPromptEnableDisableSV();
    }
    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && (this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute == null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null)) {
        this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute = this.oResolveItem.FormViewerDetails.BasicDetails.Route;
    }
    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.OrginalInfusionPeriod) && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod))) {
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.OrginalInfusionPeriod = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod;
    }
    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DrugProperties != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.CATALOGUEITEM) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.ACTUALMOIETY))) {
        this.oResolveItem.FormViewerDetails.BasicDetails.VMDrugProperties = this.oResolveItem.FormViewerDetails.BasicDetails.DrugProperties.Where(c => String.Equals(c.DrugPropertyCode, CConstants.DrugPropertyCNTRLDDRUG)).ToList().FirstOrDefault();
    }
    this.oResolveItem.BrandChangedEvent  = (s,e) => { this.SetDrugHeaderContent(s); } ;
    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
        if (this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets == null || (this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets != null && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets.Value))) {
            CSequentialHelper.LoadValuesOnFormLoad(this.oResolveItem);
        }
        if (this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) {
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsOSSLinkInFVVisible = Visibility.Visible;
        }
        else {
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsOSSLinkInFVVisible = Visibility.Collapsed;
        }
        if ((!String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase)) || (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.CurrentCultureIgnoreCase) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.CompleteStartDTTM, DateTime.MinValue))) {
            this.oResolveItem.FormViewerDetails.BasicDetails.IsenableStartdate = true;
        }
        this.oResolveItem.FormViewerDetails.BasicDetails.VMRouteFormForCDChangedEvent  = (s,e) => { this.SetDrugHeaderContent(s); } ;
    }
    this.oDefaultBasicDetails = this.GetDefaultValues();
    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
        this.oResolveItem.FormViewerDetails.BasicDetails.RouteFormChangedEvent = this.RouteFormChanged;
    }
    
    this.InitializeFooterButtons();
    this.ButtonsEnableDisable();
    
    //Revisit Required
    
    if (this.oResolveItem.IsDoseCalcVisible == Visibility.Visible && this.oResolveItem.IsDoseCalcEnabled && !this.oResolveItem.IsDoseCalcPerformed && this.oResolveItem.FormViewerDetails.BasicDetails.ISAlwaysuseDosecalc && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.NORMAL, StringComparison.OrdinalIgnoreCase)) {
        if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase)) {
            if (PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.DoNotLaunchForm) {
                if(ProfileData.PrescribeConfig == null){
                    let temp = this.PrescribeConfigLoaded.subscribe(data => {
                        this.cmdDoseCal_Click(sender, e); 
                    })
                }
                else{
                    this.cmdDoseCal_Click(sender, e);
                }  
            }
        }
        else{
            if(ProfileData.PrescribeConfig == null){
                let temp = this.PrescribeConfigLoaded.subscribe(data => {
                    this.cmdDoseCal_Click(sender, e); 
                })
            }
            else{
                this.cmdDoseCal_Click(sender, e);
            }
        }
    }
    
    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
        if ((this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.ReasonforModification.Value, "CC_MEDALLADVRECTINTO", StringComparison.CurrentCultureIgnoreCase) == 0) || (this.oResolveItem.FormViewerDetails.BasicDetails.MedClerkModifyReason != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.MedClerkModifyReason.Value, "CC_MEDALLADVRECTINTO", StringComparison.CurrentCultureIgnoreCase) == 0)) {
            this.oResolveItem.AllergylaunchfromFORMVIEW = true;
        }
    }
}
if (QueryStringInfo.SelPrescItemOID > 0) {
    Busyindicator.SetStatusIdle("PresChartAmend");
}
this.oResolveItem.RefreshConflictICONEvent  = (s,e) => { this.RefreshConflictICONS(); } ;
let DRCTabEnable: boolean = false;
DRCTabEnable = this.DRCEnableCheck(this.oResolveItem);
if (DRCTabEnable) {
    this.oResolveItem.RefreshDRCConflictICONEvent  = (s,e) => { this.RefreshDRCConflictICONS(); } ;
}
this.oResolveItem.FormViewerDetails.BasicDetails.OnEPrescribeRuleExecution  = (s,e) => { this.BasicDetails_OnePrescribeRuleExecution(s); } ;
this.objfrm = ObjectHelper.CreateType<PrescriptionItemVM>(this.DataContext, PrescriptionItemVM);
if(this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null)
    this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabledChangedEvent = (s,e) => { this.IsRecordAdminTabEnabledChangedEvent()};
this.oResolveItem.MultiRouteChangeEvent  = (s,e) => { this.MultiRouteChanged(); } ;
if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteChecked && this.objMulti != null) {
    this.objMulti.RegisterMultiRouteEvent(this.frmViewBasic, this.objfrm, this.iMultiRoute,this);
}
if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
    this.oResolveItem.FormViewerDetails.BasicDetails.MultiRouteUnSubscribeEvent  = (s,e) => { this.UnRegisterMultirouteProperties(); } ;
}

if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
    this.oResolveItem.FormViewerDetails.BasicDetails.CallMultiRoutePropertyChanged  = (s,e) => { this.MultiRoute_PropertyChanged(s,e); } ;
}


if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteChecked && !(this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes.Count > 0)) {
    this.oResolveItem.GetMultiRoutes(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID, this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType, this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion);
    if (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Value) && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Value.Contains(",") && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage) {
        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableDosage = false;
    }
}
if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.ConflictDetails == null && this.oResolveItem.ActionCode == ActivityTypes.Amend && !this.oResolveItem.bConflicttabloaded) {
    let oFauxTempTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmConflicts");
    if (oFauxTempTabItem != null) {
        this.oResolveItem.bConflicttabloaded = true;
        this.oResolveItem.GenerateConflictsForInpatient(this.objItems);
    }
}
this.oResolveItem.IsFormViewer_Loaded_Event_Completed = true;
if (this.oResolveItem != null && this.oResolveItem.AmendModeDisableTV) {
    let oTechValTab: iTabItem = this.ftbFormViewDetails.GetItem("frmTech");
            oTechValTab.IsEnabled = false;
        }
        if ((this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0) || (this.oResolveItem != null && this.oResolveItem.OsInstance != null && this.oResolveItem.OsInstance.OsIsInfusion == true)) {
            CommonSequentialHelper.EnableDisbaleStartDateTimeForNonIVSeq(this.oResolveItem);
        }
    }
    private SetSTATPromptEnableDisableSV(): void {
        let FirstDose: string = String.Empty;
        let FirstDoseUom: CListItem = new CListItem();
        let FirstScheduleDTTM: DateTime = DateTime.MinValue;
        let _PrescStartDTTM: DateTime = DateTime.MinValue;
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.InvariantCultureIgnoreCase) && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && (this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder || (String.Equals(this.oResolveItem.OperationMode, "N", StringComparison.InvariantCultureIgnoreCase) && this.oResolveItem.ActionCode == ActivityTypes.Amend))) {
            if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) && DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue)) {
                _PrescStartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime);
            }
            if (this.oResolveItem.ParentbaseVM != null && this.oResolveItem.ParentbaseVM.MedsResolve != null && this.oResolveItem.ParentbaseVM.MedsResolve.Count > 0) {
                let bItem = this.oResolveItem.ParentbaseVM.MedsResolve.Where(x => (x.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT == this.oResolveItem.UniqueRowID || x.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT == this.oResolveItem.UniqueRowItemID) && x.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S'));
                if (bItem != null && bItem.Count() == 0) {
            this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStat = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStatEnabled = this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled ? false : true;
        }
    }
    if (this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE)) {
        let IsAddtionalSTATPrompted: boolean = false;
        if (this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStat) {
            this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStatEnabled = false;
            this.oResolveItem.FormViewerDetails.BasicDetails.FollowUpStatMessageVisibility = Visibility.Visible;
            FirstScheduleDTTM = DateTime.NotEquals(this.oResolveItem.ParentbaseVM.IsSteppedScheduleDTTM, DateTime.MinValue) ? this.oResolveItem.ParentbaseVM.IsSteppedScheduleDTTM : DateTime.MinValue;
            if (DateTime.NotEquals(FirstScheduleDTTM, DateTime.MinValue)) {
                IsAddtionalSTATPrompted = this.oResolveItem.FormViewerDetails.BasicDetails.SetAdditionalOptionsVisibilityForSV(FormviewerCommonData.ServerDateTime, FirstScheduleDTTM);
                if (IsAddtionalSTATPrompted) {
                    this.AutoScrollView();
                }
            }
        }
        else {
            if (this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[0] != null && this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE)) {
                IsAddtionalSTATPrompted = this.oResolveItem.FormViewerDetails.BasicDetails.SetAdditionalOptionMessageForSV(this.oResolveItem.FormViewerDetails.BasicDetails.MultiDoseDetails[0]);
                if (IsAddtionalSTATPrompted && this.ContentCtrlMedResolveStepped != null && this.ContentCtrlMedResolveStepped.Content != null) {
                    this.AutoScrollView();
                        }
                    }
                }
            }
        }
    }
    BasicDetails_OnePrescribeRuleExecution(_Status: BasicDetailsVM_Ref.ePresRuleExecStatus): void {
        let btnOk: iButton = this.GetOkButton(this);
        if (btnOk != null) {
            if (_Status == BasicDetailsVM_Ref.ePresRuleExecStatus.Started) {
                btnOk.IsEnabled = false;
            }
            else if (_Status == BasicDetailsVM_Ref.ePresRuleExecStatus.Completed) {
                if (!this.oResolveItem.IsFormViewerDisable) {
                    btnOk.IsEnabled = true;
                    this.oResolveItem.formViewerDetails.BasicDetails.bIsAdminmethodRuleExecuted = false;
                }
            }
        }
    }
    private medformviewChild_Unloaded(sender: Object, e: RoutedEventArgs): void {
        // this.oResolveItem.FormViewerDetails.BasicDetails.OnEPrescribeRuleExecution -= BasicDetails_OnePrescribeRuleExecution;
        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.OrginalSelectedSequenceName = null;
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.OrginalSelectedPrecedingInfItem = null;
        }
    }
    private ButtonsEnableDisable(): void {
        if (this.oResolveItem.IsFormViewerDisable) {
            if (this.frmViewBasic.Content instanceof ScrollViewer) {
                let scrolObj: ScrollViewer = ObjectHelper.CreateType<ScrollViewer>(this.frmViewBasic.Content, ScrollViewer);
                let objGrid: Grid = ObjectHelper.CreateType<Grid>(scrolObj.Content, Grid);
                let ctrl: ContentControl = ObjectHelper.CreateObject(new ContentControl(), { IsEnabled: false });
                scrolObj.Content = ctrl;
                ctrl.Content = objGrid;
        ctrl.IsEnabled = false;
    }
    else {
        this.frmViewBasic.IsEnabled = false;
    }
    if(this.frmViewTech != null)
    {
        this.frmViewTech.IsEnabled = false;
    }
    if (this.frmViewConflict != null)
        this.frmViewConflict.IsEnabled = false;
    
    if (this.frmViewAdditional != null)
        this.frmViewAdditional.IsEnabled = false;

    this.cmdLink.IsEnabled = false;
    this.cmdOnbehalfOf.IsEnabled = false;
    this.cmdObservationResults.IsEnabled = false;
    this.cmdDoseCal.IsEnabled = false;
    this.cmdRemove.IsEnabled = false;
    
    let btnOk: iButton = this.GetOkButton(this);
    if (btnOk != null)
        btnOk.IsEnabled = false;
}
 else {
    if(this.frmViewBasic != null)
        this.frmViewBasic.IsEnabled = true;
    
    if(this.frmViewTech != null)
        this.frmViewTech.IsEnabled = true;

    if (this.frmViewConflict != null)
        this.frmViewConflict.IsEnabled = true;

    if (this.frmViewAdditional != null)
        this.frmViewAdditional.IsEnabled = true;

    this.cmdLink.IsEnabled = true;
    this.cmdObservationResults.IsEnabled = true;
    this.cmdRemove.IsEnabled = true;
    
    let btnOk: iButton = this.GetOkButton(this);
    if (btnOk != null)
        btnOk.IsEnabled = true;
}

if (!this.bIsExistingItem)
    this.cmdRemove.IsEnabled = false;
else if (this.bIsExistingItem && this.oResolveItem.ActionCode == ActivityTypes.Amend && !String.IsNullOrEmpty(this.oResolveItem.OperationMode))
    this.cmdRemove.IsEnabled = false;
else {
    if (this.oResolveItem.ActionCode == ActivityTypes.Prescribe && this.oResolveItem.IsHold == true) {
        this.cmdRemove.IsEnabled = false;
    }
    else {
        this.cmdRemove.IsEnabled = true;
    }
}
if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate == true)
    this.oResolveItem.FormViewerDetails.BasicDetails.OnbehalfTV = true;
if (this.oResolveItem.ActionCode == ActivityTypes.Prescribe || this.oResolveItem.ActionCode == ActivityTypes.Reorder || (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.OperationMode == "N" && this.oResolveItem.PrescriptionItemOID == 0) || (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.OperationMode == "UA" && this.oResolveItem.ParentbaseVM != null && this.oResolveItem.ParentbaseVM.IsDurationOnlyChanged) || this.oResolveItem.FormViewerDetails.BasicDetails.OnbehalfTV || this.oResolveItem.FormViewerDetails.BasicDetails.IsenableOnbehalfOf) {
    this.cmdOnbehalfOf.IsEnabled = true;
        }
        else {
            this.cmdOnbehalfOf.IsEnabled = false;
        }
        setTimeout(() => {
            this.objfrmFVFooterThat = this.objfrmFVFooter as frmFVFooter;
        }, 0);
    }
    public AuthoriseTVchangeEvent(sIsauthorise: string): void {
        if (this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise) {
            let oTechValTab: iTabItem = this.ftbFormViewDetails.GetItem("frmTech");
            let oRecordAdminTab: iTabItem = this.ftbFormViewDetails.GetItem("frmRecordAdmin");
            if (oRecordAdminTab != null && (this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise || String.Equals(sIsauthorise, "1", StringComparison.OrdinalIgnoreCase))) {
                oTechValTab.IsEnabled = oRecordAdminTab.IsEnabled = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminMsg1Visible = Visibility.Collapsed;
            }
            else {
                oTechValTab.IsEnabled = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.SetAdditionalOptionMessage();
            }
        }
    }
    public AuthoriseTVMCIchangeEvent(sIsauthorise: string): void {
        if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMCIAuthorise) {
            let oTechValTab: iTabItem = this.ftbFormViewDetails.GetItem("frmTech");
            let oRecordAdminTab: iTabItem = this.ftbFormViewDetails.GetItem("frmRecordAdmin");
            if (oRecordAdminTab != null && (String.Equals(sIsauthorise, "1", StringComparison.OrdinalIgnoreCase))) {
                oTechValTab.IsEnabled = oRecordAdminTab.IsEnabled = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminMsg1Visible = Visibility.Collapsed;
            }
            else {
                if (oTechValTab) {
                    oTechValTab.IsEnabled = true;
                }
                this.oResolveItem.FormViewerDetails.BasicDetails.SetAdditionalOptionMessage();
            }
        }
    }
    public AuthoriseTVchgEvent(sIsauthorise: string): void {
        if (this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise) {
            let oTechValTab: iTabItem = this.ftbFormViewDetails.GetItem("frmTech");
            let oRecordAdminTab: iTabItem = this.ftbFormViewDetails.GetItem("frmRecordAdmin");
            if (String.Equals(sIsauthorise, "1", StringComparison.OrdinalIgnoreCase)) {
                oTechValTab.IsEnabled = oRecordAdminTab.IsEnabled = false;
                this.oResolveItem.FormViewerDetails.BasicDetails.IsRecordAdminMsg1Visible = Visibility.Collapsed;
            }
            else {
                oTechValTab.IsEnabled = true;
                this.oResolveItem.FormViewerDetails.BasicDetails.SetAdditionalOptionMessage();
            }
        }
    }
    public SetDrugHeaderContent(PresItemVM: PrescriptionItemVM): void {
        this.spDrugDetails.Children.Clear();
        let sTooltip: string[] = null;
        if (!String.IsNullOrEmpty(PresItemVM.ItemSubType) && (String.Compare(PresItemVM.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0)) {
            let MCtooltip: string = String.Empty;
            let sTip: StringBuilder = new StringBuilder();
            if (!String.IsNullOrEmpty(PresItemVM.FormViewerDetails.BasicDetails.mCIItemDisplay)) {
                sTooltip = PresItemVM.FormViewerDetails.BasicDetails.mCIItemDisplay.Split('^');
                let nLength: number = sTooltip.length;
                for (let i: number = 0; i < nLength; i++) {
            sTip.Append(sTooltip[i]);
            sTip.Append(Environment.NewLine);
        }
    }
    MCtooltip = sTip.ToString();
    MCtooltip = MCtooltip.TrimEnd('\n');
    MCtooltip = MCtooltip.TrimEnd('\r');
    let img1: Image = ObjectHelper.CreateObject(new Image(), { Margin: new Thickness(2, 0, 2, 0) });
    img1.Stretch = Stretch.None;
    img1.Source = new BitmapImage(new Uri(MedImage.GetPath(MedImages.ImgMltcmpnt), UriKind.RelativeOrAbsolute));
    ToolTipService.SetToolTip(img1, ObjectHelper.CreateObject(new iLabel(), { MaxWidth: 275, IsWordwrap: true, Text: MCtooltip }));
    img1.VerticalAlignment = VerticalAlignment.Bottom;
    this.spDrugDetails.Children.Add(img1);
}
if (!String.IsNullOrEmpty(PresItemVM.FormularyNote) && String.Compare(PresItemVM.FormularyNote, "FormularyNote - ") != 0 && (String.Compare(PresItemVM.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) != 0)) {
    let img1: Image = ObjectHelper.CreateObject(new Image(), { Margin: new Thickness(2, 0, 2, 0) });
    img1.Stretch = Stretch.None;
    img1.Source = new BitmapImage(new Uri(MedImage.GetPath(MedImages.WarningIcon), UriKind.RelativeOrAbsolute));
    ToolTipService.SetToolTip(img1, ObjectHelper.CreateObject(new iLabel(), { MaxWidth: 250, IsWordwrap: true, Text: PresItemVM.FormularyNote }));
    this.spDrugDetails.Children.Add(img1);
}
if ((PresItemVM.FormViewerDetails.BasicDetails.DrugProperties != null && PresItemVM.FormViewerDetails.BasicDetails.DrugProperties.Count > 0) && ((String.Compare(PresItemVM.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) != 0) || (String.Compare(PresItemVM.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0))) {
    FormviewerDisplayHelper.GetDrugProperties(PresItemVM.FormViewerDetails.BasicDetails.DrugProperties, PresItemVM.FormViewerDetails.BasicDetails.IdentifyingType, this.spDrugDetails, PresItemVM.FormViewerDetails.BasicDetails.itemSubType);
    if ((String.Compare(PresItemVM.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.CATALOGUEITEM) != 0 && String.Compare(PresItemVM.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.ACTUALMOIETY) != 0)) {
        let obsProp: ObservableCollection<DrugProperty> = PresItemVM.FormViewerDetails.BasicDetails.DrugProperties;
        let CntrlDrugs = obsProp.Where(obj => String.Compare(obj.DrugPropertyCode, "CC_CNTRLDDRUG") == 0);
        if (CntrlDrugs != null && CntrlDrugs.Count() > 0) {
            if ((PresItemVM.ItemSubType != CConstants.SUBTYPE)) {
                if ((String.Compare(PatientContext.PrescriptionType, CConstants.Clerking) == 0 || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) == 0)) {
                    if (PresItemVM.FormViewerDetails.BHasFormViewParams && PresItemVM.FormViewerDetails.BasicDetails.IsQuantityMandatory) {
                        PresItemVM.FormViewerDetails.BasicDetails.IsQuantityMandatory = true;
                    }
                    else PresItemVM.FormViewerDetails.BasicDetails.IsQuantityMandatory = false;
                }
                else {
                    PresItemVM.FormViewerDetails.BasicDetails.IsQuantityMandatory = true;
                }
            }
        }
    }
}
if (PresItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')) {
    this.spDrugDetails.Children.Add(ObjectHelper.CreateObject(new iLabel(), { Text: " {STAT addition to previous scheduled prescription}",Margin: new Thickness(5, 11, 0, 0), MaxWidth: 300, IsWordwrap: true, Name: "lblFollowUpSTAT" }));
    this.lblDrugName.MaxWidth = 452;
}
else if (PresItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('F')) {
    this.spDrugDetails.Children.Add(ObjectHelper.CreateObject(new iLabel(), { Text: " {Follow up to the previous STAT prescription}", MaxWidth: 300, IsWordwrap: true, Name: "lblFollowUpSTAT" }));
    this.lblDrugName.MaxWidth = 480;
}
if (PresItemVM.ActionCode == ActivityTypes.Amend) {
    if (PresItemVM.FormViewerDetails.BasicDetails.Ordersets != null && !String.IsNullOrEmpty(PresItemVM.FormViewerDetails.BasicDetails.Ordersets.DisplayText)) {
        this.spDrugDetails.Children.Add(ObjectHelper.CreateObject(new iLabel(), {
            Text: String.Format(" This item is part of order set - {0}", PresItemVM.FormViewerDetails.BasicDetails.Ordersets.DisplayText),
            IsWordwrap: true,
            MaxWidth: 300,
            Margin: new Thickness(5, 0, 0, 0),
            Name: "lblOrderSetHeader",
            FontWeight: FontWeights.Bold,
                    Foreground: new SolidColorBrush(Color.FromArgb(0xFF, 0x5D, 0x07, 0x0A))
                }));
                this.lblDrugName.MaxWidth = 430;
            }
        }
    }
    private lblSupplyInst_MouseLeftButtonUp(sender: Object, e: MouseButtonEventArgs): void {
        if(this.oResolveItem.IsFormViewerDisable) return;
        else{
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsenableSupplyInstruction) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.oPrescitemVM = this.oResolveItem;
                    if (this.oResolveItem.FormViewerDetails.TechValidateDetails != null) {
                        this.oResolveItem.FormViewerDetails.TechValidateDetails.FetchfrombasicDetails = true;
                    }
                    else {
                this.oResolveItem.FormViewerDetails.TechValidateDetails = new TechValidateVM();
                this.oResolveItem.FormViewerDetails.TechValidateDetails.FetchfrombasicDetails = true;
            }
                    this.oResolveItem.FormViewerDetails.BasicDetails.LaunchedFromTechValidate = false;
                    this.oResolveItem.FormViewerDetails.TechValidateDetails.IslaunchedFromProductOptions = false;
                    this.oResolveItem.FormViewerDetails.BasicDetails.launchsupplyinstrmezzanine();
                }
            }
        }
    }
    private GetDefaultValues(): DefaultBasicDetails {
        let lnPresItemOID: number = 0;
        if (this.oResolveItem != null) {
            lnPresItemOID = this.oResolveItem.PrescriptionItemOID;
        }
        let oDefaultBasicDetails: DefaultBasicDetails = null;
        if (lnPresItemOID > 0) {
        oDefaultBasicDetails = ObjectHelper.CreateObject(new DefaultBasicDetails(), {
            Frequency: this.oResolveItem.FormViewerDetails.BasicDetails.Frequency,
            DosageForm: this.oResolveItem.FormViewerDetails.BasicDetails.DosageForm,
            QuantityUOM: this.oResolveItem.FormViewerDetails.BasicDetails.QuantityUOM,
            Route: this.oResolveItem.FormViewerDetails.BasicDetails.Route,
            DoseUOM: this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM,
            Site: this.oResolveItem.FormViewerDetails.BasicDetails.Site,
            AdminInstruction: this.oResolveItem.FormViewerDetails.BasicDetails.AdminInstruction,
            AdminMethod: this.oResolveItem.FormViewerDetails.BasicDetails.AdminMethod,
                ProblemIndication: this.oResolveItem.FormViewerDetails.BasicDetails.ProblemIndication,
                PatientProblemCode: this.oResolveItem.FormViewerDetails.BasicDetails.PatientProblemCode
            });
        }
        return oDefaultBasicDetails;
    }
    private cmdLink_Click(sender: Object, e: RoutedEventArgs): void {
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
            let objMonoGraphVM: MonoGraphVM = new MonoGraphVM();
            let MCIItemCount: number = 0;
            let MCIIdentifyingOID: number = 0;
            let MCIIdentifyingType: string;
            let MCIIdentifyingName: string;
            let MonographParams: ObservableCollection<CListItem> = new ObservableCollection<CListItem>();
    if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE) == 0) {
        if (String.Compare(this.oResolveItem.LorenzoID, CommonFlags.MClorenzoid, StringComparison.OrdinalIgnoreCase) == 0) {
            MCIIdentifyingOID = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID;
            MCIIdentifyingType = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
            let MonographParamDet: CListItem = new CListItem();
            MonographParamDet.DisplayText = MedCommonBBConstant.NOTANPREDEFMCI;
            MonographParamDet.Value = Convert.ToString(MCIIdentifyingOID);
            MonographParamDet.Tag = MCIIdentifyingType;
            MonographParams.Add(MonographParamDet);
        }
        else {
            MCIIdentifyingOID = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID;
            MCIIdentifyingType = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
            MCIIdentifyingName = this.oResolveItem.FormViewerDetails.BasicDetails.SIdentifyingoriginalname;
            if (MCIIdentifyingOID > 0 && !String.IsNullOrEmpty(MCIIdentifyingType) && !String.IsNullOrEmpty(MCIIdentifyingName)) {
                let MonographParamDet: CListItem = new CListItem();
                MonographParamDet.DisplayText = MCIIdentifyingName;
                MonographParamDet.Value = Convert.ToString(MCIIdentifyingOID);
                MonographParamDet.Tag = MCIIdentifyingType;
                MonographParams.Add(MonographParamDet);
            }
        }
        if (this.oResolveItem.FormViewerDetails.MulticomponentDetails != null && this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null) {
            MCIItemCount = this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
            if (MCIItemCount > 0) {
                for (let iCnt: number = 0; iCnt < MCIItemCount; iCnt++) {
                    MCIIdentifyingOID = this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[iCnt].IdentifyingOID;
                    MCIIdentifyingType = this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[iCnt].IdentifyingType;
                    MCIIdentifyingName = this.oResolveItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[iCnt].ComponentName;
                    if (MCIIdentifyingOID > 0 && !String.IsNullOrEmpty(MCIIdentifyingType) && !String.IsNullOrEmpty(MCIIdentifyingName)) {
                        let MonographParamDet: CListItem = new CListItem();
                        MonographParamDet.DisplayText = MCIIdentifyingName;
                        MonographParamDet.Value = Convert.ToString(MCIIdentifyingOID);
                        MonographParamDet.Tag = MCIIdentifyingType;
                        MonographParams.Add(MonographParamDet);
                    }
                }
            }
        }
    }
    else {
        MCIIdentifyingOID = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID;
        MCIIdentifyingType = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
        MCIIdentifyingName = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingName;
        if (!String.IsNullOrEmpty(MCIIdentifyingType) && !String.IsNullOrEmpty(MCIIdentifyingName) && (MCIIdentifyingOID > 0 || (String.Compare(MCIIdentifyingType, CConstants.NONCATALOGUEITEM) == 0 || String.Compare(MCIIdentifyingType, CConstants.Precatalog) == 0))) {
            let MonographParamDet: CListItem = new CListItem();
            MonographParamDet.DisplayText = MCIIdentifyingName;
            MonographParamDet.Value = Convert.ToString(MCIIdentifyingOID);
            MonographParamDet.Tag = MCIIdentifyingType;
                    MonographParams.Add(MonographParamDet);
                }
            }
            MedicationCommonBB.OnMonographLinkClick(MonographParams);
        }
    }
    private getBSAFormulaConfigDC(): void {
        let profile: ProfileFactoryType = new ProfileFactoryType();
        profile.OnProfileLoaded = (s, e) => { this.profile_OnProfileLoaded_DC(s, e); };
        profile.GetProfile<BSAFormulaConfigData>("VW_MEDICONFIG", "BSAFORMULACONFIG");
    }
    private profile_OnProfileLoaded_DC(sender: Object, Result: IProfileProp): void {
        let sFormula: string = String.Empty;
        let PatientAge: number = PatientContext.Age;
        if (Result != null && Result.Profile != null) {
            if (Result.Profile instanceof BSAFormulaConfigData) {
                ProfileData.BSAFormulaConfig = ObjectHelper.CreateType<BSAFormulaConfigData>(Result.Profile, BSAFormulaConfigData);
                if (ProfileData.BSAFormulaConfig != null) {
                    let BSAFormulaConfig: BSAFormulaConfigData = ProfileData.BSAFormulaConfig;
                    if (BSAFormulaConfig != null && BSAFormulaConfig.FormulaConfig != null && BSAFormulaConfig.FormulaConfig.Count > 0) {
                        let BSAFormula: string[] = null;
                        let nCount: number = BSAFormulaConfig.FormulaConfig.Count;
                        for (let Cnt: number = 0; Cnt < nCount; Cnt++) {
                            BSAFormula = BSAFormulaConfig.FormulaConfig[Cnt].Split('~');
                            if (BSAFormula.length > 2 && BSAFormula[2].length > 0 && BSAFormula[1].length > 0 && BSAFormula[0].length > 0) {
                                switch (BSAFormula[2]) {
                                    case "=":
                                        if (PatientAge == Convert.ToInt32(BSAFormula[1]))
                                            sFormula = BSAFormula[0];
                                        break;
                                    case ">=":
                                        if (PatientAge >= Convert.ToInt32(BSAFormula[1]))
                                            sFormula = BSAFormula[0];
                                        break;
                                    case "<=":
                                        if (PatientAge <= Convert.ToInt32(BSAFormula[1]))
                                            sFormula = BSAFormula[0];
                                        break;
                                    case "<":
                                        if (PatientAge < Convert.ToInt32(BSAFormula[1]))
                                            sFormula = BSAFormula[0];
                                        break;
                                    case ">":
                                        if (PatientAge > Convert.ToInt32(BSAFormula[1]))
                                            sFormula = BSAFormula[0];
                                        break;
                                    default:
                                        sFormula = String.Empty;
                                        break;
                                }
                            }
                            if (!String.IsNullOrEmpty(sFormula)) {
                                break;
                            }
                        }
                    }
                    PatientContext.BSAFormulaCode = sFormula;
                }
            }
        }
  //Revisit Required
this.LaunchDoseCalc();
    }
 public oReturnValue: Object;
isDoseCalciLaunched: boolean = false;

//Revisit Required

private cmdDoseCal_Click(sender:Object, e:RoutedEventArgs, RTEResultArgs?:any): void
    {
        if(!this.isDoseCalciLaunched)
{
    this.isDoseCalciLaunched = true;
    this.DoseCalc = new DoseCalculator();
    this.DoseCalc.RTEResultArgs = RTEResultArgs;
    if (String.IsNullOrEmpty(PatientContext.BSAFormulaCode)) {
        this.getBSAFormulaConfigDC();
    }
    else {
        this.LaunchDoseCalc();
    }
}
}
getRTEResultForDoseCalc(doseCalcSender:Object,doseCalcEventArgs:RoutedEventArgs) {
    let DomainCodes: string = ValueDomain.ReqDosePerUOM + "," + ValueDomain.ConDose + "," + ValueDomain.DCACKREASON + "," + ValueDomain.RoundedDoseValue;
    ProcessRTE.GetHierarchicalValuesByDomains(CConstants.CodingSchemeName, CConstants.Version, CConstants.FilterType, ContextInfo.Culture, DomainCodes, (s, e) => { this.cmdDoseCal_Click(doseCalcSender,doseCalcEventArgs,s); });
}

private LaunchDoseCalc(): void
    {
        if(this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null)
 {
    let oSelectedItem: PrescriptionItemVM = ObjectHelper.CreateType<PrescriptionItemVM>(this.oResolveItem, PrescriptionItemVM);
    let oDoseCalcVM: DoseCalcVM = ObjectHelper.CreateType<DoseCalcVM>(this.DoseCalc.DataContext, DoseCalcVM);
    oDoseCalcVM.IsProcessingDetail = true;
    oDoseCalcVM.CanPerformDoseCalc = false;
    if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.InvariantCultureIgnoreCase)) {
        oDoseCalcVM.IsAuthorise = this.oResolveItem.FormViewerDetails.BasicDetails.IsAuthorise;
    }
    else {
        oDoseCalcVM.IsAuthorise = false;
    }
    oDoseCalcVM.AdjfactorAdjBWcalc = ProfileData.PrescribeConfig.AdjfactorAdjBWcalc;
    oDoseCalcVM.IdealBodyWeightPercentageExceeds = ProfileData.PrescribeConfig.IdealBodyWeightPercentageExceeds;
    oDoseCalcVM.IdentifyingOID = oSelectedItem.FormViewerDetails.BasicDetails.IdentifyingOID;
    oDoseCalcVM.IdentifyingType = oSelectedItem.FormViewerDetails.BasicDetails.IdentifyingType;
    this.GetDCForvieweDatails(oSelectedItem, oDoseCalcVM);
    if (!this.oResolveItem.IsDoseCalcPerformed) {
        if (oDoseCalcVM.RequestedDoseFirstUOMList == null) {
            oDoseCalcVM.RequestedDoseFirstUOMList = new ObservableCollection<CListItem>();
        }
        if (oSelectedItem.oDoseCalcDefault != null) {
            oDoseCalcVM.oDoseCalcDefault = oSelectedItem.oDoseCalcDefault;
            oDoseCalcVM.LoadDefaultValue();
        }
        else {
            oDoseCalcVM.OptIndividualDose = true;
            if (!String.IsNullOrEmpty(PatientContext.BSAFormulaCode)) {
                oDoseCalcVM.BSAFormula = oDoseCalcVM.GetSelectedBSAFormula(PatientContext.BSAFormulaCode);
            }
            if (oDoseCalcVM.RequestedDoseFirstUOMList.Count == 0) {
                oDoseCalcVM.RequestedDoseFirstUOMList.Add(ObjectHelper.CreateObject(new CListItem(), { DisplayText: "More", Value: "CC_More" }));
            }
        }
        oDoseCalcVM.IsDoseCalcPerformed = false;
        oDoseCalcVM.IsProcessingDetail = false;
        oDoseCalcVM.CanPerformDoseCalc = true;
    }
    else if (this.oResolveItem.DoseCalculationDetails != null) {
        this.FillDoseVMFromDoseCalculation(oDoseCalcVM);
        oDoseCalcVM.IsDoseCalcPerformed = true;
        oDoseCalcVM.CheckDoseCalcVisibility();
        oDoseCalcVM.DoseCalcOutputVisibilityCheck();
        oDoseCalcVM.GetDoseCalculationDisplayDetails();
        }
        let dialogWindowHeight;
        if(window.screen.height < 1000 && window.devicePixelRatio != 1.25){
            dialogWindowHeight = 480;
        }else{
            dialogWindowHeight = 700;
        }
        oDoseCalcVM.IsClinicalNote = !String.IsNullOrEmpty(QueryStringInfo.IsClinicalNote) ? QueryStringInfo.IsClinicalNote : String.Empty;
        AppActivity.OpenWindow("Dose calculator", this.DoseCalc, (s,e)=>{this.DoseCalc_Closed(s);}, "Dose calculator", false,dialogWindowHeight, 685, false, WindowButtonType.OkCancel, null);
    }
    }
    
    private GetDoseCalciSortedListitems(oDoseCalciItems: ObservableCollection<CListItem>): ObservableCollection<CListItem> {
        let oSortedDoseCalciItems: ObservableCollection<CListItem> = null;
        if (oDoseCalciItems != null && oDoseCalciItems.Count > 0) {
            let sortedItems = oDoseCalciItems.Where(item => !String.Equals(item.Value, "cc_more", StringComparison.CurrentCultureIgnoreCase)).OrderBy(item => item.DisplayText);
            if (sortedItems != null && sortedItems.Count() > 0) {
                let sortedItemList: ObservableCollection<CListItem> = new ObservableCollection<CListItem>();
                sortedItems.forEach((item) => {
                    sortedItemList.Add(item);
                });
                if (oDoseCalciItems.Where(c => String.Equals(c.Value, "cc_more", StringComparison.CurrentCultureIgnoreCase)).Count() > 0) {
                    sortedItemList.Add(ObjectHelper.CreateObject(new CListItem(), { DisplayText: "More", Value: "CC_More" }));
                }
                oSortedDoseCalciItems = sortedItemList;
            }
            else {
                oSortedDoseCalciItems = oDoseCalciItems;
            }
        }
        return oSortedDoseCalciItems;
    }
    private GetQualifiedUOMs(fvDoseUOMs: ObservableCollection<CListItem>): ObservableCollection<CListItem> {
        let lstQualDCUoms: ObservableCollection<CListItem> = new ObservableCollection<CListItem>();
        if (fvDoseUOMs != null && fvDoseUOMs.Count > 0 && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DoseCalciQualifiedUOMs != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DoseCalciQualifiedUOMs.Count > 0) {
            fvDoseUOMs.ForEach(oUOM => {
                let objUomitem: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.DoseCalciQualifiedUOMs.Where(x => x != null && !String.IsNullOrEmpty(x.Value) && x.Value.Equals(oUOM.Value)).FirstOrDefault();
                if (objUomitem != null) {
                    lstQualDCUoms.Add(objUomitem);
                    }
                });
                if (fvDoseUOMs.Where(c => String.Equals(c.Value, "cc_more", StringComparison.CurrentCultureIgnoreCase)).Count() > 0) {
                    lstQualDCUoms.Add(ObjectHelper.CreateObject(new CListItem(), { DisplayText: "More", Value: "CC_More" }));
                }
        }
        else {
            lstQualDCUoms = fvDoseUOMs;
        }
        return lstQualDCUoms;
    }
    private GetDCForvieweDatails(oSelectedItem: PrescriptionItemVM, oDoseCalcVM: DoseCalcVM): void {
        let DeLimiter2: number = 2;
        let DeLimiter3: number = 3;
        if (oSelectedItem != null && oSelectedItem.FormViewerDetails != null && oSelectedItem.FormViewerDetails.BasicDetails != null) {
            if (oSelectedItem.FormViewerDetails.BasicDetails.DefaultDetails != null) {
                oDoseCalcVM.RequestedDoseFirstUOMList = this.GetQualifiedUOMs(oSelectedItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms);
              oDoseCalcVM.Frequencys = oSelectedItem.FormViewerDetails.BasicDetails.DefaultDetails.QualifiedFrequencies; 
                }
                if (oSelectedItem.FormViewerDetails.BasicDetails.Frequency != null && oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Tag != null && oDoseCalcVM.Frequency != oSelectedItem.FormViewerDetails.BasicDetails.Frequency) {
                  oDoseCalcVM.Frequency = oSelectedItem.FormViewerDetails.BasicDetails.Frequency;
                  //if (ObjectHelper.GetType(oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Tag) != typeof (Array<string>))
                  if (!(oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Tag   instanceof Array ))
                   {
                        oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Tag = oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Tag.toString().Split('~');
                   }
                 if (( 
                    (oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Tag   instanceof Array) &&
                 ((<string[]>(oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Tag)).length > DeLimiter3) &&
                  (String.Equals(oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Tag[DeLimiter3], "1"))
                  ))    
                 {
                        oDoseCalcVM.IsQualifiedFrequency = true;
                        if (oDoseCalcVM.Frequencys != null && !(oDoseCalcVM.Frequencys.Where(x => x.Value == oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Value).Any())) {
                            let citem: CListItem = oDoseCalcVM.Frequencys.Where(c => String.Equals(c.Value, "cc_more", StringComparison.CurrentCultureIgnoreCase)).SingleOrDefault<CListItem>();
                            if (citem != null) {
                                oDoseCalcVM.Frequencys.Remove(citem);
                                oDoseCalcVM.Frequencys.Add(oSelectedItem.FormViewerDetails.BasicDetails.Frequency);
                                oDoseCalcVM.Frequencys.Add(ObjectHelper.CreateObject(new CListItem(), { DisplayText: "More", Value: "CC_More" }));
                            }
                            else {
                                oDoseCalcVM.Frequencys.Add(oSelectedItem.FormViewerDetails.BasicDetails.Frequency);
                            }
                        }
                        oDoseCalcVM.Frequency = oDoseCalcVM.GetFrequencyByOID(Convert.ToInt64(oSelectedItem.FormViewerDetails.BasicDetails.Frequency.Value));
                    }
                    else {
                        oDoseCalcVM.IsQualifiedFrequency = false;
                        oDoseCalcVM.SelectedNotQualifiedFreq = oSelectedItem.FormViewerDetails.BasicDetails.Frequency.DisplayText;
                    }
                }
                if (oDoseCalcVM.RequestedDoseFirstUOMList != null && oDoseCalcVM.RequestedDoseFirstUOMList.Count > 0) {
                    oDoseCalcVM.RequestedDoseFirstUOMList = this.GetDoseCalciSortedListitems(oDoseCalcVM.RequestedDoseFirstUOMList);
                }
                if (oSelectedItem.FormViewerDetails.BasicDetails.InfusionDetails != null && oSelectedItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM != null)
                    oDoseCalcVM.ReqDoseThirdUOMList = oSelectedItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM;
                if (PatientContext.IsINFUSIONON && (oSelectedItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Equals(oSelectedItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS)) || oSelectedItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded)) {
                    if (oSelectedItem.FormViewerDetails.BasicDetails.InfusionDetails != null && oSelectedItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM != null) {
                        oDoseCalcVM.RequestedDoseFirstUOMList = this.GetQualifiedUOMs(oSelectedItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM);
                    }
                    if ((oSelectedItem.FormViewerDetails.BasicDetails.InfusionType != null && String.Equals(oSelectedItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS)) || (oSelectedItem.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded && oSelectedItem.FormViewerDetails.BasicDetails.InfusionType == null)) {
                        oDoseCalcVM.IsDailyDoseEnabled = false;
                        oDoseCalcVM.IsContineousInfusion = true;
                    }
                    else {
                        oDoseCalcVM.IsDailyDoseEnabled = true;
                    }
                }
            else {
                oDoseCalcVM.IsContineousInfusion = false;
                oDoseCalcVM.IsDailyDoseEnabled = true;
            }
        }
    }
    private FillDoseVMFromDoseCalculation(oDoseCalcVM: DoseCalcVM): void {
        oDoseCalcVM.CanPerformDoseCalc = false;
        oDoseCalcVM.DoseCalErroVisibility = Visibility.Collapsed;
        if (this.oResolveItem != null && this.oResolveItem.DoseCalculationDetails != null) {
            if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.Height) && !String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.HeightUOM)) {
                let dheight: number = Convert.ToDouble(this.oResolveItem.DoseCalculationDetails.Height);
                oDoseCalcVM.PatHeightInCM = CommonBB.ConvertHeightIntoCM(this.oResolveItem.DoseCalculationDetails.HeightUOM, dheight);
                oDoseCalcVM.PatientHeight = dheight;
                oDoseCalcVM.PatientHeightUOM = this.oResolveItem.DoseCalculationDetails.HeightUOM;
            }
            if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.Weight) && !String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.WeightUOM)) {
    let dWeight: number = Convert.ToDouble(this.oResolveItem.DoseCalculationDetails.Weight);
    oDoseCalcVM.PatWeightInKg = CommonBB.ConvertWeightIntoKg(this.oResolveItem.DoseCalculationDetails.WeightUOM, dWeight);
    oDoseCalcVM.PatientWeight = dWeight;
    oDoseCalcVM.PatientWeightUOM = this.oResolveItem.DoseCalculationDetails.WeightUOM;
}
oDoseCalcVM.IsHeightEstimated = this.oResolveItem.DoseCalculationDetails.IsHeightEstimated;
oDoseCalcVM.IsWeightEstimated = this.oResolveItem.DoseCalculationDetails.IsWeightEstimated;
oDoseCalcVM.DCREcordedWeightUpdatedOn = this.oResolveItem.DoseCalculationDetails.RecordedWeightDTTM;
oDoseCalcVM.DCRecordedHeightUpdatedOn = this.oResolveItem.DoseCalculationDetails.RecordedHeightDTTM;
oDoseCalcVM.CalculatedDTTM = this.oResolveItem.DoseCalculationDetails.CalculatedDTTM;
if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.CalculationFor)) {
    if (this.oResolveItem.DoseCalculationDetails.CalculationFor.Equals(CConstants.DailyDose)) {
        oDoseCalcVM.OptDailyDose = true;
    }
    else {
        oDoseCalcVM.OptIndividualDose = true;
    }
}
if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.DoseCalcBasedOn)) {
    if (this.oResolveItem.DoseCalculationDetails.DoseCalcBasedOn.Equals(MedCommonBBConstant.BSACode)) {
        let SecoundUOMDispText: string = oDoseCalcVM.GetSecondUOMDisplayText(MedCommonBBConstant.M2Code);
        oDoseCalcVM.IsBSA = true;
        oDoseCalcVM.IsWeight = false;
        oDoseCalcVM.CalculatedBSA = this.oResolveItem.DoseCalculationDetails.BSA;
        if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.BSAFormula)) {
            oDoseCalcVM.BSAFormula = oDoseCalcVM.GetSelectedBSAFormula(this.oResolveItem.DoseCalculationDetails.BSAFormula);
            oDoseCalcVM.DCCalculatedValue = oDoseCalcVM.CalculatedBSA + " " + SecoundUOMDispText;
        }
    }
    else if (this.oResolveItem.DoseCalculationDetails.DoseCalcBasedOn.Equals(MedCommonBBConstant.WeightCode)) {
        let SecoundUOMDispText: string = oDoseCalcVM.GetSecondUOMDisplayText(MedCommonBBConstant.KgCode);
        oDoseCalcVM.IsBSA = false;
        oDoseCalcVM.IsWeight = true;
        if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.WeightOption)) {
            if (this.oResolveItem.DoseCalculationDetails.WeightOption.Equals(CConstants.IBWConceptCode)) {
                oDoseCalcVM.IsIdealBodyWeight = true;
                oDoseCalcVM.IBWWeight = this.oResolveItem.DoseCalculationDetails.IBWWeight;
                oDoseCalcVM.DCCalculatedValue = Convert.ToString(oDoseCalcVM.IBWWeight) + " " + SecoundUOMDispText;
            }
            else if (this.oResolveItem.DoseCalculationDetails.WeightOption.Equals(CConstants.ABWConceptCode)) {
                oDoseCalcVM.IsAdjustedBodyWeight = true;
                oDoseCalcVM.IsABWEnabled = true;
                oDoseCalcVM.ABWWeight = this.oResolveItem.DoseCalculationDetails.ABWWeight;
                oDoseCalcVM.DCCalculatedValue = Convert.ToString(oDoseCalcVM.ABWWeight) + " " + SecoundUOMDispText;
            }
            else if (this.oResolveItem.DoseCalculationDetails.WeightOption.Equals(CConstants.RecordedWeightConceptCode)) {
                oDoseCalcVM.IsRecordedWeight = true;
            }
        }
    }
    oDoseCalcVM.DefaultSecondDoseUOM();
}
if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.RequestDose)) {
    oDoseCalcVM.RequestedDose = this.oResolveItem.DoseCalculationDetails.RequestDose;
}
if (this.oResolveItem.DoseCalculationDetails.ReqDoseUOMOID > 0) {
    oDoseCalcVM.RequestedDoseFirstUOM = oDoseCalcVM.GetDoseUOMItemByOID(this.oResolveItem.DoseCalculationDetails.ReqDoseUOMOID);
    if (oDoseCalcVM.RequestedDoseFirstUOM == null && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Count > 0) {
        let oUom: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Where(x => x != null && !String.IsNullOrEmpty(x.Value) && Convert.ToInt64(x.Value) == this.oResolveItem.DoseCalculationDetails.ReqDoseUOMOID).FirstOrDefault<CListItem>();
        let IsMoreRequired: boolean = false;
        if (oDoseCalcVM.RequestedDoseFirstUOMList == null) {
            oDoseCalcVM.RequestedDoseFirstUOMList = new ObservableCollection<CListItem>();
            IsMoreRequired = true;
        }
        if (oUom != null && oDoseCalcVM.RequestedDoseFirstUOMList != null) {
            oDoseCalcVM.RequestedDoseFirstUOMList.Add(oUom);
            if (IsMoreRequired) {
                oDoseCalcVM.RequestedDoseFirstUOMList.Add(ObjectHelper.CreateObject(new CListItem(), { DisplayText: "More", Value: "CC_More" }));
            }
            oDoseCalcVM.RequestedDoseFirstUOMList = this.GetDoseCalciSortedListitems(oDoseCalcVM.RequestedDoseFirstUOMList);
            oDoseCalcVM.RequestedDoseFirstUOM = oUom;
        }
    }
}
if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.RequestDoseThirdUOMLzoID)) {
    oDoseCalcVM.ReqDoseThirdUOM = oDoseCalcVM.GetListItemInfUOM(this.oResolveItem.DoseCalculationDetails.RequestDoseThirdUOMLzoID);
    oDoseCalcVM.IsContineousInfusion = true;
}
else {
    oDoseCalcVM.IsContineousInfusion = false;
}
if (this.oResolveItem.DoseCalculationDetails.FrequencyOID > 0) {
    oDoseCalcVM.Frequency = oDoseCalcVM.GetFrequencyByOID(this.oResolveItem.DoseCalculationDetails.FrequencyOID);
    if (oDoseCalcVM.Frequency != null && oDoseCalcVM.Frequency.Tag != null) {
        oDoseCalcVM.FreqLowEvent = oDoseCalcVM.GetLowEvent(oDoseCalcVM.Frequency.Tag);
    }
}
if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.CalculatedPerDose)) {
    oDoseCalcVM.CalculatedAmountPerDose = Double.Parse(this.oResolveItem.DoseCalculationDetails.CalculatedPerDose);
    oDoseCalcVM.CalculatedAmountPerDoseDisplay = oDoseCalcVM.CalculatedAmountPerDose + " " + oDoseCalcVM.UOMDisplayFormat();
}
if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.OrderedAmount)) {
    oDoseCalcVM.OrderedAmountPerDose = this.oResolveItem.DoseCalculationDetails.OrderedAmount;
    oDoseCalcVM.OrdDoseUOMDisplay = oDoseCalcVM.UOMDisplayFormat();
    oDoseCalcVM.IsOrderAmountUpdated = false;
}
if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.TotalDailyDose)) {
    oDoseCalcVM.TotalDailyDose = Double.Parse(this.oResolveItem.DoseCalculationDetails.TotalDailyDose);
    oDoseCalcVM.TotalDailyDoseValueDisplay = this.oResolveItem.DoseCalculationDetails.TotalDailyDose + " " + oDoseCalcVM.UOMDisplayFormat();
}
if (!String.IsNullOrEmpty(this.oResolveItem.DoseCalculationDetails.OverrideReason)) {
                oDoseCalcVM.Overridereason = oDoseCalcVM.GetOverrideReasonItem(this.oResolveItem.DoseCalculationDetails.OverrideReason);
            }
            oDoseCalcVM.IsOrderOverride = false;
        }
    }
    private _IsPerformDRCRequiredforDoseCalc: boolean;
    public get IsPerformDRCRequiredforDoseCalc(): boolean {
        return this._IsPerformDRCRequiredforDoseCalc;
    }
    public set IsPerformDRCRequiredforDoseCalc(value: boolean) {
        this._IsPerformDRCRequiredforDoseCalc = value;
    }
    DoseCalc_Closed(args: AppDialogEventargs): void {
        //Revisit Required
        
        this.isDoseCalciLaunched = false;
        this.IsPerformDRCRequiredforDoseCalc = false;
        this.oChildWindow = args.AppChildWindow;
        let IsDoseCalcPerformedInAmendMode:boolean = false;
        if(args.Result == AppDialogResult.Ok && args.Content != null) {
            let oMedDoseCalcValue: DoseCalcVM = ObjectHelper.CreateType<DoseCalcVM>((ObjectHelper.CreateType<DoseCalculator>(args.Content.Component, DoseCalculator)).DataContext, DoseCalcVM);
            if (!oMedDoseCalcValue.DoseCalcValidation(true)) {
                return
            }
            if (oMedDoseCalcValue != null && this.oResolveItem.formViewerDetails.BasicDetails != null) {
                if (this.oResolveItem.DoseCalculationDetails == null)
                    this.oResolveItem.DoseCalculationDetails = new DoseCalculation();
                if (this.oResolveItem.DoseCalculationDetails != null) {
                    this.oResolveItem.IsDoseCalcPerformed = false;
                    if (oMedDoseCalcValue.IsHeightWeightRecordedInDoseCalc || oMedDoseCalcValue.IsDoseReCalculated || oMedDoseCalcValue.IsOrderAmountUpdated) {
                        this.oResolveItem.DoseCalculationDetails.CalculatedDTTM = DateTime.Now;
                        this.IsPerformDRCRequiredforDoseCalc = true;
                        IsDoseCalcPerformedInAmendMode = true;
                        {
                            this.SetDoseCalciHeightWeightIndicator();
                            if (this.oResolveItem.ParentbaseVM != null) {
                                this.oResolveItem.ParentbaseVM.IsPatientHTWTUpdated = true;
                            }
                        }
                    }
                    if (oMedDoseCalcValue.IsDoseReCalculated || (oMedDoseCalcValue.IsOrderAmountUpdated && oMedDoseCalcValue.IsRecordDTTMchangedDueToObselete)) {
                        this.oResolveItem.DoseCalculationDetails.Height = Convert.ToString(oMedDoseCalcValue.PatientHeight);
                        this.oResolveItem.DoseCalculationDetails.HeightUOM = oMedDoseCalcValue.PatientHeightUOM;
                        this.oResolveItem.DoseCalculationDetails.Weight = Convert.ToString(oMedDoseCalcValue.PatientWeight);
                        this.oResolveItem.DoseCalculationDetails.WeightUOM = oMedDoseCalcValue.PatientWeightUOM;
                        if (!String.IsNullOrEmpty(PatientContext.PatientHeightRecordedOn)) {
                            this.oResolveItem.DoseCalculationDetails.RecordedHeightDTTM = PatientContext.PatientHeightDTTM;
                        }
                        if (!String.IsNullOrEmpty(PatientContext.PatientWeightRecordedOn)) {
                            this.oResolveItem.DoseCalculationDetails.RecordedWeightDTTM = PatientContext.PatientWeightDTTM;
                        }
                    }
                    this.oResolveItem.DoseCalculationDetails.IsWeightEstimated = oMedDoseCalcValue.IsWeightEstimated;
                    this.oResolveItem.DoseCalculationDetails.IsHeightEstimated = oMedDoseCalcValue.IsHeightEstimated;
                    this.oResolveItem.DoseCalculationDetails.CalculationFor = oMedDoseCalcValue.CalculationFor;
                    this.oResolveItem.DoseCalculationDetails.RequestDose = Convert.ToString(oMedDoseCalcValue.RequestedDose);
                    if (oMedDoseCalcValue.RequestedDoseFirstUOM != null && !String.IsNullOrEmpty(oMedDoseCalcValue.RequestedDoseFirstUOM.Value))
                        this.oResolveItem.DoseCalculationDetails.ReqDoseUOMOID = Convert.ToInt64(oMedDoseCalcValue.RequestedDoseFirstUOM.Value);
                    if (oMedDoseCalcValue.ReqDoseSecondUOM != null && !String.IsNullOrEmpty(oMedDoseCalcValue.ReqDoseSecondUOM.Value))
                        this.oResolveItem.DoseCalculationDetails.RequestDoseSecondUOM = Convert.ToString(oMedDoseCalcValue.ReqDoseSecondUOM.Value);
                    if (oMedDoseCalcValue.ReqDoseThirdUOM != null && !String.IsNullOrEmpty(oMedDoseCalcValue.ReqDoseThirdUOM.Value))
                        this.oResolveItem.DoseCalculationDetails.RequestDoseThirdUOMLzoID = Convert.ToString(oMedDoseCalcValue.ReqDoseThirdUOM.Value);
                    if (oMedDoseCalcValue.IsBSA) {
                        this.oResolveItem.DoseCalculationDetails.DoseCalcBasedOn = MedCommonBBConstant.BSACode;
                        if (oMedDoseCalcValue.BSAFormula != null && !String.IsNullOrEmpty(oMedDoseCalcValue.BSAFormula.Value))
                            this.oResolveItem.DoseCalculationDetails.BSAFormula = Convert.ToString(oMedDoseCalcValue.BSAFormula.Value);
                        this.oResolveItem.DoseCalculationDetails.BSA = oMedDoseCalcValue.CalculatedBSA;
                    }
                    else {
                        this.oResolveItem.DoseCalculationDetails.DoseCalcBasedOn = CConstants.WeightCode;
                        this.oResolveItem.DoseCalculationDetails.BSA = String.Empty;
                        this.oResolveItem.DoseCalculationDetails.BSAFormula = String.Empty;
                        if (oMedDoseCalcValue.IsRecordedWeight) {
                            this.oResolveItem.DoseCalculationDetails.WeightOption = CConstants.RecordedWeightConceptCode;
                        }
                        else if (oMedDoseCalcValue.IsIdealBodyWeight) {
                            this.oResolveItem.DoseCalculationDetails.WeightOption = CConstants.IBWConceptCode;
                            this.oResolveItem.DoseCalculationDetails.IBWWeight = Math.Round(oMedDoseCalcValue.IBWWeight, 3);
                        }
                        else if (oMedDoseCalcValue.IsAdjustedBodyWeight) {
                            this.oResolveItem.DoseCalculationDetails.WeightOption = CConstants.ABWConceptCode;
                            this.oResolveItem.DoseCalculationDetails.ABWWeight = Math.Round(oMedDoseCalcValue.ABWWeight, 3);
                        }
                    }
                    this.oResolveItem.DoseCalculationDetails.TotalDailyDose = Convert.ToString(oMedDoseCalcValue.TotalDailyDose);
                    this.oResolveItem.DoseCalculationDetails.CalculatedDose = Convert.ToString(oMedDoseCalcValue.CalculatedAmountPerDose);
                    this.oResolveItem.DoseCalculationDetails.CalculatedPerDose = Convert.ToString(oMedDoseCalcValue.CalculatedAmountPerDose);
                    this.oResolveItem.DoseCalculationDetails.OrderedAmount = oMedDoseCalcValue.OrderedAmountPerDose;
                    if (oMedDoseCalcValue.Overridereason != null && !String.IsNullOrEmpty(oMedDoseCalcValue.Overridereason.Value)) {
                        this.oResolveItem.DoseCalculationDetails.OverrideReason = oMedDoseCalcValue.Overridereason.Value;
                    }
                    else {
                        this.oResolveItem.DoseCalculationDetails.OverrideReason = null;
                    }
                    if (oMedDoseCalcValue.OptDailyDose && oMedDoseCalcValue.Frequency != null && !String.IsNullOrEmpty(oMedDoseCalcValue.Frequency.Value)) {
                        this.oResolveItem.DoseCalculationDetails.FrequencyOID = Number.Parse(oMedDoseCalcValue.Frequency.Value);
                    }
                    else {
                        this.oResolveItem.DoseCalculationDetails.FrequencyOID = 0;
                    }
                    let dGivenOrderAmt: number = 0;
                    if (!String.IsNullOrEmpty(oMedDoseCalcValue.OrderedAmountPerDose)) {
                        dGivenOrderAmt = Convert.ToDouble(oMedDoseCalcValue.OrderedAmountPerDose);
                    }
                    if (dGivenOrderAmt > 0 && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                        let IsDCModified: boolean = true;
                        this.oResolveItem.IsDoseCalcPerformedInAmend = false;
                        if (this.oResolveItem.ActionCode == ActivityTypes.Amend && !oMedDoseCalcValue.IsDoseReCalculated && !oMedDoseCalcValue.IsOrderAmountUpdated) {
                            IsDCModified = false;
                        }
                        if (IsDCModified) {
                            if (oMedDoseCalcValue.IsContineousInfusion) {
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Rate = oMedDoseCalcValue.OrderedAmountPerDose;
                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate = String.Empty;
                                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && (oMedDoseCalcValue.IsDoseReCalculated || oMedDoseCalcValue.IsOrderAmountUpdated) && !this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Rate")) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Add("Rate");
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                                }
                            }
                            else {
                                this.oResolveItem.FormViewerDetails.BasicDetails.Dose = oMedDoseCalcValue.OrderedAmountPerDose;
                                if (this.oResolveItem.ActionCode == ActivityTypes.Amend && (oMedDoseCalcValue.IsDoseReCalculated || oMedDoseCalcValue.IsOrderAmountUpdated) && !this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Dose")) {
                                    this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Add("Dose");
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                                    this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                                }
                            }
                            if (oMedDoseCalcValue.RequestedDoseFirstUOM != null) {
                                if (oMedDoseCalcValue.IsContineousInfusion) {
                                    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM != null) {
                                        let objUomitem: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(x => x != null && !String.IsNullOrEmpty(x.Value) && x.Value.Equals(oMedDoseCalcValue.RequestedDoseFirstUOM.Value)).FirstOrDefault();
                                        if (objUomitem == null) {
                                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Add(oMedDoseCalcValue.RequestedDoseFirstUOM);
                                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM = this.GetDoseCalciSortedListitems(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM);
                                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = oMedDoseCalcValue.RequestedDoseFirstUOM;
                                        }
                                        else {
                                            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = objUomitem;
                                        }
                                    }
                                    if (oMedDoseCalcValue.ReqDoseThirdUOM != null) {
                                        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM != null) {
                                            let objUomitem: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Where(x => x == oMedDoseCalcValue.ReqDoseThirdUOM).FirstOrDefault();
                                            if (objUomitem == null) {
                                                this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Add(oMedDoseCalcValue.RequestedDoseFirstUOM);
                                            }
                                        }
                                        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = oMedDoseCalcValue.ReqDoseThirdUOM;
                                    }
                                }
                                else {
                                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms != null) {
                                        let objUomitem: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Where(x => x != null && !String.IsNullOrEmpty(x.Value) && x.Value.Equals(oMedDoseCalcValue.RequestedDoseFirstUOM.Value)).FirstOrDefault();
                                        if (objUomitem == null) {
                                            this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Add(oMedDoseCalcValue.RequestedDoseFirstUOM);
                                            this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms = this.GetDoseCalciSortedListitems(this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Uoms);
                                            this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = oMedDoseCalcValue.RequestedDoseFirstUOM;
                                        }
                                        else {
                                            this.oResolveItem.FormViewerDetails.BasicDetails.DoseUOM = objUomitem;
                                        }
                                    }
                                    if (this.oResolveItem.ActionCode == ActivityTypes.Amend && (oMedDoseCalcValue.IsDoseReCalculated || oMedDoseCalcValue.IsOrderAmountUpdated) && !this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("DoseUOM")) {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Add("DoseUOM");
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                                    }
                                }
                            }
                            if (oMedDoseCalcValue.OptDailyDose) {
                                if (oMedDoseCalcValue.Frequency != null && !String.IsNullOrEmpty(oMedDoseCalcValue.Frequency.Value)) {
                                    if (this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys != null) {
                                        let objFreqitem: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Where(x => x != null && !String.IsNullOrEmpty(x.Value) && x.Value == oMedDoseCalcValue.Frequency.Value).FirstOrDefault();
                                        if (objFreqitem == null) {
                                            let citem: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Where(c => String.Equals(c.Value, "cc_more", StringComparison.CurrentCultureIgnoreCase)).SingleOrDefault<CListItem>();
                                            if (citem != null) {
                                                this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Remove(citem);
                                                this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(oMedDoseCalcValue.Frequency);
                                                this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(ObjectHelper.CreateObject(new CListItem(), { DisplayText: "More", Value: "CC_More" }));
                                            }
                                            else {
                                                this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(oMedDoseCalcValue.Frequency);
                                            }
                                        }
                                        let objQFreqitem: CListItem = this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.QualifiedFrequencies.Where(x => x != null && !String.IsNullOrEmpty(x.Value) && x.Value == oMedDoseCalcValue.Frequency.Value).FirstOrDefault();
                                        if (objQFreqitem == null) {
                                            this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.QualifiedFrequencies.Add(oMedDoseCalcValue.Frequency);
                                        }
                                    }
                                    var _f=this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.ToArray().filter(x=>x.Value==oMedDoseCalcValue.Frequency.Value.Value);
                                    if(_f.length>0)
                                    this.oResolveItem.FormViewerDetails.BasicDetails.Frequency =  _f[0];
                                    if (this.oResolveItem.ActionCode == ActivityTypes.Amend && (oMedDoseCalcValue.IsDoseReCalculated || oMedDoseCalcValue.IsOrderAmountUpdated) && !this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains("Frequency")) {
                                        this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Add("Frequency");
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
                                        this.oResolveItem.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = true;
                                    }
                                }
                            }
                        }
                        if (this.IsPerformDRCRequiredforDoseCalc && this.oResolveItem.ParentbaseVM != null) {
                            this.oResolveItem.ParentbaseVM.GetPatientWeightBSA();
                        }
                    }
                    if (this.oResolveItem.ActionCode == ActivityTypes.Amend && IsDoseCalcPerformedInAmendMode) {
                        this.oResolveItem.IsDoseCalcPerformedInAmend = true;
                    }
                    this.oResolveItem.IsDoseCalcPerformed = true;
                    this.oResolveItem.oDoseCalcDefault = null;
                }
            }
            this.oChildWindow.DialogResult = false;
            args.Content.dupDialogRef.close();
        }
 else if(args.Result == AppDialogResult.Cancel || args.Result == AppDialogResult.Close) {
            let oMedDoseCalcValue: DoseCalcVM = ObjectHelper.CreateType<DoseCalcVM>((ObjectHelper.CreateType<DoseCalculator>(args.Content, DoseCalculator)).DataContext, DoseCalcVM);
            if (oMedDoseCalcValue != null && oMedDoseCalcValue.IsHeightWeightRecordedInDoseCalc && this.oResolveItem != null && this.oResolveItem.ParentbaseVM != null) {
                this.IsPerformDRCRequiredforDoseCalc = true;
                this.oResolveItem.ParentbaseVM.GetPatientWeightBSA();
                this.SetDoseCalciHeightWeightIndicator();
            }
            this.oChildWindow.DialogResult = false;
            args.Content.dupDialogRef.close();
        }
if(this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null)
 {
    this.oResolveItem.FormViewerDetails.BasicDetails.SetDCIconInFV();
}

    }

    private SetDoseCalciHeightWeightIndicator(): void {
        let HeightWeightRecordedDTTM: DateTime = DateTime.MinValue;
        if (this.oResolveItem != null && this.oResolveItem.ParentbaseVM != null) {
            if (DateTime.GreaterThanOrEqualTo(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)) {
                this.oResolveItem.ParentbaseVM.HeightWeightIndText = "Weight/Height has not been updated since " + PatientContext.PatientHeightDTTM + ". Please review.";
                HeightWeightRecordedDTTM = PatientContext.PatientHeightDTTM;
            }
            else if (DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)) {
                this.oResolveItem.ParentbaseVM.HeightWeightIndText = "Weight/Height has not been updated since " + PatientContext.PatientWeightDTTM + ". Please review.";
        HeightWeightRecordedDTTM = PatientContext.PatientWeightDTTM;
    }
    let IsRebindResolveGrd: boolean = false;
    if (this.oResolveItem.ParentbaseVM.MedsResolve != null && this.oResolveItem.ParentbaseVM.MedsResolve.Count > 0 && MedicationCommonProfileData.PrescribeConfig != null && MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc) {
        this.oResolveItem.ParentbaseVM.MedsResolve.ForEach(oItemVM => {
            if (oItemVM.PrescriptionItemOID == 0 && oItemVM.IsDoseCalcPerformed && oItemVM.DoseCalculationDetails != null && oItemVM.DoseCalculationDetails.CalculatedDTTM < HeightWeightRecordedDTTM) {
                if (!Common.IsClosedEncounter()) {
                    oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                    IsRebindResolveGrd = true;
                }
                else {
                    oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
                    this.oResolveItem.ParentbaseVM.IsRebindResolveGrdForDC = true;
                }
            }
            else if (oItemVM.PrescriptionItemOID > 0 && !String.IsNullOrEmpty(oItemVM.PrescriptionItemStatusCode) && (String.Equals(oItemVM.PrescriptionItemStatus, CConstants.SUBMITTED, StringComparison.InvariantCultureIgnoreCase) || String.Equals(oItemVM.PrescriptionItemStatus, CConstants.AUTOVERIFIED, StringComparison.InvariantCultureIgnoreCase) || String.Equals(oItemVM.PrescriptionItemStatus, CConstants.AWAITINGAUTHORISE, StringComparison.InvariantCultureIgnoreCase) || String.Equals(oItemVM.PrescriptionItemStatus, CConstants.CLINICALLYVERIFIED, StringComparison.InvariantCultureIgnoreCase))) {
                if (oItemVM.FormViewerDetails.BasicDetails.DCCalDTTM < HeightWeightRecordedDTTM && (oItemVM.IsDoseCalcPerformed || oItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist)) {
                    if (!Common.IsClosedEncounter()) {
                        oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                        IsRebindResolveGrd = true;
                    }
                    else {
                        oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
                        this.oResolveItem.ParentbaseVM.IsRebindResolveGrdForDC = true;
                    }
                }
            }
        });
    }
    if (IsRebindResolveGrd) {
        if (this.oResolveItem.ParentbaseVM.IsVisibleHWIndicator == Visibility.Collapsed) {
            this.oResolveItem.ParentbaseVM.IsVisibleHWIndicator = Visibility.Visible;
        }
        this.oResolveItem.ParentbaseVM.IsRebindResolveGrdForDC = true;
    }
    else {
                if (this.oResolveItem.ParentbaseVM.IsVisibleHWIndicator == Visibility.Visible) {
                    this.oResolveItem.ParentbaseVM.IsVisibleHWIndicator = Visibility.Collapsed;
                }
            }
        }
    }
    private cmdReviewDetails_Click(sender: Object, e: RoutedEventArgs): void {
       
        
        if(!this.IsReviewIconClicked)
{
    this.IsReviewIconClicked = true;
    this.oResolveItem.ManageReviewOutcome();
    let oAdminTimesData: ObservableCollection<AdminScheduleTime> = null;
    if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail != null && this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail != null) {
        this.objReviewOutcome = new ReviewOutcome();
        this.objReviewOutcome.constructorImpl(this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail);
        let oReviewOutcomeVM: ReviewOutcomeVM = ObjectHelper.CreateType<ReviewOutcomeVM>(this.objReviewOutcome.DataContext, ReviewOutcomeVM);
        oReviewOutcomeVM.StartDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StartDTTM.Date;
        if (DateTime.NotEquals(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue)) {
            oReviewOutcomeVM.StartDTTM = oReviewOutcomeVM.StartDTTM.DateTime.AddTime(this.oResolveItem.FormViewerDetails.BasicDetails.StartPrescriptionTime);
        }
        if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.Value)) {
            oReviewOutcomeVM.InfusionPeriod = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod;
            oReviewOutcomeVM.InfusionPeriodUOM = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText;
        }
        if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration) && this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value)) {
            oReviewOutcomeVM.Duration = this.oResolveItem.FormViewerDetails.BasicDetails.Duration;
            oReviewOutcomeVM.DurationUOM = this.oResolveItem.FormViewerDetails.BasicDetails.DurationUOM.Value;
        }
        oReviewOutcomeVM.StopDTTM = this.oResolveItem.FormViewerDetails.BasicDetails.StopDate;
        oReviewOutcomeVM.ReviewAfterMandatoryConfig = this.oResolveItem.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig;
        if (this.oResolveItem.FormViewerDetails.BasicDetails.Frequency != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Value)) {
            oReviewOutcomeVM.FrequencyOID = Convert.ToInt64(this.oResolveItem.FormViewerDetails.BasicDetails.Frequency.Value);
        }
        if (this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM)) {
            oReviewOutcomeVM.FrequencyType = this.oResolveItem.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM;
        }
        if (PatientContext.IsINFUSIONON && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value)) {
            oReviewOutcomeVM.InfusionType = this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value;
        }
        oReviewOutcomeVM.IsPRN = this.oResolveItem.FormViewerDetails.BasicDetails.AsRequired;
        oReviewOutcomeVM.DoseType = this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value;
        oReviewOutcomeVM.CurrentDateTime = FormviewerCommonData.ServerDateTime;
        if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType)) {
            oReviewOutcomeVM.IdentifyingType = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
        }
        let oFrequency: IPPManagePrescSer.IPPFrequency = null;
        if (this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes != null) {
            oReviewOutcomeVM.oAdminTimesVM = new AdminstrativeTimesVM();
            oReviewOutcomeVM.oAdminTimesVM.FreqDetails = this.oResolveItem.GetCResMsgGetAdministrationTimes();
            oAdminTimesData = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency != null) {
                oFrequency = ObjectHelper.Clone(this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency);
               if (oFrequency != null && this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.isDayOfWeekEnable) {
                    oFrequency.IsSunday = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsSun;
                    oFrequency.IsMonday = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsMon;
                    oFrequency.IsTuesday = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsTue;
                    oFrequency.IsWednesday = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsWed;
                    oFrequency.IsThursday = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsThu;
                    oFrequency.IsFriday = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsFri;
                    oFrequency.IsSaturday = this.oResolveItem.FormViewerDetails.BasicDetails.AdminTimes.IsSat;
                }
            }
            if (oFrequency != null) {
                oReviewOutcomeVM.oFrequecydetails = oFrequency;
            }
            let oAdminData: ObservableCollection<IPPManagePrescSer.IPPScheduledetails> = new ObservableCollection<IPPManagePrescSer.IPPScheduledetails>();
            let oIPPSchDetail: IPPManagePrescSer.IPPScheduledetails = null;
            if (oAdminTimesData != null && oAdminTimesData.Count > 0) {
                for (let i: number = 0; i < oAdminTimesData.Count; i++) {
                    oIPPSchDetail = new IPPManagePrescSer.IPPScheduledetails();
                    let nMinutes: number = 0;
                    let nTotMinutes: number = 0;
                    if (oAdminTimesData[i].IsFixedEnable) {
                        nMinutes = Common.ConvertHourstoMinutes(Convert.ToDouble(oAdminTimesData[i].ScheduleDTTM.Hour));
                        nTotMinutes = nMinutes + Convert.ToInt32(oAdminTimesData[i].ScheduleDTTM.Minute);
                        oIPPSchDetail.ScheduledTime = nTotMinutes.ToString();
                        oAdminData.Add(oIPPSchDetail);
                    }
                }
            }
            if (oAdminData != null && oAdminData.Count > 0) {
                oReviewOutcomeVM.oAdminDataforFreqDetails = oAdminData;
            }
            else oReviewOutcomeVM.oAdminDataforFreqDetails = null;
        }
        else if (oReviewOutcomeVM.FrequencyOID > 0) {
            oReviewOutcomeVM.oAdminTimesVM = new AdminstrativeTimesVM(oReviewOutcomeVM.FrequencyOID);
        }
        let Callback = (s, e) => {
            if (s != null && e != null) {
                this.objReviewOutcome = s;
            }
        }
        let sTitle: string = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingName;
        let dialogWindowHeight = (640/window.devicePixelRatio);
        AppActivity.OpenWindow("Review prescription item", this.objReviewOutcome, (s,e)=>{this.objReviewOutcome_Closed(s);}, sTitle, true, dialogWindowHeight, 520, true, WindowButtonType.OkCancel, null);
    }
} 
}
 
objReviewOutcome_Closed(args:AppDialogEventargs): void
    {
        this.IsReviewIconClicked = false;
        if(args.Result == AppDialogResult.Ok && args.Content != null) {
            let objManageReviewPeriod: IPPManagePrescSer.ManageReviewPeriod = null;
            //let IsOutcome: boolean = this.objReviewOutcome.cmdOkClick(objManageReviewPeriod);
            let IsOutcome: boolean = this.objReviewOutcome.cmdOkClick((o) => { objManageReviewPeriod = o; });
            if (IsOutcome) {
                if (objManageReviewPeriod != null && objManageReviewPeriod.oReviewAfterDetail != null && !String.IsNullOrEmpty(objManageReviewPeriod.oReviewAfterDetail.DiscontinueReason)) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail = objManageReviewPeriod;
                    let thissend = this;
                    this.iMsgBox_MessageBoxClose1(thissend, new MessageEventArgs(MessageBoxResult.Yes));
                }
                if (objManageReviewPeriod != null && (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail != null && this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail != null && this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcome != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcome.Code))) {
                    this.oResolveItem.FormViewerDetails.BasicDetails.ManageReviewDetail = objManageReviewPeriod;
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoReviewOutcomeGenerate = false;
                    if (objManageReviewPeriod.NewReviewAfter != null) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfter = objManageReviewPeriod.NewReviewAfter;
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend = true;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfter = String.Empty;
                    }
                    if (objManageReviewPeriod.NewReviewAfterUOM != null && !String.IsNullOrEmpty(objManageReviewPeriod.NewReviewAfterUOM.Code)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend = true;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewafterUOM = ObjectHelper.CreateObject(new CListItem(), {
                            Value: objManageReviewPeriod.NewReviewAfterUOM.Code,
                            DisplayText: objManageReviewPeriod.NewReviewAfterUOM.Name
                        });
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewafterUOM = null;
                    }
                    if (!String.IsNullOrEmpty(objManageReviewPeriod.NewReviewRequestComments)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewRequestComments = objManageReviewPeriod.NewReviewRequestComments;
                    }
                    else {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewRequestComments = String.Empty;
                    }
                    if (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfter) && (this.oResolveItem.FormViewerDetails.BasicDetails.ReviewafterUOM == null)) {
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterDTTM = DateTime.MinValue;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterDateTime = String.Empty;
                        this.oResolveItem.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible = Visibility.Collapsed;
                    }
                    this.oResolveItem.FormViewerDetails.BasicDetails.DoReviewOutcomeGenerate = true;
                }
                this.oResolveItem.CheckReviewAfterManadatory();
                // args.AppChildWindow.DialogResult = false;
                args.AppChildWindow.DialogRef.close();
            }
            }
     else if(args.Result == AppDialogResult.Cancel) {
                args.AppChildWindow.DialogResult = true;
               
            }
        } 
    // private cmdFBChart_Click(sender: Object, e: RoutedEventArgs): void {
    //     PrescriptionHelper.GetFBDetails(PatientContext.PatientOID, PatientContext.EncounterOid);
    // }
    public OnObservationClick(sender: Object, e: RoutedEventArgs): void {
        if (!this.bIsShowMessage) {
            this.bIsShowMessage = true;
            // UserPermissions.CanViewObservations = PrescriptionHelper.CheckPermission("IPP_CAN_VIEW_OBSE_P2", "Can view Observations");
            // UserPermissions.CanViewResults = PrescriptionHelper.CheckPermission("RM_LIST_RESULTS", "Can view Results");
            UserPermissions.CanViewObservations = PrescriptionHelper.CheckPermission("IPP_CAN_VIEW_OBSERVATIONS", "Can view Observations");
            UserPermissions.CanViewResults = PrescriptionHelper.CheckPermission("RM_TABULAR_VIEW", "Can View Tabular View");
            if (!UserPermissions.CanViewObservations && !UserPermissions.CanViewResults) {
                iMessageBox.Show("LORENZO", "You do not have rights to view observation/results.", MessageBoxType.Information, MessageBoxButton.OK);
            }
    else {
        if (this.oResolveItem != null) {
            if (String.Compare(this.oResolveItem.LorenzoID, CommonFlags.MClorenzoid, StringComparison.OrdinalIgnoreCase) != 0) {
                let oReq: CReqMsgGetDataItem = new CReqMsgGetDataItem();
                oReq.oContextInformation = Common.FillContext();
                oReq.IdentifyingOIDBC = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID;
                oReq.IdentifyingTypeBC = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
                oReq.MCVersionNoBC = String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion) ? AppSessionInfo.AMCV : this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion;
                let serviceProxy: IPPMAPrescribableDefnWSSoapClient = new IPPMAPrescribableDefnWSSoapClient();
                serviceProxy.GetDataItemCompleted  = (s,e) => { this.serviceProxy_GetDataItemCompleted(s,e); } ;
                serviceProxy.GetDataItemAsync(oReq);
            }
            else {
                let oReq: CReqMsgGetDataItem = new CReqMsgGetDataItem();
                oReq.oContextInformation = Common.FillContext();
                oReq.IdentifyingOIDBC = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID;
                oReq.IdentifyingTypeBC = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType;
                if (!String.IsNullOrEmpty(this.oResolveItem.Itemlist))
                    oReq.itemlistBC = this.oResolveItem.Itemlist;
                else {
                    oReq.PrescriptionitemoidBC = this.oResolveItem.PrescriptionItemOID;
                }
                oReq.MCVersionNoBC = String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion) ? AppSessionInfo.AMCV : this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion;
                let serviceProxy: IPPMAPrescribableDefnWSSoapClient = new IPPMAPrescribableDefnWSSoapClient();
                serviceProxy.GetDataItemCompleted  = (s,e) => { this.serviceProxy_GetDataItemCompleted(s,e); } ;
                serviceProxy.GetDataItemAsync(oReq);
                    }
                }
            }
        }
    }
    isOnbehalfOfLaunched: boolean = false;
    private cmdOnbehalfOf_Click(sender: Object, e: RoutedEventArgs): void {        
        if (!this.isOnbehalfOfLaunched) {
            this.isOnbehalfOfLaunched = true;
            this.objmedonbehalfof = new medonbehalfof();
            if (this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.OnBehalfOf == null) {
                this.objmedonbehalfof.PrescriberName = this.oResolveItem.PrescriberOBHName.Trim();
                if (this.oResolveItem.PrescriberOBOUserOID != 0) {
                    this.objmedonbehalfof.PrescriberOID = Convert.ToString(this.oResolveItem.PrescriberOBOUserOID);
                }
                else {
                    this.objmedonbehalfof.PrescriberOID = Convert.ToString(this.oResolveItem.PrescriberDetails.OID);
                }
            }
            AppActivity.OpenWindow("On behalf of details", this.objmedonbehalfof, (s, e) => { this.cmdOnbehalfOf_Closed(s); }, "", false, 200, 425, false, WindowButtonType.OkCancel, null);
            if (this.oResolveItem != null && this.oResolveItem.OnBehalfOf != null) {
                let oSelectedItems: List<CListItem> = new List<CListItem>();

                let oItem: CListItem = new CListItem();
                oItem.DisplayText = this.oResolveItem.OnBehalfOf.DisplayText;
                oItem.Value = this.oResolveItem.OnBehalfOf.Value;
                oSelectedItems.Add(oItem);

                this.objmedonbehalfof.SFSOnBehalfOf.ItemsSource = oSelectedItems;
                this.objmedonbehalfof.SFSOnBehalfOf.SelectedValue = oItem.Value;
                this.objmedonbehalfof.SFSOnBehalfOf.SelectedText = oItem.DisplayText;

                this.objmedonbehalfof.PrescriberName = oItem.DisplayText;
                this.objmedonbehalfof.PrescriberOID = oItem.Value;                

                if (this.oResolveItem.OnBehalfOfReason != null && !String.IsNullOrEmpty(this.oResolveItem.OnBehalfOfReason.Value)) {                                        
                    this.objmedonbehalfof.OnBehalfOfReason = this.oResolveItem.OnBehalfOfReason.DisplayText;                        
                    this.objmedonbehalfof.OnBehalfOfReasonValue = this.oResolveItem.OnBehalfOfReason.Value;                
                }
                if (this.oResolveItem.CommunicationMode != null && !String.IsNullOrEmpty(this.oResolveItem.CommunicationMode.Value)) {                    
                    this.objmedonbehalfof.CommunicationMode = this.oResolveItem.CommunicationMode.DisplayText;                    
                    this.objmedonbehalfof.CommunicationModeValue = this.oResolveItem.CommunicationMode.Value;
                }
            }             
        }

    }
    private cmdOnbehalfOf_Closed(args: AppDialogEventargs): void {
        this.isOnbehalfOfLaunched = false;
        let bdialogresult: boolean = false;
        if (args.Result == AppDialogResult.Ok) {
            bdialogresult = this.objmedonbehalfof.OKButtonClick();
            if (bdialogresult && this.objmedonbehalfof != null) {
                if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                    this.oResolveItem.OnBehalfOf = ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: this.objmedonbehalfof.SFSOnBehalfOf.SelectedText,
                        Value: this.objmedonbehalfof.SFSOnBehalfOf.SelectedValue
                    });
                    let oSelectedValue: CListItem = new CListItem();
                    if (this.objmedonbehalfof.cboReason != null && this.objmedonbehalfof.cboReason.SelectedItem != null) {
                        oSelectedValue = ObjectHelper.CreateType<CListItem>(this.objmedonbehalfof.cboReason.SelectedItem, CListItem);
                        this.oResolveItem.OnBehalfOfReason = ObjectHelper.CreateObject(new CListItem(), {
                            DisplayText: oSelectedValue.DisplayText,
                            Value: oSelectedValue.Value
                        });
                    }
                    if (this.objmedonbehalfof.cboCommunicationMode != null && this.objmedonbehalfof.cboCommunicationMode.SelectedItem != null) {
                        oSelectedValue = ObjectHelper.CreateType<CListItem>(this.objmedonbehalfof.cboCommunicationMode.SelectedItem, CListItem);
                        this.oResolveItem.CommunicationMode = ObjectHelper.CreateObject(new CListItem(), {
                            DisplayText: oSelectedValue.DisplayText,
                            Value: oSelectedValue.Value
                        });
                    }
                }                
                this.objmedonbehalfof.dupDialogRef.close();
            }
        }
        else if (args.Result == AppDialogResult.Cancel && this.objmedonbehalfof != null) {
            this.objmedonbehalfof.CancelButtonClick();
        }
    }
    serviceProxy_GetDataItemCompleted(sender: Object, e: GetDataItemCompletedEventArgs): void {
        let dataItemCodes: StringBuilder = new StringBuilder();
        let RdataItemCodes: StringBuilder = new StringBuilder();
        let RequestItemCodes: StringBuilder = new StringBuilder();
        let oNoObservationandResultMsg: iMessageBox = new iMessageBox();
        oNoObservationandResultMsg.Title = CConstants.CodingSchemeName;
        oNoObservationandResultMsg.Message = CConstants.NOObservationandResult + this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingName;
        oNoObservationandResultMsg.IconType = MessageBoxType.Information;
        oNoObservationandResultMsg.MessageButton = MessageBoxButton.OK;
        let oRes:CResMsgGetDataItem = e.Result;
        if(oRes != null && oRes.oObservationResult != null && oRes.oObservationResult.Count > 0) {
            let CanlaunchChart: boolean = false;
            oRes.oObservationResult.forEach( (obsResItem)=> {
                if (String.Compare(obsResItem.ItemType, "Observation", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    if (dataItemCodes.Length == 0) {
                        dataItemCodes.Append(obsResItem.ItemCode);
                        dataItemCodes.Append("~" + obsResItem.ItemName);
                        dataItemCodes.Append("~" + obsResItem.Version);
                        dataItemCodes.Append("~" + obsResItem.ItemOID);
                        dataItemCodes.Append("~" + obsResItem.ItemType);
                    }
                    else {
                        dataItemCodes.Append("^");
                        dataItemCodes.Append(obsResItem.ItemCode);
                        dataItemCodes.Append("~" + obsResItem.ItemName);
                        dataItemCodes.Append("~" + obsResItem.Version);
                        dataItemCodes.Append("~" + obsResItem.ItemOID);
                        dataItemCodes.Append("~" + obsResItem.ItemType);
                    }
                }
                else if (String.Compare(obsResItem.ItemType, "Result", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    if (RdataItemCodes.Length == 0) {
                        RdataItemCodes.Append(obsResItem.ItemOID);
                    }
                    else {
                        RdataItemCodes.Append("^");
                        RdataItemCodes.Append(obsResItem.ItemOID);
                    }
                }
                else {
                    if (RequestItemCodes.Length == 0) {
                        RequestItemCodes.Append(obsResItem.ItemOID);
                        RequestItemCodes.Append("~" + obsResItem.ItemName);
                        RequestItemCodes.Append("~" + obsResItem.Version);
                        RequestItemCodes.Append("~" + obsResItem.ItemOID);
                        RequestItemCodes.Append("~" + obsResItem.ItemType);
                    }
                    else {
                        RequestItemCodes.Append("^");
                        RequestItemCodes.Append(obsResItem.ItemOID);
                        RequestItemCodes.Append("~" + obsResItem.ItemName);
                        RequestItemCodes.Append("~" + obsResItem.Version);
                        RequestItemCodes.Append("~" + obsResItem.ItemOID);
                        RequestItemCodes.Append("~" + obsResItem.ItemType);
                    }
                }
            });
            if ((RequestItemCodes != null && RequestItemCodes.Length > 0) || (RdataItemCodes != null && RdataItemCodes.Length > 0) || (dataItemCodes != null && dataItemCodes.Length > 0))
                CanlaunchChart = true;
            if (CanlaunchChart) {
                let sOpenMode: string = String.Empty;
                sOpenMode = "APPSFS";
                let sprescriptionItemOID: number = 0;
                if (this.oResolveItem.PrescriptionItemOID == 0 && this.oResolveItem.ActionCode == ActivityTypes.Amend) {
                    sprescriptionItemOID = this.oResolveItem.SourcePrescriptionOid;
                }
                else sprescriptionItemOID = this.oResolveItem.PrescriptionItemOID;
                let sArgs = String.Empty;
                let itemname: string = String.Empty;
                if (String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                    itemname = this.oResolveItem.FormViewerDetails.BasicDetails.mCIItemDisplay;
                }
                else {
                    itemname = this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingName;
                }
                sArgs = "&PrescriptionItemOID=" + sprescriptionItemOID + "&IdentifyingOID=" + this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID + "&IdentifyingType=" + this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType + "&MCVersionNo=" + this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion + "&PrescribedItem=" + itemname + "&PrescriptionType=" + PatientContext.PrescriptionType + "&OpenMode=" + sOpenMode + "&Itemlist=" + this.oResolveItem.Itemlist + "&Observation=" + dataItemCodes.ToString() + "&Result=" + RdataItemCodes.ToString() + "&Request=" + RequestItemCodes.ToString() + "&ISFULLSIZE=" + "true";
                AppLoadService.LaunchWizard(this.AppChildWizardClose, "MN_OBSERESULTCHAR_P2", sArgs, WizardType.WIZARD);
            }
            else {
                oNoObservationandResultMsg.Show();
                // oNoObservationandResultMsg.MessageBoxClose -= oNoObservationandResultMsg_MessageBoxClose;
                oNoObservationandResultMsg.MessageBoxClose  = (s,e) => { this.oNoObservationandResultMsg_MessageBoxClose(s,e); } ;
                return
            }
        }
 else {
            oNoObservationandResultMsg.Show();
            // oNoObservationandResultMsg.MessageBoxClose -= oNoObservationandResultMsg_MessageBoxClose;
            oNoObservationandResultMsg.MessageBoxClose = (s, e) => { this.oNoObservationandResultMsg_MessageBoxClose(s, e); };
            return
        }
        this.bIsShowMessage = false;
    }
    oNoObservationandResultMsg_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
        if (e.MessageBoxResult == MessageBoxResult.OK) {
            this.bIsShowMessage = false;
        }
    }
    public AppChildWizardClose(e: ChildWizardCloseEventargs): void {

    }
    private IsTechValMandatory(): boolean {
        let bTechVal: boolean = true;
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null) {
            this.oResolveItem.CheckForTechValidateMandatory();
            if (this.oResolveItem.IsTechValidateMandatory && (this.oResolveItem.FormViewerDetails.TechValidateDetails == null || (this.oResolveItem.FormViewerDetails.TechValidateDetails != null && (this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems == null || this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count == 0)))) {
                bTechVal = false;
            }
        else if (this.oResolveItem.IsTechValidateMandatory && this.oResolveItem.FormViewerDetails.TechValidateDetails != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems != null && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0) {
            let temp = this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(Techitems => Techitems.IsDoseCombinationsDefined=='0');
            if (temp != null && temp.Count() > 0 && this.oResolveItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count == temp.Count()) {
                    bTechVal = false;
                }
            }
        }
        return bTechVal;
    }
    private IsConflictsMandatory(): boolean {
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null) {
            let bConflict: boolean = true;
            let sIdentifyingType: string = this.oResolveItem.FormViewerDetails.BasicDetails != null ? this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType : String.Empty;
            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0 || PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory) {
                if (ProfileData.MedConflictConfig != null && ProfileData.MedConflictConfig.DisplayConflicts == '0') {
                    bConflict = false;
            }
        }
        if (String.Compare(sIdentifyingType, CConstants.NONCATALOGUEITEM, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(sIdentifyingType, CConstants.Precatalog, StringComparison.OrdinalIgnoreCase) == 0) {
            bConflict = false;
        }
        if (bConflict && (this.bIsExistingItem || this.oResolveItem.IsConflictViewed)) {
            if (this.oResolveItem.FormViewerDetails.ConflictDetails != null) {
                for( let i:number=0; i< this.oResolveItem.FormViewerDetails.ConflictDetails.Count ; i++){
                    let oConf : ConflictsVM =  this.oResolveItem.FormViewerDetails.ConflictDetails[i];
                    if (oConf.EnableAcknowledgementDetails && !oConf.AcknowledgeStatus && (String.Compare(oConf.WarningBehaviourType, "Type 2", StringComparison.InvariantCultureIgnoreCase) == 0 || String.Compare(oConf.WarningBehaviourType, "Type 3", StringComparison.InvariantCultureIgnoreCase) == 0) && !oConf.IsSeal && String.Compare(oConf.SealType, "CC_SEALLOCK", StringComparison.CurrentCultureIgnoreCase) != 0 && String.Compare(oConf.SealType, "CC_SEAL", StringComparison.CurrentCultureIgnoreCase) != 0 && !oConf.IsFluidOrSequence) {
                        return false;
                    }
                    else if (oConf.EnableAcknowledgementDetails && (String.Compare(oConf.PrescriberReason.Value, "Select reason*", StringComparison.InvariantCultureIgnoreCase) == 0) && (String.Compare(oConf.WarningBehaviourType, "Type 2", StringComparison.InvariantCultureIgnoreCase) == 0) && !oConf.IsSeal && String.Compare(oConf.SealType, "CC_SEALLOCK", StringComparison.CurrentCultureIgnoreCase) != 0 && String.Compare(oConf.SealType, "CC_SEAL", StringComparison.CurrentCultureIgnoreCase) != 0 && !oConf.IsFluidOrSequence) {
                        return false;
                    }
                }
            }
            else if (this.oResolveItem.bCnflctGenAftrRcrdAllergy && this.oResolveItem.FormViewerDetails.ConflictDetails == null && (this.oResolveItem.TrafficIconResolve == ConflictIcons.Red || this.oResolveItem.TrafficSymbol == ConflictIcons.Red)) {
                    return false;
                }
            }
        }
        return true;
    }
    private IsType1(): boolean {
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.ConflictDetails != null && (this.bIsExistingItem || this.oResolveItem.IsConflictViewed)) {
            for (let i: number = 0; i < this.oResolveItem.FormViewerDetails.ConflictDetails.Count; i++) {
                let oConf: ConflictsVM = this.oResolveItem.FormViewerDetails.ConflictDetails[i];
                if (oConf.EnableAcknowledgementDetails && String.Compare(oConf.WarningBehaviourType, "Type 1", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    return false;
                }
            }
        }
        return true;
    }
    public Cancel_ButtonClick(): void {
        this.oResolveItem.FormViewerDetails.BasicDetails.QuantTaboutFormClose = true;
        this.oResolveItem.formViewerDetails.BasicDetails.IsCancelClick = true;
        if (this.oResolveItem.FormViewerDetails.BasicDetails.TVMsgFormClose) {
            return
        }
        if (this.oResolveItem.FormViewerDetails.BasicDetails.launchsupplyinstrmezzanineCheck) {
            return
        }
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged) {
    return
}
if (this.oResolveItem.ActionCode == ActivityTypes.Prescribe && this.cmdRemove != null && this.cmdRemove.IsEnabled == false) {
    let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
        Title: "LORENZO",
        Message: "The item will not be added into the prescription",
        MessageButton: MessageBoxButton.OKCancel,
        IconType: MessageBoxType.Information,
        sender:this
    });
    iMsgBox.MessageBoxClose  = (s,e) => { this.iMsgBox_MessageBoxClose(s,e); } ;
    iMsgBox.Show();
}
else {
    if (!this.isCancelClickedMultipleTimes) {
        this.isCancelClickedMultipleTimes = true;
        let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
            Title: "LORENZO",
            Message: "You are about to cancel this activity, are you sure?",
            MessageButton: MessageBoxButton.YesNo,
            IconType: MessageBoxType.Question,
            sender:this
        });
                iMsgBox.MessageBoxClose = (s, e) => { this.iMsgBox_MessageBoxClose1(s, e); };
                iMsgBox.Show();
            }
        }
        Busyindicator.SetStatusIdle("OrderSetPrescribe");
    }
    oMsgBox_MessageBoxCloseBooster(sender: Object, e: MessageEventArgs): void {
        if (e.MessageBoxResult == MessageBoxResult.Yes) {
            if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Bolus != null || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.Bolus != "0") {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateBoosterSafty = true;
                this.IsValidationAsyncCallback = false;
                this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
        }
 else {
            // let txtBoosterDose: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox);
            if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox) instanceof iTextBox) {
                if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                    this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBoosterDose"), iTextBox).Focus();
            }
        }
    }
    oMsgBox_MessageBoxCloseBolus(sender: Object, e: MessageEventArgs): void {
        if (e.MessageBoxResult == MessageBoxResult.Yes) {
            if (this.CheckLockoutPeriod()) {
                this.oResolveItem.FormViewerDetails.BasicDetails.IsValidateBolusSafty = true;
                this.IsValidationAsyncCallback = false;
                this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
        }
 else {
            // let txtBolus: iTextBox = ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox);
            if (ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox) instanceof iTextBox) {
                if (String.Compare(this.ftbFormViewDetails.SelectedKey, "frmBasic") != 0)
                    this.ftbFormViewDetails.Click("frmBasic", true);
                ObjectHelper.CreateType<iTextBox>(this.frmViewBasic.FindName("txtBolus"), iTextBox).Focus();
            }
        }
    }
    oMsgBox_MessageBoxCloseBolusRecordAdmin(sender: Object, e: MessageEventArgs): void {

        if (e.MessageBoxResult == MessageBoxResult.Yes) {
            this.IsValidationAsyncCallback = true;
            this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
        }
        else {
            // let txtBolus: iTextBox = ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtDoseValue"), iTextBox);
            if (ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtDoseValue"), iTextBox) instanceof iTextBox) {
                ObjectHelper.CreateType<iTextBox>(this.oRecordAdminTab.Content.FindName("txtDoseValue"), iTextBox).Focus();
            }
        }
    }
    iMsgBox_MessageBoxClose1(sender: any, e: MessageEventArgs): void {
        let OResolvePresItem : PrescriptionItemVM;
        if(sender != null && sender.oResolveItem != null ){
            this['oResolveItem'] = sender.oResolveItem;
            this.oResolveItem.FormViewerDetails.BasicDetails.QuantTaboutFormClose = false;
            OResolvePresItem = sender.oResolveItem;
        }
        if (e.MessageBoxResult == MessageBoxResult.Yes) {
            let objbase: IPPMABaseVM = ObjectHelper.CreateType<IPPMABaseVM>(this.oResolveItem.ParentbaseVM, IPPMABaseVM);
            if (this.onDialogClose != null) {
                if (this.oResolveItem != null)
                    this.oResolveItem.IsFRMTecVal = true;
                this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Close, AppChildWindow: super.appDialog }));
            }
            if (QueryStringInfo.SelPrescItemOID > 0) {
                QueryStringInfo.SelPrescItemOID = 0;
            }
            Busyindicator.SetStatusIdle("FormViewer");
            Busyindicator.SetStatusIdle("PrescribeProductOption");
            Busyindicator.SetStatusIdle("Favourites");
            Busyindicator.SetStatusIdle("IndicationreqForm");
            Busyindicator.SetStatusIdle("FormViewerClick");
            Busyindicator.SetStatusIdle("PresChartAmend");
            Busyindicator.SetStatusIdle("CreateMCILink");
            Busyindicator.SetStatusIdle("FormViewer");
            Busyindicator.SetStatusIdle("TechValidate_Productoptions");
            Busyindicator.SetStatusIdle("FormViewer");
           
            if (objbase != null) {
                objbase.CallOrderSetSequence(objbase.orsseqcount);
                objbase.orsseqcount++;
                if (objbase.objRePresItmCollection != null && objbase.objRePresItmCollection.Count > 0) {
                    objbase.CallRePresSequence(objbase.represcseqcount);
                    objbase.represcseqcount++;
                }
            }
            if (OResolvePresItem.ActionCode == ActivityTypes.Amend) {
                let index: number = objbase.MedsResolve.IndexOf(objbase.MedsResolve.Where(x => x.PrescriptionItemOID == OResolvePresItem.PrescriptionItemOID).FirstOrDefault());
                if (index > -1) {
                    objbase.callReBindResolveGridEvent(String.Empty, this.oResolveItem, index);
                }
            }
            // ObjectHelper.OpenWindowInst = false;
            // ObjectHelper.stopFinishAndCancelEvent(false);
        }
        this.isCancelClickedMultipleTimes = false;        
    }
    private cmdResult_Click(sender: Object, e: RoutedEventArgs): void {
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
            let oResultInput: ResultInputData = ObjectHelper.CreateObject(new ResultInputData(), {
                IdentifyingOID: this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingOID,
                IdentifyingType: this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingType,
                IdentifyingName: this.oResolveItem.FormViewerDetails.BasicDetails.IdentifyingName,
                MCVersion: String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion) ? AppSessionInfo.AMCV : this.oResolveItem.FormViewerDetails.BasicDetails.MCVersion
            });
            this.oResultVM = new RequestandResultVM(oResultInput);
            this.oResultVM.CheckResultAssociationCompletedEvent = (s, e) => { this.oResultVM_CheckResultAssociationCompletedEvent(s, e); };
            this.oResultVM.CheckResultAssociation();
        }
    }
    oResultVM_CheckResultAssociationCompletedEvent(sender: Object, IsResultAssociated: boolean): void {
        //Revisit Required
        /*
        if(IsResultAssociated) {
            this.objResults = new medrecentresultschild(ObjectHelper.CreateType<RequestandResultVM>(sender, RequestandResultVM));
            AppActivity.OpenWindow((ObjectHelper.CreateType<RequestandResultVM>(sender, RequestandResultVM)).ResultsTitle, this.objResults, (s,e)=>{ this.RecentResults_Closed(s);}, "See full results for more details", true, 480, 640, true, WindowButtonType.Close, null);
        }
        */
    }
    //Revisit Required
    /*
RecentResults_Closed(args:AppDialogEventargs): void
    {
        this.objResults.appDialog.DialogResult = true;
    }
    */
    public bRemoveStatus: boolean = false;
    private cmdRemove_Click(sender: Object, e: RoutedEventArgs): void {
        let objNewItemVM: PrescriptionItemVM = ObjectHelper.CreateType<PrescriptionItemVM>(this.DataContext, PrescriptionItemVM);
        if (objNewItemVM != null) {
            let IsIdentifySequentialPrescItem: boolean = false;
            if (objNewItemVM.formViewerDetails != null && objNewItemVM.formViewerDetails.BasicDetails != null && objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails != null && objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0 && objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0) {
                IsIdentifySequentialPrescItem = true;
            }
            if (objNewItemVM.formViewerDetails != null && objNewItemVM.formViewerDetails.BasicDetails != null && objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo != null && objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0 && objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo > 0) {
                IsIdentifySequentialPrescItem = true;
            }
            if (IsIdentifySequentialPrescItem) {
                let oMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                    Title: "LORENZO",
                    Message: Resource.Infusion.SequentialRemoveAlert_Message,
                    MessageButton: MessageBoxButton.YesNo,
                    IconType: MessageBoxType.Question
                });
                oMsgBox.MessageBoxClose  = (s,e) => { this.SequentialRemove_MessageBoxClose(s,e); } ;
                oMsgBox.Show();
            }
            else {
                this.RemoveAction();
            }
        }
    }
    RemoveAction(): void {
        this.bRemoveStatus = true;
        let vm: PrescriptionItemVM = ObjectHelper.CreateType<PrescriptionItemVM>(this.DataContext, PrescriptionItemVM);
        if (vm != null && vm.GpConnectMedicationItem != null) {
            vm.GpConnectMedicationItem.IsClerked = false;
        }
        super.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Cancel, AppChildWindow: super.appDialog }));
    }
    SequentialRemove_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
        if (e.MessageBoxResult == MessageBoxResult.Yes) {
            this.RemoveAction();
        }
    }
    private medformview_Unloaded(sender: Object, e: RoutedEventArgs): void {
        this.DisposeFormEvents();
        if (this.oVM != null)
            this.oVM.DoCleanUP();
        let objfrm: PrescriptionItemVM = ObjectHelper.CreateType<PrescriptionItemVM>(this.DataContext, PrescriptionItemVM);
        if (this.objMulti != null)
            this.objMulti.UnRegisterMultiRouteEvent(this.frmViewBasic, objfrm, this.iMultiRoute);
        if(objfrm != null)
            objfrm.DoCleanUP();
        if (this.oResolveItem != null)
            this.oResolveItem.DoCleanUP();
        this.DisposeFormObjects();
        if(this.DataContext){
            this.DataContext['frmAdminSlotTimesloaded'] = undefined;
        }
        this.DataContext = null;
    }
    public DisposeFormObjects(): void {
        //Revisit Required
        if (this.frmViewConflict != null) {
            this.frmViewConflict.DataContext = null;
        }
        this.frmViewConflict = null;
        if (this.frmViewTech != null) {
            this.frmViewTech.DataContext = null;
        }
        this.frmViewTech = null;

        if(this.frmViewAdditional != null)
        {
            this.frmViewAdditional.DataContext = null;
        }
        this.frmViewAdditional = null;

//Revisit Required
/*
this.ftbFormViewDetails.NullifyiTabItemContentReference("frmRecordAdmin");
this.ftbFormViewDetails.NullifyiTabItemContentReference("frmTech");
this.ftbFormViewDetails.NullifyiTabItemContentReference("frmBasic");

if (this.frmRecordAdmin != null) {
    this.frmRecordAdmin.DataContext = null;
}
this.frmRecordAdmin = null;
this.objfrmFVFooter = null;
*/
if (this.frmViewBasic != null) {
    this.frmViewBasic.DataContext = null;
}
this.frmViewBasic = null;
//Revisit Required
/*
this.frmViewMulticomponent = null;
this.frm = null;
*/
// Application.CommonBB.PatientBSADataCompletedEvent -= CommonBB_PatientBSADataCompletedEvent;
//this.objResults = null; //Revisit Required
this.oDefaultBasicDetails = null;
//this.omeddrugindicationChild = null; //Revisit Required
this.oResultVM = null;
        // this.cboRsnForMod = null;
this.oRecordAdminTab = null;
if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
    this.oResolveItem.FormViewerDetails.BasicDetails.OriginalMultiDoseDetails = null;
    this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute = null;
    if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null) {
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.OrginalInfusionPeriod = String.Empty;
    }
}
        // this.cmdLink = null;
        // this.cmdOnbehalfOf = null;
        // this.cmdRemove = null;
        // this.cmdDoseCal = null;
        // this.cmdObservationResults = null;
        // this.cmdFBChart = null;
        // this.cmdReviewDetails = null;
this.objMulti = null;
this.objMsg = null;
this.objfrm = null;
this.grdAdminTimes = null;
        // this.udReviewafter = null;
        // this.udDuration = null;
        // this.dtpStartDate = null;
        // this.dtpStopDate = null;
        // this.cbofrequency = null;
        // this.dtpStartDate = null;
        // this.iTimeStartDateTime = null;
        // this.cboDuration = null;
        // this.udDuration = null;
        // this.txtLowerDose = null;
        // this.txtBoosterDose = null;
        // this.txtBolus = null;
        // this.txtVolume = null;
        // this.cboUOM = null;
        // this.cboDoseType = null;
        // this.cboInfusion = null;
        // this.cboDeliveryDevice = null;
        // this.iTimeStopDateTime = null;
        // this.dtpStopDate = null;
        // this.chkRecordAdmin = null;
        // this.chckOngoing = null;
        // this.lblReviewcopiedose = null;
        // this.udReviewafter = null;
        // this.cboreviewAfterUOM = null;
        // this.lblReviewafter = null;
        // this.lblReviewAfterDate = null;
        // this.txtReviewAfterComments = null;
        // this.lblReviewAfterComments = null;
        // this.cboRoute = null;
        // this.cboDosageForm = null;
        // this.cboStrength = null;
        // this.cboRsnForMod = null;
this.cboModClerkReason = null;
        // this.cboSite = null;
        // this.cboStationary = null;
        // this.cmdBrand = null;
        // this.chckIsMultiRoute = null;
if (!(this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsFollowUpStat)) {
    this.oResolveItem = null;
    if (this.oVM != null) {
        if (this.oVM.objNewItemVM != null) {
            this.oVM.objNewItemVM = null;
        }
        if (this.oVM.objFormViewer != null) {
            this.oVM.objFormViewer = null;
                }
            }
        }
        this.oVM = null;
        //this.objmedonbehalfof = null; //Revisit Required
    }
    public DisposeFormEvents(): void {
        if (this.oResolveItem != null) {
            // if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
            //     this.oResolveItem.FormViewerDetails.BasicDetails.RouteFormChangedEvent -= this.RouteFormChanged;
            //     this.oResolveItem.FormViewerDetails.BasicDetails.OnEPrescribeRuleExecution -= BasicDetails_OnePrescribeRuleExecution;
            //     this.oResolveItem.FormViewerDetails.BasicDetails.PropertyChanged -= BasicDetails_PropertyChanged;
            //     this.oResolveItem.FormViewerDetails.BasicDetails.MultiRouteUnSubscribeEvent -= UnRegisterMultirouteProperties;
            // }
    // this.oResolveItem.IsDeactivateCtrlFocusChangedEvent -= oResolveItem_IsDeactivateCtrlFocusChangedEvent;
    // this.oResolveItem.RefreshDRCConflictICONEvent -= RefreshDRCConflictICONS;
    // this.oResolveItem.RefreshConflictICONEvent -= RefreshConflictICONS;
    // this.oResolveItem.UpdateMultiRoutePropertyChangedEvent -= ReRegisterMultirouteProperties;
    // this.oResolveItem.RouteorFormchangeEvent -= RouteorFormchangeEvent;
    // this.oResolveItem.MultiRouteChangeEvent -= MultiRouteChanged;
    // this.oResolveItem.TriggerParacetamolWarningEvent -= oResolveItem_DisplayParacetamolWarningMessage;
    // this.oResolveItem.RouteorFormchangePresEvent -= RouteorFormchangeEvent;
    this.oResolveItem.DoCleanUP();
}
// if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null) {
//     this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.forEach( (multiroutelistitem)=> {
//         multiroutelistitem.PropertyChanged -= MultiRoute_PropertyChanged;
//     });
// }
if (this.cmdBrand != null)
            // this.cmdBrand = null;
if (this.MultiRouteSelect != null)
    this.MultiRouteSelect = null;
// if (this.cmdLink != null)
//     this.cmdLink.Click -= cmdLink_Click;
// if (this.cmdDoseCal != null)
//     this.cmdDoseCal.Click -= cmdDoseCal_Click;
// if (this.cmdReviewDetails != null)
//     this.cmdReviewDetails.Click -= cmdReviewDetails_Click;
// if (this.cmdRemove != null)
//     this.cmdRemove.Click -= cmdRemove_Click;
// if (this.cmdObservationResults != null)
//     this.cmdObservationResults.Click -= OnObservationClick;
// if (this.cmdOnbehalfOf != null)
//     this.cmdOnbehalfOf.Click -= cmdOnbehalfOf_Click;
// if (this.ftbFormViewDetails != null)
//     this.ftbFormViewDetails.PreviewSelectionChanged -= ftbFormViewDetails_PreviewSelectionChanged;
// if (this.objMsg != null)
//     this.objMsg.MessageBoxClose -= objMsg_MessageBoxClose;
// if (this.oTxtProblem != null) {
//     this.oTxtProblem.OnClick -= oTxtProblem_OnClick;
//     this.oTxtProblem.KeyDown -= oTxtProblem_KeyDown;
// }
// if (this.frmViewBasic != null)
//     this.frmViewBasic.Loaded -= frmViewBasic_Loaded;
// if (this.cboRoute != null)
//     this.cboRoute.SelectionChanged -= cboRoute_SelectionChanged;
// if (this.cboDosageForm != null)
//     this.cboDosageForm.SelectionChanged -= cboDosageForm_SelectionChanged;
// if (this.cboDoseType != null)
//     this.cboDoseType.SelectionChanged -= cboDoseType_SelectionChanged;
// if (this.dtpStartDate != null)
//     this.dtpStartDate.OnDateValueChanged -= dtpStartDate_OnDateValueChanged;
// if (this.iTimeStartDateTime != null)
//     this.iTimeStartDateTime.ValueChanged -= iTimeStartDateTime_ValueChanged;
// if (this.dtpStopDate != null)
//     this.dtpStopDate.OnDateValueChanged -= dtpStopDate_OnDateValueChanged;
// if (this.iTimeStopDateTime != null)
//     this.iTimeStopDateTime.ValueChanged -= iTimeStopDateTime_ValueChanged;
// if (this.chkRecordAdmin != null)
//     this.chkRecordAdmin.Checked -= chkRecordAdmin_Checked;
// if (this.chkRecordAdmin != null)
//     this.chkRecordAdmin.Unchecked -= chkRecordAdmin_Unchecked;
// if (this.oResultVM != null)
//     this.oResultVM.CheckResultAssociationCompletedEvent -= oResultVM_CheckResultAssociationCompletedEvent;
// if (this.profile != null)
//     this.profile.OnProfileLoaded -= PrescribeConfig_OnProfileLoaded;
// if (this.cboDRCDosetype != null)
//     this.cboDRCDosetype.SelectionChanged -= cboDRCDosetype_SelectionChanged;
// if (this.oResolveItem != null) {
//     this.oResolveItem.OnFormViewerControlFocus -= oResolveItem_OnFormViewerControlFocus;
//     this.oResolveItem.OnHomeLeaveMsgFocus -= oResolveItem_OnHomeLeaveMsgFocus;
//     this.oResolveItem.BrandChangedEvent -= SetDrugHeaderContent;
//     if (this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
//         this.oResolveItem.FormViewerDetails.BasicDetails.RouteFormChangedEvent -= this.RouteFormChanged;
//         this.oResolveItem.FormViewerDetails.BasicDetails.VMRouteFormForCDChangedEvent -= SetDrugHeaderContent;
//         if (this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin != null)
//             this.oResolveItem.FormViewerDetails.BasicDetails.RecordAdmin.GetWitnessRequiredEvent -= RecordAdmin_GetWitnessRequiredEvent;
//         if (this.lblSupplyInst != null)
//             this.lblSupplyInst.MouseLeftButtonUp -= lblSupplyInst_MouseLeftButtonUp;
//         this.oResolveItem.FormViewerDetails.BasicDetails.ClerkSVRegimePartialDateUpdEvent -= BasicDetails_ClerkSVRegimePartialDateUpdEvent;
//         this.oResolveItem.AuthoriseTVDisableEvent -= new PrescriptionItemVM.AuthoriseTVDisableDelegate(AuthoriseTVchangeEvent);
//         this.oResolveItem.AuthoriseTVMCIDisableEvent -= new PrescriptionItemVM.AuthoriseTVMCIDisableDelegate(AuthoriseTVMCIchangeEvent);
//         if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null)
//             this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.AuthoriseTVDisableEvent -= AuthoriseTVchgEvent;
//     }
// }
// if (this.oTxtProblem != null) {
//     this.oTxtProblem.OnClick -= oTxtProblem_OnClick;
        //     this.oTxtProblem.KeyDown -= oTxtProblem_KeyDown;
        // }
        // if (this.lblReviewcopiedose != null) {
        //     this.lblReviewcopiedose.MouseLeftButtonUp -= lblReviewcopieddoses_MouseLeftButtonUp;
        // }
    }
    DRCIcon(): void {
        let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmViewDRC");
        if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmViewDRC") {
            oFauxTabItem.HeaderImageList = new List<HeaderImageListItem>();
            let obj: HeaderImageListItem = new HeaderImageListItem();
            if ((this.oResolveItem != null) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon == ConflictIcons.Red)) {
                oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                oFauxTabItem.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
                obj.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
            }
            else if ((this.oResolveItem != null) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon == ConflictIcons.Amber)) {
                oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.Amber);
                oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                oFauxTabItem.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                obj.HeaderImage = MedImage.GetPath(MedImages.Amber);
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
            }
            else if ((this.oResolveItem != null) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon == ConflictIcons.Question)) {
                oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.WhiteQuestionMark);
                oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                oFauxTabItem.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                obj.HeaderImage = MedImage.GetPath(MedImages.WhiteQuestionMark);
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
            }
            else if ((this.oResolveItem != null) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon == ConflictIcons.Pass)) {
                oFauxTabItem.HeaderImage = MedImage.GetPath(MedImages.ConflictPass);
                oFauxTabItem.HeaderImageAlign = HeaderImageAlignment.Right;
                oFauxTabItem.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
                obj.HeaderImage = MedImage.GetPath(MedImages.ConflictPass);
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
            }
            else {
                obj.HeaderImage = "";
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = "";
            }
            oFauxTabItem.HeaderImageList.Add(obj);
            if (obj.HeaderImage != null && this.bDrcLoad)
                oFauxTabItem.UpdateHeader();
            this.bDrcLoad = true;
        }
    }
    RefreshDRCConflictICONS(): void {
        this.DRCIcon();
        if (this.oResolveItem != null && this.oResolveItem.bDRCConflictOkVallidation && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && ((this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory && !this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCAcknowledge) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory && this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason == null) || (this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.MedDRCReason.DisplayText) && (this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCCommentsVisibility == Visibility.Visible) && (String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments) || String.IsNullOrWhiteSpace(this.oResolveItem.FormViewerDetails.PresItemDRCVM.DRCComments))))) {
            this.oResolveItem.bDRCConflictOkVallidation = false;
            this.CheckMandDRC();
        }
        else if (this.oResolveItem != null && this.oResolveItem.bDRCConflictOkVallidation) {
            if (this.oResolveItem.bDRCConflictOkVallidation && !this.IsConflictsMandatory()) {
                this.oResolveItem.bDRCConflictOkVallidation = false;
        this.objMsg.Message = Resource.MedicationForm.Conflict_ValidateMsg;
        this.oResolveItem.FocusControl = "Conflict_ValidateMsg";
        this.objMsg.Show();
    }
    else {
        this.oResolveItem.bDRCConflictOkVallidation = false;
        this.IsDRCCompleted = true;
        if ((this.oResolveItem.ActionCode != ActivityTypes.Amend || (this.oResolveItem.ActionCode == ActivityTypes.Amend && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && this.PreviousDueOverdueExistsWarning_Displayed)) && this.oResolveItem.FormViewerDetails.PresItemDRCVM != null && this.oResolveItem.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType) && (String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType4) || String.Equals(this.oResolveItem.FormViewerDetails.PresItemDRCVM.BehaviourType, CConstants.sBehaviourType5)) && this.ftbFormViewDetails.SelectedKey != "frmViewDRC") {
            this.ftbFormViewDetails.Click("frmViewDRC", true);
            this.IsDRCCompleted = false;
        }
                else {
                    this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
        }
    }
    RefreshConflictICONS(): void {
        let oFauxTabItem: iTabItem = this.ftbFormViewDetails.GetItem("frmConflicts");
        if (oFauxTabItem instanceof iTabItem && oFauxTabItem.Key == "frmConflicts") {
            oFauxTabItem.HeaderImageList = new List<HeaderImageListItem>();
            let obj: HeaderImageListItem = new HeaderImageListItem();
            if ((this.oResolveItem != null) && (this.oResolveItem.TrafficIcon == ConflictIcons.Red)) {
                obj.HeaderImage = MedImage.GetPath(MedImages.RedStar);
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
            }
            else if ((this.oResolveItem != null) && (this.oResolveItem.TrafficIcon == ConflictIcons.Amber)) {
                obj.HeaderImage = MedImage.GetPath(MedImages.Amber);
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
            }
            else if ((this.oResolveItem != null) && (this.oResolveItem.TrafficIcon == ConflictIcons.Question)) {
                obj.HeaderImage = MedImage.GetPath(MedImages.WhiteQuestionMark);
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
            }
            else if (this.oResolveItem != null && this.oResolveItem.TrafficIcon == ConflictIcons.MandatoryIndicator) {
                obj.HeaderImage = MedImage.GetPath(MedImages.MandatoryIndicator);
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = Resource.prescribedrugs.BubbleConflicts_Tooltip;
            }
            else {
                obj.HeaderImage = "";
                obj.HeaderImageAlignment = HeaderImageAlignment.Right;
                obj.HeaderImgToolTip = "";
            }
            oFauxTabItem.HeaderImageList.Add(obj);
            let IsConflictDetailsEmpty: boolean = false;
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && (this.oResolveItem.FormViewerDetails.ConflictDetails == null || this.oResolveItem.FormViewerDetails.ConflictDetails.Count == 0)) {
                IsConflictDetailsEmpty = true;
            }
            if ((!String.IsNullOrEmpty(obj.HeaderImage) || IsConflictDetailsEmpty) && this.cbCallConflictHeaderUpdate){
                oFauxTabItem.HeaderImage = obj.HeaderImage;
                oFauxTabItem.HeaderImageAlign = obj.HeaderImageAlignment;
                oFauxTabItem.HeaderImgToolTip = obj.HeaderImgToolTip;
            }
        }
    }
    ReRegisterMultirouteProperties(): void {
        if (this.objMulti != null) {
            this.objMulti.UnRegisterMultiRouteEvent(this.frmViewBasic, this.objfrm, this.iMultiRoute);
            this.objMulti.RegisterMultiRouteEvent(this.frmViewBasic, this.objfrm, this.iMultiRoute,this);
        }
    }
    UnRegisterMultirouteProperties(): void {
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds) {
            if (this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteChecked && !this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                this.SetNormalForm();
            }
            else if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteChecked) {
                if (this.objMulti != null) {
                    this.objMulti.UnRegisterMultiRouteEvent(this.frmViewBasic, this.objfrm, this.iMultiRoute);
        }
        if (!this.oResolveItem.FormViewerDetails.BHasFormViewParams) {
                    this.SetNormalForm();
                }
            }
        }
    }
    public isSeqRouteMessagedisplayed: boolean;
    public CheckSubSequentialRoutechanged(objMsgBox: iMessageBox): boolean {
        if (!this.isSeqRouteMessagedisplayed) {
            if (!this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsShowRouteDiscrepency) {
                let IsMultiInfusionRoutes: boolean;
                if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute && this.oResolveItem.FormViewerDetails.BasicDetails.IsMultiRouteChecked && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0 && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential != null || this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential != null) && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.SequentialItemOrder > 1) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > 1))) || (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno > 1))) {
                    IsMultiInfusionRoutes = Common.IsInfusionMultiRoutes(this.oResolveItem.FormViewerDetails.BasicDetails.DefaultDetails.Routes);
                    if (!IsMultiInfusionRoutes || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !(String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID)))) {
                    let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                        Title: "Lorenzo - Manage prescription",
                        Message: Resource.Infusion.SequentialRouteDifferent_Message,
                        MessageButton: MessageBoxButton.OKCancel,
                        IconType: MessageBoxType.Question
                    });
                    iMsgBox.MessageBoxClose  = (s,e) => { this.iMessageBox_MsgBoxClose(s,e); } ;
                    iMsgBox.Show();
                    return false;
                }
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag == null || (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains("0")) || (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && !(String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID)))) && !this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsItemAddedToResolveGrid && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null && ((this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.SequentialItemOrder > 1) || (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder > 1)) || (this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno > 1))) {
                let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                    Title: "Lorenzo - Manage prescription",
                    Message: Resource.Infusion.SequentialRouteDifferent_Message,
                    MessageButton: MessageBoxButton.OKCancel,
                    IconType: MessageBoxType.Question
                });
                iMsgBox.MessageBoxClose  = (s,e) => { this.iMessageBox_MsgBoxClose(s,e); } ;
                iMsgBox.Show();
                return false;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains("0")) && (this.oResolveItem.ActionCode == ActivityTypes.Reorder && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno > 1)) {
                let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                    Title: "Lorenzo - Manage prescription",
                    Message: Resource.Infusion.SequentialRouteDifferent_Message,
                    MessageButton: MessageBoxButton.OKCancel,
                    IconType: MessageBoxType.Question
                });
                iMsgBox.MessageBoxClose  = (s,e) => { this.iMessageBox_MsgBoxClose(s,e); } ;
                iMsgBox.Show();
                return false;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && (this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && String.Compare(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "0") == 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder == 1)) {
                    this.BreakSequentialInGroup();
                }
            }
        }
        return true;
    }
    iMessageBox_MsgBoxClose(sender: Object, e: MessageEventArgs): void {
        if (e.MessageBoxResult == MessageBoxResult.OK) {
            this.isSeqRouteMessagedisplayed = true;
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno > 1)
                this.BreakSequentialInGroup();
            this.OKClickValidations();
            this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
        }
 else if(e.MessageBoxResult == MessageBoxResult.Cancel) {
            // let cboRoute: iComboBox = ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox);
            if (ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox) instanceof iComboBox) {
                ObjectHelper.CreateType<iComboBox>(this.frmViewBasic.FindName("cboRoute"), iComboBox).Focus();
            }
            this.isSeqRouteMessagedisplayed = false;
        }
    }
    private BreakSequentialInGroup(): void {
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc = null;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno = 0;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi = Visibility.Collapsed;
        this.oResolveItem.FormViewerDetails.BasicDetails.IsSequentiallinkvisi = Visibility.Collapsed;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder = 0;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID = 0;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentialPrescribing = false;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential = null;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno = 0;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber = 0;
        if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData != null)
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.SequentialItemOrder = 0;
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder = 0;
        if (!this.oResolveItem.FormViewerDetails.BasicDetails.IsAllowMultiRoute) {
            this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType = null;
        }
        let objbase: IPPMABaseVM = ObjectHelper.CreateType<IPPMABaseVM>(this.oResolveItem.ParentbaseVM, IPPMABaseVM);
        if (objbase != null && objbase.InfusionContinousSeq != null) {
            objbase.InfusionContinousSeq.IsSequentialPrescribing = false;
            objbase.InfusionContinousSeq.FirstPrescItemOIDInSeq = 0;
            objbase.InfusionContinousSeq.SequentialRoute = null;
            objbase.InfusionContinousSeq.SequentialMultiplsRoutes = null;
        }
        this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.IsItemAddedToResolveGrid = true;
    }
    public ValidateSequence(): boolean {
        let isOrderSequence: boolean = this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Ordersets.Value);
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0) {
            if (isOrderSequence) {
                let validation = OsValidation.GetOsValidation(this.oResolveItem, false);
                if (validation.IsStatOnceOnlyOrPrn) {
                    let errorMessage: string = Resource.MedicationErrors.IsStatOnceOnlyOrPrnBreakError;
                iMessageBox.Show("LORENZO", errorMessage, MessageBoxType.Information, MessageBoxButton.OK);
                return false;
            }
            else if (validation.IsApplianceMedGasSVOrPCA || validation.IsTitrated || validation.IsIntermittend) {
                let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                let iMsgBoxRole: iMessageBox = new iMessageBox();
                iMsgBoxRole.Title = "LORENZO";
                iMsgBoxRole.IconType = MessageBoxType.Information;
                iMsgBoxRole.Height = 160;
                iMsgBoxRole.Width = 340;
                iMsgBoxRole.Message = errorMessage;
                iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                iMsgBoxRole.Show();
                return false;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains("0") && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute.Tag.ToString(), StringComparison.InvariantCultureIgnoreCase)) {
                let errorMessage: string = Resource.MedicationErrors.ChangeOfRouteInSequence;
                iMessageBox.Show("LORENZO", errorMessage, MessageBoxType.Information, MessageBoxButton.OK);
                return false;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.PCA, StringComparison.InvariantCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.INTERMITTENT, StringComparison.InvariantCultureIgnoreCase)) || this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE)) {
                let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                let iMsgBoxRole: iMessageBox = new iMessageBox();
                iMsgBoxRole.Title = "LORENZO";
                iMsgBoxRole.IconType = MessageBoxType.Information;
                iMsgBoxRole.Height = 160;
                iMsgBoxRole.Width = 340;
                iMsgBoxRole.Message = errorMessage;
                iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                iMsgBoxRole.Show();
                return false;
            }
            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.OrginalInfusionPeriod) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0 && this.oResolveItem.ParentbaseVM != null && this.oResolveItem.ParentbaseVM.MedsResolve != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo < CSequentialHelper.GetLastItemSequenceNo(this.oResolveItem.ParentbaseVM.MedsResolve, this.oResolveItem.ParentbaseVM.oTempPrescDisCancelItemVM, this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo))) {
                let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                let iMsgBoxRole: iMessageBox = new iMessageBox();
                iMsgBoxRole.Title = "LORENZO";
                iMsgBoxRole.IconType = MessageBoxType.Information;
                iMsgBoxRole.Height = 160;
                iMsgBoxRole.Width = 340;
                iMsgBoxRole.Message = errorMessage;
                iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                iMsgBoxRole.Show();
                return false;
            }
        }
        else {
            let _IsvalidateField: boolean = false;
            if (this.oResolveItem.FormViewerDetails.BasicDetails.Route != null && this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute.Tag != null && this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains("0") && !String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.Route.Tag.ToString(), this.oResolveItem.FormViewerDetails.BasicDetails.OriginalRoute.Tag.ToString(), StringComparison.InvariantCultureIgnoreCase)) {
                _IsvalidateField = true;
            }
            else if (!_IsvalidateField && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.INTERMITTENT, StringComparison.InvariantCultureIgnoreCase) || String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.PCA, StringComparison.InvariantCultureIgnoreCase))) {
                _IsvalidateField = true;
            }
            else if (!_IsvalidateField && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.OrginalInfusionPeriod) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.CONTINUOUS, StringComparison.InvariantCultureIgnoreCase) && this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0 && this.oResolveItem.ParentbaseVM != null && this.oResolveItem.ParentbaseVM.MedsResolve != null && (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo < CSequentialHelper.GetLastItemSequenceNo(this.oResolveItem.ParentbaseVM.MedsResolve, this.oResolveItem.ParentbaseVM.oTempPrescDisCancelItemVM, this.oResolveItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo))) {
                _IsvalidateField = true;
            }
            if (_IsvalidateField) {
                let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                    Title: "Lorenzo - Manage prescription",
                    Message: Resource.Infusion.AmendRouteInfusionType_Msg,
                    MessageButton: MessageBoxButton.OK,
                    IconType: MessageBoxType.Information,
                    Width: 500,
                    Height: 200
                });
                iMsgBox.Show();
                return false;
            }
        }
    }
    else {
        if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo > 0) {
            let validation = OsValidation.GetOsValidation(this.oResolveItem, false);
            if (validation.IsStatOnceOnlyOrPrn) {
                let errorMessage: string = Resource.MedicationErrors.IsStatOnceOnlyOrPrnBreakError;
                iMessageBox.Show("LORENZO", errorMessage, MessageBoxType.Information, MessageBoxButton.OK);
                return false;
            }
            else if (validation.IsApplianceMedGasSVOrPCA || validation.IsTitrated) {
                let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                let iMsgBoxRole: iMessageBox = new iMessageBox();
                iMsgBoxRole.Title = "LORENZO";
                iMsgBoxRole.IconType = MessageBoxType.Information;
                iMsgBoxRole.Height = 160;
                iMsgBoxRole.Width = 340;
                iMsgBoxRole.Message = errorMessage;
                iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                iMsgBoxRole.Show();
                return false;
            }
            else if (validation.IsInfusion) {
                let errorMessage: string = Resource.MedicationErrors.ChangeOfRouteInSequence;
                iMessageBox.Show("LORENZO", errorMessage, MessageBoxType.Information, MessageBoxButton.OK);
                return false;
            }
            else if (this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType != null && (String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypeCode.PCA, StringComparison.InvariantCultureIgnoreCase)) || this.oResolveItem.FormViewerDetails.BasicDetails.DoseType != null && String.Equals(this.oResolveItem.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE)) {
                let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                let iMsgBoxRole: iMessageBox = new iMessageBox();
                iMsgBoxRole.Title = "LORENZO";
                iMsgBoxRole.IconType = MessageBoxType.Information;
                iMsgBoxRole.Height = 160;
                iMsgBoxRole.Width = 340;
                iMsgBoxRole.Message = errorMessage;
                iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                iMsgBoxRole.Show();
                return false;
            }
            else if (!String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.OldDuration) && String.IsNullOrEmpty(this.oResolveItem.FormViewerDetails.BasicDetails.Duration) && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo > 0 && this.oResolveItem.ParentbaseVM != null && this.oResolveItem.ParentbaseVM.MedsResolve != null && (this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo < CommonSequentialHelper.GetLastItemSequenceNo(this.oResolveItem.ParentbaseVM.MedsResolve, this.oResolveItem.ParentbaseVM.oTempPrescDisCancelItemVM, this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo))) {
                let errorMessage: string = Resource.MedicationErrors.AmendDurationInfType;
                let iMsgBoxRole: iMessageBox = new iMessageBox();
                iMsgBoxRole.Title = "LORENZO";
                iMsgBoxRole.IconType = MessageBoxType.Information;
                iMsgBoxRole.Height = 160;
                iMsgBoxRole.Width = 340;
                iMsgBoxRole.Message = errorMessage;
                iMsgBoxRole.MessageButton = MessageBoxButton.OK;
                iMsgBoxRole.Show();
                    return false;
                }
            }
        }
        return true;
    }
    ShowErrorMesssage(ErrorMsg: string, MsgBoxType: MessageBoxType, MsgBoxButton: MessageBoxButton, MsgBoxTag: Object = null): void {
        let iMsgBox: iMessageBox = new iMessageBox();
        iMsgBox.IconType = MsgBoxType;
        iMsgBox.MessageButton = MsgBoxButton;
        iMsgBox.Message = ErrorMsg;
        if (MsgBoxTag != null)
            iMsgBox.Tag = MsgBoxTag;
        iMsgBox.Show();
        iMsgBox.Closed = (s, e) => { this.TitratedValidationMessageBoxClose(s, e) };
    }
    TitratedValidationMessageBoxClose(sender: Object, e: EventArgs): void {
        if (this.ftbFormViewDetails != null && !String.IsNullOrEmpty(this.ftbFormViewDetails.SelectedKey) && !String.Equals(this.ftbFormViewDetails.SelectedKey, "frmBasic", StringComparison.CurrentCultureIgnoreCase)) {
            this.ftbFormViewDetails.Click("frmBasic", true);
        }
        //Revisit Required
        
        if (this.frmViewBasic != null) {
            // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
    (<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content)).cboTitratedDoseInstruction.Focus();
}

}
//Revisit Required

TitratedValidationMessageBoxYesNo(sender:Object, e:MessageEventArgs): void
    {
        if(this.frmViewBasic != null)
 {
            // this.ContentCtrlMedResolveStepped = ObjectHelper.CreateType<ContentControl>(this.frmViewBasic.FindName("ContentCtrlMedResolveStepped"), ContentControl);
}
let _omedresolvetitrated: medresolvetitrated = ObjectHelper.CreateType<medresolvetitrated>(this.ContentCtrlMedResolveStepped.Content, medresolvetitrated);
if (e.MessageBoxResult == MessageBoxResult.Yes) {
    if (_omedresolvetitrated != null) {
        _omedresolvetitrated.RebindTitrated_HeaderEvent();
        _omedresolvetitrated.RebindTitrated_GridEvent();
        if (this.objfrm != null && this.objfrm.formViewerDetails != null && this.objfrm.formViewerDetails.BasicDetails != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated != null && this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Count > 0) {
            this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.Stardate = this.objfrm.formViewerDetails.BasicDetails.StartDTTM;
            this.objfrm.formViewerDetails.BasicDetails.TitratedDoseDetails.ClearTitratedData();
            this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendDoseClear = true;
        }
    }
}
    else {
        this.objfrm.formViewerDetails.BasicDetails.IsTitratedAmendDoseClear = false;
    }
    _omedresolvetitrated.cboTitratedDoseInstruction.Focus();
    }
    
    CheckIfOmittedSlotExists(): boolean {
        let bRetVal: boolean = true;
        if (!this.OmittedWarningDisplayed && this.oResolveItem != null && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo != null && this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0 && this.oResolveItem.ParentbaseVM != null) {
            let bShowOmitMessage: boolean = false;
            //let lstSeqUpdValues: List<string> = ObjectHelper.CreateObject(new List<string>(), {"Duration","DurationUOM","StartDTTM","StartPrescriptionTime"});
            let lstSeqUpdValues: List<string> = new List<string>(["Duration", "DurationUOM", "StartDTTM", "StartPrescriptionTime"]);
            if (!this.oResolveItem.ParentbaseVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails) && (this.oResolveItem.FormViewerDetails.BasicDetails.IsinDefiniteOmit || (this.oResolveItem.OmittedPresOIDs != null && this.oResolveItem.OmittedPresOIDs.Count > 0 && this.oResolveItem.OmittedPresOIDs.Contains(this.oResolveItem.PrescriptionItemOID)))) {
            bShowOmitMessage = true;
        }
        else if (!this.oResolveItem.ParentbaseVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails) || this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Any(x => lstSeqUpdValues.Contains(x))) {
            bShowOmitMessage = this.oResolveItem.ParentbaseVM.MedsResolve.Any(x => x.FormViewerDetails != null && x.FormViewerDetails.BasicDetails != null && x.FormViewerDetails.BasicDetails.SequenceInfo != null && x.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo == this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo && x.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo > this.oResolveItem.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo && (x.FormViewerDetails.BasicDetails.IsinDefiniteOmit || (!String.IsNullOrEmpty(x.FormViewerDetails.BasicDetails.OmitComments) && x.FormViewerDetails.BasicDetails.OmitComments.length > 0) || (this.oResolveItem.OmittedPresOIDs != null && this.oResolveItem.OmittedPresOIDs.Count > 0 && this.oResolveItem.OmittedPresOIDs.Contains(x.PrescriptionItemOID))));
        }
        if (bShowOmitMessage) {
            let iMsgBox: iMessageBox = new iMessageBox();
            iMsgBox.IconType = MessageBoxType.Information;
            iMsgBox.MessageButton = MessageBoxButton.OK;
            iMsgBox.Title = Resource.MedicationForm.MsgBoxTitleName;
            iMsgBox.Message = Resource.MedicationForm.SequenceOmittedalert;
            iMsgBox.Height = 140;
            iMsgBox.Width = 420;
            iMsgBox.HasCloseButton = true;
            iMsgBox.MessageBoxClose  = (s,e) => { this.OmittedSlotExistsWarning_Close(s,e); } ;
            iMsgBox.Show();
            bRetVal = false;
        }
    }
    else if (!this.OmittedWarningDisplayed && this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.oResolveItem.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0 && this.oResolveItem.ParentbaseVM != null && !this.oResolveItem.ParentbaseVM.GetDurationValueChange(this.oResolveItem.FormViewerDetails.BasicDetails) && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && this.oResolveItem.FormViewerDetails.BasicDetails.IsinDefiniteOmit) {
        let iMsgBox: iMessageBox = new iMessageBox();
        iMsgBox.IconType = MessageBoxType.Information;
        iMsgBox.MessageButton = MessageBoxButton.OK;
        iMsgBox.Title = Resource.MedicationForm.MsgBoxTitleName;
        iMsgBox.Message = Resource.MedicationForm.Omittedalert;
        iMsgBox.Height = 140;
        iMsgBox.Width = 420;
        iMsgBox.HasCloseButton = false;
        // iMsgBox.MessageBoxClose -= OmittedSlotExistsWarning_Close;
            iMsgBox.MessageBoxClose = (s, e) => { this.OmittedSlotExistsWarning_Close(s, e); };
            iMsgBox.Show();
            bRetVal = false;
        }
        return bRetVal;
    }
    OmittedSlotExistsWarning_Close(sender: Object, e: MessageEventArgs): void {
        if (sender != null) {
            let oMsgBox: iMessageBox = (ObjectHelper.CreateType<iMessageBox>(sender, iMessageBox));
            if (oMsgBox != null) {
                // oMsgBox.MessageBoxClose -= OmittedSlotExistsWarning_Close;
            }
        }
this.OmittedWarningDisplayed = true;
        if(e != null && e.MessageBoxResult == MessageBoxResult.OK) {
            if (this.OKClickValidations()) {
                if (this.onDialogClose != null) {
                    this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
                }
            }
        }
    }
    PreviousDueOverdueExistsWarning_Displayed: boolean = false;
    CheckIfAmendedPrevItemHasDueOverdueSlot(): boolean {
        let bRetVal: boolean = true;
        let isContinousOrSingleOrFluid: boolean = false;
        if (!this.PreviousDueOverdueExistsWarning_Displayed) {
            let oResolveBasicItem: BasicDetailsVM = null;
            if (this.oResolveItem != null && this.oResolveItem.FormViewerDetails != null && this.oResolveItem.FormViewerDetails.BasicDetails != null) {
                oResolveBasicItem = this.oResolveItem.FormViewerDetails.BasicDetails;
            if ((oResolveBasicItem.InfusionType == null && oResolveBasicItem.InfusionDetails != null && oResolveBasicItem.InfusionDetails.IsOxygen) || (oResolveBasicItem.InfusionType != null && (String.Equals(InfusionTypeCode.FLUID, oResolveBasicItem.InfusionType.Value, StringComparison.InvariantCultureIgnoreCase) || String.Equals(InfusionTypeCode.CONTINUOUS, oResolveBasicItem.InfusionType.Value, StringComparison.InvariantCultureIgnoreCase) || String.Equals(InfusionTypeCode.SINGLEDOSEVOLUME, oResolveBasicItem.InfusionType.Value, StringComparison.InvariantCultureIgnoreCase) || String.Equals(InfusionTypeCode.PCA, oResolveBasicItem.InfusionType.Value, StringComparison.InvariantCultureIgnoreCase)))) {
                isContinousOrSingleOrFluid = true;
            }
        }
        if (oResolveBasicItem != null && oResolveBasicItem.lstAmendedFlds != null && this.oResolveItem != null && this.oResolveItem.ParentbaseVM != null && !this.oResolveItem.ParentbaseVM.GetDurationValueChange(oResolveBasicItem) && String.Equals(this.oResolveItem.SourcePrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && this.oResolveItem.ActionCode == ActivityTypes.Amend && this.oResolveItem.PrescriptionItemOID > 0 && !isContinousOrSingleOrFluid) {
            let oReq: IPPManagePrescSer.CReqMsgIsPreviousDueOverdueSlotExists = new IPPManagePrescSer.CReqMsgIsPreviousDueOverdueSlotExists();
            oReq.oContextInformation = Common.FillContext();
            oReq.bChkOverdueExistsBC = true;
            oReq.bPastDueSlotsOnlyBC = false;
            oReq.PatientOIDBC = PatientContext.PatientOID;
            oReq.PrescriptionItemOIDBC = this.oResolveItem.PrescriptionItemOID;
            oReq.DuenessThresholdInMinsBC = MedChartData.DuenessThreshold;
            oReq.OverDueThresholdInHrsBC = CConstants.OverdueToNotknownTime - 24;
            let objServiceProxy: IPPManagePrescSer.IPPMAManagePrescriptionWSSoapClient = new IPPManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
            // objServiceProxy.IsPreviousDueOverdueSlotExistsCompleted -= objServiceProxy_IsPreviousDueOverdueSlotExistsCompleted;
            objServiceProxy.IsPreviousDueOverdueSlotExistsCompleted  = (s,e) => { this.objServiceProxy_IsPreviousDueOverdueSlotExistsCompleted(s,e); } ;
            objServiceProxy.IsPreviousDueOverdueSlotExistsAsync(oReq);
            bRetVal = false;
            Busyindicator.SetStatusBusy("CheckIfAmendedPrevItemHasDueOverdueSlot");
        }
            else {
                this.PreviousDueOverdueExistsWarning_Displayed = true;
            }
        }
        return bRetVal;
    }
    objServiceProxy_IsPreviousDueOverdueSlotExistsCompleted(sender: Object, e: IPPManagePrescSer.IsPreviousDueOverdueSlotExistsCompletedEventArgs): void {
        Busyindicator.SetStatusIdle("CheckIfAmendedPrevItemHasDueOverdueSlot");
        if (e != null && e.Error == null && e.Result != null) {
            let oRes: IPPManagePrescSer.CResMsgIsPreviousDueOverdueSlotExists = e.Result;
            if (oRes.IsSlotExists > 0) {
                let iMsgBox: iMessageBox = new iMessageBox();
                iMsgBox.IconType = MessageBoxType.Information;
                iMsgBox.MessageButton = MessageBoxButton.OKCancel;
                iMsgBox.Title = Resource.MedicationForm.MsgBoxTitleName;
                iMsgBox.Message = Resource.MedicationForm.PrevDueOverdueExistsMsg;
                iMsgBox.Height = 170;
                iMsgBox.Width = 600;
                iMsgBox.HasCloseButton = false;
                // iMsgBox.MessageBoxClose -= PreviousDueOverdueExistsWarning_Close;
                iMsgBox.MessageBoxClose  = (s,e) => { this.PreviousDueOverdueExistsWarning_Close(s,e); } ;
                iMsgBox.Show();
            }
            else {
                this.PreviousDueOverdueExistsWarning_Close(this, new MessageEventArgs(MessageBoxResult.OK));
            }
        }
        else {
            this.PreviousDueOverdueExistsWarning_Close(this, new MessageEventArgs(MessageBoxResult.OK));
        }
    }
    PreviousDueOverdueExistsWarning_Close(sender: Object, e: MessageEventArgs): void {
        if (e.MessageBoxResult == MessageBoxResult.OK) {
            this.PreviousDueOverdueExistsWarning_Displayed = true;
            if (this.onDialogClose != null) {
                this.onDialogClose(ObjectHelper.CreateObject(new AppDialogEventargs(), { Content: this, Result: AppDialogResult.Ok, AppChildWindow: super.appDialog }));
            }
        }
 else if(e.MessageBoxResult == MessageBoxResult.Cancel) {
            this.PreviousDueOverdueExistsWarning_Displayed = false;
        }
    }
    
    ngOnDestroy(): void {
        this.medformview_Unloaded({},null);        
        if (this.startPresTimeSubscription != null){
            this.startPresTimeSubscription.unsubscribe();
        }
    }    

}
export class TitratedDoseDaywise {
    public ScheduledDate: DateTime;
    public DoseUomValue: string;
}
export class DefaultBasicDetails {
    public PrescriptionItemOID: number;
    public Frequency: CListItem;
    public DosageForm: CListItem;
    public QuantityUOM: CListItem;
    public Route: CListItem;
    public DoseUOM: CListItem;
    public SupplyInstructionText: CListItem;
    public Site: CListItem;
    public AdminInstruction: CListItem;
    public AdminMethod: CListItem;
    public ProblemIndication: string;
    public PatientProblemCode: string;
}

export class DecisionSupportItems {
    public IdentifyingName: string;
    public IdentifyingOID: number;
    public IdentifyingType: string;
    public ItemType: string;
    public LorenzoID: string;
    public StartDate: DateTime;
    public EndDate: DateTime;
    public PrescriptionType: string;
    public PrescriptionDTTM: DateTime;
    public PrescriptionItemOID: string;
    public ItemsubType: string;
    public MCItem: string;
    public UniqueMCRowID: number;
    public FluidIdentifyingOID: number;
    public FluidItemType: string;
    public FluidLorenzoID: string;
    public FluidIdentifyingname: string;
    public FluidPrescribableItemListOID: number;
    public PrescriptionItemNumber: number;
    public GenericDrugLorenzoID: string;
    public Basedrugname: string;
}


    export enum EnumVals {
        CC_EXPJAN = 1,
        CC_EXPFEB = 2,
        CC_EXPMAR = 3,
        CC_EXPAPR = 4,
        CC_EXPMAY = 5,
        CC_EXPJUNE = 6,
        CC_EXPJULY = 7,
        CC_EXPAUG = 8,
        CC_EXPSEP = 9,
        CC_EXPOCT = 10,
        CC_EXPNOV = 11,
        CC_EXPDEC = 12
    }

