import { Component, OnInit, EventEmitter } from '@angular/core';
import {
  StringBuilder,
  ProfileFactoryType,
  ContextManager,
  Convert,
  AppActivity,
  ProcessRTE,
  SLQueryCollection,
  iBusyIndicator,
  ScriptObject,
} from 'epma-platform/services';
import {
  Level,
  ProfileContext,
  OnProfileResult,
  IProfileProp,
  Byte,
  Decimal,
  decimal,
  Double,
  Float,
  Int64,
  long,
  Long,
  StringComparison,
  AppDialogEventargs,
  AppDialogResult,
  DelegateArgs,
  DialogComponentArgs,
  WindowButtonType,
  ObservableCollection,
  Visibility,
  CListItem,
  List,
  IEnumerable,
  CultureInfo,
  double,
  Enum,
  ChildWindow,
  RTEEventargs,
  RelayCommand,
  HtmlPage,
  Random,
  StringSplitOptions
} from 'epma-platform/models';
import { AppDialog, FrameworkElement, Image } from 'epma-platform/controls';
import { HelperService } from 'epma-platform/soapclient';
import 'epma-platform/stringextension';
import DateTime, { DateTimeStyles } from 'epma-platform/DateTime';
import TimeSpan from 'epma-platform/TimeSpan';
import {
  MessageEventArgs,
  MessageBoxResult,
  iMessageBox,
  MessageBoxButton,
  MessageBoxType,
  MessageBoxDelegate,
} from 'epma-platform/services';
import { ObjectHelper as Helper, ObjectHelper } from 'epma-platform/helper';
import { Dictionary } from 'epma-platform/dictionary';
import {
  ConceptCodeData,
  ProfileData,
  UserPermissions,
  WarningConceptCode,
} from '../utilities/profiledata';
import {
  AdditionalItemTypes,
  CAActivity,
  CConstants,
  ConditionalDoseConstants,
  ConstDurationUOM,
  ControType,
  Conversion,
  DoseTypeCode,
  DRCDoseTypes,
  InfusionTypesCode,
  InfusionVolume,
  MedImage,
  MedImages,
  OtherDRCErrorCodes,
  PrescribeSource,
  PrescriptionItemStatusCodes,
  PrescriptionTypes,
  ValueDomain,
} from '../utilities/constants';
import {
  ActivityTypes,
  ConflictIcons,
  DoseCalculation,
  FormDefaults,
  ReplacemntItem,
} from '../model/common';
import {
  DrugItemSubTypeCode,
  InfusionTypeCode,
} from 'src/app/lorappmedicationcommonbb/utilities/constants';
import { Common } from '../utilities/common';
import {
  AppContextInfo,
  AppSessionInfo,
  ClerkFormViewDeftBehaviour,
  ContextInfo,
  PatientContext,
} from 'src/app/lorappcommonbb/utilities/globalvariable';
import {
  CommonFlags,
  DomainValuesForTechValidate,
  FormviewerComboValues,
  FormviewerCommonData,
  QueryStringInfo,
  WebServiceURL,
} from '../utilities/globalvariable';
import { PrescriptionHelper } from '../utilities/prescriptionhelper';
import { ClonableViewModelBase } from 'src/app/lorappmedicationcommonbb/model/cloneviewmodel';
import {
  IViewModelBase,
  ViewModelBase,
} from 'src/app/lorappcommonbb/viewmodelbase';
import { Busyindicator } from 'src/app/lorappcommonbb/busyindicator';
import {
  CommonDomainValues,
  MedChartData,
} from 'src/app/lorappmedicationcommonbb/utilities/globalvariable';
import {
  CommonBB,
  CommonVariables,
} from 'src/app/lorappcommonbb/utilities/common';
import { FormViewerVM } from './formviewervm';
import { PresItemDRCVM } from './PresItemDRCVM';
import { GPConnectItemVM } from './GPConnectItemVM';
import {
  LockedUsersDetails,
  MedicationCommonBB,
} from 'src/app/lorappmedicationcommonbb/utilities/medicationcommonbb';
import {
  DCOverridereasonConceptCodes,
  DCReqDoseSecondUOMConceptCodes,
  DRCErrorCodeConceptCodeData,
  InfHumdificationConceptCodeData,
  InfusionTypeConceptCodeData,
  MedicationCommonConceptCodeData,
  MedicationCommonProfileData,
  ReviewAfterUOMList,
  TitratedDoseInstructions,
} from 'src/app/lorappmedicationcommonbb/utilities/profiledata';
import {
  ActualClerkingValues,
  BasicDetailsVM,
  IndiactionProcessDetails,
  InfusionVM,
  OriginalValues,
  SequenceDetail,
} from './BasicDetailsVM';
import { DoseCalcDefault } from 'src/app/lorappmedicationcommonbb/viewmodel/DoseCalcVM';
import { ConflictsVM } from 'src/app/lorappmedicationcommonbb/viewmodel/conflictsvm';
import { AdminstrativeTimesVM } from 'src/app/lorappmedicationcommonbb/viewmodel/adminstrativetimesvm';
import { MulticomponentChildVM, MulticomponentVM } from './MulticomponentVM';
import { MedicationPrescribeVM } from '../ca/prescribe/medicationprescribevm';
import { PrescriptionLineItemVM } from 'src/app/lorappmedicationcommonbb/utilities/lineitemconstructor';
import { IPPMABaseVM } from './ippmabasevm';
import { AdminScheduleTime, AdminScheduleTimeVM } from './adminscheduletimevm';
import { CustomTechValidatedItem } from './customtechvalidateditem';
import { TechValidateVM } from './TechValidateVM';
import { MultipleDoseDetail } from './MultipleDoseDetail';
import {
  TitratedDoseVM,
  TitratedScheduleDetails,
} from './TitratedDoseDetailsVM';
import { ReplacementDrugVM } from './ReplacementDrugVM';
import { DRCConflictDetail, MedDRCVM } from './meddrcvm';
import { MedBrandConstraintsVM } from './medbrandconstraintsvm';
import { RecordAdminVM } from './RecordAdminVM';
import {
  AppChildDialogAction,
  DripRateCommon,
  DripRateParams,
  MCommonBB,
} from 'src/app/lorappmedicationcommonbb/utilities/common';
import { Resource } from 'src/app/lorappmanageprescriptionbbui/resource';
import {
  DrugItemBasicData,
  DrugProperty,
  ObjectInfo,
} from 'src/app/shared/epma-platform/soap-client/ManagePrescriptionWS';
import {
  DoseDetailsdata,
  GrdAdminstrativeTimesCols,
  ScheduleDetailsCols,
} from 'src/app/lorappmedicationcommonbb/viewmodel/prescriptionitemdetailsvm';
//import { ConditionalDoseRegime, CReqMsgGetIPPPrescriptionDetails, CReqMsgGetOmittedItemsList, CResMsgGetAdministrationTimes, CResMsgGetIPPPrescriptionDetails, CResMsgGetOmittedItemsList, CResMsgIsDrugAdminStarted, DoseRegime, DrugAdminStatus, FrequencyDetails, GetIPPPrescriptionDetailsCompletedEventArgs, GetOmittedItemsListCompletedEventArgs, IPPDoseRegime, IPPFrequency, IPPMAManagePrescriptionWSSoapClient, IPPPresItemBasicProperties, IPPPresItemBasicPropertiesView, IPPScheduledetails, PrescriptionItemDetails, UOM } from 'src/app/shared/epma-platform/soap-client/IPPMAManagePrescriptionWS';
import * as IPPMAManagePrescSer from '../../shared/epma-platform/soap-client/IPPMAManagePrescriptionWS';
import * as ManagePrescSer from '../../shared/epma-platform/soap-client/ManagePrescriptionWS';
import { ConditionalDose } from '../model/conditionaldose';
import { FormViewerDefaultsVM } from './formviewerdefaultsvm';
import { ConditionalDosingVM } from './conditionaldosevm';
import { CommonSequentialHelper } from '../utilities/CommonSequentialHelper';
import { prescribedrugs } from '../resource/prescribedrugs.designer';
import { PrescriptionItemAssociations } from './ordersetsecmezzanineVM';
import { TechvalidateCAVM } from './TechvalidateCAVM';
import { ScheduleDetailsSteppedVM } from 'src/app/lorappmedicationcommonbb/viewmodel/scheduledetailsvm';
import { CConstants as medcommonbbconstant } from 'src/app/lorappmedicationcommonbb/utilities/constants';
import { DoseCalculator } from 'src/app/lorappmedicationcommonbb/resource/dosecalculator.designer';
import { DripRateCalcVM } from 'src/app/lorappmedicationcommonbb/viewmodel/dripratecalcvm';
import { DrugData } from '../model/drugdata';
import { CSequentialHelper } from '../utilities/CSequentialHelper';
import * as Application from 'src/app/lorappcommonbb/amshelper';
import { Environment } from '../../product/shared/models/Common';
import {
  EventArgs,
  MouseButtonEventArgs,
  Uri,
  UriKind,
} from 'src/app/shared/epma-platform/controls/Control';
import {
  CMultiComponentItem,
  IPPMAPrescribableDefnWSSoapClient,
  IsAnyDrugContainGivenIngredientCompletedEventArgs,
  ObservationResult,
  InfusionFluidDetails,
  CReqMsgIsAnyDrugContainGivenIngredient,
  CResMsgIsAnyDrugContainGivenIngredient,
} from 'src/app/shared/epma-platform/soap-client/IPPMAPrescribableDefnWS';
import { NonFormularyVM } from './NonFormularyVM';
import {
  CResMsgGetValuesByDomains,
  CValuesetTerm,
  GetValuesByDomainsCompletedEventArgs,
} from 'src/app/shared/epma-platform/soap-client/CReferenceWS';
import {
  CReqMsgGetConditionalDoseRegime,
  CResMsgGetConditionalDoseRegime,
  GetConditionalDoseRegimeCompletedEventArgs,
  MedicationAdministrationWSSoapClient,
} from 'src/app/shared/epma-platform/soap-client/MedicationAdministrationWS';
import { CTreeListItem } from 'src/app/shared/epma-platform/controls-model/treeView.model';
import { DecisionSupportItems } from '../view/medformviewer';
import { IFormatProvider } from 'src/app/shared/epma-platform/models/eppma-common-types';
import 'epma-platform/booleanextension';
import 'epma-platform/numberextension';
import 'epma-platform/stringextension';
import {iMath} from 'epma-platform/mathextension';
import 'epma-platform/arrayextension';
import { medNonFormulary } from '../view/mednonformulary';
import { medbrandconstraintschild } from '../view/medbrandconstraintschild';
import { ListItem } from '@progress/kendo-angular-dateinputs/timepicker/models/list-item.interface';
import { frmInfusionratecalculator } from '../view/frminfusionratecalculator';
import { GreaterOrEqualToFilterOperatorComponent } from '@progress/kendo-angular-grid';
import { greaterOrEqualIcon } from '@progress/kendo-svg-icons';
import { MedSequentialPrescription } from '../view/medsequentialprescription';
import { enmMedSearchOptions, medfluidSearch } from 'src/app/lorappmedicationcommonbb/child/medfluidsearch';
import { MedDoseDetails } from 'src/app/lorappmedicationcommonbb/view/meddosedetails';
import { GridExtension } from 'src/app/shared/epma-platform/controls/epma-grid-helpers/grid-extension';
import { DisplayOtherInformationLineItemPipe1, DisplayPrescriptionLineItemPipe1, InfoIconPipe } from 'src/app/product/shared/pipes/medicationconverters.pipe';

export class PrescriptionItemVM
  extends ViewModelBase
  implements IViewModelBase
{
  // To identify the Dynamic Form
  public IsDynamicForm : boolean = false;
  public RecordadminSetTimeBoxMode : boolean = false;
  // To identify the mode and accordingly call the pipe evaluation in RHS.
  mode = 'new';
  MedLineDisplay;
  MedOtherDisplay1;
  MedOtherDisplay;
  InfoIconKey;
  ChildGridExtension = new GridExtension();
  SelectedChildGridIndex: number[] = [];
  private lstOmittedPresOIDs: ObservableCollection<number>;
  public get OmittedPresOIDs(): ObservableCollection<number> {
    return this.lstOmittedPresOIDs;
  }
  public set OmittedPresOIDs(value: ObservableCollection<number>) {
    if (!Helper.ReferenceEquals(this.lstOmittedPresOIDs, value)) {
      this.lstOmittedPresOIDs = value;
    }
  }
  private _oDoseCalcDefault: DoseCalcDefault;
  public get oDoseCalcDefault(): DoseCalcDefault {
    return this._oDoseCalcDefault;
  }
  public set oDoseCalcDefault(value: DoseCalcDefault) {
    if (this._oDoseCalcDefault != value) {
      this._oDoseCalcDefault = value;
      //NotifyPropertyChanged("oDoseCalcDefault");
    }
  }
  private _IsDosCalciReOrderShowFormviewerRequired: boolean = false;
  public get IsDosCalciReOrderShowFormviewerRequired(): boolean {
    return this._IsDosCalciReOrderShowFormviewerRequired;
  }
  public set IsDosCalciReOrderShowFormviewerRequired(value: boolean) {
    if (this._IsDosCalciReOrderShowFormviewerRequired != value) {
      this._IsDosCalciReOrderShowFormviewerRequired = value;
    }
  }
  public isChangeDoseExistInSV: boolean = false;
  public isNew:boolean = false;
  public objMulti: MulticomponentChildVM;
  public oGridAdd: ObservableCollection<ConflictsVM>;
  oAdminTimesVM: AdminstrativeTimesVM;
  Index: number = 0;
  public sPatAllergyOIDs: string;
  private prescriptionItem: string;
  private _prescriptionDTTM: DateTime = DateTime.MinValue;
  public EventWrapValueTabChange : string;
  private otherInformation: string;
  private prescriptionOID: number = 0;
  private prescriptionItemOID: number = 0;
  private prescribableItemOID: number = 0;
  private _PrescribableItemDetailOID: number = 0;
  private _ParentReorderItemOID: number = 0;
  private _OrderSetGroupID: string;
  private _OrderSetLoreznoID: string;
  private _DisplayOrder: number = 0;
  private encounteroid: number = 0;
  private isFormViewDataLoaded: boolean = false;
  public _itemlist: string;
  public _MCuptoIdentifyingoid: number = 0;
  public _MCuptoIdentifyingtype: string;
  public _nonFormularynames: string;
  private actionCode: ActivityTypes = ActivityTypes.Prescribe;
  private sourcePrescriptionType: string;
  private sourcePrescriptionOid: number = 0;
  private sourceEncounter: number = 0;
  private parentreorderType: string;
  private sourcePrevEncPrescriptionOid: number = 0;
  public formViewerDetails: FormViewerVM;
  private _reorderImage: string = MedImage.GetPath(MedImages.SelectionIcon);
  private isPGD: string;
  private reasonForHold: ObservableCollection<CListItem>;
  private _isReoderIconEnable: boolean = false;
  private _isProcessinIconEnable: boolean = true;
  private isGridenable: boolean = false;
  private reconcileReason: ObservableCollection<CListItem>;
  private _reconcileComments: string;
  private _ReconcileCommentsText: string = 'Enter Comments';
  private _isProhibitedRoute: boolean = false;
  private _isDeactivate: string;
  private _isNonformulary: string;
  private _operationMode: string;
  private _focusControl: string;
  private isFormViewerDisable: boolean = false;
  private formularynote: string;
  private _drugPropertynote: string;
  public IsTechValidateMandatory: boolean = false;
  public IsFormviewTechValtabMandatory: boolean = false;
  private _IsConflictsExists: boolean = false;
  private _HIIsAcknowledged: string;
  private _HIWarBhTyp: string;
  private _ReorderItemOID: number = 0;
  private _AlreadyPrescribedItemOID: number = 0;
  private _PresMultiCompitemOID: number = 0;
  private sourcePresOid: number = 0;
  private _IsTechValidate: boolean = false;
  public IsMciChildSelected1: boolean = false;
  public UniqueMCRowId: number = 0;
  public IsFRMTecVal: boolean = false;
  oDoseDetails: ConditionalDose = null;
  // nDoseCnt: number = 0;
  ConddLDose: number = 0;
  ConddUDose: number = 0;
  lnDoseUoMOID: number = 0;
  public IsexistAuthoriseOID: string = String.Empty;
  public oVM: MedicationPrescribeVM;
  public objItems: ObservableCollection<PrescriptionItemVM>;
  private dicProductType: Dictionary<string, string>;
  private _isFormCancelled: boolean = false;
  lstDoseRegime: ObservableCollection<IPPMAManagePrescSer.DoseRegime>;
   oMedBrandChild: medbrandconstraintschild;
  private oAppDialogWindow: ChildWindow;
   omedNonFormulary: medNonFormulary;
  private _noRecordsText: string = 'Loading...';
  public oDefaultRoute: ObservableCollection<CListItem>;
  public oDefaultFreq: Object;
  public oDefaultMFreq: Object;
  public oDefaultNFreq: Object;
  private TechnicalvalidateupdateField: boolean = false;
  //public delegate void DlgtOnSelPrescItemChanged(PrescriptionItemVM oPrescItemVM);
  public OnSelectedMciPresItmChldChanged: Function;
  private _SelectedMciPresItemChld: PrescriptionItemVM;
  public bFlag: boolean = true;
  public isnewmedschecked: boolean = false;
  public bbrandoldvalue: boolean = true;
  public isTechVldLod: boolean = false;
  public bselectprodoldvalue: boolean = false;
  public MCnonformularycheck: boolean = true;
  public bChildSupplyDispFirstLoad: boolean = true;
  public bCVIntialLoad: boolean = true;
  public bFormViewerLoadOnCVUnCheck: boolean = false;
  public bCVFlagSetThroughCode: boolean = false;
  sMandMsgChck: string = String.Empty;
  public sOriginalValue: string = String.Empty;
  public sOriginalType: string = String.Empty;
  public IsPrescriptionItemVMLoading: boolean = false;
  public IsFillGetPresItemDetail: boolean = false;
  public IsFrequencyLoadingForGetpresItemDetails: boolean = false;
  public oPrescriptionLineItemVM: PrescriptionLineItemVM;
  //public delegate void DRCConflictsDelegate();
  public DRCConflictsDelegateCompleted: Function;
  private sValue: string = String.Empty;
  public isTechVldMsg: boolean = false;
  lstConditionalDoseRegime: ObservableCollection<IPPMAManagePrescSer.ConditionalDoseRegime>;
  lstTitratedDoseRegime: ObservableCollection<IPPMAManagePrescSer.TitratedDoseRegime>;
  /*[System.Xml.Serialization.XmlIgnoreAttribute]*/
  public oDoseRegime: ObservableCollection<IPPMAManagePrescSer.DoseRegime>;
  //public delegate void IsDeactivateCtrlFocusChange(string CtrlName);
  public IsDeactivateCtrlFocusChangedEvent: Function;
  public ParentbaseVM: IPPMABaseVM;
  item: string = String.Empty;
  sQuantity: string = String.Empty;
  sUOM: string = String.Empty;
  public IsEmptyDose: boolean = false;
  public DripRate: string;
  public ReasonForMedClerkIsMandatory: boolean = false;
  public TechValformularycheck: boolean = true;
  public bDoseUOMLoad: boolean = false;
  public CurrentActivityCode: ActivityTypes;
  public MCIGridchange: boolean = false;
  oSchedule: AdminScheduleTime;
  public bConflicttabloaded: boolean = false;
  public bDRCConflicttabloaded: boolean = false;
  public bDRCConflictOkVallidation: boolean = false;
  public bDRCConflictGeToAddtoResolve: boolean = false;
  public IsclinicallyVerifyAddSupplylink: boolean = false;
  public objDoseFormulaDef: DoseFormulaDef;
  public bDRCMandatoryDone: boolean = false;
  public bSourceTitratedDoseType: boolean = false;
  public ePrescribeSource: PrescribeSource;
  public IsParacetamolIngredient: boolean = null;
  public IsParacetamolAdministered: boolean = null;
  //public delegate void TriggerParacetamolWarning(bool bDisplayWarning);
  public TriggerParacetamolWarningEvent: Function;
  //public delegate void RouteorFormpreschange();
  public RouteorFormchangePresEvent: Function;
  public ordersetItem: PrescriptionItemAssociations;
  private _IsConflictDisabled: boolean = false;
  public get IsConflictDisabled(): boolean {
    return this._IsConflictDisabled;
  }
  public set IsConflictDisabled(value: boolean) {
    if (this._IsConflictDisabled != value) {
      this._IsConflictDisabled = value;
      //NotifyPropertyChanged("IsConflictDisabled");
    }
  }
  private _bAvoidNextSupplyFirsttime: boolean = true;
  public get bAvoidNextSupplyFirsttime(): boolean {
    return this._bAvoidNextSupplyFirsttime;
  }
  public set bAvoidNextSupplyFirsttime(value: boolean) {
    if (this._bAvoidNextSupplyFirsttime != value) {
      this._bAvoidNextSupplyFirsttime = value;
      //NotifyPropertyChanged("bAvoidNextSupplyFirsttime");
    }
  }
  private _MedDispRequestPending: boolean = false;
  public get MedDispRequestPending(): boolean {
    return this._MedDispRequestPending;
  }
  public set MedDispRequestPending(value: boolean) {
    if (this._MedDispRequestPending != value) {
      this._MedDispRequestPending = value;
      //NotifyPropertyChanged("MedDispRequestPending");
    }
  }
  public _ImageConflicktClicked: Image;
  public _ImageFormviewerClicked: Image;
  public _ImageSteppedDoseClicked: Image;
  public _ImageReviewIconClicked: Image;
  public _ImageWithoutNameClicked: Image;
  public _ImageConfictIconClickedFromCV: Image;
  //public delegate void MultiRouteChange();
  public MultiRouteChangeEvent: Function;
  private objGetResolveDetail: IPPMAManagePrescSer.CResMsgGetResolveDetail;
  private NonFormularyCheckNote: string = String.Empty;
  public canLuanchProdOpt: boolean = false;
  public PreviousOperationMode: string = String.Empty;

  private _IsFormViewer_Loaded_Event_Completed : boolean = false;
  public get IsFormViewer_Loaded_Event_Completed(): boolean {
    return this._IsFormViewer_Loaded_Event_Completed;
  }
  public set IsFormViewer_Loaded_Event_Completed(value: boolean) {
    this._IsFormViewer_Loaded_Event_Completed = value;
    //NotifyPropertyChanged("IsMCIComponent");
  }
  //public IsFormViewer_Loaded_Event_Completed: boolean = false;
  public MedLineDisplayText: string = String.Empty;
  public FluidPrescribableItemListOID: number = 0;
  public LoadParentSupplyDetailsForFluid: boolean = false;
  public IsFormViewerFluidItem: boolean = false;
  public IsParacetamolAdministeredMsgDisplayed: boolean = false;
  public IsProdAvailForChild: boolean = false;
  public FormularyOID: number = 0;
  public IsCalledFromSI: boolean = false;
  public FormviewerLoadedEvent = new EventEmitter();
   public SubFormLoadedEvent = new EventEmitter();
  private _IsMCIComponent: boolean = false;
  public get IsMCIComponent(): boolean {
    return this._IsMCIComponent;
  }
  public set IsMCIComponent(value: boolean) {
    this._IsMCIComponent = value;
    //NotifyPropertyChanged("IsMCIComponent");
  }
  private _IsCallForFluid: boolean = false;
  public get IsCallForFluid(): boolean {
    return this._IsCallForFluid;
  }
  public set IsCallForFluid(value: boolean) {
    this._IsCallForFluid = value;
    //NotifyPropertyChanged("IsCallForFluid");
  }
  public get IsReorderAndEliminateElapsedDoses(): boolean {
    return (
      this.ActionCode == ActivityTypes.Reorder &&
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.CurrentCultureIgnoreCase
      ) ||
        (String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.CurrentCultureIgnoreCase
        ) &&
          !(
            PatientContext.ClerkFormViewDefaultBehavior ==
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
          )) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Leave,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Outpatient,
          StringComparison.CurrentCultureIgnoreCase
        ))
    );
  }
  public IsFormViewDataLoadedAfterGetPresItemDtls: boolean = false;
  public GroupHeaderName: string;
  public get Technicalvalidateupdate(): boolean {
    return this.TechnicalvalidateupdateField;
  }
  public set Technicalvalidateupdate(value: boolean) {
    if (this.TechnicalvalidateupdateField.Equals(value) != true) {
      this.TechnicalvalidateupdateField = value;
      //NotifyPropertyChanged("Technicalvalidateupdate");
    }
  }
  private _IsCriticalMed: boolean = false;
  public get IsCriticalMed(): boolean {
    return this._IsCriticalMed;
  }
  public set IsCriticalMed(value: boolean) {
    if (this._IsCriticalMed != value) {
      this._IsCriticalMed = value;
      //NotifyPropertyChanged("IsCriticalMed");
    }
  }
  private _isAdhocitem: boolean = false;
  public get isAdhocitem(): boolean {
    return this._isAdhocitem;
  }
  public set isAdhocitem(value: boolean) {
    if (this._isAdhocitem != value) {
      this._isAdhocitem = value;
      //NotifyPropertyChanged("isAdhocitem");
    }
  }
  private _bIsReprescribe: boolean = false;
  public get bIsReprescribe(): boolean {
    return this._bIsReprescribe;
  }
  public set bIsReprescribe(value: boolean) {
    this._bIsReprescribe = value;
    //NotifyPropertyChanged("bIsReprescribe");
  }
  private _IsAllowedToPerform: boolean = false;
  public get IsAllowedToPerform(): boolean {
    return this._IsAllowedToPerform;
  }
  public set IsAllowedToPerform(value: boolean) {
    if (this._IsAllowedToPerform != value) {
      this._IsAllowedToPerform = value;
      //super.NotifyPropertyChanged("IsAllowedToPerform");
    }
  }
  private _isDiscontinueCompletedItem: boolean = false;
  public get isDiscontinueCompletedItem(): boolean {
    return this._isDiscontinueCompletedItem;
  }
  public set isDiscontinueCompletedItem(value: boolean) {
    if (this._isDiscontinueCompletedItem != value) {
      this._isDiscontinueCompletedItem = value;
      //NotifyPropertyChanged("isDiscontinueCompletedItem");
    }
  }
  private _IsDoseCalcInfo: boolean = false;
  public get IsDoseCalcInfo(): boolean {
    return this._IsDoseCalcInfo;
  }
  public set IsDoseCalcInfo(value: boolean) {
    if (this._IsDoseCalcInfo != value) {
      this._IsDoseCalcInfo = value;
      //NotifyPropertyChanged("DoseCalcInfo");
    }
  }
  private _bOtherAuthorise: boolean = false;
  //public delegate void AuthoriseTVDisableDelegate(string sIsauthorise);
  public AuthoriseTVDisableEvent: Function;
  //public delegate void AuthoriseTVMCIDisableDelegate(string sIsauthorise);
  public AuthoriseTVMCIDisableEvent: Function;
  private _IsFluidFreetextClear: boolean = false;
  public get IsFluidFreetextClear(): boolean {
    return this._IsFluidFreetextClear;
  }
  public set IsFluidFreetextClear(value: boolean) {
    if (this._IsFluidFreetextClear != value) {
      this._IsFluidFreetextClear = value;
      if (
        this._IsFluidFreetextClear &&
        !this.FormViewerDetails.BasicDetails.IsAuthorise
      ) {
        let Isauthorise: string = this.FormViewerDetails.BasicDetails
          .IsAuthorise
          ? '1'
          : String.Empty;
        if (this.AuthoriseTVDisableEvent != null)
          this.AuthoriseTVDisableEvent(Isauthorise);
      }
    }
  }
  private _AmendModeDisableTV: boolean = false;
  public get AmendModeDisableTV(): boolean {
    return this._AmendModeDisableTV;
  }
  public set AmendModeDisableTV(value: boolean) {
    this._AmendModeDisableTV = value;
  }
  private _iSSupplyrequest: ObservableCollection<CListItem>;
  public get iSSupplyrequest(): ObservableCollection<CListItem> {
    return this._iSSupplyrequest;
  }
  public set iSSupplyrequest(value: ObservableCollection<CListItem>) {
    if (!Helper.ReferenceEquals(this._iSSupplyrequest, value)) {
      this._iSSupplyrequest = value;
      //NotifyPropertyChanged("iSSupplyrequest");
    }
  }
  private _SelectedSupplyreq: CListItem;
  public get SelectedSupplyreq(): CListItem {
    return this._SelectedSupplyreq;
  }
  public set SelectedSupplyreq(value: CListItem) {
    if (value != null && this.iSSupplyrequest != null) {
      let ComboSource: CListItem = new CListItem();
      ComboSource = this.iSSupplyrequest
        .Where((x) => x.Value == value.Value)
        .FirstOrDefault();
      if (ComboSource != null && value != ComboSource) {
        value = ComboSource;
      }
    }
    if (this._SelectedSupplyreq != value) {
      if (value == null) {
        value = this._SelectedSupplyreq;
      } else {
        this._SelectedSupplyreq = value;
      }
      //NotifyPropertyChanged("SelectedSupplyreq");
      if (
        this._SelectedSupplyreq != null &&
        this._SelectedSupplyreq.DisplayText != null
      )
        this.SupplyreqDisplay = this._SelectedSupplyreq.DisplayText;
      if (
        this._SelectedSupplyreq != null &&
        !String.Equals(
          this._SelectedSupplyreq.Value,
          Resource.TechValidate.Empty
        )
      ) {
        this.EditedGridID = 1;
        if (
          !String.IsNullOrEmpty(this.ItemSubType) &&
          String.Equals(
            this.ItemSubType,
            'CC_MULCMPNTITM',
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          if (
            this.PresTechValidatedItemsChild != null &&
            this.PresTechValidatedItemsChild.Count > 0
          ) {
            this.PresTechValidatedItemsChild.forEach((child) => {
              child.EnableChildMCIComp = false;
            });
          }
        } else if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem != null
        ) {
          this.FormViewerDetails.BasicDetails.ParentMCIItem.EnableParentMCIItem =
            false;
          this.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild.forEach(
            (child) => {
              if (
                child.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0 ||
                (child.FormViewerDetails.TechValidateDetails != null &&
                  child.FormViewerDetails.TechValidateDetails
                    .TechValidatedItems != null &&
                  child.FormViewerDetails.TechValidateDetails.TechValidatedItems
                    .Count > 0 &&
                  child.FormViewerDetails.TechValidateDetails
                    .TechValidatedItems[0] != null &&
                  child.FormViewerDetails.TechValidateDetails
                    .TechValidatedItems[0].PrescriptionItemTechOID > 0)
              ) {
                child.FormViewerDetails.BasicDetails.TecValOperationMode = 'M';
              } else {
                child.FormViewerDetails.BasicDetails.TecValOperationMode = 'N';
              }
            }
          );
        }
      }
      if (
        this._SelectedSupplyreq != null &&
        String.Equals(
          this._SelectedSupplyreq.Value,
          Resource.TechValidate.Empty
        )
      ) {
        if (
          String.Equals(
            this.ItemSubType,
            'CC_MULCMPNTITM',
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Supplycomments
          ) &&
          this.FormViewerDetails.BasicDetails.NextSupplyDate ==
            DateTime.MinValue &&
          (this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction ==
            null ||
            (this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction !=
              null &&
              this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                .Count == 0))
        ) {
          if (
            this.PresTechValidatedItemsChild != null &&
            this.PresTechValidatedItemsChild.Count > 0
          ) {
            this.PresTechValidatedItemsChild.forEach((child) => {
              child.EnableChildMCIComp = true;
            });
          }
        } else if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.ParentMCIItem.ItemSubType
          ) &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.ParentMCIItem.ItemSubType,
            'CC_MULCMPNTITM',
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem
            .PresTechValidatedItemsChild != null &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem
            .PresTechValidatedItemsChild.Count > 0 &&
          ((this.FormViewerDetails.BasicDetails.ParentMCIItem
            .FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails.ParentMCIItem.FormViewerDetails
              .MulticomponentDetails != null &&
            this.FormViewerDetails.BasicDetails.ParentMCIItem.FormViewerDetails
              .MulticomponentDetails.oMCItemBasicInfo != null &&
            this.FormViewerDetails.BasicDetails.ParentMCIItem.FormViewerDetails
              .MulticomponentDetails.oMCItemBasicInfo.Count > 0 &&
            this.FormViewerDetails.BasicDetails.ParentMCIItem.FormViewerDetails
              .MulticomponentDetails.oMCItemBasicInfo.Count ==
              this.FormViewerDetails.BasicDetails.ParentMCIItem
                .PresTechValidatedItemsChild.Count) ||
            (!String.IsNullOrEmpty(ContextInfo.MenuCode) &&
              String.Equals(
                ContextInfo.MenuCode,
                CConstants.TechnicallyValidateMenuCode,
                StringComparison.InvariantCultureIgnoreCase
              ))) &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild.All(
            (x) =>
              !String.IsNullOrEmpty(x.supToolTipDisText) &&
              x.supToolTipDisText.Equals(Resource.TechValidate.AddsupinstChild)
          ) &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild.All(
            (x) =>
              x.SelectedSupplyreq != null &&
              x.SelectedSupplyreq.Value != null &&
              x.SelectedSupplyreq.Value.Equals(Resource.TechValidate.Empty)
          ) &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild.All(
            (x) =>
              x.FormViewerDetails != null &&
              x.FormViewerDetails.BasicDetails != null &&
              String.IsNullOrEmpty(
                x.FormViewerDetails.BasicDetails.Supplycomments
              )
          ) &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild.All(
            (x) =>
              (x.FormViewerDetails != null &&
                x.FormViewerDetails.BasicDetails != null &&
                x.FormViewerDetails.BasicDetails.SelectedsupplyInstruction ==
                  null) ||
              x.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                .Count == 0
          )
        ) {
          this.FormViewerDetails.BasicDetails.ParentMCIItem.EnableParentMCIItem =
            true;
        }
      }
    }
  }
  private _SupplyreqDisplay: string;
  public get SupplyreqDisplay(): string {
    return this._SupplyreqDisplay;
  }
  public set SupplyreqDisplay(value: string) {
    if (this._SupplyreqDisplay != value) {
      this._SupplyreqDisplay = value;
      if (
        !String.Equals(
          this._SupplyreqDisplay,
          '< Select >',
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        (String.Equals(
          this._SupplyreqDisplay,
          Resource.TechValidate.Sup,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            this._SupplyreqDisplay,
            Resource.TechValidate.DontSup,
            StringComparison.InvariantCultureIgnoreCase
          ))
      ) {
        this.FormViewerDetails.BasicDetails.IsenableModificationcomments = true;
        this.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = true;
        if (
          !this.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
            'SupplyStatus'
          )
        ) {
          this.FormViewerDetails.BasicDetails.lstAmendedFlds.Add(
            'SupplyStatus'
          );
          if (
            this.FormViewerDetails.BasicDetails.bIsAmend &&
            !this.FormViewerDetails.BasicDetails.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.FormViewerDetails.BasicDetails.IsenableRSNFORMOD
          ) {
            this.FormViewerDetails.BasicDetails.DoChangesForAmend();
          }
        }
      }
      //NotifyPropertyChanged("SupplyreqDisplay");
    }
  }
  private _EnableParentMCIItem: boolean = true;
  public get EnableParentMCIItem(): boolean {
    return this._EnableParentMCIItem;
  }
  public set EnableParentMCIItem(value: boolean) {
    if (this._EnableParentMCIItem != value) {
      if (!value) {
        if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null
        ) {
          if (this.iSSupplyrequest != null) {
            let objselectedval: CListItem = this.iSSupplyrequest
              .Where(
                (x) =>
                  !String.IsNullOrEmpty(x.Value) &&
                  String.Equals(x.Value, Resource.TechValidate.Empty)
              )
              .FirstOrDefault();
            this.SelectedSupplyreq = objselectedval;
          }
          this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction = null;
          this.FormViewerDetails.BasicDetails.Supplycomments = null;
          this.FormViewerDetails.BasicDetails.TechsupplyInstText = null;
          this.FormViewerDetails.BasicDetails.SupplyInsTextWithComments = null;
          this.FormViewerDetails.BasicDetails.SupplyInsVal = null;
          this.EditedGridID = 0;
          this.FormViewerDetails.BasicDetails.EditedGridID = 0;
          this.FormViewerDetails.BasicDetails.NextSupplyDate =
            DateTime.MinValue;
        }
      }
      this._EnableParentMCIItem = value;
    }
    //NotifyPropertyChanged("EnableParentMCIItem");
  }
  private _EnableChildMCIComp: boolean = true;
  public get EnableChildMCIComp(): boolean {
    return this._EnableChildMCIComp;
  }
  public set EnableChildMCIComp(value: boolean) {
    if (this._EnableChildMCIComp != value) {
      if (!value) {
        if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem != null &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem
            .PresTechValidatedItemsChild != null &&
          this.FormViewerDetails.BasicDetails.ParentMCIItem
            .PresTechValidatedItemsChild.Count > 0
        ) {
          let childCollection: ObservableCollection<PrescriptionItemVM> =
            this.FormViewerDetails.BasicDetails.ParentMCIItem
              .PresTechValidatedItemsChild;
          if (childCollection != null && childCollection.Count > 0) {
            childCollection.forEach((child) => {
              if (
                child != null &&
                child.FormViewerDetails != null &&
                child.FormViewerDetails.BasicDetails != null
              ) {
                if (child.iSSupplyrequest != null) {
                  let objselectedval: CListItem = child.iSSupplyrequest
                    .Where(
                      (x) =>
                        !String.IsNullOrEmpty(x.Value) &&
                        String.Equals(x.Value, Resource.TechValidate.Empty)
                    )
                    .FirstOrDefault();
                  child.SelectedSupplyreq = objselectedval;
                }
                child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                  null;
                child.FormViewerDetails.BasicDetails.Supplycomments = null;
                child.FormViewerDetails.BasicDetails.TechsupplyInstText = null;
                child.FormViewerDetails.BasicDetails.SupplyInsTextWithComments =
                  null;
                child.FormViewerDetails.BasicDetails.SupplyInsVal = null;
                child.FormViewerDetails.BasicDetails.NextSupplyDate =
                  DateTime.MinValue;
              }
            });
          }
        }
      }
      this._EnableChildMCIComp = value;
    }
    //NotifyPropertyChanged("EnableChildMCIComp");
  }
  private _isNextSupply: boolean = false;
  public get IsNextSupply(): boolean {
    return this._isNextSupply;
  }
  public set IsNextSupply(value: boolean) {
    this._isNextSupply = value;
    //NotifyPropertyChanged("IsNextSupply");
  }
  private _IsSupplyRecordedViaCV: boolean = false;
  public get IsSupplyRecordedViaCV(): boolean {
    return this._IsSupplyRecordedViaCV;
  }
  public set IsSupplyRecordedViaCV(value: boolean) {
    this._IsSupplyRecordedViaCV = value;
    //NotifyPropertyChanged("IsSupplyRecordedViaCV");
  }
  private _NextSupplyDttm: DateTime = DateTime.MinValue;
  public get NextSupplyDttm(): DateTime {
    return this._NextSupplyDttm;
  }
  public set NextSupplyDttm(value: DateTime) {
    this._NextSupplyDttm = value;
    if (this._NextSupplyDttm != DateTime.MinValue) {
      this.EditedGridID = 1;
    }
    //NotifyPropertyChanged("NextSupplyDttm");
  }
  private _IsAmendMCISupplyClear: boolean = false;
  public get IsAmendMCISupplyClear(): boolean {
    return this._IsAmendMCISupplyClear;
  }
  public set IsAmendMCISupplyClear(value: boolean) {
    this._IsAmendMCISupplyClear = value;
    //NotifyPropertyChanged("IsAmendMCISupplyClear");
  }
  private _isAddedToResolveGrid: boolean = false;
  public get IsAddedToResolveGrid(): boolean {
    return this._isAddedToResolveGrid;
  }
  public set IsAddedToResolveGrid(value: boolean) {
    this._isAddedToResolveGrid = value;
    //NotifyPropertyChanged("IsAddedToResolveGrid");
  }
  private _isNoMatches: boolean = false;
  public get IsNoMatches(): boolean {
    return this._isNoMatches;
  }
  public set IsNoMatches(value: boolean) {
    this._isNoMatches = value;
    //NotifyPropertyChanged("IsNoMatches");
  }
  private _IsOtherClick: boolean = false;
  public get IsOtherClick(): boolean {
    return this._IsOtherClick;
  }
  public set IsOtherClick(value: boolean) {
    this._IsOtherClick = value;
  }
  private _IsReviewHistoryVisible: Visibility = Visibility.Collapsed;
  public get IsReviewHistoryVisible(): Visibility {
    return this._IsReviewHistoryVisible;
  }
  public set IsReviewHistoryVisible(value: Visibility) {
    this._IsReviewHistoryVisible = value;
  }
  private _ReviewHistory: StringBuilder;
  public get ReviewHistory(): StringBuilder {
    return this._ReviewHistory;
  }
  public set ReviewHistory(value: StringBuilder) {
    this._ReviewHistory = value;
  }
  private _isUnholddrug: boolean = false;
  public get IsUnholddrug(): boolean {
    return this._isUnholddrug;
  }
  public set IsUnholddrug(value: boolean) {
    this._isUnholddrug = value;
    //NotifyPropertyChanged("IsUnholddrug");
  }
  private _IsLoadAdditionalFaxTab: boolean = false;
  public get IsLoadAdditionalFaxTab(): boolean {
    return this._IsLoadAdditionalFaxTab;
  }
  public set IsLoadAdditionalFaxTab(value: boolean) {
    this._IsLoadAdditionalFaxTab = value;
    //NotifyPropertyChanged("IsLoadAdditionalFaxTab");
  }
  private _IsLoadBasicFaxTab: boolean = false;
  public get IsLoadBasicFaxTab(): boolean {
    return this._IsLoadBasicFaxTab;
  }
  public set IsLoadBasicFaxTab(value: boolean) {
    this._IsLoadBasicFaxTab = value;
    //NotifyPropertyChanged("IsLoadBasicFaxTab");
  }
  private _IsUnHoldAction: boolean = false;
  public get IsUnHoldAction(): boolean {
    return this._IsUnHoldAction;
  }
  public set IsUnHoldAction(value: boolean) {
    this._IsUnHoldAction = value;
    //NotifyPropertyChanged("IsUnHoldAction");
  }
  public _bShowallVisible: Visibility = Visibility.Collapsed;
  public get isShowallVisible(): Visibility {
    return this._bShowallVisible;
  }
  public set isShowallVisible(value: Visibility) {
    if (this._bShowallVisible != value) {
      this._bShowallVisible = value;
      //super.NotifyPropertyChanged("isShowallVisible");
    }
  }
  public dynmicGridHeight: string;
  public _TechValSplitter: Visibility = Visibility.Collapsed;
  public get TechValSplitter(): Visibility {
    return this._TechValSplitter;
  }
  public set TechValSplitter(value: Visibility) {
    if (this._TechValSplitter != value) {
      this._TechValSplitter = value;
      //NotifyPropertyChanged("TechValSplitter");
    }
  }
  public get PresMultiCompitemOID(): number {
    return this._PresMultiCompitemOID;
  }
  public set PresMultiCompitemOID(value: number) {
    this._PresMultiCompitemOID = value;
  }
  private _propTechPresItemChild: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
  public get PresTechValidatedItemsChild(): ObservableCollection<PrescriptionItemVM> {
    return this._propTechPresItemChild;
  }
  public set PresTechValidatedItemsChild(
    value: ObservableCollection<PrescriptionItemVM>
  ) {
    if (Helper.ReferenceEquals(this._propTechPresItemChild, value) != true) {
      this._propTechPresItemChild = value;
      //NotifyPropertyChanged("PresTechValidatedItemsChild");
    }
  }
  public set SelectedMciPresItemChld(value: PrescriptionItemVM) {
    if (Helper.ReferenceEquals(this._SelectedMciPresItemChld, value) != true) {
      this.IsMciChildSelected1 = true;
      this._SelectedMciPresItemChld = value;
      if (value != null) {
        if (
          this.SelectedMciPresItemChld.FormViewerDetails.TechValidateDetails ==
          null
        )
          this.SelectedMciPresItemChld.formViewerDetails.TechValidateDetails =
            ObjectHelper.CreateObject(new TechValidateVM(), {
              Quantity: String.Empty,
              TotalQuantity: String.Empty,
            });
      }
      if (this.OnSelectedMciPresItmChldChanged != null) {
        this.OnSelectedMciPresItmChldChanged(this.SelectedMciPresItemChld);
      }
      //NotifyPropertyChanged("SelectedMciPresItemChld");
    }
  }
  public get SelectedMciPresItemChld(): PrescriptionItemVM {
    return this._SelectedMciPresItemChld;
  }
  private supplyCommments: string;
  public get SupplyCommments(): string {
    return this.supplyCommments;
  }
  public set SupplyCommments(value: string) {
    this.supplyCommments = value;
    //super.NotifyPropertyChanged("SupplyCommments");
  }
  public get ReconcileComments(): string {
    return this._reconcileComments;
  }
  public set ReconcileComments(value: string) {
    if (!String.IsNullOrEmpty(value)) {
      this.ReconcileCommentsText = 'View Comments';
    } else {
      this.ReconcileCommentsText = 'Enter Comments';
    }
    this._reconcileComments = value;
    //NotifyPropertyChanged("ReconcileComments");
  }
  public ReconcilecommentsIP: string;
  public ReconcilecmmentsDis: string;
  public get ReconcileCommentsText(): string {
    return this._ReconcileCommentsText;
  }
  public set ReconcileCommentsText(value: string) {
    this._ReconcileCommentsText = value;
    //NotifyPropertyChanged("ReconcileCommentsText");
  }
  public get ReorderItemOID(): number {
    return this._ReorderItemOID;
  }
  public set ReorderItemOID(value: number) {
    this._ReorderItemOID = value;
  }
  private _PrevReorderItemOID: number = 0;
  public get PrevReorderItemOID(): number {
    return this._PrevReorderItemOID;
  }
  public set PrevReorderItemOID(value: number) {
    this._PrevReorderItemOID = value;
  }
  public get AlreadyPrescribedItemOID(): number {
    return this._AlreadyPrescribedItemOID;
  }
  public set AlreadyPrescribedItemOID(value: number) {
    this._AlreadyPrescribedItemOID = value;
  }
  public get ParentReorderItemOID(): number {
    return this._ParentReorderItemOID;
  }
  public set ParentReorderItemOID(value: number) {
    this._ParentReorderItemOID = value;
  }
  public get NoRecordsText(): string {
    return this._noRecordsText;
  }
  public set NoRecordsText(value: string) {
    this._noRecordsText = value;
    //NotifyPropertyChanged("NoRecordsText");
  }
  public get OrderSetGroupID(): string {
    return this._OrderSetGroupID;
  }
  public set OrderSetGroupID(value: string) {
    this._OrderSetGroupID = value;
  }
  public get OrderSetLoreznoID(): string {
    return this._OrderSetLoreznoID;
  }
  public set OrderSetLoreznoID(value: string) {
    this._OrderSetLoreznoID = value;
  }
  public get DisplayOrder(): number {
    return this._DisplayOrder;
  }
  public set DisplayOrder(value: number) {
    this._DisplayOrder = value;
  }
  private _DoseCalculationDetails: DoseCalculation;
  public get DoseCalculationDetails(): DoseCalculation {
    return this._DoseCalculationDetails;
  }
  public set DoseCalculationDetails(value: DoseCalculation) {
    this._DoseCalculationDetails = value;
  }
  public get IsFormCancelled(): boolean {
    return this._isFormCancelled;
  }
  public set IsFormCancelled(value: boolean) {
    if (value != this._isFormCancelled) {
      this._isFormCancelled = value;
    }
  }
  private _PreparationStatus: CListItem;
  public get PreparationStatus(): CListItem {
    return this._PreparationStatus;
  }
  public set PreparationStatus(value: CListItem) {
    if (this._PreparationStatus != value) {
      this._PreparationStatus = value;
      //super.NotifyPropertyChanged("PreparationStatus");
    }
  }
  private _IsWardStock: boolean = false;
  public get IsWardStock(): boolean {
    return this._IsWardStock;
  }
  public set IsWardStock(value: boolean) {
    if (this._IsWardStock != value) {
      this._IsWardStock = value;
      //super.NotifyPropertyChanged("IsWardStock");
    }
  }
  private _IsWardStockFluid: boolean = false;
  public get IsWardStockFluid(): boolean {
    return this._IsWardStockFluid;
  }
  public set IsWardStockFluid(value: boolean) {
    if (this._IsWardStockFluid != value) {
      this._IsWardStockFluid = value;
      //super.NotifyPropertyChanged("IsWardStockFluid");
    }
  }
  private _LastSupplyNameMCIChildField: string;
  public get LastSupplyNameMCIChild(): string {
    return this._LastSupplyNameMCIChildField;
  }
  public set LastSupplyNameMCIChild(value: string) {
    this._LastSupplyNameMCIChildField = value;
    //super.NotifyPropertyChanged("LastSupplyNameMCIChild");
  }
  private _LastSupplyDTTMMCIChildField: DateTime = DateTime.MinValue;
  public get LastSupplyDTTMMCIChild(): DateTime {
    return this._LastSupplyDTTMMCIChildField;
  }
  public set LastSupplyDTTMMCIChild(value: DateTime) {
    this._LastSupplyDTTMMCIChildField = value;
    //super.NotifyPropertyChanged("LastSupplyDTTMMCIChild");
  }
  private _IsOriginalSupplyRequested: boolean = false;
  public get IsOriginalSupplyRequested(): boolean {
    return this._IsOriginalSupplyRequested;
  }
  public set IsOriginalSupplyRequested(value: boolean) {
    if (this._IsOriginalSupplyRequested != value) {
      this._IsOriginalSupplyRequested = value;
      //super.NotifyPropertyChanged("IsOriginalSupplyRequested");
    }
  }
  //public delegate void IsSupplyRequestedChange(PrescriptionItemVM PresItemVM);
  public IsSupplyRequestedChangedEvent: Function;
  private _IsSupplyRequested: boolean = false;
  public get IsSupplyRequested(): boolean {
    return this._IsSupplyRequested;
  }
  public set IsSupplyRequested(value: boolean) {
    if (this._IsSupplyRequested != value) {
      this._IsSupplyRequested = value;
      if (this._IsSupplyRequested && this.IsSupplyRequestedChangedEvent != null)
        this.IsSupplyRequestedChangedEvent(this);
      //super.NotifyPropertyChanged("IsSupplyRequested");
    }
  }
  private _IsSupplyRequestedforReqMed: boolean = false;
  public get IsSupplyRequestedforReqMed(): boolean {
    return this._IsSupplyRequestedforReqMed;
  }
  public set IsSupplyRequestedforReqMed(value: boolean) {
    if (this._IsSupplyRequestedforReqMed != value) {
      this._IsSupplyRequestedforReqMed = value;
      //super.NotifyPropertyChanged("IsSupplyRequested");
    }
  }
  private _RequestUrgency: string;
  public get RequestUrgency(): string {
    return this._RequestUrgency;
  }
  public set RequestUrgency(value: string) {
    if (this._RequestUrgency != value) {
      this._RequestUrgency = value;
      //super.NotifyPropertyChanged("RequestUrgency");
    }
  }
  private _RequestedDTTM: DateTime = DateTime.MinValue;
  public get RequestedDTTM(): DateTime {
    return this._RequestedDTTM;
  }
  public set RequestedDTTM(value: DateTime) {
    if (this._RequestedDTTM != value) {
      this._RequestedDTTM = value;
      //super.NotifyPropertyChanged("RequestedDTTM");
    }
  }
  private _RequestedBy: string;
  public get RequestedBy(): string {
    return this._RequestedBy;
  }
  public set RequestedBy(value: string) {
    if (this._RequestedBy != value) {
      this._RequestedBy = value;
      //super.NotifyPropertyChanged("RequestedBy");
    }
  }
  private _RequestedComments: string;
  public get RequestedComments(): string {
    return this._RequestedComments;
  }
  public set RequestedComments(value: string) {
    if (this._RequestedComments != value) {
      this._RequestedComments = value;
      //super.NotifyPropertyChanged("RequestedComments");
    }
  }
  private _IsSupplyRequestVisible: boolean = false;
  public get IsSupplyRequestVisible(): boolean {
    return this._IsSupplyRequestVisible;
  }
  public set IsSupplyRequestVisible(value: boolean) {
    if (this._IsSupplyRequestVisible != value) {
      this._IsSupplyRequestVisible = value;
      //super.NotifyPropertyChanged("IsSupplyRequestVisible");
    }
  }
  private _IsReSupplyRequested: boolean = false;
  public get IsReSupplyRequested(): boolean {
    return this._IsReSupplyRequested;
  }
  public set IsReSupplyRequested(value: boolean) {
    if (this._IsReSupplyRequested != value) {
      this._IsReSupplyRequested = value;
      //super.NotifyPropertyChanged("IsReSupplyRequested");
    }
  }
  private _IsReSupplyRequestVisible: boolean = false;
  public get IsReSupplyRequestVisible(): boolean {
    return this._IsReSupplyRequestVisible;
  }
  public set IsReSupplyRequestVisible(value: boolean) {
    if (this._IsReSupplyRequestVisible != value) {
      this._IsReSupplyRequestVisible = value;
      //super.NotifyPropertyChanged("IsReSupplyRequestVisible");
    }
  }
  private _InstructionCount: number = 0;
  public get InstructionCount(): number {
    return this._InstructionCount;
  }
  public set InstructionCount(value: number) {
    if (this._InstructionCount != value) {
      this._InstructionCount = value;
      //super.NotifyPropertyChanged("InstructionCount");
    }
  }
  private _RequisitionCACode: string = String.Empty;
  public get RequisitionCACode(): string {
    return this._RequisitionCACode;
  }
  public set RequisitionCACode(value: string) {
    if (this._RequisitionCACode != value) {
      this._RequisitionCACode = value;
      //super.NotifyPropertyChanged("RequisitionCACode");
    }
  }
  private _supDisText: string = 'Add supply instruction';
  public get SupDisText(): string {
    return this._supDisText;
  }
  public set SupDisText(value: string) {
    this._supDisText = value;
    //NotifyPropertyChanged("SupDisText");
  }
  private _ProdOptDisText: string = 'Add product options';
  public get ProdOptDisText(): string {
    return this._ProdOptDisText;
  }
  public set ProdOptDisText(value: string) {
    this._ProdOptDisText = value;
    //NotifyPropertyChanged("ProdOptDisText");
  }
  private _ProdOpt: string = 'Product options';
  public get ProdOpt(): string {
    return this._ProdOpt;
  }
  public set ProdOpt(value: string) {
    this._ProdOpt = value;
    //NotifyPropertyChanged("ProdOpt");
  }
  private _supToolTipDisText: string = 'Select to add supply instructions';
  public get supToolTipDisText(): string {
    return this._supToolTipDisText;
  }
  public set supToolTipDisText(value: string) {
    this._supToolTipDisText = value;
    //NotifyPropertyChanged("supToolTipDisText");
  }
  private _IsSupDispEnable: boolean = true;
  public get IsSupDispEnable(): boolean {
    return this._IsSupDispEnable;
  }
  public set IsSupDispEnable(value: boolean) {
    if (this._IsSupDispEnable != value) {
      this._IsSupDispEnable = value;
      //super.NotifyPropertyChanged("IsSupDispEnable");
    }
  }
  private _TechValidatedItems: ObservableCollection<CustomTechValidatedItem> = new ObservableCollection<CustomTechValidatedItem>();
  public get TechValidatedItems(): ObservableCollection<CustomTechValidatedItem> {
    return this._TechValidatedItems;
  }
  public set TechValidatedItems(
    value: ObservableCollection<CustomTechValidatedItem>
  ) {
    if (this._TechValidatedItems != value) {
      this._TechValidatedItems = value;
      //NotifyPropertyChanged("TechValidatedItems");
    }
  }
  private _bIsSupplyDispensingInstructionSet: boolean = false;
  public get bIsSupplyDispensingInstructionSet(): boolean {
    return this._bIsSupplyDispensingInstructionSet;
  }
  public set bIsSupplyDispensingInstructionSet(value: boolean) {
    if (this._bIsSupplyDispensingInstructionSet != value) {
      this._bIsSupplyDispensingInstructionSet = value;
      //super.NotifyPropertyChanged("bIsSupplyDispensingInstructionSet");
    }
  }
  public bIsSupplyRequestedSet: boolean = false;
  private oClearBrand: RelayCommand;
  public get ClearBrand(): RelayCommand {
    if (this.oClearBrand == null) {
      let functionClear = () => {this.ClearBrandData();};
      this.oClearBrand = new RelayCommand(functionClear);
     // this.oClearBrand = new RelayCommand(this.ClearBrandData);
    }
    return this.oClearBrand;
  }
  private oClearProduct: RelayCommand;
  public get ClearProduct(): RelayCommand {
    if (this.oClearProduct == null) {
     // this.oClearProduct = new RelayCommand(this.ClearSelectproductData);
      let functionClear = () => {this.ClearSelectproductData();};
      this.oClearProduct = new RelayCommand(functionClear);
    }
    return this.oClearProduct;
  }
  private oClearSequence: RelayCommand;
  public get ClearSequence(): RelayCommand {
    if (this.oClearSequence == null) {
      let functionClear = () => {this.ClearSequenceDet();};
      this.oClearSequence = new RelayCommand(functionClear);
      // this.oClearSequence = new RelayCommand(this.ClearSequenceDet);
    }
    return this.oClearSequence;
  }
  private nSelIndex: number = 0;
  //public delegate void PrescribeThisItemDelegate(PrescriptionItemVM oItem, ActivityTypes ActivityTypeCode);
  public PrescribeThisItemEvent: Function;
  public ReplaceDrugActiveStatus: string;
  public IsSkipStartDateValidation: boolean = false;
  dlgClinicallyVerified: Function; // BasicDetailsVM.ClinicallyVerifiedMeEventhandler;
  dlgClinicallyAuthorised: Function; // BasicDetailsVM.ClinicallyAuthorisedEventhandler;
  constructor();
  constructor(ovm?: IPPMABaseVM);
  constructor(ovm?: IPPMABaseVM) {
    super();
    switch (arguments.length) {
      case 1:
        this.ParentbaseVM = ovm;
        break;
    }
    this.dlgClinicallyVerified = (s,e) => {
      this.BasicDetails_ClinicallyVerified();
    }; // new BasicDetailsVM.ClinicallyVerifiedMeEventhandler(this.BasicDetails_ClinicallyVerified);
    this.dlgClinicallyAuthorised = (s,e) => {
      this.BasicDetails_ClinicallyVerified();
    }; //new BasicDetailsVM.ClinicallyAuthorisedEventhandler(this.BasicDetails_ClinicallyVerified);
  }

  private oBtnFluidsfsClick: RelayCommand;
  public get BtnFluidsfsClick(): RelayCommand {
    //Not Required for LHS. To be Re-Visited.
    if (this.oBtnFluidsfsClick == null) {
      let funcFluids = () => {this.LaunchfluidSFS();};
      this.oBtnFluidsfsClick = new RelayCommand(funcFluids);
    }
    return this.oBtnFluidsfsClick;
  }
   fluidsrch: medfluidSearch; //Not Required for LHS. To be Re-Visited.
  private oChildWindow: ChildWindow;
  //Not Required for LHS. To be Re-Visited.
  
        public LaunchfluidSFS(): void {
          if (this.FormViewerDetails != null && this.FormViewerDetails.BasicDetails != null && !this.FormViewerDetails.BasicDetails.IsenableFluid) {
            return
          }
          this.fluidsrch = new medfluidSearch();
          this.fluidsrch.constructorImpl(enmMedSearchOptions.SearchFluidDrugsOnly);
          AppActivity.OpenWindow("Fluid search - LORENZO--Webpage Dialog", this.fluidsrch, (s,e) => {this.fluidsrch_Closed(s);}, "", false, 500, 650, false, WindowButtonType.OkCancel, null);
        }
        fluidsrch_Closed(args: AppDialogEventargs): void {
            let search: medfluidSearch;
            this.oChildWindow = args.AppChildWindow as ChildWindow;
            if (args.Result == AppDialogResult.Ok && args.Content != null) {
                search = ObjectHelper.CreateType<medfluidSearch>(args.Content.Component, medfluidSearch);
                let lstCListItem: List<CListItem> = new List<CListItem>();
                let search12: CListItem;
                this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext = search.objFluidsearch.LineItem;
                this.FormViewerDetails.BasicDetails.InfusionDetails.FluidOID = search.objFluidsearch.FluidOID;
                this.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID = search.objFluidsearch.FluidLorenzoID;
                this.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType = search.objFluidsearch.FluidItemType;
                this.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID = Convert.ToInt64(search.objFluidsearch.FluidID);
                this.FormViewerDetails.BasicDetails.InfusionDetails.FluidPrescribableItemListOID = search.objFluidsearch.FluidOID;
                if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && (this.ActionCode == ActivityTypes.Prescribe || this.ActionCode == ActivityTypes.Amend || this.ActionCode == ActivityTypes.Reorder)) {
                    let oParam: string[] = new Array(3);
                    oParam[0] = this.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType;
                    oParam[1] = this.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID;
                    oParam[2] = AppSessionInfo.AMCV;
                    let Isauthorise: string = ObjectHelper.CreateType<string>(HtmlPage.Window.Invoke("GetIsItemAuthorise", oParam), "string");                    
                    if (String.Equals(Isauthorise, "1", StringComparison.InvariantCultureIgnoreCase)) {
                        if (String.IsNullOrEmpty(this.PrescriptionItemStatus) || (!String.IsNullOrEmpty(this.PrescriptionItemStatus) && String.Equals(this.PrescriptionItemStatus, CConstants.AWAITINGAUTHORISE, StringComparison.InvariantCultureIgnoreCase))) {
                            this.FormViewerDetails.BasicDetails.IndentifyingDrugName = null;
                            this.FormViewerDetails.BasicDetails.IndentifyingDrugName = this.formViewerDetails.BasicDetails.IdentifyingName + CConstants.sAuthoriseText;
                        }
                        this.FormViewerDetails.BasicDetails.IsFluidAuthorise = true;
                    }
                    else {
                        this.FormViewerDetails.BasicDetails.IsFluidAuthorise = false;
                        if (!this.FormViewerDetails.BasicDetails.IsOrgAuthorise) {
                            this.FormViewerDetails.BasicDetails.IndentifyingDrugName = this.formViewerDetails.BasicDetails.IdentifyingName;
                        }
                    }
                    if (!this.FormViewerDetails.BasicDetails.IsOrgAuthorise && !this.FormViewerDetails.BasicDetails.IsFluidAuthorise && this.FormViewerDetails.BasicDetails.IsAuthorise) {
                        this.FormViewerDetails.BasicDetails.IsAuthorise = false;
                    }
                    if (this.AuthoriseTVDisableEvent != null) {
                        this.AuthoriseTVDisableEvent(Isauthorise);
                    }
                }
                if (String.Equals(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode, StringComparison.InvariantCultureIgnoreCase) && String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && (this.ActionCode == ActivityTypes.Prescribe || this.ActionCode == ActivityTypes.Reorder)) {
                    if (this.FormViewerDetails.BasicDetails.IsAuthorise || this.FormViewerDetails.BasicDetails.IsFluidAuthorise) {
                        this.FormViewerDetails.BasicDetails.IsClinicallyVerified = false;
                        this.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify = false;
                        this.IsClinicallyVerifyEnable = false;
                    }
                    else {
                        this.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify = true;
                        this.IsClinicallyVerifyEnable = true;
                    }
                }
                let existingFluid: IEnumerable<CListItem> = null;
                if (this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList != null) {
                    existingFluid = this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList.Select(x => x).Where(x => x.Value == search.objFluidsearch.FluidOID.ToString());
                }
                if (existingFluid != null && existingFluid.Any()) {
                    this.formViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue = existingFluid.FirstOrDefault();
                }
                else {
                    search12 = ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext.Trim(),
                        Value: search.objFluidsearch.FluidOID.ToString(),
                        Tag: search.objFluidsearch.FluidLorenzoID + "~" + "VIRTUALPRODUCT" + "~" + search.objFluidsearch.FluidID + "~" + this.FormViewerDetails.BasicDetails.IsFluidAuthorise
                    });
                    if (this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList != null) {
                        this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList.Insert(0, search12);
                    }
                    this.formViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue = search12;
                }
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsFluidConflictGen = '2';
                this.oChildWindow.DialogResult = true;
            }
            else {
                let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                    Title: "LORENZO",
                    Message: Resource.disconcan1.Cancel_Error_Message,
                    MessageButton: MessageBoxButton.YesNo,
                    IconType: MessageBoxType.Question
                });
                iMsgBox.MessageBoxClose  = (s,e) => { this.iMsgBox_MessageBoxClose_App(s,e); } ;
                iMsgBox.Show();
            }
        }
        iMsgBox_MessageBoxClose_App(sender: Object, e: MessageEventArgs): void {
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                this.oChildWindow.DialogResult = true;
            }
        }
        
  private sequentialChildWindow: ChildWindow;
  private oSequentialsfsLink: RelayCommand;
  public bSeqMezzanineClicked: boolean = false;
  //Not Required for LHS. To be Re-Visited.
  
        public get SequentialsfsLink(): RelayCommand {
            if (this.oSequentialsfsLink == null) {
              let functionClear = () => {this.LaunchSequentialSFS();};
                this.oSequentialsfsLink = new RelayCommand(functionClear);
            }
           return this.oSequentialsfsLink;
        }
        SequentialPrescriptionsfs: MedSequentialPrescription; 
        public LaunchSequentialSFS(): void {
            if (!this.bSeqMezzanineClicked && this.ParentbaseVM != null && this.ParentbaseVM.MedsResolve != null && this.formViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) {
                this.bSeqMezzanineClicked = true;
                CSequentialHelper.LaunchItemsInSequenceMezzanine(this.ParentbaseVM.MedsResolve, this.formViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo, (s,e) => {this.OnSequentialMezzanineClosed(s);});
                return
            }
            else if (!this.bSeqMezzanineClicked && this.ParentbaseVM != null && this.ParentbaseVM.MedsResolve != null && this.formViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0) {
                this.bSeqMezzanineClicked = true;
                CommonSequentialHelper.LaunchItemsInSequenceMezzanine(this.ParentbaseVM.MedsResolve, this.formViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo, (s,e) => {this.OnSequentialMezzanineClosed(s);});
                return
            }
        }
  OnSequentialMezzanineClosed(args: AppDialogEventargs): void {
    this.bSeqMezzanineClicked = false;
    if (args != null && args.AppChildWindow != null)
    args.AppChildWindow.DialogRef.close(); 
    //  (args.AppChildWindow as ChildWindow).DialogResult = false;
    
  }
  private oAddSequentialLink: RelayCommand;
  public get AddSequentialLink(): RelayCommand {
    if (this.oAddSequentialLink == null) {
      this.oAddSequentialLink = new RelayCommand((s,e) => {this.ChkAppendMoresequential();});
    }
    return this.oAddSequentialLink;
  }
  private ChkAppendMoresequential(): void {
    if (
      this.formViewerDetails.BasicDetails.InfusionDetails
        .IsChkAppendSequencePrescribing
    ) {
      this.formViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem =
        false;
      iMessageBox.Show(
        'Lorenzo',
        'Already sequential NotEnded',
        MessageBoxType.Information,
        MessageBoxButton.OK
      );
    }
  }
  private oBtnInfusionrateClick: RelayCommand<boolean>;
  public get BtnInfusionrateClick(): RelayCommand<boolean> {
    //Not Required for LHS. To be Re-Visited.
    if (this.oBtnInfusionrateClick == null) {
        this.oBtnInfusionrateClick = new RelayCommand<boolean>(i => this.LaunchInfusionrateCalculator(true), this.CanClickInfusionRateCalc);
    }
    return this.oBtnInfusionrateClick;
  }
  private CanClickInfusionRateCalc(): boolean {
    let _bIsenableInfusionrateCalculator: boolean = false;
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails != null
    ) {
      _bIsenableInfusionrateCalculator =
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsenableInfusionrateCalculator;
    }
    return _bIsenableInfusionrateCalculator;
  }
  infusionratecal: frmInfusionratecalculator; //Not Required for LHS. To be Re-Visited.
  private oChildWindowInf: ChildWindow;
 
   //Not Required for LHS. To be Re-Visited.
        public LaunchInfusionrateCalculator(isBtnClicked: boolean): void {
            this.infusionratecal = new frmInfusionratecalculator();
            if (this.FormViewerDetails.BasicDetails != null && this.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                if (this.formViewerDetails.BasicDetails.InfusionDetails != null) {
                    this.formViewerDetails.BasicDetails.InfusionDetails.PrescribedDoseValue = this.formViewerDetails.BasicDetails.Dose;
                    this.formViewerDetails.BasicDetails.InfusionDetails.PrescribedDoseUOMValue = this.formViewerDetails.BasicDetails.DoseUOM;
                }
                let oTooltipPrescDoseValue: string = String.Empty;
                if (!String.IsNullOrEmpty(this.formViewerDetails.BasicDetails.Dose) && this.formViewerDetails.BasicDetails.DoseUOM != null) {
                    oTooltipPrescDoseValue = this.formViewerDetails.BasicDetails.Dose + ' ' + this.formViewerDetails.BasicDetails.DoseUOM.DisplayText;
                    this.formViewerDetails.BasicDetails.InfusionDetails.TooltipPrescribedDoseValue = oTooltipPrescDoseValue;
                    // this.infusionratecal.lblPrescribedDoseValue.Text = oTooltipPrescDoseValue;
                }
                let oTooltipPrescVolumeValue: string = String.Empty;
                if (!String.IsNullOrEmpty(this.formViewerDetails.BasicDetails.InfusionDetails.FluidVolume) && this.formViewerDetails.BasicDetails.InfusionDetails.VolumeUOM != null) {
                    oTooltipPrescVolumeValue = this.formViewerDetails.BasicDetails.InfusionDetails.FluidVolume + ' ' + this.formViewerDetails.BasicDetails.InfusionDetails.VolumeUOM.DisplayText;
                    this.formViewerDetails.BasicDetails.InfusionDetails.TooltipPrescribedVolumeValue = oTooltipPrescVolumeValue;
                    // this.infusionratecal.lblPrescribedVolumeValue.Text = oTooltipPrescVolumeValue;
                }
                else {
                    // this.infusionratecal.lblPrescribedVolumeValue.Text = null;
                    this.formViewerDetails.BasicDetails.InfusionDetails.TooltipPrescribedVolumeValue = String.Empty;
                }
                let oTooltipInfusionPeriodValue: string = String.Empty;
                if (!(String.IsNullOrEmpty(this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod)) && this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom != null) {
                    oTooltipInfusionPeriodValue = this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod + ' ' + this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText;
                    this.formViewerDetails.BasicDetails.InfusionDetails.TooltipInfusionPeriodValue = oTooltipInfusionPeriodValue;
                    // this.infusionratecal.lblInfusionPeriodValue.Text = oTooltipInfusionPeriodValue;
                }
                else {
                    // this.infusionratecal.lblInfusionPeriodValue.Text = null;
                    this.formViewerDetails.BasicDetails.InfusionDetails.TooltipInfusionPeriodValue = String.Empty;
                }
                let isInfusionRatesetforAllthreeforSD: boolean = false;
                let isInfusionRatebasedonDoseandPeriod: boolean = false;
                this.infusionratecal.DataContext = this.formViewerDetails.BasicDetails;
                if (this.FormViewerDetails.BasicDetails.DoseType != null && !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.DoseType.Value) && (String.Compare(this.FormViewerDetails.BasicDetails.DoseType.Value, DoseTypeCode.NORMAL, StringComparison.CurrentCultureIgnoreCase) == 0)) {
                    if (this.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME) == 0) {
                        let isInfusionRateset: boolean = false;
                        if (this.CheckAllThreeAvailable() && !isBtnClicked && (!this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0)) {
                            this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator = true;
                            this.ResetValues();
                            return
                        }
                        else if (this.CheckAllThreeAvailable() && isBtnClicked && (!this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0)) {
                            isInfusionRatesetforAllthreeforSD = this.SetInfusionRateifAllThreeAvailable(isBtnClicked);
                        }
                        if (!isInfusionRatesetforAllthreeforSD && !isBtnClicked && (!this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0)) {
                            this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator = false;
                            isInfusionRateset = this.CheckVolumeandPeriodAvailable();
                        }
                        if (!isInfusionRateset && !isBtnClicked && (!this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0)) {
                            this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator = false;
                            isInfusionRateset = this.CheckDoseandPeriodAvailable();
                        }
                        if (!isInfusionRateset && !isBtnClicked && (this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) != 0)) {
                            isInfusionRatebasedonDoseandPeriod = this.CheckDoseandPeriodAvailable() && !this.CheckAllThreeAvailable();
                            isInfusionRateset = this.CheckVolumeandPeriodAvailable();
                        }
                        if (isInfusionRateset) {
                            if (!this.CheckAllThreeAvailable()) {
                                this.MakeInfusionRateReadonly();
                            }
                            else {
                                this.RemoveReadOnly();
                            }
                        }
                        if ((((!isInfusionRateset && !this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate && !this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD) || (!isInfusionRateset && !this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom && this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD)) || isInfusionRatesetforAllthreeforSD) && !isBtnClicked && this.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds) {
                            this.ResetValues();
                        }
                    }
                    else if (this.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.INTERMITTENT) == 0 && isBtnClicked) {
                        let isInfusionRatesetforAllthree: boolean = false;
                        let isInfusionRateset: boolean = false;
                        isInfusionRatesetforAllthree = this.SetInfusionRateifAllThreeAvailable(isBtnClicked);
                        if (!isInfusionRatesetforAllthree) {
                            isInfusionRateset = this.CheckDoseandPeriodAvailable();
                        }
                        if (!isInfusionRateset && !isInfusionRatesetforAllthree) {
                            isInfusionRateset = this.CheckVolumeandPeriodAvailable();
                        }
                        if (!isInfusionRateset || isInfusionRatesetforAllthree) {
                            if (!isInfusionRatesetforAllthree) {
                                this.ShowMsg();
                            }
                        }
                    }
                    else if (this.FormViewerDetails.BasicDetails.InfusionType != null && !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.InfusionType.Value) && String.Compare(this.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID) == 0) {
                        let isInfusionRateset: boolean = false;
                        isInfusionRateset = this.CheckVolumeandPeriodAvailable();
                        if (!isInfusionRateset) {
                            this.ResetValues();
                        }
                        else {
                            this.MakeInfusionRateReadonly();
                        }
                    }
                    if (this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD && !isInfusionRatebasedonDoseandPeriod && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) != 0 && !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.InfusionDetails.Rate) && !isInfusionRatesetforAllthreeforSD && (this.FormViewerDetails.BasicDetails.InfusionType != null && (String.Compare(this.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.SINGLEDOSEVOLUME, StringComparison.InvariantCultureIgnoreCase) == 0 || String.Compare(this.FormViewerDetails.BasicDetails.InfusionType.Value, InfusionTypesCode.FLUID, StringComparison.InvariantCultureIgnoreCase) == 0))) {
                        if (this.formViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom != null && this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom != null && !String.IsNullOrEmpty(this.formViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Value) && !String.IsNullOrEmpty(this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.Value)) {
                            this.FormViewerDetails.BasicDetails.InfusionDetails.Rate = this.CalclulateInfusionRateBasedOnDD(this.FormViewerDetails.BasicDetails.InfusionDetails.Rate);
                        }
                    }
                }
            }
        }
        
  public CalclulateInfusionRateBasedOnDD(Rate: string): string {
    let CalculatedInfusionRate: string = Rate;
    if (
      String.Compare(
        this.formViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom.Value,
        this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
          .Value,
        StringComparison.InvariantCultureIgnoreCase
      ) != 0
    ) {
      try {
        if (
          String.Compare(
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.DisplayText,
            Conversion.hour,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          switch (
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom.DisplayText
          ) {
            case Conversion.minute:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) * 60,
                3
              ).ToString();
              break;
            case Conversion.day:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / 24,
                3
              ).ToString();
              break;
            case Conversion.week:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / (7 * 24),
                3
              ).ToString();
              break;
            case Conversion.month:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / (30 * 24),
                3
              ).ToString();
              break;
            case Conversion.year:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / (365 * 24),
                3
              ).ToString();
              break;
          }
        } else if (
          String.Compare(
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.DisplayText,
            Conversion.minute,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          switch (
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom.DisplayText
          ) {
            case Conversion.hour:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / 60,
                3
              ).ToString();
              break;
            case Conversion.day:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / (24 * 60),
                3
              ).ToString();
              break;
            case Conversion.week:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / (7 * 24 * 60),
                3
              ).ToString();
              break;
            case Conversion.month:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / (30 * 24 * 60),
                3
              ).ToString();
              break;
            case Conversion.year:
              CalculatedInfusionRate = iMath.Round(
                Convert.ToDouble(Rate) / (365 * 24 * 60),
                3
              ).ToString();
              break;
          }
        }
      } catch (e) {
        CalculatedInfusionRate = Rate;
      }
    }
    return CalculatedInfusionRate;
  }
  public SetInfusionRateifAllThreeAvailable(isBtnClicked: boolean): boolean {
    let bLaunchCalc: boolean = false;
    if (this.CheckAllThreeAvailable()) {
      bLaunchCalc = true;
      if (!isBtnClicked) {
        this.ResetValues();
      }
      if (
        this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText.IndexOf('/') > 0
      ) {
        bLaunchCalc = this.CalculateInfusionRateForDose();
      }
      if (bLaunchCalc && isBtnClicked) {
        if (
          this.ActionCode == ActivityTypes.Prescribe ||
          this.ActionCode == ActivityTypes.Reorder
        ) {
          if (
            this.formViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked ==
              null ||
            !this.formViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked.GetValueOrDefault(
              false
            )
          ) {
            this.formViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked =
              true;
          } else if (
            this.formViewerDetails.BasicDetails.InfusionDetails
              .IsVolumeChecked == null ||
            !this.formViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked.GetValueOrDefault(
              false
            )
          ) {
            this.formViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked =
              true;
          }
        }
        if (this.ActionCode == ActivityTypes.Amend) {
          if (
            this.formViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked !=
              null &&
            Convert.ToBoolean(
              this.formViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked
            )
          ) {
            this.formViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked =
              true;
          }
          if (
            this.formViewerDetails.BasicDetails.InfusionDetails
              .IsVolumeChecked != null &&
            Convert.ToBoolean(
              this.formViewerDetails.BasicDetails.InfusionDetails
                .IsVolumeChecked
            )
          ) {
            this.formViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked =
              true;
          }
        }
        //Not Required for LHS. To be Re-Visited.
        //sai
        AppActivity.OpenWindow("Infusion rate calculator - LORENZO--Webpage Dialog", this.infusionratecal,(s,e) => {this.infusionrate_Closed(s);},"Infusion rate calculator", false, 281, 580, false, WindowButtonType.OkCancel, null);
      }
    }
    return bLaunchCalc;
  }
  public CheckAllThreeAvailable(): boolean {
    if (
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose) &&
      this.FormViewerDetails.BasicDetails.DoseUOM != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
        null
    ) {
      return true;
    }
    return false;
  }
  public CheckDoseandPeriodAvailable(): boolean {
    let bDoCalc: boolean = false;
    if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
        null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose) &&
      this.FormViewerDetails.BasicDetails.DoseUOM != null
    ) {
      bDoCalc = true;
      if (
        !this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsinfusRateBasedOnDD
      ) {
        bDoCalc = this.CalculateInfusionRateForDose();
        if (
          this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText.IndexOf('/') >
          0
        ) {
          bDoCalc = this.CalculateInfusionRateForDose();
        }
        if (bDoCalc) {
          try {
            this.FormViewerDetails.BasicDetails.InfusionDetails.Rate =
            iMath.Round(
                Convert.ToDouble(this.FormViewerDetails.BasicDetails.Dose) /
                  Convert.ToDouble(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfusionPeriod
                  ),
                3
              ).ToString();
            this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate =
              String.Empty;
          } catch (e) {
            this.FormViewerDetails.BasicDetails.InfusionDetails.Rate =
              String.Empty;
          }

          if (
            !this.FormViewerDetails.BasicDetails.InfusionDetails
              .IsinfusRateBasedOnDD ||
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          ) {
            let _IsSameNumUOMValue: boolean = false;
            let _IsSameDinUOMValue: boolean = false;
            if (
              this.FormViewerDetails.BasicDetails.DoseUOM != null &&
              this.formViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom != null &&
              String.Equals(
                this.FormViewerDetails.BasicDetails.DoseUOM.Value,
                this.formViewerDetails.BasicDetails.InfusionDetails
                  .InfRateNumeratorUom.Value,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              _IsSameNumUOMValue = true;
            }
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfusionPeriodUom != null &&
              this.formViewerDetails.BasicDetails.InfusionDetails
                .InfRateDinominatorUom != null &&
              String.Equals(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriodUom.Value,
                this.formViewerDetails.BasicDetails.InfusionDetails
                  .InfRateDinominatorUom.Value,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              _IsSameDinUOMValue = true;
            }
            if (!_IsSameNumUOMValue) {
              this.formViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
                this.FormViewerDetails.BasicDetails.DoseUOM;
            }
            if (!_IsSameDinUOMValue) {
              this.formViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
                this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom;
            }
          }
        }
      }
    }
    return bDoCalc;
  }
  public CheckVolumeandPeriodAvailable(): boolean {
    let bValueAvailable: boolean = false;
    if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
        null
    ) {
      bValueAvailable = true;
      try {
        this.FormViewerDetails.BasicDetails.InfusionDetails.Rate = iMath.Round(
          Convert.ToDouble(
            this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
          ) /
            Convert.ToDouble(
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            ),
          3
        ).ToString();
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate =
          String.Empty;
      } catch (e) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.Rate = String.Empty;
      }

      if (
        !this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsinfusRateBasedOnDD ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        let _IsSameNumUOMValue: boolean = false;
        let _IsSameDinUOMValue: boolean = false;
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM !=
            null &&
          this.formViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM.Value,
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.Value,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          _IsSameNumUOMValue = true;
        }
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfusionPeriodUom != null &&
          this.formViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom != null &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom.Value,
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.Value,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          _IsSameDinUOMValue = true;
        }
        if (!_IsSameNumUOMValue) {
          this.formViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
            this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM;
        }
        if (!_IsSameDinUOMValue) {
          this.formViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom;
        }
      }
    }
    return bValueAvailable;
  }
  public ShowMsg(): void {
    let oiMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
      Title: 'LORENZO',
      Message: Resource.Infusion.Infusionratemessage,
      IconType: MessageBoxType.Critical,
      MessageButton: MessageBoxButton.OK,
    });
    oiMsgBox.MessageBoxClose = (s, e) => {
      this.oiMsgBox_MsgBoxClose(s, e);
    };
    oiMsgBox.Show();
  }
  public ResetValues(): void {
    this.FormViewerDetails.BasicDetails.InfusionDetails.Rate = String.Empty;
    this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate =
      String.Empty;
    this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel =
      true;
    this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl =
      true;
    if (
      !this.FormViewerDetails.BasicDetails.InfusionDetails
        .IsinfusRateBasedOnDD ||
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
        null;
      this.formViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
        null;
    }
    this.formViewerDetails.BasicDetails.InfusionDetails.IsInfusionRateReadOnly =
      false;
    if (
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionType.Value
      ) &&
      (String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.SINGLEDOSEVOLUME
      ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT
        ) == 0)
    ) {
      this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator =
        true;
    } else if (
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionType.Value
      )
    ) {
      this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator =
        false;
    }
    if (
      !(
        this.FormViewerDetails.BasicDetails.InfusionType != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionType.Value
        ) &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.FLUID
        ) == 0
      )
    ) {
      this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate =
        true;
      if (
        !this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsinfusRateBasedOnDD ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom =
          true;
        this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom =
          true;
      }
    }
  }
  public RemoveReadOnly(): void {
    this.formViewerDetails.BasicDetails.InfusionDetails.IsInfusionRateReadOnly =
      false;
    this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate =
      true;
  }
  public MakeInfusionRateReadonly(): void {
    this.formViewerDetails.BasicDetails.InfusionDetails.IsInfusionRateReadOnly =
      true;
    this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate =
      false;
    this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel =
      true;
    this.formViewerDetails.BasicDetails.InfusionDetails.IsEnableInfUpperRate =
      false;
    this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl =
      true;
    if (
      !this.FormViewerDetails.BasicDetails.InfusionDetails
        .IsinfusRateBasedOnDD ||
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom =
        false;
      this.formViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom =
        false;
    }
  }
  //public delegate void FormViewerControlFocusDelegate();
  public OnFormViewerControlFocus: Function;
  //public delegate void HomeLeaveMsgFocusDelegate();
  public OnHomeLeaveMsgFocus: Function;
  oiMsgBox_MsgBoxClose(sender: Object, e: MessageEventArgs): void {
    if (this.OnFormViewerControlFocus != null) this.OnFormViewerControlFocus();
  }
  CalculateInfusionRateForDose(): boolean {
    let bDoCalc: boolean = true;
    let arrUOMValues: string[] =
      this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText.Split('/');
    if (arrUOMValues != null && arrUOMValues.length > 1) {
      let nLen: number = arrUOMValues.length;
      let sDenominatorUOM: string = arrUOMValues[nLen - 1];
      let bLastUOMIsTime: boolean =
        this.formViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Where(
          (x) => x.DisplayText == sDenominatorUOM
        ).Any();
      if (bLastUOMIsTime) {
        if (
          String.Equals(
            sDenominatorUOM,
            'hour',
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            sDenominatorUOM,
            'minute',
            StringComparison.InvariantCultureIgnoreCase
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.Rate =
            this.FormViewerDetails.BasicDetails.Dose;
        else
          this.FormViewerDetails.BasicDetails.InfusionDetails.Rate = iMath.Round(
            Convert.ToDouble(this.FormViewerDetails.BasicDetails.Dose) /
              Convert.ToDouble(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriod
              ),
            2
          ).ToString();
        let sNumeratorUOM: string =
          this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText.Substring(
            0,
            this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText.LastIndexOf(
              '/'
            )
          );
        let lstNumeratorUOM: IEnumerable<CListItem> = null;
        lstNumeratorUOM =
          this.formViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(
            (x) => x.DisplayText == sNumeratorUOM
          ).Select((x) => x);
        if (lstNumeratorUOM != null && lstNumeratorUOM.Any())
          this.formViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
            lstNumeratorUOM.First();
        else
          this.formViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: sNumeratorUOM,
            });
        this.formViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
          this.formViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Where(
            (x) => x.DisplayText == sDenominatorUOM
          )
            .Select((x) => x)
            .FirstOrDefault();
        bDoCalc = false;
      }
    }
    return bDoCalc;
  }
  //Not Required for LHS. To be Re-Visited.
  
        infusionrate_Closed(args: AppDialogEventargs): void {
            let calculator: frmInfusionratecalculator;
            let sResult : CListItem;
            this.oChildWindowInf = args.AppChildWindow as ChildWindow;
            if (args.Result == AppDialogResult.Ok && args.Content != null) {
                this.ResetValues();
                calculator = ObjectHelper.CreateType<frmInfusionratecalculator>(args.Content, frmInfusionratecalculator);
                this.fnListViewselect(this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM, this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateNumValue,
                  (o1) => {
                  sResult = o1;
                } );
                if (!this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom = sResult;
                }
                this.fnListViewselect(this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM, this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateDenoValue, (o1) => {
                  sResult = o1;
                });
                if (!this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD || String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom = sResult;
                }
                this.FormViewerDetails.BasicDetails.InfusionDetails.Rate = iMath.Round(Convert.ToDouble(this.FormViewerDetails.BasicDetails.InfusionDetails.CalculatedInfusionrateValue,3),3).ToString();
                args.Content.dupDialogRef.close();
                this.oChildWindowInf.DialogResult = false;
            }
            else {
                if (this.formViewerDetails != null && this.formViewerDetails.BasicDetails != null && this.formViewerDetails.BasicDetails.InfusionDetails != null) {
                     this.formViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked = null;
                     this.formViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked = null;
                }
                args.Content.dupDialogRef.close();
                this.oChildWindowInf.DialogResult = false;
            }
        }
        
  public fnListViewselect(
    lstCollection: ObservableCollection<CListItem>,
    lstSelecteditem: CListItem,
    out1: (sResult: CListItem) => void
  ): void {
    let sResult: CListItem;
    let bInfnFlag: boolean = false;
    sResult = null;
    lstCollection.forEach((infnum) => {
      if (
        lstSelecteditem != null &&
        !String.IsNullOrEmpty(lstSelecteditem.Value)
      ) {
        if (infnum.Value == lstSelecteditem.Value) {
          infnum.IsSelected = true;
          sResult = infnum;
          bInfnFlag = true;
        }
      }
    });
    if (bInfnFlag == false) {
      lstCollection.Add(lstSelecteditem);
      sResult = lstSelecteditem;
      bInfnFlag = true;
    }
    out1(sResult);
  }
  private _IsReviewMandatory: boolean = false;
  public get IsReviewMandatory(): boolean {
    return this._IsReviewMandatory;
  }
  public set IsReviewMandatory(value: boolean) {
    this._IsReviewMandatory = value;
    //NotifyPropertyChanged("IsReviewMandatory");
  }
  private _isGroupHeader: boolean = false;
  public get IsGroupHeader(): boolean {
    return this._isGroupHeader;
  }
  public set IsGroupHeader(value: boolean) {
    this._isGroupHeader = value;
    //NotifyPropertyChanged("IsGroupHeader");
  }
  private _isFirstHeader: boolean = false;
  public get IsFirstHeader(): boolean {
    return this._isFirstHeader;
  }
  public set IsFirstHeader(value: boolean) {
    this._isFirstHeader = value;
    //NotifyPropertyChanged("IsFirstHeader");
  }
  private _isOrderSetHeader: boolean = false;
  public get IsOrderSetHeader(): boolean {
    return this._isOrderSetHeader;
  }
  public set IsOrderSetHeader(value: boolean) {
    this._isOrderSetHeader = value;
    //NotifyPropertyChanged("IsOrderSetHeader");
  }
  private _isOrderSetLastItem: boolean = false;
  public get IsOrderSetLastItem(): boolean {
    return this._isOrderSetLastItem;
  }
  public set IsOrderSetLastItem(value: boolean) {
    this._isOrderSetLastItem = value;
    //NotifyPropertyChanged("IsOrderSetLastItem");
  }
  private _isReviewIconVisible: Visibility = Visibility.Collapsed;
  public get IsReviewIconVisible(): Visibility {
    return this._isReviewIconVisible;
  }
  public set IsReviewIconVisible(value: Visibility) {
    this._isReviewIconVisible = value;
    //NotifyPropertyChanged("IsReviewIconVisible");
  }
  private _isFormViewerIconVisible: Visibility = Visibility.Visible;
  public get IsFormViewerIconVisible(): Visibility {
    return this._isFormViewerIconVisible;
  }
  public set IsFormViewerIconVisible(value: Visibility) {
    this._isFormViewerIconVisible = value;
    //NotifyPropertyChanged("IsFormViewerIconVisible");
  }
  private _showCells: boolean = true;
  public get ShowCells(): boolean {
    return this._showCells;
  }
  public set ShowCells(value: boolean) {
    this._showCells = value;
    //NotifyPropertyChanged("ShowCells");
  }
  private _IsDoseCalcEnabled: boolean = false;
  public get IsDoseCalcEnabled(): boolean {
    return this._IsDoseCalcEnabled;
  }
  public set IsDoseCalcEnabled(value: boolean) {
    this._IsDoseCalcEnabled = value;
    //NotifyPropertyChanged("IsDoseCalcEnabled");
  }
  private _IsDoseCalcPerformed: boolean = false;
  public get IsDoseCalcPerformed(): boolean {
    return this._IsDoseCalcPerformed;
  }
  public set IsDoseCalcPerformed(value: boolean) {
    this._IsDoseCalcPerformed = value;
    //NotifyPropertyChanged("IsDoseCalcPerformed");
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      this.FormViewerDetails.BasicDetails.IsDCIconVisible = this
        .IsDoseCalcPerformed
        ? Visibility.Visible
        : Visibility.Collapsed;
    }
  }
  private _IsDoseCalcPerformedInAmend: boolean = false;
  public get IsDoseCalcPerformedInAmend(): boolean {
    return this._IsDoseCalcPerformedInAmend;
  }
  public set IsDoseCalcPerformedInAmend(value: boolean) {
    this._IsDoseCalcPerformedInAmend = value;
  }
  public bFormViwerOpened: boolean = false;
  private _IsDoseCalcVisible: Visibility = Visibility.Visible;
  public get IsDoseCalcVisible(): Visibility {
    return this._IsDoseCalcVisible;
  }
  public set IsDoseCalcVisible(value: Visibility) {
    this._IsDoseCalcVisible = value;
    //NotifyPropertyChanged("IsDoseCalcVisible");
  }
  private oBtnDriprateClick: RelayCommand;
  public get BtnDriprateClick(): RelayCommand {
    if (this.oBtnDriprateClick == null) {
      this.oBtnDriprateClick = new RelayCommand((s,e) => {this.LaunchDriprateCalculator();});
    }
    return this.oBtnDriprateClick;
  }
  public oDoseCalcData: DoseDetailsdata;
  private oBtnDCCalcClick: RelayCommand;
  public get BtnDCCalcClick(): RelayCommand {
    if (this.oBtnDCCalcClick == null) {
      this.oBtnDCCalcClick = new RelayCommand((s,e) => {this.LaunchDCCalcDetails()});
    }
    return this.oBtnDCCalcClick;
  }
  IsDCLaunchClicked: boolean = false;
  public LaunchDCCalcDetails(): void {
    if (this.DoseCalculationDetails != null) {
      let sBSA: number = 0;
      let sIBWt: number = 0;
      let sAjBWt: number = 0;
      let sRecWt: number = 0;
      let scalVal: string = String.Empty;
      let sLowEvent: string = String.Empty;
      let sReqDoseUOM: string = String.Empty;
      let sReqDoseThirdUOM: string = String.Empty;
      let sReqDoseForDetails: string = String.Empty;
      if (
        this.FormViewerDetails.BasicDetails.DoseUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText
        )
      ) {
        sReqDoseUOM = this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText;
      } else if (
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom.DisplayText
        )
      ) {
        sReqDoseUOM =
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom.DisplayText;
      }
      if (
        !String.IsNullOrEmpty(
          this.DoseCalculationDetails.RequestDoseThirdUOMLzoID
        )
      ) {
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDenominatorUOM != null &&
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDenominatorUOM.Count > 0
        ) {
          let litmReqDoseThirdUOM: CListItem =
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Where(
              (s) =>
                s.Value == this.DoseCalculationDetails.RequestDoseThirdUOMLzoID
            ).First();
          if (
            litmReqDoseThirdUOM != null &&
            !String.IsNullOrEmpty(litmReqDoseThirdUOM.DisplayText)
          ) {
            sReqDoseThirdUOM = litmReqDoseThirdUOM.DisplayText;
          }
        }
      }
      this.oDoseCalcData = new DoseDetailsdata();
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.Height) &&
        !String.Equals(this.DoseCalculationDetails.Height, '0')
      ) {
        this.oDoseCalcData.HeightVal = CommonBB.ConvertHeightIntoMeters(
          this.DoseCalculationDetails.HeightUOM,
          Convert.ToDouble(this.DoseCalculationDetails.Height)
        ).ToString();
        if (!String.IsNullOrEmpty(this.DoseCalculationDetails.HeightUOM))
          this.oDoseCalcData.HeightVal += ' ' + medcommonbbconstant.Meter;
        if (this.DoseCalculationDetails.IsHeightEstimated) {
          this.oDoseCalcData.HeightVal += ' ' + DoseCalculator.IsEstimated_Text;
          if (this.DoseCalculationDetails.RecordedHeightDTTM != null)
            this.oDoseCalcData.HeightVal +=
              '\n on ' +
              this.DoseCalculationDetails.RecordedHeightDTTM.ToString(
                CConstants.DateHMFormat
              );
        } else if (this.DoseCalculationDetails.RecordedHeightDTTM != null)
          this.oDoseCalcData.HeightVal +=
            ' on ' +
            this.DoseCalculationDetails.RecordedHeightDTTM.ToString(
              CConstants.DateHMFormat
            );
      }
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.Weight) &&
        !String.Equals(this.DoseCalculationDetails.Weight, '0')
      ) {
        sRecWt = 1;
        this.oDoseCalcData.RecBdyWeight = CommonBB.ConvertWeightIntoKg(
          this.DoseCalculationDetails.WeightUOM,
          Convert.ToDouble(this.DoseCalculationDetails.Weight)
        ).ToString();
        if (!String.IsNullOrEmpty(this.DoseCalculationDetails.WeightUOM))
          this.oDoseCalcData.RecBdyWeight += ' ' + medcommonbbconstant.KG;
        if (this.DoseCalculationDetails.IsWeightEstimated) {
          this.oDoseCalcData.RecBdyWeight +=
            ' ' + DoseCalculator.IsEstimated_Text + ' ';
          if (this.DoseCalculationDetails.RecordedWeightDTTM != null)
            this.oDoseCalcData.RecBdyWeight +=
              '\n on ' +
              this.DoseCalculationDetails.RecordedWeightDTTM.ToString(
                CConstants.DateHMFormat
              );
        } else if (this.DoseCalculationDetails.RecordedWeightDTTM != null)
          this.oDoseCalcData.RecBdyWeight +=
            ' on ' +
            this.DoseCalculationDetails.RecordedWeightDTTM.ToString(
              CConstants.DateHMFormat
            );
      }
      if (
        this.DoseCalculationDetails.IBWWeight > 0 &&
        !String.IsNullOrEmpty(this.DoseCalculationDetails.DoseCalcBasedOn) &&
        this.DoseCalculationDetails.DoseCalcBasedOn.Equals(
          CConstants.WeightCode
        ) &&
        !String.IsNullOrEmpty(this.DoseCalculationDetails.WeightOption) &&
        this.DoseCalculationDetails.WeightOption.Equals(
          CConstants.IBWConceptCode
        )
      ) {
        sIBWt = 1;
        this.oDoseCalcData.IdealWeight =
          this.DoseCalculationDetails.IBWWeight.ToString();
        if (
          !String.IsNullOrEmpty(
            this.DoseCalculationDetails.RequestDoseSecondUOM
          )
        )
          this.oDoseCalcData.IdealWeight +=
            ' ' +
            CommonBB.GetText(
              this.DoseCalculationDetails.RequestDoseSecondUOM,
              DCReqDoseSecondUOMConceptCodes.ConceptCodes
            );
      }
      if (
        this.DoseCalculationDetails.ABWWeight > 0 &&
        !String.IsNullOrEmpty(this.DoseCalculationDetails.DoseCalcBasedOn) &&
        this.DoseCalculationDetails.DoseCalcBasedOn.Equals(
          CConstants.WeightCode
        ) &&
        !String.IsNullOrEmpty(this.DoseCalculationDetails.WeightOption) &&
        this.DoseCalculationDetails.WeightOption.Equals(
          CConstants.ABWConceptCode
        )
      ) {
        sAjBWt = 1;
        this.oDoseCalcData.AdjBdyWeight =
          this.DoseCalculationDetails.ABWWeight.ToString();
        if (
          !String.IsNullOrEmpty(
            this.DoseCalculationDetails.RequestDoseSecondUOM
          )
        )
          this.oDoseCalcData.AdjBdyWeight +=
            ' ' +
            CommonBB.GetText(
              this.DoseCalculationDetails.RequestDoseSecondUOM,
              DCReqDoseSecondUOMConceptCodes.ConceptCodes
            );
      }
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.BSA) &&
        !String.IsNullOrEmpty(this.DoseCalculationDetails.DoseCalcBasedOn) &&
        this.DoseCalculationDetails.DoseCalcBasedOn.Equals(
          medcommonbbconstant.BSACode
        )
      ) {
        sBSA = 1;
        this.oDoseCalcData.BSA = this.DoseCalculationDetails.BSA;
        this.oDoseCalcData.BSA +=
          ' ' +
          CommonBB.GetText(
            this.DoseCalculationDetails.RequestDoseSecondUOM,
            DCReqDoseSecondUOMConceptCodes.ConceptCodes
          );
        this.oDoseCalcData.BSA +=
          '(' +
          CommonBB.GetText(
            this.DoseCalculationDetails.BSAFormula,
            CommonDomainValues.BSAFormula
          ) +
          ')';
      }
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.RequestDose) &&
        !String.Equals(this.DoseCalculationDetails.RequestDose, '0')
      ) {
        this.oDoseCalcData.Reqdose = this.DoseCalculationDetails.RequestDose;
        if (this.oDoseCalcData.Reqdose.StartsWith('.')) {
          this.oDoseCalcData.Reqdose = '0' + this.oDoseCalcData.Reqdose;
        }
        if (!String.IsNullOrEmpty(sReqDoseUOM))
          this.oDoseCalcData.Reqdose += ' ' + sReqDoseUOM;
        sReqDoseForDetails = this.oDoseCalcData.Reqdose;
        if (
          !String.IsNullOrEmpty(
            this.DoseCalculationDetails.RequestDoseSecondUOM
          )
        )
          this.oDoseCalcData.Reqdose +=
            '/' +
            CommonBB.GetText(
              this.DoseCalculationDetails.RequestDoseSecondUOM,
              DCReqDoseSecondUOMConceptCodes.ConceptCodes
            );
        if (
          !String.IsNullOrEmpty(
            this.DoseCalculationDetails.RequestDoseThirdUOMLzoID
          ) &&
          !String.IsNullOrEmpty(sReqDoseThirdUOM)
        ) {
          this.oDoseCalcData.Reqdose += '/' + sReqDoseThirdUOM;
          sReqDoseForDetails += '/' + sReqDoseThirdUOM;
        }
      }
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.TotalDailyDose) &&
        this.DoseCalculationDetails.FrequencyOID > 0
      ) {
        this.oDoseCalcData.IndivDose = CommonBB.GetText(
          medcommonbbconstant.TotDailydose,
          MedicationCommonConceptCodeData.ConceptCodes
        );
      } else {
        this.oDoseCalcData.IndivDose = CommonBB.GetText(
          medcommonbbconstant.IndDose,
          MedicationCommonConceptCodeData.ConceptCodes
        );
      }
      if (
        this.DoseCalculationDetails.FrequencyOID > 0 &&
        this.FormViewerDetails.BasicDetails.Frequency != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.Frequency.DisplayText
        )
      ) {
        this.oDoseCalcData.Freq =
          this.FormViewerDetails.BasicDetails.Frequency.DisplayText;
        if (this.FormViewerDetails.BasicDetails.Frequency.Tag != null) {
          let FreqTagdetail: string[] = ObjectHelper.CreateType<string[]>(
            this.FormViewerDetails.BasicDetails.Frequency.Tag,
            'string[]'
          );
          if (
            FreqTagdetail != null &&
            FreqTagdetail.length > 0 &&
            FreqTagdetail.length > 6
          ) {
            sLowEvent = FreqTagdetail[6];
          }
        }
      }
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.CalculatedDose) ||
        !String.IsNullOrEmpty(this.DoseCalculationDetails.CalculatedPerDose)
      ) {
        this.oDoseCalcData.Caldose = this.DoseCalculationDetails.CalculatedDose;
        if (String.IsNullOrEmpty(this.oDoseCalcData.Caldose)) {
          this.oDoseCalcData.Caldose =
            this.DoseCalculationDetails.CalculatedPerDose;
        }
        this.oDoseCalcData.Caldose += ' ' + sReqDoseUOM;
        if (
          !String.IsNullOrEmpty(
            this.DoseCalculationDetails.RequestDoseThirdUOMLzoID
          ) &&
          !String.IsNullOrEmpty(sReqDoseThirdUOM)
        ) {
          this.oDoseCalcData.Caldose += '/' + sReqDoseThirdUOM;
        }
      }
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.TotalDailyDose) &&
        this.DoseCalculationDetails.FrequencyOID > 0
      ) {
        this.oDoseCalcData.TotDailyDose =
          this.DoseCalculationDetails.TotalDailyDose;
        this.oDoseCalcData.TotDailyDose += ' ' + sReqDoseUOM;
      }
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.OrderedAmount) &&
        !String.Equals(this.DoseCalculationDetails.OrderedAmount, '0')
      ) {
        this.oDoseCalcData.OrdAmtDse =
          this.DoseCalculationDetails.OrderedAmount;
          if (this.oDoseCalcData.OrdAmtDse.toString().StartsWith('.')) {
          this.oDoseCalcData.OrdAmtDse = '0' + this.oDoseCalcData.OrdAmtDse;
        }
        this.oDoseCalcData.OrdAmtDse += ' ' + sReqDoseUOM;
        if (
          !String.IsNullOrEmpty(
            this.DoseCalculationDetails.RequestDoseThirdUOMLzoID
          ) &&
          !String.IsNullOrEmpty(sReqDoseThirdUOM)
        ) {
          this.oDoseCalcData.OrdAmtDse += '/' + sReqDoseThirdUOM;
        }
      }
      if (!String.IsNullOrEmpty(this.DoseCalculationDetails.OverrideReason)) {
        this.oDoseCalcData.Reasonforoverride = CommonBB.GetText(
          this.DoseCalculationDetails.OverrideReason,
          DCOverridereasonConceptCodes.ConceptCodes
        );
      }
      this.oDoseCalcData.FreqVisible = Visibility.Collapsed;
      this.oDoseCalcData.TotDailyDseVisible = Visibility.Collapsed;
      if (sBSA == 1) {
        this.oDoseCalcData.DoseCalTxt1 = CommonBB.GetText(
          this.DoseCalculationDetails.BSAFormula,
          CommonDomainValues.BSAFormula
        );
        this.oDoseCalcData.DoseCalTxt1 +=
          ' BSA(' +
          CommonBB.GetText(
            this.DoseCalculationDetails.RequestDoseSecondUOM,
            DCReqDoseSecondUOMConceptCodes.ConceptCodes
          ) +
          ')';
        scalVal =
          this.DoseCalculationDetails.BSA +
          ' ' +
          CommonBB.GetText(
            this.DoseCalculationDetails.RequestDoseSecondUOM,
            DCReqDoseSecondUOMConceptCodes.ConceptCodes
          );
        this.oDoseCalcData.DoseCalVal1 = '= ' + scalVal;
      } else if (sAjBWt == 1) {
        this.oDoseCalcData.DoseCalTxt1 = DoseCalculator.cmdCalcAJBW_Text;
        this.oDoseCalcData.DoseCalVal1 = '= ' + this.oDoseCalcData.AdjBdyWeight;
        scalVal = this.oDoseCalcData.AdjBdyWeight;
      } else if (sIBWt == 1) {
        this.oDoseCalcData.DoseCalTxt1 = DoseCalculator.cmdCalcIBW_Text;
        this.oDoseCalcData.DoseCalVal1 = '= ' + this.oDoseCalcData.IdealWeight;
        scalVal = this.oDoseCalcData.IdealWeight;
      } else if (sRecWt == 1) {
        this.oDoseCalcData.DoseCalTxt1 = DoseCalculator.cmdCalcEBW_Text;
        this.oDoseCalcData.DoseCalVal1 =
          '= ' +
          CommonBB.ConvertWeightIntoKg(
            this.DoseCalculationDetails.WeightUOM,
            Convert.ToDouble(this.DoseCalculationDetails.Weight)
          ).ToString();
        if (!String.IsNullOrEmpty(this.DoseCalculationDetails.WeightUOM)) {
          this.oDoseCalcData.DoseCalVal1 += ' ' + medcommonbbconstant.KG;
        }
        scalVal = this.oDoseCalcData.DoseCalVal1.Split('=')[1];
        if (this.DoseCalculationDetails.IsWeightEstimated) {
          this.oDoseCalcData.DoseCalVal1 +=
            ' ' + DoseCalculator.IsEstimated_Text;
        }
      }
      if (
        !String.IsNullOrEmpty(this.DoseCalculationDetails.TotalDailyDose) &&
        this.DoseCalculationDetails.FrequencyOID > 0
      ) {
        this.oDoseCalcData.FreqVisible = Visibility.Visible;
        this.oDoseCalcData.TotDailyDseVisible = Visibility.Visible;
        this.oDoseCalcData.DoseCalTxt2 = DoseCalculator.lblTotalDailyDose_Text;
        this.oDoseCalcData.DoseCalVal2 =
          '= ' +
          sReqDoseForDetails +
          ' X ' +
          scalVal +
          '\n= ' +
          this.oDoseCalcData.TotDailyDose;
        this.oDoseCalcData.DoseCalTxt3 = DoseCalculator.lblFrequency_Text;
        this.oDoseCalcData.DoseCalVal3 = '= ' + this.oDoseCalcData.Freq;
        this.oDoseCalcData.DoseCalTxt4 = DoseCalculator.lblCalcAmtPerDose_Text;
        this.oDoseCalcData.DoseCalVal4 =
          '= ' +
          this.oDoseCalcData.TotDailyDose +
          '/' +
          sLowEvent +
          '\n= ' +
          this.oDoseCalcData.Caldose;
        this.oDoseCalcData.DoseCalTxt5 =
          DoseCalculator.lblOrderedAmtPerDose_Text;
        this.oDoseCalcData.DoseCalVal5 = '= ' + this.oDoseCalcData.OrdAmtDse;
        if (!String.IsNullOrEmpty(this.oDoseCalcData.Reasonforoverride)) {
          this.oDoseCalcData.DoseCalVal5 +=
            '\n (' + this.oDoseCalcData.Reasonforoverride + ')';
        }
      } else {
        if (!String.IsNullOrEmpty(this.oDoseCalcData.Reqdose)) {
          this.oDoseCalcData.DoseCalTxt4 =
            DoseCalculator.lblCalcAmtPerDose_Text;
          this.oDoseCalcData.DoseCalVal4 =
            '= ' +
            sReqDoseForDetails +
            ' X ' +
            scalVal +
            '\n= ' +
            this.oDoseCalcData.Caldose;
        }
        this.oDoseCalcData.DoseCalTxt5 =
          DoseCalculator.lblOrderedAmtPerDose_Text;
        this.oDoseCalcData.DoseCalVal5 = '= ' + this.oDoseCalcData.OrdAmtDse;
        if (!String.IsNullOrEmpty(this.oDoseCalcData.Reasonforoverride)) {
          this.oDoseCalcData.DoseCalVal5 +=
            '\n (' + this.oDoseCalcData.Reasonforoverride + ')';
        }
      }
      if (!this.IsDCLaunchClicked) {
        this.IsDCLaunchClicked = true;
        // Not Required for LHS. To be Re-Visited.
        let ddetChild: MedDoseDetails = new MedDoseDetails();
        if (this.IsDoseCalcPerformed) {
            ddetChild.DataContext = this.oDoseCalcData;
            let stitle: string = "Dose calculation details - LORENZO";
            AppActivity.OpenWindow(stitle, ddetChild, (s,e) => {this.omedDoseDetails_Closed(s);}, "", false, 570, 820, false, WindowButtonType.Close, null);
        }
      }
    }
  }
  omedDoseDetails_Closed(args: AppDialogEventargs): void {
    this.IsDCLaunchClicked = false;
    (args.AppChildWindow as ChildWindow).DialogResult = true;
  }
  private _EditedGridID: number = 0;
  public get EditedGridID(): number {
    return this._EditedGridID;
  }
  public set EditedGridID(value: number) {
    this._EditedGridID = value;
  }
  private _IsProdOptChange: number = 0;
  public get IsProdOptChange(): number {
    return this._IsProdOptChange;
  }
  public set IsProdOptChange(value: number) {
    this._IsProdOptChange = value;
  }
  public drugProductDetails: IPPMAManagePrescSer.DrugItemBasicInfo;
  public _ward_stockdetails_visible: string;
  public get wardstockdetailsvisible(): string {
    return this._ward_stockdetails_visible;
  }
  public set wardstockdetailsvisible(value: string) {
    this._ward_stockdetails_visible = value;
    //NotifyPropertyChanged("wardstockdetailsvisible");
  }
  private _DefDripCalc_InfRateInDose: string;
  public get DefDripCalc_InfRateInDose(): string {
    return this._DefDripCalc_InfRateInDose;
  }
  public set DefDripCalc_InfRateInDose(value: string) {
    this._DefDripCalc_InfRateInDose = value;
  }
  private DefDripCalc_InfRateInDoseUOM: string = null;
  DefDripCalc_InfVolume: string = null;
  DefDripCalc_InfVolumeUOM: string = null;
  private DefDripCalc_InfRateInDoseUOMOID: number = null;
  private DefDripCalc_InfRateInDosePerUOMOID: number = null;
  private DefDripCalc_DropFactor: number = null;
  private DefDripCalc_InfStrength: number = null;
  DefDripCalc_InfConcentration: number = null;
  private DefDripCalc_InfStrengthUOM: CListItem = null;
  DefDripCalc_InfConcentrationUOM: CListItem = null;
  DefDripCalc_InfConcentrationPerUOM;
  private SetDripRateCalculatorDefaults(oDripCalVM: DripRateCalcVM): void {
    if (oDripCalVM == null && this.DefDripCalc_InfRateInDose == null) {
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom !=
          null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom !=
          null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
        )
      ) {
        this.DefDripCalc_InfRateInDose = !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
        )
          ? this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
          : null;
        this.DefDripCalc_InfRateInDoseUOM =
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue;
        this.DefDripCalc_InfRateInDoseUOMOID = Convert.ToInt64(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom
            .Value
        );
        this.DefDripCalc_InfRateInDosePerUOMOID = Convert.ToInt64(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom
            .Value
        );
      } else if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDoseUOM
        )
      ) {
        this.DefDripCalc_InfRateInDose = !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose
        )
          ? this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose
          : null;
        this.DefDripCalc_InfRateInDoseUOM =
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDoseUOM;
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.Value
          )
        )
          this.DefDripCalc_InfRateInDoseUOMOID = Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.Value
          );
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.Value
          )
        )
          this.DefDripCalc_InfRateInDosePerUOMOID = Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.Value
          );
      } else if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.Dose
        ) &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue
        ) &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdmin
        ) &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .InfusionPeriodMedAdminUOM != null
      ) {
        let dlInfPeriod: number = Convert.ToDouble(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdmin
        );
        let dlInfDose: number = Convert.ToDouble(
          this.FormViewerDetails.BasicDetails.RecordAdmin.Dose
        );
        let dlInfRateDose: number = iMath.Round(dlInfDose / dlInfPeriod, 2);
        if (dlInfRateDose > 0)
          this.DefDripCalc_InfRateInDose = Convert.ToString(dlInfRateDose);
        if (
          this.FormViewerDetails.BasicDetails.DoseUOM != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DoseUOM.Value
          )
        ) {
          this.DefDripCalc_InfRateInDoseUOMOID = Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.DoseUOM.Value
          );
        }
        if (
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .InfusionPeriodMedAdminUOM != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfusionPeriodMedAdminUOM.Value
          )
        ) {
          this.DefDripCalc_InfRateInDosePerUOMOID = Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfusionPeriodMedAdminUOM.Value
          );
        }
        this.DefDripCalc_InfRateInDoseUOM =
          this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue +
          '/' +
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .InfusionPeriodMedAdminUOM.DisplayText;
      }
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume
        ) &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .ConcentrationVolumeUOM != null &&
        Convert.ToInt64(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM
            .Value
        ) > 0
      ) {
        this.DefDripCalc_InfVolume =
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume;
        this.DefDripCalc_InfVolumeUOM =
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM.DisplayText;
      }
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength
        )
      ) {
        this.DefDripCalc_InfStrength = !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength
        )
          ? Convert.ToDouble(
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .ConcentrationStrength
            )
          : 0;
      }
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength !=
          null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .ConcentrationStrengthUOM != null &&
        Convert.ToInt64(
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .ConcentrationStrengthUOM.Value
        ) > 0
      ) {
        this.DefDripCalc_InfStrengthUOM = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText:
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .ConcentrationStrength,
            Value:
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .ConcentrationStrengthUOM.Value,
          }
        );
      }
    } else if (oDripCalVM != null) {
      this.DefDripCalc_InfRateInDose =
        oDripCalVM.InfRateInDose != null
          ? oDripCalVM.InfRateInDose.ToString()
          : null;
      this.DefDripCalc_InfRateInDoseUOM =
        oDripCalVM.InfRateInDoseUOM != null &&
        oDripCalVM.InfRateInDosePerUOM != null
          ? oDripCalVM.InfRateInDoseUOM.DisplayText +
            '/' +
            oDripCalVM.InfRateInDosePerUOM.DisplayText
          : null;
      this.DefDripCalc_InfRateInDoseUOMOID =
        oDripCalVM.InfRateInDoseUOM != null &&
        !String.IsNullOrEmpty(oDripCalVM.InfRateInDoseUOM.Value)
          ? Convert.ToInt64(oDripCalVM.InfRateInDoseUOM.Value)
          : 0;
      this.DefDripCalc_InfRateInDosePerUOMOID =
        oDripCalVM.InfRateInDosePerUOM != null &&
        !String.IsNullOrEmpty(oDripCalVM.InfRateInDosePerUOM.Value)
          ? Convert.ToInt64(oDripCalVM.InfRateInDosePerUOM.Value)
          : 0;
      this.DefDripCalc_InfVolume =
        oDripCalVM.InfVolume != null ? oDripCalVM.InfVolume.ToString() : null;
      this.DefDripCalc_InfVolumeUOM =
        oDripCalVM.InfVolumeUOM != null &&
        !String.IsNullOrEmpty(oDripCalVM.InfVolumeUOM.DisplayText)
          ? oDripCalVM.InfVolumeUOM.DisplayText
          : null;
      this.DefDripCalc_InfStrength =
        oDripCalVM.InfStrength != null ? oDripCalVM.InfStrength : null;
      this.DefDripCalc_InfStrengthUOM =
        oDripCalVM.InfStrengthUOM != null ? oDripCalVM.InfStrengthUOM : null;
      this.DefDripCalc_InfConcentration =
        oDripCalVM.InfConcentration != null
          ? oDripCalVM.InfConcentration
          : null;
      this.DefDripCalc_InfConcentrationUOM =
        oDripCalVM.InfConcentrationUOM != null
          ? oDripCalVM.InfConcentrationUOM
          : null;
      this.DefDripCalc_InfConcentrationPerUOM =
        oDripCalVM.InfConcentrationPerUOM != null
          ? oDripCalVM.InfConcentrationPerUOM
          : null;
      this.DefDripCalc_DropFactor =
        oDripCalVM.DropFactor != null ? oDripCalVM.DropFactor : null;
    }
  }
  public IsStartDTTMAssignedForAmend: boolean = false;
  public LaunchDriprateCalculator(): void {
    let oCommon: DripRateCommon = new DripRateCommon();
    let dInfRate: number = 0;
    let dVolume: number = 0;
    let dDose: number = 0;
    let PresVolmeUOM: string = String.Empty;
    let IdentifyingOID: number = 0;
    let IdentifyingType: string = String.Empty;
    let PrescriptionItemOID: number = 0;
    let DoseValue: string = String.Empty;
    let liInfRateUOM: CListItem = new CListItem();
    let liInfRatePerUOM: CListItem = new CListItem();
    let liInfDoseUOM: CListItem = new CListItem();
    let sHeader: string = String.Empty;
    sHeader = this.FormViewerDetails.BasicDetails.IdentifyingName;
    if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext
      )
    )
      sHeader =
        sHeader +
        ' ' +
        String.Format(
          Resource.Infusion.InFluid_text,
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext
        );
    this.SetDripRateCalculatorDefaults(null);
    if (this.FormViewerDetails.BasicDetails.IdentifyingOID > 0)
      IdentifyingOID = this.FormViewerDetails.BasicDetails.IdentifyingOID;
    if (
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.IdentifyingType)
    )
      IdentifyingType = this.FormViewerDetails.BasicDetails.IdentifyingType;
    if (this.FormViewerDetails.BasicDetails.PrescibableItemOID > 0)
      PrescriptionItemOID =
        this.FormViewerDetails.BasicDetails.PrescibableItemOID;
    if (
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.DoseType.Value)
    )
      DoseValue = this.FormViewerDetails.BasicDetails.DoseType.Value;
    oCommon.DefaultDripRate =
      this.FormViewerDetails.BasicDetails.RecordAdmin.DripRate;
    oCommon.DefaultDropFactor =
      this.DefDripCalc_DropFactor != null
        ? Convert.ToInt32(this.DefDripCalc_DropFactor)
        : 0;
    if (!this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfRateVolBased) {
      if (!String.IsNullOrEmpty(this.DefDripCalc_InfRateInDose))
        dInfRate = Convert.ToDouble(this.DefDripCalc_InfRateInDose);
      if (this.DefDripCalc_InfStrength != null)
        dDose = Convert.ToDouble(this.DefDripCalc_InfStrength);
      if (
        !String.IsNullOrEmpty(this.DefDripCalc_InfVolume) &&
        !String.IsNullOrEmpty(this.DefDripCalc_InfVolumeUOM)
      ) {
        dVolume = Convert.ToInt32(this.DefDripCalc_InfVolume);
        PresVolmeUOM = this.DefDripCalc_InfVolumeUOM;
      }
      liInfDoseUOM = this.DefDripCalc_InfStrengthUOM;
      oCommon.DefaultInfConcentration =
        this.DefDripCalc_InfConcentration != null
          ? Convert.ToDouble(this.DefDripCalc_InfConcentration)
          : 0;
      oCommon.DefaultInfConcentrationUOM =
        this.DefDripCalc_InfConcentrationUOM != null
          ? this.DefDripCalc_InfConcentrationUOM
          : null;
      oCommon.DefaultInfConcentrationPerUOM =
        this.DefDripCalc_InfConcentrationPerUOM != null
          ? this.DefDripCalc_InfConcentrationPerUOM
          : null;
      if (this.DefDripCalc_InfRateInDoseUOM != null) {
        let arrInfRateUOM: string[] =
          this.DefDripCalc_InfRateInDoseUOM.Split('/');
        if (
          arrInfRateUOM.Count() == 2 &&
          this.DefDripCalc_InfRateInDoseUOMOID > 0 &&
          this.DefDripCalc_InfRateInDosePerUOMOID > 0
        ) {
          liInfRateUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: arrInfRateUOM[0],
            Value: this.DefDripCalc_InfRateInDoseUOMOID.ToString(),
          });
          liInfRatePerUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: arrInfRateUOM[1],
            Value: this.DefDripCalc_InfRateInDosePerUOMOID.ToString(),
          });
        } else if (
          arrInfRateUOM.Count() == 3 &&
          this.DefDripCalc_InfRateInDoseUOMOID > 0 &&
          this.DefDripCalc_InfRateInDosePerUOMOID > 0
        ) {
          liInfRateUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: arrInfRateUOM[0] + '/' + arrInfRateUOM[1],
            Value: this.DefDripCalc_InfRateInDoseUOMOID.ToString(),
          });
          liInfRatePerUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: arrInfRateUOM[2],
            Value: this.DefDripCalc_InfRateInDosePerUOMOID.ToString(),
          });
        }
      } else {
        let dInfPeriod: number = 0.0;
        if (
          dDose > 0 &&
          this.FormViewerDetails.BasicDetails.RecordAdmin.Dose != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue
          ) &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
          ) &&
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfusionPeriodUom != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom.Value
          )
        ) {
          let oDoselist: CListItem = null;
          if (
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM != null &&
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM.Count > 0
          ) {
            let sDose =
              this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM.Where(
                (oDose) =>
                  String.Compare(
                    oDose.DisplayText,
                    this.FormViewerDetails.BasicDetails.RecordAdmin
                      .DoseUOMValue,
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
              ).Select((oDose) => oDose);
            if (sDose != null && sDose.Count() > 0) {
              oDoselist = sDose.FirstOrDefault();
            }
          }
          dInfPeriod = Convert.ToDouble(
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
          );
          dInfRate = iMath.Round(dDose / dInfPeriod, 2);
          liInfRateUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oDoselist.DisplayText,
            Value: oDoselist.Value,
          });
          liInfRatePerUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfusionPeriodUom.DisplayText,
            Value:
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.Value.ToString(),
          });
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate !=
        this.DefDripCalc_InfRateInDose
      ) {
        oCommon.DefaultInfRateInVol = !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
        )
          ? Convert.ToDouble(
              this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
            )
          : 0;
        if (
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .InfusionRateUOMValue != null
        ) {
          let arrInfRateUOM: string[] =
            this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue.Split(
              '/'
            );
          if (
            arrInfRateUOM.Count() == 2 &&
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateNumeratorUom != null &&
            Convert.ToInt64(
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom.Value
            ) > 0 &&
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateDinominatorUom != null &&
            Convert.ToInt64(
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom.Value
            ) > 0
          ) {
            oCommon.DefaultInfRateInVolUOM = ObjectHelper.CreateObject(
              new CListItem(),
              {
                DisplayText: arrInfRateUOM[0],
                Value:
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateNumeratorUom.Value,
              }
            );
            oCommon.DefaultInfRateInVolPerUOM = ObjectHelper.CreateObject(
              new CListItem(),
              {
                DisplayText: arrInfRateUOM[1],
                Value:
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateDinominatorUom.Value,
              }
            );
          } else if (
            arrInfRateUOM.Count() == 3 &&
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateNumeratorUom != null &&
            Convert.ToInt64(
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom.Value
            ) > 0 &&
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateDinominatorUom != null &&
            Convert.ToInt64(
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom.Value
            ) > 0
          ) {
            oCommon.DefaultInfRateInVolUOM = ObjectHelper.CreateObject(
              new CListItem(),
              {
                DisplayText: arrInfRateUOM[0] + '/' + arrInfRateUOM[1],
                Value:
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateNumeratorUom.Value,
              }
            );
            oCommon.DefaultInfRateInVolPerUOM = ObjectHelper.CreateObject(
              new CListItem(),
              {
                DisplayText: arrInfRateUOM[2],
                Value:
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateDinominatorUom.Value,
              }
            );
          }
        }
      }
      oCommon.IsMedicationActionBegun = true;
    } else {
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
        )
      )
        dInfRate = Convert.ToDouble(
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
        );
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength
        )
      )
        dDose = Convert.ToDouble(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength
        );
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume
        ) &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .ConcentrationVolumeUOM != null &&
        Convert.ToInt64(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM
            .Value
        ) > 0
      ) {
        dVolume = Convert.ToInt32(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume
        );
        PresVolmeUOM =
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM
            .DisplayText;
      }
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue !=
        null
      ) {
        let arrInfRateUOM: string[] =
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue.Split(
            '/'
          );
        if (
          arrInfRateUOM.Count() == 2 &&
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom !=
            null &&
          Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom
              .Value
          ) > 0 &&
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .InfRateDinominatorUom != null &&
          Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateDinominatorUom.Value
          ) > 0
        ) {
          liInfRateUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom.DisplayText,
            Value:
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom.Value,
          });
          liInfRatePerUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom.DisplayText,
            Value:
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom.Value,
          });
        } else if (
          arrInfRateUOM.Count() == 3 &&
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom !=
            null &&
          Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom
              .Value
          ) > 0 &&
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .InfRateDinominatorUom != null &&
          Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateDinominatorUom.Value
          ) > 0
        ) {
          liInfRateUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: arrInfRateUOM[0] + '/' + arrInfRateUOM[1],
            Value:
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom.Value,
          });
          liInfRatePerUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: arrInfRateUOM[2],
            Value:
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom.Value,
          });
        }
      }
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength
        ) &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .ConcentrationStrengthUOM != null &&
        Convert.ToInt64(
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .ConcentrationStrengthUOM.Value
        ) > 0
      ) {
        liInfDoseUOM = ObjectHelper.CreateObject(new CListItem(), {
          DisplayText:
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .ConcentrationStrength,
          Value:
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .ConcentrationStrengthUOM.Value,
        });
      }
    }
    if (dDose <= 0) {
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength
        ) &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .ConcentrationStrengthUOM != null &&
        Convert.ToInt64(
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .ConcentrationStrengthUOM.Value
        ) > 0
      ) {
        liInfDoseUOM = ObjectHelper.CreateObject(new CListItem(), {
          DisplayText:
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .ConcentrationStrength,
          Value:
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .ConcentrationStrengthUOM.Value,
        });
      }
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength
        )
      )
        dDose = Convert.ToDouble(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength
        );
    }
    if (dVolume <= 0) {
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume
        ) &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .ConcentrationVolumeUOM != null &&
        Convert.ToInt64(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM
            .Value
        ) > 0
      ) {
        dVolume = Convert.ToInt32(
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume
        );
        PresVolmeUOM =
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM
            .DisplayText;
      }
    }
    oCommon.oDripRateParams = new DripRateParams();
    oCommon.oDripRateParams.sDrugname = sHeader;
    oCommon.oDripRateParams.PrescInfRate = dInfRate;
    oCommon.oDripRateParams.PrescInfRateUOM = liInfRateUOM;
    oCommon.oDripRateParams.PrescInfRatePerUOM = liInfRatePerUOM;
    oCommon.oDripRateParams.PrescVolume = dVolume;
    oCommon.oDripRateParams.PrescVolumeUOM = PresVolmeUOM;
    oCommon.oDripRateParams.Dose = dDose;
    oCommon.oDripRateParams.PrescDoseUOM = liInfDoseUOM;
    oCommon.oDripRateParams.IdentifyingOID = IdentifyingOID;
    oCommon.oDripRateParams.IdentifyingType = IdentifyingType;
    oCommon.oDripRateParams.PrscItemOID = PrescriptionItemOID;
    oCommon.oDripRateParams.DoseType = DoseValue;
    oCommon.oDripRateParams.ConcentrationsStrengthUOMlst =
      this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOMlist;
    oCommon.oDripRateParams.ConcentrationVolumeUOMlst =
      this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOMlist;
    oCommon.oDripRateParams.InfusionRateNumlist =
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM;
    oCommon.oDripRateParams.EnableInfusionrate = true;
    oCommon.LaunchDripRateCalculator(oCommon.oDripRateParams, (s, e) => {
      this._oCallBacksource(s, e);
    });
  }
  _oCallBacksource(oDlgAction: AppChildDialogAction, oResult: Object): void {
    if (oDlgAction == AppChildDialogAction.Ok) {
      if (oResult != null) {
        let oDripCalVM: DripRateCalcVM =
          ObjectHelper.CreateType<DripRateCalcVM>(oResult, DripRateCalcVM);
        if(oDripCalVM.DripRate != null)
        this.FormViewerDetails.BasicDetails.RecordAdmin.DripRate =
          oDripCalVM.DripRate.ToString();
        else
        this.FormViewerDetails.BasicDetails.RecordAdmin.DripRate = String.Empty;
        
        this.SetDripRateCalculatorDefaults(oDripCalVM);
        if (oDripCalVM.InfRateInDose > 0)
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose =
            Convert.ToString(oDripCalVM.InfRateInDose);
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate =
          oDripCalVM.InfRateInVolume.ToString();
        if (
          !this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfRateVolBased
        ) {
          if (
            oDripCalVM.InfRateInVolumeUOM != null &&
            !String.IsNullOrEmpty(oDripCalVM.InfRateInVolumeUOM.Value)
          ) {
            let ONumRate =
              this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateNumeratorUOMs.Where(
                (ONum) => ONum.Value == oDripCalVM.InfRateInVolumeUOM.Value
              ).Select((ONum) => ONum);
            if (ONumRate != null && ONumRate.Count() > 0) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom =
                ONumRate.FirstOrDefault();
            }
          }
          if (
            oDripCalVM.InfRateInVolumePerUOM != null &&
            !String.IsNullOrEmpty(oDripCalVM.InfRateInVolumePerUOM.Value)
          ) {
            let ODeNumRate =
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Where(
                (ONum) => ONum.Value == oDripCalVM.InfRateInVolumePerUOM.Value
              ).Select((ONum) => ONum);
            if (ODeNumRate != null && ODeNumRate.Count() > 0) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom =
                ODeNumRate.FirstOrDefault();
            }
          }
          if (oDripCalVM.InfStrength > 0)
            this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength =
              oDripCalVM.InfStrength.ToString();
          if (oDripCalVM.InfVolume > 0)
            this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume =
              oDripCalVM.InfVolume.ToString();
          if (
            oDripCalVM.InfStrengthUOM != null &&
            !String.IsNullOrEmpty(oDripCalVM.InfStrengthUOM.Value)
          ) {
            let OConStrenght =
              this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOMlist.Where(
                (OStngth) => OStngth.Value == oDripCalVM.InfStrengthUOM.Value
              ).Select((OStngth) => OStngth);
            if (OConStrenght != null && OConStrenght.Count() > 0) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM =
                OConStrenght.FirstOrDefault();
            }
          }
          if (
            oDripCalVM.InfVolumeUOM != null &&
            !String.IsNullOrEmpty(oDripCalVM.InfVolumeUOM.Value)
          ) {
            let OConVolume =
              this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOMlist.Where(
                (OVolume) => OVolume.Value == oDripCalVM.InfVolumeUOM.Value
              ).Select((OVolume) => OVolume);
            if (OConVolume != null && OConVolume.Count() > 0) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM =
                OConVolume.FirstOrDefault();
            }
          }
          if (
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateNumeratorUom != null &&
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateDinominatorUom != null
          )
            this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue =
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom.DisplayText +
              '/' +
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom.DisplayText;
        }
      }
    }
  }
  public FillAdminFormFields(): void {
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails != null
    ) {
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom.Tag != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom
          .Tag != null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom !=
          null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom
          .Tag != null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom !=
          null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom
          .Tag != null
      ) {
        if (
          String.Compare(
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag.ToString(),
            this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag.ToString(),
            StringComparison.CurrentCultureIgnoreCase
          ) != 0 ||
          String.Compare(
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Tag.ToString(),
            this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag.ToString(),
            StringComparison.CurrentCultureIgnoreCase
          ) != 0
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate =
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails.Rate
            )
              ? String.Empty
              : this.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom =
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag =
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Tag;
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom =
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag =
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag;
          if (
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom.DisplayText
            ) &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateDinominatorUom.DisplayText
            )
          ) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue =
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom.DisplayText +
              '/' +
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateDinominatorUom.DisplayText;
          }
          this.DefDripCalc_InfRateInDose = null;
          this.DefDripCalc_InfRateInDoseUOM = null;
          this.DefDripCalc_InfVolume = null;
          this.DefDripCalc_InfVolumeUOM = null;
          this.DefDripCalc_InfRateInDoseUOMOID = null;
          this.DefDripCalc_InfRateInDosePerUOMOID = null;
          this.DefDripCalc_DropFactor = null;
          this.DefDripCalc_InfStrength = null;
          this.DefDripCalc_InfConcentration = null;
          this.DefDripCalc_InfStrengthUOM = null;
          this.DefDripCalc_InfConcentrationUOM = null;
          this.DefDripCalc_InfConcentrationPerUOM = null;
        }
      } else if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom.Tag != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom
          .Tag != null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom ==
          null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom ==
          null
      ) {
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate =
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails.Rate
          )
            ? String.Empty
            : String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate
              )
            ? this.FormViewerDetails.BasicDetails.InfusionDetails.Rate
            : String.Empty;
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom =
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag =
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Tag;
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom =
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag =
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag;
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.DisplayText
          ) &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.DisplayText
          )
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue =
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.DisplayText +
            '/' +
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.DisplayText;
        }
      } else if (
        !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose) &&
        this.FormViewerDetails.BasicDetails.DoseUOM != null &&
        this.FormViewerDetails.BasicDetails.DoseUOM.Tag != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
          null
      ) {
        let checkVolumebasedIfusedUom =
          this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList.Where(
            (c) =>
              c.Tag.ToString() ==
              this.FormViewerDetails.BasicDetails.DoseUOM.Tag.ToString()
          )
            .Select((s) => s)
            .ToList();
        if (
          checkVolumebasedIfusedUom != null &&
          checkVolumebasedIfusedUom.Count > 0
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfDripnrateCal =
            Visibility.Visible;
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfusionrateCal =
            Visibility.Collapsed;
        } else {
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfDripnrateCal =
            Visibility.Collapsed;
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfusionrateCal =
            Visibility.Visible;
        }
      }
      this.PopulateInfusionDetailsBasedOnUOM();
    }
    if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.Lumen
      )
    ) {
      this.FormViewerDetails.BasicDetails.RecordAdmin.Lumen =
        this.FormViewerDetails.BasicDetails.InfusionDetails.Lumen;
      this.FormViewerDetails.BasicDetails.RecordAdmin.IsenableInfusionLumen =
        false;
    } else {
      this.FormViewerDetails.BasicDetails.RecordAdmin.IsenableInfusionLumen =
        true;
      this.FormViewerDetails.BasicDetails.RecordAdmin.Lumen = String.Empty;
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails != null
    ) {
      this.FormViewerDetails.BasicDetails.RecordAdmin.IsEnabledDeliveryDevice =
        true;
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .DeliveryDeviceList != null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceList !=
          null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceList
          .Count > 0
      ) {
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice !=
          null
        ) {
          let oDefaultUOM =
            this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceList.Where(
              (Oitem) =>
                Oitem.DisplayText ==
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .DeliveryDeviceFreetext
            ).Select((Oitem) => Oitem);
          if (oDefaultUOM != null) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDevice =
              oDefaultUOM.FirstOrDefault();
          }
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsEnabledDeliveryDevice =
            false;
        } else
          this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDevice = null;
      } else if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .DeliveryDeviceList != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceList.forEach(
          (item) => {
            if (
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .DeliveryDeviceList == null
            )
              this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceList =
                new ObservableCollection<CListItem>();
            this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceList.Add(
              item
            );
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .DeliveryDevice != null &&
              String.Compare(
                item.DisplayText,
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .DeliveryDeviceFreetext,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            ) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDevice =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: item.DisplayText,
                  Value: item.Value,
                });
              this.FormViewerDetails.BasicDetails.RecordAdmin.IsEnabledDeliveryDevice =
                false;
            }
          }
        );
      }
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .DeliveryDeviceFreetext
        )
      ) {
        this.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceText =
          this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext;
        this.FormViewerDetails.BasicDetails.RecordAdmin.IsEnabledDeliveryDevice =
          false;
      }
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsReadOnlyConcentrationInRecAdmin
      ) {
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
          )
        )
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength =
            this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration;
        else
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength =
            String.Empty;
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .LowConcentrationUOM != null
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM =
            this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM;
        } else
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOM =
            null;
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .UpperConcentration
          )
        )
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume =
            this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration;
        else
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume =
            String.Empty;
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .UpperConcentrationUOM != null
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM =
            this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM;
        } else {
          this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolumeUOM =
            null;
        }
      }
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        )
      ) {
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdmin =
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod;
        this.FormViewerDetails.BasicDetails.RecordAdmin.EnableInfusionPeriodMedAdmin =
          false;
      } else {
        if (
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.RecordAdmin
              .InfusionPeriodMedAdmin
          )
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdmin =
            String.Empty;
        }
        this.FormViewerDetails.BasicDetails.RecordAdmin.EnableInfusionPeriodMedAdmin =
          true;
      }
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
        null
      ) {
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdminUOM =
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom;
      } else {
        if (
          this.FormViewerDetails.BasicDetails.RecordAdmin
            .InfusionPeriodMedAdminUOM == null
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionPeriodMedAdminUOM =
            null;
        }
      }
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      this.FormViewerDetails.BasicDetails.IsRecAdmSiteEnabled = true;
      if (
        this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
        this.FormViewerDetails.BasicDetails.DefaultDetails.Sites != null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.Sites != null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.Sites.Count > 0
      ) {
        if (this.FormViewerDetails.BasicDetails.Site != null) {
          let oDefaultUOM =
            this.FormViewerDetails.BasicDetails.RecordAdmin.Sites.Where(
              (Oitem) =>
                Oitem.Value == this.FormViewerDetails.BasicDetails.Site.Value
            ).Select((Oitem) => Oitem);
          if (oDefaultUOM != null) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.Site =
              oDefaultUOM.FirstOrDefault();
          }
          if (this.FormViewerDetails.BasicDetails.Infusions)
            this.FormViewerDetails.BasicDetails.IsRecAdmSiteEnabled = false;
        } else if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.SiteFreeText
          )
        ) {
          let oDefaultUOM =
            this.FormViewerDetails.BasicDetails.RecordAdmin.Sites.Where(
              (Oitem) =>
                Oitem.DisplayText ==
                this.FormViewerDetails.BasicDetails.SiteFreeText
            ).Select((Oitem) => Oitem);
          if (oDefaultUOM != null && oDefaultUOM.Count() > 0) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.Site =
              oDefaultUOM.FirstOrDefault();
          } else {
            let _PrescribedSite: CListItem = new CListItem();
            if (
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.SiteFreeText
              )
            ) {
              _PrescribedSite = ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: this.FormViewerDetails.BasicDetails.SiteFreeText,
                Value: String.Empty,
              });
            }
            if (this.FormViewerDetails.BasicDetails.RecordAdmin.Sites == null) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.Sites =
                new ObservableCollection<CListItem>();
            }
            if (
              _PrescribedSite != null &&
              !String.IsNullOrEmpty(_PrescribedSite.DisplayText)
            ) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.Sites.Add(
                _PrescribedSite
              );
              this.FormViewerDetails.BasicDetails.RecordAdmin.Site =
                _PrescribedSite;
            }
          }
          if (this.FormViewerDetails.BasicDetails.Infusions)
            this.FormViewerDetails.BasicDetails.IsRecAdmSiteEnabled = false;
        } else
          this.FormViewerDetails.BasicDetails.RecordAdmin.Site =
            this.FormViewerDetails.BasicDetails.Site;
      } else if (
        this.FormViewerDetails.BasicDetails.DefaultDetails.Sites != null
      ) {
        this.FormViewerDetails.BasicDetails.DefaultDetails.Sites.forEach(
          (item) => {
            if (this.FormViewerDetails.BasicDetails.RecordAdmin.Sites == null)
              this.FormViewerDetails.BasicDetails.RecordAdmin.Sites =
                new ObservableCollection<CListItem>();
            this.FormViewerDetails.BasicDetails.RecordAdmin.Sites.Add(item);
            if (
              this.FormViewerDetails.BasicDetails.Site != null &&
              String.Compare(
                item.DisplayText,
                this.FormViewerDetails.BasicDetails.Site.DisplayText,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            ) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.Site =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: item.DisplayText,
                  Value: item.Value,
                });
              if (this.FormViewerDetails.BasicDetails.Infusions)
                this.FormViewerDetails.BasicDetails.IsRecAdmSiteEnabled = false;
            }
          }
        );
      }
    }
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList !=
        null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom !=
        null &&
      this.FormViewerDetails.BasicDetails.InfusionType != null
    ) {
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom
          .Tag != null
      ) {
        let checkVolumebasedIfusedUom =
          this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList.Where(
            (c) =>
              c.Tag != null &&
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag.ToString().Contains(
                c.Tag.ToString()
              )
          )
            .Select((s) => s)
            .ToList();
        if (checkVolumebasedIfusedUom.Count > 0) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfRateVolBased =
            true;
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfDripnrateCal =
            Visibility.Visible;
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfusionrateCal =
            Visibility.Collapsed;
          if (
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.PCA
            ) != 0 &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.RecordAdmin.DripRate
            )
          )
            this.FormViewerDetails.BasicDetails.RecordAdmin.DripRate =
              String.Empty;
        } else {
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfRateVolBased =
            false;
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfusionrateCal =
            Visibility.Visible;
          this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfDripnrateCal =
            Visibility.Collapsed;
          if (
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.PCA
            ) != 0 &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.RecordAdmin.DripRate
            )
          )
            this.FormViewerDetails.BasicDetails.RecordAdmin.DripRate =
              String.Empty;
        }
      }
    }
    if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.CONTINUOUS,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 &&
      this.FormViewerDetails.BasicDetails.DoseType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.NORMAL,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM !=
        this.FormViewerDetails.BasicDetails.DoseUOM
      ) {
        if (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose))
          this.FormViewerDetails.BasicDetails.RecordAdmin.Dose =
            this.FormViewerDetails.BasicDetails.Dose;
        else
          this.FormViewerDetails.BasicDetails.RecordAdmin.Dose = String.Empty;
        if (
          this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Count > 0
        ) {
          if (this.FormViewerDetails.BasicDetails.DoseUOM != null) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM =
              this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms;
            this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM =
              this.FormViewerDetails.BasicDetails.DoseUOM;
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
              this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText;
          } else {
            this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM =
              this.FormViewerDetails.BasicDetails.DoseUOM;
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
              String.Empty;
          }
        }
      }
    }
    if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.PCA,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 &&
      this.FormViewerDetails.BasicDetails.DoseType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.NORMAL,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM !=
          null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM != null
      ) {
        if (
          this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM
            .Value !=
          this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM.Value
        ) {
          if (
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus
            )
          )
            this.FormViewerDetails.BasicDetails.RecordAdmin.Dose =
              this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus;
          if (
            this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOMList !=
              null &&
            this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOMList !=
              null &&
            this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOMList
              .Count > 0
          ) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM =
              this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOMList;
            this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM =
              this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM;
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
              this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM.DisplayText;
          }
        }
      } else {
        if (
          this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM ==
            null &&
          this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM !=
            null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM
              .DisplayText
          )
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
            this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM.DisplayText;
        }
      }
    } else if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      (String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.CONTINUOUS,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0) &&
      this.FormViewerDetails.BasicDetails.DoseType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.NORMAL,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM !=
          null &&
        this.FormViewerDetails.BasicDetails.DoseUOM != null
      ) {
        if (
          this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM
            .Value != this.FormViewerDetails.BasicDetails.DoseUOM.Value
        ) {
          if (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose))
            this.FormViewerDetails.BasicDetails.RecordAdmin.Dose =
              this.FormViewerDetails.BasicDetails.Dose;
          if (
            this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms != null &&
            this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Count > 0
          ) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM =
              this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms;
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
              this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText;
          }
        }
      } else {
        if (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose))
          this.FormViewerDetails.BasicDetails.RecordAdmin.Dose =
            this.FormViewerDetails.BasicDetails.Dose;
        if (
          this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Count > 0
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM =
            this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms;
          if (this.FormViewerDetails.BasicDetails.DoseUOM != null)
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
              this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText;
        }
      }
    } else {
      if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        if (this.FormViewerDetails.BasicDetails.DoseUOM != null) {
          if (
            (this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM !=
              null &&
              this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM
                .Value != this.FormViewerDetails.BasicDetails.DoseUOM.Value) ||
            this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM ==
              null
          ) {
            if (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose))
              this.FormViewerDetails.BasicDetails.RecordAdmin.Dose =
                this.FormViewerDetails.BasicDetails.Dose;
            if (
              this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms != null &&
              this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Count > 0
            ) {
              this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM =
                this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms;
              this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
                this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText;
            }
          }
        }
      }
    }
    if (
      this.FormViewerDetails.BasicDetails.DoseType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (
        this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
        this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
      ) {
        for(let i=0; i<this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count; i++){
          let item: MultipleDoseDetail = this.FormViewerDetails.BasicDetails.MultiDoseDetails[i];       
          if (
            this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionType.Value
            ) &&
            (String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypesCode.INTERMITTENT,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0)
          ) {
            if (
              item.Infratenumeratoruom != null &&
              item.Infratenumeratoruom.Tag != null &&
              item.InfrateDenominatoruom != null &&
              item.InfrateDenominatoruom.Tag != null &&
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom != null &&
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom.Tag != null &&
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom != null &&
              this.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom.Tag != null
            ) {
              if (
                String.Compare(
                  item.Infratenumeratoruom.Tag.ToString(),
                  this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag.ToString(),
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0 ||
                String.Compare(
                  item.InfrateDenominatoruom.Tag.ToString(),
                  this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag.ToString(),
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0
              ) {
                this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate =
                  item.InfusionRate;
                this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom =
                  item.InfrateDenominatoruom;
                this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag =
                  item.InfrateDenominatoruom.Tag;
                this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom =
                  item.Infratenumeratoruom;
                this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag =
                  item.Infratenumeratoruom.Tag;
                if (
                  !String.IsNullOrEmpty(item.Infratenumeratoruom.DisplayText) &&
                  !String.IsNullOrEmpty(item.InfrateDenominatoruom.DisplayText)
                ) {
                  this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue =
                    item.Infratenumeratoruom.DisplayText +
                    '/' +
                    item.InfrateDenominatoruom.DisplayText;
                }
              }
            }
          }
          if (
            item.DueDoseUOM != null &&
            !String.IsNullOrEmpty(item.DueDoseUOM.Value)
          ) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.Dose =
              item.DueDose.ToString();
            if (
              this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM != null &&
              this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM.Count > 0
            ) {
              let SelUOM =
                this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM.Where(
                  (Oitem) => Oitem.Value == item.DueDoseUOM.Value
                ).Select((Oitem) => Oitem);
              if (SelUOM != null && SelUOM.Count() > 0) {
                this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM =
                  SelUOM.FirstOrDefault();
              }
            }
            if (
              item.DueDoseUOM != null &&
              !String.IsNullOrEmpty(item.DueDoseUOM.DisplayText)
            )
              this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
                item.DueDoseUOM.DisplayText;
          }
          break;
        }
      }
    } else {
      if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.CONDITIONAL,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.DOSAGERANGE,
          StringComparison.CurrentCultureIgnoreCase
        ) != 0
      ) {
        if (
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.RecordAdmin.Dose
          )
        ) {
          this.FormViewerDetails.BasicDetails.RecordAdmin.Dose =
            !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose)
              ? this.FormViewerDetails.BasicDetails.Dose
              : String.Empty;
        }
        if (
          this.FormViewerDetails.BasicDetails.DoseUOM != null &&
          this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM !=
            null
        ) {
          if (
            this.FormViewerDetails.BasicDetails.DoseUOM.Value != null &&
            this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM
              .Value != null
          ) {
            this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM =
              this.FormViewerDetails.BasicDetails.DoseUOM;
            this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
              this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText;
            this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM.IsSelected =
              true;
          }
        }
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          this.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          String.Compare(
            this.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          if (
            this.FormViewerDetails.BasicDetails.ConditionalDosingDetails !=
              null &&
            this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
              .DoseDetails != null &&
            this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
              .DoseDetails.Count > 0
          ) {
            for(let i=0;i<this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails.Count;i++){
              let item: ConditionalDose = this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails[i];           
                if (
                  item.Infratenumeratoruom != null &&
                  item.Infratenumeratoruom.Tag != null &&
                  item.InfrateDenominatoruom != null &&
                  item.InfrateDenominatoruom.Tag != null &&
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateNumeratorUom != null &&
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateNumeratorUom.Tag != null &&
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateDinominatorUom != null &&
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateDinominatorUom.Tag != null
                ) {
                  if (
                    String.Compare(
                      item.Infratenumeratoruom.Tag.ToString(),
                      this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag.ToString(),
                      StringComparison.CurrentCultureIgnoreCase
                    ) != 0 ||
                    String.Compare(
                      item.InfrateDenominatoruom.Tag.ToString(),
                      this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag.ToString(),
                      StringComparison.CurrentCultureIgnoreCase
                    ) != 0
                  ) {
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate =
                      item.Infusionrate;
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom =
                      item.InfrateDenominatoruom;
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag =
                      item.InfrateDenominatoruom.Tag;
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom =
                      item.Infratenumeratoruom;
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag =
                      item.Infratenumeratoruom.Tag;
                    if (
                      !String.IsNullOrEmpty(
                        item.Infratenumeratoruom.DisplayText
                      ) &&
                      !String.IsNullOrEmpty(
                        item.InfrateDenominatoruom.DisplayText
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue =
                        item.Infratenumeratoruom.DisplayText +
                        '/' +
                        item.InfrateDenominatoruom.DisplayText;
                    }
                  }
                }
                if (
                  String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
                  )
                ) {
                  if (
                    String.Compare(
                      item.Infratenumeratoruom.Tag.ToString(),
                      this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag.ToString(),
                      StringComparison.CurrentCultureIgnoreCase
                    ) != 0 ||
                    String.Compare(
                      item.InfrateDenominatoruom.Tag.ToString(),
                      this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag.ToString(),
                      StringComparison.CurrentCultureIgnoreCase
                    ) != 0
                  ) {
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate =
                      item.Infusionrate;
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom =
                      item.InfrateDenominatoruom;
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag =
                      item.InfrateDenominatoruom.Tag;
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom =
                      item.Infratenumeratoruom;
                    this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag =
                      item.Infratenumeratoruom.Tag;
                    if (
                      !String.IsNullOrEmpty(
                        item.Infratenumeratoruom.DisplayText
                      ) &&
                      !String.IsNullOrEmpty(
                        item.InfrateDenominatoruom.DisplayText
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateUOMValue =
                        item.Infratenumeratoruom.DisplayText +
                        '/' +
                        item.InfrateDenominatoruom.DisplayText;
                    }
                  }
                }
                if (
                  item.DoseUoM != null &&
                  this.FormViewerDetails.BasicDetails.RecordAdmin
                    .SelectedDoseUoM != null
                ) {
                  if (
                    item.DoseUoM.Value !=
                    this.FormViewerDetails.BasicDetails.RecordAdmin
                      .SelectedDoseUoM.Value
                  ) {
                    this.FormViewerDetails.BasicDetails.RecordAdmin.Dose =
                      !String.IsNullOrEmpty(item.Dose)
                        ? item.Dose
                        : String.Empty;
                    if (item.DoseUoM != null) {
                      this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM =
                        item.DoseUoM;
                      this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
                        item.DoseUoM.DisplayText;
                      this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM.IsSelected =
                        true;
                    }
                  }
                }
                break;
               }
          }
        }
      }
    }
    if (
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionType.Value
      ) &&
      this.FormViewerDetails.BasicDetails.DoseType != null &&
      (String.Compare(
        this.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.CONDITIONAL,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0)
    ) {
      if (
        String.Compare(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      )
        this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfRateVolBased =
          false;
      else
        this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfRateVolBased =
          true;
      this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfDripnrateCal =
        Visibility.Collapsed;
      this.FormViewerDetails.BasicDetails.RecordAdmin.IsInfusionrateCal =
        Visibility.Visible;
      this.FormViewerDetails.BasicDetails.RecordAdmin.DripRate = String.Empty;
    }
    if (
      this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
      this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms != null &&
      this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Count > 0
    ) {
      this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUoM =
        this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms;
      if (
        this.FormViewerDetails.BasicDetails.DoseUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText
        )
      ) {
        this.FormViewerDetails.BasicDetails.RecordAdmin.DoseUOMValue =
          this.FormViewerDetails.BasicDetails.DoseUOM.DisplayText;
        this.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM =
          this.FormViewerDetails.BasicDetails.DoseUOM;
      }
    }
  }
  public PopulateInfusionDetailsBasedOnUOM(): void {
    let _oRecordAdminVM: RecordAdminVM = new RecordAdminVM();
    _oRecordAdminVM = this.FormViewerDetails.BasicDetails.RecordAdmin;
    if (
      !String.IsNullOrEmpty(_oRecordAdminVM.InfusionRateUOMValue) &&
      _oRecordAdminVM.InfusionRateUOMValue.ToLowerInvariant().Contains('mg')
    ) {
      this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose =
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate;
      this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate =
        String.Empty;
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom != null
      )
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDoseUOM =
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.DisplayText;
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom != null
      )
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDoseUOM +=
          '/' +
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom.DisplayText;
      this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom =
        null;
      this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom =
        null;
    } else if (
      !String.IsNullOrEmpty(_oRecordAdminVM.InfusionRateUOMValue) &&
      _oRecordAdminVM.InfusionRateUOMValue.ToLowerInvariant().Contains('ml')
    ) {
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom != null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .InfusionRateNumeratorUOMs != null &&
        this.FormViewerDetails.BasicDetails.RecordAdmin
          .InfusionRateNumeratorUOMs.Count > 0
      ) {
        this.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom =
          this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRateNumeratorUOMs.Where(
            (x) =>
              x.Value ==
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom.Value
          ).FirstOrDefault();
      }
      this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose =
        String.Empty;
      this.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDoseUOM =
        String.Empty;
    }
  }
  
        public LaunchBrandConstraint(): void {
            if (this.PrescriptionItemStatus != CConstants.COMPLETED) {
                //this.oMedBrandChild = new medbrandconstraintschild(this.ParentbaseVM);
		            this.oMedBrandChild = new medbrandconstraintschild();
                this.oMedBrandChild.constructorIMPL(this.ParentbaseVM);
                let oBrandConstVM: MedBrandConstraintsVM = new MedBrandConstraintsVM(this.ParentbaseVM);
                if (this.BrandOldValue != null && this.BrandOldValue.IdentifyingOID > 0 && !String.IsNullOrEmpty(this.BrandOldValue.IdentifyingType) && !String.IsNullOrEmpty(this.BrandOldValue.IdentifyingName)) {
                    oBrandConstVM.ParentDrugOID = this.BrandOldValue.IdentifyingOID;
                    oBrandConstVM.ParentDrugName = this.BrandOldValue.IdentifyingName;
                    oBrandConstVM.ParentDrugType = this.BrandOldValue.IdentifyingType;
                }
                else {
                    oBrandConstVM.ParentDrugOID = this.FormViewerDetails.BasicDetails.IdentifyingOID;
                    oBrandConstVM.ParentDrugName = this.FormViewerDetails.BasicDetails.IdentifyingName;
                    oBrandConstVM.ParentDrugType = this.FormViewerDetails.BasicDetails.IdentifyingType;
                }
                oBrandConstVM.RouteOID = (this.FormViewerDetails.BasicDetails.Route != null) && !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Route.Value) ? this.FormViewerDetails.BasicDetails.Route.Value : String.Empty;
                oBrandConstVM.DosageFormOID = (this.FormViewerDetails.BasicDetails.DosageForm != null) && (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.DosageForm.Value)) ? this.FormViewerDetails.BasicDetails.DosageForm.Value : String.Empty;
                ;
                if ((PatientContext.IsINFUSIONON && this.FormViewerDetails.BasicDetails.Route != null && this.FormViewerDetails.BasicDetails.Route.Tag != null && !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Route.Tag.ToString()) && String.Compare(this.FormViewerDetails.BasicDetails.Route.Tag.ToString(), "1") == 0)) {
                    oBrandConstVM.StrengthText = (this.FormViewerDetails.BasicDetails.Strength != null) && (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Strength.Value)) ? this.FormViewerDetails.BasicDetails.Strength.Value : "ALL_STRENGTH";
                    ;
                }
                else {
                    oBrandConstVM.StrengthText = (this.FormViewerDetails.BasicDetails.Strength != null) && (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Strength.Value)) ? this.FormViewerDetails.BasicDetails.Strength.Value : String.Empty;
                }
                this.oMedBrandChild.DataContext = oBrandConstVM;
                AppActivity.OpenWindow(oBrandConstVM.ParentDrugName, this.oMedBrandChild, (s,e) => {this.oMedBrandChild_Closed(s);}, oBrandConstVM.ParentDrugName, false, 435, 700, true, WindowButtonType.Close, null);
            }
        }
        
  public ClearSequenceDet(): void {
    CSequentialHelper.ClearSequence(this);
  }
  public ClearBrandData(): void {
    this.bbrandoldvalue = true;
    if (this.BrandOldValue != null) {
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null
      ) {
        this.FormViewerDetails.BasicDetails.IsCallFromRouteResetOnBrandSelection =
          true;
      }
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.IsRouteResetRequired
      ) {
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
          this.BrandOldValue.Routes;
      }
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null
      ) {
        this.FormViewerDetails.BasicDetails.IsCallFromRouteResetOnBrandSelection =
          false;
      }
      this.UpdateFormViewerDetails(
        this.BrandOldValue.IdentifyingOID,
        this.BrandOldValue.IdentifyingType,
        this.BrandOldValue.IdentifyingName,
        this.BrandOldValue.FormularyNote,
        this.BrandOldValue.LorenzoID,
        this.BrandOldValue.MCVersion,
        this.BrandOldValue.DrugProperty,
        'Select brand',
        this.BrandOldValue.DosageForm,
        this.BrandOldValue.DosageFormValue,
        this.BrandOldValue.Strength,
        false,
        String.Empty,
        this.BrandOldValue.IsIgnoreAdminMethod,
        this.BrandOldValue.IsAuthorise
      );
      this.AlreadyPrescribedItemOID = this.BrandOldValue.AlreadyPrescribedOID;
      this.ParentbaseVM.objNewItemVM.AlreadyPrescribedItemOID =
        this.BrandOldValue.AlreadyPrescribedOID;
      this.SetQuantityState();
      this.GetResolveDetailsforQuantity(
        this.BrandOldValue.IdentifyingOID,
        this.BrandOldValue.IdentifyingType,
        AppSessionInfo.AMCV,
        '\0',
        0
      );
      this.CheckForTechValidateMandatory();
      this.GetConflictImageStatus();
      this.GetMCConflictImageStatus();
      this.VMVPIdentifyingName = String.Empty;
      this.VMVPLorenzoID = String.Empty;
      this.FormViewerDetails.BasicDetails.CheckStrengthMandatoryByDoseUOMType();
      this.TechnicallyValidateMessage();
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !(
          PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
        )
      ) {
        this.FormViewerDetails.BasicDetails.GetFormViewControls(
          '1',
          (s, e) => {
            this.objServiceProxy_GetFormViewControlsCompleted(s, e);
          },
          'RF'
        );
      }
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .SelectedSequenceName != null
      ) {
        CSequentialHelper.ClearReviewDetails(this, true);
      }
    }
    this.BrandOldValue = null;
  }
  public ClearSelectproductData(): void {
    this.bselectprodoldvalue = true;
    if (this.BrandOldValue != null) {
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null
      ) {
        this.FormViewerDetails.BasicDetails.IsCallFromRouteResetOnBrandSelection =
          true;
      }
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.IsRouteResetRequired
      ) {
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
          this.BrandOldValue.Routes;
      }
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null
      ) {
        this.FormViewerDetails.BasicDetails.IsCallFromRouteResetOnBrandSelection =
          false;
      }

      // this.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
      //   this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousRoutes;
      this.UpdateFormViewerDetails(
        this.BrandOldValue.IdentifyingOID,
        this.BrandOldValue.IdentifyingType,
        this.BrandOldValue.IdentifyingName,
        this.BrandOldValue.FormularyNote,
        this.BrandOldValue.LorenzoID,
        this.BrandOldValue.MCVersion,
        this.BrandOldValue.DrugProperty,
        'Select product',
        this.BrandOldValue.DosageForm,
        this.BrandOldValue.DosageFormValue,
        this.BrandOldValue.Strength,
        false,
        String.Empty,
        this.BrandOldValue.IsIgnoreAdminMethod,
        this.BrandOldValue.IsAuthorise
      );
      this.SetQuantityState();
      this.GetResolveDetailsforQuantity(
        this.BrandOldValue.IdentifyingOID,
        this.BrandOldValue.IdentifyingType,
        AppSessionInfo.AMCV,
        '\0',
        0
      );
      this.CheckForTechValidateMandatory();
      this.GetConflictImageStatus();
      this.GetMCConflictImageStatus();
      this.VMVPIdentifyingName = String.Empty;
      this.VMVPLorenzoID = String.Empty;
      this.FormViewerDetails.BasicDetails.CheckStrengthMandatoryByDoseUOMType();
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !(
          PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
        )
      ) {
        this.FormViewerDetails.BasicDetails.GetFormViewControls(
          '1',
          (s, e) => {
            this.objServiceProxy_GetFormViewControlsCompleted(s, e);
          },
          'RF'
        );
      }
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .SelectedSequenceName != null
      ) {
        CSequentialHelper.ClearReviewDetails(this, true);
      }
    }
    this.BrandOldValue = null;
  }
 
        public LaunchSelProductMezzanie(IdentifyingOID: number, IdentifyingName: string, IdentifyingType: string): void {
            if (this.FormViewerDetails.BasicDetails.Route !=null && this.PrescriptionItemStatus != CConstants.COMPLETED) {
               // this.oMedBrandChild = new medbrandconstraintschild(this.ParentbaseVM);
	            	this.oMedBrandChild = new medbrandconstraintschild();
                this.oMedBrandChild.constructorIMPL(this.ParentbaseVM);
                let oBrandConstVM: MedBrandConstraintsVM = new MedBrandConstraintsVM();
                oBrandConstVM.IsForSelectProduct = true;
                if (String.Compare(IdentifyingType, "CATALOGUEITEM", StringComparison.OrdinalIgnoreCase) == 0) {
                    oBrandConstVM.ParentDrugOID = IdentifyingOID;
                    oBrandConstVM.ParentDrugName = IdentifyingName;
                    oBrandConstVM.ParentDrugType = IdentifyingType;
                }
                else if (String.Compare(IdentifyingType, "VIRTUALPRODUCT", StringComparison.OrdinalIgnoreCase) == 0) {
                    oBrandConstVM.ParentDrugOID = this.FormViewerDetails.BasicDetails.ParentIdentifyingOID;
                    oBrandConstVM.ParentDrugName = this.FormViewerDetails.BasicDetails.ParentIdentifyingName;
                    oBrandConstVM.ParentDrugType = this.FormViewerDetails.BasicDetails.ParentIdentifyingType;
                }
                oBrandConstVM.ItemsubType = this.FormViewerDetails.BasicDetails.itemSubType;
                oBrandConstVM.RouteOID = !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Route.Value) ? this.FormViewerDetails.BasicDetails.Route.Value : String.Empty;
                 this.oMedBrandChild.DataContext = oBrandConstVM;
                 AppActivity.OpenWindow(oBrandConstVM.ParentDrugName, this.oMedBrandChild, (s,e) => {this.oMedSelProdChild_Closed(s);}, oBrandConstVM.ParentDrugName, false, 430, 670, true, WindowButtonType.Close, null);
            }
        }
        
  oBrandConstVMNEW: MedBrandConstraintsVM = new MedBrandConstraintsVM();
  //Not Required for LHS. To be Re-Visited.
  
        public LaunchMCBrandConstraint(): void {
            if (this.PrescriptionItemStatus != CConstants.COMPLETED) {
              this.oMedBrandChild = new medbrandconstraintschild();
                this.oMedBrandChild.constructorIMPL(this.ParentbaseVM);
                let oBrandConstVM: MedBrandConstraintsVM = new MedBrandConstraintsVM();
                let lnUptoIdentifyingoid: number = 0;
                let sUptoIdentifyingtype: string = String.Empty;
                let sUptoIdentifyingName: string = String.Empty;
                if (this.FormViewerDetails.MulticomponentDetails != null && this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null && this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 0) {
                    for (let rcount: number = 0; rcount < this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count; rcount++) {
                        if (this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].IsUpto == true) {
                            lnUptoIdentifyingoid = this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].IdentifyingOID;
                            sUptoIdentifyingtype = this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].IdentifyingType;
                            sUptoIdentifyingName = this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].ComponentName;
                        }
                    }
                }
                if (sUptoIdentifyingName != String.Empty && this.ParentbaseVM.IsFormViewerClosed != true) {
                    oBrandConstVM.ParentDrugOID = lnUptoIdentifyingoid;
                    oBrandConstVM.ParentDrugName = sUptoIdentifyingName;
                    oBrandConstVM.ParentDrugType = sUptoIdentifyingtype;
                    oBrandConstVM.IsBrand = this.FormViewerDetails.BasicDetails.BrandFlag;
                    oBrandConstVM.ItemsubType = this.FormViewerDetails.BasicDetails.itemSubType;
                    oBrandConstVM.RouteOID = !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Route.Value) ? this.FormViewerDetails.BasicDetails.Route.Value : String.Empty;
                    oBrandConstVM.DosageFormOID = (this.FormViewerDetails.BasicDetails.DosageForm != null) && (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.DosageForm.Value)) ? this.FormViewerDetails.BasicDetails.DosageForm.Value : String.Empty;
                    ;
                    this.oMedBrandChild.DataContext = oBrandConstVM;
                    Busyindicator.SetStatusBusy("MCBrandConstraint");
                    AppActivity.OpenWindow(oBrandConstVM.ParentDrugName, this.oMedBrandChild, (s,e) => {this.oMedSelProdChild_Closed(s);}, oBrandConstVM.ParentDrugName, false, 440, 670, true, WindowButtonType.Close, null);
                }
                else {
                    if (this.FormViewerDetails.BasicDetails.ProbBrandlaunchexist == true)
                        this.FormViewerDetails.BasicDetails.ProbBrandlaunchexist = false;
                }
                this.oBrandConstVMNEW = oBrandConstVM;
            }
        }
        
  public BrandOldValue: DrugData;
  //public delegate void BrandChange(PrescriptionItemVM PresItemVM);
  public BrandChangedEvent: Function;
  //public delegate void RegenerateConflictsForBrand(PrescriptionItemVM PresItemVM);
  public RegenerateConflictsForBrandEvent: Function;
  public IsInfusionFluid: string = String.Empty;
  //public delegate void RegenerateConflictsFluidItem(PrescriptionItemVM PresItemVM);
  public RegenerateConflictsFluidItemEvent: Function;
  //public delegate void RegenerateConflictsForAdhocMCI(PrescriptionItemVM PresItemVM);
  public RegenerateConflictsForAdhocMCIEventEvent: Function;
  
        oMedBrandChild_Closed(args: AppDialogEventargs): void {
            this.bbrandoldvalue = false;
            if (args.Result == AppDialogResult.Close || args.Result == AppDialogResult.Cancel) {
                this.oMedBrandChild.appDialog.DialogResult = true;
                if(this.oMedBrandChild.dupDialogRef != null ){ 
                  this.oMedBrandChild.dupDialogRef.close();
                 } 
                // this.oMedBrandChild.appDialog.DialogResult = true; 
               // this.oMedBrandChild.dupDialogRef.close();
            }
            else {

              if (args != null && args.Content != null) {
                this.oMedBrandChild  = ObjectHelper.CreateType<medbrandconstraintschild>(args.Content, medbrandconstraintschild);
              }
                if (this.BrandOldValue == null) {
                    this.BrandOldValue = ObjectHelper.CreateObject(new DrugData(), {
                        IdentifyingOID: this.FormViewerDetails.BasicDetails.IdentifyingOID,
                        IdentifyingType: this.FormViewerDetails.BasicDetails.IdentifyingType,
                        IdentifyingName: this.FormViewerDetails.BasicDetails.IdentifyingName,
                        LorenzoID: this.LorenzoID,
                        MCVersion: this.FormViewerDetails.BasicDetails.MCVersion,
                        FormularyNote: this.FormularyNote,
                        DrugProperty: this.FormViewerDetails.BasicDetails.DrugProperties,
                        Prescribableitemlistoid: this.FormViewerDetails.BasicDetails.PrescibableItemOID,
                        MCIUoms: this.FormViewerDetails.BasicDetails.MCIUoms,
                        Isformulary: this.FormViewerDetails.BasicDetails.McIsformulary,
                        IsIgnoreAdminMethod: this.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod,
                        Routes: this.FormViewerDetails.BasicDetails.DefaultDetails.Routes,
                        IsAuthorise: this.FormViewerDetails.BasicDetails.IsAuthorise,
                        AlreadyPrescribedOID: this.AlreadyPrescribedItemOID
                    });
                    if (this.oMedBrandChild != null && this.oMedBrandChild.objPresItemVM != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails != null && !String.IsNullOrEmpty(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType) && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType.Equals(CConstants.ACTUALMOIETY)) {
                        this.FormViewerDetails.BasicDetails.RouteReloadedOnAMSelection = true;
                    }
                }
                if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory) {
                    let oParam: string[] = new Array(3);
                    oParam[0] = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType;
                    oParam[1] = this.oMedBrandChild.objPresItemVM.LorenzoID;
                    oParam[2] = AppSessionInfo.AMCV;
                    let Isauthorise: string = ObjectHelper.CreateType<string>(HtmlPage.Window.Invoke("GetIsItemAuthorise", oParam), "string");
                    this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsAuthorise = (Isauthorise == "1") ? true : false;
                }
                this.oDoseCalcDefault = null;
                let isformulary: boolean = true;
                if (String.Compare(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsFormulary, "1", StringComparison.OrdinalIgnoreCase) == 0)
                    isformulary = true;
                else if (String.Compare(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsFormulary, "0", StringComparison.OrdinalIgnoreCase) == 0)
                    isformulary = false;
                let IsMonPeriodMand: boolean = false;
                IsMonPeriodMand = this.oMedBrandChild.objPresItemVM.formViewerDetails.BasicDetails.IsCondDoseMonitoringPeriodReq;
                if (ProfileData.AdditionalPrescConfig.FormularyMandatory && !isformulary && this.ActionCode != ActivityTypes.Amend && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) != 0) {
                    if (!String.Equals(this.LorenzoID, this.oMedBrandChild.objPresItemVM.LorenzoID, StringComparison.CurrentCultureIgnoreCase)) {
                        if (String.IsNullOrEmpty(this.VMVPLorenzoID)) {
                            this.VMVPLorenzoID = this.LorenzoID;
                        }
                        this.VMVPIdentifyingName = this.BrandOldValue.IdentifyingName;
                    }
                   // this.omedNonFormulary = new medNonFormulary(ObjectHelper.CreateObject(new NonFormularyVM(true), { ItemName: this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName }));
                   this.omedNonFormulary = new medNonFormulary();
                   this.omedNonFormulary.constructorImpl(ObjectHelper.CreateObject(new NonFormularyVM(true), { ItemName: this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName }));
                    AppActivity.OpenWindow("Non formulary item ", this.omedNonFormulary,(s,e) =>{this.objNFBrand_Closed(s);}, "Non formulary item", false, 255, 419, false, WindowButtonType.OkCancel, null);
                }
                else {
                    if (this.oMedBrandChild != null && this.oMedBrandChild.objPresItemVM != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails != null)
                        this.IsInfusionFluid = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsInfusionFluid;
                    if (!String.Equals(this.LorenzoID, this.oMedBrandChild.objPresItemVM.LorenzoID, StringComparison.CurrentCultureIgnoreCase)) {
                        if (String.IsNullOrEmpty(this.VMVPLorenzoID)) {
                            this.VMVPLorenzoID = this.LorenzoID;
                        }
                        this.VMVPIdentifyingName = this.BrandOldValue.IdentifyingName;
                    }
                    this.UpdateFormViewerDetails(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
                        this.BrandOldValue.IdentifyingName + " - " + this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName,
                        this.oMedBrandChild.objPresItemVM.FormularyNote,
                        this.oMedBrandChild.objPresItemVM.LorenzoID,
                        AppSessionInfo.AMCV,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DrugProperties,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DosageForm.DisplayText,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DosageForm.Value,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.Strength.DisplayText, false,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsInfusionFluid, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsAuthorise);
                    this.ParentbaseVM.CheckalreadyPrescOnBrandselect(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType);
                    this.oMedBrandChild.appDialog.DialogResult = true;
                }
                this.SetQuantityState();
                this.GetResolveDetailsforQuantity(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType, AppSessionInfo.AMCV, '\0', 0);
                this.IsTechValidateMandatory = false;
                this.GetConflictImageStatus();
            }
            if ((this.ActionCode == ActivityTypes.Amend || this.ActionCode == ActivityTypes.Reorder || this.ActionCode == ActivityTypes.UnHold) && !String.IsNullOrEmpty(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName)) {
                this.FormViewerDetails.BasicDetails.PrescribedBrandName = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName;
            }
        }
        
  private objMsgBox1: iMessageBox;
 
        oMedSelProdChild_Closed(args: AppDialogEventargs): void {
            this.bselectprodoldvalue = false;
            if (args != null && args.Content != null) {
              this.oMedBrandChild  = ObjectHelper.CreateType<medbrandconstraintschild>(args.Content, medbrandconstraintschild);
            }            
            if (args.Result == AppDialogResult.Close || args.Result == AppDialogResult.Cancel) {              
                if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0) {
                    this.oMedBrandChild.appDialog.DialogResult = true;
                }
                else if (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.itemSubType) && String.Compare(this.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                  //  if (this.oMedBrandChild.grdItems.Rows.Count > 1) 
                      if (this.oMedBrandChild.dupDialogRef.content.instance.Component.grdItems.Rows.Count >= 1 || this.oMedBrandChild.dupDialogRef.content.instance.Component.grdItems.Rows.Count == 0) {
                        if (String.Compare(this.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0) {
                            let objMsg: iMessageBox = new iMessageBox();
                            objMsg.MessageButton = MessageBoxButton.OK;
                            objMsg.Title = "LORENZO";
                            if (!this.FormViewerDetails.BasicDetails.BrandFlag) {
                                objMsg.Message = "Please select a product to proceed further";
                            }
                            else objMsg.Message = "Please select a brand to proceed further";
                            objMsg.Show();
                            return
                        }
                        this.oMedBrandChild.appDialog.DialogResult = true;
                    }
                    else if (this.oMedBrandChild.grdItems.Rows.Count == 1) {
                        if (!this.FormViewerDetails.BasicDetails.BrandFlag) {
                            if (this.oBrandConstVMNEW.IsFormularyChecked == false)
                                this.oBrandConstVMNEW.GetItem(this.oMedBrandChild, "1", false);
                            else this.oBrandConstVMNEW.GetItem(this.oMedBrandChild, "0", false);
                        }
                        else {
                            if (this.oBrandConstVMNEW.IsFormularyChecked == false)
                                this.oBrandConstVMNEW.GetItem(this.oMedBrandChild, "1", true);
                            else this.oBrandConstVMNEW.GetItem(this.oMedBrandChild, "0", true);
                        }
                        this.oMedBrandChild.appDialog.DialogResult = null;
                    }
                }
                else {
                    this.oMedBrandChild.appDialog.DialogResult = true;
                    if(this.oMedBrandChild.dupDialogRef != null ){ 
                      this.oMedBrandChild.dupDialogRef.close();
                     } 
                }
                this.FormViewerDetails.BasicDetails.ProbBrandlaunchexist = false;
            }
            else {
                this.FormViewerDetails.BasicDetails.ProbBrandlaunchexist = false;
                if (this.BrandOldValue == null) {
                    this.BrandOldValue = ObjectHelper.CreateObject(new DrugData(), {
                        IdentifyingOID: this.FormViewerDetails.BasicDetails.IdentifyingOID,
                        IdentifyingType: this.FormViewerDetails.BasicDetails.IdentifyingType,
                        IdentifyingName: this.FormViewerDetails.BasicDetails.IdentifyingName,
                        LorenzoID: this.LorenzoID,
                        MCVersion: this.FormViewerDetails.BasicDetails.MCVersion,
                        FormularyNote: this.FormularyNote,
                        DrugProperty: this.FormViewerDetails.BasicDetails.DrugProperties,
                        Prescribableitemlistoid: this.FormViewerDetails.BasicDetails.PrescibableItemOID,
                        MCIUoms: this.FormViewerDetails.BasicDetails.MCIUoms,
                        Isformulary: this.FormViewerDetails.BasicDetails.McIsformulary,
                        IsAuthorise: this.FormViewerDetails.BasicDetails.IsAuthorise
                    });
                }
                this.oDoseCalcDefault = null;
                if (!String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.itemSubType) && (String.Compare(this.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0)) {
                    if (String.IsNullOrEmpty(this.MCIVMVPLorenzoID) && this.FormViewerDetails.MulticomponentDetails != null && this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null) {
                        let oMCitemBasicInfo = this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Where(c => c.IsUpto).Select(s => s).FirstOrDefault();
                        if (oMCitemBasicInfo != null) {
                            if (String.IsNullOrEmpty(this.MCIVMVPLorenzoID))
                                this.MCIVMVPLorenzoID = oMCitemBasicInfo.LorenzoID;
                            this.MCIVMVPIdentifyingName = oMCitemBasicInfo.ComponentName;
                        }
                    }
                    if (!String.Equals(this.MCIVMVPLorenzoID, this.oMedBrandChild.objPresItemVM.LorenzoID, StringComparison.CurrentCultureIgnoreCase)) {
                        if (String.IsNullOrEmpty(this.VMVPLorenzoID))
                            this.VMVPLorenzoID = this.MCIVMVPLorenzoID;
                        this.VMVPIdentifyingName = this.MCIVMVPIdentifyingName;
                    }
                    this.UpdateMCFormViewer(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
                        this.MCIVMVPIdentifyingName + " - " + this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.McIsformulary,
                        this.oMedBrandChild.objPresItemVM.LorenzoID,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.MCVersion,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DrugProperties,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.PrescibableItemOID,
                        this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.MCIUoms);
                    this.oMedBrandChild.appDialog.DialogResult = true;
                }
                else {
                    let isformulary: boolean = true;
                    if (String.Compare(this.oMedBrandChild.objPresItemVM?.FormViewerDetails.BasicDetails.IsFormulary, "1", StringComparison.OrdinalIgnoreCase) == 0)
                        isformulary = true;
                    else if (String.Compare(this.oMedBrandChild.objPresItemVM?.FormViewerDetails.BasicDetails.IsFormulary, "0", StringComparison.OrdinalIgnoreCase) == 0)
                        isformulary = false;
                    let IsMonPeriodMand: boolean = false;
                    IsMonPeriodMand = this.oMedBrandChild.objPresItemVM.formViewerDetails.BasicDetails.IsCondDoseMonitoringPeriodReq;
                    if (ProfileData.AdditionalPrescConfig.FormularyMandatory && !isformulary && this.ActionCode != ActivityTypes.Amend && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) != 0) {
                        if (!String.Equals(this.LorenzoID, this.oMedBrandChild.objPresItemVM.LorenzoID, StringComparison.CurrentCultureIgnoreCase)) {
                            if (String.IsNullOrEmpty(this.VMVPLorenzoID))
                                this.VMVPLorenzoID = this.LorenzoID;
                            this.VMVPIdentifyingName = this.BrandOldValue.IdentifyingName;
                        }
                        //this.omedNonFormulary = new medNonFormulary(ObjectHelper.CreateObject(new NonFormularyVM(true), { ItemName: this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName }));
                        this.omedNonFormulary = new medNonFormulary();
                        this.omedNonFormulary.constructorImpl(ObjectHelper.CreateObject(new NonFormularyVM(true), { ItemName: this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName }));
                        AppActivity.OpenWindow("Non formulary item ", this.omedNonFormulary, (s,e) => {this.objNFSelProduct_Closed(s);}, "Non formulary item", false, 255, 419, false, WindowButtonType.OkCancel, null);
                    }
                    else {
                        if (!String.Equals(this.LorenzoID, this.oMedBrandChild.objPresItemVM.LorenzoID, StringComparison.CurrentCultureIgnoreCase)) {
                            if (String.IsNullOrEmpty(this.VMVPLorenzoID))
                                this.VMVPLorenzoID = this.LorenzoID;
                            this.VMVPIdentifyingName = this.BrandOldValue.IdentifyingName;
                        }
                        if (this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0) {
                            let tmpRouteOID: string = (this.FormViewerDetails.BasicDetails.Route != null && this.FormViewerDetails.BasicDetails.Route.Value != null) ? this.FormViewerDetails.BasicDetails.Route.Value : null;
                            if (this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousRoutes == null && this.FormViewerDetails.BasicDetails.PreviousOldRoute == null) {
                                this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousRoutes = this.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
                                this.FormViewerDetails.BasicDetails.PreviousOldRoute = this.FormViewerDetails.BasicDetails.Route;
                            }
                            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
                            this.FormViewerDetails.BasicDetails.IsAllowMultiRoute = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute;
                            if (this.FormViewerDetails.BasicDetails.IsAllowMultiRoute) {
                                if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) != 0) {
                                    this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(ObjectHelper.CreateObject(new CListItem(), {
                                        DisplayText: "More",
                                        Value: "CC_More"
                                    }));
                                }
                            }
                            else {
                                this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText: "More",
                                    Value: "CC_More"
                                }));
                            }
                            this.oDefaultRoute = this.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
                            if ((tmpRouteOID != null) && (this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Any(i => i.Value == tmpRouteOID)))
                                this.FormViewerDetails.BasicDetails.Route = this.FormViewerDetails.BasicDetails.GetComboValue(this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.FirstOrDefault(x => x.Value == tmpRouteOID), this.FormViewerDetails.BasicDetails.DefaultDetails.Routes);
                        }
                        this.UpdateFormViewerDetails(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
                            this.BrandOldValue.IdentifyingName + " - " + this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName,
                            this.oMedBrandChild.objPresItemVM.FormularyNote,
                            this.oMedBrandChild.objPresItemVM.LorenzoID,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.MCVersion,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DrugProperties,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DosageForm.DisplayText,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DosageForm.Value,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.Strength.DisplayText, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsCondDoseMonitoringPeriodReq,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsInfusionFluid,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod,
                            this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsAuthorise);
                        this.oMedBrandChild.appDialog.DialogResult = true;
                    }
                }
                this.SetQuantityState();
                if ((String.Compare(this.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) == 0 && this.isAdhocitem == true) || String.Compare(this.FormViewerDetails.BasicDetails.itemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) != 0)
                this.GetResolveDetailsforQuantity(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType, AppSessionInfo.AMCV, '\0', 0);
                this.IsTechValidateMandatory = false;
                this.GetConflictImageStatus();
                this.GetMCConflictImageStatus();
                this.SetTechvalImageStatus();
            }
            if ((this.ActionCode == ActivityTypes.Amend || this.ActionCode == ActivityTypes.Reorder || this.ActionCode == ActivityTypes.UnHold) && !String.IsNullOrEmpty(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName)) {
                this.FormViewerDetails.BasicDetails.PrescribedBrandName = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName;
            }
        }
        
        objNFSelProduct_Closed(args: AppDialogEventargs): void {
            this.oAppDialogWindow = args.AppChildWindow as ChildWindow;
            this.omedNonFormulary = args.Content && args.Content.Component ? args.Content.Component as medNonFormulary : this.omedNonFormulary;
            if (args.Result == AppDialogResult.Ok) {  
                if (this.omedNonFormulary.OKButtonClick()) {
                    let NonFormularyReason: CListItem = ObjectHelper.CreateType<CListItem>(this.omedNonFormulary.cboReason.SelectedItem, CListItem);
                    let sOtherNonFormularyReason: string = this.MCNonFormularyReason = this.MCOtherNonFormularyReason = String.Empty;
                    let sMCnonformulary: string = String.Empty;
                    sMCnonformulary = NonFormularyReason.Value.ToString();
                    this.MCNonFormularyReason = NonFormularyReason.DisplayText;
                    this.MCOtherNonFormularyReason = this.omedNonFormulary.txtOtherReason.Text;
                    if (NonFormularyReason != null && String.Compare(NonFormularyReason.Value, "CC_OTHER") == 0) {
                        sOtherNonFormularyReason = this.omedNonFormulary.txtOtherReason.Text;
                    }
                    this.NonFormularyReason = NonFormularyReason;
                    this.OtherNonFormularyReason = sOtherNonFormularyReason;
                    if (this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DefaultDetails != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0) {
                        let tmpRouteOID: string = (this.FormViewerDetails.BasicDetails.Route != null && this.FormViewerDetails.BasicDetails.Route.Value != null) ? this.FormViewerDetails.BasicDetails.Route.Value : null;
                        if (this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousRoutes == null && this.FormViewerDetails.BasicDetails.PreviousOldRoute == null) {
                            this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousRoutes = this.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
                            this.FormViewerDetails.BasicDetails.PreviousOldRoute = this.FormViewerDetails.BasicDetails.Route;
                        }
                        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
                        this.FormViewerDetails.BasicDetails.IsAllowMultiRoute = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute;
                        if (this.FormViewerDetails.BasicDetails.IsAllowMultiRoute && this.FormViewerDetails.BasicDetails.IsMultiRouteChecked) {
                            if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration) != 0) {
                                this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText: "More",
                                    Value: "CC_More"
                                }));
                            }
                        }
                        else {
                            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(ObjectHelper.CreateObject(new CListItem(), {
                                DisplayText: "More",
                                Value: "CC_More"
                            }));
                        }
                        this.oDefaultRoute = this.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
                        if ((tmpRouteOID != null) && (this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Any(i => i.Value == tmpRouteOID)))
                            this.FormViewerDetails.BasicDetails.Route = this.FormViewerDetails.BasicDetails.GetComboValue(this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(x => x.Value == tmpRouteOID).FirstOrDefault(), this.FormViewerDetails.BasicDetails.DefaultDetails.Routes);
                    }
                    this.UpdateFormViewerDetails(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
                        this.BrandOldValue.IdentifyingName + " - " + this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName, this.oMedBrandChild.objPresItemVM.FormularyNote,
                        this.oMedBrandChild.objPresItemVM.LorenzoID, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.MCVersion, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DrugProperties, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DosageForm.DisplayText, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DosageForm.Value, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.Strength.DisplayText, false, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsInfusionFluid, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod, this.BrandOldValue.IsAuthorise);
                    this.oMedBrandChild.appDialog.DialogResult = true;
                    this.oMedBrandChild.dupDialogRef.close();
                    this.oAppDialogWindow.DialogResult = true;
                    this.SetTechvalImageStatus();
                    if (!String.IsNullOrEmpty(this.NonFormularyCheckNote)) {
                        this.FormViewerDetails.BasicDetails.PrescribingNote = this.NonFormularyCheckNote;
                        this.FormViewerDetails.BasicDetails.IsPrescribingNoteIconVisible = Visibility.Visible;
                    }
                }
            }
            else if (args.Result == AppDialogResult.Cancel) {
                this.omedNonFormulary.CancelButtonClick();
            }
            if (this.FormViewerDetails != null && this.FormViewerDetails.BasicDetails != null && this.FormViewerDetails.BasicDetails.InfusionDetails != null && this.FormViewerDetails.BasicDetails.InfusionDetails.SelectedSequenceName != null) {
                CSequentialHelper.ClearReviewDetails(this, true);
            }
        }
        objNFBrand_Closed(args: AppDialogEventargs): void {
            this.oAppDialogWindow = args.AppChildWindow as ChildWindow;
            this.omedNonFormulary = args.Content && args.Content.Component ? args.Content.Component as medNonFormulary : this.omedNonFormulary;
            if (args.Result == AppDialogResult.Ok) {
                if (this.omedNonFormulary.OKButtonClick()) {
                    let NonFormularyReason: CListItem = ObjectHelper.CreateType<CListItem>(this.omedNonFormulary.cboReason.SelectedItem, CListItem);
                    let sOtherNonFormularyReason: string = this.MCNonFormularyReason = this.MCOtherNonFormularyReason = String.Empty;
                    let sMCnonformulary: string = String.Empty;
                    sMCnonformulary = NonFormularyReason.Value.ToString();
                    this.MCNonFormularyReason = NonFormularyReason.DisplayText;
                    this.MCOtherNonFormularyReason = this.omedNonFormulary.txtOtherReason.Text;
                    if (NonFormularyReason != null && String.Compare(NonFormularyReason.Value, "CC_OTHER") == 0) {
                        sOtherNonFormularyReason = this.omedNonFormulary.txtOtherReason.Text;
                    }
                    this.NonFormularyReason = NonFormularyReason;
                    this.OtherNonFormularyReason = sOtherNonFormularyReason;
                    let oDrugProp: ObservableCollection<ManagePrescSer.DrugProperty> = new ObservableCollection<ManagePrescSer.DrugProperty>();
                    if (this.oMedBrandChild != null && this.oMedBrandChild.objPresItemVM != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails != null && this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DrugProperties != null) {
                        oDrugProp = this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DrugProperties;
                    }
                    this.UpdateFormViewerDetails(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
                        this.BrandOldValue.IdentifyingName + " - " + this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName, this.oMedBrandChild.objPresItemVM.FormularyNote,
                        this.oMedBrandChild.objPresItemVM.LorenzoID, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.MCVersion, oDrugProp, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingName, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DosageForm.DisplayText, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.DosageForm.Value, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.Strength.DisplayText, false, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsInfusionFluid, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsAuthorise);
                    this.oMedBrandChild.appDialog.DialogResult = true;
                    this.oMedBrandChild.dupDialogRef.close();
                   // this.oAppDialogWindow.DialogResult = true;
                    this.SetQuantityState();
                    this.ParentbaseVM.CheckalreadyPrescOnBrandselect(this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingOID, this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IdentifyingType);
                }
                if (!String.IsNullOrEmpty(this.NonFormularyCheckNote)) {
                    this.FormViewerDetails.BasicDetails.PrescribingNote = this.NonFormularyCheckNote;
                    this.FormViewerDetails.BasicDetails.IsPrescribingNoteIconVisible = Visibility.Visible;
                }
            }
            else if (args.Result == AppDialogResult.Cancel) {
                this.omedNonFormulary.CancelButtonClick();
            }
            if (this.FormViewerDetails != null && this.FormViewerDetails.BasicDetails != null && this.FormViewerDetails.BasicDetails.InfusionDetails != null && this.FormViewerDetails.BasicDetails.InfusionDetails.SelectedSequenceName != null) {
                CSequentialHelper.ClearReviewDetails(this, true);
            }
        }
        
  private UpdateFormViewerDetails(
    IdentifyingOID: number,
    IdentifyingType: string,
    IdentifyingName: string,
    FormularyNote: string,
    LorenzoID: string,
    MCVersion: string,
    DrugProp: ObservableCollection<DrugProperty>,
    BrandName: string,
    DosageForm: string,
    DosageFormValue: string,
    Strength: string,
    IsMonPeriodMand: boolean,
    IsInfusionFluid: string,
    IsIgnoreAdminMethod: boolean,
    IsAuthorise: boolean
  ): void {
    this.ReasonForMedClerkIsMandatory =
      this.FormViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify;
    this.FormViewerDetails.BasicDetails.IdentifyingOID = IdentifyingOID;
    this.FormViewerDetails.BasicDetails.IdentifyingType = IdentifyingType;
    this.FormViewerDetails.BasicDetails.OriginalIdentifyingName = BrandName;
    this.FormViewerDetails.BasicDetails.IdentifyingName = IdentifyingName;
    this.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod =
      IsIgnoreAdminMethod;
    this.formViewerDetails.BasicDetails.IsAuthorise = IsAuthorise;
    this.formViewerDetails.BasicDetails.IsOrgAuthorise = IsAuthorise;
    let Authorisevalue: string = this.formViewerDetails.BasicDetails.IsAuthorise
      ? '1'
      : String.Empty;
    if (
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) &&
      PatientContext.ClerkFormViewDefaultBehavior !=
        ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
      this.formViewerDetails.BasicDetails.IsAuthorise &&
      (this.ActionCode == ActivityTypes.Prescribe ||
        this.ActionCode == ActivityTypes.Amend)
    ) {
      this.FormViewerDetails.BasicDetails.IndentifyingDrugName = null;
      this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
        this.FormViewerDetails.BasicDetails.IdentifyingName +
        CConstants.sAuthoriseText;
      if (this.AuthoriseTVDisableEvent != null) {
        this.AuthoriseTVDisableEvent(Authorisevalue);
      }
    } else {
      if (this.AuthoriseTVDisableEvent != null) {
        this.AuthoriseTVDisableEvent(Authorisevalue);
      }
    }
    this.FormViewerDetails.BasicDetails.itemSubType = this.ItemSubType;
    this.ItemSubType = this.ItemSubType;
    this.FormViewerDetails.BasicDetails.mCIItemDisplay = this.MCIItemDisplay;
    this.FormViewerDetails.BasicDetails.MCIItemDrugprop = this.MCIItemDisplay;
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking
      ) == 0 &&
      String.Compare(this.bbrandoldvalue.ToString(), 'True') == 0
    ) {
      this.FormViewerDetails.BasicDetails.DefaultDetails.Forms =
        this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousForms;
      this.FormViewerDetails.BasicDetails.DosageForm =
        this.FormViewerDetails.BasicDetails.PreviousDosageForm;
      this.FormViewerDetails.BasicDetails.DefaultDetails.Strengths =
        this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousStrengths;
      this.FormViewerDetails.BasicDetails.Strength =
        this.FormViewerDetails.BasicDetails.PreviousOldstrength;
    }
    if (this.bselectprodoldvalue) {
      this.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
        this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousRoutes;
      this.FormViewerDetails.BasicDetails.Route =
        this.FormViewerDetails.BasicDetails.PreviousOldRoute;
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) != 0
    ) {
      if (
        !String.IsNullOrEmpty(DosageForm) &&
        !String.IsNullOrEmpty(DosageFormValue)
      ) {
        this.FormViewerDetails.BasicDetails.DosageForm = new CListItem();
        this.FormViewerDetails.BasicDetails.DosageForm.DisplayText = DosageForm;
        this.FormViewerDetails.BasicDetails.DosageForm.Value = DosageFormValue;
      }
      if (!String.IsNullOrEmpty(Strength)) {
        this.FormViewerDetails.BasicDetails.Strength = new CListItem();
        this.FormViewerDetails.BasicDetails.Strength.DisplayText = Strength;
      }
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.DefaultDetails != null
    ) {
      if (this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null) {
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.forEach(
          (route) => {
            if (
              this.FormViewerDetails.BasicDetails.Route != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.Route.Value
              )
            ) {
              if (
                this.FormViewerDetails.BasicDetails.Route.Value.Contains(
                  route.Value
                )
              )
                route.IsSelected = true;
              else route.IsSelected = false;
            }
          }
        );
        if (
          !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
          !PatientContext.PrescriptionType.Equals(
            PrescriptionTypes.ForAdministration,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          let selectedrouteClistitem: CListItem[] =
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
              (cl) => cl.IsSelected == true
            ).ToArray();
          if (
            selectedrouteClistitem != null &&
            selectedrouteClistitem.Count() > 0 &&
            this.FormViewerDetails.BasicDetails.Route == null
          ) {
            this.FormViewerDetails.BasicDetails.Route =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: MedicationCommonBB.RouteName(
                  selectedrouteClistitem
                ),
                Value: MedicationCommonBB.RouteOID(selectedrouteClistitem),
                Tag: MedicationCommonBB.RouteTag(selectedrouteClistitem),
              });
          }
        }
      }
      if (this.FormViewerDetails.BasicDetails.DefaultDetails.Forms != null) {
        this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.forEach(
          (forms) => {
            if (
              this.FormViewerDetails.BasicDetails.DosageForm != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.DosageForm.Value
              )
            ) {
              if (
                forms.Value ==
                this.FormViewerDetails.BasicDetails.DosageForm.Value
              )
                forms.IsSelected = true;
            }
          }
        );
        this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousForms =
          this.FormViewerDetails.BasicDetails.DefaultDetails.Forms;
        this.FormViewerDetails.BasicDetails.PreviousDosageForm =
          this.FormViewerDetails.BasicDetails.DosageForm;
      }
      if (
        this.FormViewerDetails.BasicDetails.DefaultDetails.Strengths != null
      ) {
        this.FormViewerDetails.BasicDetails.DefaultDetails.Strengths.forEach(
          (Strengths) => {
            if (
              this.FormViewerDetails.BasicDetails.Strength != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.Strength.Value
              )
            ) {
              if (
                Strengths.Value ==
                this.FormViewerDetails.BasicDetails.Strength.Value
              )
                Strengths.IsSelected = true;
            }
          }
        );
        this.FormViewerDetails.BasicDetails.DefaultDetails.PreviousStrengths =
          this.FormViewerDetails.BasicDetails.DefaultDetails.Strengths;
        this.FormViewerDetails.BasicDetails.PreviousOldstrength =
          this.FormViewerDetails.BasicDetails.Strength;
      }
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0
    ) {
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null
      ) {
        if (this.FormViewerDetails.BasicDetails.IsAllowMultiRoute) {
          if (
            this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
            !this.FormViewerDetails.BasicDetails.IsMultiRouteChecked
          ) {
            this.FormViewerDetails.BasicDetails.IsenableMultiRoute = true;
            this.FormViewerDetails.BasicDetails.IsenableRoute = true;
            this.FormViewerDetails.BasicDetails.IsMultiRouteVisible =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.IsMultiRouteComboVisible =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.IsMultiRouteDropDownVisible =
              Visibility.Collapsed;
            this.FormViewerDetails.BasicDetails.IsRouteVisible =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.IsRouteComboVisible =
              Visibility.Collapsed;
          } else if (
            this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
            this.FormViewerDetails.BasicDetails.IsMultiRouteChecked
          ) {
            this.FormViewerDetails.BasicDetails.IsenableMultiRoute = true;
            this.FormViewerDetails.BasicDetails.IsenableRoute = true;
            this.FormViewerDetails.BasicDetails.IsMultiRouteVisible =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.IsMultiRouteComboVisible =
              Visibility.Collapsed;
            this.FormViewerDetails.BasicDetails.IsMultiRouteDropDownVisible =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.IsRouteVisible =
              Visibility.Collapsed;
            this.FormViewerDetails.BasicDetails.IsRouteComboVisible =
              Visibility.Collapsed;
          }
          if (
            String.Equals(
              this.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.IsenableMultiRouteChkBox = true;
          } else {
            this.FormViewerDetails.BasicDetails.IsenableMultiRouteChkBox =
              false;
          }
        } else {
          this.FormViewerDetails.BasicDetails.IsenableMultiRoute = false;
          this.FormViewerDetails.BasicDetails.IsenableRoute = true;
          this.FormViewerDetails.BasicDetails.IsMultiRouteVisible =
            Visibility.Collapsed;
          this.FormViewerDetails.BasicDetails.IsMultiRouteDropDownVisible =
            Visibility.Collapsed;
          this.FormViewerDetails.BasicDetails.IsMultiRouteComboVisible =
            Visibility.Collapsed;
          this.FormViewerDetails.BasicDetails.IsRouteVisible =
            Visibility.Visible;
          this.FormViewerDetails.BasicDetails.IsRouteComboVisible =
            Visibility.Visible;
        }
        if (
          this.FormViewerDetails.BasicDetails.AccessContraintControls != null &&
          this.FormViewerDetails.BasicDetails.AccessContraintControls.Contains(
            'cboRoute'
          )
        ) {
          this.FormViewerDetails.BasicDetails.IsenableRoute = false;
        }
        let selectedRouteValue: string = String.Empty;
        if (
          this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null
        ) {
          if (
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count >
              0 &&
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Any((x) =>
              String.Equals(
                x.Value,
                'CC_More',
                StringComparison.CurrentCultureIgnoreCase
              )
            )
          ) {
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              this.FormViewerDetails.BasicDetails.InfusionType != null &&
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .IsenableInfusionType == false &&
              this.FormViewerDetails.BasicDetails.FollowUpStatLaunch != 'S'
            ) {
              if (
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .CurrentSequentialOrder > 1
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType =
                  false;
              } else {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType =
                  true;
              }
            }
          }
          let selectedrouteClistitem: CListItem[] =
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
              (cl) => cl.IsSelected == true
            ).ToArray();
          if (
            selectedrouteClistitem != null &&
            selectedrouteClistitem.Count() > 0 &&
            ((selectedrouteClistitem.Count() == 1 &&
              !this.FormViewerDetails.BasicDetails.IsAllowMultiRoute) ||
              this.FormViewerDetails.BasicDetails.IsAllowMultiRoute)
          )
            this.FormViewerDetails.BasicDetails.Route =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: MedicationCommonBB.RouteName(
                  selectedrouteClistitem
                ),
                Value: MedicationCommonBB.RouteOID(selectedrouteClistitem),
                Tag: MedicationCommonBB.RouteTag(selectedrouteClistitem),
              });
          else this.FormViewerDetails.BasicDetails.Route = null;
          if (
            !this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
            this.FormViewerDetails.BasicDetails.Route != null &&
            this.FormViewerDetails.BasicDetails.Route.Tag != null &&
            this.FormViewerDetails.BasicDetails.Route.Tag.ToString() == '1' &&
            PatientContext.IsINFUSIONON
          ) {
            this.FormViewerDetails.BasicDetails.IsSiteEnabled = true;
          } else if (
            this.FormViewerDetails.BasicDetails.Route != null &&
            !this.FormViewerDetails.BasicDetails.Route.DisplayText.Contains(
              CConstants.MULTIROUTEDILIMITER
            ) &&
            this.FormViewerDetails.BasicDetails.Route.Tag != null &&
            this.FormViewerDetails.BasicDetails.Route.Tag.ToString() == '1' &&
            PatientContext.IsINFUSIONON
          ) {
            this.FormViewerDetails.BasicDetails.IsSiteEnabled = true;
          }
          if (!this.FormViewerDetails.BasicDetails.IsAllowMultiRoute) {
            this.FormViewerDetails.BasicDetails.IsEnableStrength = true;
          }
          if (
            this.FormViewerDetails.BasicDetails.Route != null &&
            this.FormViewerDetails.BasicDetails.Route.Tag != null
          ) {
            if (
              !(
                this.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains(
                  '0'
                ) &&
                this.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains(
                  '1'
                )
              )
            ) {
              if (
                this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                this.FormViewerDetails.BasicDetails.InfusionType != null &&
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .IsenableInfusionType == false &&
                this.FormViewerDetails.BasicDetails.FollowUpStatLaunch != 'S'
              ) {
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .CurrentSequentialOrder > 1
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType =
                    false;
                } else {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType =
                    true;
                }
              }
            }
          }
          if (
            this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration
            )
          ) {
            if (this.UpdateMultiRoutePropertyChangedEvent != null)
              this.UpdateMultiRoutePropertyChangedEvent();
          }
        }
      }
    }
    if (
      this.LorenzoID != LorenzoID &&
      this.FormViewerDetails != null &&
      this.FormViewerDetails.PresItemDRCVM != null
    ) {
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM =
        new ObservableCollection<MedDRCVM>();
      this.FormViewerDetails.PresItemDRCVM.MedDRCReason = null;
      this.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = false;
      if (
        !this.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Contains(
          'DRCBrand'
        )
      )
        this.FormViewerDetails.BasicDetails.lstDRCAmendedFlds.Add('DRCBrand');
    }
    if (this.LorenzoID != LorenzoID) {
      this.FormViewerDetails.BasicDetails.DCAmendMessage();
    }
    this.LorenzoID = LorenzoID;
    this.FormViewerDetails.BasicDetails.MCVersion = MCVersion;
    this.FormularyNote = FormularyNote;
    this.FormViewerDetails.BasicDetails.DrugProperties = DrugProp;
    this._IsControlledDrug = '0';
    if (this.FormViewerDetails.BasicDetails.DrugProperties != null) {
      for (
        let i: number = 0;
        i < this.FormViewerDetails.BasicDetails.DrugProperties.Count;
        i++
      ) {
        if (
          this.FormViewerDetails.BasicDetails.DrugProperties[i]
            .DrugPropertyCode == 'CC_CNTRLDDRUG'
        ) {
          this._IsControlledDrug = '1';
        }
      }
    } else {
      this._IsControlledDrug = '0';
    }
    this.FormViewerDetails.BasicDetails.BrandName = BrandName;
    if (this.FormViewerDetails.BasicDetails.InfusionDetails == null) {
      this.FormViewerDetails.BasicDetails.InfusionDetails = new InfusionVM(
        this.FormViewerDetails.BasicDetails
      );
      this.FormViewerDetails.BasicDetails.InfusionDetails.SelProdName =
        BrandName;
      this.FormViewerDetails.BasicDetails.InfusionDetails.isProductMandatory =
        false;
    } else {
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails.isProductVisible ==
        Visibility.Visible
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.SelProdName =
          BrandName;
        if (!this.bselectprodoldvalue) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.isProductMandatory =
            false;
        }
        if (String.Compare(IsInfusionFluid, '1') == 0) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
            Visibility.Collapsed;
          this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory =
            false;
        } else {
          this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
            this != null &&
            this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.itemSubType != null &&
            String.Equals(
              this.FormViewerDetails.BasicDetails.itemSubType,
              CConstants.SUBTYPE,
              StringComparison.OrdinalIgnoreCase
            )
              ? Visibility.Collapsed
              : Visibility.Visible;
        }
      }
      this.formViewerDetails.BasicDetails.IsCondDoseMonitoringPeriodReq =
        IsMonPeriodMand;
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfMonitoringperiodVisi == Visibility.Visible
      )
        this.FormViewerDetails.BasicDetails.InfusionDetails.IsMandatoryMonitoringPeriod =
          IsMonPeriodMand;
    }
    this.FormViewerDetails.BasicDetails.IsRegenerateConflictsForBrand = true;
    if (this.BrandChangedEvent != null) {
      this.BrandChangedEvent(this);
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        (this.FormViewerDetails.BasicDetails.InfusionType != null ||
          this.FormViewerDetails.BasicDetails.InfusionType == null)
      ) {
        if (String.Equals(IsInfusionFluid, '1')) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
            Visibility.Collapsed;
          this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory =
            false;
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext =
            String.Empty;
          if (
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .IsConcentrationVisible == Visibility.Visible &&
            ((this.FormViewerDetails.BasicDetails.InfusionType == null &&
              this.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded) ||
              (this.FormViewerDetails.BasicDetails.InfusionType != null &&
                this.FormViewerDetails.BasicDetails.InfusionType.Value !=
                  null &&
                String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypeCode.CONTINUOUS
                )))
          ) {
            this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration =
              String.Empty;
            this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration =
              String.Empty;
            this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM =
              null;
            this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM =
              null;
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible =
              Visibility.Collapsed;
          } else if (
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .IsVolumeVisible == Visibility.Visible &&
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            this.FormViewerDetails.BasicDetails.InfusionType.Value != null &&
            (String.Equals(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.SINGLEDOSEVOLUME
            ) ||
              String.Equals(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.INTERMITTENT
              ))
          ) {
            this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume =
              String.Empty;
            this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM =
              null;
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible =
              Visibility.Collapsed;
          }
        } else {
          this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
            this != null &&
            this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.itemSubType != null &&
            String.Equals(
              this.FormViewerDetails.BasicDetails.itemSubType,
              CConstants.SUBTYPE,
              StringComparison.OrdinalIgnoreCase
            )
              ? Visibility.Collapsed
              : Visibility.Visible;
        }
      }
    }
    if (this.RegenerateConflictsForBrandEvent != null)
      this.RegenerateConflictsForBrandEvent(this);
  }
  private UpdateMCFormViewer(
    IdentifyingOID: number,
    IdentifyingType: string,
    IdentifyingName: string,
    isformulary: string,
    LorenzoID: string,
    MCVersion: string,
    DrugProp: ObservableCollection<DrugProperty>,
    lnprescribableitemlistoid: number,
    MciUoms: string
  ): void {
    let iformulary: boolean = false;
    if (
      this.FormViewerDetails.MulticomponentDetails != null &&
      this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null &&
      this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 0
    ) {
      let icount: number =
        this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
      for (let rcount: number = 0; rcount < icount; rcount++) {
        if (
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount]
            .IsUpto == true
        ) {
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].IdentifyingOID = IdentifyingOID;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].IdentifyingType = IdentifyingType;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].ComponentName = IdentifyingName;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].LorenzoID = LorenzoID;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].PrescribableItemListOID = lnprescribableitemlistoid;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].QuantityUOM = String.Empty;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].QuantityUomcol = MciUoms;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].Nonformularyreason = String.Empty;
          if (isformulary == '1') iformulary = true;
          else iformulary = false;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].IsNonFormulary = iformulary;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].PrescriptionItemOID = 0;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].QuantityUOMOID = 0;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].VMVPLorenzoID = this.VMVPLorenzoID;
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].MCIBrandName = this.FormViewerDetails.BasicDetails.IdentifyingName;
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            ) &&
            PatientContext.ClerkFormViewDefaultBehavior !=
              ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IdentifyingType
            ) &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].LorenzoID
            ) &&
            !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.MCVersion)
          ) {
            let oParam: string[] = new Array(3);
          //  let Isauthorise: string = String.Empty;
            let Isauthorise: false;
            oParam[0] =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IdentifyingType;
            oParam[1] =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].LorenzoID;
            oParam[2] = this.FormViewerDetails.BasicDetails.MCVersion;
            // Isauthorise = ObjectHelper.CreateType<string>(
            //   HtmlPage.Window.Invoke('GetIsItemAuthorise', oParam),
            //   'string'
            // );
            if (
              String.Equals(
                Isauthorise,
                '1',
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IsMCAuthorize = true;
            }
          }
          if (DrugProp != null) {
            let sMcitemdisplayprop: StringBuilder = new StringBuilder();
            for (let i: number = 0; i < DrugProp.Count; i++) {
              sMcitemdisplayprop.Append(DrugProp[i].DrugPropertyCode);
              sMcitemdisplayprop.Append(',');
            }
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].Compoentsdrugprop = sMcitemdisplayprop.ToString();
          }
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].MCUOMValue = new CListItem();
          let sUomlist: StringBuilder = new StringBuilder();
          let sProblemName: StringBuilder = new StringBuilder();
          if (
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].QuantityUomcol != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].QuantityUomcol
            )
          ) {
            let sQUOMlist: string[] =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].QuantityUomcol.Split('|');
            if (sQUOMlist != null && sQUOMlist.length > 0) {
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUOMCombo = new ObservableCollection<CListItem>();
              for (let j: number = 0; j <= sQUOMlist.length - 1; j++) {
                let stmp: string[] = sQUOMlist[j].Split('~');
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].MCUOMCombo.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: stmp[1],
                    Value: stmp[0],
                  })
                );
              }
            }
          }
          if (
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].QuantityUOM != null
          ) {
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].MCUOMValue = ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].QuantityUOM,
              Value:
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].QuantityUOMOID.ToString(),
            });
          }
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            rcount
          ].MCUomName =
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].MCUOMValue.DisplayText;
          if (
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].MCUOMCombo != null
          ) {
            let ncount: number =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUOMCombo.Count;
            if (
              ncount > 0 &&
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUOMCombo != null &&
              !this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUOMCombo[ncount - 1].DisplayText.Contains('More')
            )
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUOMCombo.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
            else if (
              ncount == 0 &&
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUOMCombo != null
            )
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUOMCombo.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
          } else {
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].MCUOMCombo = new ObservableCollection<CListItem>();
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].MCUOMCombo.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
        }
      }
      this.GetMcchilditem();
      if (!String.IsNullOrEmpty(this.Itemlist)) {
        if (this.FormViewerDetails.BasicDetails.isAdhocitem == true) {
          this.FormViewerDetails.BasicDetails.bIsMCIrule = true;
          this.FormViewerDetails.BasicDetails.GetAdhocMCIFormDefaults(
            this.Itemlist,
            String.Empty,
            String.Empty,
            this.FormViewerDetails.BasicDetails.MCVersion,
            FormDefaults.ALL.ToString(),
            IdentifyingOID,
            IdentifyingType
          );
        }
      }
    }
    this.FormViewerDetails.BasicDetails.IsRegenerateConflictsForBrand = true;
    this.FormViewerDetails.BasicDetails.IsenableDosage = false;
    if (this.BrandChangedEvent != null) this.BrandChangedEvent(this);
    if (
      this.ActionCode != ActivityTypes.Amend ||
      (this.ActionCode == ActivityTypes.Amend &&
        !String.IsNullOrEmpty(this.OperationMode))
    ) {
      if (this.RegenerateConflictsForBrandEvent != null)
        this.RegenerateConflictsForBrandEvent(this);
    }
  }
  public SubscribeConflictIconClickEvent(ConflictIcon: Image): void {
    this._ImageConflicktClicked = ConflictIcon;
    ConflictIcon.MouseLeftButtonUp = (s, e) => {
      this.Conflict_MouseLeftButtonUp(s, e);
    };
  }
  public SubscribeFormViewerIconClickEvent(FormViewIcon: Image, control?: any): void {
    if (FormViewIcon != null && !String.IsNullOrEmpty(FormViewIcon.Name)) {
      if (
        String.Equals(
          FormViewIcon.Name,
          CConstants.FormViewerIconImage,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this._ImageFormviewerClicked = FormViewIcon;
      } else if (
        String.Equals(
          FormViewIcon.Name,
          CConstants.FormViewerReviewIconImage,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this._ImageReviewIconClicked = FormViewIcon;
      }
    } else {
      this._ImageWithoutNameClicked = FormViewIcon;
    }
    FormViewIcon.MouseLeftButtonUp = (s, e) => {
      if (control)
        control.Visibility = Visibility.Collapsed;
      this.FormViewer_MouseLeftButtonUp(s, e);
    };
  }
  public SequenciatlLinkButtonEvent(SequenceLinkIcon: Image): void {
    SequenceLinkIcon.MouseLeftButtonUp = (s, e) => {
      this.LaunchSequentialLinkButton(s, e);
    };
  }
  public SubscribeConflictIconEventForPrescNote(InformationIcon: Image): void {
    this._ImageConfictIconClickedFromCV = InformationIcon;
    InformationIcon.MouseLeftButtonDown = (s, e) => {
      this.InformationIcon_MouseLeftButtonUp(s, e);
    };
  }
  public get IsConflictsExists(): boolean {
    return this._IsConflictsExists;
  }
  public set IsConflictsExists(value: boolean) {
    this._IsConflictsExists = value;
    //NotifyPropertyChanged("IsConflictsExists");
  }
  public get IsTechValidate(): boolean {
    return this._IsTechValidate;
  }
  public set IsTechValidate(value: boolean) {
    this._IsTechValidate = value;
    //NotifyPropertyChanged("IsTechValidate");
  }
  private _IsClinicallyVerify: Boolean = false;
  public get IsClinicallyVerify(): Boolean {
    return this._IsClinicallyVerify;
  }
  public set IsClinicallyVerify(value: Boolean) {
    this._IsClinicallyVerify = value;
    //NotifyPropertyChanged("IsClinicallyVerify");
  }
  public get HIWarningBehaviourType(): string {
    return this._HIWarBhTyp;
  }
  public set HIWarningBehaviourType(value: string) {
    this._HIWarBhTyp = value;
    //NotifyPropertyChanged("HIWarningBehaviourType");
  }
  public get HIIsAcknowledged(): string {
    return this._HIIsAcknowledged;
  }
  public set HIIsAcknowledged(value: string) {
    this._HIIsAcknowledged = value;
    //NotifyPropertyChanged("HIIsAcknowledged");
  }
  public GetReplacementDrugs(
    oPrescribeVM: MedicationPrescribeVM,
    vSelIndex: number
  ): void {
    if (
      String.Compare(
        this.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.Precatalog,
        StringComparison.CurrentCulture
      ) != 0 ||
      this.IsHold
    ) {
      this.oVM = oPrescribeVM;
      this.nSelIndex = vSelIndex;
      let objService: ManagePrescSer.ManagePrescriptionWSSoapClient =
        new ManagePrescSer.ManagePrescriptionWSSoapClient();
      objService.GetReplacementDrugsCompleted = (s, e) => {
        this.objService_GetReplacementDrugsCompleted(s, e);
      };
      let objReqReplacmnt: ManagePrescSer.CReqMsgGetReplacementDrugs =
        new ManagePrescSer.CReqMsgGetReplacementDrugs();
      objReqReplacmnt.oDrugItemBasicDataBC =
        new ManagePrescSer.DrugItemInputData();
      objReqReplacmnt.oDrugItemBasicDataBC.IdentifyingOID =
        this.FormViewerDetails.BasicDetails.IdentifyingOID;
      objReqReplacmnt.oDrugItemBasicDataBC.IdentifyingType =
        this.FormViewerDetails.BasicDetails.IdentifyingType;
      objReqReplacmnt.oDrugItemBasicDataBC.MCVersionNo = AppSessionInfo.AMCV;
      objReqReplacmnt.oContextInformation = Common.FillContext();
      objService.GetReplacementDrugsAsync(objReqReplacmnt);
    }
  }
  public GetPresItemDetailsUnHoldOldDrug(): void {
    let oPrescItemInputData: IPPMAManagePrescSer.PrescriptionItemInputData =
      new IPPMAManagePrescSer.PrescriptionItemInputData();
    oPrescItemInputData.OID = this.PrescriptionItemOID;
    oPrescItemInputData.PrescriptionItemStatus = this.PrescriptionItemStatus;
    oPrescItemInputData.ActiveMCVersion = AppSessionInfo.AMCV;
    oPrescItemInputData.MCVesrionNo =
      this.FormViewerDetails.BasicDetails.MCVersion;
    let oReqResolve: IPPMAManagePrescSer.CReqMsgGetIPPPrescriptionDetails =
      new IPPMAManagePrescSer.CReqMsgGetIPPPrescriptionDetails();
    oReqResolve.oContextInformation = Common.FillContext();
    oReqResolve.oPrescriptionItemInputDataBC = oPrescItemInputData;
    let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    objServiceProxy.GetIPPPrescriptionDetailsCompleted = (s, e) => {
      this.objServiceProxy_GetIPPPrescriptionDetailsCompleted(s, e);
    };
    objServiceProxy.GetIPPPrescriptionDetailsAsync(oReqResolve);
  }
  objServiceProxy_GetIPPPrescriptionDetailsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetIPPPrescriptionDetailsCompletedEventArgs
  ): void {
    if (e.Error != null) return;
    let objResGetIPPPrescriptionDetails: IPPMAManagePrescSer.CResMsgGetIPPPrescriptionDetails;
    objResGetIPPPrescriptionDetails = e.Result;
    if (
      this.ActionCode == ActivityTypes.Reorder &&
      !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
      !String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      objResGetIPPPrescriptionDetails != null &&
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails != null &&
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails.Count > 0 &&
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
        .BasicProperties != null &&
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
        .BasicProperties.Duration != null &&
      String.Equals(
        objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
          .BasicProperties.Duration.UOMCode,
        'CC_DOSES',
        StringComparison.CurrentCultureIgnoreCase
      )
    ) {
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].EndDTTM =
        DateTime.MinValue;
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.AdminMethod != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.AdminMethod.DisplayText
      ) &&
      objResGetIPPPrescriptionDetails != null &&
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails != null &&
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails.Count > 0 &&
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
        .AdditionalProperties != null &&
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
        .AdditionalProperties.AdminMethod != null
    ) {
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].AdditionalProperties.AdminMethod.Name =
        this.FormViewerDetails.BasicDetails.AdminMethod.DisplayText;
    }
    let odetails: IPPMAManagePrescSer.PrescriptionItemDetails =
      objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0];
    if (odetails.IdentifyingOID == 0)
      odetails.IdentifyingOID =
        this.FormViewerDetails.BasicDetails.IdentifyingOID;
    let Istypeindrug: boolean =
      String.Compare(
        this.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.NONCATALOGUEITEM
      ) == 0 ||
      String.Compare(
        this.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.Precatalog
      ) == 0
        ? true
        : false;
    let IsMCI: boolean =
      !String.IsNullOrEmpty(this.ItemSubType) &&
      String.Equals(
        this.ItemSubType,
        'CC_MULCMPNTITM',
        StringComparison.CurrentCultureIgnoreCase
      )
        ? true
        : false;
    if (
      !Istypeindrug &&
      !IsMCI &&
      (String.Equals(
        this.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.CATALOGUEITEM,
        StringComparison.CurrentCultureIgnoreCase
      ) ||
        String.Equals(
          this.FormViewerDetails.BasicDetails.IdentifyingType,
          CConstants.ACTUALMOIETY,
          StringComparison.CurrentCultureIgnoreCase
        ))
    ) {
      if (
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.DrugProperties != null &&
        this.FormViewerDetails.BasicDetails.DrugProperties.Count > 0 &&
        this.FormViewerDetails.BasicDetails.DrugProperties.Where((x) =>
          String.Equals(
            x.DrugPropertyCode,
            CConstants.DrugPropertyCNTRLDDRUG,
            StringComparison.InvariantCultureIgnoreCase
          )
        ).Count() > 0
      ) {
        if (
          odetails != null &&
          odetails.BasicProperties != null &&
          odetails.BasicProperties.DrugProperties == null
        ) {
          odetails.BasicProperties.DrugProperties =
            new ObservableCollection<IPPMAManagePrescSer.DrugProperty>();
        }
        if (
          odetails.BasicProperties.DrugProperties != null &&
          odetails.BasicProperties.DrugProperties.Where((x) =>
            String.Equals(
              x.DrugPropertyCode,
              CConstants.DrugPropertyCNTRLDDRUG,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          let CDproperty =
            this.FormViewerDetails.BasicDetails.DrugProperties.Where((x) =>
              String.Equals(
                x.DrugPropertyCode,
                CConstants.DrugPropertyCNTRLDDRUG,
                StringComparison.InvariantCultureIgnoreCase
              )
            ).FirstOrDefault();
          if (CDproperty != null) {
            odetails.BasicProperties.DrugProperties.Add(
              ObjectHelper.CreateObject(
                new IPPMAManagePrescSer.DrugProperty(),
                {
                  DrugName: CDproperty.DrugName,
                  DrugPropertyCode: CDproperty.DrugPropertyCode,
                  HighRiskMsg: CDproperty.HighRiskMsg,
                  IdentifyingOID: CDproperty.IdentifyingOID,
                  IdentifyingType: CDproperty.IdentifyingType,
                  OccuranceCode: CDproperty.OccuranceCode,
                  VMChildCode: CDproperty.VMChildCode,
                }
              )
            );
          }
        }
      }
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.AdminMethod != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.AdminMethod.DisplayText
      ) &&
      odetails != null &&
      odetails.AdditionalProperties != null &&
      odetails.AdditionalProperties.AdminMethod != null &&
      !String.IsNullOrEmpty(odetails.AdditionalProperties.AdminMethod.Code) &&
      String.IsNullOrEmpty(odetails.AdditionalProperties.AdminMethod.Name)
    ) {
      odetails.AdditionalProperties.AdminMethod.Name =
        this.FormViewerDetails.BasicDetails.AdminMethod.DisplayText;
    }
    if (this.ActionCode == ActivityTypes.UnHold) {
      if (this.FormViewerDetails.BasicDetails.TitratedDoseDetails == null)
        this.FormViewerDetails.BasicDetails.TitratedDoseDetails =
          new TitratedDoseVM();
      if (this.FormViewerDetails.BasicDetails.DupTitratedDoseVM == null)
        this.FormViewerDetails.BasicDetails.DupTitratedDoseVM =
          new TitratedDoseVM();
      this.FormViewerDetails.BasicDetails.DupTitratedDoseVM.GrdTitrated =
        new ObservableCollection<TitratedScheduleDetails>();
      if (
        objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
          .BasicProperties != null &&
        objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
          .BasicProperties.FrequencyDetails != null &&
        objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
          .BasicProperties.FrequencyDetails.Frequency != null
      ) {
        this.FormViewerDetails.BasicDetails.TitratedDoseDetails.Frequencytext =
          objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].BasicProperties.FrequencyDetails.Frequency.Name;
      }
      if (
        objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
          .TitratedDoseinfo != null
      ) {
        this.FormViewerDetails.BasicDetails.TitratedDoseInstruction =
          ObjectHelper.CreateObject(new CListItem(), {
            Value:
              objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
                .TitratedDoseinfo.TitratedAdminInstruction,
          });
        this.FormViewerDetails.BasicDetails.TitratedDoseAdtnlComments =
          objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].TitratedDoseinfo.TitratedComments;
        this.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated =
          new ObservableCollection<TitratedScheduleDetails>();
        let bIsNotHavingAdminTime: boolean =
          objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
            .TitratedDoseinfo.IsHavingAdminTime == CConstants.sIsHavingtimeZero;
        if (
          objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
            .TitratedDoseinfo.TitrateScheduledinfo != null &&
          objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
            .TitratedDoseinfo.TitrateScheduledinfo.Count > 0
        ) {
          let oDistinctDates =
            objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.OrderBy(
              (x) => x.ScheduleDTTM.Date
            )
              .GroupBy((date) => date.ScheduleDTTM.ToShortDateString())
              .Select((g) => g.First().ScheduleDTTM.Date)
              .ToList();
          let oDistinctTimes =
            objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.OrderBy(
              (x) => x.ScheduleDTTM.ToShortTimeString()
            )
              .GroupBy((date) => date.ScheduleDTTM.ToShortTimeString())
              .Select((g) => g.First().ScheduleDTTM.TimeOfDay)
              .ToList();
          this.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated =
            new ObservableCollection<TitratedScheduleDetails>();
          let iRecord: number = 0;
          oDistinctTimes.forEach((record) => {
            let oT: TitratedScheduleDetails = new TitratedScheduleDetails();
            let iDate: number = 0;
            oT.ScheduledDate = new Array(oDistinctDates.Count);
            oT.ScheduleDoseValue = new Array(oDistinctDates.Count);
            oDistinctDates.forEach((daterecord) => {
              oT.ScheduledDate[iDate] = daterecord;
              oT.ScheduleDTTM = daterecord;
              // oT.ScheduleTime = record.ToString(@"hh\:mm");
              if (bIsNotHavingAdminTime)
                oT.ScheduleTime = CConstants.sDose + (iRecord + 1);
              //let i1 = objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Where(x => x.ScheduleDTTM.Date == daterecord && x.ScheduleDTTM.TimeOfDay == record).Select(i => new { i.TitratedDose }).FirstOrDefault();
              let i1 =
                objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Where(
                  (x) =>
                    x.ScheduleDTTM.Date == daterecord &&
                    x.ScheduleDTTM.TimeOfDay == record
                )
                  .Select((i) => {
                    return { TitratedDose: i.TitratedDose };
                  })
                  .FirstOrDefault();
              if (i1 != null) oT.ScheduleDoseValue[iDate] = i1.TitratedDose;
              oT.ScheduleDoseUOM =
                ' ' +
                objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0]
                  .TitratedDoseinfo.ScheduleDoseUOM;
              iDate++;
            });
            this.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Add(
              oT
            );
            iRecord++;
          });
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.TitratedDoseDetails.Stardate =
              objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Select(
                (s) => s.ScheduleDTTM
              ).LastOrDefault();
          } else {
            this.FormViewerDetails.BasicDetails.TitratedDoseDetails.Stardate =
              objResGetIPPPrescriptionDetails.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Select(
                (s) => s.ScheduleDTTM
              ).FirstOrDefault();
          }
        }
      }
    }
    this.GetPresItemDetails(odetails);
    if (this.RePresBindResolveGridEvent != null)
      this.RePresBindResolveGridEvent(false, this);
  }
  objService_GetReplacementDrugsCompleted(
    sender: Object,
    e: ManagePrescSer.GetReplacementDrugsCompletedEventArgs
  ): void {
    if (e.Error != null) return;
    let objResReplacmnt: ManagePrescSer.CResMsgGetReplacementDrugs;
    objResReplacmnt = e.Result;
    let objReplacemntItem: ObservableCollection<ReplacemntItem> =
      new ObservableCollection<ReplacemntItem>();
    let oRepDrugVM: ReplacementDrugVM = new ReplacementDrugVM();
    oRepDrugVM.RepItem = new ObservableCollection<CListItem>();
    if (objResReplacmnt != null && objResReplacmnt.oReplacementDrugs != null) {
      if (
        objResReplacmnt.oReplacementDrugs != null &&
        objResReplacmnt.oReplacementDrugs.Count > 0 &&
        (objResReplacmnt.oReplacementDrugs[0].IdentifyingOID > 0 ||
          objResReplacmnt.oReplacementDrugs[0].IdentifyingOID == -1)
      ) {
        for (
          let nCnt: number = 0;
          nCnt < objResReplacmnt.oReplacementDrugs.Count;
          nCnt++
        ) {
          objReplacemntItem.Add(
            ObjectHelper.CreateObject(new ReplacemntItem(), {
              IdentifyingName:
                objResReplacmnt.oReplacementDrugs[nCnt].IdentifyingName,
              IdentifyingType:
                objResReplacmnt.oReplacementDrugs[nCnt].IdentifyingType,
              IdentifyingOID: Convert.ToString(
                objResReplacmnt.oReplacementDrugs[nCnt].IdentifyingOID
              ),
              MCVersion: AppSessionInfo.AMCV,
              IsAccessContraint:
                objResReplacmnt.oReplacementDrugs[nCnt].IsAccessContraint,
              IsPrescribeByBrand:
                objResReplacmnt.oReplacementDrugs[nCnt].IsPrescribeByBrand,
              sItemType: objResReplacmnt.oReplacementDrugs[nCnt].ItemType,
              IsReplacement:
                objResReplacmnt.oReplacementDrugs[nCnt].bIsReplacement,
              IsFormulary: objResReplacmnt.oReplacementDrugs[nCnt].IsFormulary,
            })
          );
        }
        objReplacemntItem.forEach((oRI) => {
          if (
            !String.IsNullOrEmpty(oRI.IdentifyingOID) &&
            String.Compare(
              oRI.IdentifyingOID,
              '-1',
              StringComparison.CurrentCultureIgnoreCase
            ) != 0
          ) {
            let lstRepItem: CListItem = new CListItem();
            lstRepItem.DisplayText = oRI.IdentifyingName;
            lstRepItem.Value =
              oRI.IdentifyingOID +
              '~' +
              oRI.IdentifyingType +
              '~' +
              oRI.MCVersion +
              '~' +
              oRI.IsAccessContraint +
              '~' +
              oRI.IsPrescribeByBrand +
              '~' +
              oRI.sItemType +
              '~' +
              oRI.IsReplacement +
              '~' +
              oRI.IsFormulary;
            oRepDrugVM.RepItem.Add(lstRepItem);
          }
        });
      }
      if (objReplacemntItem.Count > 0) {
        let nResult: number = oRepDrugVM.ToBeAlternated(
          objReplacemntItem,
          this.FormViewerDetails.BasicDetails.IdentifyingName,
          this,
          this.FormViewerDetails.BasicDetails.itemSubType,
          String.Empty
        );
        if (nResult == 1) {
          oRepDrugVM.ReplacementFormfav(
            this.oVM,
            this.FormViewerDetails.BasicDetails.IdentifyingName,
            this
          );
        } else if (nResult == 3) {
          this.UnHoldEvent();
        } else {
          this.GetPresItemDetailsUnHoldOldDrug();
          this.IsFormViewDataLoaded = false;
          this.ReasonForHold = null;
          this.IsHold = false;
          this.PrescriptionItemStatus = String.Empty;
          this.OperationMode = 'U';
          this.HoldEvent();
          this.IsFormViewerDisable = false;
          if (this.nSelIndex != -1)
            this.oVM.UpdateConflicts(this.nSelIndex, 'UNHOLD');
          this.UnHoldCompletedEvent();
        }
      } else {
        this.GetPresItemDetailsUnHoldOldDrug();
        this.IsFormViewDataLoaded = false;
        this.ReasonForHold = null;
        this.IsHold = false;
        this.HoldEvent();
        this.OperationMode = 'U';
        this.PrescriptionItemStatus = String.Empty;
        this.IsFormViewerDisable = false;
        if (this.nSelIndex != -1)
          this.oVM.UpdateConflicts(this.nSelIndex, 'UNHOLD');
        this.UnHoldCompletedEvent();
      }
    } else this.UnHoldCompletedEvent();
  }
  //public delegate void UnHoldDelegate();
  public UnHoldEvent: Function;
  //public delegate void HoldDelegate();
  public HoldEvent: Function;
  //public delegate void UnHoldCompletedDelegate();
  public UnHoldCompletedEvent: Function;
  public UnHoldCompleted(): void {
    this.UnHoldCompletedEvent();
  }
  public SetChartOpen: boolean = false;
  public IsDueNowSlot: boolean = false;
  public IsInfInprogress: boolean = false;
  public sDueNowDTTM: string = String.Empty;
  public FormViewerClick(ignoreBusyCheck: boolean = false): void {
    if (!ignoreBusyCheck && CommonVariables.FormViewerIsInProgress) {
      Common.ShowBusyAlert();
      return;
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      this.FormViewerDetails.BasicDetails.IsFormViewClick = true;
      if (this.PrescribeThisItemEvent == null) {
        //this.PrescribeThisItemEvent -= this.ParentbaseVM.PrescribeExistingItem;
        this.PrescribeThisItemEvent = (s, e) => {
          this.ParentbaseVM.PrescribeExistingItem(s, e);
        };
      }
      if (this.PrescribeThisItemEvent != null) {
        let ActionTypeCode: ActivityTypes;
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          (this.FormViewerDetails.BasicDetails.InfusionType != null ||
            this.FormViewerDetails.BasicDetails.InfusionType == null)
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.IsFluidConflictGen =
            '1';
        }
        if (
          QueryStringInfo.SelPrescItemOID == 0 ||
          this.PrescriptionItemStatus == CConstants.COMPLETED
        ) {
          Busyindicator.SetStatusBusy('FormViewerClick');
        }
        let InfIntermittent: boolean = false;
        if (
          String.IsNullOrEmpty(this.OperationMode) ||
          String.Equals(
            this.OperationMode,
            'M',
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            this.OperationMode,
            'U',
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            this.OperationMode,
            'TM',
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            this.OperationMode,
            'UA',
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          ActionTypeCode = ActivityTypes.Amend;
          if (
            String.Equals(
              this.OperationMode,
              'TM',
              StringComparison.OrdinalIgnoreCase
            )
          )
            this.OperationMode = String.Empty;
        } else {
          ActionTypeCode = this.ActionCode;
        }
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          this.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.INTERMITTENT,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          InfIntermittent = true;
        }
        if (
          this.FormViewerDetails.BasicDetails.Doselabelvalue == null &&
          ((this.FormViewerDetails.BasicDetails.DoseType != null &&
            (String.Compare(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.DoseType.Value,
                DoseTypeCode.VARIABLE,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0)) ||
            String.Equals(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.TITRATED,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          this.FormViewerDetails.BasicDetails.Doselabelvalue = 'Dose';
        }
        if (
          PatientContext.IsINFUSIONON &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          !String.Equals(
            PatientContext.ClerkFormViewDefaultBehavior,
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ) &&
          ActionTypeCode == ActivityTypes.Amend &&
          !String.Equals(
            this.PrescriptionItemStatus,
            'MEDStatus3',
            StringComparison.OrdinalIgnoreCase
          ) &&
          !String.Equals(
            this.PrescriptionItemStatus,
            'MEDStatus14',
            StringComparison.OrdinalIgnoreCase
          ) &&
          !String.Equals(
            this.PrescriptionItemStatus,
            'MEDStatus2',
            StringComparison.OrdinalIgnoreCase
          ) &&
          !String.Equals(
            this.PrescriptionItemStatus,
            'MEDStatus13',
            StringComparison.OrdinalIgnoreCase
          ) &&
          !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Infused) &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.Infused,
            '1',
            StringComparison.OrdinalIgnoreCase
          ) &&
            DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)
        ) {
          if (!this.IsDueNowSlot) {
            let dtStartDTTM: DateTime = DateTime.MinValue;
            if (
              DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartPrescriptionTime, DateTime.MinValue )
            ) {
              dtStartDTTM =
                this.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
                  this.FormViewerDetails.BasicDetails.StartPrescriptionTime
                );
            } else {
              dtStartDTTM = this.FormViewerDetails.BasicDetails.StartDTTM;
            }
            let dtCurrent: DateTime = CommonBB.GetServerDateTime();
            let sMenuCode: string = 'MAMedChart';
            let _LockedUserDetails: LockedUsersDetails;
            let bResult: boolean = MedicationCommonBB.IsLockedByAnotherUser(
              sMenuCode,
              false,
              (o1) => {
                _LockedUserDetails = o1;
              }
            );
            if (
              _LockedUserDetails != null &&
              !String.IsNullOrEmpty(_LockedUserDetails.ActivityLock) &&
              String.Equals(
                _LockedUserDetails.ActivityLock,
                'MAMedChart',
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.SetChartOpen = true;
            }
            if (
              (DateTime.LessThanOrEqualTo(dtStartDTTM.AddMinutes(-MedChartData.DuenessThreshold),
                dtCurrent) ||
                DateTime.GreaterThanOrEqualTo(dtCurrent,
                  dtStartDTTM.AddMinutes(MedChartData.DuenessThreshold))) &&
              !InfIntermittent
            ) {
              this.IsDueNowSlot = true;
            } else if (
              InfIntermittent &&
              this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfInterMitScheduleDTTMs != null &&
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfInterMitScheduleDTTMs.Count > 0
            ) {
              this.IsDueNowSlot = this.ISDueNowSlotForInfIntermittent(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfInterMitScheduleDTTMs,
                (o) => {
                  this.sDueNowDTTM = o;
                }
              );
            }
          }
          if (
            !String.Equals(
              this.OperationMode,
              'N',
              StringComparison.OrdinalIgnoreCase
            ) &&
            !String.Equals(
              this.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            (this.OperationMode == null ||
              (String.Equals(
                this.OperationMode,
                'U',
                StringComparison.OrdinalIgnoreCase
              ) &&
                !this.IsUnholddrug))
          ) {
            this.GetDrugInfusedStatus(this.PrescriptionItemOID);
          } else {
            Common.UpdateOldOsValues(this);
            this.PrescribeThisItemEvent(this, ActionTypeCode);
          }
        } else {
          Common.UpdateOldOsValues(this);
          this.PrescribeThisItemEvent(this, ActionTypeCode);
        }
      }
      if (this.PrescriptionItemOID > 0){
        ObjectHelper.stopFinishAndCancelEvent(true);
        this.ParentbaseVM.GetDrugBasicSnomedcodeInfo(
          ActivityTypes.Amend,
          this.PrescriptionItemOID
        );
      }
    }
  }
  public DisplayAdvanceAdminWarningMessage(): void {
    this.isFormViewerDisable = true;
    let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
      Title: 'Lorenzo',
      Message: String.Format(
        Resource.prescribedrugs.AdvanceAdministeredWarningMessage,
        this.FormViewerDetails.BasicDetails.LastAdministeredDTTM.ToUserDateTimeString(
          CConstants.DateHMFormat
        )
      ),
      MessageButton: MessageBoxButton.OK,
      IconType: MessageBoxType.Information,
    });
    iMsgBox.Width = 480;
    iMsgBox.Height = 160;
    iMsgBox.Show();
  }
  public ISDueNowSlotForInfIntermittent(
    oAdminScheduleTime: ObservableCollection<DateTime>,
    out1: (sDueNowDDTM: string) => void
  ): boolean {
    let sDueNowDDTM: string;
    sDueNowDDTM = String.Empty;
    let dtCurrent: DateTime = CommonBB.GetServerDateTime();
    let DUENowDTTM: DateTime = DateTime.MinValue;
    if (oAdminScheduleTime != null && oAdminScheduleTime.Count > 0) {
      let DataDueNowSlot = oAdminScheduleTime
        .Where(
          (oSlotDateTime) =>
            oSlotDateTime.AddMinutes(-MedChartData.DuenessThreshold) <=
              dtCurrent ||
            dtCurrent >= oSlotDateTime.AddMinutes(MedChartData.DuenessThreshold)
        )
        .Select((oSlotDateTime) => oSlotDateTime);
      if (DataDueNowSlot != null && DataDueNowSlot.Count() > 0) {
        DUENowDTTM = DataDueNowSlot.FirstOrDefault();
        sDueNowDDTM = DUENowDTTM.ToString('HH:mm');
        return true;
      }
    }
    out1(sDueNowDDTM);
    return false;
  }
  public GetOmittedItemsList(sPresItmOIDs: string): void {
    let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    //objServiceProxy.GetOmittedItemsListCompleted -= this.objServiceProxy_oGetOmittedItemsListCompleted;
    objServiceProxy.GetOmittedItemsListCompleted = (s, e) => {
      this.objServiceProxy_oGetOmittedItemsListCompleted(s, e);
    };
    let objReq: IPPMAManagePrescSer.CReqMsgGetOmittedItemsList =
      new IPPMAManagePrescSer.CReqMsgGetOmittedItemsList();
    objReq.sPrescriptionItemOIDsBC = sPresItmOIDs;
    objReq.oContextInformation = Common.FillContext();
    objServiceProxy.GetOmittedItemsListAsync(objReq);
  }
  public objServiceProxy_oGetOmittedItemsListCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetOmittedItemsListCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000050;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:PrescriptionItemVM, Method:objServiceProxy_oGetOmittedItemsListCompleted()';
    let objResponse: IPPMAManagePrescSer.CResMsgGetOmittedItemsList =
      e != null ? e.Result : null;
    this.OmittedPresOIDs = null;
    if (
      objResponse != null &&
      objResponse.oIPPPresItemOmittedInfo != null &&
      objResponse.oIPPPresItemOmittedInfo.Length > 0 &&
      e.Error == null
    ) {
      for (
        let i: number = 0;
        i < objResponse.oIPPPresItemOmittedInfo.Length;
        i++
      ) {
        let bIsOmmitted: boolean = this.ParentbaseVM.MedsResolve.Any(
          (x) =>
            x.FormViewerDetails != null &&
            x.FormViewerDetails.BasicDetails != null &&
            x.FormViewerDetails.BasicDetails.SequenceInfo != null &&
            x.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo ==
              objResponse.oIPPPresItemOmittedInfo[i].GroupSequenceNo &&
            x.PrescriptionItemOID ==
              objResponse.oIPPPresItemOmittedInfo[i].OmittedPresItemOID &&
            !String.Equals(x.PrescriptionItemStatus, CConstants.COMPLETED) &&
            !String.Equals(x.PrescriptionItemStatus, CConstants.DISCONTINUED) &&
            !String.Equals(x.PrescriptionItemStatus, CConstants.CANCELLED)
        );
        if (bIsOmmitted) {
          if (this.OmittedPresOIDs == null) {
            this.OmittedPresOIDs = new ObservableCollection<number>();
          }
          if (
            !this.OmittedPresOIDs.Contains(
              objResponse.oIPPPresItemOmittedInfo[i].OmittedPresItemOID
            )
          ) {
            this.OmittedPresOIDs.Add(
              objResponse.oIPPPresItemOmittedInfo[i].OmittedPresItemOID
            );
          }
        }
      }
    }
  }
  public GetDrugInfusedStatus(PrescriptionItemOID: number): void {
    let objService: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    objService.IsDrugAdminStartedCompleted = (s, e) => {
      this.objService_IsDrugAdminStartedCompleted(s, e);
    };
    let objRequest: IPPMAManagePrescSer.CReqMsgIsDrugAdminStarted =
      new IPPMAManagePrescSer.CReqMsgIsDrugAdminStarted();
    objRequest.oContextInformation = CommonBB.FillContext();

    // objRequest.DrugItemOIDsBC = ObjectHelper.CreateObject(
    //   new IPPMAManagePrescSer.ArrayOfLong(),
    //   { PrescriptionItemOID }
    // );
    objRequest.DrugItemOIDsBC = new IPPMAManagePrescSer.ArrayOfLong();
    objRequest.DrugItemOIDsBC.Add(PrescriptionItemOID);

    objRequest.DuenessThresholdBC = MedChartData.DuenessThreshold;
    objRequest.ActionCACodeBC = CConstants.ActionCACode;
    objRequest.nPatientOIDBC = PatientContext.PatientOID;
    objService.IsDrugAdminStartedAsync(objRequest);
  }
  public objService_IsDrugAdminStartedCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.IsDrugAdminStartedCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000050;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:DiscontinuecancelVM, Method:objService_IsDrugAdminStartedCompleted()';
    let lstDrugItemInfusedStatus: ObservableCollection<IPPMAManagePrescSer.DrugAdminStatus>;
    let objResponse: IPPMAManagePrescSer.CResMsgIsDrugAdminStarted = e.Result;
    if (objResponse != null && e.Error == null) {
      try {
        if (
          objResponse.oDrugAdminStatusOuputData != null &&
          objResponse.oDrugAdminStatusOuputData.Count > 0
        ) {
          lstDrugItemInfusedStatus = objResponse.oDrugAdminStatusOuputData;
          if (
            this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionType.Value
            ) &&
            String.Equals(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.INTERMITTENT,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            if (
              (lstDrugItemInfusedStatus != null &&
                lstDrugItemInfusedStatus.Count > 0 &&
                lstDrugItemInfusedStatus.First().IsAdministered) ||
              this.IsDueNowSlot ||
              this.SetChartOpen
            ) {
              this.FormViewerDetails.BasicDetails.InProgSchDTTM =
                lstDrugItemInfusedStatus.First().InProgScheduleDate;
              this.IsInfInprogress =
                lstDrugItemInfusedStatus != null &&
                lstDrugItemInfusedStatus.Count > 0 &&
                lstDrugItemInfusedStatus.First().IsAdministered;
              let oMessagebox2: iMessageBox = new iMessageBox();
              oMessagebox2.Title = 'Lorenzo';
              oMessagebox2.Message =
                'The infusion is in progress or the nurse might have started the infusion. The changes made will be applicable only from the next schedule';
              oMessagebox2.MessageButton = MessageBoxButton.OK;
              oMessagebox2.MessageBoxClose = (s, e) => {
                // ObjectHelper.stopFinishAndCancelEvent(false);
                this.InfAmendInprogresVal_MessageBoxClose(s, e);
              };
              oMessagebox2.IconType = MessageBoxType.Information;
              oMessagebox2.Height = Number.NaN;
              oMessagebox2.Width = 420;
              // ObjectHelper.stopFinishAndCancelEvent(true);
              oMessagebox2.Show();
            } else {
              this.PrescribeThisItemEvent(this, ActivityTypes.Amend);
            }
          } else {
            let isContinuousInfusionType: boolean = false;
            if (
              this.FormViewerDetails != null &&
              this.FormViewerDetails.BasicDetails != null &&
              this.FormViewerDetails.BasicDetails.InfusionType != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionType.Value
              ) &&
              String.Equals(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.CONTINUOUS,
                StringComparison.CurrentCultureIgnoreCase
              )
            )
              isContinuousInfusionType = true;
            if (
              lstDrugItemInfusedStatus != null &&
              lstDrugItemInfusedStatus.Count > 0 &&
              lstDrugItemInfusedStatus.First().IsAdministered
            ) {
              this.IsInfInprogress = true;
              let oMessagebox2: iMessageBox = new iMessageBox();
              oMessagebox2.Title = 'Lorenzo';
              oMessagebox2.Message =
                Resource.Infusion.InfAmendInprogressDueNow_Msg;
              oMessagebox2.MessageButton = MessageBoxButton.OK;
              oMessagebox2.MessageBoxClose = (s, e) => {
                this.InfAmendInprogresVal_MessageBoxClose(s, e);
              };
              oMessagebox2.IconType = MessageBoxType.Information;
              oMessagebox2.Height = Number.NaN;
              oMessagebox2.Width = 420;
              oMessagebox2.Show();
            } else if (isContinuousInfusionType) {
              let dtCurrentTime: DateTime = CommonBB.GetServerDateTime();
              let dtCurrentDttm: DateTime = dtCurrentTime.AddTicks(
                -(dtCurrentTime.Ticks % TimeSpan.TicksPerMinute)
              );
              let DtDueFrom: DateTime = dtCurrentDttm.AddMinutes(
                -MedChartData.DuenessThreshold
              );
              let DtDueUntil: DateTime = dtCurrentDttm.AddMinutes(
                MedChartData.DuenessThreshold
              );
              let dtSlotDTTM: DateTime =
                lstDrugItemInfusedStatus != null &&
                lstDrugItemInfusedStatus.Count > 0
                  ? lstDrugItemInfusedStatus.First().InProgScheduleDate
                  : DateTime.MinValue;
              let isAdministered: boolean =
                lstDrugItemInfusedStatus != null &&
                lstDrugItemInfusedStatus.Count > 0
                  ? lstDrugItemInfusedStatus.First().IsAdministered
                  : false;
              let isDuenow: boolean =
                DateTime.NotEquals(dtSlotDTTM, DateTime.MinValue)&& 
                (DateTime.GreaterThanOrEqualTo(dtSlotDTTM, DtDueFrom) && DateTime.LessThanOrEqualTo(dtSlotDTTM, DtDueUntil)) ||
                DateTime.LessThan(dtSlotDTTM, DtDueFrom)
                  ? true
                  : false;
              if ((!isAdministered && isDuenow) || this.SetChartOpen) {
                let oMessagebox2: iMessageBox = new iMessageBox();
                oMessagebox2.Title = 'Lorenzo';
                oMessagebox2.Message =
                  Resource.Infusion.InfAmendIDueNowChartOpen_Msg;
                oMessagebox2.MessageButton = MessageBoxButton.OK;
                oMessagebox2.MessageBoxClose = (s, e) => {
                  // ObjectHelper.stopFinishAndCancelEvent(false);
                  this.InfAmendInprogresVal_MessageBoxClose(s, e);
                };
                oMessagebox2.IconType = MessageBoxType.Information;
                oMessagebox2.Height = Number.NaN;
                oMessagebox2.Width = 420;
                oMessagebox2.Show();
                // ObjectHelper.stopFinishAndCancelEvent(true);
              } else {
                this.PrescribeThisItemEvent(this, ActivityTypes.Amend);
              }
            } else if (
              this.IsDueNowSlot &&
              ((lstDrugItemInfusedStatus != null &&
                lstDrugItemInfusedStatus.Count > 0 &&
                !lstDrugItemInfusedStatus.First().IsAdministered) ||
                this.SetChartOpen)
            ) {
              let oMessagebox2: iMessageBox = new iMessageBox();
              oMessagebox2.Title = 'Lorenzo';
              oMessagebox2.Message =
                Resource.Infusion.InfAmendIDueNowChartOpen_Msg;
              oMessagebox2.MessageButton = MessageBoxButton.OK;
              oMessagebox2.MessageBoxClose = (s, e) => {
                this.InfAmendInprogresVal_MessageBoxClose(s, e);
              };
              oMessagebox2.IconType = MessageBoxType.Information;
              oMessagebox2.Height = Number.NaN;
              oMessagebox2.Width = 420;
              oMessagebox2.Show();
            } else {
              this.PrescribeThisItemEvent(this, ActivityTypes.Amend);
            }
          }
        } else {
          this.PrescribeThisItemEvent(this, ActivityTypes.Amend);
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      this.PrescribeThisItemEvent(this, ActivityTypes.Amend);
    }
  }
  InfAmendInprogresVal_MessageBoxClose(
    sender: Object,
    e: MessageEventArgs
  ): void {
    this.PrescribeThisItemEvent(this, ActivityTypes.Amend);
  }
  public Conflict_MouseLeftButtonUp(
    sender: Object,
    e: MouseButtonEventArgs
  ): void {
    this.IsConflictClick = true;
    this.FormViewerClick();
  }
  public FormViewer_MouseLeftButtonUp(
    sender: Object,
    e: MouseButtonEventArgs
  ): void {
    this.IsConflictClick = false;
    this.FormViewerClick();
  }
  public LaunchSequentialLinkButton(
    sender: Object,
    e: MouseButtonEventArgs
  ): void {
    this.IsConflictClick = false;
    //Not Required for LHS. To be Re-Visited.
    this.LaunchSequentialSFS();
  }
  public InformationIcon_MouseLeftButtonUp(
    sender: Object,
    e: MouseButtonEventArgs
  ): void {
    let objProcessingItemVM: PrescriptionItemVM =
      ObjectHelper.CreateType<PrescriptionItemVM>(
        (<FrameworkElement>e.OriginalSource).DataContext,
        PrescriptionItemVM
      );
    Busyindicator.SetStatusBusy('FormViewer');
    if (objProcessingItemVM != null) {
      objProcessingItemVM.bFormViewerLoadOnCVUnCheck = true;
    }
    let ActionTypeCode: ActivityTypes;
    if (
      String.IsNullOrEmpty(objProcessingItemVM.OperationMode) ||
      (!String.IsNullOrEmpty(objProcessingItemVM.OperationMode) &&
        (objProcessingItemVM.OperationMode.Equals('M') ||
          objProcessingItemVM.OperationMode.Equals('DRCU') ||
          objProcessingItemVM.OperationMode.Equals('CU')))
    ) {
      ActionTypeCode = ActivityTypes.Amend;
    } else {
      ActionTypeCode = objProcessingItemVM.ActionCode;
    }
    objProcessingItemVM.IsConflictClick = true;
    if (
      objProcessingItemVM.FormViewerDetails != null &&
      objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
      objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      (objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionType !=
        null ||
        objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionType == null)
    ) {
      objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsFluidConflictGen =
        '1';
    }
    this.ParentbaseVM.PrescribeExistingItem(
      objProcessingItemVM,
      ActionTypeCode
    );
    if (objProcessingItemVM != null)
      this.ParentbaseVM.GetDrugBasicSnomedcodeInfo(
        ActivityTypes.Amend,
        objProcessingItemVM.PrescriptionItemOID
      );
    else Busyindicator.SetStatusIdle('FormViewerMsgClick');
  }
  public IsConflictClick: boolean = false;
  public get FocusControl(): string {
    return this._focusControl;
  }
  public set FocusControl(value: string) {
    if (this._focusControl != value) {
      this._focusControl = value;
      //super.NotifyPropertyChanged("FocusControl");
    }
  }
  public get PrescriptionItem(): string {
    return this.prescriptionItem;
  }
  public set PrescriptionItem(value: string) {
    if (this.prescriptionItem != value) {
      this.prescriptionItem = value;
      //super.NotifyPropertyChanged("PrescriptionItem");
    }
  }
  public get OtherInformation(): string {
    return this.otherInformation;
  }
  public set OtherInformation(value: string) {
    if (this.otherInformation != value) {
      this.otherInformation = value;
      //super.NotifyPropertyChanged("OtherInformation");
    }
  }
  public get PrescriptionOID(): number {
    return this.prescriptionOID;
  }
  public set PrescriptionOID(value: number) {
    if (this.prescriptionOID != value) {
      this.prescriptionOID = value;
      //super.NotifyPropertyChanged("PrescriptionOID");
    }
  }
  public get PrescriptionDTTM(): DateTime {
    return this._prescriptionDTTM;
  }
  public set PrescriptionDTTM(value: DateTime) {
    if (this._prescriptionDTTM != value) {
      this._prescriptionDTTM = value;
      //super.NotifyPropertyChanged("PrescriptionDTTM");
    }
  }
  public get PrescriptionItemOID(): number {
    return this.prescriptionItemOID;
  }
  public set PrescriptionItemOID(value: number) {
    if (this.prescriptionItemOID != value) {
      this.prescriptionItemOID = value;
      //super.NotifyPropertyChanged("PrescriptionItemOID");
    }
  }
  private _PresTechItemOID: number = 0;
  public get PresTechItemOID(): number {
    return this._PresTechItemOID;
  }
  public set PresTechItemOID(value: number) {
    if (this._PresTechItemOID != value) {
      this._PresTechItemOID = value;
      //super.NotifyPropertyChanged("PresTechItemOID");
    }
  }
  public sAllergyIDs: string;
  private _snomedterm: string;
  public get SNOMEDTerm(): string {
    return this._snomedterm;
  }
  public set SNOMEDTerm(value: string) {
    this._snomedterm = value;
    //super.NotifyPropertyChanged("SNOMEDTerm");
  }
  private _snomedcode: string;
  public get SNOMEDCode(): string {
    return this._snomedcode;
  }
  public set SNOMEDCode(value: string) {
    this._snomedcode = value;
    //super.NotifyPropertyChanged("SNOMEDCode");
  }
  private _allergylaunchfromFORMVIEW: boolean = false;
  public get AllergylaunchfromFORMVIEW(): boolean {
    return this._allergylaunchfromFORMVIEW;
  }
  public set AllergylaunchfromFORMVIEW(value: boolean) {
    this._allergylaunchfromFORMVIEW = value;
    //super.NotifyPropertyChanged("AllergylaunchfromFORMVIEW");
  }
  public get EncounterOID(): number {
    return this.encounteroid;
  }
  public set EncounterOID(value: number) {
    if (this.encounteroid != value) {
      this.encounteroid = value;
      //super.NotifyPropertyChanged("EncounterOID");
    }
  }
  public get PrescribableItemDetailOID(): number {
    return this._PrescribableItemDetailOID;
  }
  public set PrescribableItemDetailOID(value: number) {
    if (this._PrescribableItemDetailOID != value) {
      this._PrescribableItemDetailOID = value;
      //super.NotifyPropertyChanged("PrescribableItemDetailOID");
    }
  }
  public get PrescribableItemOID(): number {
    return this.prescribableItemOID;
  }
  public set PrescribableItemOID(value: number) {
    if (this.prescribableItemOID != value) {
      this.prescribableItemOID = value;
      //super.NotifyPropertyChanged("PrescribableItemOID");
    }
  }
  private _ReorderToolTip: string;
  public get ReorderToolTip(): string {
    return this._ReorderToolTip;
  }
  public set ReorderToolTip(value: string) {
    if (this._ReorderToolTip != value) {
      this._ReorderToolTip = value;
      //super.NotifyPropertyChanged("ReorderToolTip");
    }
  }
  public get IsReoderIconEnable(): boolean {
    return this._isReoderIconEnable;
  }
  public set IsReoderIconEnable(value: boolean) {
    this._isReoderIconEnable = value;
    //NotifyPropertyChanged("IsReoderIconEnable");
    if (this._isReoderIconEnable) {
      this.ReorderImage = MedImage.GetPath(MedImages.SelectionIcon);
      this.ReorderToolTip = 'Select to copy across';
    } else {
      this.ReorderImage = MedImage.GetPath(MedImages.SelectionIconDIS);
      if (
        String.Equals(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.DISCONTINUED
        ) ||
        String.Equals(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.CANCELLED
        )
      ) {
        this.ReorderToolTip = 'Discontinued/Cancelled item';
      } else if (
        String.Equals(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.ReorderToolTip = 'Awaiting authorisation item';
      } else {
        this.ReorderToolTip = 'Copied item';
      }
    }
  }
  public get IsProcessinIconEnable(): boolean {
    return this._isProcessinIconEnable;
  }
  public set IsProcessinIconEnable(value: boolean) {
    this._isProcessinIconEnable = value;
    //NotifyPropertyChanged("IsProcessinIconEnable");
  }
  public get IsProhibitedRoute(): boolean {
    return this._isProhibitedRoute;
  }
  public set IsProhibitedRoute(value: boolean) {
    this._isProhibitedRoute = value;
    //NotifyPropertyChanged("IsProhibitedRoute");
  }
  public get IsDeactivate(): string {
    return this._isDeactivate;
  }
  public set IsDeactivate(value: string) {
    this._isDeactivate = value;
    //NotifyPropertyChanged("IsDeactivate");
    if (this.IsDeactivate == '1') this.IsClinicallyVerifyEnable = false;
  }
  public get ReorderImage(): string {
    return this._reorderImage;
  }
  public set ReorderImage(value: string) {
    if (!Helper.ReferenceEquals(this._reorderImage, value)) {
      this._reorderImage = value;
      //NotifyPropertyChanged("ReorderImage");
    }
  }
  public get IsGridenable(): boolean {
    return this.isGridenable;
  }
  public set IsGridenable(value: boolean) {
    if (!Helper.ReferenceEquals(this.isGridenable, value)) {
      this.isGridenable = value;
      //NotifyPropertyChanged("IsGridenable");
    }
  }
  public get FormularyNote(): string {
    return this.formularynote;
  }
  public set FormularyNote(value: string) {
    this.formularynote = value;
    if (!String.IsNullOrEmpty(this.formularynote))
      this.IsIconVisible = 'Visible';
    else this.IsIconVisible = 'Collapsed';
    //NotifyPropertyChanged("FormularyNote");
  }
  public get DrugPropertyNote(): string {
    return this._drugPropertynote;
  }
  public set DrugPropertyNote(value: string) {
    if (String.Compare(this._drugPropertynote, value) != 0) {
      this._drugPropertynote = value;
      //NotifyPropertyChanged("DrugPropertyNote");
      if (!String.IsNullOrEmpty(this._drugPropertynote))
        this.IsDrugPropertyIconVisible = 'Visible';
      else this.IsDrugPropertyIconVisible = 'Collapsed';
    }
  }
  private _isIconVisible: string = 'Collapsed';
  public get IsIconVisible(): string {
    return this._isIconVisible;
  }
  public set IsIconVisible(value: string) {
    this._isIconVisible = value;
    //NotifyPropertyChanged("IsIconVisible");
  }
  private _isDrugPropertyIconVisible: string = 'Collapsed';
  public get IsDrugPropertyIconVisible(): string {
    return this._isDrugPropertyIconVisible;
  }
  public set IsDrugPropertyIconVisible(value: string) {
    this._isDrugPropertyIconVisible = value;
    //NotifyPropertyChanged("IsDrugPropertyIconVisible");
  }
  private _InfoIcon1: string;
  public get InfoIcon1(): string {
    return this._InfoIcon1;
  }
  public set InfoIcon1(value: string) {
    this._InfoIcon1 = value;
    //NotifyPropertyChanged("InfoIcon1");
  }
  private _InfoIcon1ToolTip: string;
  public get InfoIcon1ToolTip(): string {
    return this._InfoIcon1ToolTip;
  }
  public set InfoIcon1ToolTip(value: string) {
    this._InfoIcon1ToolTip = value;
    //NotifyPropertyChanged("InfoIcon1ToolTip");
  }
  private _InfoIcon1Visibility: Visibility = Visibility.Collapsed;
  public get InfoIcon1Visibility(): Visibility {
    return this._InfoIcon1Visibility;
  }
  public set InfoIcon1Visibility(value: Visibility) {
    this._InfoIcon1Visibility = value;
    //NotifyPropertyChanged("InfoIcon1Visibility");
  }
  private _InfoIcon2: string;
  public get InfoIcon2(): string {
    return this._InfoIcon2;
  }
  public set InfoIcon2(value: string) {
    this._InfoIcon2 = value;
    //NotifyPropertyChanged("InfoIcon2");
  }
  private _InfoIcon2ToolTip: string;
  public get InfoIcon2ToolTip(): string {
    return this._InfoIcon2ToolTip;
  }
  public set InfoIcon2ToolTip(value: string) {
    this._InfoIcon2ToolTip = value;
    //NotifyPropertyChanged("InfoIcon2ToolTip");
  }
  private _InfoIcon2Visibility: Visibility = Visibility.Collapsed;
  public get InfoIcon2Visibility(): Visibility {
    return this._InfoIcon2Visibility;
  }
  public set InfoIcon2Visibility(value: Visibility) {
    this._InfoIcon2Visibility = value;
    //NotifyPropertyChanged("InfoIcon2Visibility");
  }
  private _InfoIcon3: string;
  public get InfoIcon3(): string {
    return this._InfoIcon3;
  }
  public set InfoIcon3(value: string) {
    this._InfoIcon3 = value;
    //NotifyPropertyChanged("InfoIcon3");
  }
  private _InfoIcon3ToolTip: string;
  public get InfoIcon3ToolTip(): string {
    return this._InfoIcon3ToolTip;
  }
  public set InfoIcon3ToolTip(value: string) {
    this._InfoIcon3ToolTip = value;
    //NotifyPropertyChanged("InfoIcon3ToolTip");
  }
  private _InfoIcon3Visibility: Visibility = Visibility.Collapsed;
  public get InfoIcon3Visibility(): Visibility {
    return this._InfoIcon3Visibility;
  }
  public set InfoIcon3Visibility(value: Visibility) {
    this._InfoIcon3Visibility = value;
    //NotifyPropertyChanged("InfoIcon3Visibility");
  }
  private _InfoIcon4: string;
  public get InfoIcon4(): string {
    return this._InfoIcon4;
  }
  public set InfoIcon4(value: string) {
    this._InfoIcon4 = value;
    //NotifyPropertyChanged("InfoIcon4");
  }
  private _InfoIcon4ToolTip: string;
  public get InfoIcon4ToolTip(): string {
    return this._InfoIcon4ToolTip;
  }
  public set InfoIcon4ToolTip(value: string) {
    this._InfoIcon4ToolTip = value;
    //NotifyPropertyChanged("InfoIcon4ToolTip");
  }
  private _InfoIcon4Visibility: Visibility = Visibility.Collapsed;
  public get InfoIcon4Visibility(): Visibility {
    return this._InfoIcon4Visibility;
  }
  public set InfoIcon4Visibility(value: Visibility) {
    this._InfoIcon4Visibility = value;
    //NotifyPropertyChanged("InfoIcon4Visibility");
  }
  public SetInfoIcons(): void {
    if (
      String.Compare(
        this.PrescriptionItemStatus,
        CConstants.CLINICALLYVERIFIED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.InfoIcon2 = new Uri(
        MedImage.GetPath(MedImages.Acknowledged),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon2ToolTip = prescribedrugs.InfoiconAcknowledged_Tooltip;
      this.InfoIcon2Visibility = Visibility.Visible;
    } else if (
      String.Compare(
        this.PrescriptionItemStatus,
        CConstants.DISCONTINUED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.InfoIcon2 = new Uri(
        MedImage.GetPath(MedImages.DiscontinuedIcon),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon2ToolTip = prescribedrugs.dicontinueico_Tootlip;
      this.InfoIcon2Visibility = Visibility.Visible;
    } else if (
      String.Compare(
        this.PrescriptionItemStatus,
        CConstants.CANCELLED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.InfoIcon2 = new Uri(
        MedImage.GetPath(MedImages.CancelIcon),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon2ToolTip = prescribedrugs.cancelicon_Tooltip;
      this.InfoIcon2Visibility = Visibility.Visible;
    } else if (
      String.Compare(
        this.PrescriptionItemStatus,
        CConstants.COMPLETED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.InfoIcon2 = new Uri(
        MedImage.GetPath(MedImages.CompletedIcon),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon2ToolTip = prescribedrugs.CompletedIcon_Tooltip;
      this.InfoIcon2Visibility = Visibility.Visible;
    } else if (
      String.Compare(
        this._prescriptionItemStatus,
        CConstants.ONHOLD,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.InfoIcon2 = new Uri(
        MedImage.GetPath(MedImages.HoldIcon),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon2ToolTip = prescribedrugs.Holdicon_Tooltip;
      this.InfoIcon2Visibility = Visibility.Visible;
    } else if (
      String.Compare(
        this._prescriptionItemStatus,
        CConstants.AWAITINGAUTHORISE,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.InfoIcon2 = new Uri(
        MedImage.GetPath(MedImages.PendingIcon),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon2ToolTip = prescribedrugs.Pendingicon_Tooltip;
      this.InfoIcon2Visibility = Visibility.Visible;
    } else {
      this.InfoIcon2 = null;
      this.InfoIcon2ToolTip = String.Empty;
      this.InfoIcon2Visibility = Visibility.Collapsed;
    }
  }
  public SetConflictsInfoIcons(): void {
    if (this.TrafficSymbol == ConflictIcons.Red) {
      this.InfoIcon4 = new Uri(
        MedImage.GetPath(MedImages.RedStar),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon4ToolTip = Resource.MedicationForm.MandatoryMsgTooltip;
      this.InfoIcon4Visibility = Visibility.Visible;
      this.InfoIcon1 = new Uri(
        MedImage.GetPath(MedImages.MandatoryIndicator),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon1ToolTip = prescribedrugs.BubbleConflicts_Tooltip;
      this.InfoIcon1Visibility = Visibility.Visible;
    } else if (this.TrafficSymbol == ConflictIcons.Amber) {
      this.InfoIcon4 = new Uri(
        MedImage.GetPath(MedImages.Amber),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon4ToolTip = Resource.MedicationForm.NonMandatoryMsgTooltip;
      this.InfoIcon4Visibility = Visibility.Visible;
      this.InfoIcon1 = new Uri(
        MedImage.GetPath(MedImages.MandatoryIndicator),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon1ToolTip = prescribedrugs.BubbleConflicts_Tooltip;
      this.InfoIcon1Visibility = Visibility.Visible;
    } else if (this.TrafficSymbol == ConflictIcons.BubbleHot) {
      this.InfoIcon4 = new Uri(
        MedImage.GetPath(MedImages.MandatoryIndicator),
        UriKind.Relative
      ).LocalPath;
      this.InfoIcon4ToolTip = prescribedrugs.BubbleConflicts_Tooltip;
      this.InfoIcon4Visibility = Visibility.Visible;
    }
  }
  private _prescriptionItemStatus: string;
  public get PrescriptionItemStatus(): string {
    return this._prescriptionItemStatus;
  }
  public set PrescriptionItemStatus(value: string) {
    this._prescriptionItemStatus = value;
    //NotifyPropertyChanged("PrescriptionItemStatus");
    if ( ContextInfo.MenuCode === 'MN_MED_VERIFY_SL_P2') {
      ContextInfo.MenuCode = 'MED_CA_CLN_VRFY_SL_P2';
    }
    if (
      !UserPermissions.PrescribeWithRestriction &&
      (String.Compare(
        this._prescriptionItemStatus,
        PrescriptionItemStatusCodes.DISCONTINUED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.CANCELLED,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.ONHOLD,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0)
    ) {
      this.IsReoderIconEnable = false;
    }
    if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      if (
        this.OperationMode == 'N' ||
        (this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          String.Compare(
            this.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus?.ToString(),
            '0',
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 &&
          String.Compare(
            this.DrugVersionMatch?.ToString(),
            '1',
            StringComparison.CurrentCultureIgnoreCase
          ) == 0)
      ) {
      } else {
        let isSubmittedForVerify: boolean =
          String.Equals(
            this._prescriptionItemStatus,
            CConstants.SUBMITTED,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
          String.Equals(
            this._prescriptionItemStatus,
            CConstants.CLINICALLYVERIFIED,
            StringComparison.CurrentCultureIgnoreCase
          );
        if (!isSubmittedForVerify) {
        }
        if (!String.Equals(this.OperationMode, 'N'))
          this.IsClinicallyVerifyEnable = isSubmittedForVerify;
      }
      this.IsSupplyRequestedEnable =
        !UserPermissions.PrescribeWithRestriction &&
        String.Compare(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.DISCONTINUED,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 &&
        String.Compare(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.CANCELLED,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 &&
        String.Compare(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.COMPLETED,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 &&
        String.Compare(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.ONHOLD,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 &&
        String.Compare(
          this._prescriptionItemStatus,
          PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0;
    } else if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      if (
        this.OperationMode == 'N' &&
        String.IsNullOrEmpty(this._prescriptionItemStatus)
      )
        this.IsClinicallyVerifyEnable = true;
      if (
        this.OperationMode == 'N' &&
        this.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
        !this.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify &&
        String.IsNullOrEmpty(this._prescriptionItemStatus)
      )
        this.IsClinicallyVerifyEnable = false;
      if (!String.IsNullOrEmpty(this._prescriptionItemStatus))
        this.IsClinicallyVerifyEnable =
          String.Compare(
            this._prescriptionItemStatus,
            CConstants.AWAITINGAUTHORISE,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0;
    }
    if (this.FormViewerDetails == null) {
      this.FormViewerDetails = new FormViewerVM();
    }
    if (this.FormViewerDetails.PresItemDRCVM == null) {
      this.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
    }
    if (this.FormViewerDetails.BasicDetails == null) {
      this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
      this.FormViewerDetails.BasicDetails.InfusionDetails = new InfusionVM(
        this.FormViewerDetails.BasicDetails
      );
    }
    if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 &&
      this.bCVIntialLoad
    ) {
      this.bCVIntialLoad = false;
      if (
        this._prescriptionItemStatus ==
          PrescriptionItemStatusCodes.CLINICALLYVERIFIED ||
        (String.Compare(
          this._prescriptionItemStatus,
          CConstants.COMPLETED,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 &&
          String.Compare(
            this._prescriptionItemStatusCode,
            CConstants.CLINICALLYVERIFIED,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0)
      ) {
        this.FormViewerDetails.BasicDetails.IsClinicallyVerified = true;
        this.IsClinicallyVerifyCommentsMandatory = false;
      }
    } else if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      if (this.OperationMode == 'N') {
        if (
          String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.VerificationComments
          ) &&
          this.FormViewerDetails.BasicDetails.IsClinicallyVerified
        )
          this.FormViewerDetails.BasicDetails.IsClinicallyVerified = true;
        this.IsClinicallyVerifyCommentsMandatory = false;
      } else {
        this.FormViewerDetails.BasicDetails.IsClinicallyVerified =
          String.Compare(
            this._prescriptionItemStatus,
            CConstants.SUBMITTED,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0;
        if (
          this._prescriptionItemStatus ==
            PrescriptionItemStatusCodes.SUBMITTED ||
          this._prescriptionItemStatus ==
            PrescriptionItemStatusCodes.AUTOVERIFIED
        ) {
          this.IsClinicallyVerifyCommentsMandatory = false;
        }
      }
    }
    this.OtherInformation = this.GetMedStatus(this._prescriptionItemStatus);
  }
  private GetMedStatus(statusCode: string): string {
    let status: string = String.Empty;
    switch (statusCode) {
      case 'MEDStatus1':
        status = 'AMENDED';
        break;
      case 'MEDStatus2':
        status = 'CANCELLED';
        break;
      case 'MEDStatus3':
        status = 'DISCONTINUED';
        break;
      case 'MEDStatus4':
        status = 'ISSUED';
        break;
      case 'MEDStatus5':
        status = 'DISPENSED';
        break;
      case 'MEDStatus6':
        status = 'SUBMITTED';
        break;
      case 'MEDStatus7':
        status = 'AWAITINGAUTHORISE';
        break;
      case 'MEDStatus8':
        break;
      case 'MEDStatus9':
        status = 'AUTOVERIFIED';
        break;
      case 'MEDStatus10':
        status = 'CLINICALLYVERIFIED';
        break;
      case 'MEDStatus11':
        status = 'TECHNICALLYVALIDATED';
        break;
      case 'MEDStatus12':
        status = 'NOTAUTHORISED';
        break;
      case 'MEDStatus13':
        status = 'ONHOLD';
        break;
      case 'MEDStatus14':
        status = 'COMPLETED';
        break;
      default:
        status = 'SUBMITTED';
        break;
    }
    return status;
  }
  private _prescriptionItemStatusCode: string;
  public get PrescriptionItemStatusCode(): string {
    return this._prescriptionItemStatusCode;
  }
  public set PrescriptionItemStatusCode(value: string) {
    this._prescriptionItemStatusCode = value;
    //NotifyPropertyChanged("PrescriptionItemStatusCode");
  }
  private _DrugFrequencyUOMCode: string;
  public get DrugFrequencyUOMCode(): string {
    return this._DrugFrequencyUOMCode;
  }
  public set DrugFrequencyUOMCode(value: string) {
    this._DrugFrequencyUOMCode = value;
    //NotifyPropertyChanged("DrugFrequencyUOMCode");
  }
  public get IsNonformulary(): string {
    return this._isNonformulary;
  }
  public set IsNonformulary(value: string) {
    if (Helper.ReferenceEquals(this._isNonformulary, value) != true) {
      this._isNonformulary = value;
      //NotifyPropertyChanged("IsNonformulary");
    }
  }
  public get IsFormViewDataLoaded(): boolean {
    return this.isFormViewDataLoaded;
  }
  public set IsFormViewDataLoaded(value: boolean) {
    if (this.isFormViewDataLoaded != value) {
      this.isFormViewDataLoaded = value;
      //super.NotifyPropertyChanged("IsFormViewDataLoaded");
    }
  }
  public get Itemlist(): string {
    return this._itemlist;
  }
  public set Itemlist(value: string) {
    this._itemlist = value;
    //NotifyPropertyChanged("Itemlist");
  }
  public get NonFormularynames(): string {
    return this._nonFormularynames;
  }
  public set NonFormularynames(value: string) {
    this._nonFormularynames = value;
    //NotifyPropertyChanged("NonFormularynames");
  }
  public get MCuptoIdentifyingoid(): number {
    return this._MCuptoIdentifyingoid;
  }
  public set MCuptoIdentifyingoid(value: number) {
    this._MCuptoIdentifyingoid = value;
    //NotifyPropertyChanged("MCuptoIdentifyingoid");
  }
  public get MCuptoIdentifyingtype(): string {
    return this._MCuptoIdentifyingtype;
  }
  public set MCuptoIdentifyingtype(value: string) {
    this._MCuptoIdentifyingtype = value;
    //NotifyPropertyChanged("MCuptoIdentifyingtype");
  }
  private _isStationoryVisible: Visibility = Visibility.Visible;
  public get IsStationoryVisible(): Visibility {
    return this._isStationoryVisible;
  }
  public set IsStationoryVisible(value: Visibility) {
    this._isStationoryVisible = value;
    //super.NotifyPropertyChanged("IsStationoryVisible");
  }
  private _istarsatrangevisible: Visibility = Visibility.Visible;
  public get IsTarSatrangevisible(): Visibility {
    return this._istarsatrangevisible;
  }
  public set IsTarSatrangevisible(value: Visibility) {
    this._istarsatrangevisible = value;
    //super.NotifyPropertyChanged("IsTarSatrangevisible");
  }
  private _isRSNModVisible: Visibility = Visibility.Collapsed;
  public get IsReasonForModificationVisible(): Visibility {
    if (
      this.ActionCode == ActivityTypes.Amend &&
      !this.IsHold &&
      !this.IsUnholddrug
    ) {
      this._isRSNModVisible = Visibility.Visible;
    } else {
      this._isRSNModVisible = Visibility.Collapsed;
    }
    return this._isRSNModVisible;
  }
  public set IsReasonForModificationVisible(value: Visibility) {
    this._isRSNModVisible = value;
    //super.NotifyPropertyChanged("IsReasonForModificationVisible");
  }
  private _isMedClerkModVisible: Visibility = Visibility.Collapsed;
  public get IsReasonForMedicationClerkModifyVisible(): Visibility {
    let nIsVisible: boolean = false;
    if (
      this.sourceEncounter == 0 ||
      this.sourceEncounter == PatientContext.EncounterOid ||
      (this.ParentbaseVM != null &&
        !String.IsNullOrEmpty(this.ParentbaseVM.ClinicalEncounterOID) &&
        this.ParentbaseVM.ClinicalEncounterOID.Contains(
          this.sourceEncounter.ToString()
        ))
    ) {
      if (
        this.ActionCode == ActivityTypes.Reorder &&
        (String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge
        ) == 0 ||
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0)
      ) {
        if (
          String.Compare(
            this.SourcePrescriptionType,
            'Medication clerking',
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
          String.Compare(
            this.SourcePrescriptionType,
            CConstants.Clerking,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          nIsVisible = true;
        } else if (
          String.Compare(
            this.ParentSourcePrescriptionType,
            CConstants.Clerking,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          String.Compare(
            this.SourcePrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0 &&
          String.Compare(
            this.ParentPrescriptionitemstatus,
            'MEDStatus2',
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          nIsVisible = true;
        }
      } else if (
        this.ActionCode == ActivityTypes.Amend &&
        (String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge
        ) == 0 ||
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0)
      ) {
        if (
          String.Compare(
            this.ParentPrescriptionitemstatus,
            'MEDStatus2',
            StringComparison.OrdinalIgnoreCase
          ) != 0 &&
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.MedClerkModifyReason != null &&
          this.FormViewerDetails.BasicDetails.MedClerkModifyReason.Value != null
        ) {
          nIsVisible = true;
        } else if (
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.IsIDSNewmeds == true
        ) {
          nIsVisible = false;
        } else if (
          String.Compare(
            this.ParentPrescriptionitemstatus,
            'MEDStatus2',
            StringComparison.OrdinalIgnoreCase
          ) != 0 &&
          String.Compare(
            this.ParentSourcePrescriptionType,
            CConstants.Clerking,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          (String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge
          ) == 0 ||
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration
            ) == 0)
        ) {
          nIsVisible = true;
        } else if (
          String.Compare(
            this.ParentPrescriptionitemstatus,
            'MEDStatus2',
            StringComparison.OrdinalIgnoreCase
          ) != 0 &&
          String.Compare(
            this.ParentSourcePrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge
          ) == 0 &&
          String.Compare(
            this.parentreorderType,
            CConstants.Clerking,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          nIsVisible = true;
        }
      }
    }
    if (nIsVisible) {
      this._isMedClerkModVisible = Visibility.Visible;
      this.FormViewerDetails.BasicDetails.IsVisiblenewmeds =
        Visibility.Collapsed;
    } else {
      this._isMedClerkModVisible = Visibility.Collapsed;
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null
      ) {
        this.FormViewerDetails.BasicDetails.IsVisiblenewmeds =
          Visibility.Visible;
      }
    }
    return this._isMedClerkModVisible;
  }
  public set IsReasonForMedicationClerkModifyVisible(value: Visibility) {
    this._isMedClerkModVisible = value;
  }
  public get ActionCode(): ActivityTypes {
    return  this.actionCode;
  }
  public set ActionCode(value: ActivityTypes) {
    if (this.actionCode != value) {
      this.actionCode = value;
      //super.NotifyPropertyChanged("ActionCode");
    }
  }
  public get SourcePrescriptionType(): string {
    return this.sourcePrescriptionType;
  }
  public set SourcePrescriptionType(value: string) {
    if (this.sourcePrescriptionType != value) {
      this.sourcePrescriptionType = value;
      //super.NotifyPropertyChanged("SourcePrescriptionType");
    }
  }
  public get ParentReorderType(): string {
    return this.parentreorderType;
  }
  public set ParentReorderType(value: string) {
    if (this.parentreorderType != value) {
      this.parentreorderType = value;
      //super.NotifyPropertyChanged("ParentReorderType");
    }
  }
  public get SourcePrescriptionOid(): number {
    return this.sourcePrescriptionOid;
  }
  public set SourcePrescriptionOid(value: number) {
    if (this.sourcePrescriptionOid != value) {
      this.sourcePrescriptionOid = value;
      //super.NotifyPropertyChanged("SourcePrescriptionOid");
    }
  }
  public get SourcePrevEncPrescriptionOid(): number {
    return this.sourcePrevEncPrescriptionOid;
  }
  public set SourcePrevEncPrescriptionOid(value: number) {
    if (this.sourcePrevEncPrescriptionOid != value) {
      this.sourcePrevEncPrescriptionOid = value;
      //super.NotifyPropertyChanged("SourcePrevEncPrescriptionOid");
    }
  }
  public get SourcePresOid(): number {
    return this.sourcePresOid;
  }
  public set SourcePresOid(value: number) {
    if (this.sourcePresOid != value) {
      this.sourcePresOid = value;
      //super.NotifyPropertyChanged("SourcePresOid");
    }
  }
  public get SourceEncounter(): number {
    return this.sourceEncounter;
  }
  public set SourceEncounter(value: number) {
    if (this.sourceEncounter != value) {
      this.sourceEncounter = value;
      //super.NotifyPropertyChanged("SourceEncounter");
    }
  }
  public get OperationMode(): string {
    return this._operationMode;
  }
  public set OperationMode(value: string) {
    if (Helper.ReferenceEquals(this._operationMode, value) != true) {
      this._operationMode = value;
      //NotifyPropertyChanged("OperationMode");
    }
  }
  private _SequentialActionPerfromCodeAEITS: string;
  public get SequentialActionPerfromCodeAEITS(): string {
    return this._SequentialActionPerfromCodeAEITS;
  }
  public set SequentialActionPerfromCodeAEITS(value: string) {
    this._SequentialActionPerfromCodeAEITS = value;
  }
  private _SeqOperationMode: string;
  public get SeqOperationMode(): string {
    return this._SeqOperationMode;
  }
  public set SeqOperationMode(value: string) {
    if (Helper.ReferenceEquals(this._SeqOperationMode, value) != true) {
      this._SeqOperationMode = value;
      //NotifyPropertyChanged("SeqOperationMode");
    }
  }
  public get FormViewerDetails(): FormViewerVM {
    return this.formViewerDetails;
  }
  public set FormViewerDetails(value: FormViewerVM) {
    if (this.formViewerDetails != value) {
      this.formViewerDetails = value;
      //super.NotifyPropertyChanged("FormViewerDetails");
    }
  }
  public PrescriptionItemNumber: string;
  public UniqueRowID: number = 0;
  public ParentUniqueRowID: number = 0;
  public PrescriptionType: string;
  public MCIUniqueRowID: number = 0;
  /*[System.Xml.Serialization.XmlIgnoreAttribute]*/
  public PrescriberDetails: ObjectInfo;
  private _PrescribedByWithRoleName: string;
  public get PrescribedByWithRoleName(): string {
    return this._PrescribedByWithRoleName;
  }
  public set PrescribedByWithRoleName(value: string) {
    if (this._PrescribedByWithRoleName != value) {
      this._PrescribedByWithRoleName = value;
      //super.NotifyPropertyChanged("PrescribedByWithRoleName");
    }
  }
  private _ItemMainType: string;
  public get ItemMainType(): string {
    return this._ItemMainType;
  }
  public set ItemMainType(value: string) {
    if (this._ItemMainType != value) {
      this._ItemMainType = value;
      //super.NotifyPropertyChanged("ItemMainType");
    }
  }
  public UniqueRowItemID: number = 0;
  public LorenzoID: string;
  private _isHold: boolean = false;
  public get IsHold(): boolean {
    return this._isHold;
  }
  public set IsHold(value: boolean) {
    if (!Helper.ReferenceEquals(this._isHold, value)) {
      this._isHold = value;
      //NotifyPropertyChanged("IsHold");
    }
  }
  private _isResolveGrid: boolean = false;
  public get IsResolveGrid(): boolean {
    return this._isResolveGrid;
  }
  public set IsResolveGrid(value: boolean) {
    if (!Helper.ReferenceEquals(this._isResolveGrid, value)) {
      this._isResolveGrid = value;
      //NotifyPropertyChanged("IsResolveGrid");
    }
  }
  public get IsPGD(): string {
    return this.isPGD;
  }
  public set IsPGD(value: string) {
    if (!Helper.ReferenceEquals(this.isPGD, value)) {
      this.isPGD = value;
      //NotifyPropertyChanged("IsPGD");
    }
  }
  public IsDrugApprovalRequired: string;
  public LastModifiedAt: DateTime = DateTime.MinValue;
  public HoldReason: string;
  private _prescriberOBOUserOID: number = 0;
  public get PrescriberOBOUserOID(): number {
    return this._prescriberOBOUserOID;
  }
  public set PrescriberOBOUserOID(value: number) {
    if (this._prescriberOBOUserOID != value) {
      this._prescriberOBOUserOID = value;
      //super.NotifyPropertyChanged("PrescriberOBOUserOID");
    }
  }
  private _prescriberOBHName: string;
  public get PrescriberOBHName(): string {
    return this._prescriberOBHName;
  }
  public set PrescriberOBHName(value: string) {
    if (this._prescriberOBHName != value) {
      this._prescriberOBHName = value;
      //super.NotifyPropertyChanged("PrescriberOBHName");
    }
  }
  public TrafficSymbol: ConflictIcons;
  public TrafficIcon: ConflictIcons;
  public TvTrafficSymbol: ConflictIcons;
  public TvTrafficIcon: ConflictIcons;
  public TrafficIconResolve: ConflictIcons;
  public PrescriptionNumber: string;
  private _VMVPLorenzoID: string;
  public get VMVPLorenzoID(): string {
    return this._VMVPLorenzoID;
  }
  public set VMVPLorenzoID(value: string) {
    this._VMVPLorenzoID = value;
  }
  private _VMVPIdentifyingName: string;
  public get VMVPIdentifyingName(): string {
    return this._VMVPIdentifyingName;
  }
  public set VMVPIdentifyingName(value: string) {
    this._VMVPIdentifyingName = value;
  }
  private _MCIVMVPIdentifyingName: string;
  public get MCIVMVPIdentifyingName(): string {
    return this._MCIVMVPIdentifyingName;
  }
  public set MCIVMVPIdentifyingName(value: string) {
    this._MCIVMVPIdentifyingName = value;
  }
  private _MCIVMVPLorenzoID: string;
  public get MCIVMVPLorenzoID(): string {
    return this._MCIVMVPLorenzoID;
  }
  public set MCIVMVPLorenzoID(value: string) {
    this._MCIVMVPLorenzoID = value;
  }
  private _ParentLorenzoID: string;
  public get ParentLorenzoID(): string {
    return this._ParentLorenzoID;
  }
  public set ParentLorenzoID(value: string) {
    this._ParentLorenzoID = value;
  }
  private _ParentVMVPName: string;
  public get ParentVMVPName(): string {
    return this._ParentVMVPName;
  }
  public set ParentVMVPName(value: string) {
    this._ParentVMVPName = value;
  }
  public get ReasonForHold(): ObservableCollection<CListItem> {
    return this.reasonForHold;
  }
  public set ReasonForHold(value: ObservableCollection<CListItem>) {
    if (this.reasonForHold != value) {
      this.reasonForHold = value;
      //super.NotifyPropertyChanged("ReasonForHold");
    }
  }
  public DiscontinueCancelReason: CListItem;
  public DiscontinueCancelAction: string;
  public OnBehalfOf: CListItem;
  public OnBehalfOfReason: CListItem;
  public CommunicationMode: CListItem;
  private _IsOther: boolean = false;
  public get IsOther(): boolean {
    return this._IsOther;
  }
  public set IsOther(value: boolean) {
    this._IsOther = value;
  }
  public get ReconcileReason(): ObservableCollection<CListItem> {
    return this.reconcileReason;
  }
  public set ReconcileReason(value: ObservableCollection<CListItem>) {
    if (this.reconcileReason != value) {
      this.reconcileReason = value;
      //super.NotifyPropertyChanged("ReconcileReason");
    }
  }
  private stationaryCodes: ObservableCollection<CListItem>;
  public get StationaryCodes(): ObservableCollection<CListItem> {
    return this.stationaryCodes;
  }
  public set StationaryCodes(value: ObservableCollection<CListItem>) {
    if (this.stationaryCodes != value) {
      this.stationaryCodes = value;
      //super.NotifyPropertyChanged("StationaryCodes");
    }
  }
  public get IsFormViewerDisable(): boolean {
    return this.isFormViewerDisable;
  }
  public set IsFormViewerDisable(value: boolean) {
    if (this.isFormViewerDisable != value) {
      this.isFormViewerDisable = value;
      //super.NotifyPropertyChanged("IsFormViewerDisable");
    }
  }
  private _AuthoriseRoleOID: string;
  public get AuthoriseRoleOID(): string {
    return this._AuthoriseRoleOID;
  }
  public set AuthoriseRoleOID(value: string) {
    this._AuthoriseRoleOID = value;
    //NotifyPropertyChanged("AuthoriseRoleOID");
  }
  HoldReason_GetValuesByDomainsCompleted(
    sender: Object,
    e: GetValuesByDomainsCompletedEventArgs
  ): void {
    let objResponse: CResMsgGetValuesByDomains = e.Result;
    this.ReasonForHold = new ObservableCollection<CListItem>();
    if (objResponse != null && objResponse.arrValSetCollection != null) {
      for (
        let ni: number = 0;
        ni < objResponse.arrValSetCollection[0].arrValuesetTerm.Count;
        ni++
      ) {
        this.ReasonForHold.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              objResponse.arrValSetCollection[0].arrValuesetTerm[ni]
                .csDescription,
            Value:
              objResponse.arrValSetCollection[0].arrValuesetTerm[ni].csCode,
          })
        );
      }
      this.ReasonForHold.Add(
        ObjectHelper.CreateObject(new CListItem(), {
          DisplayText: 'Other',
          Value: 'CC_Other',
        })
      );
    }
  }
  public IsItemDisOrCan: boolean = false;
  public DisCanitemRecorderIconenable(oItemVM: PrescriptionItemVM): void {
    let sourceItem: IEnumerable<PrescriptionItemVM> = null;
    if (
      (oItemVM.PrescriptionItemStatus == CConstants.DISCONTINUED ||
        oItemVM.PrescriptionItemStatus == CConstants.CANCELLED) &&
      oItemVM.IsItemDisOrCan
    ) {
      if (!String.IsNullOrEmpty(oItemVM.ParentSourcePrescriptionType)) {
        switch (oItemVM.ParentSourcePrescriptionType) {
          case PrescriptionTypes.Clerking:
            if (
              this.ParentbaseVM != null &&
              this.ParentbaseVM.MedsClerked != null
            ) {
              sourceItem = this.ParentbaseVM.MedsClerked.Where(
                (item) => item.PrescriptionItemOID == oItemVM.ReorderItemOID
              ).Select((item) => item);
            }
            break;
          case PrescriptionTypes.Outpatient:
            if (
              this.ParentbaseVM != null &&
              this.ParentbaseVM.MedsOutPatient != null
            ) {
              sourceItem = this.ParentbaseVM.MedsOutPatient.Where(
                (item) => item.PrescriptionItemOID == oItemVM.ReorderItemOID
              ).Select((item) => item);
            }
            break;
          case PrescriptionTypes.Leave:
            if (
              this.ParentbaseVM != null &&
              this.ParentbaseVM.MedsLeave != null
            ) {
              sourceItem = this.ParentbaseVM.MedsLeave.Where(
                (item) => item.PrescriptionItemOID == oItemVM.ReorderItemOID
              ).Select((item) => item);
            }
            break;
          case PrescriptionTypes.Discharge:
            if (
              this.ParentbaseVM != null &&
              this.ParentbaseVM.MedsDischarge != null
            ) {
              sourceItem = this.ParentbaseVM.MedsDischarge.Where(
                (item) => item.PrescriptionItemOID == oItemVM.ReorderItemOID
              ).Select((item) => item);
            }
            break;
          case PrescriptionTypes.ForAdministration:
            if (
              this.ParentbaseVM != null &&
              this.ParentbaseVM.MedsInPatient != null
            ) {
              sourceItem = this.ParentbaseVM.MedsInPatient.Where(
                (item) => item.PrescriptionItemOID == oItemVM.ReorderItemOID
              ).Select((item) => item);
            }
            break;
        }
        if (
          (sourceItem == null || sourceItem.Count() == 0) &&
          oItemVM.PrescriptionType == PrescriptionTypes.ForAdministration &&
          this.ParentbaseVM != null &&
          this.ParentbaseVM.MedsClerked != null
        ) {
          sourceItem = this.ParentbaseVM.MedsClerked.Where(
            (item) => item.ReorderItemOID == oItemVM.PrescriptionItemOID
          ).Select((item) => item);
        }
        if (
          (sourceItem == null || sourceItem.Count() == 0) &&
          oItemVM.PrescriptionType == PrescriptionTypes.ForAdministration &&
          this.ParentbaseVM != null &&
          this.ParentbaseVM.MedsClerked != null
        ) {
          sourceItem = this.ParentbaseVM.MedsClerked.Where(
            (item) => item.PrevReorderItemOID == oItemVM.PrescriptionItemOID
          ).Select((item) => item);
        }
      }
    }
    if (sourceItem != null && sourceItem.Count() > 0) {
      sourceItem.First().IsReoderIconEnable = true;
      sourceItem.First().ReorderToolTip = 'Select to copy across';
    }
    oItemVM.IsItemDisOrCan = false;
  }
  public FillPrescriptionItemVM(
    oPrescription: IPPMAManagePrescSer.PrescriptionItemView,
    bIsResolveGrid: boolean,
    _IsClosedEncounterForMedListGrid: boolean
  ): PrescriptionItemVM {
    if (this.FormViewerDetails == null) {
      this.FormViewerDetails = new FormViewerVM();
    }
    if (this.FormViewerDetails.PresItemDRCVM == null) {
      this.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
    }
    if (this.FormViewerDetails.BasicDetails == null) {
      this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
    }
    this.FormViewerDetails.BasicDetails.ReviewAfterCalRequired = false;
    if (this.FormViewerDetails.BasicDetails.InfusionDetails == null) {
      this.FormViewerDetails.BasicDetails.InfusionDetails = new InfusionVM(
        this.FormViewerDetails.BasicDetails
      );
    }
    this.FormViewerDetails.BasicDetails.isFormViewDataLoaded =
      this.IsFormViewDataLoaded;
    //this.FormViewerDetails.BasicDetails.ClinicallyVerified -= this.dlgClinicallyVerified;
    this.FormViewerDetails.BasicDetails.ClinicallyVerified =
      this.dlgClinicallyVerified;
    //this.FormViewerDetails.BasicDetails.ClinicallyAuthorised -= this.dlgClinicallyAuthorised;
    this.FormViewerDetails.BasicDetails.ClinicallyAuthorised =
      this.dlgClinicallyAuthorised;
    this.ReorderItemOID = oPrescription.oPrescriptionItem.ReorderItemOID;
    this.PrevReorderItemOID =
      oPrescription.oPrescriptionItem.PrevReorderItemOID;
    if (
      oPrescription.oPresItemBasicPropertiesView != null &&
      oPrescription.oPresItemBasicPropertiesView.DoseTypeValue != null &&
      oPrescription.oPresItemBasicPropertiesView.DoseType != null &&
      (String.Compare(
        oPrescription.oPresItemBasicPropertiesView.DoseTypeValue,
        DoseTypeCode.CONDITIONAL,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
        String.Compare(
          oPrescription.oPresItemBasicPropertiesView.DoseType,
          'Conditional',
          StringComparison.OrdinalIgnoreCase
        ) == 0)
    ) {
      this.FormViewerDetails.BasicDetails.IsConditionalExists =
        oPrescription.oPrescriptionItem.IsConditionalExists;
    }
    if (
      String.Compare(
        oPrescription.oPrescriptionItem.IsReoderIconEnable.ToString(),
        '1',
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.IsReoderIconEnable = false;
    } else if (
      !String.IsNullOrEmpty(oPrescription.oPrescriptionItem.OrdersetGroupID) &&
      oPrescription.oPrescriptionItem.InfusionGroupSequenceNo > 0 &&
      (String.IsNullOrEmpty(oPrescription.oPrescriptionItem.IsInfusion) ||
        (String.Equals(oPrescription.oPrescriptionItem.IsInfusion, '1') &&
          oPrescription.oPresItemBasicPropertiesView != null &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters !=
            null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .INFTYCODE
          ) &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.INFTYCODE.Equals(
            InfusionTypeCode.INTERMITTENT
          )))
    ) {
    } else {
      this.IsReoderIconEnable = true;
    }
    this.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel =
      oPrescription.oPresItemBasicPropertiesView.TechSupplyInstrItemLevel;
    if (oPrescription.oPrescriptionItem != null) {
      this.IsGPConnectItem = oPrescription.oPrescriptionItem.IsGPConnectItem;
      let IPPPrescItem: IPPMAManagePrescSer.IPPPrescriptionItem =
        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPrescriptionItem>(
          oPrescription.oPrescriptionItem,
          IPPMAManagePrescSer.IPPPrescriptionItem
        );
      if (IPPPrescItem != null) {
        this.PrescriptionItemStatusCode =
          IPPPrescItem.PrescriptionItemStatusCode;
        this.DrugFrequencyUOMCode = IPPPrescItem.DrugFrequencyUOMCode;
        if (
          !String.IsNullOrEmpty(this.DrugFrequencyUOMCode) &&
          String.Equals(
            this.DrugFrequencyUOMCode,
            'CC_MEDDRSN2',
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          IPPPrescItem.FrequencyDetails != null &&
          IPPPrescItem.FrequencyDetails.DaysOfWeek != null &&
          IPPPrescItem.FrequencyDetails.DaysOfWeek.Count > 0
        ) {
          this.FormViewerDetails.BasicDetails.DaysOfWeeks =
            MedicationCommonBB.ConstructDaysOfWeek(
              IPPPrescItem.FrequencyDetails.DaysOfWeek
            );
        }
      }
      this.IsResolveGrid = bIsResolveGrid;
      this.IsConflictsExists = true;
      switch (oPrescription.oPrescriptionItem.IsConflictsExists) {
        case 'R':
          this.TrafficSymbol = ConflictIcons.Red;
          break;
        case 'A':
          this.TrafficSymbol = ConflictIcons.Amber;
          break;
        case 'Y':
          this.TrafficSymbol = ConflictIcons.BubbleHot;
          break;
        default:
          this.TrafficSymbol = ConflictIcons.None;
          this.IsConflictsExists = false;
          break;
      }
      this.PrescriptionItem = oPrescription.oPrescriptionItem.IdentifyingName;
      this.FormViewerDetails.BasicDetails.IdentifyingName =
        oPrescription.oPrescriptionItem.IdentifyingName;
      if (
        !String.IsNullOrEmpty(oPrescription.oPrescriptionItem.VMVPLorenzoID) &&
        !String.IsNullOrEmpty(
          oPrescription.oPrescriptionItem.VMVPIdentifyingName
        )
      ) {
        this.VMVPIdentifyingName =
          oPrescription.oPrescriptionItem.VMVPIdentifyingName;
        this.VMVPLorenzoID = oPrescription.oPrescriptionItem.VMVPLorenzoID;
        this.FormViewerDetails.BasicDetails.IdentifyingName =
          this.VMVPIdentifyingName +
          ' - ' +
          this.FormViewerDetails.BasicDetails.IdentifyingName;
      }
      if (
        oPrescription.oPresItemBasicPropertiesView != null &&
        oPrescription.oPresItemBasicPropertiesView.Statusflags != null
      ) {
        this.FormViewerDetails.BasicDetails.Isprinted =
          oPrescription.oPresItemBasicPropertiesView.Statusflags.PrintStatus;
      }
      this.FormViewerDetails.BasicDetails.IsinDefiniteOmit =
        oPrescription.oPresItemBasicPropertiesView.IsinDefiniteOmit;
      if (
        DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.IsinDefiniteOmitDTTM,
        DateTime.MinValue)
      ) {
        this.FormViewerDetails.BasicDetails.IsinDefiniteOmitDTTM =
          oPrescription.oPresItemBasicPropertiesView.IsinDefiniteOmitDTTM;
      }
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.OmitComments
        )
      ) {
        this.FormViewerDetails.BasicDetails.OmitComments =
          oPrescription.oPresItemBasicPropertiesView.OmitComments;
      }
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.OmittedBy
        )
      ) {
        this.FormViewerDetails.BasicDetails.OmittedBy =
          oPrescription.oPresItemBasicPropertiesView.OmittedBy;
      }
      this.IsAllowedToPerform =
        oPrescription.oPresItemBasicPropertiesView.IsAllowed;
      if (
        String.Equals(
          this.FormViewerDetails.BasicDetails.IdentifyingName,
          CConstants.ADHOC_ITEM_NAME
        )
      )
        this.FormViewerDetails.BasicDetails.MCILorenzoID =
          CConstants.ADHOC_ITEM_LORENZOID;
      this.FormViewerDetails.BasicDetails.itemSubType =
        oPrescription.oPrescriptionItem.ITMSUBTYP;
      this.FormViewerDetails.BasicDetails.IdentifyingOID =
        oPrescription.oPrescriptionItem.IdentifyingOID;
      this.FormViewerDetails.BasicDetails.IdentifyingType =
        oPrescription.oPrescriptionItem.IdentifyingType;
      this.PrescriptionOID = oPrescription.oPrescriptionItem.PrescriptionOID;
      this.PrescriptionItemOID = oPrescription.oPrescriptionItem.OID;
      this.OrderSetGroupID = oPrescription.oPrescriptionItem.OrdersetGroupID;
      this.OrderSetLoreznoID =
        oPrescription.oPrescriptionItem.OrdersetLorenzoID;
      this.DisplayOrder = oPrescription.oPrescriptionItem.DisplayOrder;
      this.SourcePresOid = oPrescription.oPrescriptionItem.PrescriptionOID;
      this.SourcePrescriptionOid = oPrescription.oPrescriptionItem.OID;
      this.PrescriptionDTTM =
        oPrescription.oPrescriptionItem.PrescriptionBasicData.PrescriptionDTTM;
      this.EncounterOID =
        oPrescription.oPrescriptionItem.PrescriptionBasicData.EncounterOID;
      this.FormViewerDetails.BasicDetails.MCVersion =
        oPrescription.oPrescriptionItem.MCVersionNo;
      if (
        oPrescription.oPresItemAdditionalProperties != null &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemAdditionalProperties.DateCommenced
        ) &&
        DateTime.NotEquals(oPrescription.oPrescriptionItem.StartDTTM, DateTime.MinValue)

      ) {
        this.FormViewerDetails.BasicDetails.DateCommenced =
          oPrescription.oPresItemAdditionalProperties.DateCommenced;
      }
      this.FormViewerDetails.BasicDetails.StartDTTM =
        oPrescription.oPrescriptionItem.StartDTTM;
      this.formViewerDetails.BasicDetails.StartPrescriptionTime =
        oPrescription.oPrescriptionItem.StartDTTM;
      this.FormViewerDetails.BasicDetails.EndDTTM =
        oPrescription.oPrescriptionItem.EndDTTM;
      this.FormViewerDetails.BasicDetails.OrginalEndDTTM =
        oPrescription.oPrescriptionItem.EndDTTM;
      this.formViewerDetails.BasicDetails.Infused =
        oPrescription.oPrescriptionItem.IsInfusion;
      if (
        String.Compare(
          oPrescription.oPrescriptionItem.IsInfusion,
          '1',
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        this.formViewerDetails.BasicDetails.Infusions = true;
      }
      if (
        oPrescription.oPresItemAdditionalProperties != null &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemAdditionalProperties.NonCatalogueReason
        )
      ) {
        this.formViewerDetails.BasicDetails.NONCatalogueReason =
          new CListItem();
        this.formViewerDetails.BasicDetails.NONCatalogueReason.Value =
          oPrescription.oPresItemAdditionalProperties.NonCatalogueReason;
        this.formViewerDetails.BasicDetails.NONCatalogueReason.DisplayText =
          oPrescription.oPresItemAdditionalProperties.NonCatalogueReason;
      }
      this.PrescriptionItemStatus =
        oPrescription.oPrescriptionItem.PrescriptionItemStatus;
      if (
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.formViewerDetails.BasicDetails.IsClinicallyVerified =
          oPrescription.oPresItemBasicPropertiesView.IsAuthorised;
      }
      this.IsCompletedDisContItemFor72Hrs =
        oPrescription.oPrescriptionItem.IsInclude72HrsCompletedORDisconItem;
      this.IsAccessContraint =
        oPrescription.oPrescriptionItem.IsAccessContraint;
      this.IsPrescribeByBrand =
        oPrescription.oPrescriptionItem.IsPrescribeByBrand;
      this.DrugVersionMatch = oPrescription.oPrescriptionItem.DrugVersionMatch;
      this.IsAmendment = oPrescription.oPrescriptionItem.IsAmendment;
      this.FormViewerDetails.BasicDetails.bIsAmend =
        oPrescription.oPrescriptionItem.IsAmendment == 'Y' ? true : false;
      this.ItemMainType = oPrescription.oPrescriptionItem.ItemType;
      this.IsAmendCompletedStatus =
        oPrescription.oPrescriptionItem.IsAmendCompletedStatus;
      this.ItemSubType = oPrescription.oPrescriptionItem.ITMSUBTYP;
      this.FormViewerDetails.BasicDetails.itemSubType =
        oPrescription.oPrescriptionItem.ITMSUBTYP;
      if (
        !String.IsNullOrEmpty(oPrescription.oPrescriptionItem.MCIItemDisplay)
      ) {
        let sTooltip: string[] = null;
        let sMCTooltips: string[] = null;
        let sMcitemdisplay: StringBuilder = new StringBuilder();
        sTooltip = oPrescription.oPrescriptionItem.MCIItemDisplay.Split('^');
        let nLength: number = sTooltip.length;
        for (let i: number = 0; i < nLength; i++) {
          sMCTooltips = sTooltip[i].Split('~');
          sMcitemdisplay.Append(sMCTooltips[0]);
          sMcitemdisplay.Append('^');
        }
        this.FormViewerDetails.BasicDetails.mCIItemDisplay =
          this.MCIItemDisplay = sMcitemdisplay.ToString().TrimEnd('^');
      }
      this.FormViewerDetails.BasicDetails.MCIItemDrugprop =
        oPrescription.oPrescriptionItem.MCIItemDisplay;
      this.MCIItemDrugprop = oPrescription.oPrescriptionItem.MCIItemDisplay;
      this.FormViewerDetails.BasicDetails.RecordedadminDTTM =
        oPrescription.oPrescriptionItem.Recordadmindatetime;
      this.AlreadyPrescribedItemOID =
        oPrescription.oPrescriptionItem.ReorderedFromclerkItemOID;
      this.FormViewerDetails.BasicDetails.mCChilditem =
        oPrescription.oPrescriptionItem.MCItemName;
      this.MCChilditem = oPrescription.oPrescriptionItem.MCItemName;
      this.AuthoriseRoleOID = oPrescription.oPrescriptionItem.AuthoriseRoleOID;
      if (
        oPrescription.oPrescriptionItem.MCIDEActiveItems != null &&
        oPrescription.oPrescriptionItem.MCIDEActiveItems.Count > 0
      ) {
        let MciName: string = String.Empty;
        for (
          let i: number = 0;
          i < oPrescription.oPrescriptionItem.MCIDEActiveItems.Count;
          i++
        ) {
          MciName += oPrescription.oPrescriptionItem.MCIDEActiveItems[i];
          if (i < oPrescription.oPrescriptionItem.MCIDEActiveItems.Count - 1)
            MciName += ', ';
        }
        MciName += '\n';
        this.MCIDEActiveItems = MciName;
      }
      if (
        oPrescription.oPrescriptionItem.MCIVersionMatchItems != null &&
        oPrescription.oPrescriptionItem.MCIVersionMatchItems.Count > 0
      ) {
        let MciName: string = String.Empty;
        for (
          let i: number = 0;
          i < oPrescription.oPrescriptionItem.MCIVersionMatchItems.Count;
          i++
        ) {
          MciName += oPrescription.oPrescriptionItem.MCIVersionMatchItems[i];
          if (
            i <
            oPrescription.oPrescriptionItem.MCIVersionMatchItems.Count - 1
          )
            MciName += ', ';
        }
        MciName += '\n';
        this.MCIMatchVersionItems = MciName;
      }
      if (oPrescription.oPrescriptionItem.IssIDSNewMeds == '1')
        this.FormViewerDetails.BasicDetails.IsIDSNewmeds = true;
      else this.FormViewerDetails.BasicDetails.IsIDSNewmeds = false;
      this.LorenzoID = oPrescription.oPrescriptionItem.LorenzoID;
      if (
        (oPrescription.oPrescriptionItem.IsConflictsExists == 'R' ||
          oPrescription.oPrescriptionItem.IsConflictsExists == 'A') &&
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 &&
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0
      ) {
        this.HIWarningBehaviourType =
          oPrescription.oPrescriptionItem.IsConflictsExists;
        this.HIIsAcknowledged = '2';
      }
      if (
        (oPrescription.oPrescriptionItem.IsConflictsExists == 'R' ||
          oPrescription.oPrescriptionItem.IsConflictsExists == 'A') &&
        (String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0)
      ) {
        this.HIWarningBehaviourType =
          oPrescription.oPrescriptionItem.IsConflictsExists;
        this.HIIsAcknowledged = '2';
      }
      this.PrescriberDetails = ObjectHelper.CreateObject(new ObjectInfo(), {
        Code: oPrescription.oPrescriptionItem.PrescriberDetails.Code,
        Name: oPrescription.oPrescriptionItem.PrescriberDetails.Name,
        OID: oPrescription.oPrescriptionItem.PrescriberDetails.OID,
        RoleProfileOID:
          oPrescription.oPrescriptionItem.PrescriberDetails.RoleProfileOID,
      });
      if (
        oPrescription != null &&
        oPrescription.oPrescriptionItem != null &&
        oPrescription.oPrescriptionItem.PrescriberDetails != null &&
        !String.IsNullOrEmpty(
          oPrescription.oPrescriptionItem.PrescriberDetails.Name
        ) &&
        String.IsNullOrEmpty(this.PrescriberOBHName)
      ) {
        this.PrescriberOBHName =
          oPrescription.oPrescriptionItem.PrescriberDetails.Name;
      }
      if (
        oPrescription != null &&
        oPrescription.oPrescriptionItem != null &&
        oPrescription.oPrescriptionItem.PrescriberDetails != null &&
        !(oPrescription.oPrescriptionItem.PrescriberOBOUserOID == 0)
      ) {
        this.PrescriberOBOUserOID =
          oPrescription.oPrescriptionItem.PrescriberOBOUserOID;
      }
      if (this.PrescriptionItemStatus == 'MedStatus7') {
        if (String.Compare(this.IsexistAuthoriseOID, String.Empty) == 0) {
          this.IsexistAuthoriseOID = this.PrescriptionOID.ToString();
        } else
          this.IsexistAuthoriseOID += ',' + this.PrescriptionOID.ToString();
      }
      this.LastModifiedAt =
        oPrescription.oPresItemBasicPropertiesView.LastModifiedAt;
      this.PrescriptionItemNumber =
        oPrescription.oPrescriptionItem.PrescriptionItemNumber;
      this.PrescriptionNumber =
        oPrescription.oPrescriptionItem.PrescriptionNumber;
      this.IsNonformulary = oPrescription.oPrescriptionItem.IsNonformulary;
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemAdditionalProperties.NonFormularyReason
        )
      ) {
        this.NonFormularyReason = ObjectHelper.CreateObject(new CListItem(), {
          DisplayText:
            oPrescription.oPresItemAdditionalProperties.NonFormularyReason,
          Value: oPrescription.oPresItemAdditionalProperties.NonFormularyReason,
        });
      }
      if (
        String.Compare(
          oPrescription.oPrescriptionItem.ReplaceDrugActiveStatus.ToString(),
          '0'
        ) == 0 &&
        String.Compare(
          oPrescription.oPrescriptionItem.DrugVersionMatch.ToString(),
          '1'
        ) == 0
      ) {
        this.IsDeactivate = '1';
        this.IsFormViewerDisable = true;
      } else {
        this.IsDeactivate = '0';
        this.IsFormViewerDisable = false;
      }
      let IPPPresItem: IPPMAManagePrescSer.IPPPrescriptionItem =
        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPrescriptionItem>(
          oPrescription.oPrescriptionItem,
          IPPMAManagePrescSer.IPPPrescriptionItem
        );
      if (IPPPresItem != null) {
        if (IPPPresItem.Instruction != null) {
          this.FormViewerDetails.BasicDetails.PRNInstruction =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: IPPPresItem.Instruction.Name,
            });
        }
        if (!String.IsNullOrEmpty(IPPPresItem.StrengthText)) {
          this.FormViewerDetails.BasicDetails.Strength =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: IPPPresItem.StrengthText,
              Value: IPPPresItem.StrengthText,
            });
        }
        if (!String.IsNullOrEmpty(IPPPresItem.PreparationStatus)) {
          this.PreparationStatus = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: IPPPresItem.PreparationStatus,
            Value: IPPPresItem.PreparationStatus,
          });
        }
        this.IsWardStock = IPPPresItem.IsWardStock;
        if (!String.IsNullOrEmpty(IPPPresItem.RequisitionCACode)) {
          this.RequisitionCACode = IPPPresItem.RequisitionCACode;
        }
        switch (IPPPresItem.IsSupplyRequested) {
          case '1':
            this.IsSupplyRequested =
              String.Compare(
                IPPPresItem.RequisitionCACode,
                'MN_MEDCHART_P2',
                StringComparison.OrdinalIgnoreCase
              ) != 0 &&
              String.Compare(
                IPPPresItem.RequisitionCACode,
                'MN_MEDCHART_DRGV_P2',
                StringComparison.OrdinalIgnoreCase
              ) != 0
                ? true
                : false;
            break;
          case '2':
            this.IsOriginalSupplyRequested = this.IsSupplyRequested = true;
            break;
          default:
            this.IsSupplyRequested = false;
            this.IsReSupplyRequested = false;
            this.IsOriginalSupplyRequested = false;
            break;
        }
        this.RequestedBy = !String.IsNullOrEmpty(IPPPresItem.RequestedBy)
          ? IPPPresItem.RequestedBy
          : String.Empty;
        this.RequestedDTTM =
           DateTime.NotEquals(IPPPresItem.RequestedDTTM, DateTime.MinValue)
            ? IPPPresItem.RequestedDTTM
            : DateTime.MinValue;
        this.RequestUrgency = !String.IsNullOrEmpty(IPPPresItem.RequestUrgency)
          ? IPPPresItem.RequestUrgency
          : String.Empty;
        this.RequestedComments = !String.IsNullOrEmpty(
          IPPPresItem.RequestedComments
        )
          ? IPPPresItem.RequestedComments
          : String.Empty;
        this.IsSupplyRequestedforReqMed =
          !String.IsNullOrEmpty(IPPPresItem.IsSupplyRequested.ToString()) &&
          String.Compare(
            IPPPresItem.IsSupplyRequested.ToString(),
            '0',
            StringComparison.InvariantCultureIgnoreCase
          ) != 0
            ? true
            : false;
        this.InstructionCount = IPPPresItem.InstructionCount;
      }
      let IPPPresItemBasicProperties: IPPMAManagePrescSer.IPPPresItemBasicPropertiesView =
        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicPropertiesView>(
          oPrescription.oPresItemBasicPropertiesView,
          IPPMAManagePrescSer.IPPPresItemBasicPropertiesView
        );
      if (IPPPresItemBasicProperties != null) {
        this.ParentSourcePrescriptionItemOID =
          IPPPresItemBasicProperties.ParentPrescriptionItemOID;
        this.ParentSourcePrescriptionType =
          IPPPresItemBasicProperties.ParentPrescriptionType;
        this.ParentPrescriptionitemstatus =
          IPPPresItemBasicProperties.ParentPrescriptionitemstatus;
        this.sourceEncounter = IPPPresItemBasicProperties.ParentEncounteroid;
        this.parentreorderType = IPPPresItemBasicProperties.ParentReordertype;
        this.InPatDisReorderFlag = IPPPresItemBasicProperties.ReorderFlag;
        if (
          this.PreparationStatus != null &&
          !String.IsNullOrEmpty(this.PreparationStatus.Value)
        ) {
          this.FormViewerDetails.BasicDetails.PrepStatus = new CListItem();
          this.FormViewerDetails.BasicDetails.PrepStatus.Value =
            this.PreparationStatus.Value;
        }
        if (
          IPPPresItemBasicProperties.OrderSet != null &&
          IPPPresItemBasicProperties.OrderSet.OID > 0
        ) {
          let ordersetassoid: number = 0;
          this.FormViewerDetails.BasicDetails.Ordersets = new CListItem();
          this.FormViewerDetails.BasicDetails.Ordersets.DisplayText =
            IPPPresItemBasicProperties.OrderSet.Name;
          this.FormViewerDetails.BasicDetails.Ordersets.Value =
            IPPPresItemBasicProperties.OrderSet.OID.ToString();
          this.FormViewerDetails.BasicDetails.Ordersets.ToolTip =
            Resource.ORSSecMezzanine.ORSIcon_ToolTip +
            IPPPresItemBasicProperties.OrderSet.Name;
          Int64.TryParse(
            IPPPresItemBasicProperties.OrderSet.Code,
            (o) => (ordersetassoid = o)
          );
          this.FormViewerDetails.BasicDetails.Ordersets.Tag = ordersetassoid;
          this.FormViewerDetails.BasicDetails.IsOrderSetIconVisible =
            Visibility.Visible;
        }
        if (!String.IsNullOrEmpty(IPPPresItemBasicProperties.PrescribingNote)) {
          this.FormViewerDetails.BasicDetails.PrescribingNote =
            IPPPresItemBasicProperties.PrescribingNote;
          this.FormViewerDetails.BasicDetails.IsPrescribingNoteIconVisible =
            Visibility.Visible;
        }
      }
      if (oPrescription.oPrescriptionItem.PrescriptionBasicData != null) {
        this.PrescriptionType =
          oPrescription.oPrescriptionItem.PrescriptionBasicData.PrescriptionType;
        if (oPrescription.oPresItemBasicPropertiesView.Statusflags != null) {
          this.IsHold =
            oPrescription.oPresItemBasicPropertiesView.Statusflags.IsHold.Equals(
              '1'
            );
        }
        if (
          oPrescription.oPrescriptionItem.PrescriptionBasicData
            .PrescriptionItems != null &&
          oPrescription.oPrescriptionItem.PrescriptionBasicData
            .PrescriptionItems.Count > 0 &&
          oPrescription.oPrescriptionItem.PrescriptionBasicData
            .PrescriptionItems[0].DrugSpecificProperties != null
        ) {
          this.IsParacetamolIngredient =
            oPrescription.oPrescriptionItem.PrescriptionBasicData.PrescriptionItems[0].DrugSpecificProperties.IsParacetamolIngredient;
        }
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.DrugProperties != null &&
        oPrescription.oPresItemBasicPropertiesView.DrugProperties.Count > 0
      ) {
        this.FormViewerDetails.BasicDetails.DrugProperties =
          new ObservableCollection<DrugProperty>();
        oPrescription.oPresItemBasicPropertiesView.DrugProperties.forEach(
          (oDrugProp) => {
            this.FormViewerDetails.BasicDetails.DrugProperties.Add(
              ObjectHelper.CreateObject(new DrugProperty(), {
                DrugName: oDrugProp.DrugName,
                DrugPropertyCode: oDrugProp.DrugPropertyCode,
                HighRiskMsg: oDrugProp.HighRiskMsg,
                IdentifyingOID: oDrugProp.IdentifyingOID,
                IdentifyingType: oDrugProp.IdentifyingType,
                OccuranceCode: oDrugProp.OccuranceCode,
                VMChildCode: 'CC_OCCRALLCHILD',
              })
            );
          }
        );
      }
      this.IsPGD = oPrescription.oPrescriptionItem.IsPGD;
      this.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus =
        oPrescription.oPrescriptionItem.ReplaceDrugActiveStatus;
      if (
        this.IsSupplyRequestedEnable &&
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.IsSupplyRequestedEnable =
          this.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus == '1';
      }
      if (
        oPrescription.oPrescriptionItem.InfusionGroupSequenceNo > 0 &&
        oPrescription.oPresItemBasicPropertiesView != null &&
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters != null &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .INFTYCODE
        ) &&
        !oPrescription.oPresItemBasicPropertiesView.FormViewParameters.INFTYCODE.Equals(
          InfusionTypeCode.INTERMITTENT
        ) &&
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters
          .IntravenousInfusionData != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
          oPrescription.oPrescriptionItem.InfusionSeqOrder > 0
            ? oPrescription.oPrescriptionItem.InfusionSeqOrder
            : 0;
        this.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
          oPrescription.oPrescriptionItem.ParentPrescriptionItemOID > 0
            ? oPrescription.oPrescriptionItem.ParentPrescriptionItemOID
            : 0;
        this.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID =
          oPrescription.oPrescriptionItem.ParentPrescriptionItemOID > 0
            ? oPrescription.oPrescriptionItem.ParentPrescriptionItemOID
            : 0;
        this.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq =
          !String.IsNullOrEmpty(oPrescription.oPrescriptionItem.TotalSeqCount)
            ? Convert.ToInt32(oPrescription.oPrescriptionItem.TotalSeqCount)
            : 0;
        this.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo =
          oPrescription.oPrescriptionItem.InfusionGroupSequenceNo;
        this.formViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo =
          oPrescription.oPrescriptionItem.InfusionSeqOrder;
        this.formViewerDetails.BasicDetails.InfusionDetails.IsAnyItemAdministeredInSeqGroup =
          oPrescription.oPrescriptionItem.IsAnyItemAdministeredInSeqGroup;
      } else if (oPrescription.oPrescriptionItem.InfusionGroupSequenceNo > 0) {
        if (this.FormViewerDetails.BasicDetails.SequenceInfo == null) {
          this.FormViewerDetails.BasicDetails.SequenceInfo =
            new SequenceDetail();
        }
        if (
          oPrescription != null &&
          oPrescription.oPresItemBasicPropertiesView != null &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters !=
            null &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .SequenceData != null
        ) {
          this.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .SequenceData.ParentPrescriptionItemOID > 0
              ? oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .SequenceData.ParentPrescriptionItemOID
              : 0;
          this.FormViewerDetails.BasicDetails.SequenceInfo.ParentPrescriptionItemOID =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .SequenceData.ParentPrescriptionItemOID > 0
              ? oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .SequenceData.ParentPrescriptionItemOID
              : 0;
          this.FormViewerDetails.BasicDetails.SequenceInfo.IsFirstItem =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.SequenceData.IsFirstItem;
          this.FormViewerDetails.BasicDetails.SequenceInfo.IsLastItem =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.SequenceData.IsLastItem;
        }
        this.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo =
          oPrescription.oPrescriptionItem.InfusionGroupSequenceNo;
        this.formViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo =
          oPrescription.oPrescriptionItem.InfusionSeqOrder;
        this.formViewerDetails.BasicDetails.SequenceInfo.IsAnyItemAdministeredInSeqGroup =
          oPrescription.oPrescriptionItem.IsAnyItemAdministeredInSeqGroup;
        this.IsReoderIconEnable = false;
        this.ReorderToolTip = null;
      }
      if (
        oPrescription.oPrescriptionItem.GPConnectMedication != null &&
        !String.IsNullOrEmpty(
          oPrescription.oPrescriptionItem.GPConnectMedication.GPConnectID
        )
      ) {
        this.GpConnectMedicationItem = new GPConnectItemVM();
        this.GpConnectMedicationItem.GPConnectID =
          oPrescription.oPrescriptionItem.GPConnectMedication.GPConnectID;
      }
    }
    if (oPrescription.oPrescriptionItemAction != null) {
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPrescriptionItemAction.ReasonForModification
        )
      ) {
        this.FormViewerDetails.BasicDetails.ReasonforModification =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              oPrescription.oPrescriptionItemAction.ReasonForModification,
            Value: oPrescription.oPrescriptionItemAction.ReasonForModification,
          });
      } else {
        this.FormViewerDetails.BasicDetails.ReasonforModification =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: 'Select reason',
          });
      }
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPrescriptionItemAction.DirectDiscontinueReason
        )
      ) {
        this.FormViewerDetails.BasicDetails.DiscontinueReason =
          oPrescription.oPrescriptionItemAction.DirectDiscontinueReason;
      }
    }
    if (oPrescription.oPresItemBasicPropertiesView != null) {
      if (this.FormViewerDetails.BasicDetails.IsAllowMultiRoute) {
        this.FormViewerDetails.BasicDetails.Route = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: MedicationCommonBB.RouteName(
              oPrescription.oPresItemBasicPropertiesView.Route.Name
            ),
            Value: MedicationCommonBB.RouteOID(
              oPrescription.oPresItemBasicPropertiesView.Route.Name
            ),
            Tag: MedicationCommonBB.RouteTag(
              oPrescription.oPresItemBasicPropertiesView.Route.Name
            ),
          }
        );
      } else if (
        oPrescription.oPresItemBasicPropertiesView.Route instanceof
          IPPMAManagePrescSer.ObjectInfo &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.Route.Name
        )
      ) {
        this.FormViewerDetails.BasicDetails.Route = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: MedicationCommonBB.RouteName(
              oPrescription.oPresItemBasicPropertiesView.Route.Name
            ),
            Value: MedicationCommonBB.RouteOID(
              oPrescription.oPresItemBasicPropertiesView.Route.Name
            ),
            Tag: oPrescription.oPresItemBasicPropertiesView.Route.Name.Split(
              '~'
            )[2],
          }
        );
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.Route instanceof
          IPPMAManagePrescSer.ObjectInfo &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.Route.Name
        )
      ) {
        this.FormViewerDetails.BasicDetails.RouteRecorded =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oPrescription.oPresItemBasicPropertiesView.Route.Name,
            Value:
              oPrescription.oPresItemBasicPropertiesView.Route.OID.ToString(),
          });
      }
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.SealImageList
        )
      ) {
        this.FormViewerDetails.BasicDetails.Site = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText:
              oPrescription.oPresItemBasicPropertiesView.SealImageList,
            Value: oPrescription.oPresItemBasicPropertiesView.Site,
          }
        );
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.Form instanceof
          IPPMAManagePrescSer.ObjectInfo &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.Form.Name
        )
      ) {
        this.FormViewerDetails.BasicDetails.DosageForm =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oPrescription.oPresItemBasicPropertiesView.Form.Name,
            Value:
              oPrescription.oPresItemBasicPropertiesView.Form.OID.ToString(),
          });
      }
      this.FormViewerDetails.BasicDetails.Dose =
        oPrescription.oPresItemBasicPropertiesView.Dose;
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.DoseType
        )
      ) {
        this.FormViewerDetails.BasicDetails.DoseType =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oPrescription.oPresItemBasicPropertiesView.DoseType,
            Value: oPrescription.oPresItemBasicPropertiesView.DoseTypeValue,
          });
      }
      this.FormViewerDetails.BasicDetails.Direction =
        oPrescription.oPresItemBasicPropertiesView.Direction;
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.Frequency
        )
      ) {
        this.FormViewerDetails.BasicDetails.Frequency =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oPrescription.oPresItemBasicPropertiesView.Frequency,
            Value:
              oPrescription.oPresItemBasicPropertiesView.FreqOID.ToString(),
          });
      }
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.SteppedDoseAdminTimes
        )
      ) {
        this.FormViewerDetails.BasicDetails.SteppedDoseAdminTimes =
          oPrescription.oPresItemBasicPropertiesView.SteppedDoseAdminTimes;
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.AdminInstruction instanceof
          IPPMAManagePrescSer.ObjectInfo &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.AdminInstruction.Name
        )
      ) {
        this.FormViewerDetails.BasicDetails.AdminInstruction =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              oPrescription.oPresItemBasicPropertiesView.AdminInstruction.Name,
            Value:
              oPrescription.oPresItemBasicPropertiesView.AdminInstruction.OID.ToString(),
          });
      }
      this.FormViewerDetails.BasicDetails.Duration =
        oPrescription.oPresItemBasicPropertiesView.Duration;
      if (oPrescription.oPresItemBasicPropertiesView.DurationInfo != null) {
        this.FormViewerDetails.BasicDetails.DurationInfo = new CListItem();
        this.FormViewerDetails.BasicDetails.DurationInfo.Value =
          oPrescription.oPresItemBasicPropertiesView.DurationInfo.Value > 0
            ? oPrescription.oPresItemBasicPropertiesView.DurationInfo.Value.ToString()
            : String.Empty;
        this.FormViewerDetails.BasicDetails.DurationInfo.Tag =
          oPrescription.oPresItemBasicPropertiesView.DurationInfo.UOMCode;
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.TreatmentToCont instanceof
          IPPMAManagePrescSer.ObjectInfo &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.TreatmentToCont.Code
        )
      ) {
        this.FormViewerDetails.BasicDetails.TreatmentToContinue =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              oPrescription.oPresItemBasicPropertiesView.TreatmentToCont.Name,
            Value:
              oPrescription.oPresItemBasicPropertiesView.TreatmentToCont.OID.ToString(),
            Tag: oPrescription.oPresItemBasicPropertiesView.TreatmentToCont,
          });
      }
      if (
        !this.IsGroupHeader &&
        (String.Equals(
          oPrescription.oPresItemBasicPropertiesView.ExistsOnAdmission,
          '1'
        ) ||
          String.Equals(
            oPrescription.oPresItemBasicPropertiesView.ExistsOnAdmission,
            '2'
          ))
      ) {
        this.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
          Visibility.Visible;
      } else {
        this.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
          Visibility.Collapsed;
      }
      if (this.FormViewerDetails.BasicDetails.ExistingSupplyinstruction == null)
        this.FormViewerDetails.BasicDetails.ExistingSupplyinstruction =
          new ObservableCollection<CListItem>();
      if (
        oPrescription.oPresItemBasicPropertiesView.SupplyInstruction instanceof
          ObservableCollection &&
        oPrescription.oPresItemBasicPropertiesView.SupplyInstruction.Count > 0
      ) {
        let oSupplyText: StringBuilder = new StringBuilder();
        let oSupplyValue: StringBuilder = new StringBuilder();
        oPrescription.oPresItemBasicPropertiesView.SupplyInstruction.forEach(
          (ObjSupply) => {
            let supplyinstrtxt: string = String.Empty;
            if (!String.IsNullOrEmpty(ObjSupply.Name)) {
              oSupplyText.Append(ObjSupply.Name);
            } else if (
              MedicationCommonConceptCodeData.ViewConceptCodes != null &&
              MedicationCommonConceptCodeData.ViewConceptCodes.Count > 0 &&
              !String.IsNullOrEmpty(ObjSupply.Code)
            ) {
              let lstTermtext: IEnumerable<CValuesetTerm>;
              lstTermtext =
                MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                  (x) => x.csCode == ObjSupply.Code
                );
              if (
                lstTermtext != null &&
                lstTermtext.Count() > 0 &&
                !String.IsNullOrEmpty(lstTermtext.First().csDescription)
              ) {
                oSupplyText.Append(lstTermtext.First().csDescription);
                supplyinstrtxt = lstTermtext.First().csDescription;
              }
            }
            oSupplyText.Append(';');
            oSupplyValue.Append(ObjSupply.Code);
            oSupplyValue.Append(';');
            if (ObjSupply != null && !String.IsNullOrEmpty(ObjSupply.Code)) {
              this.FormViewerDetails.BasicDetails.ExistingSupplyinstruction.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: ObjSupply.Code,
                  DisplayText: !String.IsNullOrEmpty(ObjSupply.Name)
                    ? ObjSupply.Name
                    : supplyinstrtxt,
                })
              );
            }
          }
        );
        let sText: string = String.Empty;
        let sValue: string = String.Empty;
        this.FormViewerDetails.BasicDetails.TechValiadteSupplyInstWithConactSemiColon(
          this.FormViewerDetails.BasicDetails.ExistingSupplyinstruction,
          (o1) => {
            sText = o1;
          },
          (o2) => {
            sValue = o2;
          }
        );
        this.FormViewerDetails.BasicDetails.SupplyInsText =
          !String.IsNullOrEmpty(sText) ? sText : String.Empty;
        this.FormViewerDetails.BasicDetails.SupplyInsVal =
          !String.IsNullOrEmpty(sValue) ? sValue : String.Empty;
      }
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.FluidSupplyInst
        )
      ) {
        this.FormViewerDetails.BasicDetails.IsSupplyInstrExistsForFluid = true;
        this.FormViewerDetails.BasicDetails.FluidSupplyInstrText =
          oPrescription.oPresItemBasicPropertiesView.FluidSupplyInst;
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM !=
          null &&
        DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM,
          DateTime.MinValue)
      ) {
        this.FormViewerDetails.BasicDetails.FluidNextSupplyDate =
          oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM;
      }
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel
        )
      ) {
        let scode: string[] =
          this.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel.Split(
            '~~',
            StringSplitOptions.None
          );
        if (
          scode != null &&
          scode.length > 1 &&
          !String.IsNullOrEmpty(scode[1])
        ) {
          this.FormViewerDetails.BasicDetails.Supplycomments =
            scode[1].ToString();
        }
      }
      this.FormViewerDetails.BasicDetails.ExistingSupplyComments =
        this.FormViewerDetails.BasicDetails.Supplycomments;
      if (
        oPrescription.oPresItemBasicPropertiesView.NextSupplyDTTM != null &&
        DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.NextSupplyDTTM,
          DateTime.MinValue)
      ) {
        this.FormViewerDetails.BasicDetails.OriginalNextSupplyDate =
          oPrescription.oPresItemBasicPropertiesView.NextSupplyDTTM;
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM !=
          null &&
          DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM,
          DateTime.MinValue)
      ) {
        this.FormViewerDetails.BasicDetails.OriginalFluidNextSupplyDate =
          oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM;
      }
      if (this.iSSupplyrequest == null)
        this.iSSupplyrequest = new ObservableCollection<CListItem>();
      if (
        this.iSSupplyrequest.Count == 0 &&
        DomainValuesForTechValidate.SupplyRequest != null &&
        DomainValuesForTechValidate.SupplyRequest.Count > 0
      ) {
        DomainValuesForTechValidate.SupplyRequest.forEach((objSupInfo) => {
          if (
            !String.Equals(
              objSupInfo.Value,
              CConstants.CancelSupplycode,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.iSSupplyrequest.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: objSupInfo.DisplayText,
                Value: objSupInfo.Value,
              })
            );
          }
        });
      }
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.SupplyStatus
        ) &&
        !String.Equals(
          oPrescription.oPresItemBasicPropertiesView.SupplyStatus,
          'CC_SUPPLYEMPTY',
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        (!String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          (String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
            PatientContext.ClerkFormViewDefaultBehavior ==
              ClerkFormViewDeftBehaviour.LaunchFormMandatory))
      ) {
        this.SelectedSupplyreq = this.iSSupplyrequest
          .Where(
            (x) =>
              x != null &&
              !String.IsNullOrEmpty(x.Value) &&
              String.Equals(
                x.Value,
                oPrescription.oPresItemBasicPropertiesView.SupplyStatus,
                StringComparison.InvariantCultureIgnoreCase
              )
          )
          .FirstOrDefault();
        if (String.IsNullOrEmpty(this.OperationMode)) {
          this.EditedGridID = 0;
        }
      } else {
        this.SelectedSupplyreq = this.iSSupplyrequest
          .Where(
            (x) =>
              x != null &&
              !String.IsNullOrEmpty(x.Value) &&
              String.Equals(x.Value, Resource.TechValidate.Empty)
          )
          .FirstOrDefault();
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.DispensingInstruction !=
          null &&
        oPrescription.oPresItemBasicPropertiesView.DispensingInstruction.Count >
          0
      ) {
        let oCListItem: CListItem = new CListItem();
        let sTmpTermText: string = String.Empty;
        let lstTermtext: IEnumerable<CValuesetTerm>;
        if (this.FormViewerDetails.TechvalidateCADetails == null) {
          this.FormViewerDetails.TechvalidateCADetails = new TechvalidateCAVM();
          this.FormViewerDetails.TechvalidateCADetails.LoadPrescriptionData();
        }
        if (
          this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems ==
          null
        ) {
          this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems =
            new ObservableCollection<PrescriptionItemVM>();
          this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems.Add(
            this
          );
        }
        if (
          this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems
            .Count > 0
        ) {
          this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.DispensingInstruction =
            new ObservableCollection<CListItem>();
          oPrescription.oPresItemBasicPropertiesView.DispensingInstruction.forEach(
            (oDispens) => {
              if (
                String.Equals(
                  oDispens.Code,
                  CConstants.Addtionalcomments,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ) {
                this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.DispensingAdditionalComments =
                  oDispens.Name;
                oCListItem = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: oDispens.Name,
                  Value: oDispens.Code,
                });
              } else if (
                String.Equals(
                  oDispens.Code,
                  CConstants.Other,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ) {
                oCListItem = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: oDispens.Name,
                  Value: CConstants.Other,
                  IsSelected: true,
                });
                oCListItem.Tag = oDispens.Name;
                if (
                  !String.IsNullOrEmpty(
                    oPrescription.oPresItemBasicPropertiesView
                      .OtherDispensingInstruction
                  )
                ) {
                  this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.OtherDispensingInstruction =
                    oPrescription.oPresItemBasicPropertiesView.OtherDispensingInstruction;
                  this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.TechvalidateCADetails.OtherDispensingInstruction =
                    oPrescription.oPresItemBasicPropertiesView.OtherDispensingInstruction;
                } else {
                  this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.OtherDispensingInstruction =
                    oDispens.Name;
                  this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.TechvalidateCADetails.OtherDispensingInstruction =
                    oDispens.Name;
                }
              } else {
                sTmpTermText = String.Empty;
                if (
                  MedicationCommonConceptCodeData.ViewConceptCodes != null &&
                  MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                    (x) => x.csCode == oDispens.Code
                  ).Any()
                ) {
                  lstTermtext =
                    MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                      (x) => x.csCode == oDispens.Code
                    );
                  if (lstTermtext != null) {
                    sTmpTermText = lstTermtext.First().csDescription;
                  }
                }
                oCListItem = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: sTmpTermText,
                  Value: oDispens.Code,
                  IsSelected: true,
                });
              }
              this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.DispensingInstruction.Add(
                oCListItem
              );
            }
          );
          this.FormViewerDetails.TechvalidateCADetails.DispensingInstruction =
            this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.DispensingInstruction;
          this.FormViewerDetails.TechvalidateCADetails.OtherDispensingInstruction =
            this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.OtherDispensingInstruction;
          this.formViewerDetails.TechvalidateCADetails.sAdditionalcomments =
            this.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.DispensingAdditionalComments;
        }
      }
      if (
        !String.IsNullOrEmpty(
          oPrescription.oPresItemBasicPropertiesView.TechSupplyInstruction
        )
      ) {
        this.FormViewerDetails.BasicDetails.TechsupplyInstText =
          oPrescription.oPresItemBasicPropertiesView.TechSupplyInstruction;
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.PrescriptionItemTechOID > 0
      ) {
        this.FormViewerDetails.BasicDetails.TechPresItemTechOID =
          oPrescription.oPresItemBasicPropertiesView.PrescriptionItemTechOID;
      }
    }
    if (
      oPrescription.oPresItemBasicPropertiesView.SupplyDTTM != null &&
       DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.SupplyDTTM, DateTime.MinValue)
    ) {
      this.FormViewerDetails.BasicDetails.TechSupplyDTTM =
        oPrescription.oPresItemBasicPropertiesView.SupplyDTTM;
    }
    if (
      oPrescription.oPresItemBasicPropertiesView.NextSupplyDTTM != null &&
      DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.NextSupplyDTTM,
        DateTime.MinValue)
    ) {
      this.FormViewerDetails.BasicDetails.NextSupplyDate =
        oPrescription.oPresItemBasicPropertiesView.NextSupplyDTTM;
    }
    if (
      oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM != null &&
      DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM,
        DateTime.MinValue)
    ) {
      this.FormViewerDetails.BasicDetails.FluidNextSupplyDate =
        oPrescription.oPresItemBasicPropertiesView.FluidNextSupplyDTTM;
    }
    if (
      oPrescription.oPrescriptionItemAddnView != null &&
      oPrescription.oPrescriptionItemAddnView.ClinicalVerificationDetails !=
        null &&
      oPrescription.oPrescriptionItemAddnView.ClinicalVerificationDetails
        .PerformedBy != null
    ) {
      this.FormViewerDetails.BasicDetails.ClinicallyVerifiedBy =
        oPrescription.oPrescriptionItemAddnView.ClinicalVerificationDetails.PerformedBy.Name;
      this.FormViewerDetails.BasicDetails.ClinicallyVerifiedAt =
        oPrescription.oPrescriptionItemAddnView.ClinicalVerificationDetails.PerformedDTTM;
      this.FormViewerDetails.BasicDetails.ClinicallyVerifiedComments =
        oPrescription.oPrescriptionItemAddnView.ClinicalVerificationDetails.Comments;
    }
    if (
      oPrescription != null &&
      oPrescription.oPresItemBasicPropertiesView != null
    ) {
      this.FormViewerDetails.BasicDetails.IsDoseCalcExist =
        oPrescription.oPresItemBasicPropertiesView.isDoseCalcExist;
      this.FormViewerDetails.BasicDetails.DCCalDTTM =
        oPrescription.oPresItemBasicPropertiesView.DCCalDTTM;
      if (
        this.FormViewerDetails.BasicDetails.IsDoseCalcExist &&
        MedicationCommonProfileData.PrescribeConfig != null &&
        MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
      ) {
        if (
          DateTime.GreaterThanOrEqualTo(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
        ) {
          if (
            DateTime.GreaterThan(PatientContext.PatientHeightDTTM,
              oPrescription.oPresItemBasicPropertiesView.DCCalDTTM) &&
            !String.Equals(
              this.PrescriptionItemStatus,
              CConstants.CANCELLED,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !String.Equals(
              this.PrescriptionItemStatus,
              CConstants.DISCONTINUED,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !String.Equals(
              this.PrescriptionItemStatus,
              CConstants.COMPLETED,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (bIsResolveGrid) {
              if (!Common.IsClosedEncounter()) {
                this.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                this.ParentbaseVM.IsVisibleHWIndicator = Visibility.Visible;
              } else {
                this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
              }
            } else {
              if (!_IsClosedEncounterForMedListGrid) {
                this.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
              } else {
                this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
              }
            }
          } else {
            this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
          }
        } else if (
          DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
        ) {
          if (
            DateTime.GreaterThan(PatientContext.PatientWeightDTTM,
              oPrescription.oPresItemBasicPropertiesView.DCCalDTTM) &&
            !String.Equals(
              this.PrescriptionItemStatus,
              CConstants.CANCELLED,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !String.Equals(
              this.PrescriptionItemStatus,
              CConstants.DISCONTINUED,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !String.Equals(
              this.PrescriptionItemStatus,
              CConstants.COMPLETED,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (bIsResolveGrid) {
              if (!Common.IsClosedEncounter()) {
                this.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                this.ParentbaseVM.IsVisibleHWIndicator = Visibility.Visible;
              } else {
                this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
              }
            } else {
              if (!_IsClosedEncounterForMedListGrid) {
                this.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
              } else {
                this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
              }
            }
          } else {
            this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
          }
        } else {
          this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
        }
      }
    }
    if (
      oPrescription != null &&
      oPrescription.oPrescriptionItem != null &&
      oPrescription.oPrescriptionItem.PrescriptionItemStatus != null
    ) {
      this.IsAlreadyClinicallyVerified =
        oPrescription.oPrescriptionItem.PrescriptionItemStatus.Equals(
          CConstants.CLINICALLYVERIFIED,
          StringComparison.OrdinalIgnoreCase
        );
    }
    if (oPrescription.oPresItemAdditionalProperties != null) {
      this.OtherInformation =
        oPrescription.oPresItemAdditionalProperties.DrugAttributes;
      if (
        oPrescription.oPresItemAdditionalProperties.StationeryType instanceof
          IPPMAManagePrescSer.ObjectInfo &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemAdditionalProperties.StationeryType.Name
        ) &&
        oPrescription.oPresItemAdditionalProperties.StationeryType.OID > 0 &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemAdditionalProperties.StationeryType.Code
        )
      ) {
        this.FormViewerDetails.BasicDetails.StationaryType =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              oPrescription.oPresItemAdditionalProperties.StationeryType.Code,
            Value:
              oPrescription.oPresItemAdditionalProperties.StationeryType.OID.ToString(),
            Tag: oPrescription.oPresItemAdditionalProperties.StationeryType
              .Name,
          });
      }
      this.FormViewerDetails.BasicDetails.DateCommenced =
        oPrescription.oPresItemAdditionalProperties.DateCommenced;
      if (
        oPrescription.oPresItemAdditionalProperties
          .MedClerkModifyReason instanceof IPPMAManagePrescSer.ObjectInfo &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemAdditionalProperties.MedClerkModifyReason.Code
        )
      ) {
        this.FormViewerDetails.BasicDetails.MedClerkModifyReason =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              oPrescription.oPresItemAdditionalProperties.MedClerkModifyReason
                .Name,
            Value:
              oPrescription.oPresItemAdditionalProperties.MedClerkModifyReason.OID.ToString(),
            Tag: oPrescription.oPresItemAdditionalProperties
              .MedClerkModifyReason,
          });
      }
      this.FormViewerDetails.BasicDetails.AdditionalComments =
        oPrescription.oPresItemAdditionalProperties.AdditionalComments;
      this.FormViewerDetails.BasicDetails.GroupHeaderName =
        oPrescription.oPresItemAdditionalProperties.GroupHeaderName;
      this.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
        oPrescription.oPresItemBasicPropertiesView.OtherAdminInstruction;
      if (
        PatientContext.PrescriptionType !=
          PrescriptionTypes.ForAdministration &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.OtherAdminiInstruction
        ) &&
        this.FormViewerDetails.BasicDetails.AdminInstruction == null
      ) {
        this.FormViewerDetails.BasicDetails.AdminInstruction =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: 'Other',
            Value: 'CC_Other',
          });
      }
      this.FormViewerDetails.BasicDetails.BatchNumber =
        oPrescription.oPresItemAdditionalProperties.BatchNumber;
      this.FormViewerDetails.BasicDetails.ExpiryDate =
        oPrescription.oPresItemAdditionalProperties.ExpiryDate;
      this.FormViewerDetails.BasicDetails.NoOfInstallments =
        oPrescription.oPresItemAdditionalProperties.NoOfInstallments;
      this.FormViewerDetails.BasicDetails.Quantity =
        oPrescription.oPresItemBasicPropertiesView.Quantity;
      this.FormViewerDetails.BasicDetails.QuantityUOMName =
        oPrescription.oPresItemBasicPropertiesView.QuantityUOMName;
      if (
        oPrescription.oPresItemAdditionalProperties.AdminMethod instanceof
          IPPMAManagePrescSer.ObjectInfo &&
        !String.IsNullOrEmpty(
          oPrescription.oPresItemAdditionalProperties.AdminMethod.Name
        )
      ) {
        this.FormViewerDetails.BasicDetails.AdminMethod =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              oPrescription.oPresItemAdditionalProperties.AdminMethod.Name,
            Value:
              oPrescription.oPresItemAdditionalProperties.AdminMethod.OID.ToString(),
          });
      }
    }
    if (
      oPrescription.oPresItemBasicPropertiesView != null &&
      oPrescription.oPresItemBasicPropertiesView.FormViewParameters != null
    ) {
      this.FormViewerDetails.BasicDetails.InfusionType = new CListItem();
      this.FormViewerDetails.BasicDetails.InfusionType.Value =
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters.INFTYCODE;
      this.FormViewerDetails.BasicDetails.InfusionType.DisplayText =
        CommonBB.GetText(
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .INFTYCODE,
          InfusionTypeConceptCodeData.ConceptCodes
        );
      if (
       DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .ReviewAfterDTTM, DateTime.MinValue)
      ) {
        this.FormViewerDetails.BasicDetails.ReviewAfter =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.ReviewAfter;
        this.FormViewerDetails.BasicDetails.IsReviewAlert =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IsReviewAlert;
        this.FormViewerDetails.BasicDetails.ReviewafterUOM =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .ReviewAfterUOM.Name,
            Value: Convert.ToString(
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .ReviewAfterUOM.Code
            ),
          });
        this.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.ReviewAfterDTTM;
        this.FormViewerDetails.BasicDetails.LastReviewedDTTM =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.LastReviewedDTTM;
        this.FormViewerDetails.BasicDetails.ReviewRequestComments =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.ReviewComments;
        this.FormViewerDetails.BasicDetails.ReviewRequestedBy =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.ReviewRequestedBy;
        this.FormViewerDetails.BasicDetails.ReviewType =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.ReviewType;
      }
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .DeliveryDeviceList != null &&
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters
          .IntravenousInfusionData != null
      ) {
        let obj =
          this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceList.Where(
            (odelivery) =>
              (odelivery.DisplayText).toLowerCase() ==
              (oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.DeliveryDevice).toLowerCase()
          ).Select((odelivery) => odelivery);
        if (obj != null && obj.Count() > 0) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice =
            ObjectHelper.CreateType<CListItem>(obj.First(), CListItem);
        } else {
          this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.DeliveryDevice;
        }
      } else if (
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters
          .IntravenousInfusionData != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.DeliveryDevice;
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters
          .AdminDeviceData != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRate =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.BackgroundRate;
        this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateUOMOID =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.BackgroundRateUOM.UOMId;
        this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateDenaminatorUOMOID =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.BackgroundRateDenaminatorUOMOID;
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .AdminDeviceData.BackgroundRateUOM != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .AdminDeviceData.BackgroundRateUOM.UOMName
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateNumeratorUom =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .AdminDeviceData.BackgroundRateUOM.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.BackgroundRateUOM.UOMId.ToString(),
            });
        }
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .AdminDeviceData.BackgroundRateDenaminatorUOM != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .AdminDeviceData.BackgroundRateDenaminatorUOM.UOMName
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateDinominatorUom =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.BackgroundRateDenaminatorUOM.UOMName.ToString(),
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.BackgroundRateDenaminatorUOM.UOMId.ToString(),
            });
        }
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .AdminDeviceData.TopUpDose
          ) &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .AdminDeviceData.TopUpDoseUOM != null
        ) {
          let parValue: number = 0;
          if (
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.TopUpDose.IndexOf(
              '.'
            ) != -1 &&
            Double.TryParse(
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .AdminDeviceData.TopUpDose,
              (o) => (parValue = o)
            ) &&
            parValue != 0 &&
            parValue % 1 == 0
          ) {
            this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus =
              Convert.ToString(parValue);
          } else {
            this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus =
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.TopUpDose;
          }
          this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .AdminDeviceData.TopUpDoseUOM.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.TopUpDoseUOM.UOMId.ToString(),
            });
        }
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .AdminDeviceData.BoosterDose
          ) &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .AdminDeviceData.BoosterDoseUOM != null
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.BoosterDose;
          this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .AdminDeviceData.BoosterDoseUOM.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.BoosterDoseUOM.UOMId.ToString(),
            });
        }
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .AdminDeviceData.LockOutPeriod > 0 &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .AdminDeviceData.LockOutPeriodUOM != null
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.LockOutPeriod.ToString();
          this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .AdminDeviceData.LockOutPeriodUOM.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.LockOutPeriodUOM.UOMId.ToString(),
            });
        }
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .AdminDeviceData.MonitorPeriod
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.MonitorPeriod;
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .AdminDeviceData.MonitorPeriodUOM != null &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .AdminDeviceData.MonitorPeriodUOM.UOMId > 0
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .AdminDeviceData.MonitorPeriodUOM.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.AdminDeviceData.LockOutPeriodUOM.UOMId.ToString(),
            });
        }
      }
      if (
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters
          .IntravenousInfusionData != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.PreviousRate =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.PreviousRate;
        this.FormViewerDetails.BasicDetails.InfusionDetails.PreviousUpperRate =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.PreviousUpperRate;
        this.FormViewerDetails.BasicDetails.InfusionDetails.PreviousRateDrUOMName =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.PreviousRateDrUOMName;
        this.FormViewerDetails.BasicDetails.InfusionDetails.PreviousRateUOMName =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.PreviousRateUOMName;
        this.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusionAlertShown =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.IsAlertShown;
        this.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusionAlertValue =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.IsAlertShownValue;
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.PreviousLowConcentration
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.PrevConcentStrenght =
            Convert.ToString(
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .IntravenousInfusionData.PreviousLowConcentration
            );
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.PreviousUpperConcentration
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.PrevConcentVolume =
            Convert.ToString(
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .IntravenousInfusionData.PreviousUpperConcentration
            );
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.PreviousLowConcentrationUOM != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.PreviousLowConcentrationUOM.UOMName
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.PrevConcentStrenghtUOM =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.PreviousLowConcentrationUOM.UOMName;
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.PreviousUpperConcentrationUOM != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.PreviousUpperConcentrationUOM.UOMName
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.PrevConcentVolumeUOM =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.PreviousUpperConcentrationUOM.UOMName;
        this.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.TargetSaturationUpper.ToString();
        this.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.TargetSaturationLower.ToString();
        this.FormViewerDetails.BasicDetails.InfusionDetails.MaxDose =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.MaxDose;
        this.FormViewerDetails.BasicDetails.InfusionDetails.Lumen =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Lumen;
        this.FormViewerDetails.BasicDetails.InfusionDetails.Humidification =
          ObjectHelper.CreateObject(new CListItem(), {
            Value:
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .IntravenousInfusionData.HUMIDCode,
          });
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.IsOxygen == '1'
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.IsOxygen = true;
        else
          this.FormViewerDetails.BasicDetails.InfusionDetails.IsOxygen = false;
        if (
            DateTime.NotEquals(oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .ReviewAfterDTTM, DateTime.MinValue)
        ) {
          this.FormViewerDetails.BasicDetails.ReviewAfter =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.ReviewAfter;
          this.FormViewerDetails.BasicDetails.ReviewafterUOM =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .ReviewAfterUOM.Name,
              Value: Convert.ToString(
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .ReviewAfterUOM.Code
              ),
            });
          this.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.ReviewAfterDTTM;
          this.FormViewerDetails.BasicDetails.LastReviewedDTTM =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.LastReviewedDTTM;
        }
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IsReviewAlert
        )
          this.FormViewerDetails.BasicDetails.IsReviewAlert = true;
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .ConcentrationsList != null
        ) {
          let obj =
            this.FormViewerDetails.BasicDetails.InfusionDetails.ConcentrationsList.Where(
              (oConcentration) =>
                oConcentration.DisplayText ==
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Concentration.ToString()
            ).Select((oConcentration) => oConcentration);
          if (obj.Count() > 0) {
            this.FormViewerDetails.BasicDetails.InfusionDetails.Concentration =
              ObjectHelper.CreateType<CListItem>(obj.First(), CListItem);
          } else {
            this.FormViewerDetails.BasicDetails.InfusionDetails.ConcentrationFreeText =
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Concentration.ToString();
          }
        } else {
          this.FormViewerDetails.BasicDetails.InfusionDetails.ConcentrationFreeText =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Concentration.ToString();
        }
        this.FormViewerDetails.BasicDetails.InfusionDetails.Rate =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Rate;
        if (oPrescription.oPresItemBasicPropertiesView.FormViewParameters
          .IntravenousInfusionData.IsVolumeBasedInfusion != null &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.IsVolumeBasedInfusion != String.MinValue
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.IsVolumeBasedInfusion == '1'
              ? true
              : false;
        } else {
          this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked =
            false;
        }
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked !=
            null &&
          !Convert.ToBoolean(
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked =
            true;
        }
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.RoundOffCode != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.RoundOffCode
          )
        ) {
          if (
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionRateRndtoList != null &&
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionRateRndtoList.Count > 0
          ) {
            let oDefaultItem: CListItem = null;
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateRndtoList.forEach(
              (oCListItem) => {
                if (
                  oCListItem.Value ==
                  oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                    .IntravenousInfusionData.RoundOffCode
                ) {
                  oDefaultItem = oCListItem;
                }
              }
            );
            if (oDefaultItem != null) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateRndto =
                oDefaultItem;
            }
          }
        }
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.UpperRate;
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.RateUOM != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.RateUOM.UOMName
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .IntravenousInfusionData.RateUOM.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.RateUOM.UOMId.ToString(),
              Tag: oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .IntravenousInfusionData.RateUOM.UOMCode,
            });
        }
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.RateDenominatorUOM != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.RateDenominatorUOM.UOMName
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.RateDenominatorUOM.UOMName.ToString(),
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.RateDenominatorUOM.UOMId.ToString(),
              Tag: oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .IntravenousInfusionData.RateDenominatorUOM.UOMCode,
            });
        }
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.LowConcentration
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.LowConcentration.ToString();
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.UpperConcentration
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.UpperConcentration.ToString();
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.LowConcentrationUOMOID != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.LowConcentrationUOMOID.UOMName
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .IntravenousInfusionData.LowConcentrationUOMOID.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.LowConcentrationUOMOID.UOMId.ToString(),
            });
        }
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.UpperConcentrationUOMOID != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.UpperConcentrationUOMOID.UOMName
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID.UOMName.ToString(),
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID.UOMId.ToString(),
            });
        }
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.IsBolusInfusion
          ) &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.IsBolusInfusion.Equals(
            '1'
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart =
            true;
        } else {
          this.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart =
            false;
        }
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.InfusionPeriod
          )
        )
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.InfusionPeriod;
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.InfusionPeriodUOM != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.InfusionPeriodUOM.UOMName
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .IntravenousInfusionData.InfusionPeriodUOM.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.InfusionPeriodUOM.UOMId.ToString(),
              Tag: oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .IntravenousInfusionData.InfusionPeriodUOM.UOMCode,
            });
        }
        if (
          !(
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.itemSubType != null &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.itemSubType,
              CConstants.SUBTYPE,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          )
        ) {
          if (
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.Fluid != null
          ) {
            if (
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .IntravenousInfusionData.Fluid.OID > 0
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oPrescription.oPresItemBasicPropertiesView
                      .FormViewParameters.IntravenousInfusionData.Fluid.Name,
                  Value:
                    oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Fluid.OID.ToString(),
                });
            }
            this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext =
              oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Fluid.Name;
          }
        }
        let vParValue: number = 0;
        if (
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.Volume
          ) &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Volume.IndexOf(
            '.'
          ) != -1 &&
          Double.TryParse(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.Volume,
            (o) => (vParValue = o)
          ) &&
          vParValue != 0 &&
          vParValue % 1 == 0
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume =
            Convert.ToString(vParValue);
        } else {
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume =
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.Volume;
        }
        if (
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.VolumeUOM != null &&
          !String.IsNullOrEmpty(
            oPrescription.oPresItemBasicPropertiesView.FormViewParameters
              .IntravenousInfusionData.VolumeUOM.UOMName
          )
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                  .IntravenousInfusionData.VolumeUOM.UOMName,
              Value:
                oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.VolumeUOM.UOMId.ToString(),
              Tag: oPrescription.oPresItemBasicPropertiesView.FormViewParameters
                .IntravenousInfusionData.VolumeUOM.UOMCode,
            });
        }
        if (
          this.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          String.Compare(
            this.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.INTERMITTENT,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.InfScheduleDTTMs != null &&
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters
            .IntravenousInfusionData.InfScheduleDTTMs.Count > 0
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfInterMitScheduleDTTMs =
            new ObservableCollection<DateTime>();
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.InfScheduleDTTMs.forEach(
            (InfScheduleDDTS) => {
              if (DateTime.NotEquals(InfScheduleDDTS, DateTime.MinValue))
                this.FormViewerDetails.BasicDetails.InfusionDetails.InfInterMitScheduleDTTMs.Add(
                  InfScheduleDDTS
                );
            }
          );
        }
        this.FormViewerDetails.BasicDetails.InfusionDetails.IsFirstItem =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.IsFirstItem;
        this.FormViewerDetails.BasicDetails.InfusionDetails.IsLastItem =
          oPrescription.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.IsLastItem;
      }
    }
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      (this.FormViewerDetails.BasicDetails.InfusionType.Value ==
        InfusionTypesCode.CONTINUOUS ||
        this.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.SINGLEDOSEVOLUME ||
        this.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.FLUID) &&
      !String.Equals(
        this.PrescriptionItemStatusCode,
        CConstants.CANCELLED,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.Equals(
        this.PrescriptionItemStatusCode,
        CConstants.DISCONTINUED,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.Equals(
        this.PrescriptionItemStatusCode,
        CConstants.COMPLETED,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0
    ) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
        Visibility.Visible;
      this.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Visible;
    } else if (
      this.FormViewerDetails.BasicDetails.SequenceInfo != null &&
      !String.Equals(
        this.PrescriptionItemStatusCode,
        CConstants.CANCELLED,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.Equals(
        this.PrescriptionItemStatusCode,
        CConstants.DISCONTINUED,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.Equals(
        this.PrescriptionItemStatusCode,
        CConstants.COMPLETED,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      this.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo > 0
    ) {
      this.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentiallinkvisi =
        Visibility.Visible;
      this.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Visible;
      this.FormViewerDetails.BasicDetails.SequenceInfo.IsFirstItem =
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters.SequenceData.IsFirstItem;
      this.FormViewerDetails.BasicDetails.SequenceInfo.IsLastItem =
        oPrescription.oPresItemBasicPropertiesView.FormViewParameters.SequenceData.IsLastItem;
    } else {
      this.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Collapsed;
    }
    this.FormViewerDetails.BasicDetails.ReviewAfterCalRequired = true;
    return this;
  }
  BasicDetails_ClinicallyVerified(): void {
    if (!this.IsFormViewDataLoaded) this.GetPresItemDetails();
  }
  private RTEResult;
  public GetPresItemDetails(
    oItemDetail?: IPPMAManagePrescSer.PrescriptionItemDetails,
    RTEResult?:any
  ): void {
    if (oItemDetail || typeof(oItemDetail)==='undefined') {
      this.RTEResult = RTEResult;
      this.GetPresItemDetails1(oItemDetail);
    } else {
      this.GetPresItemDetails0();
    }
  }

  private GetPresItemDetails0(): void {
    let oPrescItemInputData: IPPMAManagePrescSer.PrescriptionItemInputData =
      new IPPMAManagePrescSer.PrescriptionItemInputData();
    oPrescItemInputData.OID = this.PrescriptionItemOID;
    oPrescItemInputData.PrescriptionItemStatus = this.PrescriptionItemStatus;
    oPrescItemInputData.ActiveMCVersion = AppSessionInfo.AMCV;
    oPrescItemInputData.MCVesrionNo =
      this.FormViewerDetails.BasicDetails.MCVersion;
    this.GetPrescriptionDetails(oPrescItemInputData, (s, e) => {
      this.Service_GetPrescriptionDetailsCompleted(s, e);
    });
  }
  Service_GetPrescriptionDetailsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetIPPPrescriptionDetailsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000012;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, PrescriptionItemVM.GetPrescriptionDetailsCompleted()';
    if (e.Error == null) {
      try {
        let oResResolve: IPPMAManagePrescSer.CResMsgGetIPPPrescriptionDetails =
          e.Result;
        if (
          oResResolve instanceof
            IPPMAManagePrescSer.CResMsgGetIPPPrescriptionDetails &&
          oResResolve.oPrescriptionItemDetails != null &&
          oResResolve.oPrescriptionItemDetails.Count > 0
        ) {
          if (
            this.ActionCode == ActivityTypes.Reorder &&
            !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
            !String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.CurrentCultureIgnoreCase
            ) &&
            oResResolve.oPrescriptionItemDetails[0].BasicProperties != null &&
            oResResolve.oPrescriptionItemDetails[0].BasicProperties.Duration !=
              null &&
            String.Equals(
              oResResolve.oPrescriptionItemDetails[0].BasicProperties.Duration
                .UOMCode,
              'CC_DOSES',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            oResResolve.oPrescriptionItemDetails[0].EndDTTM = DateTime.MinValue;
          }
          if (oResResolve.oPrescriptionItemDetails[0].IdentifyingOID == 0)
            oResResolve.oPrescriptionItemDetails[0].IdentifyingOID =
              this.FormViewerDetails.BasicDetails.IdentifyingOID;
          this.FillAllDetails(
            oResResolve.oPrescriptionItemDetails[0],
            DateTime.MinValue,
            DateTime.MinValue,
            DateTime.MinValue,
            String.Empty,
            String.Empty
          );
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public GetResolveDefault(
    oDrugItemInputData: ManagePrescSer.DrugItemInputData,
    GetResolveDefaultCompletedEvent: Function
  ): boolean {
    if (
      oDrugItemInputData instanceof ManagePrescSer.DrugItemInputData &&
      GetResolveDefaultCompletedEvent instanceof Function
    ) {
      let objReqResolve: IPPMAManagePrescSer.CReqMsgGetResolveDefault =
        new IPPMAManagePrescSer.CReqMsgGetResolveDefault();
      objReqResolve.oContextInformation = Common.FillContext();
      objReqResolve.oDrugItemInputDataBC =
        PrescriptionHelper.GetIPPMADrugInputData(oDrugItemInputData);
      let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      objServiceProxy.GetResolveDefaultCompleted = (s, e) => {
        GetResolveDefaultCompletedEvent(s, e);
      };
      objServiceProxy.GetResolveDefaultAsync(objReqResolve);
      return true;
    } else return false;
  }
  public GetPrescriptionDetails(
    oPrescriptionItemInput: IPPMAManagePrescSer.PrescriptionItemInputData,
    GetPrescriptionDetailsCompletedEvent: Function
  ): boolean {
    if (
      oPrescriptionItemInput instanceof
        IPPMAManagePrescSer.PrescriptionItemInputData &&
      GetPrescriptionDetailsCompletedEvent instanceof Function
    ) {
      let oReqResolve: IPPMAManagePrescSer.CReqMsgGetIPPPrescriptionDetails =
        new IPPMAManagePrescSer.CReqMsgGetIPPPrescriptionDetails();
      oReqResolve.oContextInformation = Common.FillContext();
      oReqResolve.oPrescriptionItemInputDataBC = oPrescriptionItemInput;
      let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      objServiceProxy.GetIPPPrescriptionDetailsCompleted = (s, e) => {
        GetPrescriptionDetailsCompletedEvent(s, e);
      };
      objServiceProxy.GetIPPPrescriptionDetailsAsync(oReqResolve);
      return true;
    } else return false;
  }
  oItemDetailIPPMA: IPPMAManagePrescSer.PrescriptionItemDetails;
  //public delegate void FillPresItemDetailsDelegate();
  public FillPresItemDetailsEvent: Function;
  //public delegate void CancelDiscontinueRebindDelegate(long PrescItemOID);
  public CancelDiscontinueRebindDelegateEvent: Function;
  public FillAllDetails(
    PresItemDetail: IPPMAManagePrescSer.PrescriptionItemDetails,
    StartDTTM: DateTime,
    FirstAdmnSchTime: DateTime,
    Prevfirstscheduledatetime: DateTime,
    sStatPrevVMVPIdentifyingName: string,
    sStatPrevVMVPLorenzoID: string,
    cFollowUpOrStat: string = '\0',
    isRecordAdminDone: boolean = false,
    isLoadingDataForAmend: boolean = null,
    sOrdersetOID: number = 0
  ): void {
    this.oItemDetailIPPMA = PresItemDetail;
    if (this.FormViewerDetails == null) {
      this.FormViewerDetails = new FormViewerVM();
    }
    if (this.FormViewerDetails.PresItemDRCVM == null) {
      this.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
    }
    if (this.FormViewerDetails.BasicDetails == null) {
      this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
      this.IsGPConnectItem =
        this.ParentbaseVM != null &&
        this.ParentbaseVM.GpConnectMedicationItem != null &&
        !String.IsNullOrEmpty(
          this.ParentbaseVM.GpConnectMedicationItem.GPConnectID
        );
      this.GpConnectMedicationItem = this.ParentbaseVM.GpConnectMedicationItem;
      if (cFollowUpOrStat == 'F' && this.ParentbaseVM != null) {
        this.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT =
          this.ParentbaseVM.lUniqueRowIDForStatOrFollowup;
      }
    }
    if (
      ObjectHelper.HasValue(isLoadingDataForAmend) &&
      isLoadingDataForAmend.Value != null &&
      (this.ActionCode == ActivityTypes.Amend ||
        this.ActionCode == ActivityTypes.Reorder)
    ) {
      this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend =
        isLoadingDataForAmend.Value;
    } else {
      this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend = false;
    }
    this.FormViewerDetails.BasicDetails.isFormViewDataLoaded = true;
    this.FormViewerDetails.BasicDetails.InitializationAdminTimes();
    //this.FormViewerDetails.BasicDetails.ClinicallyVerified -= this.dlgClinicallyVerified;
    this.FormViewerDetails.BasicDetails.ClinicallyVerified =
      this.dlgClinicallyVerified;
    //this.FormViewerDetails.BasicDetails.ClinicallyAuthorised -= this.dlgClinicallyAuthorised;
    this.FormViewerDetails.BasicDetails.ClinicallyAuthorised =
      this.dlgClinicallyAuthorised;
    let lnIdentifyingOID: number = PresItemDetail.IdentifyingOID;
    let sIdentifyingType: string = PresItemDetail.IdentifyingType;
    this.FormViewerDetails.BasicDetails.IdentifyingOID = lnIdentifyingOID;
    this.FormViewerDetails.BasicDetails.IdentifyingType = sIdentifyingType;
    this.FormViewerDetails.BasicDetails.MCVersion = AppSessionInfo.AMCV;
    this.FormViewerDetails.BasicDetails.FollowUpStatLaunch = cFollowUpOrStat;
    if (
      this.ParentbaseVM != null &&
      this.ParentbaseVM.lUniqueRowIDForStatOrFollowup > 0 &&
      (this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S') ||
        this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('F'))
    )
      this.ParentUniqueRowID = this.ParentbaseVM.lUniqueRowIDForStatOrFollowup;
    this.FormViewerDetails.BasicDetails.IsRecordAdminDone = isRecordAdminDone;
    this.FormViewerDetails.BasicDetails.FollowUpStatStartDTTM = StartDTTM;
    this.FormViewerDetails.BasicDetails.FollowUpStatFirstAdmnSchTime =
      FirstAdmnSchTime;
    this.FormViewerDetails.BasicDetails.Firstscheduledatetime =
      Prevfirstscheduledatetime;
    this.FormViewerDetails.BasicDetails.itemSubType = PresItemDetail.ITMSUBTYP;
    this.FormViewerDetails.BasicDetails.RecordedadminDTTM =
      PresItemDetail.Recordadmindatetime;
    if (PresItemDetail != null && PresItemDetail.BasicProperties != null) {
      this.FormViewerDetails.BasicDetails.IsMultiRouteCheckedforAmend =
        PresItemDetail.BasicProperties.MultipleRouteType > 0 ? true : false;
      if (
        this.ActionCode == ActivityTypes.Prescribe &&
        PresItemDetail.BasicProperties.DRCdoseTypeLorenzoID != null
      ) {
        this.formViewerDetails.BasicDetails.IsDRCDoseTypeDefaulted = true;
        this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
          true;
        this.FormViewerDetails.BasicDetails.DRCDosetype =
          ObjectHelper.CreateObject(new CListItem(), {
            Value: PresItemDetail.BasicProperties.DRCdoseTypeLorenzoID.Code,
          });
        this.FormViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
          false;
      }
    }
    this.ParentVMVPName = PresItemDetail.VMVPIdentifyingName;
    this.ParentLorenzoID = PresItemDetail.VMVPLorenzoID;
    if (
      (cFollowUpOrStat.Equals('S') || cFollowUpOrStat.Equals('F')) &&
      this.ParentbaseVM != null &&
      this.ParentbaseVM.OrdersetStat != null &&
      !String.IsNullOrEmpty(this.ParentbaseVM.OrdersetStat.Value)
    ) {
      this.ParentVMVPName = sStatPrevVMVPIdentifyingName;
      this.ParentLorenzoID = sStatPrevVMVPLorenzoID;
      this.VMVPIdentifyingName = sStatPrevVMVPIdentifyingName;
      this.VMVPLorenzoID = sStatPrevVMVPLorenzoID;
    }
    if (PresItemDetail != null && PresItemDetail.BasicProperties != null) {
      this.CurrentDispenseStatus =
        PresItemDetail.BasicProperties.CurrentDispenseStatus;
    }
    let lnPrescriptionitemOID: number = 0;
    if (
      this.AlreadyPrescribedItemOID == 0 &&
      PresItemDetail.ReorderedFromclerkItemOID > 0
    )
      this.AlreadyPrescribedItemOID = PresItemDetail.ReorderedFromclerkItemOID;
    if (
      String.Compare(
        PresItemDetail.ITMSUBTYP,
        CConstants.SUBTYPE,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      lnPrescriptionitemOID = PresItemDetail.OID;
      if (
        this.FormViewerDetails.BasicDetails.IdentifyingOID !=
        CommonFlags.MCidentifyingOID
      )
        this.FormViewerDetails.BasicDetails.SIdentifyingoriginalname =
          PresItemDetail.IdentifyingName;
      else
        this.FormViewerDetails.BasicDetails.SIdentifyingoriginalname =
          String.Empty;
      if (
        String.Compare(
          PresItemDetail.LorenzoID,
          CommonFlags.MClorenzoid,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        this.FormViewerDetails.BasicDetails.isAdhocitem = true;
      } else {
        this.FormViewerDetails.BasicDetails.PreDefinedMCI = true;
      }
      if (PresItemDetail.PrescribableItemListIdnOID > 0)
        this.FormViewerDetails.BasicDetails.prescribableItemListIdnOID =
          PresItemDetail.PrescribableItemListIdnOID;
      else
        this.FormViewerDetails.BasicDetails.prescribableItemListIdnOID =
          PresItemDetail.OID;
    }
    if (PresItemDetail.IssIDSNewMeds == '1')
      this.FormViewerDetails.BasicDetails.IsIDSNewmeds = true;
    else this.FormViewerDetails.BasicDetails.IsIDSNewmeds = false;
    this.FormViewerDetails.BasicDetails.IndicationOverrideReason =
      PresItemDetail.IndicationOverrideReson;
    if (
      this.ActionCode == ActivityTypes.Prescribe &&
      this.FormViewerDetails.BasicDetails.Ordersets != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Ordersets.Value)
    ) {
      this.GetResolveDetails(
        lnIdentifyingOID,
        sIdentifyingType,
        AppSessionInfo.AMCV,
        cFollowUpOrStat,
        lnPrescriptionitemOID,
        this.FormViewerDetails.BasicDetails.Ordersets.Value
      );
    } else if (
      sOrdersetOID > 0 &&
      (this.ActionCode == ActivityTypes.Amend ||
        this.ActionCode == ActivityTypes.Reorder)
    ) {
      this.GetResolveDetails(
        lnIdentifyingOID,
        sIdentifyingType,
        AppSessionInfo.AMCV,
        cFollowUpOrStat,
        lnPrescriptionitemOID,
        sOrdersetOID.ToString()
      );
    } else {
      this.GetResolveDetails(
        lnIdentifyingOID,
        sIdentifyingType,
        AppSessionInfo.AMCV,
        cFollowUpOrStat,
        lnPrescriptionitemOID,
        String.Empty
      );
    }
  }
  OnRTEResult(args: RTEEventargs): void {
    if (String.IsNullOrEmpty(args.Request) || args.Result == null) return;
    if (
      String.Compare(
        args.Request,
        ValueDomain.ProductType,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this.dicProductType = new Dictionary<string, string>();
      (<List<CListItem>>args.Result).forEach((oCListItem) => {
        this.dicProductType.Add(oCListItem.Value, oCListItem.DisplayText);
      });
      this.SetDrugPropertyTooltip(this.ItemSubType);
    } else if (
      String.Compare(
        args.Request,
        ValueDomain.HoldReason,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this.ReasonForHold = new ObservableCollection<CListItem>();
      (<List<CListItem>>args.Result).forEach((oCListItem) => {
        this.ReasonForHold.Add(oCListItem);
      });
      this.ReasonForHold.Add(
        ObjectHelper.CreateObject(new CListItem(), {
          DisplayText: 'Other',
          Value: 'CC_Other',
        })
      );
    } else if (
      String.Compare(
        args.Request,
        ValueDomain.ConflictsReason,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this.FormViewerDetails.ConflictsReason =
        new ObservableCollection<CListItem>();
      if (this.FormViewerDetails.PresItemDRCVM != null)
        this.FormViewerDetails.PresItemDRCVM.MedDRCReasonList =
          new ObservableCollection<CListItem>();
      (<List<CListItem>>args.Result).forEach((oCListItem) => {
        this.FormViewerDetails.ConflictsReason.Add(oCListItem);
        if (this.FormViewerDetails.PresItemDRCVM != null)
          this.FormViewerDetails.PresItemDRCVM.MedDRCReasonList.Add(oCListItem);
      });
      this.Conflict_UpdWarning();
    }
  }
  OnRTEResultForDomainsCodes(args: RTEEventargs): void {
    if (String.IsNullOrEmpty(args.Request) || args.Result == null) return;
    if (args.Result instanceof Dictionary) {
      let objResult: Dictionary<string, List<CListItem>> = ObjectHelper.CreateType<Dictionary<string, List<CListItem>>>(args.Result,Dictionary<string, List<CListItem>>);
      if (
        String.Compare(
          args.Request,
          'CNFTY,SUBAG,SUBCI,SUBINT,SUBDP,BHVTY,MEDSVRTY',
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        WarningConceptCode.ConceptData =
          new ObservableCollection<CValuesetTerm>();
        objResult.forEach((objDomainDetail) => {
          (<List<CListItem>>objDomainDetail.Value).forEach((oCListItem) => {
            WarningConceptCode.ConceptData.Add(
              ObjectHelper.CreateObject(new CValuesetTerm(), {
                csCode: oCListItem.Value,
                csDescription: oCListItem.DisplayText,
              })
            );
          });
        });
        if (this.FormViewerDetails.ConflictsReason == null) {
          ProcessRTE.GetValuesByDomainCode(
            ValueDomain.ConflictsReason,
            (s, e) => {
              this.OnRTEResult(s);
            }
          );
        } else {
          this.Conflict_UpdWarning();
        }
      } else {        
         objResult.forEach((objDomainDetail) => {
          //Revisit Required
          objDomainDetail.Value = new List<CListItem>(objDomainDetail.Value);
          switch (objDomainDetail.Key) {
            case ValueDomain.MEDCATREASON:
              this.FillNonCatalogueReason(objDomainDetail.Value);
              break;
            case ValueDomain.TreatmentToContinue:
              this.LoadTreatmentToContinue(objDomainDetail.Value);
              break;
            case ValueDomain.ReasonForModification:
              this.LoadReasonForModificationValues(objDomainDetail.Value);
              break;
            case ValueDomain.MedClerkModificationReasons:
              this.LoadMedClerkModificationReasons(objDomainDetail.Value);
              break;
            case ValueDomain.Duration:
              this.LoadDuration(objDomainDetail.Value);
              break;
            case ValueDomain.ForAdminDoseType:
              this.LoadForAdminDoseType(objDomainDetail.Value);
              break;
            case ValueDomain.Month:
              this.LoadMonth(objDomainDetail.Value);
              break;
            case ValueDomain.SupplyInstruction:
              this.LoadSupplyInstruction(objDomainDetail.Value);
              break;
            case ValueDomain.EndorsementProperties:
              this.LoadEndorsementProperties(objDomainDetail.Value);
              break;
            case ValueDomain.InstallIns:
              this.LoadInstallIns(objDomainDetail.Value);
              break;
            case ValueDomain.DispensingInstruction:
              this.LoadDispensingInstruction(objDomainDetail.Value);
              break;
            case ValueDomain.ConflictsReason:
              this.LoadConflictsReason(objDomainDetail.Value, true);
              break;
            case ValueDomain.DRCACKREASON:
              this.LoadDRCAcknowledgeReason(objDomainDetail.Value);
              break;
            case ValueDomain.BHVTY:
            case ValueDomain.Contyp:
            case ValueDomain.DrugAllergy:
            case ValueDomain.DrugContra:
            case ValueDomain.DrugDuplication:
            case ValueDomain.Severity:
            case ValueDomain.SUBINT:
              this.LoadConflictsReason(objDomainDetail.Value, false);
              break;
            case ValueDomain.INFUSIONTYPE:
              this.FillInfusiontypes(objDomainDetail.Value);
              break;
            case ValueDomain.INFROUNDTO:
              this.FillInfusionRoundto(objDomainDetail.Value);
              break;
            case ValueDomain.DRCErrorCode:
              this.LoadDRCErrorCode(objDomainDetail.Value);
              break;
            case ValueDomain.TITRATEDDOSEINSTRUCTION:
              this.LoadTitratedInstructionList(objDomainDetail.Value);
              break;
          }
        });
      }
      this.FormViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify =
        false;
      this.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = false;
    }
  }
  drugProps: ObservableCollection<DrugProperty>;
  public GetDrugPropertyNote(
    DrugProp: ObservableCollection<DrugProperty>,
    itemsubtype: string
  ): void {
    this.drugProps = DrugProp;
    if (this.dicProductType == null) {
      ProcessRTE.GetValuesByDomainCode(ValueDomain.ProductType, (s, e) => {
        this.OnRTEResult(s);
      });
    } else {
      this.SetDrugPropertyTooltip(itemsubtype);
    }
  }
  private SetDrugPropertyTooltip(itemsubtype: string): void {
    let builder: StringBuilder = new StringBuilder();
    let drugProperties: string = String.Empty;
    let data: string = String.Empty;
    let ocproduct: string = String.Empty;
    let dicElemCount: number = this.dicProductType.Count();
    if (this.drugProps != null) {
      for (let fkey: number = 0; fkey < this.drugProps.Count; fkey++) {
        if (this.drugProps[fkey] != null) {
          if (
            this.drugProps[fkey] != null &&
            (String.Compare(this.drugProps[fkey].DrugName, 'CATALOGUEITEM') ==
              0 ||
              String.Compare(
                this.drugProps[fkey].DrugName,
                CConstants.ACTUALMOIETY
              ) == 0) &&
            !String.IsNullOrEmpty(this.drugProps[fkey].DrugPropertyCode) &&
            !String.IsNullOrEmpty(this.drugProps[fkey].VMChildCode) &&
            String.Compare(
              this.drugProps[fkey].VMChildCode,
              'CC_OCCRALLCHILD',
              StringComparison.CurrentCulture
            ) == 0
          ) {
            if (!this.drugProps[fkey].DrugPropertyCode.StartsWith('###')) {
              if (
                this.dicProductType.ContainsKey(
                  this.drugProps[fkey].DrugPropertyCode
                )
              ) {
                if (builder.Length > 0) {
                  builder.Append(', ');
                } else {
                  builder.Append(' ');
                }
                builder.Append(
                  this.dicProductType[this.drugProps[fkey].DrugPropertyCode]
                );
              }
            } else {
              data = this.drugProps[fkey].DrugPropertyCode.Replace(
                '###',
                'Formulary note'
              );
            }
          } else if (
            this.drugProps[fkey] != null &&
            String.Compare(this.drugProps[fkey].DrugName, 'CATALOGUEITEM') !=
              0 &&
            String.Compare(
              this.drugProps[fkey].DrugName,
              CConstants.ACTUALMOIETY
            ) != 0 &&
            !String.IsNullOrEmpty(this.drugProps[fkey].DrugPropertyCode)
          ) {
            if (!this.drugProps[fkey].DrugPropertyCode.StartsWith('###')) {
              if (
                this.dicProductType.ContainsKey(
                  this.drugProps[fkey].DrugPropertyCode
                )
              ) {
                if (builder.Length > 0) {
                  builder.Append(', ');
                } else {
                  builder.Append(' ');
                }
                builder.Append(
                  this.dicProductType[this.drugProps[fkey].DrugPropertyCode]
                );
              }
            } else {
              data = this.drugProps[fkey].DrugPropertyCode.Replace(
                '###',
                'Formulary note'
              );
            }
            if (
              !this.drugProps[fkey].DrugPropertyCode.StartsWith('###') &&
              String.Compare(
                this.drugProps[fkey].DrugPropertyCode,
                'CC_HIGHRISK'
              ) == 0 &&
              !String.IsNullOrEmpty(this.drugProps[fkey].HighRiskMsg)
            ) {
              builder.Append(' - ');
              builder.Append(this.drugProps[fkey].HighRiskMsg);
            }
          }
          if (
            !this.drugProps[fkey].DrugPropertyCode.StartsWith('###') &&
            String.Compare(
              this.drugProps[fkey].DrugPropertyCode,
              'CC_HIGHRISK'
            ) == 0 &&
            !String.IsNullOrEmpty(this.drugProps[fkey].HighRiskMsg) &&
            !String.IsNullOrEmpty(this.drugProps[fkey].VMChildCode) &&
            String.Compare(
              this.drugProps[fkey].VMChildCode,
              'CC_OCCRALLCHILD',
              StringComparison.CurrentCulture
            ) == 0
          ) {
            builder.Append(' - ');
            builder.Append(this.drugProps[fkey].HighRiskMsg);
          }
          if (
            !this.drugProps[fkey].DrugPropertyCode.StartsWith('###') &&
            this.drugProps[fkey] != null &&
            !String.IsNullOrEmpty(this.drugProps[fkey].VMChildCode) &&
            String.Compare(
              this.drugProps[fkey].VMChildCode,
              'CC_OCCRALLCHILD',
              StringComparison.CurrentCulture
            ) == 0 &&
            !String.IsNullOrEmpty(this.drugProps[fkey].DrugName) &&
            (String.Compare(
              this.drugProps[fkey].DrugName,
              'CATALOGUEITEM',
              StringComparison.CurrentCulture
            ) == 0 ||
              String.Compare(
                this.drugProps[fkey].DrugName,
                CConstants.ACTUALMOIETY,
                StringComparison.CurrentCulture
              ) == 0) &&
            (String.Compare(
              itemsubtype,
              CConstants.SUBTYPE,
              StringComparison.OrdinalIgnoreCase
            ) != 0 ||
              String.IsNullOrEmpty(itemsubtype))
          ) {
            builder.Append(' - ');
            ocproduct = 'All products';
            builder.Append(ocproduct);
          }
        }
      }
      drugProperties = builder.ToString();
      if (drugProperties.length > 0) {
        if (!String.IsNullOrEmpty(data)) {
          this.DrugPropertyNote = data + '\r\nProperties - ' + drugProperties;
        } else {
          this.DrugPropertyNote = 'Properties - ' + drugProperties;
        }
      } else {
        this.DrugPropertyNote = data;
      }
    }
  }
  private FillDaysOFWeeks(
    BasicProperties: IPPMAManagePrescSer.PresItemBasicProperties
  ): void {
    if (
      !String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) &&
      BasicProperties.FrequencyDetails != null &&
      !String.IsNullOrEmpty(BasicProperties.FrequencyDetails.FreqCode) &&
      String.Equals(
        BasicProperties.FrequencyDetails.FreqCode,
        'CC_MEDDRSN2',
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      BasicProperties.FrequencyDetails.DaysOfWeeks != null &&
      BasicProperties.FrequencyDetails.DaysOfWeeks.Count > 0
    ) {
      this.FormViewerDetails.BasicDetails.DaysOfWeekVisibility =
        Visibility.Visible;
      this.FormViewerDetails.BasicDetails.FrequencyLowEvent =
        BasicProperties.FrequencyDetails.FreqLowEvent;
      this.FormViewerDetails.BasicDetails.DrugFreqUOMCode = 'CC_MEDDRSN2';
      if (
        String.Equals(
          BasicProperties.FrequencyDetails.DaysOfWeeks[0],
          'T',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.FormViewerDetails.BasicDetails.IsSun = true;
      }
      if (
        String.Equals(
          BasicProperties.FrequencyDetails.DaysOfWeeks[1],
          'T',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.FormViewerDetails.BasicDetails.IsMon = true;
      }
      if (
        String.Equals(
          BasicProperties.FrequencyDetails.DaysOfWeeks[2],
          'T',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.FormViewerDetails.BasicDetails.IsTue = true;
      }
      if (
        String.Equals(
          BasicProperties.FrequencyDetails.DaysOfWeeks[3],
          'T',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.FormViewerDetails.BasicDetails.IsWed = true;
      }
      if (
        String.Equals(
          BasicProperties.FrequencyDetails.DaysOfWeeks[4],
          'T',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.FormViewerDetails.BasicDetails.IsThu = true;
      }
      if (
        String.Equals(
          BasicProperties.FrequencyDetails.DaysOfWeeks[5],
          'T',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.FormViewerDetails.BasicDetails.IsFri = true;
      }
      if (
        String.Equals(
          BasicProperties.FrequencyDetails.DaysOfWeeks[6],
          'T',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.FormViewerDetails.BasicDetails.IsSat = true;
      }
    }
  }
  public dtNow: DateTime = DateTime.MinValue;
  private GetPresItemDetails1(
    oItemDetail: IPPMAManagePrescSer.PrescriptionItemDetails,
    RTEResult?:any
  ): void {
    let _ErrorID: number = 80000029;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:PrescriptionItemVM, Method:GetPresItemDetails()';
    try {
      if (
        this.ActionCode == ActivityTypes.Amend ||
        this.ActionCode == ActivityTypes.Reorder
      ) {
        if (this.ActionCode == ActivityTypes.Amend) {
          this.IsFillGetPresItemDetail = true;
        }
        this.IsPrescriptionItemVMLoading = true;
        this.FormViewerDetails.BasicDetails.IsRecordedMedication = true;
      }
      let isMultipleRoutes: boolean = false;
      if (oItemDetail != null) {
        let IsDurationStopDateCanBeFilled: boolean = false;
        this.dtNow = CommonBB.GetServerDateTime();
        if (this.FormViewerDetails == null)
          this.FormViewerDetails = new FormViewerVM();
        if (this.FormViewerDetails.PresItemDRCVM == null)
          this.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
        if (this.FormViewerDetails.BasicDetails == null) {
          if (this.IsFormViewDataLoaded) {
            this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
            this.FormViewerDetails.BasicDetails.InfusionDetails =
              new InfusionVM(this.FormViewerDetails.BasicDetails);
            this.FormViewerDetails.BasicDetails.isFormViewDataLoaded = true;
            this.FormViewerDetails.BasicDetails.InitializationAdminTimes();
          } else {
            this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
            this.FormViewerDetails.BasicDetails.InfusionDetails =
              new InfusionVM(this.FormViewerDetails.BasicDetails);
          }
        }
        if (
          oItemDetail.BasicProperties != null &&
          !String.IsNullOrEmpty(oItemDetail.BasicProperties.PrescribingNote)
        ) {
          this.FormViewerDetails.BasicDetails.PrescribingNote =
            oItemDetail.BasicProperties.PrescribingNote;
          this.FormViewerDetails.BasicDetails.IsPrescribingNoteIconVisible =
            Visibility.Visible;
        }
        if (
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          oItemDetail.BasicProperties != null &&
          oItemDetail.BasicProperties.FrequencyDetails != null
        ) {
          if (
            this.ActionCode == ActivityTypes.Amend &&
            oItemDetail.BasicProperties.FrequencyDetails.Frequency != null &&
            !String.IsNullOrEmpty(
              oItemDetail.BasicProperties.FrequencyDetails.Frequency.Code
            ) &&
            oItemDetail.BasicProperties.FrequencyDetails.Frequency.Code.Contains(
              CConstants.IntervalFreq
            ) &&
            oItemDetail.BasicProperties.Direction != null &&
            !String.IsNullOrEmpty(oItemDetail.BasicProperties.Direction.Code) &&
            String.Equals(
              oItemDetail.BasicProperties.Direction.Code,
              'CC_MEDDIRECTION',
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            ProfileData.ScheduleConfig != null
          ) {
            if (ProfileData.ScheduleConfig.AdminTimeReqforPRN) {
              this.FormViewerDetails.BasicDetails.IsNoAdminTimeForPRN = false;
            } else {
              this.FormViewerDetails.BasicDetails.IsNoAdminTimeForPRN = true;
            }
          } else if (
            oItemDetail.BasicProperties.FrequencyDetails.PRNScheduledDet == '2'
          ) {
            this.FormViewerDetails.BasicDetails.IsNoAdminTimeForPRN = true;
          } else if (
            oItemDetail.BasicProperties.FrequencyDetails.PRNScheduledDet ==
              '1' ||
            oItemDetail.BasicProperties.FrequencyDetails.PRNScheduledDet == '0'
          ) {
            this.FormViewerDetails.BasicDetails.IsNoAdminTimeForPRN = false;
          }
        }
        if (
          this.ActionCode == ActivityTypes.Reorder &&
          (String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Leave,
              StringComparison.CurrentCultureIgnoreCase
            )) &&
          oItemDetail.PrescriptionBasicData != null &&
          String.Equals(
            oItemDetail.PrescriptionBasicData.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          IsDurationStopDateCanBeFilled = true;
        }
        if (
          IsDurationStopDateCanBeFilled &&
          oItemDetail.FormViewParameters != null &&
          oItemDetail.FormViewParameters.IntravenousInfusionData != null &&
          oItemDetail.FormViewParameters.IntravenousInfusionData
            .ParentPrescriptionItemOID > 0 &&
          oItemDetail.FormViewParameters.IntravenousInfusionData
            .InfusionSeqOrder > 0
        ) {
          IsDurationStopDateCanBeFilled = false;
        }
        if (
          this.ActionCode == ActivityTypes.Reorder &&
          oItemDetail.BasicProperties != null &&
          oItemDetail.BasicProperties.Dose != null &&
          oItemDetail.BasicProperties.Dose.DoseType != null &&
          !String.IsNullOrEmpty(
            oItemDetail.BasicProperties.Dose.DoseType.Code
          ) &&
          String.Equals(
            oItemDetail.BasicProperties.Dose.DoseType.Code,
            DoseTypeCode.TITRATED,
            StringComparison.OrdinalIgnoreCase
          ) &&
          (String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Leave,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.CurrentCultureIgnoreCase
            ))
        ) {
          IsDurationStopDateCanBeFilled = false;
        }
        if (
          oItemDetail != null &&
          oItemDetail.TechValidateDetails != null &&
          oItemDetail.TechValidateDetails.Count > 0 &&
          DateTime.NotEquals(oItemDetail.TechValidateDetails[0].ValidatedDTTM,
            DateTime.MinValue) &&
          this != null &&
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null
        ) {
          this.FormViewerDetails.BasicDetails.TechSupplyDTTM =
            oItemDetail.TechValidateDetails[0].ValidatedDTTM;
        }
        this.formViewerDetails.BasicDetails.Infused = oItemDetail.IsInfusion;
        //this.FormViewerDetails.BasicDetails.ClinicallyVerified -= this.dlgClinicallyVerified;
        this.FormViewerDetails.BasicDetails.ClinicallyVerified =
          this.dlgClinicallyVerified;
        //this.FormViewerDetails.BasicDetails.ClinicallyAuthorised -= this.dlgClinicallyAuthorised;
        this.FormViewerDetails.BasicDetails.ClinicallyAuthorised =
          this.dlgClinicallyAuthorised;
        if (
          this.FormViewerDetails.BasicDetails.FollowUpStatLaunch != 'F' &&
          this.FormViewerDetails.BasicDetails.FollowUpStatLaunch != 'S'
        ) {
          this.VMVPIdentifyingName = oItemDetail.VMVPIdentifyingName;
          this.ParentVMVPName = oItemDetail.VMVPIdentifyingName;
          this.VMVPLorenzoID = oItemDetail.VMVPLorenzoID;
        } else {
          if (String.IsNullOrEmpty(this.VMVPIdentifyingName)) {
            this.VMVPIdentifyingName = oItemDetail.VMVPIdentifyingName;
            this.ParentVMVPName = oItemDetail.VMVPIdentifyingName;
          }
          if (String.IsNullOrEmpty(this.VMVPLorenzoID))
            this.VMVPLorenzoID = oItemDetail.VMVPLorenzoID;
        }
        if (
          (this.ActionCode == ActivityTypes.Amend ||
            this.ActionCode == ActivityTypes.Reorder ||
            this.ActionCode == ActivityTypes.UnHold) &&
          !String.IsNullOrEmpty(this.VMVPIdentifyingName) &&
          !String.IsNullOrEmpty(this.VMVPLorenzoID)
        ) {
          this.FormViewerDetails.BasicDetails.PrescribedBrandName =
            oItemDetail.IdentifyingName;
          this.FormViewerDetails.BasicDetails.OriginalIdentifyingName =
            oItemDetail.IdentifyingName;
          this.FormViewerDetails.BasicDetails.IdentifyingName =
            this.VMVPIdentifyingName + ' - ' + oItemDetail.IdentifyingName;
        } else {
          this.FormViewerDetails.BasicDetails.IdentifyingName =
            oItemDetail.IdentifyingName;
          if (
            (this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
              'S'
            ) ||
              this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'F'
              )) &&
            (String.Equals(
              this.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.NONCATALOGUEITEM,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                this.FormViewerDetails.BasicDetails.IdentifyingType,
                CConstants.Precatalog,
                StringComparison.InvariantCultureIgnoreCase
              ))
          ) {
            this.FormViewerDetails.BasicDetails.IsEnabledNonCatalogItemName =
              false;
          }
        }
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.IdentifyingName
          ) &&
          this.actionCode == ActivityTypes.Prescribe &&
          !String.IsNullOrEmpty(this.ParentVMVPName)
        ) {
          let sIdentifyingName: string =
            this.FormViewerDetails.BasicDetails.IdentifyingName;
          this.FormViewerDetails.BasicDetails.OriginalIdentifyingName =
            sIdentifyingName;
          if (
            this.FormViewerDetails.BasicDetails.FollowUpStatLaunch != 'F' &&
            this.FormViewerDetails.BasicDetails.FollowUpStatLaunch != 'S'
          ) {
            this.FormViewerDetails.BasicDetails.IdentifyingName =
              this.ParentVMVPName + ' - ' + oItemDetail.IdentifyingName;
            this.FormViewerDetails.BasicDetails.BrandName = sIdentifyingName;
          } else {
            if (!String.IsNullOrEmpty(this.VMVPIdentifyingName))
              this.FormViewerDetails.BasicDetails.BrandName =
                sIdentifyingName.Replace(
                  this.VMVPIdentifyingName + ' - ',
                  String.Empty
                );
          }
        }
        this.FormViewerDetails.BasicDetails.IdentifyingOID =
          oItemDetail.IdentifyingOID;
        this.FormViewerDetails.BasicDetails.IdentifyingType =
          oItemDetail.IdentifyingType;
        if (
          this.formViewerDetails.BasicDetails.IsAuthorise &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          this.FormViewerDetails.BasicDetails.IndentifyingDrugName = null;
          if (this.PrescriptionItemStatus == null) {
            this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
              this.FormViewerDetails.BasicDetails.IdentifyingName +
              CConstants.sAuthoriseText;
          } else if (
            String.Equals(
              this.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
              this.FormViewerDetails.BasicDetails.IdentifyingName +
              CConstants.sAuthoriseText;
          }
        }
        if (
          this.formViewerDetails.BasicDetails.IsAuthorise &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
          this._bOtherAuthorise &&
          this.ActionCode == ActivityTypes.Prescribe
        ) {
          this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
            this.FormViewerDetails.BasicDetails.IdentifyingName +
            CConstants.sAuthoriseText;
        } else if (
          this.formViewerDetails.BasicDetails.IsAuthorise &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
          this._bOtherAuthorise &&
          this.PrescriptionItemStatus != null &&
          !String.Equals(
            this.PrescriptionItemStatus,
            CConstants.AWAITINGAUTHORISE,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
            this.FormViewerDetails.BasicDetails.IdentifyingName;
        }
        if (!String.IsNullOrEmpty(oItemDetail.OrderSentenceDesc))
          this.formViewerDetails.BasicDetails.OrderSentenceDesc =
            oItemDetail.OrderSentenceDesc;
        if (DateTime.NotEquals(PatientContext.EncounterStartDate, DateTime.MinValue)) {
          if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking) {
            this.FormViewerDetails.BasicDetails.RangeStartDTTM =
              PatientContext.EncounterStartDate.Date;
          }
          this.FormViewerDetails.BasicDetails.RangeEndDTTM =
            PatientContext.EncounterStartDate.AddYears(50);
        }
        if (
          this.ActionCode == ActivityTypes.Reorder &&
          this.DoseCalculationDetails != null &&
          this.IsDoseCalcPerformed &&
          DateTime.NotEquals(this.DoseCalculationDetails.CalculatedDTTM, DateTime.MinValue)&&
          MedicationCommonProfileData.PrescribeConfig != null &&
          MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
        ) {
          if (
            DateTime.GreaterThanOrEqualTo(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
          ) {
            if (
              DateTime.GreaterThan(PatientContext.PatientHeightDTTM,
                this.DoseCalculationDetails.CalculatedDTTM) &&
              !Common.IsClosedEncounter()
            ) {
              this.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
            } else {
              this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
            }
          } else if (
            DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
          ) {
            if (
              DateTime.GreaterThan(PatientContext.PatientWeightDTTM,
                this.DoseCalculationDetails.CalculatedDTTM) &&
              !Common.IsClosedEncounter()
            ) {
              this.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
            } else {
              this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
            }
          } else {
            this.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
          }
        }
        if (
          this.ActionCode == ActivityTypes.Amend &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          if (
            oItemDetail.BasicProperties != null &&
            DateTime.NotEquals(oItemDetail.BasicProperties.NextSupplyDTTM, DateTime.MinValue)
          ) {
            this.FormViewerDetails.BasicDetails.OriginalNextSupplyDate =
              oItemDetail.BasicProperties.NextSupplyDTTM;
            this.FormViewerDetails.BasicDetails.NextSupplyDate =
              oItemDetail.BasicProperties.NextSupplyDTTM;
          }
          if (
            oItemDetail.BasicProperties != null &&
            DateTime.NotEquals(oItemDetail.BasicProperties.FluidNextSupplyDTTM , DateTime.MinValue)
          ) {
            this.FormViewerDetails.BasicDetails.OriginalFluidNextSupplyDate =
              oItemDetail.BasicProperties.FluidNextSupplyDTTM;
            this.FormViewerDetails.BasicDetails.FluidNextSupplyDate =
              oItemDetail.BasicProperties.FluidNextSupplyDTTM;
          }
        }
        if (this.iSSupplyrequest == null)
          this.iSSupplyrequest = new ObservableCollection<CListItem>();
        if (
          this.iSSupplyrequest.Count == 0 &&
          DomainValuesForTechValidate.SupplyRequest != null &&
          DomainValuesForTechValidate.SupplyRequest.Count > 0
        ) {
          DomainValuesForTechValidate.SupplyRequest.forEach((objSupInfo) => {
            if (
              !String.Equals(
                objSupInfo.Value,
                CConstants.CancelSupplycode,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.iSSupplyrequest.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: objSupInfo.DisplayText,
                  Value: objSupInfo.Value,
                })
              );
            }
          });
        }
        let _DoseType: string = String.Empty;
        let IsSteppedVariableDose: boolean = false;
        if (
          oItemDetail.BasicProperties != null &&
          oItemDetail.BasicProperties.Dose != null &&
          oItemDetail.BasicProperties.Dose.DoseType != null &&
          !String.IsNullOrEmpty(oItemDetail.BasicProperties.Dose.DoseType.Code)
        ) {
          _DoseType = oItemDetail.BasicProperties.Dose.DoseType.Code;
        }
        if (
          !String.IsNullOrEmpty(_DoseType) &&
          (String.Equals(
            _DoseType,
            DoseTypeCode.STEPPED,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
            String.Equals(
              _DoseType,
              DoseTypeCode.VARIABLE,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              _DoseType,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.CurrentCultureIgnoreCase
            ))
        ) {
          IsSteppedVariableDose = true;
        }
        if (
          IsSteppedVariableDose &&
          this.actionCode == ActivityTypes.Amend &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend =
            false;
        }
        if (IsSteppedVariableDose && this.actionCode == ActivityTypes.Reorder) {
          if (!this.bIsReprescribe) {
            if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking) {
              this.FormViewerDetails.BasicDetails.IsGetPresItemSVDoseType =
                true;
            }
            this.FormViewerDetails.BasicDetails.StartDTTM =
              oItemDetail.StartDTTM;
            if (
              this.ActionCode == ActivityTypes.Reorder &&
              this.ParentbaseVM != null &&
              !String.IsNullOrEmpty(this.ParentbaseVM.ViewEncounterOID) &&
              !String.Equals(
                this.ParentbaseVM.ViewEncounterOID,
                PatientContext.EncounterOid.ToString(),
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.IsReorderStartDTTMBlankForDifEncounter =
                true;
            } else {
              this.FormViewerDetails.BasicDetails.IsReorderStartDTTMBlankForDifEncounter =
                false;
            }
          } else {
            this.FormViewerDetails.BasicDetails.StartDTTM = this.dtNow;
            this.FormViewerDetails.BasicDetails.IsRecalculateEndDTTMInReordeSV =
              true;
          }
        } else {
          if (DateTime.NotEquals(oItemDetail.StartDTTM ,DateTime.MinValue)) {
            if (DateTime.NotEquals(oItemDetail.StartDTTM, DateTime.MinValue)) {
              if (
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Clerking,
                  StringComparison.OrdinalIgnoreCase
                ) &&
                oItemDetail != null &&
                oItemDetail.AdditionalProperties != null &&
                String.IsNullOrEmpty(
                  oItemDetail.AdditionalProperties.DateCommenced
                )
              ) {
                this.FormViewerDetails.BasicDetails.StartDTTM =
                  DateTime.MinValue;
              } else if (
                this.ActionCode == ActivityTypes.Amend &&
                PatientContext.ClerkFormViewDefaultBehavior ==
                  ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
                oItemDetail != null &&
                oItemDetail.AdditionalProperties != null &&
                String.IsNullOrEmpty(
                  oItemDetail.AdditionalProperties.DateCommenced
                )
              ) {
                this.FormViewerDetails.BasicDetails.StartDTTM =
                  DateTime.MinValue;
              } else if (
                this.ActionCode == ActivityTypes.Amend &&
                this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo > 0
              ) {
                if (String.IsNullOrEmpty(this.OperationMode)) {
                  this.FormViewerDetails.BasicDetails.StartDTTM =
                    oItemDetail.StartDTTM;
                  this.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                    oItemDetail.StartDTTM;
                }
              } else if (
                this.ActionCode == ActivityTypes.Amend &&
                this.FormViewerDetails.BasicDetails.SequenceInfo != null &&
                this.FormViewerDetails.BasicDetails.SequenceInfo
                  .GroupSequenceNo > 0
              ) {
                if (String.IsNullOrEmpty(this.OperationMode)) {
                  this.FormViewerDetails.BasicDetails.StartDTTM =
                    oItemDetail.StartDTTM;
                  this.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                    oItemDetail.StartDTTM;
                }
              } else {
                this.FormViewerDetails.BasicDetails.StartDTTM =
                  oItemDetail.StartDTTM;
                this.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                  oItemDetail.StartDTTM;
              }
            }
          }
        }
        this.FormViewerDetails.BasicDetails.OrginalStartDTTM =
          oItemDetail.StartDTTM;
        if (this.FormViewerDetails.BasicDetails.oOriginalValues == null)
          this.FormViewerDetails.BasicDetails.oOriginalValues =
            new OriginalValues();
        this.FormViewerDetails.BasicDetails.oOriginalValues.StartDTTM =
          oItemDetail.StartDTTM;
        this.FormViewerDetails.BasicDetails.AmendOrginalStartDTTM =
          oItemDetail.StartDTTM;
        if (oItemDetail.PrescriptionBasicData != null) {
          this.SourcePrescriptionType =
            oItemDetail.PrescriptionBasicData.PrescriptionType;
          this.SourceEncounter = oItemDetail.PrescriptionBasicData.EncounterOID;
        }
        if (
          this.ActionCode != ActivityTypes.Reorder ||
          (this.ActionCode == ActivityTypes.Reorder &&
            !String.IsNullOrEmpty(this.sourcePrescriptionType) &&
            ((IsSteppedVariableDose &&
              !String.Equals(
                this.sourcePrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.InvariantCultureIgnoreCase
              )) ||
              String.Equals(
                this.sourcePrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.InvariantCultureIgnoreCase
              )))
        ) {
          this.FormViewerDetails.BasicDetails.EndDTTM = oItemDetail.EndDTTM;
          this.FormViewerDetails.BasicDetails.OrginalEndDTTM =
            oItemDetail.EndDTTM;
          this.FormViewerDetails.BasicDetails.StopDate = oItemDetail.EndDTTM;
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime =
            oItemDetail.EndDTTM;
        } else {
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime =
            DateTime.MinValue;
        }
        this.FormViewerDetails.BasicDetails.bIsAmend =
          oItemDetail.PrescriptionOID > 0 &&
          this.ActionCode == ActivityTypes.Amend
            ? true
            : false;
        this.UniqueRowID = oItemDetail.UniqueID;
        this.IsDrugApprovalRequired = oItemDetail.IsDrugApprovalRequired;
        this.FormViewerDetails.BasicDetails.MCVersion = AppSessionInfo.AMCV;
        if (
          !String.Equals(
            oItemDetail.MCVersionNo,
            AppSessionInfo.AMCV,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.FormViewerDetails.BasicDetails.OriginalMCVersion =
            oItemDetail.MCVersionNo;
        }
        if (oItemDetail.FormularyOID > 0) {
          this.FormularyOID = oItemDetail.FormularyOID;
        }
        this.PrescribableItemOID = oItemDetail.IdentifyingOID;
        this.PrescriptionOID = oItemDetail.PrescriptionOID;
        this.PrescriptionItemOID = oItemDetail.OID;
        this.PrescribableItemDetailOID = oItemDetail.OID;
        if (
          String.Equals(
            oItemDetail.IsAccessContraint,
            '1',
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.PrescribableItemDetailOID = oItemDetail.PrescribableItemListOID;
        }
        this.PrescriptionItemNumber = oItemDetail.PrescriptionItemNumber;
        this.LastModifiedAt = oItemDetail.LastModifiedAt;
        if (
          this.ActionCode == ActivityTypes.Amend &&
          oItemDetail.AdditionalProperties != null &&
          oItemDetail.AdditionalProperties.AdminMethod != null &&
          !String.IsNullOrEmpty(
            oItemDetail.AdditionalProperties.AdminMethod.Name
          )
        ) {
          this.FormViewerDetails.BasicDetails.IsPrescribedWithAdminMethod =
            true;
        }
        if (oItemDetail.PrecriptionItem != null) {
          this.PrescriptionItem = oItemDetail.PrecriptionItem;
        }
        this.IsAccessContraint = oItemDetail.IsAccessContraint;
        this.IsPrescribeByBrand = oItemDetail.IsPrescribeByBrand;
        if (String.IsNullOrEmpty(this.LorenzoID)) {
          this.LorenzoID = oItemDetail.LorenzoID;
        }
        if (
          String.Equals(
            oItemDetail.IsAccessContraint,
            '1',
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.FormViewerDetails.PresItemDetailLzoID =
            oItemDetail.PresItemDetailLzoID;
        }
        if (!String.IsNullOrEmpty(oItemDetail.FormularyNote)) {
          let arrNotes: string[] = oItemDetail.FormularyNote.Split('*');
          if (!String.IsNullOrEmpty(arrNotes[0]))
            this.FormularyNote = 'Formulary note - ' + arrNotes[0];
        }
        if (String.IsNullOrEmpty(this.ItemMainType)) {
          if (
            oItemDetail != null &&
            oItemDetail.BasicProperties != null &&
            oItemDetail.BasicProperties.ItemType != null
          ) {
            this.ItemMainType = oItemDetail.BasicProperties.ItemType;
          } else {
            this.ItemMainType = oItemDetail.ItemType;
          }
        }
        if (String.IsNullOrEmpty(this.ItemSubType)) {
          if (
            oItemDetail != null &&
            oItemDetail.BasicProperties != null &&
            oItemDetail.BasicProperties.ItemSubType != null
          ) {
            this.ItemSubType = oItemDetail.BasicProperties.ItemSubType;
          } else {
            this.ItemSubType = oItemDetail.ITMSUBTYP;
          }
        }
        if (
          String.IsNullOrEmpty(this.MCIItemDisplay) ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.mCIItemDisplay
          )
        ) {
          if (!String.IsNullOrEmpty(oItemDetail.MCIItemDisplay)) {
            this.MCIItemDisplay = oItemDetail.MCIItemDisplay;
            this.FormViewerDetails.BasicDetails.mCIItemDisplay =
              oItemDetail.MCIItemDisplay;
          }
        }
        if (!String.IsNullOrEmpty(oItemDetail.MCPrepStatusCode)) {
          this.FormViewerDetails.BasicDetails.PrepStatus =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: oItemDetail.MCPrepStatusCode,
              Value: oItemDetail.MCPrepStatusCode,
            });
        }
        if (!String.IsNullOrEmpty(oItemDetail.MCPrepStatusCode)) {
          this.PreparationStatus = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oItemDetail.MCPrepStatusCode,
            Value: oItemDetail.MCPrepStatusCode,
          });
        }
        if (
          this.FormViewerDetails.BasicDetails.PrepStatus == null &&
          !String.IsNullOrEmpty(oItemDetail.PreparationStatus)
        ) {
          this.FormViewerDetails.BasicDetails.PrepStatus =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: oItemDetail.PreparationStatus,
              Value: oItemDetail.PreparationStatus,
            });
        }
        if (
          this.PreparationStatus == null &&
          !String.IsNullOrEmpty(oItemDetail.PreparationStatus)
        ) {
          this.PreparationStatus = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oItemDetail.PreparationStatus,
            Value: oItemDetail.PreparationStatus,
          });
        }
        let ActionCode: string = String.Empty;
        if (this.ActionCode != null) {
          ActionCode = Convert.ToString(this.ActionCode);
        }
        if (
          oItemDetail != null &&
          oItemDetail.ActionPerformed != null &&
          oItemDetail.ActionPerformed.HoldReason != null &&
          !String.Equals(
            ActionCode,
            CAActivity.CA_UNHOLD,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.HoldReason = oItemDetail.ActionPerformed.HoldReason;
        }
        if (
          oItemDetail != null &&
          !String.IsNullOrEmpty(oItemDetail.PrescriberOBHName)
        ) {
          this.PrescriberOBHName = oItemDetail.PrescriberOBHName;
        }
        if (oItemDetail.PrescriberDetails != null) {
          this.PrescriberDetails = ObjectHelper.CreateObject(new ObjectInfo(), {
            Code: oItemDetail.PrescriberDetails.Code,
            EPRFilterList: oItemDetail.PrescriberDetails.EPRFilterList,
            LastModifiedAt: oItemDetail.PrescriberDetails.LastModifiedAt,
            Name: AppContextInfo.UserName,
            OID: oItemDetail.PrescriberDetails.OID,
            OperationMode: oItemDetail.PrescriberDetails.OperationMode,
            RoleProfileOID: oItemDetail.PrescriberDetails.RoleProfileOID,
            SealImage: oItemDetail.PrescriberDetails.SealImage,
            SealImageList: oItemDetail.PrescriberDetails.SealImageList,
            SealRecordList: oItemDetail.PrescriberDetails.SealRecordList,
            SealType: oItemDetail.PrescriberDetails.SealType,
          });
          if (!String.IsNullOrEmpty(oItemDetail.PrescriberRoleName))
            this.PrescribedByWithRoleName =
              oItemDetail.PrescriberDetails.Code +
              ' - ' +
              oItemDetail.PrescriberRoleName;
          else
            this.PrescribedByWithRoleName = oItemDetail.PrescriberDetails.Code;
        }
        if (
          this.ActionCode == ActivityTypes.Amend &&
          oItemDetail != null &&
          oItemDetail.PrescriberDetails != null &&
          oItemDetail.PrescriberDetails.Code != null
        ) {
          this.FormViewerDetails.BasicDetails.PrescribedByWithRoleName =
            oItemDetail.PrescriberDetails.Code;
        } else {
          this.FormViewerDetails.BasicDetails.PrescribedByWithRoleName =
            AppContextInfo.UserName;
        }
        if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenu,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            oItemDetail.PrescriberDetails != null &&
            oItemDetail.PrescriberDetails.Code != null
          )
            this.FormViewerDetails.BasicDetails.PrescribedByWithRoleName =
              oItemDetail.PrescriberDetails.Code;
        }
        this.PrescriptionItemNumber = oItemDetail.PrescriptionItemNumber;
        this.PrescriptionNumber = oItemDetail.PrescriptionNumber;
        if (oItemDetail.PrescriptionBasicData != null)
          this.PrescriptionDTTM =
            oItemDetail.PrescriptionBasicData.PrescriptionDTTM;
        this.SourcePresOid = oItemDetail.PrescriptionOID;
        this.SourcePrescriptionOid = oItemDetail.OID;
        if (!String.IsNullOrEmpty(oItemDetail.NonCatItemReason)) {
          this.FormViewerDetails.BasicDetails.NONCatalogueReason =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: oItemDetail.NonCatItemReason,
              Value: oItemDetail.NonCatItemReason,
            });
        }
        if (oItemDetail.BasicProperties != null) {
          if (
            oItemDetail.BasicProperties.Route != null &&
            (!String.IsNullOrEmpty(oItemDetail.BasicProperties.Route.Name) ||
              oItemDetail.BasicProperties.Route.OID > 0)
          ) {
            this.FormViewerDetails.BasicDetails.Route =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: MedicationCommonBB.RouteName(
                  oItemDetail.BasicProperties.Route.Name
                ),
                Value: MedicationCommonBB.RouteOID(
                  oItemDetail.BasicProperties.Route.Name
                ),
                Tag: MedicationCommonBB.RouteTag(
                  oItemDetail.BasicProperties.Route.Name
                ),
                IsSelected: true,
              });
            if (
              oItemDetail.BasicProperties.MultipleRouteType > 0 &&
              this.ActionCode == ActivityTypes.Prescribe
            ) {
              if (
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.OrdinalIgnoreCase
                ) &&
                this.FormViewerDetails.BasicDetails.IsAllowMultiRoute
              ) {
                this.FormViewerDetails.BasicDetails.IsMultiRouteCheckedforAmend =
                  true;
              } else {
                this.FormViewerDetails.BasicDetails.IsDOSMultipleRouteType =
                  true;
              }
            }
            if (
              this.ActionCode == ActivityTypes.Amend ||
              this.ActionCode == ActivityTypes.Reorder ||
              this.FormViewerDetails.BasicDetails.IsMultiRouteCheckedforAmend
            ) {
              this.FormViewerDetails.BasicDetails.RouteSelected =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: MedicationCommonBB.RouteName(
                    oItemDetail.BasicProperties.Route.Name
                  ),
                  Value: MedicationCommonBB.RouteOID(
                    oItemDetail.BasicProperties.Route.Name
                  ),
                  Tag: MedicationCommonBB.RouteTag(
                    oItemDetail.BasicProperties.Route.Name
                  ),
                  IsSelected: true,
                });
            }
            this.FormViewerDetails.BasicDetails.OriginalRoute =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: MedicationCommonBB.RouteName(
                  oItemDetail.BasicProperties.Route.Name
                ),
                Value: MedicationCommonBB.RouteOID(
                  oItemDetail.BasicProperties.Route.Name
                ),
                Tag: MedicationCommonBB.RouteTag(
                  oItemDetail.BasicProperties.Route.Name
                ),
                IsSelected: true,
              });
            if (
              !String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) &&
              !String.IsNullOrEmpty(oItemDetail.BasicProperties.Route.Name) &&
              oItemDetail.BasicProperties.Route.Name.Contains('|') &&
              !String.IsNullOrEmpty(oItemDetail.IsInfusion) &&
              String.Equals(
                oItemDetail.IsInfusion,
                '1',
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.Route = null;
              oItemDetail.FormViewParameters.INFTYCODE = String.Empty;
              oItemDetail.FormViewParameters.IntravenousInfusionData = null;
            }
          }
          if (
            oItemDetail.BasicProperties.MultipleRouteType > 0 &&
            this.ActionCode == ActivityTypes.Prescribe
          ) {
            if (
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) &&
              this.FormViewerDetails.BasicDetails.IsAllowMultiRoute
            ) {
              this.FormViewerDetails.BasicDetails.IsMultiRouteCheckedforAmend =
                true;
            } else {
              this.FormViewerDetails.BasicDetails.IsDOSMultipleRouteType = true;
            }
          }
          if (
            oItemDetail.BasicProperties.Route != null &&
            (!String.IsNullOrEmpty(oItemDetail.BasicProperties.Route.Name) ||
              oItemDetail.BasicProperties.Route.OID > 0)
          ) {
            this.FormViewerDetails.BasicDetails.RouteRecorded =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: MedicationCommonBB.RouteName(
                  oItemDetail.BasicProperties.Route.Name
                ),
                Value: MedicationCommonBB.RouteOID(
                  oItemDetail.BasicProperties.Route.Name
                ),
                IsSelected: true,
              });
          }
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            ) &&
            this.FormViewerDetails.BasicDetails.IsAllowMultiRoute
          ) {
            if (
              oItemDetail != null &&
              oItemDetail.BasicProperties != null &&
              oItemDetail.BasicProperties.Route != null
            ) {
              if (
                this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
                this.FormViewerDetails.BasicDetails.DefaultDetails.Routes !=
                  null &&
                this.FormViewerDetails.BasicDetails.DefaultDetails.Routes
                  .Count > 0
              ) {
                let nCount: number =
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Routes
                    .Count;
                let tempRoutesColl: ObservableCollection<CListItem> =
                  new ObservableCollection<CListItem>();
                tempRoutesColl = MedicationCommonBB.Routes(
                  oItemDetail.BasicProperties.Route.Name
                );
                if (tempRoutesColl.Count > 1) {
                  isMultipleRoutes = true;
                }
                tempRoutesColl.forEach((oDispens) => {
                  for (let i: number = 0; i < nCount; i++) {
                    if (
                      String.Equals(
                        this.FormViewerDetails.BasicDetails.DefaultDetails
                          .Routes[i].Value,
                        Convert.ToString(oDispens.Value),
                        StringComparison.OrdinalIgnoreCase
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.DefaultDetails.Routes[
                        i
                      ].IsSelected = true;
                      break;
                    }
                  }
                });
                if (
                  this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Routes !=
                    null &&
                  tempRoutesColl != null &&
                  tempRoutesColl.Count > 1
                ) {
                  this.FormViewerDetails.BasicDetails.Route =
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: MedicationCommonBB.RouteName(
                        tempRoutesColl.ToArray()
                      ),
                      Value: MedicationCommonBB.RouteOID(
                        tempRoutesColl.ToArray()
                      ),
                      Tag: MedicationCommonBB.RouteTag(
                        tempRoutesColl.ToArray()
                      ),
                    });
                }
              } else if (this.ActionCode == ActivityTypes.Prescribe) {
                let tempRoutesColl: ObservableCollection<CListItem> =
                  new ObservableCollection<CListItem>();
                tempRoutesColl = MedicationCommonBB.Routes(
                  oItemDetail.BasicProperties.Route.Name
                );
                if (tempRoutesColl.Count > 1) {
                  isMultipleRoutes = true;
                }
              }
            }
          }
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            )
          ) {
            if (
              this != null &&
              this.FormViewerDetails != null &&
              this.FormViewerDetails.BasicDetails != null &&
              this.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
                Visibility.Visible
            ) {
              if (oItemDetail != null) {
                this.FormViewerDetails.BasicDetails.IsReviewAlert =
                  String.Equals(
                    (<IPPMAManagePrescSer.PresItemBasicProperties>(
                      oItemDetail.BasicProperties
                    )).IsReviewAlertShown,
                    '1'
                  )
                    ? true
                    : false;
                if (
                  oItemDetail.AdditionalProperties != null &&
                  oItemDetail.AdditionalProperties.ManageReviewDetail != null
                ) {
                  this.FormViewerDetails.BasicDetails.ManageReviewDetail =
                    oItemDetail.AdditionalProperties.ManageReviewDetail;
                }
              }
              let objService: IPPMAManagePrescSer.IPPPresItemBasicProperties =
                ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
                  oItemDetail.BasicProperties,
                  IPPMAManagePrescSer.IPPPresItemBasicProperties
                );
              if (
                this.ActionCode == ActivityTypes.Amend &&
                DateTime.NotEquals(objService.ReviewAfterDTTM, DateTime.MinValue)
              ) {
                this.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
                  objService.ReviewAfterDTTM;
                if (
                  DateTime.NotEquals(this.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
                  DateTime.MinValue)
                ) {
                  let IsDST: boolean, IsAmbiguous, IsInvalid;
                  this.FormViewerDetails.BasicDetails.ReviewAfterDateTime =
                    this.FormViewerDetails.BasicDetails.ReviewAfterDTTM.ConvertToUser(
                      (o1) => {
                        IsDST = o1;
                      },
                      (o2) => {
                        IsAmbiguous = o2;
                      },
                      (o3) => {
                        IsInvalid = o3;
                      }
                    ).ToDateTimeString(
                      IsDST,
                      IsAmbiguous,
                      CConstants.DateHMFormat
                    );
                  this.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
                    Visibility.Visible;
                  if (
                    String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.currentItemReviewafter
                    )
                  )
                    this.FormViewerDetails.BasicDetails.currentItemReviewafter =
                      String.Empty;
                  this.FormViewerDetails.BasicDetails.currentItemReviewafter =
                    objService.ReviewAfter;
                  if (
                    oItemDetail.AdditionalProperties != null &&
                    oItemDetail.AdditionalProperties.ManageReviewDetail !=
                      null &&
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail != null &&
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewAfterUOM != null
                  ) {
                    this.FormViewerDetails.BasicDetails.currentItemReviewafterUOM =
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: objService.ReviewAfterUOM.Name,
                        Value: objService.ReviewAfterUOM.Code,
                      });
                  }
                  this.FormViewerDetails.BasicDetails.LastReviewedDTTM =
                    objService.ReviewAfterDTTM;
                }
                if (
                  oItemDetail.AdditionalProperties != null &&
                  oItemDetail.AdditionalProperties.ManageReviewDetail != null &&
                  oItemDetail.AdditionalProperties.ManageReviewDetail
                    .oReviewAfterDetail != null
                ) {
                  this.FormViewerDetails.BasicDetails.ReviewRequestComments =
                    oItemDetail.AdditionalProperties.ManageReviewDetail.oReviewAfterDetail.ReviewRequestComments;
                }
                this.FormViewerDetails.BasicDetails.ReviewAfterIconVisible =
                  Visibility.Visible;
                this.CheckReviewAfterManadatory();
                let IsDSTs: boolean, IsAmbiguouss, IsInvalids;
                if (
                  oItemDetail != null &&
                  oItemDetail.AdditionalProperties != null &&
                  oItemDetail.AdditionalProperties.ManageReviewDetail != null &&
                  oItemDetail.AdditionalProperties.ManageReviewDetail
                    .oReviewAfterDetail != null &&
                    DateTime.NotEquals(oItemDetail.AdditionalProperties.ManageReviewDetail
                    .oReviewAfterDetail.ReviewDueDTTM, DateTime.MinValue) &&
                  !String.IsNullOrEmpty(
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewRequestComments
                  ) &&
                  !String.IsNullOrEmpty(
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewRequestedBy
                  )
                ) {
                  if (
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewType != null &&
                    !String.IsNullOrEmpty(
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewType.Code
                    ) &&
                    String.Equals(
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewType.Code,
                      CConstants.GenReview,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.ReviewAfterIconTooltip =
                      Resource.Infusion.ReviewAfterIconDue_Tooltip +
                      oItemDetail.AdditionalProperties.ManageReviewDetail.oReviewAfterDetail.ReviewDueDTTM.ConvertToUser(
                        (o1) => {
                          IsDSTs = o1;
                        },
                        (o2) => {
                          IsAmbiguouss = o2;
                        },
                        (o3) => {
                          IsInvalids = o3;
                        }
                      ).ToDateTimeString(
                        IsDSTs,
                        IsAmbiguouss,
                        CConstants.DateHMFormat
                      ) +
                      Environment.NewLine +
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewRequestComments +
                      Environment.NewLine +
                      Resource.Infusion.ReviewAfterIconRequester_Tooltip +
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewRequestedBy +
                      Environment.NewLine +
                      Resource.Infusion.ReviewAfterIconClick_Tooltip;
                  } else if (
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewType != null &&
                    !String.IsNullOrEmpty(
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewType.Code
                    ) &&
                    String.Equals(
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewType.Code,
                      CConstants.OmitDosReview,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.ReviewAfterIconTooltip =
                      Resource.Infusion.ReviewAfterIconOmit_Tooltip +
                      oItemDetail.AdditionalProperties.ManageReviewDetail.oReviewAfterDetail.ReviewDueDTTM.ConvertToUser(
                        (o1) => {
                          IsDSTs = o1;
                        },
                        (o2) => {
                          IsAmbiguouss = o2;
                        },
                        (o3) => {
                          IsInvalids = o3;
                        }
                      ).ToDateTimeString(
                        IsDSTs,
                        IsAmbiguouss,
                        CConstants.DateHMFormat
                      ) +
                      Environment.NewLine +
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewRequestComments +
                      Environment.NewLine +
                      Resource.Infusion.ReviewAfterIconRequester_Tooltip +
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewRequestedBy +
                      Environment.NewLine +
                      Resource.Infusion.ReviewAfterIconClick_Tooltip;
                  }
                } else if (
                  oItemDetail != null &&
                  oItemDetail.AdditionalProperties != null &&
                  oItemDetail.AdditionalProperties.ManageReviewDetail != null &&
                  oItemDetail.AdditionalProperties.ManageReviewDetail
                    .oReviewAfterDetail != null &&
                    DateTime.NotEquals(oItemDetail.AdditionalProperties.ManageReviewDetail
                    .oReviewAfterDetail.ReviewDueDTTM, DateTime.MinValue) &&
                  String.IsNullOrEmpty(
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewRequestComments
                  ) &&
                  !String.IsNullOrEmpty(
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewRequestedBy
                  )
                ) {
                  if (
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewType != null &&
                    !String.IsNullOrEmpty(
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewType.Code
                    ) &&
                    String.Equals(
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewType.Code,
                      CConstants.GenReview,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.ReviewAfterIconTooltip =
                      Resource.Infusion.ReviewAfterIconDue_Tooltip +
                      oItemDetail.AdditionalProperties.ManageReviewDetail.oReviewAfterDetail.ReviewDueDTTM.ConvertToUser(
                        (o1) => {
                          IsDSTs = o1;
                        },
                        (o2) => {
                          IsAmbiguouss = o2;
                        },
                        (o3) => {
                          IsInvalids = o3;
                        }
                      ).ToDateTimeString(
                        IsDSTs,
                        IsAmbiguouss,
                        CConstants.DateHMFormat
                      ) +
                      Environment.NewLine +
                      Resource.Infusion.ReviewAfterIconRequester_Tooltip +
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewRequestedBy +
                      Environment.NewLine +
                      Resource.Infusion.ReviewAfterIconClick_Tooltip;
                  } else if (
                    oItemDetail.AdditionalProperties.ManageReviewDetail
                      .oReviewAfterDetail.ReviewType != null &&
                    !String.IsNullOrEmpty(
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewType.Code
                    ) &&
                    String.Equals(
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewType.Code,
                      CConstants.OmitDosReview,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.ReviewAfterIconTooltip =
                      Resource.Infusion.ReviewAfterIconOmit_Tooltip +
                      oItemDetail.AdditionalProperties.ManageReviewDetail.oReviewAfterDetail.ReviewDueDTTM.ConvertToUser(
                        (o1) => {
                          IsDSTs = o1;
                        },
                        (o2) => {
                          IsAmbiguouss = o2;
                        },
                        (o3) => {
                          IsInvalids = o3;
                        }
                      ).ToDateTimeString(
                        IsDSTs,
                        IsAmbiguouss,
                        CConstants.DateHMFormat
                      ) +
                      Environment.NewLine +
                      Resource.Infusion.ReviewAfterIconRequester_Tooltip +
                      oItemDetail.AdditionalProperties.ManageReviewDetail
                        .oReviewAfterDetail.ReviewRequestedBy +
                      Environment.NewLine +
                      Resource.Infusion.ReviewAfterIconClick_Tooltip;
                  }
                }
              }
            } else {
              if (oItemDetail != null && oItemDetail.BasicProperties != null) {
                let objService: IPPMAManagePrescSer.IPPPresItemBasicProperties =
                  ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
                    oItemDetail.BasicProperties,
                    IPPMAManagePrescSer.IPPPresItemBasicProperties
                  );
                if (
                  this.ActionCode == ActivityTypes.Amend &&
                  DateTime.NotEquals(objService.ReviewAfterDTTM, DateTime.MinValue)
                ) {
                  this.FormViewerDetails.BasicDetails.IsReviewAvailableBeforeSequence =
                    true;
                }
              }
            }
          }
          if (
            this.ActionCode == ActivityTypes.Prescribe &&
            oItemDetail.BasicProperties != null &&
            oItemDetail.BasicProperties.DRCdoseTypeLorenzoID != null
          ) {
            if (!this.FormViewerDetails.BasicDetails.IsDRCDoseTypeDefaulted) {
              this.FormViewerDetails.BasicDetails.DRCDosetype =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: oItemDetail.BasicProperties.DRCdoseTypeLorenzoID.Code,
                });
            } else {
              this.FormViewerDetails.BasicDetails.IsDRCDoseTypeDefaulted =
                false;
            }
          } else if (
            this.ActionCode == ActivityTypes.Amend &&
            oItemDetail.BasicProperties.DRCdoseTypeLorenzoID != null &&
            !String.IsNullOrEmpty(
              oItemDetail.BasicProperties.DRCdoseTypeLorenzoID.Code
            )
          ) {
            let oSelectedDRCDoseType: CListItem = ObjectHelper.CreateObject(
              new CListItem(),
              { Value: oItemDetail.BasicProperties.DRCdoseTypeLorenzoID.Code }
            );
            if (
              this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
              this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes !=
                null &&
              this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes
                .Count > 0
            ) {
              if (
                String.Equals(
                  oSelectedDRCDoseType.Value,
                  DRCDoseTypes.Single,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                String.Equals(
                  oSelectedDRCDoseType.Value,
                  DRCDoseTypes.Maintenance,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ) {
                this.FormViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
                  true;
                this.FormViewerDetails.BasicDetails.DRCDosetype =
                  this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
                    (c) =>
                      String.Equals(
                        c.Value,
                        DRCDoseTypes.Systemdefined,
                        StringComparison.InvariantCultureIgnoreCase
                      )
                  ).FirstOrDefault();
              } else {
                this.FormViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
                  true;
                this.FormViewerDetails.BasicDetails.DRCDosetype =
                  this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
                    (c) =>
                      String.Equals(
                        c.Value,
                        oSelectedDRCDoseType.Value,
                        StringComparison.InvariantCultureIgnoreCase
                      )
                  ).FirstOrDefault();
              }
            }
            this.FormViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
              false;
            this.FormViewerDetails.BasicDetails.OriginalDRCDoseType =
              this.FormViewerDetails.BasicDetails.DRCDosetype;
          }
          if (
            this.ActionCode == ActivityTypes.Amend &&
            oItemDetail.BasicProperties != null &&
            oItemDetail.BasicProperties.PresItemEncounter != null &&
            oItemDetail.BasicProperties.PresItemEncounter.OID > 0
          ) {
            this.FormViewerDetails.BasicDetails.PresItemEncounterDetail =
              ObjectHelper.CreateObject(new CListItem(), {
                Value:
                  oItemDetail.BasicProperties.PresItemEncounter.OID.ToString(),
                DisplayText: oItemDetail.BasicProperties.PresItemEncounter.Code,
              });
            if (
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              PatientContext.EncounterOid > 0 &&
              this.FormViewerDetails.BasicDetails.PresItemEncounterDetail.Value.ToString().Equals(
                PatientContext.EncounterOid.ToString()
              ) &&
              !String.Equals(
                this.FormViewerDetails.BasicDetails.PresItemEncounterDetail
                  .Value,
                PatientContext.EncounterCode,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.IsClinicalEncounterPresItem =
                true;
            }
          }
          if (
            oItemDetail.BasicProperties.FrequencyDetails != null &&
            oItemDetail.BasicProperties.FrequencyDetails.Frequency != null &&
            !this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')
          ) {
            if (
              oItemDetail.BasicProperties.Dose != null &&
              oItemDetail.BasicProperties.Dose.DoseRegime != null
            ) {
              let IsFixedAdmin =
                oItemDetail.BasicProperties.Dose.DoseRegime.Where(
                  (oitm) =>
                    oitm.FrequencyDetails != null &&
                    oitm.FrequencyDetails.IsFixedAdministration.Equals('F')
                ).Select((oitm) => oitm);
              if (IsFixedAdmin != null && IsFixedAdmin.Count() > 0) {
                this.FormViewerDetails.BasicDetails.IsAdminTypeFlag = 'F';
              }
              let IsDrugRoundAdmin =
                oItemDetail.BasicProperties.Dose.DoseRegime.Where(
                  (oitm) =>
                    oitm.FrequencyDetails != null &&
                    oitm.FrequencyDetails.IsFixedAdministration.Equals('D')
                ).Select((oitm) => oitm);
              if (IsDrugRoundAdmin != null && IsDrugRoundAdmin.Count() > 0) {
                this.FormViewerDetails.BasicDetails.IsAdminTypeFlag = 'D';
              }
            }
            if (
              this.ActionCode == ActivityTypes.Amend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.IsAdminTypeFlag
              ) &&
              String.Equals(
                this.FormViewerDetails.BasicDetails.IsAdminTypeFlag,
                'D',
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.ForAmendGetFrequencyByPresItemOID =
                true;
            }
            let sFreqTag: string[] = (
              !String.IsNullOrEmpty(
                oItemDetail.BasicProperties.FrequencyDetails.Frequency.Code
              )
                ? oItemDetail.BasicProperties.FrequencyDetails.Frequency.Code
                : '0~'
            ).Split('~');
            this.FormViewerDetails.BasicDetails.OriginalFrequencyOID =
              oItemDetail.BasicProperties.FrequencyDetails.Frequency.OID;
            if (this.FormViewerDetails.BasicDetails.AdminTimes != null) {
              this.FormViewerDetails.BasicDetails.AdminTimes.OriginalFrequencyOID =
                oItemDetail.BasicProperties.FrequencyDetails.Frequency.OID;
              this.FormViewerDetails.BasicDetails.AdminTimes.Actioncode =
                Convert.ToString(this.ActionCode);
            }
            this.FormViewerDetails.BasicDetails.Frequency =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  oItemDetail.BasicProperties.FrequencyDetails.Frequency.Name,
                Value:
                  oItemDetail.BasicProperties.FrequencyDetails.Frequency.OID > 0
                    ? Convert.ToString(
                        oItemDetail.BasicProperties.FrequencyDetails.Frequency
                          .OID
                      )
                    : String.Empty,
                Tag: sFreqTag,
              });
            this.FormViewerDetails.BasicDetails.OriginalFrequency =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  oItemDetail.BasicProperties.FrequencyDetails.Frequency.Name,
                Value:
                  oItemDetail.BasicProperties.FrequencyDetails.Frequency.OID > 0
                    ? Convert.ToString(
                        oItemDetail.BasicProperties.FrequencyDetails.Frequency
                          .OID
                      )
                    : String.Empty,
                Tag: sFreqTag,
              });
            if (
              String.Compare(
                'CC_IPONCENLY',
                oItemDetail.BasicProperties.FrequencyDetails.FrequencyUOM
              ) == 0
            ) {
              this.FormViewerDetails.BasicDetails.IsenableDuration = false;
              this.FormViewerDetails.BasicDetails.IsenableStopDate = false;
              this.FormViewerDetails.BasicDetails.IsenableAsrequired = false;
              this.FormViewerDetails.BasicDetails.AsRequired = false;
              this.FormViewerDetails.BasicDetails.FrequencyUOM =
                oItemDetail.BasicProperties.FrequencyDetails.FrequencyUOM;
            }
            if (
              String.IsNullOrEmpty(
                oItemDetail.BasicProperties.FrequencyDetails.Frequency.Name
              ) &&
              oItemDetail.BasicProperties.FrequencyDetails.Frequency.OID == 0
            ) {
              this.FormViewerDetails.BasicDetails.IsGetPresWithoutFrequency =
                true;
            }
            this.FormViewerDetails.BasicDetails.ForAmendGetFrequencyByPresItemOID =
              false;
          }
          if (
            oItemDetail.BasicProperties.Form instanceof
            IPPMAManagePrescSer.ObjectInfo
          ) {
            if (
              oItemDetail.BasicProperties.Form != null &&
              !String.IsNullOrEmpty(oItemDetail.BasicProperties.Form.Name)
            ) {
              this.FormViewerDetails.BasicDetails.DosageForm =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: oItemDetail.BasicProperties.Form.Name,
                  Value:
                    oItemDetail.BasicProperties.Form.OID > 0
                      ? Convert.ToString(oItemDetail.BasicProperties.Form.OID)
                      : String.Empty,
                  Tag: oItemDetail.BasicProperties.Form.OID > 0 ? true : false,
                });
            }
          }
          if (
            oItemDetail.BasicProperties.Duration != null &&
            (this.ActionCode != ActivityTypes.Reorder ||
              IsDurationStopDateCanBeFilled ||
              (this.ActionCode == ActivityTypes.Reorder &&
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.CurrentCultureIgnoreCase
                ) &&
                oItemDetail.PrescriptionBasicData != null &&
                String.Equals(
                  oItemDetail.PrescriptionBasicData.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.CurrentCultureIgnoreCase
                )))
          ) {
            if (oItemDetail.BasicProperties.Duration.Value > 0)
              this.FormViewerDetails.BasicDetails.Duration = Convert.ToString(
                oItemDetail.BasicProperties.Duration.Value
              );
            if (
              String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Duration.UOMCode
              ) &&
              !String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Duration.UOMName
              ) &&
              oItemDetail.BasicProperties.Duration.UOMName.Contains('_')
            ) {
              oItemDetail.BasicProperties.Duration.UOMCode =
                oItemDetail.BasicProperties.Duration.UOMName;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Duration.UOMCode
              )
            ) {
              let sDurationUomName: string = String.Empty;
              sDurationUomName = CommonBB.GetText(
                oItemDetail.BasicProperties.Duration.UOMCode,
                MedicationCommonConceptCodeData.ConceptCodes
              );
              this.FormViewerDetails.BasicDetails.DurationUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: sDurationUomName,
                  Value: oItemDetail.BasicProperties.Duration.UOMCode,
                });
            }
          }
          if (
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.Duration
            ) &&
            (this.FormViewerDetails.BasicDetails.DurationUOM == null ||
              (this.FormViewerDetails.BasicDetails.DurationUOM != null &&
                String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.DurationUOM.Value
                ))) &&
            IsDurationStopDateCanBeFilled &&
            ((oItemDetail.BasicProperties != null &&
              oItemDetail.BasicProperties.Dose != null &&
              oItemDetail.BasicProperties.Dose.DoseType != null &&
              String.Equals(
                oItemDetail.BasicProperties.Dose.DoseType.Code,
                DoseTypeCode.TITRATED,
                StringComparison.OrdinalIgnoreCase
              )) ||
              (oItemDetail.FormViewParameters != null &&
                oItemDetail.FormViewParameters.IntravenousInfusionData !=
                  null &&
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .InfusionSeqOrder > 0))
          ) {
            if (
              DateTime.NotEquals(oItemDetail.StartDTTM, DateTime.MinValue) &&
              DateTime.NotEquals(oItemDetail.EndDTTM, DateTime.MinValue) &&
              (this.FormViewerDetails.BasicDetails.DoseType == null ||
                (this.FormViewerDetails.BasicDetails.DoseType != null &&
                  !String.Equals(
                    this.FormViewerDetails.BasicDetails.DoseType.Value,
                    DoseTypeCode.STEPPEDVARIABLE
                  )))
            ) {
              let nDuration: number = oItemDetail.EndDTTM.Subtract(
                oItemDetail.StartDTTM
              ).Days;
              if (nDuration == 0) nDuration = 1;
              this.FormViewerDetails.BasicDetails.Duration =
                Convert.ToString(nDuration);
              this.FormViewerDetails.BasicDetails.DurationUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Day(s)',
                  Value: 'CC_MEDDRSN1',
                });
              this.IsSkipStartDateValidation = true;
            }
          }
          if (
            IsDurationStopDateCanBeFilled &&
            DateTime.NotEquals(oItemDetail.StartDTTM, DateTime.MinValue) &&
            (this.FormViewerDetails.BasicDetails.DoseType == null ||
              (this.FormViewerDetails.BasicDetails.DoseType != null &&
                !String.Equals(
                  this.FormViewerDetails.BasicDetails.DoseType.Value,
                  DoseTypeCode.STEPPEDVARIABLE
                )))
          ) {
            this.IsSkipStartDateValidation = true;
          }
          if (
            oItemDetail.BasicProperties.AdminInstruction != null &&
            oItemDetail.BasicProperties.AdminInstruction.OID > 0
          ) {
            this.FormViewerDetails.BasicDetails.AdminInstruction =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: oItemDetail.BasicProperties.AdminInstruction.Name,
                Value: Convert.ToString(
                  oItemDetail.BasicProperties.AdminInstruction.OID
                ),
              });
            if (
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
                this.FormViewerDetails.BasicDetails.AdminInstruction.DisplayText;
              if (
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.OtherAdminiInstruction
                )
              )
                this.FormViewerDetails.BasicDetails.AdminInstruction =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'Other',
                    Value: 'CC_Other',
                  });
            }
          } else {
            if (
              this.FormViewerDetails.BasicDetails.OtherAdminiInstVisibility ==
              Visibility.Visible
            ) {
              this.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
                oItemDetail.BasicProperties.OtherAdminInstruction;
              if (
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.OtherAdminiInstruction
                ) &&
                this.FormViewerDetails.BasicDetails.AdminInstruction == null
              )
                this.FormViewerDetails.BasicDetails.AdminInstruction =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'Other',
                    Value: 'CC_Other',
                  });
            }
          }
          if (oItemDetail.BasicProperties.Site != null) {
            this.FormViewerDetails.BasicDetails.Site =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: oItemDetail.BasicProperties.Site.Name,
                Value:
                  oItemDetail.BasicProperties.Site.OID > 0
                    ? oItemDetail.BasicProperties.Site.OID.ToString()
                    : String.Empty,
              });
          }
          if (oItemDetail.BasicProperties.Quantity != null) {
            if (
              !String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Quantity.QuantityValue
              ) &&
              !String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Quantity.QuantityUOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.Quantity =
                oItemDetail.BasicProperties.Quantity.QuantityValue;
              this.FormViewerDetails.BasicDetails.QuantityUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.BasicProperties.Quantity.QuantityUOMName,
                  Value: Convert.ToString(
                    oItemDetail.BasicProperties.Quantity.QuantityUOMId
                  ),
                });
            } else if (
              !String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Quantity.QuantityValue
              ) &&
              Convert.ToDouble(
                oItemDetail.BasicProperties.Quantity.QuantityValue
              ) == 0
            ) {
              this.FormViewerDetails.BasicDetails.Quantity =
                oItemDetail.BasicProperties.Quantity.QuantityValue;
            } else if (
              String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Quantity.QuantityValue
              ) &&
              !String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Quantity.QuantityUOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.QuantityUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.BasicProperties.Quantity.QuantityUOMName,
                  Value: Convert.ToString(
                    oItemDetail.BasicProperties.Quantity.QuantityUOMId
                  ),
                });
            }
          }
          if (
            oItemDetail.BasicProperties.PatientProblem != null &&
            oItemDetail.BasicProperties.PatientProblem.Count > 0 &&
            oItemDetail.BasicProperties.PatientProblem[0].Code != null
          ) {
            let sPblm: string =
              oItemDetail.BasicProperties.PatientProblem[0].Code;
            let sPblmSerialize: string[] = sPblm.Split('~');
            if (sPblmSerialize != null) {
              let nPblmLength: number = sPblmSerialize.length;
              if (nPblmLength > 0) {
                let sProblemDetails: StringBuilder = new StringBuilder();
                let sProblemName: StringBuilder = new StringBuilder();
                let sProblemIndicationTerm: StringBuilder = new StringBuilder();
                for (let i: number = 0; i <= nPblmLength - 1; i++) {
                  let stmp: string[] = sPblmSerialize[i].Split('$');
                  sProblemName.Append(stmp[0]);
                  sProblemIndicationTerm.Append(stmp[0]);
                  sProblemDetails.Append(
                    stmp[3] +
                      '#' +
                      stmp[0] +
                      '#' +
                      stmp[2] +
                      '#' +
                      stmp[0] +
                      '#' +
                      '#' +
                      '#' +
                      stmp[1] +
                      '#' +
                      '#'
                  );
                  if (i < nPblmLength - 1) {
                    sProblemName.Append(', ');
                    sProblemIndicationTerm.Append('~^');
                    sProblemDetails.Append('!');
                  }
                }
                this.FormViewerDetails.BasicDetails.ProblemIndication =
                  Convert.ToString(sProblemName);
                this.FormViewerDetails.BasicDetails.PatientProblemCode =
                  Convert.ToString(sProblemDetails);
                this.FormViewerDetails.BasicDetails.ProblemIndicationTerm =
                  Convert.ToString(sProblemIndicationTerm);
              }
            }
          }
          let IPPBasicProps: IPPMAManagePrescSer.IPPPresItemBasicProperties =
            ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
              oItemDetail.BasicProperties,
              IPPMAManagePrescSer.IPPPresItemBasicProperties
            );
          if (IPPBasicProps != null) {
            this.ParentSourcePrescriptionType =
              IPPBasicProps.ParentPrescriptionType;
            this.ParentSourcePrescriptionItemOID =
              IPPBasicProps.ParentPrescriptionItemOID;
            if (
              !String.IsNullOrEmpty(
                SLQueryCollection.GetQueryStringValue('MenuCode')
              ) &&
              !String.Equals(
                SLQueryCollection.GetQueryStringValue('MenuCode'),
                'MN_MED_VERIFY_SL',
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              this.IsWardStock = IPPBasicProps.IsWardStock;
              switch (IPPBasicProps.IsSupplyRequested) {
                case '1':
                case '2':
                  this.IsOriginalSupplyRequested = this.IsSupplyRequested =
                    true;
                  break;
                default:
                  this.IsSupplyRequested = false;
                  break;
              }
              this.IsSupplyRequestedEnable = true;
              this.RequisitionCACode = IPPBasicProps.RequisitionCACode;
            }
            if (IPPBasicProps.Instruction != null) {
              this.FormViewerDetails.BasicDetails.PRNInstruction =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: IPPBasicProps.Instruction.Name,
                });
            }
            if (!String.IsNullOrEmpty(IPPBasicProps.StrengthText)) {
              this.FormViewerDetails.BasicDetails.Strength =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: IPPBasicProps.StrengthText,
                  Value: IPPBasicProps.StrengthText,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.RouteDeactivation)
            ) {
              let tempDeactRoutesColl: ObservableCollection<CListItem> =
                new ObservableCollection<CListItem>();
              tempDeactRoutesColl = MedicationCommonBB.DeactivateRouteList(
                IPPBasicProps.RouteDeactivation
              );
              this.FormViewerDetails.BasicDetails.DeactivatedRouteCollection =
                tempDeactRoutesColl;
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.StrengthDeactivation)
            ) {
              this.FormViewerDetails.BasicDetails.DeactivatedStrength =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: IPPBasicProps.StrengthDeactivation,
                  DisplayText: IPPBasicProps.StrengthDeactivation,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.FormDeactivation)
            ) {
              let tempDeactFormColl: CListItem = new CListItem();
              tempDeactFormColl = MedicationCommonBB.ReturnDeactivatedList(
                IPPBasicProps.FormDeactivation
              );
              this.FormViewerDetails.BasicDetails.DeactivatedFormList =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: tempDeactFormColl.Value,
                  DisplayText: tempDeactFormColl.DisplayText,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.SiteDeActivated)
            ) {
              let tempDeactSiteColl: CListItem = new CListItem();
              tempDeactSiteColl = MedicationCommonBB.ReturnDeactivatedList(
                IPPBasicProps.SiteDeActivated
              );
              this.FormViewerDetails.BasicDetails.DeactivatedSiteList =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: tempDeactSiteColl.Value,
                  DisplayText: tempDeactSiteColl.DisplayText,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.QuantityUOMDeActivated)
            ) {
              let tempDeactQuantityColl: CListItem = new CListItem();
              tempDeactQuantityColl = MedicationCommonBB.ReturnDeactivatedList(
                IPPBasicProps.QuantityUOMDeActivated
              );
              this.FormViewerDetails.BasicDetails.DeactivatedQuantityList =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: tempDeactQuantityColl.Value,
                  DisplayText: tempDeactQuantityColl.DisplayText,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.RequestDoseUOMDeActivated)
            ) {
              let tempDeactReqDoseUOMColl: CListItem = new CListItem();
              tempDeactReqDoseUOMColl =
                MedicationCommonBB.ReturnDeactivatedList(
                  IPPBasicProps.RequestDoseUOMDeActivated
                );
              this.FormViewerDetails.BasicDetails.DeactivatedDoseUOMList =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: tempDeactReqDoseUOMColl.Value,
                  DisplayText: tempDeactReqDoseUOMColl.DisplayText,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.RatenumUOMDeActivated)
            ) {
              let tempDeactNumUOMColl: CListItem = new CListItem();
              tempDeactNumUOMColl = MedicationCommonBB.ReturnDeactivatedList(
                IPPBasicProps.RatenumUOMDeActivated
              );
              this.FormViewerDetails.BasicDetails.DeactivatedRateNumUOMList =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: tempDeactNumUOMColl.Value,
                  DisplayText: tempDeactNumUOMColl.DisplayText,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.RatedinoUOMDeActivated)
            ) {
              let tempDeactDinoUOMColl: CListItem = new CListItem();
              tempDeactDinoUOMColl = MedicationCommonBB.ReturnDeactivatedList(
                IPPBasicProps.RatedinoUOMDeActivated
              );
              this.FormViewerDetails.BasicDetails.DeactivatedRateDinoUOMList =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: tempDeactDinoUOMColl.Value,
                  DisplayText: tempDeactDinoUOMColl.DisplayText,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.BoosterdoseUOMDeActivated)
            ) {
              let tempDeactBoosterUOMColl: CListItem = new CListItem();
              tempDeactBoosterUOMColl =
                MedicationCommonBB.ReturnDeactivatedList(
                  IPPBasicProps.BoosterdoseUOMDeActivated
                );
              this.FormViewerDetails.BasicDetails.DeactivatedBoosterUOMList =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: tempDeactBoosterUOMColl.Value,
                  DisplayText: tempDeactBoosterUOMColl.DisplayText,
                });
            }
            if (
              IPPBasicProps != null &&
              !String.IsNullOrEmpty(IPPBasicProps.BolusUOMDeActivated)
            ) {
              let tempDeactBolusUOMColl: CListItem = new CListItem();
              tempDeactBolusUOMColl = MedicationCommonBB.ReturnDeactivatedList(
                IPPBasicProps.BolusUOMDeActivated
              );
              this.FormViewerDetails.BasicDetails.DeactivatedBolusUOMList =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: tempDeactBolusUOMColl.Value,
                  DisplayText: tempDeactBolusUOMColl.DisplayText,
                });
            }
            if (IPPBasicProps.IsPresItemIgnoreAdminMethod) {
              this.FormViewerDetails.BasicDetails.IsPresItemIgnoreAdminMethod =
                true;
            } else {
              this.FormViewerDetails.BasicDetails.IsPresItemIgnoreAdminMethod =
                false;
            }
          }
          if (
            oItemDetail != null &&
            oItemDetail.FormViewParameters != null &&
            oItemDetail.FormViewParameters.IntravenousInfusionData != null
          ) {
            if (
              !String.IsNullOrEmpty(oItemDetail.IsInfusion) &&
              String.Equals(
                oItemDetail.IsInfusion,
                '1',
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.Infusions = true;
            }
            if (
              this.FormViewerDetails != null &&
              this.FormViewerDetails.BasicDetails != null &&
              this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
              this.FormViewerDetails.BasicDetails.DefaultDetails
                .InfusionTypeList != null &&
              this.FormViewerDetails.BasicDetails.DefaultDetails
                .InfusionTypeList.Count > 0
            ) {
              let oInfType =
                this.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList.Where(
                  (DType) =>
                    DType.Value == oItemDetail.FormViewParameters.INFTYCODE
                ).Select((DType) => DType);
              let sDisplay: string = String.Empty;
              if (
                String.Equals(
                  oItemDetail.FormViewParameters.INFTYCODE,
                  InfusionTypesCode.CONTINUOUS,
                  StringComparison.OrdinalIgnoreCase
                ) ||
                String.Equals(
                  oItemDetail.FormViewParameters.INFTYCODE,
                  InfusionTypesCode.SINGLEDOSEVOLUME,
                  StringComparison.OrdinalIgnoreCase
                ) ||
                String.Equals(
                  oItemDetail.FormViewParameters.INFTYCODE,
                  InfusionTypesCode.FLUID,
                  StringComparison.OrdinalIgnoreCase
                )
              ) {
                sDisplay = 'Continuous';
              } else if (
                String.Equals(
                  oItemDetail.FormViewParameters.INFTYCODE,
                  InfusionTypesCode.INTERMITTENT,
                  StringComparison.OrdinalIgnoreCase
                )
              ) {
                sDisplay = 'Intermittent';
              } else if (
                String.Equals(
                  oItemDetail.FormViewParameters.INFTYCODE,
                  InfusionTypesCode.PCA,
                  StringComparison.OrdinalIgnoreCase
                )
              ) {
                sDisplay = 'PCA';
              }
              if (oInfType != null && oInfType.Count() > 0) {
                this.FormViewerDetails.BasicDetails.InfusionType =
                  ObjectHelper.CreateObject(new CListItem(), {
                    Value: oItemDetail.FormViewParameters.INFTYCODE,
                    DisplayText: sDisplay,
                    IsSelected: true,
                  });
              }
            } else if (
              !String.IsNullOrEmpty(oItemDetail.FormViewParameters.INFTYCODE)
            ) {
              this.FormViewerDetails.BasicDetails.InfusionType =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: oItemDetail.FormViewParameters.INFTYCODE,
                  IsSelected: true,
                });
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData.IsOxygen ==
              '1'
            ) {
              this.formViewerDetails.BasicDetails.InfusionDetails.IsOxygen =
                true;
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .TargetSaturationUpper > 0
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange =
                Convert.ToString(
                  oItemDetail.FormViewParameters.IntravenousInfusionData
                    .TargetSaturationUpper
                );
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .TargetSaturationLower == 0 &&
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .TargetSaturationUpper > 0
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange =
                Convert.ToString(
                  oItemDetail.FormViewParameters.IntravenousInfusionData
                    .TargetSaturationLower
                );
            else
              this.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange =
                String.Empty;
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .TargetSaturationLower > 0
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange =
                Convert.ToString(
                  oItemDetail.FormViewParameters.IntravenousInfusionData
                    .TargetSaturationLower
                );
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData.MaxDose
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.MaxDose =
                oItemDetail.FormViewParameters.IntravenousInfusionData.MaxDose;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData.Lumen
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.Lumen =
                oItemDetail.FormViewParameters.IntravenousInfusionData.Lumen;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData.IsOnGoing
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.IsOnGoing =
                oItemDetail.FormViewParameters.IntravenousInfusionData.IsOnGoing;
              if (
                String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsOnGoing,
                  'y',
                  StringComparison.OrdinalIgnoreCase
                ) ||
                String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsOnGoing,
                  'Y',
                  StringComparison.OrdinalIgnoreCase
                )
              )
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                  true;
              else
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                  false;
            } else
              this.FormViewerDetails.BasicDetails.InfusionDetails.IsOnGoing =
                String.Empty;
            if (
              oItemDetail.FormViewParameters.ReviewAfterDTTM != null &&
              !oItemDetail.FormViewParameters.ReviewAfterDTTM.Equals(DateTime.MinValue)
            ) {
              this.FormViewerDetails.BasicDetails.ReviewAfter =
                oItemDetail.FormViewParameters.ReviewAfter;
              this.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
                oItemDetail.FormViewParameters.ReviewAfterDTTM;
              this.FormViewerDetails.BasicDetails.ReviewafterUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.ReviewAfterUOM.Name,
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.ReviewAfterUOM.Code
                  ),
                });
              this.FormViewerDetails.BasicDetails.IsenableReviewAfter =
                oItemDetail.FormViewParameters.IsReviewafterReq;
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .Concentration > 0
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.ConcentrationFreeText =
                Convert.ToString(
                  oItemDetail.FormViewParameters.IntravenousInfusionData
                    .Concentration
                );
            else
              this.FormViewerDetails.BasicDetails.InfusionDetails.ConcentrationFreeText =
                null;
            this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext =
              oItemDetail.FormViewParameters.IntravenousInfusionData.DeliveryDevice;
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .DeliveryDeviceList != null
            ) {
              let obj =
                this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceList.Where(
                  (odelivery) =>
                    (odelivery.DisplayText).toLowerCase() ==
                    (oItemDetail.FormViewParameters.IntravenousInfusionData.DeliveryDevice).toLowerCase()
                ).Select((odelivery) => odelivery);
              if (obj.Count() > 0) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice =
                  ObjectHelper.CreateType<CListItem>(obj.First(), CListItem);
              } else {
                this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext =
                  oItemDetail.FormViewParameters.IntravenousInfusionData.DeliveryDevice;
              }
            } else {
              this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext =
                oItemDetail.FormViewParameters.IntravenousInfusionData.DeliveryDevice;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData.Rate
              )
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.Rate =
                oItemDetail.FormViewParameters.IntravenousInfusionData.Rate;
            if (oItemDetail.FormViewParameters.IntravenousInfusionData
              .IsVolumeBasedInfusion != null &&
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .IsVolumeBasedInfusion != String.MinValue
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeChecked =
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .IsVolumeBasedInfusion == '1'
                  ? true
                  : false;
            }
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .IsVolumeChecked != null
            ) {
              if (
                !Convert.ToBoolean(
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .IsVolumeChecked
                )
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked =
                  true;
              } else if (
                Convert.ToBoolean(
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .IsVolumeChecked
                )
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsDoseChecked =
                  false;
              }
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .RoundOffCode
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.RoundOffCode =
                oItemDetail.FormViewParameters.IntravenousInfusionData.RoundOffCode;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .RoundOffText
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.RoundOffText =
                oItemDetail.FormViewParameters.IntravenousInfusionData.RoundOffText;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData.UpperRate
              )
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate =
                oItemDetail.FormViewParameters.IntravenousInfusionData.UpperRate;
            if (this.actionCode != ActivityTypes.Reorder) {
              if (
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .InfusionGroupSequenceNo > 0
              ) {
                if (String.IsNullOrEmpty(this.OperationMode)) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo =
                    oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionSeqOrder;
                  this.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo =
                    oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionGroupSequenceNo;
                }
                this.FormViewerDetails.BasicDetails.InfusionDetails.SelectedSequenceName =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: String.Format(
                      Resource.Infusion.ExsitingSequenceNo,
                      oItemDetail.FormViewParameters.IntravenousInfusionData
                        .InfusionGroupSequenceNo
                    ),
                    Value:
                      oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionGroupSequenceNo.ToString(),
                  });
              }
            }
            if (
              this.actionCode != ActivityTypes.Reorder ||
              (this.actionCode == ActivityTypes.Reorder &&
                this.ParentbaseVM != null &&
                !this.ParentbaseVM.IsNonSequentialitem)
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder =
                oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionSeqOrder;
            }
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem =
              oItemDetail.FormViewParameters.IntravenousInfusionData.IsSequentialPrescribing;
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData.RateUOM !=
                null &&
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData.RateUOM
                  .UOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .RateUOM.UOMName,
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .RateUOM.UOMId
                  ),
                });
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .RateDenominatorUOM != null &&
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .RateDenominatorUOM.UOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: Convert.ToString(
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .RateDenominatorUOM.UOMName
                  ),
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .RateDenominatorUOM.UOMId
                  ),
                });
            }
            if (
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .DeliveryDeviceFreetext
              ) &&
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .DeliveryDevice != null
            ) {
              if (
                String.Compare(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Clerking,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0
              ) {
                if (
                  this.FormViewerDetails.BasicDetails.InfusionType != null &&
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value
                  ) &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.PCA,
                    StringComparison.CurrentCultureIgnoreCase
                  ) != 0 &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.INTERMITTENT,
                    StringComparison.CurrentCultureIgnoreCase
                  ) != 0
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDD =
                    true;
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom =
                    false;
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom =
                    false;
                }
                if (
                  this.FormViewerDetails.BasicDetails.InfusionType != null &&
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value
                  ) &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.CONTINUOUS,
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationMandatory =
                    false;
                }
                if (
                  this.FormViewerDetails.BasicDetails.InfusionType != null &&
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value
                  ) &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.SINGLEDOSEVOLUME,
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeMandatory =
                    true;
                }
              }
              if (
                String.Compare(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Clerking,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 &&
                this.FormViewerDetails.BasicDetails.InfusionType != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value
                ) &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.PCA,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0 &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.INTERMITTENT,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsinfusRateBasedOnDDforClerking =
                  true;
              }
              if (
                this.FormViewerDetails.BasicDetails.InfusionType != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value
                ) &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.CONTINUOUS,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible =
                  Visibility.Visible;
              }
              if (
                this.FormViewerDetails.BasicDetails.InfusionType != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value
                ) &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible =
                  Visibility.Visible;
              }
              if (
                this.FormViewerDetails.BasicDetails.InfusionType != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value
                ) &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.INTERMITTENT,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible =
                  Visibility.Collapsed;
              }
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .LowConcentration
              )
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration =
                oItemDetail.FormViewParameters.IntravenousInfusionData.LowConcentration;
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .UpperConcentration
              )
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration =
                oItemDetail.FormViewParameters.IntravenousInfusionData.UpperConcentration;
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .LowConcentrationUOMOID != null &&
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .LowConcentrationUOMOID.UOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .LowConcentrationUOMOID.UOMName,
                  Value:
                    oItemDetail.FormViewParameters.IntravenousInfusionData.LowConcentrationUOMOID.UOMId.ToString(),
                });
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .UpperConcentrationUOMOID != null &&
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .UpperConcentrationUOMOID.UOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID.UOMName.ToString(),
                  Value:
                    oItemDetail.FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID.UOMId.ToString(),
                });
            }
            this.sOriginalValue =
              oItemDetail.FormViewParameters.IntravenousInfusionData.IsBolusInfusion;
            if (
              this.FormViewerDetails != null &&
              this.FormViewerDetails.BasicDetails != null &&
              this.FormViewerDetails.BasicDetails.InfusionType != null
            ) {
              this.sOriginalType =
                this.FormViewerDetails.BasicDetails.InfusionType.Value;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .IsBolusInfusion
              ) &&
              oItemDetail.FormViewParameters.IntravenousInfusionData.IsBolusInfusion.Equals(
                '1'
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart =
                true;
            } else {
              this.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart =
                false;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .InfusionPeriod
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod =
                oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionPeriod;
              this.FormViewerDetails.BasicDetails.InfusionDetails.OrginalInfusionPeriod =
                oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionPeriod;
              this.FormViewerDetails.BasicDetails.InfusionDetails.OldInfusionPeriod =
                oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionPeriod;
            } else {
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod =
                String.Empty;
              this.FormViewerDetails.BasicDetails.InfusionDetails.OrginalInfusionPeriod =
                String.Empty;
              this.FormViewerDetails.BasicDetails.InfusionDetails.OldInfusionPeriod =
                String.Empty;
            }
            if (
              oItemDetail.BasicProperties != null &&
              oItemDetail.BasicProperties.Duration != null &&
              oItemDetail.BasicProperties.Duration.Value > 0
            ) {
              this.FormViewerDetails.BasicDetails.OldDuration =
                oItemDetail.BasicProperties.Duration.Value.ToString();
            } else {
              this.FormViewerDetails.BasicDetails.OldDuration = String.Empty;
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .InfusionPeriodUOM != null &&
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .InfusionPeriodUOM.UOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .InfusionPeriodUOM.UOMName,
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .InfusionPeriodUOM.UOMId
                  ),
                });
            }
            if (this.FormViewerDetails.BasicDetails.InfusionType == null) {
              if (
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .InfusionPeriod
                ) ||
                (this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriodUom != null &&
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfusionPeriodUom.Value
                  ))
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableChksequentialPresitem =
                  true;
              } else {
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableChksequentialPresitem =
                  false;
                this.FormViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem =
                  false;
              }
            }
            if (
              !(
                this.FormViewerDetails.BasicDetails.itemSubType != null &&
                String.Equals(
                  this.FormViewerDetails.BasicDetails.itemSubType,
                  CConstants.SUBTYPE,
                  StringComparison.OrdinalIgnoreCase
                )
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext =
                Convert.ToString(
                  oItemDetail.FormViewParameters.IntravenousInfusionData.Fluid
                    .Name
                );
              if (
                oItemDetail.FormViewParameters.IntravenousInfusionData.Fluid
                  .OID != 0
              ) {
                let TempFluidSelectvalue: CListItem = new CListItem();
                TempFluidSelectvalue = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    Value: Convert.ToString(
                      oItemDetail.FormViewParameters.IntravenousInfusionData
                        .Fluid.OID
                    ),
                    DisplayText:
                      oItemDetail.FormViewParameters.IntravenousInfusionData
                        .Fluid.Name,
                    Tag:
                      oItemDetail.FormViewParameters.IntravenousInfusionData
                        .Fluid.Code +
                      '~' +
                      oItemDetail.FormViewParameters.IntravenousInfusionData
                        .IsFluidAuthorise,
                  }
                );
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .FluidList == null
                )
                  this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList =
                    new ObservableCollection<CListItem>();
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .FluidList != null &&
                  TempFluidSelectvalue != null
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList.Insert(
                    0,
                    TempFluidSelectvalue
                  );
                  this.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue =
                    TempFluidSelectvalue;
                }
              }
            }
            this.formViewerDetails.BasicDetails.IsFluidAuthorise =
              oItemDetail.FormViewParameters.IntravenousInfusionData.IsFluidAuthorise;
            if (
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) &&
              PatientContext.ClerkFormViewDefaultBehavior !=
                ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
              (String.IsNullOrEmpty(this.PrescriptionItemStatus) ||
                String.Equals(
                  this.PrescriptionItemStatus,
                  CConstants.AWAITINGAUTHORISE,
                  StringComparison.InvariantCultureIgnoreCase
                )) &&
              !this.FormViewerDetails.BasicDetails.IsAuthorise &&
              this.FormViewerDetails.BasicDetails.IsFluidAuthorise
            ) {
              this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
                this.FormViewerDetails.BasicDetails.IdentifyingName +
                CConstants.sAuthoriseText;
            }
            if (
              oItemDetail.FormViewParameters != null &&
              oItemDetail.FormViewParameters.IntravenousInfusionData != null &&
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .DeliveryDevice != null
            ) {
              this.formViewerDetails.BasicDetails.DeliveryDeviceFreetext =
                oItemDetail.FormViewParameters.IntravenousInfusionData.DeliveryDevice;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData.Volume
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume =
                oItemDetail.FormViewParameters.IntravenousInfusionData.Volume;
              this.FormViewerDetails.BasicDetails.InfusionDetails.Volume =
                oItemDetail.FormViewParameters.IntravenousInfusionData.Volume;
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .VolumeUOM != null &&
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData.VolumeUOM
                  .UOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .VolumeUOM.UOMName,
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .VolumeUOM.UOMId
                  ),
                });
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData.Fluid !=
                null &&
              oItemDetail.FormViewParameters.IntravenousInfusionData.Fluid.OID >
                0
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.FluidPrescribableItemListOID =
                oItemDetail.FormViewParameters.IntravenousInfusionData.Fluid.OID;
            }
            if (
              oItemDetail.FormViewParameters.IntravenousInfusionData
                .FluidIdentifyingOID > 0
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID =
                oItemDetail.FormViewParameters.IntravenousInfusionData.FluidIdentifyingOID;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .FluidIdentifyingType
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingType =
                oItemDetail.FormViewParameters.IntravenousInfusionData.FluidIdentifyingType;
              this.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType =
                oItemDetail.FormViewParameters.IntravenousInfusionData.FluidIdentifyingType;
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.IntravenousInfusionData
                  .FluidLorenzoID
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID =
                oItemDetail.FormViewParameters.IntravenousInfusionData.FluidLorenzoID;
            }
            if (
              oItemDetail.BasicProperties != null &&
              oItemDetail.BasicProperties.Dose != null &&
              oItemDetail.BasicProperties.Dose.DoseRegime != null &&
              oItemDetail.BasicProperties.Dose.DoseRegime.Count > 0
            ) {
              let oDoseRegime: IPPMAManagePrescSer.DoseRegime =
                oItemDetail.BasicProperties.Dose.DoseRegime[0];
              this.FormViewerDetails.BasicDetails.InfusionDetails.PrescribedDoseValue =
                oDoseRegime.LowerDose != 0
                  ? Convert.ToString(oDoseRegime.LowerDose)
                  : String.Empty;
              if (
                oDoseRegime.DoseUOM != null &&
                !String.IsNullOrEmpty(oDoseRegime.DoseUOM.UOMName) &&
                (!String.IsNullOrEmpty(oDoseRegime.DoseUOM.UOMCode) ||
                  oDoseRegime.DoseUOM.UOMId > 0)
              ) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.PrescribedDoseUOMValue =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: oDoseRegime.DoseUOM.UOMName,
                    Value: Convert.ToString(oDoseRegime.DoseUOM.UOMId),
                    Tag: oDoseRegime.DoseUOM.UOMCode,
                  });
              }
            }
            if (
              this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
              this.FormViewerDetails.BasicDetails.DefaultDetails
                .ReviewAfterUOMList == null
            ) {
              this.FormViewerDetails.BasicDetails.DefaultDetails.ReviewAfterUOMList =
                ReviewAfterUOMList.ConceptCodes;
            }
            this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRate =
              oItemDetail.FormViewParameters.AdminDeviceData.BackgroundRate;
            this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateUOMOID =
              oItemDetail.FormViewParameters.AdminDeviceData.BackgroundRateUOM.UOMId;
            this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateDenaminatorUOMOID =
              oItemDetail.FormViewParameters.AdminDeviceData.BackgroundRateDenaminatorUOMOID;
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.AdminDeviceData.TopUpDose
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus =
                oItemDetail.FormViewParameters.AdminDeviceData.TopUpDose;
            }
            if (
              oItemDetail.FormViewParameters.AdminDeviceData.TopUpDoseUOM !=
                null &&
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.AdminDeviceData.TopUpDoseUOM
                  .UOMName
              ) &&
              oItemDetail.FormViewParameters.AdminDeviceData.TopUpDoseUOM
                .UOMId > 0
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.AdminDeviceData.TopUpDoseUOM
                      .UOMName,
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.AdminDeviceData.TopUpDoseUOM
                      .UOMId
                  ),
                });
            }
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.AdminDeviceData.BoosterDose
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose =
                oItemDetail.FormViewParameters.AdminDeviceData.BoosterDose;
            }
            if (
              oItemDetail.FormViewParameters.AdminDeviceData.BoosterDoseUOM !=
                null &&
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.AdminDeviceData.BoosterDoseUOM
                  .UOMName
              ) &&
              oItemDetail.FormViewParameters.AdminDeviceData.BoosterDoseUOM
                .UOMId > 0
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.AdminDeviceData
                      .BoosterDoseUOM.UOMName,
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.AdminDeviceData
                      .BoosterDoseUOM.UOMId
                  ),
                });
            }
            this.FormViewerDetails.BasicDetails.InfusionDetails.TopUpDoseUOMOID =
              oItemDetail.FormViewParameters.AdminDeviceData.TopUpDoseUOM.UOMId;
            if (
              oItemDetail.FormViewParameters.AdminDeviceData.LockOutPeriod > 0
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod =
                Convert.ToString(
                  oItemDetail.FormViewParameters.AdminDeviceData.LockOutPeriod
                );
            if (
              oItemDetail.FormViewParameters.AdminDeviceData.LockOutPeriodUOM !=
                null &&
              oItemDetail.FormViewParameters.AdminDeviceData.LockOutPeriodUOM
                .UOMId > 0
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.AdminDeviceData
                      .LockOutPeriodUOM.UOMName,
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.AdminDeviceData
                      .LockOutPeriodUOM.UOMId
                  ),
                });
            }
            this.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriodUOMOID =
              oItemDetail.FormViewParameters.AdminDeviceData.LockOutPeriodUOM.UOMId;
            if (
              !String.IsNullOrEmpty(
                oItemDetail.FormViewParameters.AdminDeviceData.MonitorPeriod
              )
            )
              this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod =
                oItemDetail.FormViewParameters.AdminDeviceData.MonitorPeriod;
            if (
              oItemDetail.FormViewParameters.AdminDeviceData.MonitorPeriodUOM !=
                null &&
              oItemDetail.FormViewParameters.AdminDeviceData.MonitorPeriodUOM
                .UOMId > 0
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.FormViewParameters.AdminDeviceData
                      .MonitorPeriodUOM.UOMName,
                  Value: Convert.ToString(
                    oItemDetail.FormViewParameters.AdminDeviceData
                      .MonitorPeriodUOM.UOMId
                  ),
                });
            }
            if (
              (!String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.OrdinalIgnoreCase
              ) &&
                this.OperationMode != null &&
                !String.Equals(
                  this.OperationMode,
                  'M',
                  StringComparison.OrdinalIgnoreCase
                )) ||
              (PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
                this.OperationMode == null &&
                String.Equals(
                  ActionCode,
                  CAActivity.CA_AMEND,
                  StringComparison.InvariantCultureIgnoreCase
                )) ||
              (PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
                this.OperationMode == null &&
                String.Equals(
                  ActionCode,
                  CAActivity.CA_REORDER,
                  StringComparison.InvariantCultureIgnoreCase
                ))
            ) {
              if (
                !this.ParentbaseVM.IsNonSequentialitem &&
                PatientContext.PrescriptionType != PrescriptionTypes.Clerking
              ) {
                if (
                  this.ActionCode != ActivityTypes.Reorder &&
                  oItemDetail.FormViewParameters.IntravenousInfusionData
                    .ParentPrescriptionItemOID > 0
                ) {
                  this.formViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                    oItemDetail.FormViewParameters.IntravenousInfusionData.ParentPrescriptionItemOID;
                  this.formViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID =
                    oItemDetail.FormViewParameters.IntravenousInfusionData.ParentPrescriptionItemOID;
                }
                if (this.ActionCode != ActivityTypes.Amend) {
                  this.formViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
                    oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionSeqOrder;
                  this.formViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder =
                    oItemDetail.FormViewParameters.IntravenousInfusionData.InfusionSeqOrder;
                }
                if (
                  this.ActionCode == ActivityTypes.Amend &&
                  PatientContext.PrescriptionType ==
                    PrescriptionTypes.ForAdministration &&
                  this.formViewerDetails.BasicDetails.InfusionDetails
                    .SequentialItemOrder > 0 &&
                  this.formViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID > 0
                ) {
                  this.formViewerDetails.BasicDetails.IsInfAmendStartDTTMBlank =
                    false;
                }
              }
            }
            if (
              oItemDetail != null &&
              String.Equals(
                ActionCode,
                CAActivity.CA_REORDER,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                false;
              this.FormViewerDetails.BasicDetails.InfusionDetails.IsOnGoing =
                String.Empty;
              if (
                !String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration
                )
              ) {
                this.FormViewerDetails.BasicDetails.ReviewAfter = String.Empty;
                this.FormViewerDetails.BasicDetails.ReviewafterUOM = null;
              }
              this.FormViewerDetails.BasicDetails.IsenableReviewAfter = true;
            }
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .HumidificationList != null
            ) {
              let obj =
                this.FormViewerDetails.BasicDetails.InfusionDetails.HumidificationList.Where(
                  (oHUMIDCode) =>
                    oHUMIDCode.Value ==
                    oItemDetail.FormViewParameters.IntravenousInfusionData
                      .HUMIDCode
                ).Select((oHUMIDCode) => oHUMIDCode);
              if (obj.Count() > 0) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.Humidification =
                  ObjectHelper.CreateType<CListItem>(obj.First(), CListItem);
              }
            }
            if (
              this.FormViewerDetails != null &&
              this.FormViewerDetails.BasicDetails != null &&
              this.FormViewerDetails.BasicDetails.InfusionType != null &&
              (String.Equals(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypesCode.CONTINUOUS
              ) ||
                String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME
                ) ||
                String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.FLUID
                )) &&
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID > 0 &&
              (this.ActionCode == ActivityTypes.Reorder ||
                this.ActionCode == ActivityTypes.Amend)
            ) {
              this.FormViewerDetails.BasicDetails.ReviewAfterVisible =
                Visibility.Collapsed;
              this.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
                Visibility.Collapsed;
            }
          }
          if (oItemDetail.BasicProperties.TreatmentToCont != null) {
            let _what = MedicationCommonConceptCodeData.ConceptCodes.Where(
              (i) =>
                i.csCode == oItemDetail.BasicProperties.TreatmentToCont.Code
            );
            let _treatmenttoContinueName: string = String.Empty;
            if (_what != null && _what.Count() > 0) {
              _treatmenttoContinueName = _what.FirstOrDefault().csDescription;
            }
            this.FormViewerDetails.BasicDetails.TreatmentToContinue =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: _treatmenttoContinueName,
                Value: oItemDetail.BasicProperties.TreatmentToCont.Code,
              });
          }
          if (
            !String.Equals(
              ActionCode,
              CAActivity.CA_REORDER,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            (String.Equals(
              ActionCode,
              CAActivity.CA_REORDER,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
              (String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.OrdinalIgnoreCase
              ) ||
                String.Equals(
                  PatientContext.PrescriptionType,
                  CConstants.ClerkingPrescribeMenuCode,
                  StringComparison.OrdinalIgnoreCase
                ) ||
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.OrdinalIgnoreCase
                ) ||
                String.Equals(
                  PatientContext.PrescriptionType,
                  CConstants.ForadminPrescribeMenuCode,
                  StringComparison.OrdinalIgnoreCase
                )) &&
              ((oItemDetail != null &&
                oItemDetail.PrescriptionBasicData == null) ||
                (oItemDetail != null &&
                  oItemDetail.PrescriptionBasicData != null &&
                  oItemDetail.PrescriptionBasicData.EncounterOID == 0) ||
                (oItemDetail != null &&
                  oItemDetail.PrescriptionBasicData != null &&
                  oItemDetail.PrescriptionBasicData.EncounterOID ==
                    PatientContext.EncounterOid)))
          ) {
            if (
              !this.FormViewerDetails.BasicDetails.IsAuthorise ||
              (this.FormViewerDetails.BasicDetails.IsAuthorise &&
                !String.IsNullOrEmpty(this.PrescriptionItemStatus) &&
                !String.Equals(
                  this.PrescriptionItemStatus,
                  CConstants.AWAITINGAUTHORISE,
                  StringComparison.InvariantCultureIgnoreCase
                ))
            ) {
              if (
                oItemDetail.BasicProperties.SupplyInstruction != null &&
                oItemDetail.BasicProperties.SupplyInstruction.Count > 0 &&
                !this.bIsSupplyDispensingInstructionSet
              ) {
                this.SupDisText = 'Supply instructions';
                this.supToolTipDisText = 'Supply instructions -';
                let oSupplyValues: StringBuilder = new StringBuilder();
                let oSupplyText: StringBuilder = new StringBuilder();
                oItemDetail.BasicProperties.SupplyInstruction.forEach(
                  (oSupply) => {
                    if (!String.IsNullOrEmpty(oSupply.Name)) {
                      oSupplyValues.Append(oSupply.Code);
                      oSupplyText.Append(oSupply.Name);
                    } else if (
                      MedicationCommonConceptCodeData.ViewConceptCodes !=
                        null &&
                      MedicationCommonConceptCodeData.ViewConceptCodes.Count >
                        0 &&
                      !String.IsNullOrEmpty(oSupply.Code)
                    ) {
                      let lstTermtext: IEnumerable<CValuesetTerm>;
                      lstTermtext =
                        MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                          (x) => x.csCode == oSupply.Code
                        );
                      if (
                        lstTermtext != null &&
                        lstTermtext.Count() > 0 &&
                        !String.IsNullOrEmpty(lstTermtext.First().csDescription)
                      ) {
                        oSupplyText.Append(lstTermtext.First().csDescription);
                        oSupplyValues.Append(oSupply.Code);
                      }
                    }
                    if (oSupplyText != null && oSupplyText.Length > 0) {
                      oSupplyText.Append(';');
                    }
                    if (oSupplyValues != null && oSupplyValues.Length > 0) {
                      oSupplyValues.Append(';');
                    }
                  }
                );
                if (
                  oSupplyValues != null &&
                  oSupplyValues.Length > 0 &&
                  oSupplyText != null &&
                  oSupplyText.Length > 0
                ) {
                  this.FormViewerDetails.BasicDetails.SupplyInsVal =
                    oSupplyValues.ToString().TrimEnd(';');
                  this.FormViewerDetails.BasicDetails.SupplyInsText =
                    oSupplyText.ToString().TrimEnd(';');
                  let supplyinstval: string[] =
                    this.FormViewerDetails.BasicDetails.SupplyInsVal.Split(';');
                  let supplyinsttext: string[] =
                    this.FormViewerDetails.BasicDetails.SupplyInsText.Split(
                      ';'
                    );
                  if (
                    this.FormViewerDetails.BasicDetails
                      .SelectedsupplyInstruction == null
                  )
                    this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                      new ObservableCollection<CListItem>();
                  for (let i: number = 0; i < supplyinstval.length; i++) {
                    if (
                      this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                        (c) => c.Value == supplyinstval[i]
                      ).Count() == 0
                    ) {
                      this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Add(
                        ObjectHelper.CreateObject(new CListItem(), {
                          Value: supplyinstval[i],
                          DisplayText: !String.IsNullOrEmpty(supplyinsttext[i])
                            ? supplyinsttext[i]
                            : String.Empty,
                        })
                      );
                    }
                  }
                  this.FormViewerDetails.BasicDetails.OriginalSupplyInstructionText =
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: oSupplyValues.ToString(),
                      DisplayText: oSupplyText.ToString(),
                    });
                }
              }
            }
            this.FormViewerDetails.BasicDetails.RHSSupplyInstrIconTooltip =
              true;
            if (
              oItemDetail.BasicProperties.DispensingInstruction != null &&
              oItemDetail.BasicProperties.DispensingInstruction.Count > 0 &&
              !this.bIsSupplyDispensingInstructionSet
            ) {
              if (
                this.FormViewerDetails.BasicDetails.DispensingInstruction ==
                  null ||
                this.FormViewerDetails.BasicDetails.DispensingInstruction
                  .Count == 0
              ) {
                this.SupDisText = 'Supply/Dispensing instructions';
                this.supToolTipDisText = 'Supply instructions - ';
                this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction =
                  new ObservableCollection<CListItem>();
                oItemDetail.BasicProperties.DispensingInstruction.forEach(
                  (oDispens) => {
                    let oDisItem: CListItem = ObjectHelper.CreateObject(
                      new CListItem(),
                      {
                        DisplayText: oDispens.Name,
                        Value: oDispens.Code,
                        IsSelected: true,
                      }
                    );
                    if (
                      String.Equals(
                        oDisItem.Value,
                        'CC_OTHER',
                        StringComparison.InvariantCultureIgnoreCase
                      )
                    )
                      oDisItem.Tag =
                        oItemDetail.BasicProperties.OtherDispensingInstruction;
                    this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction.Add(
                      oDisItem
                    );
                  }
                );
                this.FormViewerDetails.BasicDetails.OriginalDispensingInstruction =
                  this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction;
              } else {
                let nCount: number =
                  this.FormViewerDetails.BasicDetails.DispensingInstruction
                    .Count;
                oItemDetail.BasicProperties.DispensingInstruction.forEach(
                  (oDispens) => {
                    for (let i: number = 0; i < nCount; i++) {
                      if (
                        String.Equals(
                          this.FormViewerDetails.BasicDetails
                            .DispensingInstruction[i].Value,
                          oDispens.Code,
                          StringComparison.OrdinalIgnoreCase
                        )
                      ) {
                        this.FormViewerDetails.BasicDetails.DispensingInstruction[
                          i
                        ].IsSelected = true;
                        if (
                          String.Equals(
                            this.FormViewerDetails.BasicDetails
                              .DispensingInstruction[i].Value,
                            'CC_OTHER',
                            StringComparison.InvariantCultureIgnoreCase
                          )
                        )
                          this.FormViewerDetails.BasicDetails.DispensingInstruction[
                            i
                          ].Tag =
                            oItemDetail.BasicProperties.OtherDispensingInstruction;
                        break;
                      }
                    }
                    this.FormViewerDetails.BasicDetails.OriginalDispensingInstruction =
                      this.FormViewerDetails.BasicDetails.DispensingInstruction;
                  }
                );
              }
            }
            if (
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.OtherDispensingInstruction
              )
            ) {
              this.FormViewerDetails.BasicDetails.OtherDispensingInstruction =
                oItemDetail.BasicProperties.OtherDispensingInstruction;
            }
          }
          if (
            this.FormViewerDetails.BasicDetails != null &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration
          ) {
            this.FormViewerDetails.BasicDetails.IsenableReviewAfter = true;
          }
          if (
            oItemDetail.BasicProperties.Statusflags != null &&
            !String.Equals(
              ActionCode,
              CAActivity.CA_UNHOLD,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.IsHold =
              oItemDetail.BasicProperties.Statusflags.IsHold.Equals('1');
          }
          let isInfusion: boolean = false;
          let IsAdmintimesReq: boolean = true;
          if (
            String.Equals(
              this.FormViewerDetails.BasicDetails.itemSubType,
              DrugItemSubTypeCode.MEDICAL_GAS,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            (this.FormViewerDetails.BasicDetails.InfusionType != null &&
              (String.Equals(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.CONTINUOUS,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
                String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypeCode.SINGLEDOSEVOLUME,
                  StringComparison.CurrentCultureIgnoreCase
                ) ||
                String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypeCode.FLUID,
                  StringComparison.CurrentCultureIgnoreCase
                ))) ||
            (this.FormViewerDetails.BasicDetails.InfusionType != null &&
              String.Equals(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.PCA,
                StringComparison.CurrentCultureIgnoreCase
              ))
          ) {
            isInfusion = true;
            IsAdmintimesReq = false;
          } else if (
            PatientContext.IsINFUSIONON &&
            this.FormViewerDetails.BasicDetails.Route != null &&
            this.FormViewerDetails.BasicDetails.Route.Tag != null &&
            String.Equals(
              Convert.ToString(this.FormViewerDetails.BasicDetails.Route.Tag),
              '1',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            isInfusion = true;
          }
          if (oItemDetail.BasicProperties.Dose != null) {
            if (
              oItemDetail.BasicProperties.Dose.DoseType != null &&
              !String.IsNullOrEmpty(
                oItemDetail.BasicProperties.Dose.DoseType.Code
              )
            ) {
              let sDoseTypeCode: string =
                oItemDetail.BasicProperties.Dose.DoseType.Code;
              if (
                String.Equals(
                  sDoseTypeCode,
                  DoseTypeCode.STEPPED,
                  StringComparison.OrdinalIgnoreCase
                ) ||
                String.Equals(
                  sDoseTypeCode,
                  DoseTypeCode.VARIABLE,
                  StringComparison.OrdinalIgnoreCase
                )
              ) {
                sDoseTypeCode = DoseTypeCode.STEPPEDVARIABLE;
              }
              if (
                PatientContext.PrescriptionType !=
                  PrescriptionTypes.ForAdministration &&
                String.Equals(
                  sDoseTypeCode,
                  DoseTypeCode.TITRATED,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ) {
                if (
                  !this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                    'S'
                  )
                ) {
                  this.FormViewerDetails.BasicDetails.DoseType =
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: sDoseTypeCode,
                    });
                  this.FormViewerDetails.BasicDetails.DischargeDoseTypeForTitrated =
                    sDoseTypeCode;
                }
                this.FormViewerDetails.BasicDetails.Dose = String.Empty;
                this.FormViewerDetails.BasicDetails.DoseUOM = null;
              } else {
                if (
                  !this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                    'S'
                  )
                )
                  this.FormViewerDetails.BasicDetails.DoseType =
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: sDoseTypeCode,
                    });
              }
              if (
                this.FormViewerDetails.BasicDetails.DoseType != null &&
                oItemDetail.TitratedDoseinfo != null &&
                String.Equals(
                  this.FormViewerDetails.BasicDetails.DoseType.Value,
                  DoseTypeCode.TITRATED,
                  StringComparison.CurrentCultureIgnoreCase
                ) &&
                this.ActionCode != ActivityTypes.Reorder
              ) {
                this.FormViewerDetails.BasicDetails.TitratedDoseInstruction =
                  ObjectHelper.CreateObject(new CListItem(), {
                    Value:
                      oItemDetail.TitratedDoseinfo.TitratedAdminInstruction,
                  });
              }
              if (
                !String.IsNullOrEmpty(sDoseTypeCode) &&
                this.ActionCode == ActivityTypes.Reorder &&
                this.FormViewerDetails.BasicDetails
                  .IsCheckPerviousTitratedDoseDetails &&
                String.Equals(
                  sDoseTypeCode,
                  DoseTypeCode.TITRATED,
                  StringComparison.InvariantCultureIgnoreCase
                ) &&
                !this.bIsReprescribe
              ) {
                this.FormViewerDetails.BasicDetails.IsReviewtiratedosesLinkVisibility =
                  Visibility.Visible;
                this.bSourceTitratedDoseType = true;
              } else {
                this.FormViewerDetails.BasicDetails.IsReviewtiratedosesLinkVisibility =
                  Visibility.Collapsed;
                this.bSourceTitratedDoseType = false;
              }
              if (
                this.FormViewerDetails != null &&
                this.FormViewerDetails.BasicDetails != null &&
                this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
                this.FormViewerDetails.BasicDetails.DefaultDetails.DoseType !=
                  null &&
                this.FormViewerDetails.BasicDetails.DefaultDetails.DoseType
                  .Count > 0
              ) {
                let oDoseType =
                  this.FormViewerDetails.BasicDetails.DefaultDetails.DoseType.Where(
                    (DType) => DType.Value == sDoseTypeCode
                  ).Select((DType) => DType);
                if (oDoseType != null && oDoseType.Count() > 0) {
                  this.FormViewerDetails.BasicDetails.DoseType.Value =
                    sDoseTypeCode;
                  this.FormViewerDetails.BasicDetails.DoseType.DisplayText =
                    Convert.ToString(oDoseType.ElementAt(0));
                }
              }
              if (
                oItemDetail.BasicProperties.Dose.DoseRegime != null &&
                oItemDetail.BasicProperties.Dose.DoseRegime.Count > 0
              ) {
                if (
                  String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.ForAdministration
                  ) &&
                  this.ActionCode == ActivityTypes.Reorder &&
                  oItemDetail.BasicProperties.FrequencyDetails != null &&
                  !String.IsNullOrEmpty(
                    oItemDetail.BasicProperties.FrequencyDetails.FreqCode
                  ) &&
                  String.Equals(
                    oItemDetail.BasicProperties.FrequencyDetails.FreqCode,
                    'CC_MEDDRSN2',
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks !=
                    null &&
                  oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks
                    .Count > 0
                ) {
                  this.FormViewerDetails.BasicDetails.DrugFreqUOMCode =
                    'CC_MEDDRSN2';
                  if (
                    String.Equals(
                      oItemDetail.BasicProperties.FrequencyDetails
                        .DaysOfWeeks[0],
                      'T',
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.IsSun = true;
                  }
                  if (
                    String.Equals(
                      oItemDetail.BasicProperties.FrequencyDetails
                        .DaysOfWeeks[1],
                      'T',
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.IsMon = true;
                  }
                  if (
                    String.Equals(
                      oItemDetail.BasicProperties.FrequencyDetails
                        .DaysOfWeeks[2],
                      'T',
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.IsTue = true;
                  }
                  if (
                    String.Equals(
                      oItemDetail.BasicProperties.FrequencyDetails
                        .DaysOfWeeks[3],
                      'T',
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.IsWed = true;
                  }
                  if (
                    String.Equals(
                      oItemDetail.BasicProperties.FrequencyDetails
                        .DaysOfWeeks[4],
                      'T',
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.IsThu = true;
                  }
                  if (
                    String.Equals(
                      oItemDetail.BasicProperties.FrequencyDetails
                        .DaysOfWeeks[5],
                      'T',
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.IsFri = true;
                  }
                  if (
                    String.Equals(
                      oItemDetail.BasicProperties.FrequencyDetails
                        .DaysOfWeeks[6],
                      'T',
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.IsSat = true;
                  }
                }
                if (
                  String.Equals(
                    sDoseTypeCode,
                    DoseTypeCode.NORMAL,
                    StringComparison.InvariantCultureIgnoreCase
                  ) ||
                  String.Equals(
                    sDoseTypeCode,
                    DoseTypeCode.DOSAGERANGE,
                    StringComparison.InvariantCultureIgnoreCase
                  ) ||
                  String.Equals(
                    sDoseTypeCode,
                    DoseTypeCode.TITRATED,
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ) {
                  let oDoseRegime: IPPMAManagePrescSer.DoseRegime =
                    oItemDetail.BasicProperties.Dose.DoseRegime[0];
                  if (
                    String.Equals(
                      sDoseTypeCode,
                      DoseTypeCode.DOSAGERANGE,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.Dose =
                      oDoseRegime.LowerDose > 0
                        ? Convert.ToString(oDoseRegime.LowerDose)
                        : oDoseRegime.LowerDose == 0 &&
                          oDoseRegime.UpperDose > 0
                        ? Convert.ToString(oDoseRegime.LowerDose)
                        : String.Empty;
                  } else {
                    this.FormViewerDetails.BasicDetails.Dose =
                      oDoseRegime.LowerDose != 0
                        ? Convert.ToString(oDoseRegime.LowerDose)
                        : String.Empty;
                  }
                  if (this.ActionCode == ActivityTypes.Amend) {
                    this.FormViewerDetails.BasicDetails.OriginalDose =
                      oDoseRegime.LowerDose != 0
                        ? Convert.ToString(oDoseRegime.LowerDose)
                        : String.Empty;
                  }
                  this.FormViewerDetails.BasicDetails.UpperDose =
                    oDoseRegime.UpperDose > 0
                      ? Convert.ToString(oDoseRegime.UpperDose)
                      : String.Empty;
                  if (
                    oDoseRegime.DoseUOM != null &&
                    !String.IsNullOrEmpty(oDoseRegime.DoseUOM.UOMName) &&
                    (!String.IsNullOrEmpty(oDoseRegime.DoseUOM.UOMCode) ||
                      oDoseRegime.DoseUOM.UOMId > 0)
                  ) {
                    if (
                      !String.IsNullOrEmpty(oDoseRegime.DoseUOM.UOMCode) &&
                      !this.FormViewerDetails.BasicDetails.DoseUOMTypeCode.ContainsKey(
                        oDoseRegime.DoseUOM.UOMCode
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.DoseUOMTypeCode.Add(
                        oDoseRegime.DoseUOM.UOMCode,
                        oDoseRegime.DoseUOM.UOMTypeCode
                      );
                    }
                    this.FormViewerDetails.BasicDetails.DoseUOM =
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: oDoseRegime.DoseUOM.UOMName,
                        Value: Convert.ToString(oDoseRegime.DoseUOM.UOMId),
                        Tag: oDoseRegime.DoseUOM.UOMCode,
                      });
                    if (this.ActionCode == ActivityTypes.Amend) {
                      this.FormViewerDetails.BasicDetails.OriginalDoseUOM =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: oDoseRegime.DoseUOM.UOMName,
                          Value: Convert.ToString(oDoseRegime.DoseUOM.UOMId),
                          Tag: oDoseRegime.DoseUOM.UOMCode,
                        });
                    }
                  }
                  if (
                    String.Equals(
                      sDoseTypeCode,
                      DoseTypeCode.NORMAL,
                      StringComparison.InvariantCultureIgnoreCase
                    ) ||
                    String.Equals(
                      sDoseTypeCode,
                      DoseTypeCode.DOSAGERANGE,
                      StringComparison.InvariantCultureIgnoreCase
                    ) ||
                    String.Equals(
                      sDoseTypeCode,
                      DoseTypeCode.TITRATED,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    this.FillDaysOFWeeks(oItemDetail.BasicProperties);
                  }
                  this.FormViewerDetails.BasicDetails.PrescibableItemOID =
                    oDoseRegime.PrescibableItemOID;
                  if (!isInfusion || IsAdmintimesReq) {
                    this.GetAdminTimes(oItemDetail, oDoseRegime);
                  }
                } else if (
                  String.Equals(
                    sDoseTypeCode,
                    DoseTypeCode.CONDITIONAL,
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ) {
                  this.FillDaysOFWeeks(oItemDetail.BasicProperties);
                  this.FillConditionalDoseRegime(
                    oItemDetail,
                    isInfusion,
                    IsAdmintimesReq
                  );
                } else {
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails =
                    new ObservableCollection<MultipleDoseDetail>();
                  let nCount: number =
                    oItemDetail.BasicProperties.Dose.DoseRegime != null
                      ? oItemDetail.BasicProperties.Dose.DoseRegime.Count
                      : 0;
                  if (
                    !(
                      nCount == 1 &&
                      oItemDetail.BasicProperties.Dose.DoseRegime[0].DoseUOM ==
                        null
                    )
                  ) {
                    {
                      let _IsAnyStepContainsDoses: boolean =
                        oItemDetail.BasicProperties.Dose.DoseRegime.Any(
                          (c) =>
                            !String.IsNullOrEmpty(c.DurationUOMCode) &&
                            String.Equals(
                              c.DurationUOMCode,
                              ConstDurationUOM.Doses,
                              StringComparison.InvariantCultureIgnoreCase
                            )
                        );
                      let iIndex: number = 0;
                      if (
                        !this.bIsReprescribe &&
                        this.ActionCode == ActivityTypes.Reorder &&
                        !String.IsNullOrEmpty(this.sourcePrescriptionType) &&
                        ((this.FormViewerDetails.BasicDetails
                          .IsReorderStartDTTMBlankForDifEncounter &&
                          ((String.Equals(
                            this.sourcePrescriptionType,
                            PrescriptionTypes.Clerking,
                            StringComparison.InvariantCultureIgnoreCase
                          ) &&
                            !String.Equals(
                              PatientContext.PrescriptionType,
                              PrescriptionTypes.Clerking,
                              StringComparison.InvariantCultureIgnoreCase
                            )) ||
                            (!String.Equals(
                              this.sourcePrescriptionType,
                              PrescriptionTypes.Clerking,
                              StringComparison.InvariantCultureIgnoreCase
                            ) &&
                              !String.Equals(
                                PatientContext.PrescriptionType,
                                PrescriptionTypes.Clerking,
                                StringComparison.InvariantCultureIgnoreCase
                              )))) ||
                          (!this.FormViewerDetails.BasicDetails
                            .IsReorderStartDTTMBlankForDifEncounter &&
                            String.Equals(
                              this.sourcePrescriptionType,
                              PrescriptionTypes.Clerking,
                              StringComparison.InvariantCultureIgnoreCase
                            )))
                      ) {
                        this.IsFormViewDataLoadedAfterGetPresItemDtls = true;
                        let oTempDoseRegime =
                          oItemDetail.BasicProperties.Dose.DoseRegime.Where(
                            (c) =>
                              c.FrequencyDetails != null &&
                              c.FrequencyDetails.Frequency != null &&
                              !String.IsNullOrEmpty(
                                c.FrequencyDetails.Frequency.Code
                              ) &&
                              !c.FrequencyDetails.Frequency.Code.Contains(
                                CConstants.OnceOnlyFrequency
                              )
                          ).Select((s) => s);
                        if (
                          oTempDoseRegime != null &&
                          oTempDoseRegime.Count() > 0
                        ) {
                          oItemDetail.BasicProperties.Dose.DoseRegime =
                            new ObservableCollection<IPPMAManagePrescSer.DoseRegime>(
                              oTempDoseRegime
                            );
                        } else {
                          oItemDetail.BasicProperties.Dose.DoseRegime =
                            new ObservableCollection<IPPMAManagePrescSer.DoseRegime>();
                        }
                      }
                      oItemDetail.BasicProperties.Dose.DoseRegime.forEach(
                        (oDoseRegime) => {
                          let oDetails: MultipleDoseDetail =
                            new MultipleDoseDetail();
                          oDetails.LowerDose = oDoseRegime.LowerDose;
                          oDetails.UpperDose = oDoseRegime.UpperDose;
                          oDetails.OriginalLowerDose = Convert.ToString(
                            oDoseRegime.LowerDose
                          );
                          oDetails.OriginalUpperDose = Convert.ToString(
                            oDoseRegime.UpperDose
                          );
                          if (
                            oDoseRegime.DoseUOM instanceof
                            IPPMAManagePrescSer.UOM
                          ) {
                            oDetails.DoseUOM = ObjectHelper.CreateObject(
                              new CListItem(),
                              {
                                DisplayText: oDoseRegime.DoseUOM.UOMName,
                                Value: Convert.ToString(
                                  oDoseRegime.DoseUOM.UOMId
                                ),
                                Tag: !String.IsNullOrEmpty(
                                  oDoseRegime.DoseUOM.OperationMode
                                )
                                  ? oDoseRegime.DoseUOM.OperationMode
                                  : oDoseRegime.DoseUOM.UOMCode,
                              }
                            );
                            if (
                              !String.IsNullOrEmpty(
                                oDoseRegime.DoseUOM.UOMCode
                              ) &&
                              this.FormViewerDetails.BasicDetails
                                .DoseUOMTypeCode != null &&
                              !this.FormViewerDetails.BasicDetails.DoseUOMTypeCode.ContainsKey(
                                oDoseRegime.DoseUOM.UOMCode
                              )
                            ) {
                              this.FormViewerDetails.BasicDetails.DoseUOMTypeCode.Add(
                                oDoseRegime.DoseUOM.UOMCode,
                                oDoseRegime.DoseUOM.UOMTypeCode
                              );
                            }
                            if (oDoseRegime.Duration != null) {
                              oDetails.Duration = oDoseRegime.Duration.Value;
                              if (
                                !String.IsNullOrEmpty(
                                  oDoseRegime.Duration.UOMCode
                                )
                              ) {
                                oDetails.DurationUOM =
                                  ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText: oDoseRegime.Duration.UOMName,
                                    Value: oDoseRegime.Duration.UOMCode,
                                  });
                              }
                            }
                          }
                          oDetails.IsAnyStepContainsDosesDuration =
                            _IsAnyStepContainsDoses;
                          if (
                            !String.IsNullOrEmpty(oDoseRegime.DosingInstruction)
                          )
                            oDetails.DoseInstructions =
                              oDoseRegime.DosingInstruction;
                          if (
                            oDoseRegime != null &&
                            oDoseRegime instanceof
                              IPPMAManagePrescSer.IPPDoseRegime ||  oDoseRegime instanceof IPPMAManagePrescSer.DoseRegime
                          ) {
                            let oIPPDoseRegime: IPPMAManagePrescSer.IPPDoseRegime =
                              ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
                                oDoseRegime,
                                IPPMAManagePrescSer.IPPDoseRegime
                              );
                            if (
                              oIPPDoseRegime != null &&
                              !String.IsNullOrEmpty(
                                oIPPDoseRegime.FrequencyType
                              )
                            ) {
                              if (
                                String.Equals(
                                  oIPPDoseRegime.FrequencyType,
                                  'CC_INTERVAL',
                                  StringComparison.InvariantCultureIgnoreCase
                                )
                              ) {
                                oDetails.FrequencyType =
                                  CConstants.IntervalFreq;
                              }
                              if (
                                String.Equals(
                                  oIPPDoseRegime.FrequencyType,
                                  'CC_PERIOD',
                                  StringComparison.InvariantCultureIgnoreCase
                                )
                              ) {
                                oDetails.FrequencyType =
                                  CConstants.PeriodFrequency;
                              }
                            }
                          }
                          if (
                            this.FormViewerDetails.BasicDetails.InfusionType !=
                              null &&
                            String.Compare(
                              this.FormViewerDetails.BasicDetails.InfusionType
                                .Value,
                              InfusionTypeCode.INTERMITTENT,
                              StringComparison.CurrentCultureIgnoreCase
                            ) == 0
                          ) {
                            oDetails.IsInfusionData = true;
                            if (
                              oDoseRegime.InfusionDetails != null &&
                              oDoseRegime.InfusionDetails.Count > 0
                            ) {
                              if (
                                oDoseRegime.InfusionDetails[0]
                                  .Duration instanceof
                                IPPMAManagePrescSer.MeasurableObject
                              ) {
                                oDetails.Duration =
                                  oDoseRegime.InfusionDetails[0].Duration.Value;
                                oDetails.DurationUOM =
                                  ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText:
                                      oDoseRegime.InfusionDetails[0].Duration
                                        .UOMName,
                                    Value:
                                      oDoseRegime.InfusionDetails[0].Duration
                                        .UOMCode,
                                  });
                              }
                              if (
                                !String.IsNullOrEmpty(
                                  oDoseRegime.InfusionDetails[0]
                                    .VariableDoseInstruction
                                )
                              )
                                oDetails.DoseInstructions =
                                  oDoseRegime.InfusionDetails[0].VariableDoseInstruction;
                              if (
                                !String.IsNullOrEmpty(
                                  oDoseRegime.InfusionDetails[0].InfusionRate
                                )
                              )
                                oDetails.InfusionRate =
                                  oDoseRegime.InfusionDetails[0].InfusionRate;
                              if (
                                !String.IsNullOrEmpty(
                                  oDoseRegime.InfusionDetails[0]
                                    .UpperInfusionRate
                                )
                              )
                                oDetails.InfusionUpperrate =
                                  oDoseRegime.InfusionDetails[0].UpperInfusionRate;
                              if (
                                oDoseRegime.InfusionDetails[0]
                                  .RateNumerator instanceof
                                IPPMAManagePrescSer.UOM
                              ) {
                                oDetails.Infratenumeratoruom =
                                  ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText:
                                      oDoseRegime.InfusionDetails[0]
                                        .RateNumerator.UOMName,
                                    Value: Convert.ToString(
                                      oDoseRegime.InfusionDetails[0]
                                        .RateNumerator.UOMId
                                    ),
                                  });
                              }
                              if (
                                oDoseRegime.InfusionDetails[0]
                                  .RateDenominator instanceof
                                IPPMAManagePrescSer.UOM
                              ) {
                                oDetails.InfrateDenominatoruom =
                                  ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText:
                                      oDoseRegime.InfusionDetails[0]
                                        .RateDenominator.UOMName,
                                    Value: Convert.ToString(
                                      oDoseRegime.InfusionDetails[0]
                                        .RateDenominator.UOMId
                                    ),
                                  });
                              }
                            }
                            if (this.PrescriptionOID <= 0) {
                              if (
                                oDetails.DurationUOM != null &&
                                oDetails.Duration > 0 &&
                                !String.IsNullOrEmpty(
                                  oDoseRegime.DurationUOMCode
                                ) &&
                                oDoseRegime.Duration != null &&
                                !String.IsNullOrEmpty(
                                  oDoseRegime.Duration.UOMName
                                )
                              ) {
                                oDetails.DurationUOM.Value =
                                  oDoseRegime.DurationUOMCode;
                                oDetails.DurationUOM.DisplayText =
                                  oDoseRegime.Duration.UOMName;
                              } else if (
                                oDetails.Duration > 0 &&
                                !String.IsNullOrEmpty(
                                  oDoseRegime.DurationUOMCode
                                ) &&
                                oDoseRegime.Duration != null &&
                                !String.IsNullOrEmpty(
                                  oDoseRegime.Duration.UOMName
                                )
                              ) {
                                oDetails.DurationUOM =
                                  ObjectHelper.CreateObject(new CListItem(), {
                                    Value: oDoseRegime.DurationUOMCode,
                                    DisplayText: oDoseRegime.Duration.UOMName,
                                  });
                              }
                              if (
                                oDoseRegime instanceof
                                IPPMAManagePrescSer.IPPDoseRegime
                              ) {
                                let objInfDetails: IPPMAManagePrescSer.IPPDoseRegime =
                                  ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
                                    oDoseRegime,
                                    IPPMAManagePrescSer.IPPDoseRegime
                                  );
                                if (objInfDetails != null) {
                                  oDetails.InfusionRate =
                                    objInfDetails.InfusionRate;
                                  if (
                                    !String.IsNullOrEmpty(
                                      objInfDetails.UpperRate
                                    )
                                  )
                                    oDetails.InfusionUpperrate =
                                      objInfDetails.UpperRate;
                                  if (
                                    objInfDetails.InfusionRateNumUOM instanceof
                                    IPPMAManagePrescSer.UOM
                                  ) {
                                    oDetails.Infratenumeratoruom =
                                      ObjectHelper.CreateObject(
                                        new CListItem(),
                                        {
                                          DisplayText:
                                            objInfDetails.InfusionRateNumUOM
                                              .UOMName,
                                          Value:
                                            objInfDetails.InfusionRateNumUOM.UOMId.ToString(),
                                        }
                                      );
                                  }
                                  if (
                                    objInfDetails.InfusionRateDenUOM instanceof
                                    IPPMAManagePrescSer.UOM
                                  ) {
                                    oDetails.InfrateDenominatoruom =
                                      ObjectHelper.CreateObject(
                                        new CListItem(),
                                        {
                                          DisplayText:
                                            objInfDetails.InfusionRateDenUOM
                                              .UOMName,
                                          Value:
                                            objInfDetails.InfusionRateDenUOM.UOMId.ToString(),
                                        }
                                      );
                                  }
                                }
                              }
                            }
                          } else {
                            if (
                              oDoseRegime.Duration instanceof
                              IPPMAManagePrescSer.MeasurableObject
                            ) {
                              oDetails.Duration = oDoseRegime.Duration.Value;
                              oDetails.DurationUOM = ObjectHelper.CreateObject(
                                new CListItem(),
                                {
                                  DisplayText: oDoseRegime.Duration.UOMName,
                                  Value: oDoseRegime.Duration.UOMCode,
                                }
                              );
                            }
                            if (
                              !String.IsNullOrEmpty(oDoseRegime.DurationUOMCode)
                            ) {
                              if (oDetails.DurationUOM == null)
                                oDetails.DurationUOM = new CListItem();
                              oDetails.DurationUOM.Value =
                                oDoseRegime.DurationUOMCode;
                            }
                            oDetails.DoseInstructions =
                              oDoseRegime.DosingInstruction;
                            if (
                              oDoseRegime.InfusionDetails != null &&
                              oDoseRegime.InfusionDetails.Count > 0
                            ) {
                              oDetails.InfusionRate =
                                oDoseRegime.InfusionDetails[0].InfusionRate;
                              if (
                                !String.IsNullOrEmpty(
                                  oDoseRegime.InfusionDetails[0]
                                    .UpperInfusionRate
                                )
                              )
                                oDetails.InfusionUpperrate =
                                  oDoseRegime.InfusionDetails[0].UpperInfusionRate;
                              if (
                                oDoseRegime.InfusionDetails[0]
                                  .RateNumerator instanceof
                                IPPMAManagePrescSer.UOM
                              ) {
                                oDetails.Infratenumeratoruom =
                                  ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText:
                                      oDoseRegime.InfusionDetails[0]
                                        .RateNumerator.UOMName,
                                    Value: Convert.ToString(
                                      oDoseRegime.InfusionDetails[0]
                                        .RateNumerator.UOMId
                                    ),
                                  });
                              }
                              if (
                                oDoseRegime.InfusionDetails[0]
                                  .RateDenominator instanceof
                                IPPMAManagePrescSer.UOM
                              ) {
                                oDetails.InfrateDenominatoruom =
                                  ObjectHelper.CreateObject(new CListItem(), {
                                    DisplayText:
                                      oDoseRegime.InfusionDetails[0]
                                        .RateDenominator.UOMName,
                                    Value: Convert.ToString(
                                      oDoseRegime.InfusionDetails[0]
                                        .RateDenominator.UOMId
                                    ),
                                  });
                              }
                            }
                          }
                          if (
                            nCount == 1 &&
                            String.Equals(
                              sDoseTypeCode,
                              DoseTypeCode.TITRATED,
                              StringComparison.InvariantCultureIgnoreCase
                            )
                          ) {
                            if (
                              PatientContext.PrescriptionType ==
                              PrescriptionTypes.ForAdministration
                            ) {
                              this.FormViewerDetails.BasicDetails.Dose =
                                Convert.ToString(oDoseRegime.LowerDose);
                              this.FormViewerDetails.BasicDetails.DoseUOM =
                                oDetails.DoseUOM;
                              this.GetAdminTimes(
                                oItemDetail,
                                oItemDetail.BasicProperties.Dose.DoseRegime[0]
                              );
                            }
                          }
                          oDetails.StartDTTM = oDoseRegime.StartDTTM;
                          oDetails.EndDTTM = oDoseRegime.EndDTTM;
                          if (
                            PatientContext.PrescriptionType !=
                            PrescriptionTypes.ForAdministration
                          ) {
                            if (
                              oDoseRegime.FrequencyDetails != null &&                              
                              // oDoseRegime.FrequencyDetails instanceof
                              //   IPPMAManagePrescSer.IPPFrequencyDetails &&
                              (<IPPMAManagePrescSer.IPPFrequencyDetails>(
                                oDoseRegime.FrequencyDetails
                              )).DaysOfWeek != null
                            ) {
                              oDetails.DaysOfWeek = (<
                                IPPMAManagePrescSer.IPPFrequencyDetails
                              >oDoseRegime.FrequencyDetails).DaysOfWeek.ToArray();
                            }
                          }
                          if (this.ActionCode == ActivityTypes.Prescribe) {
                            if (iIndex == 0) {
                              //R/f from 
                              let TempDTTM: DateTime = CommonBB.GetServerDateTime();
                              let CurrDTTM: DateTime = DateTime.MinValue;
                              if (
                                DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartDTTM,
                                DateTime.MinValue)
                              ) {
                                if (
                                  DateTime.NotEquals(this.FormViewerDetails.BasicDetails
                                    .StartPrescriptionTime, DateTime.MinValue)
                                )
                                  oDetails.StartDTTM =
                                    this.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
                                      this.FormViewerDetails.BasicDetails
                                        .StartPrescriptionTime
                                    );
                                else
                                  oDetails.StartDTTM =
                                    this.FormViewerDetails.BasicDetails.StartDTTM;
                              } else if (
                                this.ActionCode == ActivityTypes.Prescribe &&
                                DateTime.Equals(this.FormViewerDetails.BasicDetails.StartDTTM,
                                  DateTime.MinValue)
                              ) {
                                //R/F from 2.23 SV TFS 194995 
                                let _IsFutureDate : Boolean = false;
                                if(DateTime.NotEquals(PatientContext.EncounterStartDate,DateTime.MinValue) && DateTime.LessThan(TempDTTM.Date, PatientContext.EncounterStartDate.Date))
                                {
                                  _IsFutureDate = true;
                                  CurrDTTM = PatientContext.EncounterStartDate;
                                  this.FormViewerDetails.BasicDetails.TimeMinValueFlag = false;
                                }
                                else
                                {
                                  CurrDTTM = TempDTTM;
                                }

                                if (
                                  !String.Equals(
                                    PatientContext.PrescriptionType,
                                    PrescriptionTypes.Clerking
                                  )
                                ) {
                                  if(_IsFutureDate)
                                  {
                                    oDetails.StartDTTM = CurrDTTM.Date;
                                  }
                                  else
                                  {
                                    oDetails.StartDTTM = CurrDTTM;
                                  }
                                } else {
                                  oDetails.StartDTTM = CurrDTTM.Date;
                                }
                              } else {
                                oDetails.StartDTTM =
                                  DateTime.GreaterThan(PatientContext.EncounterStartDate.Date,
                                  this.dtNow)
                                    ? PatientContext.EncounterStartDate.Date
                                    : this.dtNow;
                              }
                              oDetails.EndDTTM = this.CalculateEndDTTM(
                                oDetails.StartDTTM,
                                oItemDetail.BasicProperties.Dose.DoseRegime[
                                  iIndex
                                ].Duration,
                                oItemDetail.BasicProperties.Dose.DoseRegime[
                                  iIndex
                                ].DurationUOMCode
                              );
                            } else {
                              if (
                                DateTime.NotEquals(this.FormViewerDetails.BasicDetails
                                  .MultiDoseDetails[iIndex - 1].EndDTTM,
                                DateTime.MinValue)
                              ) {
                                oDetails.StartDTTM =
                                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                                    iIndex - 1
                                  ].EndDTTM.AddMinutes(1);
                                oDetails.EndDTTM = this.CalculateEndDTTM(
                                  oDetails.StartDTTM,
                                  oItemDetail.BasicProperties.Dose.DoseRegime[
                                    iIndex
                                  ].Duration,
                                  oItemDetail.BasicProperties.Dose.DoseRegime[
                                    iIndex
                                  ].DurationUOMCode
                                );
                              }
                            }
                          }
                          oDetails.PrescriptionItemDosageOID =
                            oDoseRegime.PrescibableItemOID;
                          let sFreqTag: string[] = null;
                          let nDurationInDays: number = 0;
                          nDurationInDays =
                          DateTime.NotEquals(oDetails.EndDTTM, DateTime.MinValue)
                              ? Convert.ToInt32(
                                  oDetails.EndDTTM.Subtract(oDetails.StartDTTM)
                                    .TotalDays
                                ) + 1
                              : 0;
                          if (
                            oDoseRegime.FrequencyDetails instanceof
                              IPPMAManagePrescSer.FrequencyDetails &&
                            oDoseRegime.FrequencyDetails.Frequency instanceof
                              IPPMAManagePrescSer.ObjectInfo
                          ) {
                            sFreqTag = (
                              !String.IsNullOrEmpty(
                                oDoseRegime.FrequencyDetails.Frequency.Code
                              )
                                ? oDoseRegime.FrequencyDetails.Frequency.Code
                                : '0~'
                            ).Split('~');
                            oDetails.Frequency = ObjectHelper.CreateObject(
                              new CListItem(),
                              {
                                DisplayText:
                                  oDoseRegime.FrequencyDetails.Frequency.Name,
                                Value: Convert.ToString(
                                  oDoseRegime.FrequencyDetails.Frequency.OID
                                ),
                                Tag: sFreqTag,
                              }
                            );
                            if (
                              PatientContext.PrescriptionType ==
                                PrescriptionTypes.ForAdministration &&
                              oDoseRegime.FrequencyDetails != null &&
                              // oDoseRegime.FrequencyDetails instanceof
                              //   IPPMAManagePrescSer.IPPFrequencyDetails &&
                              (<IPPMAManagePrescSer.IPPFrequencyDetails>(
                                oDoseRegime.FrequencyDetails
                              )).DaysOfWeek != null
                            ) {
                              oDetails.DaysOfWeek = (<
                                IPPMAManagePrescSer.IPPFrequencyDetails
                              >oDoseRegime.FrequencyDetails).DaysOfWeek.ToArray();
                            }
                            if (
                              !oDetails.IsDaywiseView &&
                              oDoseRegime.FrequencyDetails.ScheduledTimes ==
                                null &&
                              oDoseRegime.AdministeredTimeAndDoseDetails !=
                                null &&
                              oDoseRegime.AdministeredTimeAndDoseDetails.Count >
                                0
                            ) {
                              let nAdminTimeCnt: number =
                                oDoseRegime.AdministeredTimeAndDoseDetails
                                  .Count;
                              oDoseRegime.FrequencyDetails.ScheduledTimes =
                                new ObservableCollection<IPPMAManagePrescSer.Scheduledetails>();
                              let dLDose: number = 0;
                              for (let i: number = 0; i < nAdminTimeCnt; i++) {
                                let oIPPScheduledetails: IPPMAManagePrescSer.IPPScheduledetails =
                                  new IPPMAManagePrescSer.IPPScheduledetails();
                                oIPPScheduledetails.ScheduleDate =
                                  this.dtNow.AddMinutes(
                                    oDoseRegime.AdministeredTimeAndDoseDetails[
                                      i
                                    ].ScheduledTimeInMins
                                  );
                                if (
                                  Number.TryParse(
                                    oDoseRegime.AdministeredTimeAndDoseDetails[
                                      i
                                    ].Dose,
                                    (o) => (dLDose = o)
                                  )
                                ) {
                                  oIPPScheduledetails.Dose = dLDose;
                                }
                                oDoseRegime.FrequencyDetails.ScheduledTimes.Add(
                                  oIPPScheduledetails
                                );
                              }
                            }
                            if (
                              !oDetails.IsDaywiseView &&
                              oDoseRegime.AdministeredTimeAndDoseDetails !=
                                null &&
                              oDoseRegime.AdministeredTimeAndDoseDetails.Count >
                                0
                            ) {
                              let nAdminTimeCnt: number =
                                oDoseRegime.AdministeredTimeAndDoseDetails
                                  .Count;
                              oDetails.lstofNonDaywiseDoses =
                                new List<string>();
                              for (let i: number = 0; i < nAdminTimeCnt; i++) {
                                if (
                                  !String.IsNullOrEmpty(
                                    oDoseRegime.AdministeredTimeAndDoseDetails[
                                      i
                                    ].Dose
                                  )
                                ) {
                                  oDetails.lstofNonDaywiseDoses.Add(
                                    oDoseRegime.AdministeredTimeAndDoseDetails[
                                      i
                                    ].Dose
                                  );
                                }
                              }
                            }
                            if (
                              oDoseRegime.FrequencyDetails.ScheduledTimes !=
                                null &&
                              oDoseRegime.FrequencyDetails.ScheduledTimes
                                .Count > 0
                            ) {
                              let nScheduleDataCount: number = 0;
                              let sceduledTimelst: List<string> =
                                new List<string>();
                              let sceduledDateTimelst: List<DateTime> =
                                new List<DateTime>();
                              let sceduledDaylst: List<number> =
                                new List<number>();
                              let nTotalScheduledTimesEmptyCount: number = 0;
                              let nTotalScheduleTimesCount: number = 0;
                              let IsAllScheduledTimesEmpty: boolean = false;
                              if (DateTime.Equals(oDoseRegime.StartDTTM, DateTime.MinValue)) {
                                nTotalScheduledTimesEmptyCount =
                                  oDoseRegime.FrequencyDetails.ScheduledTimes.Select(
                                    (s) =>
                                      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                                        s,
                                        IPPMAManagePrescSer.IPPScheduledetails
                                      ).ScheduleDate.ToString('HH:mm')
                                  )
                                    .Where((s) => s == '00:00')
                                    .Count();
                                nTotalScheduleTimesCount =
                                  oDoseRegime.FrequencyDetails.ScheduledTimes.Select(
                                    (s) =>
                                      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                                        s,
                                        IPPMAManagePrescSer.IPPScheduledetails
                                      ).ScheduleDate.ToString('HH:mm')
                                  ).Count();
                                IsAllScheduledTimesEmpty =
                                  nTotalScheduledTimesEmptyCount > 1 &&
                                  nTotalScheduledTimesEmptyCount ==
                                    nTotalScheduleTimesCount;
                              } else {
                                nTotalScheduleTimesCount =
                                  oDoseRegime.FrequencyDetails.ScheduledTimes.Select(
                                    (s) =>
                                      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                                        s,
                                        IPPMAManagePrescSer.IPPScheduledetails
                                      ).ScheduleDate.ToString('HH:mm')
                                  )
                                    .Distinct()
                                    .Count();
                                if (nTotalScheduleTimesCount > 1) {
                                  nTotalScheduledTimesEmptyCount =
                                    oDoseRegime.FrequencyDetails.ScheduledTimes.Select(
                                      (x) =>
                                        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                                          x,
                                          IPPMAManagePrescSer.IPPScheduledetails
                                        ).ScheduleDate.ToString('HH:mm')
                                    )
                                      .Distinct()
                                      .Where((x) => x == '00:00')
                                      .Count();
                                  IsAllScheduledTimesEmpty =
                                    nTotalScheduledTimesEmptyCount > 1 &&
                                    nTotalScheduledTimesEmptyCount ==
                                      nTotalScheduleTimesCount;
                                }
                              }
                              if (IsAllScheduledTimesEmpty) {
                                sceduledDateTimelst =
                                  oDoseRegime.FrequencyDetails.ScheduledTimes.Select(
                                    (s) =>
                                      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                                        s,
                                        IPPMAManagePrescSer.IPPScheduledetails
                                      ).ScheduleDate
                                  )
                                    .Distinct()
                                    .ToList();
                                nScheduleDataCount = sceduledDateTimelst.Count;
                              } else {
                                if (
                                  oDoseRegime.AdministeredTimeAndDoseDetails !=
                                    null &&
                                  oDoseRegime.AdministeredTimeAndDoseDetails
                                    .Count > 0
                                )
                                  sceduledTimelst = this.GetTimeFromMinutes(
                                    oDoseRegime.AdministeredTimeAndDoseDetails
                                  );
                                else
                                  sceduledTimelst =
                                    oDoseRegime.FrequencyDetails.ScheduledTimes.Select(
                                      (s) =>
                                        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                                          s,
                                          IPPMAManagePrescSer.IPPScheduledetails
                                        ).ScheduleDate.ToUserDateTimeString(
                                          'HH:mm'
                                        )
                                    )
                                      .Distinct()
                                      .ToList();
                                sceduledTimelst = sceduledTimelst
                                  .OrderBy((s) => s)
                                  .ToList();
                                nScheduleDataCount = sceduledTimelst.Count;
                              }
                              if (
                                oDoseRegime.LowerDose == 0 &&
                                oDoseRegime.UpperDose == 0
                              ) {
                                oDetails.HyperlinkText = 'Changing dose';
                                let oIPPDoseRegime: IPPMAManagePrescSer.IPPDoseRegime =
                                  ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
                                    oDoseRegime,
                                    IPPMAManagePrescSer.IPPDoseRegime
                                  );
                                if (oIPPDoseRegime != null) {
                                  oDetails.IsDaywiseView =
                                    oIPPDoseRegime.IsDaywise.Equals('1');
                                }
                                oDetails.FreqDetails =
                                  new IPPMAManagePrescSer.CResMsgGetAdministrationTimes();
                                if (oDoseRegime.FrequencyDetails != null) {
                                  oDetails.FreqDetails.oFrequency =
                                    ObjectHelper.CreateObject(
                                      new IPPMAManagePrescSer.IPPFrequency(),
                                      {
                                        UOM:
                                          sFreqTag.length > 2
                                            ? sFreqTag[1]
                                            : String.Empty,
                                        IsPRN:
                                          sFreqTag.length > 2
                                            ? sFreqTag[0]
                                            : '0',
                                        Type: oIPPDoseRegime.FrequencyType,
                                        LowEvent:
                                          sFreqTag.length > 7
                                            ? !String.IsNullOrEmpty(sFreqTag[7])
                                              ? Convert.ToInt32(sFreqTag[7])
                                              : 0
                                            : 0,
                                        LowPeriod:
                                          sFreqTag.length > 8
                                            ? !String.IsNullOrEmpty(sFreqTag[8])
                                              ? Convert.ToInt32(sFreqTag[8])
                                              : 0
                                            : 0,
                                      }
                                    );
                                }
                                if (
                                  (this.ActionCode == ActivityTypes.Amend ||
                                    this.ActionCode == ActivityTypes.Reorder) &&
                                  oDetails.IsDaywiseView &&
                                  oDoseRegime.FrequencyDetails.ScheduledTimes !=
                                    null &&
                                  oDoseRegime.FrequencyDetails.ScheduledTimes
                                    .Count > 0 &&
                                  oDoseRegime.FrequencyDetails
                                    .ScheduledTimes[0] != null &&
                                  oDoseRegime.AdministeredTimeAndDoseDetails !=
                                    null &&
                                  oDoseRegime.AdministeredTimeAndDoseDetails
                                    .Count > 1 &&
                                    DateTime.NotEquals(oDoseRegime.EndDTTM, DateTime.MinValue) &&
                                  oDoseRegime.EndDTTM.Subtract(
                                    oDoseRegime.StartDTTM
                                  ).TotalMinutes >
                                    CConstants.NO_OF_MINUTESPER_DAY &&
                                  this.FormViewerDetails.BasicDetails
                                    .MultiDoseDetails != null &&
                                  this.FormViewerDetails.BasicDetails
                                    .MultiDoseDetails.Count == 0
                                ) {
                                  let _AdminTimesCount: number =
                                    oDoseRegime.AdministeredTimeAndDoseDetails
                                      .Count;
                                  let _AvailableAdminTimesOnStartDate =
                                    oDoseRegime.FrequencyDetails.ScheduledTimes.Where(
                                      (c) =>
                                        c != null &&
                                        DateTime.Equals((<
                                          IPPMAManagePrescSer.IPPScheduledetails
                                        >c).ScheduleDate.Date ,
                                          oDetails.StartDTTM.Date)
                                    )
                                      .Select(
                                        (s) =>
                                          (<
                                            IPPMAManagePrescSer.IPPScheduledetails
                                          >s).ScheduleDate.TimeOfDay
                                      )
                                      .ToList();
                                  let oIPPScheduledetails: IPPMAManagePrescSer.IPPScheduledetails =
                                    new IPPMAManagePrescSer.IPPScheduledetails();
                                  let TempStartDTTM: DateTime =
                                    oDetails.StartDTTM;
                                  if (
                                    _AvailableAdminTimesOnStartDate != null &&
                                    _AvailableAdminTimesOnStartDate.Count > 0 &&
                                    _AvailableAdminTimesOnStartDate.Count <
                                      _AdminTimesCount
                                  ) {
                                    for (
                                      let i: number = 0;
                                      i < _AdminTimesCount;
                                      i++
                                    ) {
                                      let ts: TimeSpan = TimeSpan.FromMinutes(
                                        oDoseRegime
                                          .AdministeredTimeAndDoseDetails[i]
                                          .ScheduledTimeInMins
                                      );
                                      if (
                                        ts != null &&
                                        ts != TimeSpan.MinValue &&
                                        !_AvailableAdminTimesOnStartDate.Contains(
                                          ts
                                        )
                                      ) {
                                        TempStartDTTM =
                                          TempStartDTTM.DateTime.Add(ts);
                                        oIPPScheduledetails.ScheduleDate =
                                          TempStartDTTM;
                                        oIPPScheduledetails.Dose = -1;
                                        oDoseRegime.FrequencyDetails.ScheduledTimes.Insert(
                                          0,
                                          oIPPScheduledetails
                                        );
                                      }
                                    }
                                  }
                                }
                                let _TmpIPPScheduleDetail: IPPMAManagePrescSer.IPPScheduledetails;
                                oDetails.ChangingDoseDetailSource =
                                  new List<IPPMAManagePrescSer.IPPScheduledetails>();
                                if (
                                  oDoseRegime.FrequencyDetails.ScheduledTimes !=
                                    null &&
                                  oDoseRegime.FrequencyDetails.ScheduledTimes
                                    .Count > 0
                                ) {
                                  oDoseRegime.FrequencyDetails.ScheduledTimes.forEach(
                                    (tmp) => {
                                      if (tmp != null) {
                                        _TmpIPPScheduleDetail =
                                          ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                                            tmp,
                                            IPPMAManagePrescSer.IPPScheduledetails
                                          );
                                        if (_TmpIPPScheduleDetail != null) {
                                          oDetails.ChangingDoseDetailSource.Add(
                                            _TmpIPPScheduleDetail
                                          );
                                        }
                                      }
                                    }
                                  );
                                }
                                oDetails.ScheduleDetailsData =
                                  new ObservableCollection<ScheduleDetailsCols>();
                                if (nScheduleDataCount > 0) {
                                } else {
                                }
                              }
                              {
                                let oIPPDoseRegime: IPPMAManagePrescSer.IPPDoseRegime =
                                  ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
                                    oDoseRegime,
                                    IPPMAManagePrescSer.IPPDoseRegime
                                  );
                                if (oIPPDoseRegime != null) {
                                  oDetails.FreqDetails =
                                    new IPPMAManagePrescSer.CResMsgGetAdministrationTimes();
                                  if (oDoseRegime.FrequencyDetails != null)
                                    oDetails.FreqDetails.oFrequency =
                                      ObjectHelper.CreateObject(
                                        new IPPMAManagePrescSer.IPPFrequency(),
                                        {
                                          UOM:
                                            sFreqTag.length > 2
                                              ? sFreqTag[1]
                                              : String.Empty,
                                          IsPRN:
                                            sFreqTag.length > 2
                                              ? sFreqTag[0]
                                              : '0',
                                          Type: oIPPDoseRegime.FrequencyType,
                                          LowEvent:
                                            sFreqTag.length > 7
                                              ? !String.IsNullOrEmpty(
                                                  sFreqTag[7]
                                                )
                                                ? Convert.ToInt32(sFreqTag[7])
                                                : 0
                                              : 0,
                                          LowPeriod:
                                            sFreqTag.length > 8
                                              ? !String.IsNullOrEmpty(
                                                  sFreqTag[8]
                                                )
                                                ? Convert.ToInt32(sFreqTag[8])
                                                : 0
                                              : 0,
                                        }
                                      );
                                }
                                if (
                                  String.Equals(
                                    oDetails.FrequencyType,
                                    CConstants.PeriodFrequency
                                  ) &&
                                  sceduledTimelst != null &&
                                  sceduledTimelst.Count > 0
                                ) {
                                  oDetails.sceduledTimelst = sceduledTimelst;
                                  if (
                                    String.Equals(
                                      Convert.ToString(
                                        oDoseRegime.FrequencyDetails
                                          .IsFixedAdministration
                                      ),
                                      'F',
                                      StringComparison.OrdinalIgnoreCase
                                    )
                                  ) {
                                    oDetails.SlotTimeMode = 'F';
                                    oDetails.IsfixedTime = true;
                                    oDetails.AdministrationTimes =
                                      'Fixed - ' +
                                      String.Join(
                                        '/',
                                        oDetails.sceduledTimelst.ToArray()
                                      );
                                  } else if (
                                    String.Equals(
                                      Convert.ToString(
                                        oDoseRegime.FrequencyDetails
                                          .IsFixedAdministration
                                      ),
                                      'D',
                                      StringComparison.OrdinalIgnoreCase
                                    )
                                  ) {
                                    oDetails.SlotTimeMode = 'D';
                                    oDetails.IsfixedTime = false;
                                    oDetails.AdministrationTimes =
                                      'Druground - ' +
                                      String.Join(
                                        '/',
                                        oDetails.sceduledTimelst.ToArray()
                                      );
                                  }
                                  if (
                                    this.ActionCode != ActivityTypes.Amend &&
                                    oDetails.FreqDetails != null &&
                                    oDetails.FreqDetails.oFrequency != null &&
                                    !String.IsNullOrEmpty(
                                      oDetails.FreqDetails.oFrequency.UOM
                                    ) &&
                                    String.Equals(
                                      oDetails.FreqDetails.oFrequency.UOM,
                                      'CC_MEDDRSN1',
                                      StringComparison.InvariantCultureIgnoreCase
                                    ) &&
                                    sceduledTimelst != null &&
                                    sceduledTimelst.Count == 1 &&
                                    !String.IsNullOrEmpty(sceduledTimelst[0]) &&
                                    String.Equals(
                                      sceduledTimelst[0],
                                      '00:00'
                                    ) &&
                                    sceduledTimelst.Count <
                                      oDetails.FreqDetails.oFrequency.LowEvent
                                  ) {
                                    oDetails.AdministrationTimes = String.Empty;
                                  }
                                } else if (
                                  DateTime.NotEquals(oDetails.StartDTTM, DateTime.MinValue)
                                ) {
                                  if (
                                    this.ActionCode == ActivityTypes.Reorder ||
                                    this.ActionCode == ActivityTypes.Amend ||
                                    (String.Equals(
                                      this.ActionCode,
                                      ActivityTypes.UnHold
                                    ) &&
                                      String.Equals(this.OperationMode, 'U'))
                                  ) {
                                    if (
                                      oDoseRegime.FrequencyDetails
                                        .IsFixedAdministration == 'F'
                                    ) {
                                      oDetails.AdministrationTimes =
                                        'Fixed - ' +
                                        oDetails.StartDTTM.ToString('HH:mm');
                                    } else if (
                                      oDoseRegime.FrequencyDetails
                                        .IsFixedAdministration == 'D'
                                    ) {
                                      oDetails.AdministrationTimes =
                                        'Drug round - ' +
                                        oDetails.StartDTTM.ToString('HH:mm');
                                    } else {
                                      if (
                                        oIPPDoseRegime != null &&
                                        !String.IsNullOrEmpty(
                                          oIPPDoseRegime.FrequencyType
                                        ) &&
                                        String.Equals(
                                          oIPPDoseRegime.FrequencyType,
                                          'CC_INTERVAL',
                                          StringComparison.InvariantCultureIgnoreCase
                                        )
                                      ) {
                                        oDetails.AdministrationTimes =
                                          oDetails.StartDTTM.ToUserDateTimeString(
                                            'dd-MMM-yyyy HH:mm'
                                          ) +
                                          ' repeats ' +
                                          oDetails.Frequency.DisplayText;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            if (
                              (!this.bIsReprescribe &&
                                this.ActionCode == ActivityTypes.Reorder) ||
                              this.ActionCode == ActivityTypes.Amend
                            ) {
                              oDetails.IsStartFromNextDay =
                                oDoseRegime.IsStartFromNextDay;
                            } else {
                              oDetails.IsStartFromNextDay = true;
                            }
                            oDetails.PresType = PatientContext.PrescriptionType;
                            oDetails.ActionCode = this.ActionCode;
                            oDetails.SourcePrescriptionType =
                              this.sourcePrescriptionType;
                            if (
                              oDetails.ActionCode == ActivityTypes.Prescribe ||
                              oDetails.ActionCode == ActivityTypes.Reorder
                            ) {
                              oDetails.OperationMode = 'N';
                              this.IsFormViewDataLoadedAfterGetPresItemDtls =
                                true;
                            }
                            if (
                              oDetails != null &&
                              oDetails.Frequency != null &&
                              oDetails.Frequency.Value != null
                            ) {
                              oDetails.oAdminTimesVM = new AdminstrativeTimesVM(
                                Convert.ToInt64(oDetails.Frequency.Value)
                              );
                              oDetails.oAdminTimesVM.fixedTimelst =
                                oDetails.sceduledTimelst;
                              oDetails.oAdminTimesVM.FreqDetailsCompleted = (
                                s,
                                e
                              ) => {
                                oDetails.oAdminTimesVM_FreqDetailsCompleted();
                              };
                              oDetails.EndDTTMCalcRequiredCompleted = (
                                s,
                                e
                              ) => {
                                this.oMultipleDoseDetailVM_EndDTTMCalcRequiredCompleted();
                              };
                            }
                          }
                          if (oDoseRegime.Direction != null) {
                            oDetails.IsPRN =
                              !String.IsNullOrEmpty(
                                oDoseRegime.Direction.Code
                              ) &&
                              (String.Equals(
                                oDoseRegime.Direction.Code,
                                'CC_MEDDIRECTION',
                                StringComparison.OrdinalIgnoreCase
                              ) ||
                                String.Equals(
                                  oDoseRegime.Direction.Code,
                                  'As needed',
                                  StringComparison.OrdinalIgnoreCase
                                ));
                          }
                          if (oDetails.FreqDetails == null) {
                            oDetails.FreqDetails =
                              new IPPMAManagePrescSer.CResMsgGetAdministrationTimes();
                          }
                          if (oDetails.FreqDetails.oFrequency == null) {
                            oDetails.FreqDetails.oFrequency =
                              new IPPMAManagePrescSer.IPPFrequency();
                          }
                          if (sFreqTag != null) {
                            oDetails.FreqDetails.oFrequency.UOM =
                              sFreqTag.length > 2 ? sFreqTag[1] : String.Empty;
                            oDetails.FreqDetails.oFrequency.IsPRN =
                              sFreqTag.length > 2 ? sFreqTag[0] : '0';
                            oDetails.FreqDetails.oFrequency.Type =
                              oDetails.FrequencyType;
                            oDetails.FreqDetails.oFrequency.LowEvent =
                              sFreqTag.length > 7
                                ? !String.IsNullOrEmpty(sFreqTag[7])
                                  ? Convert.ToInt32(sFreqTag[7])
                                  : 0
                                : 0;
                            oDetails.FreqDetails.oFrequency.LowPeriod =
                              sFreqTag.length > 8
                                ? !String.IsNullOrEmpty(sFreqTag[8])
                                  ? Convert.ToInt32(sFreqTag[8])
                                  : 0
                                : 0;
                          }
                          if (
                            oDetails.DaysOfWeek != null &&
                            oDetails.DaysOfWeek.Count() > 6 &&
                            oDetails.FreqDetails != null &&
                            oDetails.FreqDetails.oFrequency != null &&
                            String.Equals(
                              oDetails.FreqDetails.oFrequency.UOM,
                              'CC_MEDDRSN2'
                            )
                          ) {
                            oDetails.FreqDetails.oFrequency.IsSunday =
                              String.Equals(oDetails.DaysOfWeek[0], 'T')
                                ? true
                                : false;
                            oDetails.FreqDetails.oFrequency.IsMonday =
                              String.Equals(oDetails.DaysOfWeek[1], 'T')
                                ? true
                                : false;
                            oDetails.FreqDetails.oFrequency.IsTuesday =
                              String.Equals(oDetails.DaysOfWeek[2], 'T')
                                ? true
                                : false;
                            oDetails.FreqDetails.oFrequency.IsWednesday =
                              String.Equals(oDetails.DaysOfWeek[3], 'T')
                                ? true
                                : false;
                            oDetails.FreqDetails.oFrequency.IsThursday =
                              String.Equals(oDetails.DaysOfWeek[4], 'T')
                                ? true
                                : false;
                            oDetails.FreqDetails.oFrequency.IsFriday =
                              String.Equals(oDetails.DaysOfWeek[5], 'T')
                                ? true
                                : false;
                            oDetails.FreqDetails.oFrequency.IsSaturday =
                              String.Equals(oDetails.DaysOfWeek[6], 'T')
                                ? true
                                : false;
                          }
                          if (
                            !String.IsNullOrEmpty(
                              oDetails.AdministrationTimes
                            ) ||
                            oDetails.Frequency != null ||
                            (oDetails.DoseUOM != null &&
                              !String.IsNullOrEmpty(
                                oDetails.DoseUOM.DisplayText
                              )) ||
                            oDetails.LowerDose > 0 ||
                            oDetails.UpperDose > 0 ||
                            (oDetails.Duration > 0 &&
                              oDetails.DurationUOM != null &&
                              !String.IsNullOrEmpty(
                                oDetails.DurationUOM.DisplayText
                              )) ||
                            !String.IsNullOrEmpty(oDetails.InfusionRate)
                          ) {
                            this.FormViewerDetails.BasicDetails.MultiDoseDetails.Add(
                              oDetails
                            );
                          }
                          iIndex++;
                        }
                      );
                    }
                  }
                  if (
                    nCount == 1 &&
                    String.Equals(
                      sDoseTypeCode,
                      DoseTypeCode.TITRATED,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    if (
                      PatientContext.PrescriptionType ==
                      PrescriptionTypes.ForAdministration
                    ) {
                      this.GetAdminTimes(
                        oItemDetail,
                        oItemDetail.BasicProperties.Dose.DoseRegime[0]
                      );
                    }
                  }
                }
              }
            }
          }
          if (
            !String.IsNullOrEmpty(_DoseType) &&
            (String.Equals(
              _DoseType,
              DoseTypeCode.STEPPED,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
              String.Equals(
                _DoseType,
                DoseTypeCode.VARIABLE,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
              String.Equals(
                _DoseType,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.CurrentCultureIgnoreCase
              ))
          ) {
            this.RemoveCompletedStepsAndScheduleForSV();
            if (
              this.ActionCode == ActivityTypes.Amend &&
              PatientContext.PrescriptionType.Equals(
                PrescriptionTypes.ForAdministration,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend =
                this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count ==
                  1 &&
                DateTime.Equals(this.FormViewerDetails.BasicDetails.StopDate,
                  DateTime.MinValue);
            }
            if (
              this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
              this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 1
            ) {
              let _FirstStepDoseUOM: CListItem =
                this.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(
                  (S) =>
                    S.DoseUOM != null && !String.IsNullOrEmpty(S.DoseUOM.Value)
                )
                  .Select((c) => c.DoseUOM)
                  .FirstOrDefault();
              if (_FirstStepDoseUOM != null) {
                let _DifferentDoseUOM =
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(
                    (S) =>
                      S.DoseUOM != null &&
                      !String.Equals(S.DoseUOM.Value, _FirstStepDoseUOM.Value)
                  );
                if (
                  _DifferentDoseUOM != null &&
                  _DifferentDoseUOM.Count() > 0
                ) {
                  this.FormViewerDetails.BasicDetails.IsDifferentDoseUOMFrmSourceForSV =
                    true;
                }
              }
            }
            if (
              this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
              this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
            ) {
              let _Cnt: number =
                this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
              for (let i: number = 0; i < _Cnt; i++) {
                if (
                  (this.ActionCode == ActivityTypes.Amend ||
                    this.ActionCode == ActivityTypes.Reorder) &&
                    DateTime.NotEquals(this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    .EndDTTM, DateTime.MinValue) &&
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    .ChangingDoseDetailSource != null &&
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    .ChangingDoseDetailSource.Count > 0 &&
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    .sceduledTimelst != null &&
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    .sceduledTimelst.Count > 0 &&
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    .sceduledTimelst.Count >
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                      .ChangingDoseDetailSource.Count
                ) {
                  let _CountSourceTimes: number =
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                      .ChangingDoseDetailSource.Count;
                  let _CountScduleTimes: number =
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                      .sceduledTimelst.Count;
                  let ts: TimeSpan = new TimeSpan();
                  let _FirstScheduleDTTM: DateTime =
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                      i
                    ].ChangingDoseDetailSource.FirstOrDefault().ScheduleDate
                      .Date;
                  let _lstSchduleDTTMs: List<DateTime> = new List<DateTime>();
                  let bResult: boolean = false;
                  for (let j: number = 0; j < _CountScduleTimes; j++) {
                    ts = new TimeSpan();
                    bResult = TimeSpan.TryParse(
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                        .sceduledTimelst[j],
                      (o) => {
                        ts = o;
                      }
                    );
                    if (bResult) {
                      _lstSchduleDTTMs.Add(_FirstScheduleDTTM.Add(ts));
                    }
                  }
                  if (_lstSchduleDTTMs.Count > 0) {
                   /* let _ElapsedAdmintimes = _lstSchduleDTTMs
                      .Where(
                        (oDosageAdminTime) =>
                          !this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                            i
                          ].ChangingDoseDetailSource.Any(
                            (Entry) => Entry.ScheduleDate == oDosageAdminTime
                          )
                      )
                      .Select((oDosageAdminTime) => oDosageAdminTime);*/
		      
  			let _ElapsedAdmintimes: List<DateTime> = new List<DateTime>();
                      _lstSchduleDTTMs.forEach((adminTime) => {
                      if( !this.FormViewerDetails.BasicDetails.MultiDoseDetails[i].ChangingDoseDetailSource.Any(x=>x.ScheduleDate.Equals(adminTime)))
                      {
                        _ElapsedAdmintimes.Add(adminTime);
                      }
                      });
                    if (
                      _ElapsedAdmintimes != null &&
                      _ElapsedAdmintimes.Count > 0
                    ) {
                      _ElapsedAdmintimes.forEach((adminTime) => {
                        let oIPPScheduledetails: IPPMAManagePrescSer.IPPScheduledetails =
                          new IPPMAManagePrescSer.IPPScheduledetails();
                        oIPPScheduledetails.ScheduleDate =
                          _FirstScheduleDTTM.DateTime.AddTime(adminTime);
                        oIPPScheduledetails.Dose = -2;
                        this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                          i
                        ].ChangingDoseDetailSource.Add(oIPPScheduledetails);
                      });
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                        i
                      ].ChangingDoseDetailSource =
                        this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                          i
                        ].ChangingDoseDetailSource.OrderBy(
                          (c) => c.ScheduleDate
                        ).ToList();
                    }
                  }
                }
              }
            }
          }
          if (oItemDetail.BasicProperties.Direction != null) {
            let nPRN: number = 0;
            if (
              Number.TryParse(
                oItemDetail.BasicProperties.Direction.Code,
                (o) => (nPRN = o)
              )
            ) {
              this.FormViewerDetails.BasicDetails.AsRequired = nPRN == 1;
            } else {
              this.FormViewerDetails.BasicDetails.AsRequired =
                String.Equals(
                  oItemDetail.BasicProperties.Direction.Code,
                  'CC_MEDDIRECTION',
                  StringComparison.OrdinalIgnoreCase
                ) ||
                String.Equals(
                  oItemDetail.BasicProperties.Direction.Code,
                  'As needed',
                  StringComparison.OrdinalIgnoreCase
                );
            }
            this.FormViewerDetails.BasicDetails.OriginalAsRequired =
              this.FormViewerDetails.BasicDetails.AsRequired;
            if (this.FormViewerDetails.BasicDetails.AdminTimes != null)
              this.FormViewerDetails.BasicDetails.AdminTimes.OriginalAsRequired =
                this.FormViewerDetails.BasicDetails.AsRequired;
          }
          this.FormViewerDetails.BasicDetails.DrugProperties =
            new ObservableCollection<DrugProperty>();
          if (
            oItemDetail.BasicProperties.DrugProperties != null &&
            oItemDetail.BasicProperties.DrugProperties.Count > 0
          ) {
            this.FormViewerDetails.BasicDetails.DrugProperties =
              new ObservableCollection<DrugProperty>();
            oItemDetail.BasicProperties.DrugProperties.forEach((oDrugProp) => {
              if (oDrugProp != null) {
                this.FormViewerDetails.BasicDetails.DrugProperties.Add(
                  ObjectHelper.CreateObject(new DrugProperty(), {
                    DrugName: oDrugProp.DrugName,
                    DrugPropertyCode: oDrugProp.DrugPropertyCode,
                    HighRiskMsg: oDrugProp.HighRiskMsg,
                    IdentifyingOID: oDrugProp.IdentifyingOID,
                    IdentifyingType: oDrugProp.IdentifyingType,
                    OccuranceCode: oDrugProp.OccuranceCode,
                    VMChildCode: oDrugProp.VMChildCode,
                  })
                );
                this.FormViewerDetails.BasicDetails.HighRiskMsg =
                  oDrugProp.HighRiskMsg;
              }
            });
            this.GetDrugPropertyNote(
              this.FormViewerDetails.BasicDetails.DrugProperties,
              this.FormViewerDetails.BasicDetails.itemSubType
            );
          }
          if (
            String.Equals(
              oItemDetail.IdentifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              oItemDetail.IdentifyingType,
              CConstants.ACTUALMOIETY,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (
              this.FormViewerDetails.BasicDetails.DrugProperties != null &&
              this.FormViewerDetails.BasicDetails.DrugProperties.Count > 0
            ) {
              if (
                this.FormViewerDetails.BasicDetails.DrugProperties.Where(
                  (S) =>
                    String.Equals(
                      S.DrugPropertyCode,
                      CConstants.DrugPropertyCNTRLDDRUG,
                      StringComparison.CurrentCultureIgnoreCase
                    ) &&
                    String.Equals(
                      S.VMChildCode,
                      CConstants.AllChild_CC,
                      StringComparison.CurrentCultureIgnoreCase
                    )
                ).Count() > 0
              ) {
                this.FormViewerDetails.BasicDetails.CDItemLevelVM = true;
              } else if (
                oItemDetail.BasicProperties.IsPrescribeInControlledDrug
              ) {
                if (
                  this.FormViewerDetails.BasicDetails.DrugProperties.Where(
                    (S) =>
                      String.Equals(
                        S.DrugPropertyCode,
                        CConstants.DrugPropertyCNTRLDDRUG,
                        StringComparison.CurrentCultureIgnoreCase
                      ) &&
                      String.Equals(
                        S.VMChildCode,
                        CConstants.SomeChild_CC,
                        StringComparison.CurrentCultureIgnoreCase
                      )
                  ).Count() > 0
                ) {
                  this.FormViewerDetails.BasicDetails.DrugProperties.ForEach(
                    (ReInsert) => {
                      if (
                        String.Equals(
                          ReInsert.DrugPropertyCode,
                          CConstants.DrugPropertyCNTRLDDRUG,
                          StringComparison.CurrentCultureIgnoreCase
                        )
                      ) {
                        ReInsert.VMChildCode = CConstants.AllChild_CC;
                      }
                    }
                  );
                } else {
                  this.FormViewerDetails.BasicDetails.DrugProperties.Add(
                    ObjectHelper.CreateObject(new DrugProperty(), {
                      DrugPropertyCode: CConstants.DrugPropertyCNTRLDDRUG,
                      OccuranceCode: CConstants.AllChild_CC,
                      VMChildCode: CConstants.AllChild_CC,
                    })
                  );
                }
              }
            } else if (
              oItemDetail.BasicProperties.IsPrescribeInControlledDrug
            ) {
              this.FormViewerDetails.BasicDetails.DrugProperties.Add(
                ObjectHelper.CreateObject(new DrugProperty(), {
                  DrugPropertyCode: CConstants.DrugPropertyCNTRLDDRUG,
                  OccuranceCode: CConstants.AllChild_CC,
                  VMChildCode: CConstants.AllChild_CC,
                })
              );
            }
          }
          if (oItemDetail.BasicProperties.IsControlledDrug != null)
            this.IsControlledDrug = Convert.ToChar(
              oItemDetail.BasicProperties.IsControlledDrug
            );
          if (
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .DeliveryDeviceFreetext
            ) &&
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionType.Value
            ) &&
            (String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypesCode.FLUID,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypesCode.CONTINUOUS,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0) &&
            !this.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds
          ) {
            this.FormViewerDetails.BasicDetails.InfusionDetails.FillInfusionRateBasedOnDD();
          }
          if (
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionType.Value
            ) &&
            (String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypesCode.FLUID,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0) &&
            !this.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds &&
            this.ActionCode == ActivityTypes.Prescribe
          ) {
            this.SetInfusionRateProperties();
            //Not Required for LHS. To be Re-Visited.
            this.LaunchInfusionrateCalculator(false);
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              !this.FormViewerDetails.BasicDetails.InfusionDetails
                .IsenableInfusionRate
            ) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate =
                String.Empty;
              this.FormViewerDetails.BasicDetails.InfusionDetails.IsEnableInfUpperRate =
                false;
            }
          }
        }
        if (
          String.IsNullOrEmpty(this.MCIItemDrugprop) ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.MCIItemDrugprop
          )
        ) {
          this.GetMcchilditemDisplay();
        }
        if (
          String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.itemSubType)
        ) {
          if (
            oItemDetail != null &&
            oItemDetail.BasicProperties != null &&
            oItemDetail.BasicProperties.ItemSubType != null &&
            !String.IsNullOrEmpty(oItemDetail.BasicProperties.ItemSubType)
          ) {
            this.FormViewerDetails.BasicDetails.itemSubType =
              oItemDetail.BasicProperties.ItemSubType;
          } else {
            this.FormViewerDetails.BasicDetails.itemSubType =
              oItemDetail.ITMSUBTYP;
          }
        }
        if (oItemDetail.AdditionalProperties != null) {
          this.FormViewerDetails.BasicDetails.AdditionalComments =
            oItemDetail.AdditionalProperties.AdditionalComments;
          if (
            this.actionCode == ActivityTypes.Reorder &&
            !String.IsNullOrEmpty(_DoseType) &&
            (String.Equals(
              _DoseType,
              DoseTypeCode.STEPPED,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
              String.Equals(
                _DoseType,
                DoseTypeCode.VARIABLE,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
              String.Equals(
                _DoseType,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.CurrentCultureIgnoreCase
              )) &&
            !String.Equals(
              this.SourcePrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.CurrentCultureIgnoreCase
            ) &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.CurrentCultureIgnoreCase
            ) &&
            DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)
          ) {
            this.FormViewerDetails.BasicDetails.DateCommenced = 'CC_COMPLETE';
          } else {
            this.FormViewerDetails.BasicDetails.DateCommenced =
              oItemDetail.AdditionalProperties.DateCommenced;
          }
          this.FormViewerDetails.BasicDetails.BatchNumber =
            oItemDetail.AdditionalProperties.BatchNumber;
          this.FormViewerDetails.BasicDetails.ExpiryDate =
            oItemDetail.AdditionalProperties.ExpiryDate;
          if (this.FormViewerDetails.BasicDetails.PrepStatus == null) {
            this.FormViewerDetails.BasicDetails.PrepStatus =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: oItemDetail.AdditionalProperties.PreparationStatus,
                Value: oItemDetail.AdditionalProperties.PreparationStatus,
              });
          }
          if (oItemDetail.AdditionalProperties.AdminMethod != null) {
            if (
              !String.IsNullOrEmpty(
                oItemDetail.AdditionalProperties.AdminMethod.Code
              ) &&
              !String.Equals(
                oItemDetail.AdditionalProperties.AdminMethod.Code,
                '0'
              )
            ) {
              this.FormViewerDetails.BasicDetails.AdminMethod =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.AdditionalProperties.AdminMethod.Name,
                  Value: oItemDetail.AdditionalProperties.AdminMethod.Code,
                });
            }
            if (
              this.FormViewerDetails.BasicDetails.AdminMethod != null &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.AdminMethod.Value
              )
            ) {
              if (oItemDetail.AdditionalProperties.AdminMethod.OID > 0)
                this.FormViewerDetails.BasicDetails.AdminMethod.Value =
                  oItemDetail.AdditionalProperties.AdminMethod.OID.ToString();
            }
          }
          if (
            oItemDetail.AdditionalProperties.StationeryType != null &&
            !String.IsNullOrEmpty(
              oItemDetail.AdditionalProperties.StationeryType.Name
            ) &&
            oItemDetail.AdditionalProperties.StationeryType.OID > 0
          ) {
            this.FormViewerDetails.BasicDetails.StationaryType =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  oItemDetail.AdditionalProperties.StationeryType.Name,
                Value: Convert.ToString(
                  oItemDetail.AdditionalProperties.StationeryType.OID
                ),
                Tag: oItemDetail.AdditionalProperties.StationeryType.Code,
              });
          }
          if (oItemDetail.AdditionalProperties.MedClerkModifyReason != null) {
            this.FormViewerDetails.BasicDetails.MedClerkModifyReason =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  oItemDetail.AdditionalProperties.MedClerkModifyReason.Name,
                Value:
                  oItemDetail.AdditionalProperties.MedClerkModifyReason.Code,
              });
          }
          if (
            oItemDetail.AdditionalProperties.MedClerkSource != null &&
            oItemDetail.AdditionalProperties.MedClerkSource.Count > 0
          ) {
            this.FormViewerDetails.BasicDetails.MedicationClerkingSource =
              new ObservableCollection<CListItem>();
            oItemDetail.AdditionalProperties.MedClerkSource.forEach(
              (oClerkSrc) => {
                if (oClerkSrc.Code == CConstants.OtherFreeText) {
                  this.FormViewerDetails.BasicDetails.MedicationClerkingSource.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: oClerkSrc.Name,
                      Value: oClerkSrc.Code,
                      Tag: oItemDetail.AdditionalProperties.OtherComments,
                    })
                  );
                } else {
                  this.FormViewerDetails.BasicDetails.MedicationClerkingSource.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: oClerkSrc.Name,
                      Value: oClerkSrc.Code,
                    })
                  );
                }
              }
            );
          }
          this.FormViewerDetails.BasicDetails.OtherComments =
            oItemDetail.AdditionalProperties.OtherComments;
          if (
            oItemDetail.AdditionalProperties.EndorsementProperties != null &&
            oItemDetail.AdditionalProperties.EndorsementProperties.Count > 0
          ) {
            this.FormViewerDetails.BasicDetails.SelectedEndorsment =
              new ObservableCollection<CListItem>();
            if (
              this.FormViewerDetails.BasicDetails.EndorsementProperties ==
                null ||
              this.FormViewerDetails.BasicDetails.EndorsementProperties.Count ==
                0
            ) {
              this.FormViewerDetails.BasicDetails.EndorsementProperties =
                new ObservableCollection<CListItem>();
              oItemDetail.AdditionalProperties.EndorsementProperties.forEach(
                (oEndosProp) => {
                  let oDisItem: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: oEndosProp.Name,
                      Value: oEndosProp.Code,
                      IsSelected: true,
                    }
                  );
                  this.FormViewerDetails.BasicDetails.SelectedEndorsment.Add(
                    oDisItem
                  );
                }
              );
            } else {
              let nCount: number =
                this.FormViewerDetails.BasicDetails.EndorsementProperties.Count;
              oItemDetail.AdditionalProperties.EndorsementProperties.forEach(
                (oEndorsProp) => {
                  for (let i: number = 0; i < nCount; i++) {
                    if (
                      String.Equals(
                        this.FormViewerDetails.BasicDetails
                          .EndorsementProperties[i].Value,
                        oEndorsProp.Code,
                        StringComparison.OrdinalIgnoreCase
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.EndorsementProperties[
                        i
                      ].IsSelected = true;
                      break;
                    }
                  }
                }
              );
            }
          }
          if (
            oItemDetail.AdditionalProperties.InstalmentInstructions != null &&
            oItemDetail.AdditionalProperties.InstalmentInstructions.Count > 0
          ) {
            if (
              this.FormViewerDetails.BasicDetails.InstalmentInstructions ==
                null ||
              this.FormViewerDetails.BasicDetails.InstalmentInstructions
                .Count == 0
            ) {
              this.FormViewerDetails.BasicDetails.InstalmentInstructions =
                new ObservableCollection<CListItem>();
              oItemDetail.AdditionalProperties.InstalmentInstructions.forEach(
                (oInstalInstr) => {
                  this.FormViewerDetails.BasicDetails.InstalmentInstructions.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: oInstalInstr.Name,
                      Value: oInstalInstr.Code,
                      IsSelected: true,
                    })
                  );
                }
              );
            } else {
              let nCount: number =
                this.FormViewerDetails.BasicDetails.InstalmentInstructions
                  .Count;
              oItemDetail.AdditionalProperties.InstalmentInstructions.forEach(
                (oInstalInstr) => {
                  for (let i: number = 0; i < nCount; i++) {
                    if (
                      String.Equals(
                        this.FormViewerDetails.BasicDetails
                          .InstalmentInstructions[i].Value,
                        oInstalInstr.Code,
                        StringComparison.OrdinalIgnoreCase
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.InstalmentInstructions[
                        i
                      ].IsSelected = true;
                      break;
                    }
                  }
                }
              );
            }
          }
          if (
            oItemDetail.AdditionalProperties.IntervalBtwnInstallment != null
          ) {
            if (
              oItemDetail.AdditionalProperties.IntervalBtwnInstallment.Value > 0
            )
              this.FormViewerDetails.BasicDetails.IntervalBetweenInstallment =
                oItemDetail.AdditionalProperties.IntervalBtwnInstallment.Value;
            else
              this.FormViewerDetails.BasicDetails.IntervalBetweenInstallment =
                null;
            if (
              !String.IsNullOrEmpty(
                oItemDetail.AdditionalProperties.IntervalBtwnInstallment.UOMName
              )
            ) {
              this.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    oItemDetail.AdditionalProperties.IntervalBtwnInstallment
                      .UOMName,
                  Value: Convert.ToString(
                    oItemDetail.AdditionalProperties.IntervalBtwnInstallment
                      .UOMOID
                  ),
                });
            }
          }
          if (
            !String.IsNullOrEmpty(
              oItemDetail.AdditionalProperties.NonCatalogueReason
            )
          ) {
            this.FormViewerDetails.BasicDetails.NONCatalogueReason =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  oItemDetail.AdditionalProperties.NonCatalogueReason,
                Value: oItemDetail.AdditionalProperties.NonCatalogueReason,
              });
          }
          this.FormViewerDetails.BasicDetails.OtherNONCatalogueReason =
            oItemDetail.NonCatalogueOtherComments != null
              ? oItemDetail.NonCatalogueOtherComments
              : oItemDetail.AdditionalProperties.NonCatalogueOtherReason;
          let NoOfInstall: number = Convert.ToDouble(
            oItemDetail.AdditionalProperties.NoOfInstallments
          );
          if (NoOfInstall > 0) {
            this.FormViewerDetails.BasicDetails.NoOfInstallments = NoOfInstall;
          }
          if (
            oItemDetail.LegalCat != null &&
            oItemDetail.LegalCat.LegalCategoryName != null &&
            !String.IsNullOrEmpty(oItemDetail.LegalCat.LegalCategoryName)
          ) {
            this.FormViewerDetails.BasicDetails.LegalCategory =
              oItemDetail.LegalCat.LegalCategoryName;
          }
          if (
            !this.FormViewerDetails.BasicDetails.IsAuthorise ||
            (this.FormViewerDetails.BasicDetails.IsAuthorise &&
              !String.IsNullOrEmpty(this.PrescriptionItemStatus) &&
              !String.Equals(
                this.PrescriptionItemStatus,
                CConstants.AWAITINGAUTHORISE,
                StringComparison.InvariantCultureIgnoreCase
              ))
          ) {
            if (
              !String.Equals(
                ActionCode,
                CAActivity.CA_REORDER,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              (String.Equals(
                ActionCode,
                CAActivity.CA_REORDER,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
                (String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Clerking,
                  StringComparison.OrdinalIgnoreCase
                ) ||
                  String.Equals(
                    PatientContext.PrescriptionType,
                    CConstants.ClerkingPrescribeMenuCode,
                    StringComparison.OrdinalIgnoreCase
                  ) ||
                  String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.ForAdministration,
                    StringComparison.OrdinalIgnoreCase
                  ) ||
                  String.Equals(
                    PatientContext.PrescriptionType,
                    CConstants.ForadminPrescribeMenuCode,
                    StringComparison.OrdinalIgnoreCase
                  )) &&
                ((oItemDetail != null &&
                  oItemDetail.PrescriptionBasicData == null) ||
                  (oItemDetail != null &&
                    oItemDetail.PrescriptionBasicData != null &&
                    oItemDetail.PrescriptionBasicData.EncounterOID == 0) ||
                  (oItemDetail != null &&
                    oItemDetail.PrescriptionBasicData != null &&
                    oItemDetail.PrescriptionBasicData.EncounterOID ==
                      PatientContext.EncounterOid)))
            ) {
              if (!this.bIsSupplyDispensingInstructionSet) {
                this.FormViewerDetails.BasicDetails.Supplycomments =
                  oItemDetail.Supplycomments;
                this.FormViewerDetails.BasicDetails.OriginalSupplyComments =
                  oItemDetail.Supplycomments;
              }
              if (
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.Supplycomments
                ) ||
                (this.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction != null &&
                  this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                    .Count > 0) ||
                DateTime.NotEquals(this.FormViewerDetails.BasicDetails.NextSupplyDate,
                  DateTime.MinValue)
              ) {
                this.FormViewerDetails.BasicDetails.EditedGridID = 1;
              }
              if (
                oItemDetail != null &&
                oItemDetail.TechValidateDetails != null &&
                oItemDetail.TechValidateDetails.Count > 0 &&
                oItemDetail.TechValidateDetails[0] != null &&
                oItemDetail.TechValidateDetails[0].TechValidatedItems != null
              ) {
                if (this.FormViewerDetails.TechValidateDetails == null)
                  this.FormViewerDetails.TechValidateDetails =
                    new TechValidateVM();
                this.FormViewerDetails.TechValidateDetails.TechValidatedItems =
                  new ObservableCollection<CustomTechValidatedItem>();
                let oCustomTechValidatedItem: CustomTechValidatedItem = null;
                let fluidVM: PrescriptionItemVM = null;
                oItemDetail.TechValidateDetails[0].TechValidatedItems.forEach(
                  (oTechValidatedItem) => {
                    if (oTechValidatedItem.IsDoseCombinationsDefined == '0') {
                      oCustomTechValidatedItem = new CustomTechValidatedItem();
                      oCustomTechValidatedItem.IsTechnicalvalidate =
                        oItemDetail.TechValidateDetails[0].IsTechnicalvalidate;
                      oCustomTechValidatedItem.LastModifiedAt =
                        oItemDetail.TechValidateDetails[0].LastModifiedAt;
                      oCustomTechValidatedItem.ClinicalVerifyComments =
                        oTechValidatedItem.ClinicalVerifyComments;
                      oCustomTechValidatedItem.DispensingInstruction =
                        new ObservableCollection<ObjectInfo>();
                      if (oTechValidatedItem.DispensingInstruction != null) {
                        let oDispensingObjectInfo: ObjectInfo = null;
                        oTechValidatedItem.DispensingInstruction.forEach(
                          (oObjectInfo) => {
                            oDispensingObjectInfo = new ObjectInfo();
                            oDispensingObjectInfo.Code = oObjectInfo.Code;
                            oDispensingObjectInfo.LastModifiedAt =
                              oObjectInfo.LastModifiedAt;
                            oDispensingObjectInfo.Name = oObjectInfo.Name;
                            oDispensingObjectInfo.OID = oObjectInfo.OID;
                            oDispensingObjectInfo.OperationMode =
                              oObjectInfo.OperationMode;
                            oDispensingObjectInfo.RoleProfileOID =
                              oObjectInfo.RoleProfileOID;
                            oCustomTechValidatedItem.DispensingInstruction.Add(
                              oDispensingObjectInfo
                            );
                          }
                        );
                      }
                      oCustomTechValidatedItem.DrugItem =
                        new DrugItemBasicData();
                      oCustomTechValidatedItem.DrugItem.AliasName =
                        oTechValidatedItem.DrugItem.AliasName;
                      oCustomTechValidatedItem.DrugItem.FormOID =
                        oTechValidatedItem.DrugItem.FormOID;
                      oCustomTechValidatedItem.DrugItem.FormularyNote =
                        oTechValidatedItem.DrugItem.FormularyNote;
                      oCustomTechValidatedItem.DrugItem.IdentifyingName =
                        oTechValidatedItem.DrugItem.IdentifyingName;
                      oCustomTechValidatedItem.DrugItem.IdentifyingOID =
                        oTechValidatedItem.DrugItem.IdentifyingOID;
                      oCustomTechValidatedItem.DrugItem.IdentifyingType =
                        oTechValidatedItem.DrugItem.IdentifyingType;
                      oCustomTechValidatedItem.DrugItem.IsAccessContraint =
                        oTechValidatedItem.DrugItem.IsAccessContraint;
                      oCustomTechValidatedItem.DrugItem.IsControllDrug =
                        oTechValidatedItem.DrugItem.IsControllDrug;
                      oCustomTechValidatedItem.DrugItem.IsPrescribeByBrand =
                        oTechValidatedItem.DrugItem.IsPrescribeByBrand;
                      oCustomTechValidatedItem.DrugItem.IsTechValidateCA =
                        oTechValidatedItem.DrugItem.IsTechValidateCA;
                      oCustomTechValidatedItem.DrugItem.ItemType =
                        oTechValidatedItem.DrugItem.ItemType;
                      oCustomTechValidatedItem.DrugItem.ITMSUBTYP =
                        oTechValidatedItem.DrugItem.ITMSUBTYP;
                      oCustomTechValidatedItem.DrugItem.LastModifiedAt =
                        oTechValidatedItem.DrugItem.LastModifiedAt;
                      oCustomTechValidatedItem.DrugItem.LorenzoID =
                        oTechValidatedItem.DrugItem.LorenzoID;
                      oCustomTechValidatedItem.DrugItem.MCVersionNo =
                        oTechValidatedItem.DrugItem.MCVersionNo;
                      oCustomTechValidatedItem.DrugItem.NonCatItemReason =
                        oTechValidatedItem.DrugItem.NonCatItemReason;
                      oCustomTechValidatedItem.DrugItem.OperationMode =
                        oTechValidatedItem.DrugItem.OperationMode;
                      oCustomTechValidatedItem.DrugItem.p =
                        oTechValidatedItem.DrugItem.p;
                      oCustomTechValidatedItem.DrugItem.PrescribableItemListOID =
                        oTechValidatedItem.DrugItem.PrescribableItemListOID;
                      oCustomTechValidatedItem.DrugItem.q =
                        oTechValidatedItem.DrugItem.q;
                      oCustomTechValidatedItem.DrugItem.r =
                        oTechValidatedItem.DrugItem.r;
                      oCustomTechValidatedItem.DrugItem.RouteOID =
                        oTechValidatedItem.DrugItem.RouteOID;
                      oCustomTechValidatedItem.DrugItem.s =
                        oTechValidatedItem.DrugItem.s;
                      oCustomTechValidatedItem.DrugItem.SourceDataProviderType =
                        oTechValidatedItem.DrugItem.SourceDataProviderType;
                      oCustomTechValidatedItem.DrugItem.TechQtyUomName =
                        oTechValidatedItem.DrugItem.TechQtyUomName;
                      oCustomTechValidatedItem.IdentifyingDomain =
                        oTechValidatedItem.IdentifyingDomain;
                      oCustomTechValidatedItem.IsTechnicalvalidate =
                        oTechValidatedItem.IsTechnicalvalidate;
                      oCustomTechValidatedItem.LastModifiedAt =
                        oTechValidatedItem.LastModifiedAt;
                      oCustomTechValidatedItem.OperationMode =
                        oTechValidatedItem.OperationMode == null
                          ? 'UM'
                          : oTechValidatedItem.OperationMode;
                      oCustomTechValidatedItem.OtherDispensingInstruction =
                        oTechValidatedItem.OtherDispensingInstruction;
                      oCustomTechValidatedItem.PrescriptionItemTechOID =
                        oTechValidatedItem.PrescriptionItemTechOID;
                      oCustomTechValidatedItem.QuantityPerDose =
                        oTechValidatedItem.QuantityPerDose;
                      oCustomTechValidatedItem.QuantityPerDoseUOM =
                        new ObjectInfo();
                      oCustomTechValidatedItem.QuantityPerDoseUOM.Code =
                        oTechValidatedItem.QuantityPerDoseUOM.Code;
                      oCustomTechValidatedItem.QuantityPerDoseUOM.LastModifiedAt =
                        oTechValidatedItem.QuantityPerDoseUOM.LastModifiedAt;
                      oCustomTechValidatedItem.QuantityPerDoseUOM.Name =
                        oTechValidatedItem.QuantityPerDoseUOM.Name;
                      oCustomTechValidatedItem.QuantityPerDoseUOM.OID =
                        oTechValidatedItem.QuantityPerDoseUOM.OID;
                      oCustomTechValidatedItem.QuantityPerDoseUOM.OperationMode =
                        oTechValidatedItem.QuantityPerDoseUOM.OperationMode;
                      oCustomTechValidatedItem.QuantityPerDoseUOM.RoleProfileOID =
                        oTechValidatedItem.QuantityPerDoseUOM.RoleProfileOID;
                      oCustomTechValidatedItem.SupplyInstruction =
                        new ObservableCollection<ObjectInfo>();
                      if (
                        oTechValidatedItem.SupplyInstruction != null &&
                        oTechValidatedItem.FluidPrescribableItemListOID == 0 &&
                        oTechValidatedItem.PrescriptionMultiComponentOID == 0
                      ) {
                        let oSupplyObjectInfo: ObjectInfo = null;
                        if (
                          !this.bIsSupplyDispensingInstructionSet &&
                          this.FormViewerDetails.BasicDetails
                            .SelectedsupplyInstruction == null
                        ) {
                          this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                            new ObservableCollection<CListItem>();
                        }
                        let sDisplayTxt: string = String.Empty;
                        oTechValidatedItem.SupplyInstruction.forEach(
                          (oObjectInfo) => {
                            oSupplyObjectInfo = new ObjectInfo();
                            oSupplyObjectInfo.Code = oObjectInfo.Code;
                            oSupplyObjectInfo.LastModifiedAt =
                              oObjectInfo.LastModifiedAt;
                            oSupplyObjectInfo.Name = oObjectInfo.Name;
                            oSupplyObjectInfo.OID = oObjectInfo.OID;
                            oSupplyObjectInfo.OperationMode =
                              oObjectInfo.OperationMode;
                            oSupplyObjectInfo.RoleProfileOID =
                              oObjectInfo.RoleProfileOID;
                            oCustomTechValidatedItem.SupplyInstruction.Add(
                              oSupplyObjectInfo
                            );
                            if (
                              MedicationCommonConceptCodeData.ViewConceptCodes !=
                                null &&
                              MedicationCommonConceptCodeData.ViewConceptCodes
                                .Count > 0
                            ) {
                              sDisplayTxt =
                                MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                                  (c) =>
                                    !String.IsNullOrEmpty(c.csCode) &&
                                    String.Equals(c.csCode, oObjectInfo.Code)
                                )
                                  .Select((s) => s.csDescription)
                                  .FirstOrDefault();
                            }
                            if (
                              !String.IsNullOrEmpty(oObjectInfo.Code) &&
                              !String.Equals(
                                oObjectInfo.Code,
                                CConstants.Supplycomments,
                                StringComparison.InvariantCultureIgnoreCase
                              )
                            ) {
                              if (!this.bIsSupplyDispensingInstructionSet) {
                                if (
                                  this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                                    (c) => c.Value == oObjectInfo.Code
                                  ).Count() == 0
                                ) {
                                  this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Add(
                                    ObjectHelper.CreateObject(new CListItem(), {
                                      Value: oObjectInfo.Code,
                                      DisplayText: !String.IsNullOrEmpty(
                                        sDisplayTxt
                                      )
                                        ? sDisplayTxt
                                        : String.Empty,
                                    })
                                  );
                                }
                              }
                            }
                          }
                        );
                      }
                      oCustomTechValidatedItem.TotalQuantity =
                        oTechValidatedItem.TotalQuantity;
                      oCustomTechValidatedItem.TotalQuantityUOM =
                        new ObjectInfo();
                      oCustomTechValidatedItem.TotalQuantityUOM.Code =
                        oTechValidatedItem.TotalQuantityUOM.Code;
                      oCustomTechValidatedItem.TotalQuantityUOM.LastModifiedAt =
                        oTechValidatedItem.TotalQuantityUOM.LastModifiedAt;
                      oCustomTechValidatedItem.TotalQuantityUOM.Name =
                        oTechValidatedItem.TotalQuantityUOM.Name;
                      oCustomTechValidatedItem.TotalQuantityUOM.OID =
                        oTechValidatedItem.TotalQuantityUOM.OID;
                      oCustomTechValidatedItem.TotalQuantityUOM.OperationMode =
                        oTechValidatedItem.TotalQuantityUOM.OperationMode;
                      oCustomTechValidatedItem.TotalQuantityUOM.RoleProfileOID =
                        oTechValidatedItem.TotalQuantityUOM.RoleProfileOID;
                      oCustomTechValidatedItem.IsDoseCombinationsDefined =
                        oTechValidatedItem.IsDoseCombinationsDefined;
                      this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Add(
                        oCustomTechValidatedItem
                      );
                      if (oTechValidatedItem.FluidPrescribableItemListOID > 0) {
                        fluidVM = new PrescriptionItemVM();
                        fluidVM.FormViewerDetails = new FormViewerVM();
                        fluidVM.FormViewerDetails.BasicDetails =
                          new BasicDetailsVM(null);
                        fluidVM.FormViewerDetails.TechValidateDetails =
                          new TechValidateVM();
                        if (fluidVM != null) {
                          fluidVM.FormViewerDetails.BasicDetails.IdentifyingOID =
                            oTechValidatedItem.DrugItem.IdentifyingOID;
                          fluidVM.FormViewerDetails.BasicDetails.IdentifyingType =
                            oTechValidatedItem.DrugItem.IdentifyingType;
                          fluidVM.FormViewerDetails.BasicDetails.IdentifyingName =
                            oTechValidatedItem.DrugItem.IdentifyingName;
                          fluidVM.FluidPrescribableItemListOID =
                            oTechValidatedItem.FluidPrescribableItemListOID;
                          fluidVM.FormViewerDetails.BasicDetails.Supplycomments =
                            oTechValidatedItem.SupplyComments;
                          if (
                            oTechValidatedItem.SupplyInstruction != null &&
                            oTechValidatedItem.SupplyInstruction.Count > 0
                          ) {
                            fluidVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                              new ObservableCollection<CListItem>();
                            oTechValidatedItem.SupplyInstruction.forEach(
                              (suppIns) => {
                                let sDisplayTxt: string = String.Empty;
                                if (
                                  MedicationCommonConceptCodeData.ViewConceptCodes !=
                                    null &&
                                  MedicationCommonConceptCodeData
                                    .ViewConceptCodes.Count > 0
                                ) {
                                  sDisplayTxt =
                                    MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                                      (c) =>
                                        !String.IsNullOrEmpty(c.csCode) &&
                                        String.Equals(c.csCode, suppIns.Code)
                                    )
                                      .Select((s) => s.csDescription)
                                      .FirstOrDefault();
                                }
                                if (
                                  !String.IsNullOrEmpty(suppIns.Code) &&
                                  !String.Equals(
                                    suppIns.Code,
                                    CConstants.Supplycomments,
                                    StringComparison.InvariantCultureIgnoreCase
                                  )
                                ) {
                                  fluidVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Add(
                                    ObjectHelper.CreateObject(new CListItem(), {
                                      Value: suppIns.Code,
                                      DisplayText: !String.IsNullOrEmpty(
                                        sDisplayTxt
                                      )
                                        ? sDisplayTxt
                                        : String.Empty,
                                    })
                                  );
                                }
                              }
                            );
                            let sFluidText: string = String.Empty;
                            let sFluidValue: string = String.Empty;
                            fluidVM.FormViewerDetails.BasicDetails.TechValiadteSupplyInstWithConactSemiColon(
                              fluidVM.FormViewerDetails.BasicDetails
                                .SelectedsupplyInstruction,
                              (o1) => {
                                sFluidText = o1;
                              },
                              (o2) => {
                                sFluidValue = o2;
                              }
                            );
                            fluidVM.FormViewerDetails.BasicDetails.SupplyInsText =
                              !String.IsNullOrEmpty(sFluidText)
                                ? sFluidText
                                : Resource.MedicationForm
                                    .lblSupplyInstructionsText_Tooltip;
                            fluidVM.FormViewerDetails.BasicDetails.SupplyInsVal =
                              !String.IsNullOrEmpty(sFluidValue)
                                ? sFluidValue
                                : String.Empty;
                          }
                          if (
                            !String.IsNullOrEmpty(
                              fluidVM.FormViewerDetails.BasicDetails
                                .Supplycomments
                            ) ||
                            (fluidVM.FormViewerDetails.BasicDetails
                              .SelectedsupplyInstruction != null &&
                              fluidVM.FormViewerDetails.BasicDetails
                                .SelectedsupplyInstruction.Count > 0)
                          ) {
                            fluidVM.FormViewerDetails.BasicDetails.EditedGridID = 1;
                          }
                        }
                      }
                    }
                    if (
                      this.ActionCode == ActivityTypes.Amend &&
                      ((!String.IsNullOrEmpty(this.OperationMode) &&
                        this.OperationMode.Equals('UA')) ||
                        !String.Equals(
                          PatientContext.PrescriptionType,
                          PrescriptionTypes.ForAdministration,
                          StringComparison.InvariantCultureIgnoreCase
                        ) ||
                        (String.Equals(
                          PatientContext.PrescriptionType,
                          PrescriptionTypes.ForAdministration,
                          StringComparison.InvariantCultureIgnoreCase
                        ) &&
                          PatientContext.ClerkFormViewDefaultBehavior ==
                            ClerkFormViewDeftBehaviour.LaunchFormMandatory))
                    ) {
                      this.FormViewerDetails.TechValidateDetails.PrevTechValidatedItems =
                        new ObservableCollection<CustomTechValidatedItem>();
                      if (
                        oTechValidatedItem.IsDoseCombinationsDefined == '1' &&
                        (oTechValidatedItem.FluidPrescribableItemListOID == null || oTechValidatedItem.FluidPrescribableItemListOID == 0)
                      ) {
                        let ProdOptItem: CustomTechValidatedItem =
                          new CustomTechValidatedItem();
                        ProdOptItem.QuantityPerDose =
                          oTechValidatedItem.QuantityPerDose;
                        ProdOptItem.QuantityPerDoseUOM = new ObjectInfo();
                        ProdOptItem.QuantityPerDoseUOM.OID =
                          oTechValidatedItem.QuantityPerDoseUOM.OID;
                        ProdOptItem.QuantityPerDoseUOM.Name =
                          oTechValidatedItem.QuantityPerDoseUOM.Name;
                        ProdOptItem.prevQuantity =
                          oTechValidatedItem.QuantityPerDose;
                        ProdOptItem.prevQuantityUOM =
                          oTechValidatedItem.QuantityPerDoseUOM.Name;
                        ProdOptItem.TotalQuantity =
                          oTechValidatedItem.TotalQuantity;
                        ProdOptItem.TotalQuantityUOM = new ObjectInfo();
                        ProdOptItem.TotalQuantityUOM.OID =
                          oTechValidatedItem.TotalQuantityUOM.OID;
                        ProdOptItem.TotalQuantityUOM.Name =
                          oTechValidatedItem.TotalQuantityUOM.Name;
                        ProdOptItem.prevTotQuantity =
                          oTechValidatedItem.TotalQuantity;
                        ProdOptItem.prevTotQuantityUOM =
                          oTechValidatedItem.TotalQuantityUOM.Name;
                        ProdOptItem.IsDoseCombinationsDefined =
                          oTechValidatedItem.IsDoseCombinationsDefined;
                        ProdOptItem.FluidPrescribableItemListOID =
                          oTechValidatedItem.FluidPrescribableItemListOID;
                        ProdOptItem.PrescriptionItemTechOID =
                          oTechValidatedItem.PrescriptionItemTechOID;
                        ProdOptItem.DrugItem = new DrugItemBasicData();
                        ProdOptItem.DrugItem.IdentifyingName =
                          oTechValidatedItem.DrugItem.IdentifyingName;
                        ProdOptItem.DrugItem.IdentifyingOID =
                          oTechValidatedItem.DrugItem.IdentifyingOID;
                        ProdOptItem.DrugItem.IdentifyingType =
                          oTechValidatedItem.DrugItem.IdentifyingType;
                        ProdOptItem.DrugItem.PrescribableItemListOID =
                          oTechValidatedItem.DrugItem.PrescribableItemListOID;
                        ProdOptItem.OperationMode = 'N';
                        let prodoptsupplyinst: ObservableCollection<CListItem> =
                          new ObservableCollection<CListItem>();
                        let Supplyinstruction: ObservableCollection<ObjectInfo> =
                          new ObservableCollection<ObjectInfo>();
                        if (
                          oTechValidatedItem.SupplyInstruction != null &&
                          oTechValidatedItem.SupplyInstruction.Count > 0
                        ) {
                          for (
                            let j: number = 0;
                            j < oTechValidatedItem.SupplyInstruction.Count;
                            j++
                          ) {
                            if (
                              !String.Equals(
                                oTechValidatedItem.SupplyInstruction[j].Code,
                                CConstants.Supplycomments,
                                StringComparison.InvariantCultureIgnoreCase
                              )
                            ) {
                              let clist: CListItem = ObjectHelper.CreateObject(
                                new CListItem(),
                                {
                                  Value:
                                    oTechValidatedItem.SupplyInstruction[j]
                                      .Code,
                                  DisplayText:
                                    MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                                      (c) =>
                                        !String.IsNullOrEmpty(c.csCode) &&
                                        String.Equals(
                                          c.csCode,
                                          oTechValidatedItem.SupplyInstruction[
                                            j
                                          ].Code
                                        )
                                    )
                                      .Select((s) => s.csDescription)
                                      .FirstOrDefault(),
                                }
                              );
                              let obj: ObjectInfo = ObjectHelper.CreateObject(
                                new ObjectInfo(),
                                {
                                  Code: oTechValidatedItem.SupplyInstruction[j]
                                    .Code,
                                  Name: MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                                    (c) =>
                                      !String.IsNullOrEmpty(c.csCode) &&
                                      String.Equals(
                                        c.csCode,
                                        oTechValidatedItem.SupplyInstruction[j]
                                          .Code
                                      )
                                  )
                                    .Select((s) => s.csDescription)
                                    .FirstOrDefault(),
                                }
                              );
                              prodoptsupplyinst.Add(clist);
                              Supplyinstruction.Add(obj);
                            }
                          }
                        }
                        ProdOptItem.SupplyInstruction = Supplyinstruction;
                        ProdOptItem.selectedSupplyInstruction =
                          prodoptsupplyinst;
                        ProdOptItem.prevselectedSupplyInstruction =
                          prodoptsupplyinst;
                        let oSupplyInstTxt: string = String.Empty;
                        let oSupplyInstVal: string = String.Empty;
                        this.FormViewerDetails.BasicDetails.TechValiadteSupplyInstWithConactSemiColon(
                          prodoptsupplyinst,
                          (o1) => {
                            oSupplyInstTxt = o1;
                          },
                          (o2) => {
                            oSupplyInstVal = o2;
                          }
                        );
                        ProdOptItem.SupplyInstructionText = oSupplyInstTxt;
                        ProdOptItem.SupComments =
                          oTechValidatedItem.SupplyComments;
                        ProdOptItem.prevsuppcomments =
                          oTechValidatedItem.SupplyComments;
                        if (
                          !String.IsNullOrEmpty(oSupplyInstVal) &&
                          !String.IsNullOrEmpty(ProdOptItem.SupComments)
                        ) {
                          ProdOptItem.ProdSupplyInsWithComments =
                            oSupplyInstTxt +
                            Environment.NewLine +
                            'Comments:' +
                            ProdOptItem.SupComments;
                        } else if (!String.IsNullOrEmpty(oSupplyInstVal)) {
                          ProdOptItem.ProdSupplyInsWithComments =
                            oSupplyInstTxt;
                        } else if (
                          !String.IsNullOrEmpty(ProdOptItem.SupComments)
                        ) {
                          ProdOptItem.ProdSupplyInsWithComments =
                            'Comments:' + ProdOptItem.SupComments;
                        }
                        this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Add(
                          ProdOptItem
                        );
                        this.FormViewerDetails.TechValidateDetails.PrevTechValidatedItems.Add(
                          ProdOptItem
                        );
                        if (
                          this.FormViewerDetails.TechValidateDetails
                            .PresTechValidatedItems == null
                        )
                          this.FormViewerDetails.TechValidateDetails.PresTechValidatedItems =
                            new ObservableCollection<PrescriptionItemVM>();
                        this.FormViewerDetails.TechValidateDetails.PresTechValidatedItems.Add(
                          this
                        );
                      }
                    }
                  }
                );
                if (fluidVM != null) {
                  this.PresTechValidatedItemsChild =
                    new ObservableCollection<PrescriptionItemVM>();
                  this.PresTechValidatedItemsChild.Add(fluidVM);
                }
                let sText: string = String.Empty;
                let sValue: string = String.Empty;
                this.FormViewerDetails.BasicDetails.TechValiadteSupplyInstWithConactSemiColon(
                  this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction,
                  (o1) => {
                    sText = o1;
                  },
                  (o2) => {
                    sValue = o2;
                  }
                );
                this.FormViewerDetails.BasicDetails.SupplyInsText =
                  !String.IsNullOrEmpty(sText)
                    ? sText
                    : Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
                this.FormViewerDetails.BasicDetails.SupplyInsVal =
                  !String.IsNullOrEmpty(sValue) ? sValue : String.Empty;
              }
            }
          }
        }
        if (
          this.ActionCode == ActivityTypes.Amend &&
          oItemDetail.OnlyDRCConflictsUpdate
        ) {
          if (!String.IsNullOrEmpty(oItemDetail.OriginalDRCDoseTypeCode)) {
            this.FormViewerDetails.BasicDetails.OriginalDRCDoseType =
              ObjectHelper.CreateObject(new CListItem(), {
                Value: oItemDetail.OriginalDRCDoseTypeCode,
              });
          } else {
            this.FormViewerDetails.BasicDetails.OriginalDRCDoseType =
              new CListItem();
          }
          this.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend =
            oItemDetail.IsChangedDRCDoseTypeForAmend;
          this.FormViewerDetails.PresItemDRCVM.BehaviourType =
            oItemDetail.DRCBehaviourType;
          if (
            oItemDetail.DRCConflict != null &&
            oItemDetail.DRCConflict.Count > 0 &&
            this.FormViewerDetails.PresItemDRCVM != null
          ) {
            this.FillMedDRCVMFromResponse(oItemDetail.DRCConflict, false);
            if (oItemDetail.IsAmendDRCDataLoaded) {
              this.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded = true;
            }
            if (oItemDetail.IsAmendDRCRegenarated) {
              this.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated = true;
            }
            this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory =
              oItemDetail.IsDRCReasonMandatory;
            this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory =
              oItemDetail.IsDRCAcklgdeMandatory;
          } else {
            if (
              oItemDetail.IsAmendDRCDataLoaded &&
              this.FormViewerDetails.PresItemDRCVM != null
            ) {
              this.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded = true;
            }
            if (
              oItemDetail.IsAmendDRCRegenarated &&
              this.FormViewerDetails.PresItemDRCVM != null
            ) {
              this.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated = true;
            }
          }
        }
        this.formViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify =
          false;
        if (oItemDetail != null && oItemDetail.BasicProperties != null) {
          this.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
            oItemDetail.BasicProperties.ExistsOnAdmission;
          this.FormViewerDetails.BasicDetails.IsClinicalEncounter =
            oItemDetail.BasicProperties.IsClinicalEncounter;
          this.FormViewerDetails.BasicDetails.IsAdministeredinAdvance =
            oItemDetail.BasicProperties.IsAdministeredInAdvance;
          this.FormViewerDetails.BasicDetails.LastAdministeredDTTM =
            oItemDetail.BasicProperties.LastAdministeredDTTM;
          if (this.ActionCode != ActivityTypes.Reorder) {
            this.FormViewerDetails.BasicDetails.SeqInfusionStatus =
              oItemDetail.BasicProperties.SeqInfusionStatus;
          }
        }
        this.SetOnadmissionValue(
          this.FormViewerDetails.BasicDetails.IsExistsOnAdmission,
          oItemDetail
        );
        if (
          oItemDetail != null &&
          oItemDetail.ActionPerformed != null &&
          !String.IsNullOrEmpty(
            oItemDetail.ActionPerformed.ReasonForModification
          )
        ) {
          this.FormViewerDetails.BasicDetails.ReasonforModification =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: oItemDetail.ActionPerformed.ReasonForModification,
              Value: oItemDetail.ActionPerformed.ReasonForModification,
            });
        }
        if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.SequenceInfo != null &&
          this.ParentbaseVM != null
        ) {
          this.GetNonIVSubseqentItemsReqDataForSequence(
            this.ParentbaseVM.MedsResolve
          );
        }
      } else {
        if (
          this.ActionCode == ActivityTypes.Prescribe &&
          this.FormViewerDetails.BasicDetails.Route != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Route.DisplayText
          ) &&
          this.FormViewerDetails.BasicDetails.IsDOSMultipleRouteType &&
          PatientContext.PrescriptionType !=
            PrescriptionTypes.ForAdministration &&
          this.FormViewerDetails.BasicDetails.Route.DisplayText.Contains('/')
        ) {
          this.FormViewerDetails.BasicDetails.Route = null;
          if (
            this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
            this.FormViewerDetails.BasicDetails.InfusionType != null
          ) {
            this.FormViewerDetails.BasicDetails.InfusionType = null;
          }
        }
      }
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        (this.FormViewerDetails.BHasFormViewParams ||
          this.FormViewerDetails.BasicDetails.DefaultDetails != null)
      ) {
        if (!this.FormViewerDetails.BasicDetails.isFormViewDataLoaded)
          this.FormViewerDetails.BasicDetails.isFormViewDataLoaded = true;
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.IdentifyingType
          ) &&
          (String.Equals(
            this.FormViewerDetails.BasicDetails.IdentifyingType,
            'CATALOGUEITEM',
            StringComparison.InvariantCultureIgnoreCase
          ) ||
            String.Equals(
              this.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.NONCATALOGUEITEM,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              this.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.Precatalog,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              this.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.ACTUALMOIETY,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          this.FormViewerDetails.BasicDetails.IsenableDosage = true;
        } else {
          this.FormViewerDetails.BasicDetails.IsenableDosage = false;
        }
        if (this.FormViewerDetails.BasicDetails.MCVersion == null)
          this.FormViewerDetails.BasicDetails.MCVersion = AppSessionInfo.AMCV;
        if (isMultipleRoutes) {
          this.FormViewerDetails.BasicDetails.IsenableDosage = false;
          this.FormViewerDetails.BasicDetails.IsSiteEnabled = false;
          this.FormViewerDetails.BasicDetails.IsEnableStrength = false;
        }
        if (
          String.Equals(
            this.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.FormViewerDetails.BasicDetails.IsenableDosage = false;
          this.FormViewerDetails.BasicDetails.IsEnableStrength = false;
          if (
            String.Compare(
              this.FormViewerDetails.BasicDetails.MCILorenzoID,
              CConstants.ADHOC_ITEM_LORENZOID,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              this.LorenzoID,
              CConstants.ADHOC_ITEM_LORENZOID,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          ) {
            this.GetMcchilditemDisplay();
          }
        }
        if (
          !String.Equals(
            this.LorenzoID,
            CommonFlags.MClorenzoid,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          if (!this.ParentbaseVM.MCIlink_click) {
            if (this.FormViewerDetails.BasicDetails.Route == null) {
              this.FormViewerDetails.BasicDetails.GetFormDefaults(
                this.FormViewerDetails.BasicDetails.IdentifyingOID,
                this.FormViewerDetails.BasicDetails.IdentifyingType,
                String.Empty,
                String.Empty,
                this.FormViewerDetails.BasicDetails.MCVersion,
                FormDefaults.ALL.ToString(),
                '',
                false,
                this.IsFormViewerDisable
              );
            } else {
              this.FormViewerDetails.BasicDetails.GetFormDefaults(
                this.FormViewerDetails.BasicDetails.IdentifyingOID,
                this.FormViewerDetails.BasicDetails.IdentifyingType,
                this.FormViewerDetails.BasicDetails.Route.Value,
                String.Empty,
                this.FormViewerDetails.BasicDetails.MCVersion,
                FormDefaults.ALL.ToString(),
                'ROUTE',
                false,
                this.IsFormViewerDisable
              );
            }
          }
        } else {
          this.GetMcchilditem();
          this.FormViewerDetails.BasicDetails.bIsMCIrule = true;
          if (this.FormViewerDetails.BasicDetails.DosageForm == null) {
            if (this.ActionCode == ActivityTypes.Amend) {
              this.FormViewerDetails.BasicDetails.IsGetAdhocMCIRuleFromGetPresItemDetls =
                true;
            }
            this.FormViewerDetails.BasicDetails.GetAdhocMCIFormDefaults(
              this.Itemlist,
              String.Empty,
              String.Empty,
              AppSessionInfo.AMCV,
              String.Empty,
              0,
              String.Empty
            );
          } else if (
            this.FormViewerDetails.BasicDetails.DosageForm != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.DosageForm.Value
            ) &&
            this.FormViewerDetails.BasicDetails.Route != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.Route.Value
            )
          ) {
            if (this.ActionCode == ActivityTypes.Amend) {
              this.FormViewerDetails.BasicDetails.IsGetAdhocMCIRuleFromGetPresItemDetls =
                true;
            }
            this.FormViewerDetails.BasicDetails.GetAdhocMCIFormDefaults(
              this.Itemlist,
              this.FormViewerDetails.BasicDetails.Route.Value,
              this.FormViewerDetails.BasicDetails.DosageForm.Value,
              AppSessionInfo.AMCV,
              String.Empty,
              0,
              String.Empty
            );
          } else {
            if (this.ActionCode == ActivityTypes.Amend) {
              this.FormViewerDetails.BasicDetails.IsGetAdhocMCIRuleFromGetPresItemDetls =
                true;
            }
            this.FormViewerDetails.BasicDetails.GetAdhocMCIFormDefaults(
              this.Itemlist,
              String.Empty,
              this.FormViewerDetails.BasicDetails.DosageForm.Value,
              AppSessionInfo.AMCV,
              String.Empty,
              0,
              String.Empty
            );
          }
        }
        this.FormViewerDetails.BasicDetails.EprescribingruleEvent = (s, e) => {
          this.EprescribingruleEvent();
        };
      } else if (
        this.ActionCode == ActivityTypes.Prescribe &&
        isMultipleRoutes
      ) {
        this.FormViewerDetails.BasicDetails.IsenableDosage = false;
        this.FormViewerDetails.BasicDetails.IsSiteEnabled = false;
        this.FormViewerDetails.BasicDetails.IsEnableStrength = false;
      }
      if (this.FillPresItemDetailsEvent != null) {
        this.FillPresItemDetailsEvent();
      }
      if (this.CancelDiscontinueRebindDelegateEvent != null) {
        this.CancelDiscontinueRebindDelegateEvent(this.PrescriptionItemOID);
      }
      if (
        (this.ActionCode == ActivityTypes.Reorder ||
          this.ActionCode == ActivityTypes.Amend) &&
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null
      ) {
        if (this.FormViewerDetails.BasicDetails.actualClerkingValues == null) {
          this.FormViewerDetails.BasicDetails.actualClerkingValues =
            new ActualClerkingValues();
        }
        this.SetActualClerkingValues();
      }
      if (
        this.ActionCode == ActivityTypes.Reorder ||
        this.ActionCode == ActivityTypes.Amend
      ) {
        this.SetInfusionRateProperties();
      }
      this.FormViewerDetails.BasicDetails.IsRecordedMedication = false;
      this.FormViewerDetails.BasicDetails.IsGetPresItemSVDoseType = false;
      this.IsFillGetPresItemDetail = false;
      if (
        this.ActionCode == ActivityTypes.Reorder &&
        oItemDetail != null &&
        oItemDetail.MultiComponentDetails != null &&
        oItemDetail.MultiComponentDetails.Count > 0 &&
        (String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.OrdinalIgnoreCase
        ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            CConstants.ClerkingPrescribeMenuCode,
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            CConstants.ForadminPrescribeMenuCode,
            StringComparison.OrdinalIgnoreCase
          ))
      ) {
        this.PresTechValidatedItemsChild =
          new ObservableCollection<PrescriptionItemVM>();
        oItemDetail.MultiComponentDetails.forEach((child) => {
          let childVM: PrescriptionItemVM = new PrescriptionItemVM();
          childVM.FormViewerDetails = new FormViewerVM();
          childVM.FormViewerDetails.BasicDetails = new BasicDetailsVM();
          childVM.FormViewerDetails.BasicDetails.IdentifyingOID =
            child.IdentifyingOID;
          childVM.FormViewerDetails.BasicDetails.IdentifyingType =
            child.IdentifyingType;
          if (
            child.SupplyInstruction != null &&
            child.SupplyInstruction.Count > 0
          ) {
            childVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
              new ObservableCollection<CListItem>();
            if (
              MedicationCommonConceptCodeData.ViewConceptCodes != null &&
              MedicationCommonConceptCodeData.ViewConceptCodes.Count > 0
            ) {
              child.SupplyInstruction.forEach((supplyInstr) => {
                let lstTermtext: IEnumerable<CValuesetTerm> = null;
                lstTermtext =
                  MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                    (x) => x.csCode == supplyInstr.Code
                  );
                if (lstTermtext != null && lstTermtext.Count() > 0) {
                  childVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: lstTermtext.ToString(),
                      Value: supplyInstr.Code,
                    })
                  );
                }
              });
            }
          }
          if (!String.IsNullOrEmpty(child.SupplyComments)) {
            childVM.FormViewerDetails.BasicDetails.Supplycomments =
              child.SupplyComments;
          }
          if (DateTime.NotEquals(child.NextSupplyDTTM, DateTime.MinValue)) {
            childVM.FormViewerDetails.BasicDetails.NextSupplyDate =
              child.NextSupplyDTTM;
          }
          this.PresTechValidatedItemsChild.Add(childVM);
        });
      }
      if (oItemDetail != null && oItemDetail.DoseFormulaDet != null) {
        this.objDoseFormulaDef = new DoseFormulaDef();
        if (
          !String.IsNullOrEmpty(oItemDetail.DoseFormulaDet.IsDoseCalcAlwaysUse)
        ) {
          this.objDoseFormulaDef.IsDoseCalcAlwaysUse =
            oItemDetail.DoseFormulaDet.IsDoseCalcAlwaysUse;
        }
        if (!String.IsNullOrEmpty(oItemDetail.DoseFormulaDet.CalculationFor)) {
          this.objDoseFormulaDef.CalculationFor = CommonBB.GetText(
            oItemDetail.DoseFormulaDet.CalculationFor,
            MedicationCommonConceptCodeData.ConceptCodes
          );
        }
        if (!String.IsNullOrEmpty(oItemDetail.DoseFormulaDet.DoseCalcBasedOn)) {
          this.objDoseFormulaDef.DoseCalcBasedOn = CommonBB.GetText(
            oItemDetail.DoseFormulaDet.DoseCalcBasedOn,
            MedicationCommonConceptCodeData.ConceptCodes
          );
        }
        if (!String.IsNullOrEmpty(oItemDetail.DoseFormulaDet.BSAFormula)) {
          this.objDoseFormulaDef.BSAFormula = CommonBB.GetText(
            oItemDetail.DoseFormulaDet.BSAFormula,
            MedicationCommonConceptCodeData.ConceptCodes
          );
        }
        if (
          !String.IsNullOrEmpty(oItemDetail.DoseFormulaDet.DefaultWeightType)
        ) {
          this.objDoseFormulaDef.DefaultWeightType = CommonBB.GetText(
            oItemDetail.DoseFormulaDet.DefaultWeightType,
            MedicationCommonConceptCodeData.ConceptCodes
          );
        }
        if (
          !String.IsNullOrEmpty(
            oItemDetail.DoseFormulaDet.DoseCalcFrequencyName
          )
        ) {
          this.objDoseFormulaDef.FrequencyName =
            oItemDetail.DoseFormulaDet.DoseCalcFrequencyName;
        }
        if (!String.IsNullOrEmpty(oItemDetail.DoseFormulaDet.RequestedDose)) {
          this.objDoseFormulaDef.RequestedDose =
            oItemDetail.DoseFormulaDet.RequestedDose;
        }
        if (
          !String.IsNullOrEmpty(oItemDetail.DoseFormulaDet.RequestedUOMName)
        ) {
          this.objDoseFormulaDef.RequestedUOMName =
            oItemDetail.DoseFormulaDet.RequestedUOMName;
        }
        if (
          !String.IsNullOrEmpty(oItemDetail.DoseFormulaDet.RequestDosePerUOM)
        ) {
          this.objDoseFormulaDef.RequestDosePerUOM =
            oItemDetail.DoseFormulaDet.RequestDosePerUOM;
        }
        if (
          !String.IsNullOrEmpty(
            oItemDetail.DoseFormulaDet.RequestDosePer2UOMName
          )
        ) {
          this.objDoseFormulaDef.RequestDosePer2UOMName =
            oItemDetail.DoseFormulaDet.RequestDosePer2UOMName;
        }
      }
    } catch (ex: any) {
      this.IsFillGetPresItemDetail = false;
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        ex
      );
    }
  }
  private RemoveElapsedScheduleForSV(): void {
    if (
      this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
      this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
    ) {
      let IsStepStartDTTMChanged: boolean = false;
      let otemp = this.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(
        (S) => DateTime.NotEquals(S.EndDTTM, DateTime.MinValue) && S.EndDTTM <= this.dtNow
      ).ToList();
      otemp.forEach((objMultipleDoseDetail) => {
        this.FormViewerDetails.BasicDetails.MultiDoseDetails.Remove(
          objMultipleDoseDetail
        );
      });
      let lstRemoveDosedetails: ObservableCollection<MultipleDoseDetail> =
        new ObservableCollection<MultipleDoseDetail>();
      if (
        this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
        this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
      ) {
        let _nCntMDosedetls: number =
          this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
        let _StepStartDTTM: DateTime = DateTime.MinValue;
        let _StepEndDTTM: DateTime = DateTime.MinValue;
        for (let i: number = 0; i < _nCntMDosedetls; i++) {
          if (
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[i] != null &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
              .FreqDetails != null &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
              .sceduledTimelst != null &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
              .sceduledTimelst.Count > 0 &&
            DateTime.NotEquals(this.FormViewerDetails.BasicDetails.MultiDoseDetails[i].StartDTTM,
              DateTime.MinValue) &&
             (DateTime.NotEquals(this.FormViewerDetails.BasicDetails.MultiDoseDetails[i].EndDTTM,
              DateTime.MinValue) ||
              DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue))
          ) {
            let _oAdminTimesDetls: ObservableCollection<GrdAdminstrativeTimesCols> =
              new ObservableCollection<GrdAdminstrativeTimesCols>();
            let _objAdminTimesDetls: GrdAdminstrativeTimesCols;
            _StepStartDTTM =
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[i].StartDTTM;
            _StepEndDTTM =
            DateTime.NotEquals(this.FormViewerDetails.BasicDetails.MultiDoseDetails[i].EndDTTM,
              DateTime.MinValue)
                ? this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    .EndDTTM
                : this.FormViewerDetails.BasicDetails.StopDate;
            for (
              let j: number = 0;
              j <
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                .sceduledTimelst.Count;
              j++
            ) {
              _objAdminTimesDetls = new GrdAdminstrativeTimesCols();
              if (
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                  i
                ].SlotTimeMode.Equals('D')
              ) {
                _objAdminTimesDetls.IsDrugRoundEnabled = true;
                _objAdminTimesDetls.DruRoundTimes =
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                    i
                  ].sceduledTimelst[j];
              } else {
                _objAdminTimesDetls.IsFixedEnabled = true;
                _objAdminTimesDetls.FixedTimes =
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                    i
                  ].sceduledTimelst[j];
              }
              _oAdminTimesDetls.Add(_objAdminTimesDetls);
            }
            let _ScheduleDTTMDetls: List<DateTime> =
              this.FormViewerDetails.BasicDetails.GetDoseDetailSV(
                _StepStartDTTM,
                _StepEndDTTM,
                this.dtNow,
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                  .FreqDetails,
                _oAdminTimesDetls
              );
            if (_ScheduleDTTMDetls != null && _ScheduleDTTMDetls.Count > 0) {
              break;
            } else {
              lstRemoveDosedetails.Add(
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
              );
            }
          }
        }
      }
      if (lstRemoveDosedetails != null && lstRemoveDosedetails.Count > 0) {
        lstRemoveDosedetails.forEach((objMultipleDoseDetail) => {
          this.FormViewerDetails.BasicDetails.MultiDoseDetails.Remove(
            objMultipleDoseDetail
          );
        });
      }
      let _ActiveStepStartDTTM: DateTime = DateTime.MinValue;
      let _StepFrequencyUOM: string = String.Empty;
      let _grdAdminTimeCols: ObservableCollection<GrdAdminstrativeTimesCols> =
        new ObservableCollection<GrdAdminstrativeTimesCols>();
      if (
        this.FormViewerDetails.BasicDetails
          .IsReorderStartDTTMBlankForDifEncounter
      ) {
        if (
          this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 1
        ) {
          this.FormViewerDetails.BasicDetails.MultiDoseDetails = null;
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
        this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
      ) {
        if (
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0] != null &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
            .ChangingDoseDetailSource != null &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
            .IsDaywiseView &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
            .ChangingDoseDetailSource.Count > 0 &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].EndDTTM !=
            DateTime.MinValue
        ) {
          let IsDurationMoreThan24Hours: boolean =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].EndDTTM.Subtract(
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM
            ).TotalMinutes > CConstants.NO_OF_MINUTESPER_DAY;
          let IsDaysDurationUOM: boolean =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
              .DurationUOM != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                .DurationUOM.Value
            ) &&
            String.Equals(
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                .DurationUOM.Value,
              ConstDurationUOM.Days,
              StringComparison.InvariantCultureIgnoreCase
            );
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].ChangingDoseDetailSource.ForEach(
            (ReInsert) => {
              if (DateTime.LessThan(ReInsert.ScheduleDate, this.dtNow)) {
                ReInsert.Dose = -2;
                ReInsert.DosewithUOM = String.Empty;
              }
            }
          );
        }
        if (
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM <
          this.dtNow
        ) {
          _ActiveStepStartDTTM =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM;
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM =
            this.dtNow;
          IsStepStartDTTMChanged = true;
        } else {
          _ActiveStepStartDTTM = this.dtNow =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM;
        }
        this.FormViewerDetails.BasicDetails.IsNotInPatientSteppedVariableAmend =
          this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 1
            ? false
            : true;
        let _DurationUOMCode: string;
        let _DurationValue: number = 0;
        if (
          IsStepStartDTTMChanged &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0] != null &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration >
            0 &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].DurationUOM !=
            null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].DurationUOM
              .Value
          )
        ) {
          let _StepStartDTTM: DateTime =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM;
          let _StepEndDTTM: DateTime =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].EndDTTM;
          if (
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
              .oAdminTimesVM != null &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
              .FreqDetails != null &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
              .sceduledTimelst != null &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
              .sceduledTimelst.Count > 0 &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].FreqDetails
              .oFrequency != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                .FreqDetails.oFrequency.UOM
            )
          ) {
            if (
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                  .FreqDetails.oFrequency.UOM
              )
            ) {
              _StepFrequencyUOM =
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                  .FreqDetails.oFrequency.UOM;
            }
            let _objAdminTimesDetls: GrdAdminstrativeTimesCols;
            for (
              let i: number = 0;
              i <
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                .sceduledTimelst.Count;
              i++
            ) {
              _objAdminTimesDetls = new GrdAdminstrativeTimesCols();
              if (
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].SlotTimeMode.Equals(
                  'D'
                )
              ) {
                _objAdminTimesDetls.IsDrugRoundEnabled = true;
                _objAdminTimesDetls.DruRoundTimes =
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].sceduledTimelst[
                    i
                  ];
              } else {
                _objAdminTimesDetls.IsFixedEnabled = true;
                _objAdminTimesDetls.FixedTimes =
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].sceduledTimelst[
                    i
                  ];
              }
              _grdAdminTimeCols.Add(_objAdminTimesDetls);
            }
          }
          if (
            _grdAdminTimeCols != null &&
            String.Equals(
              _StepFrequencyUOM,
              ConstDurationUOM.Months,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            let _ScheduleDTTMDetls: List<DateTime> =
              this.FormViewerDetails.BasicDetails.GetDoseDetailSV(
                _ActiveStepStartDTTM,
                _StepEndDTTM,
                _ActiveStepStartDTTM,
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                  .FreqDetails,
                _grdAdminTimeCols
              );
            if (_ScheduleDTTMDetls != null && _ScheduleDTTMDetls.Count > 0) {
              _StepStartDTTM =
                this.dtNow =
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM =
                  _ScheduleDTTMDetls
                    .Where((c) => c >= this.dtNow)
                    .FirstOrDefault().Date;
            }
          }
          _DurationValue =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration;
          _DurationUOMCode =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].DurationUOM
              .Value;
          if (_DurationValue > 0 && !String.IsNullOrEmpty(_DurationUOMCode)) {
            switch (_DurationUOMCode) {
              case ConstDurationUOM.Days:
                if (
                  _grdAdminTimeCols != null &&
                  String.Equals(
                    _StepFrequencyUOM,
                    ConstDurationUOM.Days,
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ) {
                  let _ScheduleDTTMDetls: List<DateTime> =
                    this.FormViewerDetails.BasicDetails.GetDoseDetailSV(
                      _StepStartDTTM,
                      _StepEndDTTM,
                      this.dtNow,
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                        .FreqDetails,
                      _grdAdminTimeCols
                    );
                  let DistSchduleDTTM = _ScheduleDTTMDetls
                    .Where((C) => C > this.dtNow)
                    .Select((S) => S.Date.toString("d"))
                    .Distinct()
                    .ToList();
                  if (DistSchduleDTTM != null && DistSchduleDTTM.Count > 0) {
                    _DurationValue = DistSchduleDTTM.Count;
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration =
                      _DurationValue;
                  }
                } else {
                  let diffResultDay: TimeSpan = _StepEndDTTM
                    .AddMinutes(1)
                    .Subtract(_StepStartDTTM.Date);
                  if (diffResultDay.TotalDays > 0) {
                    _DurationValue = diffResultDay.TotalDays;
                  }
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration =
                  iMath.Round(_DurationValue);
                }
                break;
              case ConstDurationUOM.Minutes:
                let diffResultMinutes: TimeSpan =
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].EndDTTM.Subtract(
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                      .StartDTTM
                  );
                if (diffResultMinutes.TotalMinutes > 0) {
                  _DurationValue = diffResultMinutes.TotalMinutes;
                }
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration =
                  _DurationValue + 1;
                break;
              case ConstDurationUOM.Hours:
                let _durationDiffInHours: TimeSpan =
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].EndDTTM.Subtract(
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                      .StartDTTM
                  );
                if (_durationDiffInHours.TotalHours > 0) {
                  _DurationValue = _durationDiffInHours.TotalHours;
                }
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration =
                  _DurationValue;
                if (this.dtNow.TimeOfDay != TimeSpan.MinValue) {
                  if (
                    _grdAdminTimeCols != null &&
                    _grdAdminTimeCols.Count > 0
                  ) {
                    let OriginalStartDTTM: DateTime = this.dtNow;
                    let OriginalStopDTTM: DateTime =
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                        .EndDTTM;
                    let _StartDttmRangeStart: DateTime =
                      OriginalStopDTTM.AddHours(
                        -Math.ceil(_DurationValue)
                      ).AddMinutes(1);
                    let _StartDttmRangeEnd: DateTime =
                      OriginalStopDTTM.AddHours(
                        -Math.floor(_DurationValue)
                      ).AddMinutes(1);
                    let _lstScheduleTime: List<DateTime> =
                      this.FormViewerDetails.BasicDetails.GetDoseDetailSV(
                        _StartDttmRangeStart,
                        _StartDttmRangeEnd,
                        _StartDttmRangeStart,
                        this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                          .FreqDetails,
                        _grdAdminTimeCols
                      );
                    if (
                      _lstScheduleTime == null ||
                      _lstScheduleTime.Count == 0 ||
                      (_lstScheduleTime != null &&
                        _lstScheduleTime.Count > 0 &&
                        !_lstScheduleTime.Any(
                          (d) => d >= _StartDttmRangeStart && d < this.dtNow
                        ))
                    ) {
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration =
                        Math.ceil(_DurationValue);
                      this.dtNow =
                        this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM =
                          _StartDttmRangeStart;
                    } else if (
                      !_lstScheduleTime.Any(
                        (d) => d >= this.dtNow && d < _StartDttmRangeEnd
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration =
                        Math.floor(_DurationValue);
                      this.dtNow =
                        this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM =
                          _StartDttmRangeEnd;
                    } else {
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration =
                        _durationDiffInHours.TotalMinutes + 1;
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].DurationUOM =
                        ObjectHelper.CreateObject(new CListItem(), {
                          Value: ConstDurationUOM.Minutes,
                          DisplayText: Resource.steppeddose.CC_MINUTES_TermText,
                        });
                    }
                  }
                }
                break;
              case ConstDurationUOM.Doses:
                if (_grdAdminTimeCols != null && _grdAdminTimeCols.Count > 0) {
                  let _ScheduleDTTMDetls: List<DateTime> =
                    this.FormViewerDetails.BasicDetails.GetDoseDetailSV(
                      _StepStartDTTM,
                      _StepEndDTTM,
                      this.dtNow,
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
                        .FreqDetails,
                      _grdAdminTimeCols
                    );
                  let DistSchduleDTTMDoses = _ScheduleDTTMDetls
                    .Where((C) => C > this.dtNow)
                    .Select((S) => S)
                    .Distinct()
                    .ToList();
                  if (
                    DistSchduleDTTMDoses != null &&
                    DistSchduleDTTMDoses.Count > 0
                  ) {
                    _DurationValue = DistSchduleDTTMDoses.Count;
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].Duration =
                      _DurationValue;
                  }
                }
                break;
            }
          }
        }
      }
    }
  }
  private RemoveCompletedStepsAndScheduleForSV(): void {
    if (this.IsReorderAndEliminateElapsedDoses) {
      if (
        this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
        this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
      ) {
        let otemp = this.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(
          (S) =>
            S.FreqDetails != null &&
            S.FreqDetails.oFrequency != null &&
            !String.IsNullOrEmpty(S.FreqDetails.oFrequency.UOM) &&
            String.Equals(
              S.FreqDetails.oFrequency.UOM,
              CConstants.OnceOnlyFrequency,
              StringComparison.InvariantCultureIgnoreCase
            )
        ).ToList();
        if (otemp != null && otemp.Count > 0) {
          otemp.forEach((objMultipleDoseDetail) => {
            this.FormViewerDetails.BasicDetails.MultiDoseDetails.Remove(
              objMultipleDoseDetail
            );
          });
        }
      }
      if (!this.bIsReprescribe) {
        let IsSourceClerking: boolean = false;
        if (
          !String.IsNullOrEmpty(this.SourcePrescriptionType) &&
          String.Equals(
            this.SourcePrescriptionType,
            PrescriptionTypes.Clerking,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          IsSourceClerking = true;
        }
        if (
          this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
          this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
        ) {
          if (
            !IsSourceClerking &&
            DateTime.LessThanOrEqualTo(this.FormViewerDetails.BasicDetails.MultiDoseDetails[0].StartDTTM,
              this.dtNow)
          ) {
            this.RemoveElapsedScheduleForSV();
          }
          if (
            DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartDTTM,
              DateTime.MinValue) &&
              DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartPrescriptionTime,
              DateTime.MinValue)
          ) {
            let _TempStartDTTM: DateTime =
              this.FormViewerDetails.BasicDetails.StartDTTM.AddHours(
                this.FormViewerDetails.BasicDetails.StartPrescriptionTime.Hour
              ).AddMinutes(
                this.FormViewerDetails.BasicDetails.StartPrescriptionTime.Minute
              );
            if (DateTime.LessThanOrEqualTo(_TempStartDTTM, this.dtNow)) {
              this.FormViewerDetails.BasicDetails.ResetDTTMForDoseType = true;
              this.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                this.dtNow;
              this.FormViewerDetails.BasicDetails.StartDTTM = this.dtNow;
              this.FormViewerDetails.BasicDetails.ResetDTTMForDoseType = false;
              this.FormViewerDetails.BasicDetails.IsRecalculateEndDTTMInReordeSV =
                true;
            }
          }
          if (
            this.FormViewerDetails.BasicDetails.MultiDoseDetails == null ||
            (this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
              this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count == 0)
          ) {
            this.FormViewerDetails.BasicDetails.StopDate = DateTime.MinValue;
            this.FormViewerDetails.BasicDetails.StopPrescriptionTime =
              DateTime.MinValue;
          }
        } else {
          this.FormViewerDetails.BasicDetails.StartDTTM = this.dtNow;
          this.FormViewerDetails.BasicDetails.StartPrescriptionTime =
            this.dtNow;
          this.FormViewerDetails.BasicDetails.StopDate = DateTime.MinValue;
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime =
            DateTime.MinValue;
        }
      }
    }
    if (
      this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
      this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 &&
      !String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.FormViewerDetails.BasicDetails.MultiDoseDetails.ForEach(
        (Reinsert) => {
          if (
            Reinsert.FreqDetails != null &&
            Reinsert.FreqDetails.oFrequency != null &&
            String.Equals(
              Reinsert.FreqDetails.oFrequency.UOM,
              CConstants.OnceOnlyFrequency,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            Reinsert.IsAdditionalDose = true;
            this.FormViewerDetails.BasicDetails.IsAdditionalDoseOpted = true;
          }
        }
      );
    }
  }
  public SetActualClerkingValues(): void {
    this.FormViewerDetails.BasicDetails.actualClerkingValues.Route =
      this.FormViewerDetails.BasicDetails.Route;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.Frequency =
      this.FormViewerDetails.BasicDetails.Frequency;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.Dose =
      this.FormViewerDetails.BasicDetails.Dose;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.UpperDose =
      this.FormViewerDetails.BasicDetails.UpperDose;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.DoseUOM =
      this.FormViewerDetails.BasicDetails.DoseUOM;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.DosageForm =
      this.FormViewerDetails.BasicDetails.DosageForm;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.AsRequired =
      this.FormViewerDetails.BasicDetails.AsRequired;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.DoseType =
      this.FormViewerDetails.BasicDetails.DoseType;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.InfusionType =
      this.FormViewerDetails.BasicDetails.InfusionType;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.Multidosedetail =
      this.FormViewerDetails.BasicDetails.MultiDoseDetails;
    this.FormViewerDetails.BasicDetails.actualClerkingValues.Strength =
      this.FormViewerDetails.BasicDetails.Strength;
    if (this.FormViewerDetails.BasicDetails.InfusionDetails != null) {
      this.FormViewerDetails.BasicDetails.actualClerkingValues.Rate =
        this.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.UpperRate =
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.InfRateNumeratorUom =
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.InfRateDinominatorUom =
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.FluidVolume =
        this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.VolumeUOM =
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.BackgroundRate =
        this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRate;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.BackgroundRateNumeratorUom =
        this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateNumeratorUom;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.BackgroundRateDinominatorUom =
        this.FormViewerDetails.BasicDetails.InfusionDetails.BackgroundRateDinominatorUom;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.Bolus =
        this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.BolusUOM =
        this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.LockOutPeriod =
        this.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.LockOutPeriodUOMOID =
        this.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriodUOMOID;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.LockoutDuration =
        this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.MaxDose =
        this.FormViewerDetails.BasicDetails.InfusionDetails.MaxDose;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.LowConcentration =
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.LowConcentrationUOM =
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.UpperConcentration =
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.FlowRateText =
        this.FormViewerDetails.BasicDetails.InfusionDetails.FlowRateText;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.TargetLowerSatRange =
        this.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.TargetUpperSatRange =
        this.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.FluidFreetext =
        this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext;
      this.FormViewerDetails.BasicDetails.actualClerkingValues.ConcentrationFreeText =
        this.FormViewerDetails.BasicDetails.InfusionDetails.ConcentrationFreeText;
    }
  }
  public SetOnadmissionValue(
    IsExistsOnAdmission: string,
    oItemDetail: IPPMAManagePrescSer.PrescriptionItemDetails
  ): void {
    if (
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) ||
      String.Equals(
        PatientContext.PrescriptionType,
        CConstants.ForadminPrescribeMenuCode,
        StringComparison.OrdinalIgnoreCase
      )
    ) {
      if (!this.FormViewerDetails.BasicDetails.IsResetOnadmission) {
        if (
          !String.IsNullOrEmpty(this.SourcePrescriptionType) &&
          String.Equals(
            this.SourcePrescriptionType,
            PrescriptionTypes.Clerking
          ) &&
          this.ActionCode == ActivityTypes.Reorder &&
          !this.bIsReprescribe &&
          ((oItemDetail != null && oItemDetail.PrescriptionBasicData == null) ||
            (oItemDetail != null &&
              oItemDetail.PrescriptionBasicData != null &&
              oItemDetail.PrescriptionBasicData.EncounterOID == 0) ||
            (oItemDetail != null &&
              oItemDetail.PrescriptionBasicData != null &&
              (oItemDetail.PrescriptionBasicData.EncounterOID ==
                PatientContext.EncounterOid ||
                this.FormViewerDetails.BasicDetails.IsClinicalEncounter)))
        ) {
          this.FormViewerDetails.BasicDetails.IsVisibleOnadmission =
            Visibility.Visible;
          this.FormViewerDetails.BasicDetails.IsEnableOnadmission = false;
          this.FormViewerDetails.BasicDetails.IsOnadmission = true;
          this.FormViewerDetails.BasicDetails.IsExistsOnAdmission = '2';
        } else if (
          !this.bIsReprescribe &&
          (this.ActionCode == ActivityTypes.Prescribe ||
            this.ActionCode == ActivityTypes.Reorder)
        ) {
          this.FormViewerDetails.BasicDetails.IsVisibleOnadmission =
            Visibility.Visible;
          if (
            this.ActionCode == ActivityTypes.Prescribe &&
            this.IsGPConnectItem &&
            PrescriptionTypes.ForAdministration.Equals(
              PatientContext.PrescriptionType,
              StringComparison.OrdinalIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.IsOnadmission = true;
          } else {
            this.FormViewerDetails.BasicDetails.IsOnadmission = false;
          }
          this.FormViewerDetails.BasicDetails.IsEnableOnadmission = true;
          this.FormViewerDetails.BasicDetails.IsExistsOnAdmission = '0';
        } else if (
          this.ActionCode == ActivityTypes.Amend ||
          this.bIsReprescribe
        ) {
          if (IsExistsOnAdmission == '2') {
            this.FormViewerDetails.BasicDetails.IsVisibleOnadmission =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.IsEnableOnadmission = false;
            this.FormViewerDetails.BasicDetails.IsOnadmission = true;
          } else if (IsExistsOnAdmission == '1') {
            this.FormViewerDetails.BasicDetails.IsVisibleOnadmission =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.IsEnableOnadmission = true;
            this.FormViewerDetails.BasicDetails.IsOnadmission = true;
          } else {
            this.FormViewerDetails.BasicDetails.IsVisibleOnadmission =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.IsEnableOnadmission = true;
            if (
              this.ActionCode == ActivityTypes.Prescribe &&
              this.IsGPConnectItem &&
              PrescriptionTypes.ForAdministration.Equals(
                PatientContext.PrescriptionType,
                StringComparison.OrdinalIgnoreCase
              )
            ) {
              this.FormViewerDetails.BasicDetails.IsOnadmission = true;
            } else {
              this.FormViewerDetails.BasicDetails.IsOnadmission = false;
            }
          }
        }
      }
    } else {
      this.FormViewerDetails.BasicDetails.IsVisibleOnadmission =
        Visibility.Collapsed;
      this.FormViewerDetails.BasicDetails.IsEnableOnadmission = false;
      this.FormViewerDetails.BasicDetails.IsOnadmission = false;
    }
  }
  public SetInfusionRateProperties(): void {
    if (
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionType.Value
      ) &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.SINGLEDOSEVOLUME
      ) == 0
    ) {
      if (
        !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose) &&
        this.FormViewerDetails.BasicDetails.DoseUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
          null
      ) {
        return;
      } else if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
          null &&
        !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose) &&
        this.FormViewerDetails.BasicDetails.DoseUOM != null
      ) {
        this.MakeInfusionRateReadonly();
      } else if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
          null
      ) {
        this.MakeInfusionRateReadonly();
      }
    } else if (
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionType.Value
      ) &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.FLUID
      ) == 0
    ) {
      this.MakeInfusionRateReadonly();
    }
  }
  public oMultipleDoseDetailVM_EndDTTMCalcRequiredCompleted(): void {
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
      this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
    ) {
      let dtNow: DateTime = CommonBB.GetServerDateTime();
      let bAllAdminAvailable: boolean = true;
      for(let i=0; i<this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count; i++ ){
        let oDoseDetail: MultipleDoseDetail = this.FormViewerDetails.BasicDetails.MultiDoseDetails[i];    
          if (oDoseDetail != null && oDoseDetail.AdminTimesData == null) {
            bAllAdminAvailable = false;
            break;
          }
         }
      if (bAllAdminAvailable) {
        for (
          let i: number = 0;
          i < this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count;
          i++
        ) {
          if (
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[i] != null &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
              .AdminTimesData != null
          ) {
            if (
              this.ActionCode == ActivityTypes.Prescribe ||
              (this.bIsReprescribe && this.ActionCode == ActivityTypes.Reorder)
            ) {
              if (i == 0) {
                //R/f from 2.23
                let TempDTTM:DateTime = CommonBB.GetServerDateTime();
                let CurrDTTM: DateTime = DateTime.MinValue;
                let _IsFutureDate: Boolean = false;

                if (
                  DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartDTTM,
                  DateTime.MinValue)
                ) {
                  if (
                    DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartPrescriptionTime,
                    DateTime.MinValue)
                  )
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                      i
                    ].StartDTTM =
                      this.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
                        this.FormViewerDetails.BasicDetails
                          .StartPrescriptionTime
                      );
                  else
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                      i
                    ].StartDTTM = this.FormViewerDetails.BasicDetails.StartDTTM;
                } else if (
                  this.ActionCode == ActivityTypes.Prescribe &&
                  DateTime.Equals(this.FormViewerDetails.BasicDetails.StartDTTM,
                    DateTime.MinValue)
                ) {
                  //R/f from 2.23
                  if(DateTime.NotEquals(PatientContext.EncounterStartDate,DateTime.MinValue) && DateTime.LessThan(TempDTTM.Date, PatientContext.EncounterStartDate.Date))
                  {
                    _IsFutureDate = true;
                    CurrDTTM = PatientContext.EncounterStartDate;
                    this.FormViewerDetails.BasicDetails.TimeMinValueFlag = false;
                  }
                  else
                  {
                    CurrDTTM = TempDTTM;
                  }
                  if (
                    !String.Equals(
                      PatientContext.PrescriptionType,
                      PrescriptionTypes.Clerking,
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    if(_IsFutureDate)
                    {
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[i].StartDTTM = CurrDTTM.Date;
                    }
                    else
                    {
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[i].StartDTTM = CurrDTTM;
                    }
                    
                  } else {
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                      i
                    ].StartDTTM = CurrDTTM.Date;
                  }
                } else {
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                    i
                  ].StartDTTM =
                    DateTime.GreaterThan(PatientContext.EncounterStartDate.Date, dtNow)
                      ? PatientContext.EncounterStartDate.Date
                      : dtNow;
                }
                if (
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    .DurationUOM != null
                )
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                    i
                  ].EndDTTM = this.CalculateEndDTTM(
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                      .StartDTTM,
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                      .Duration,
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                      .DurationUOM.Value,
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                  );
              } else {
                if (
                  DateTime.NotEquals(this.FormViewerDetails.BasicDetails.MultiDoseDetails[i - 1]
                    .EndDTTM, DateTime.MinValue)
                ) {
                  this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                    i
                  ].StartDTTM =
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                      i - 1
                    ].EndDTTM.AddMinutes(1);
                  this.AdjustStartDTTMForNextDayDOSorReorder(i);
                  if (
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                      .DurationUOM != null
                  )
                    this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                      i
                    ].EndDTTM = this.CalculateEndDTTM(
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                        .StartDTTM,
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                        .Duration,
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                        .DurationUOM.Value,
                      this.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
                    );
                }
              }
            }
            {
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].StepSequenceNo = i + 1;
              this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].AssignChangingDoseDetailFromSource();
            }
          }
        }
      }
    }
  }
  private AdjustStartDTTMForNextDayDOSorReorder(Index: number): void {
    if (
      this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
      Index > 0 &&
      this.FormViewerDetails.BasicDetails.MultiDoseDetails[Index]
        .IsStartFromNextDay
    ) {
      let _IsSourceAndDestinationStartTimeSame: boolean =
        this.FormViewerDetails.BasicDetails.OrginalStartDTTM.Hour ==
          this.FormViewerDetails.BasicDetails.StartDTTM.Hour &&
        this.FormViewerDetails.BasicDetails.OrginalStartDTTM.Minute ==
          this.FormViewerDetails.BasicDetails.StartDTTM.Minute;
      let IsDrugroundTimeNotExists: boolean = false;
      let IsFixedTimeNotExists: boolean = false;
      let ToSkipStep: boolean = false;
      let _IsFixedTime: boolean = false;
      let _IsPartiallyCrossedStartDate: boolean, _IsDayCrossedStartDate;
      let _TempNewStepStartDTTM: DateTime, _TempPrevStepEndDTTM;
      {
        let _TempAdminTimesData: ObservableCollection<GrdAdminstrativeTimesCols> =
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[Index]
            .AdminTimesData;
        if (_TempAdminTimesData != null && _TempAdminTimesData.Count > 0) {
          if (
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[Index]
              .SlotTimeMode == 'F'
          ) {
            if (_TempAdminTimesData.Count == 1) {
              IsFixedTimeNotExists = String.IsNullOrEmpty(
                _TempAdminTimesData[0].FixedTimes
              );
            } else {
              IsFixedTimeNotExists = _TempAdminTimesData.All(
                (x) =>
                  String.IsNullOrEmpty(x.FixedTimes) ||
                  String.Equals(x.FixedTimes, '00:00')
              );
            }
          } else {
            if (_TempAdminTimesData.Count == 1) {
              IsDrugroundTimeNotExists = String.IsNullOrEmpty(
                _TempAdminTimesData[0].DruRoundTimes
              );
            } else {
              IsDrugroundTimeNotExists = _TempAdminTimesData.All(
                (x) =>
                  String.IsNullOrEmpty(x.DruRoundTimes) ||
                  String.Equals(x.DruRoundTimes, '00:00')
              );
            }
          }
        }
        if (!(IsFixedTimeNotExists || IsDrugroundTimeNotExists)) {
          _TempNewStepStartDTTM =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[
              Index - 1
            ].EndDTTM.AddMinutes(1);
          _TempPrevStepEndDTTM =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[Index - 1]
              .EndDTTM;
          _IsFixedTime =
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[Index]
              .SlotTimeMode == 'F'
              ? true
              : false;
          {
            if (
              DateTime.Equals(_TempPrevStepEndDTTM.Date, _TempNewStepStartDTTM.Date) &&
              this.FormViewerDetails.BasicDetails.IsAnyScheduleExistInLastDayOfStep(
                Index - 1
              )
            ) {
              {
                this.FormViewerDetails.BasicDetails.MultiDoseDetails[
                  Index
                ].StartDTTM = _TempNewStepStartDTTM.DateTime.AddDays(1);
              }
            }
          }
        }
      }
    }
  }
  public GetTimeFromMinutes(
    oAdministeredTimeDoseDetails: ObservableCollection<IPPMAManagePrescSer.AdministeredTimeDoseDetail>
  ): List<string> {
    let schduledTimes: List<string> = new List<string>();
    if (
      oAdministeredTimeDoseDetails != null &&
      oAdministeredTimeDoseDetails.Count > 0
    ) {
      let dt: DateTime = CommonBB.GetServerDateTime();
      let nAdminTimeCnt: number = oAdministeredTimeDoseDetails.Count;
      for (let i: number = 0; i < nAdminTimeCnt; i++) {
        dt = dt.DateTime.AddMinutes(
          oAdministeredTimeDoseDetails[i].ScheduledTimeInMins
        );
        schduledTimes.Add(dt.ToString('HH:mm'));
      }
    }
    return schduledTimes;
  }

  private FillConditionalDoseRegime3(
    oItemDetail: IPPMAManagePrescSer.PrescriptionItemDetails,
    IsInfusion: boolean,
    IsAdmintimesReq: boolean
  ): void {
    let lnIdentifyingOID: number =
      this.FormViewerDetails.BasicDetails.IdentifyingOID;
    let sIdentifyingType: string =
      this.FormViewerDetails.BasicDetails.IdentifyingType;
    let sMCVersion: string = String.IsNullOrEmpty(
      this.FormViewerDetails.BasicDetails.MCVersion
    )
      ? AppSessionInfo.AMCV
      : this.FormViewerDetails.BasicDetails.MCVersion;
    let sitemsubtype: string = this.FormViewerDetails.BasicDetails.itemSubType;
    let smcitemname: string =
      this.FormViewerDetails.BasicDetails.mCIItemDisplay;
    let lnprescriptionitemoid: number = this.PrescriptionItemOID;
    let sMClorenzoid: string = this.LorenzoID;
    let mcitemlist: string = this.FormViewerDetails.BasicDetails.itemlist;
    let sAdditionalItemName: string = String.Empty;
    let sAction: ActivityTypes = this.ActionCode;
    let IsOrdersetPrescribing: boolean = false;
    if (
      oItemDetail != null &&
      oItemDetail.BasicProperties != null &&
      oItemDetail.BasicProperties.OrderSet != null
    ) {
      if (oItemDetail.BasicProperties.OrderSet.OID > 0)
        IsOrdersetPrescribing = true;
    }
    this.FormViewerDetails.BasicDetails.ConditionalDosingDetails =
      new ConditionalDosingVM(
        lnIdentifyingOID,
        sIdentifyingType,
        sMCVersion,
        sitemsubtype,
        smcitemname,
        lnprescriptionitemoid,
        sMClorenzoid,
        mcitemlist,
        sAction,
        IsOrdersetPrescribing,
        this.RTEResult
      );
    if (IsInfusion)
      this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.InfusionTypeFlag =
        true;
    if (oItemDetail.BasicProperties.Dose.ObservationResult != null) {
      this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemOID =
        oItemDetail.BasicProperties.Dose.ObservationResult.OID;
      this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemType =
        oItemDetail.BasicProperties.Dose.ObservationResult.Code;
      if (
        !String.IsNullOrEmpty(
          oItemDetail.BasicProperties.Dose.ObservationResult.Name
        ) &&
        oItemDetail.BasicProperties.Dose.ObservationResult.Name.Contains('|^|')
      ) {
        let sTempName: string[] =
          oItemDetail.BasicProperties.Dose.ObservationResult.Name.Split(
            '|^|',
            StringSplitOptions.None
          );
        if (
          sTempName != null &&
          sTempName.length > 1 &&
          sTempName[1] != null &&
          !String.IsNullOrEmpty(sTempName[1])
        ) {
          this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemValue =
            sTempName[0];
          sAdditionalItemName = sTempName[1];
          sTempName = null;
        } else
          this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemValue =
            sAdditionalItemName = sTempName[0];
      } else {
        this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemValue =
          sAdditionalItemName =
            oItemDetail.BasicProperties.Dose.ObservationResult.Name;
      }
    }
    let oIPPDose: IPPMAManagePrescSer.IPPDoseRegime;
    if (!IsInfusion || IsAdmintimesReq) {
      this.GetAdminTimes(
        oItemDetail,
        oItemDetail.BasicProperties.Dose.DoseRegime[0]
      );
    }
    this.oDoseRegime =
      new ObservableCollection<IPPMAManagePrescSer.DoseRegime>();
    oItemDetail.BasicProperties.Dose.DoseRegime.forEach((oDoseRegime) => {
      if (oDoseRegime == null) return;
      oIPPDose = ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
        oDoseRegime,
        IPPMAManagePrescSer.IPPDoseRegime
      );
      if (oIPPDose == null) oIPPDose = new IPPMAManagePrescSer.IPPDoseRegime();
      if (oIPPDose != null && oIPPDose.oConditionalDoseRegime == null) {
        oIPPDose.oConditionalDoseRegime =
          new ObservableCollection<IPPMAManagePrescSer.ConditionalDoseRegime>();
      }
      let isValidCondDoseRegime: boolean = false;
      if (oIPPDose != null && oIPPDose instanceof IPPMAManagePrescSer.IPPDoseRegime || oIPPDose instanceof IPPMAManagePrescSer.DoseRegime) {
        if (
          String.IsNullOrEmpty(oIPPDose.LowerValueRange) &&
          String.IsNullOrEmpty(oIPPDose.UpperValueRange) &&
          String.IsNullOrEmpty(oIPPDose.ParentAdditionalItemValue) &&
          oDoseRegime.LowerObservationRange == 0 &&
          oDoseRegime.UpperObservationRange == 0 &&
          (oDoseRegime.ObservationRangeUOM == null ||
            (oDoseRegime.ObservationRangeUOM != null &&
              String.IsNullOrEmpty(oDoseRegime.ObservationRangeUOM.UOMName))) &&
          oDoseRegime.LowerDose == 0.0 &&
          (oDoseRegime.DoseUOM == null ||
            (oDoseRegime.DoseUOM != null && oDoseRegime.DoseUOM.UOMId == 0)) &&
          String.IsNullOrEmpty(oDoseRegime.DosingInstruction)
        ) {
          isValidCondDoseRegime = true;
        }
      }
      if (!isValidCondDoseRegime)
        this.FormViewerDetails.BasicDetails.IsConditionalExists = true;
      else this.FormViewerDetails.BasicDetails.IsConditionalExists = false;
      let oConditionalDoseRegime: IPPMAManagePrescSer.ConditionalDoseRegime =
        new IPPMAManagePrescSer.ConditionalDoseRegime();
      let Condition: ConditionalDose = new ConditionalDose();
      if (oIPPDose != null) {
        oConditionalDoseRegime.LowerValue = Condition.LowerRange =
          oIPPDose.LowerValueRange;
        oConditionalDoseRegime.UpperValue = Condition.UpperRange =
          oIPPDose.UpperValueRange;
        oConditionalDoseRegime.ParentAddlItemCode =
          this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ParentAdditionalItemValue =
            oIPPDose.ParentAdditionalItemValue;
        Condition.ObservationResult = sAdditionalItemName;
      } else {
        oConditionalDoseRegime.LowerValue = Condition.LowerRange =
          Convert.ToString(oDoseRegime.LowerObservationRange);
        oConditionalDoseRegime.UpperValue = Condition.UpperRange =
          Convert.ToString(oDoseRegime.UpperObservationRange);
      }
      let scondtype: string = String.Empty;
      if (
        this.FormViewerDetails.BasicDetails.ConditionalDosingDetails != null
      ) {
        if (
          String.Equals(
            this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
              .AdditionalItemType,
            AdditionalItemTypes.Observation,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          scondtype = ConditionalDoseConstants.ObservationKey;
        } else {
          scondtype = ConditionalDoseConstants.ResultsKey;
        }
        if (scondtype == ConditionalDoseConstants.ObservationKey) {
          this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.SelectedObservationResult =
            ObjectHelper.CreateObject(new CTreeListItem(), {
              Key: this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
                .AdditionalItemValue,
              Tag: oItemDetail.BasicProperties.Dose.ObservationResult,
              ParentKey: scondtype,
              Selected: true,
            });
        } else {
          this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.SelectedObservationResult =
            ObjectHelper.CreateObject(new CTreeListItem(), {
              // Value:
              //   this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
              //     .AdditionalItemValue,
              // ToolTip:
              //   this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
              //     .AdditionalItemValue,
              Key: this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemOID.ToString(),
              Tag: oItemDetail.BasicProperties.Dose.ObservationResult,
              ParentKey: ConditionalDoseConstants.ResultsKey,
              Selected: true,
            });
        }
      }
      if (oDoseRegime.ObservationRangeUOM != null) {
        if (!String.IsNullOrEmpty(oDoseRegime.ObservationRangeUOM.UOMCode)) {
          let sUOMDisplayText: string = String.Empty;
          if (String.IsNullOrEmpty(oDoseRegime.ObservationRangeUOM.UOMName)) {
            sUOMDisplayText = CommonBB.GetText(
              oDoseRegime.ObservationRangeUOM.UOMCode,
              ConceptCodeData.RM_UNIT_MEASURE
            );
          } else {
            sUOMDisplayText = oDoseRegime.ObservationRangeUOM.UOMName;
          }
          Condition.RangeUoM = ObjectHelper.CreateObject(new CListItem(), {
            Value: oDoseRegime.ObservationRangeUOM.UOMCode,
            DisplayText: sUOMDisplayText,
          });
        } else if (
          !String.IsNullOrEmpty(oDoseRegime.ObservationRangeUOM.UOMName)
        ) {
          Condition.RangeUoM = ObjectHelper.CreateObject(new CListItem(), {
            Value: oDoseRegime.ObservationRangeUOM.UOMName,
          });
        }
      }
      if (
        oDoseRegime.LowerDose > 0 ||
        (oDoseRegime.UpperDose > 0 && oDoseRegime.LowerDose >= 0)
      ) {
        Condition.DoseValueType = 'N';
        oConditionalDoseRegime.Dose = Condition.Dose = Convert.ToString(
          oDoseRegime.LowerDose
        );
        if (oDoseRegime.UpperDose > 0)
          oConditionalDoseRegime.UpperDose = Condition.UpperDose =
            Convert.ToString(oDoseRegime.UpperDose);
        if (oDoseRegime.DoseUOM != null && oDoseRegime.DoseUOM.UOMId > 0) {
          oConditionalDoseRegime.DoseUOM = oDoseRegime.DoseUOM;
          Condition.DoseUoM = ObjectHelper.CreateObject(new CListItem(), {
            Value: Convert.ToString(oDoseRegime.DoseUOM.UOMId),
            DisplayText: oDoseRegime.DoseUOM.UOMName,
          });
        }
      } else {
        Condition.DoseValueType = 'I';
      }
      if (
        this.FormViewerDetails.BasicDetails.InfusionType != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionType.Value
        ) &&
        (String.Equals(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypeCode.CONTINUOUS,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
          String.Equals(
            this.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.SINGLEDOSEVOLUME,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
          String.Equals(
            this.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.FLUID,
            StringComparison.CurrentCultureIgnoreCase
          ))
      ) {
        Condition.InfusionFlag = true;
        if (oIPPDose.Rate != null)
          oConditionalDoseRegime.Rate = Condition.Infusionrate = oIPPDose.Rate;
        else if (oIPPDose.Rate == null && oIPPDose.InfusionRate != null)
          oConditionalDoseRegime.Rate = Condition.Infusionrate =
            oIPPDose.InfusionRate;
        if (!String.IsNullOrEmpty(oIPPDose.UpperRate))
          oConditionalDoseRegime.UpperRate = Condition.InfusionUpperrate =
            oIPPDose.UpperRate;
        if (oIPPDose.RateUOMOID != null && oIPPDose.RateUOMOID.UOMId > 0) {
          Condition.Infratenumeratoruom = ObjectHelper.CreateObject(
            new CListItem(),
            {
              Value: oIPPDose.RateUOMOID.UOMId.ToString(),
              DisplayText: oIPPDose.RateUOMOID.UOMName,
            }
          );
          oConditionalDoseRegime.RateUOMOID = oIPPDose.RateUOMOID;
        } else if (
          oIPPDose.InfusionRateNumUOM != null &&
          oIPPDose.InfusionRateNumUOM.UOMName != null &&
          oIPPDose.InfusionRateNumUOM.UOMId > 0
        ) {
          Condition.Infratenumeratoruom = ObjectHelper.CreateObject(
            new CListItem(),
            {
              Value: oIPPDose.InfusionRateNumUOM.UOMId.ToString(),
              DisplayText: oIPPDose.InfusionRateNumUOM.UOMName,
            }
          );
          oConditionalDoseRegime.RateUOMOID = oIPPDose.InfusionRateNumUOM;
        }
        if (
          oIPPDose.RateDenaminatorUOMOID != null &&
          oIPPDose.RateDenaminatorUOMOID.UOMId > 0
        ) {
          Condition.InfrateDenominatoruom = ObjectHelper.CreateObject(
            new CListItem(),
            {
              Value: oIPPDose.RateDenaminatorUOMOID.UOMId.ToString(),
              DisplayText: oIPPDose.RateDenaminatorUOMOID.UOMName,
            }
          );
          oConditionalDoseRegime.RateDenaminatorUOMOID =
            oIPPDose.RateDenaminatorUOMOID;
        } else if (
          oIPPDose.InfusionRateDenUOM != null &&
          oIPPDose.InfusionRateDenUOM.UOMName != null &&
          oIPPDose.InfusionRateDenUOM.UOMId > 0
        ) {
          Condition.InfrateDenominatoruom = ObjectHelper.CreateObject(
            new CListItem(),
            {
              Value: oIPPDose.InfusionRateDenUOM.UOMId.ToString(),
              DisplayText: oIPPDose.InfusionRateDenUOM.UOMName,
            }
          );
          oConditionalDoseRegime.RateDenaminatorUOMOID =
            oIPPDose.InfusionRateDenUOM;
        }
        if (Condition.DoseValueType != 'N') {
          if (!String.IsNullOrEmpty(Condition.Infusionrate))
            Condition.DoseValueType = 'N';
          else Condition.DoseValueType = 'I';
        }
      } else if (
        this.FormViewerDetails.BasicDetails.InfusionType != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionType.Value
        ) &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypeCode.INTERMITTENT,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        Condition.InfusionFlag = true;
        if (this.ActionCode == ActivityTypes.Prescribe) {
          Condition.Infusionrate = oIPPDose.InfusionRate;
          if (!String.IsNullOrEmpty(oIPPDose.UpperRate))
            Condition.InfusionUpperrate = oIPPDose.UpperRate;
          if (Condition.DoseValueType != 'N') {
            if (!String.IsNullOrEmpty(Condition.Infusionrate))
              Condition.DoseValueType = 'N';
            else Condition.DoseValueType = 'I';
          }
          if (
            oIPPDose.InfusionRateNumUOM != null &&
            oIPPDose.InfusionRateNumUOM.UOMId > 0
          ) {
            Condition.Infratenumeratoruom = ObjectHelper.CreateObject(
              new CListItem(),
              {
                Value: oIPPDose.InfusionRateNumUOM.UOMId.ToString(),
                DisplayText: oIPPDose.InfusionRateNumUOM.UOMName,
              }
            );
            oConditionalDoseRegime.RateUOMOID = oIPPDose.InfusionRateNumUOM;
          }
          if (
            oIPPDose.InfusionRateDenUOM != null &&
            oIPPDose.InfusionRateDenUOM.UOMId > 0
          ) {
            Condition.InfrateDenominatoruom = ObjectHelper.CreateObject(
              new CListItem(),
              {
                Value: oIPPDose.InfusionRateDenUOM.UOMId.ToString(),
                DisplayText: oIPPDose.InfusionRateDenUOM.UOMName,
              }
            );
            oConditionalDoseRegime.RateDenaminatorUOMOID =
              oIPPDose.InfusionRateDenUOM;
          }
        } else {
          Condition.Infusionrate = oIPPDose.Rate;
          if (!String.IsNullOrEmpty(oIPPDose.UpperRate))
            Condition.InfusionUpperrate = oIPPDose.UpperRate;
          if (Condition.DoseValueType != 'N') {
            if (!String.IsNullOrEmpty(Condition.Infusionrate))
              Condition.DoseValueType = 'N';
            else Condition.DoseValueType = 'I';
          }
          if (oIPPDose.RateUOMOID != null && oIPPDose.RateUOMOID.UOMId > 0) {
            Condition.Infratenumeratoruom = ObjectHelper.CreateObject(
              new CListItem(),
              {
                Value: Convert.ToString(oIPPDose.RateUOMOID.UOMId),
                DisplayText: oIPPDose.RateUOMOID.UOMName,
              }
            );
            oConditionalDoseRegime.RateUOMOID = oIPPDose.RateUOMOID;
          }
          if (
            oIPPDose.RateDenaminatorUOMOID != null &&
            oIPPDose.RateDenaminatorUOMOID.UOMId > 0
          ) {
            Condition.InfrateDenominatoruom = ObjectHelper.CreateObject(
              new CListItem(),
              {
                Value: Convert.ToString(oIPPDose.RateDenaminatorUOMOID.UOMId),
                DisplayText: oIPPDose.RateDenaminatorUOMOID.UOMName,
              }
            );
            oConditionalDoseRegime.RateDenaminatorUOMOID =
              oIPPDose.RateDenaminatorUOMOID;
          }
        }
      } else if (
        oIPPDose != null &&
        !String.IsNullOrEmpty(oIPPDose.InfusionRate) &&
        !this.IsFormViewDataLoaded
      ) {
        Condition.InfusionFlag = IsInfusion;
        Condition.Infusionrate = oIPPDose.InfusionRate;
        Condition.InfusionUpperrate = oIPPDose.UpperRate;
        if (oIPPDose.InfusionRateDenUOM != null) {
          Condition.InfrateDenominatoruom = new CListItem();
          Condition.InfrateDenominatoruom.DisplayText =
            oIPPDose.InfusionRateDenUOM.UOMName;
          Condition.InfrateDenominatoruom.Value =
            oIPPDose.InfusionRateDenUOM.UOMId.ToString();
          Condition.Infratenumeratoruom = new CListItem();
          Condition.Infratenumeratoruom.DisplayText =
            oIPPDose.InfusionRateNumUOM.UOMName;
          Condition.Infratenumeratoruom.Value =
            oIPPDose.InfusionRateNumUOM.UOMId.ToString();
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
          .RangeOperators != null &&
        this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
          .RangeOperators.Count > 0 &&
        !String.IsNullOrEmpty(oIPPDose.ValueRange)
      ) {
        let oSelectedItem =
          this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.RangeOperators.Where(
            (oItem) =>
              String.Equals(
                oItem.DisplayText,
                oIPPDose.ValueRange,
                StringComparison.OrdinalIgnoreCase
              ) ||
              String.Equals(
                oItem.Value,
                oIPPDose.ValueRange,
                StringComparison.OrdinalIgnoreCase
              )
          ).Select((oItem) => oItem);
        if (oSelectedItem != null && oSelectedItem.Count() > 0) {
          Condition.RangeOperator = ObjectHelper.CreateObject(new CListItem(), {
            Value: oSelectedItem.First().Value,
            DisplayText: oSelectedItem.First().DisplayText,
            IsSelected: true,
          });
          oConditionalDoseRegime.ValueRangeOpratorText =
            Condition.RangeOperator.DisplayText;
        }
      }
      oConditionalDoseRegime.ValueRange = oIPPDose.ValueRange;
      if (
        oDoseRegime.ObservationRangeUOM != null &&
        !String.IsNullOrEmpty(oDoseRegime.ObservationRangeUOM.UOMName)
      ) {
        oConditionalDoseRegime.ValueUOM = ObjectHelper.CreateObject(
          new IPPMAManagePrescSer.UOM(),
          { UOMName: oDoseRegime.ObservationRangeUOM.UOMName }
        );
      }
      oConditionalDoseRegime.Instruction = Condition.Instruction =
        oDoseRegime.DosingInstruction;
      if (!isValidCondDoseRegime) {
        oConditionalDoseRegime.AddlItemName = sAdditionalItemName;
        oConditionalDoseRegime.AddlItemType =
          this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemType;
        oConditionalDoseRegime.AddlItemCode =
          this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemValue;
        oIPPDose.oConditionalDoseRegime.Add(oConditionalDoseRegime);
        this.oDoseRegime.Add(oDoseRegime);
        this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails.Add(
          Condition
        );
      }
    });
  }
  public GetMcchilditem(): void {
    let sbDrugOIDTypes: StringBuilder = new StringBuilder();
    this.item = String.Empty;
    this.Itemlist = this.FormViewerDetails.BasicDetails.itemlist = String.Empty;
    if (
      this.FormViewerDetails.MulticomponentDetails != null &&
      this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null &&
      this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 0
    ) {
      let nMCIcnt: number =
        this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
      for (let rcount: number = 0; rcount < nMCIcnt; rcount++) {
        sbDrugOIDTypes.Append(
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount]
            .IdentifyingOID
        );
        sbDrugOIDTypes.Append('-');
        sbDrugOIDTypes.Append(
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount]
            .IdentifyingType
        );
        sbDrugOIDTypes.Append(',');
        if (
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount]
            .IsUpto == true
        ) {
          this.MCuptoIdentifyingoid =
            this.FormViewerDetails.BasicDetails.MCuptoIdentifyingoid =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IdentifyingOID;
          this.MCuptoIdentifyingtype =
            this.FormViewerDetails.BasicDetails.MCuptoIdentifyingtype =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IdentifyingType;
        }
      }
    }
    if (sbDrugOIDTypes.Length > 0)
      sbDrugOIDTypes.Remove(sbDrugOIDTypes.Length - 1, 1);
    this.item = Convert.ToString(sbDrugOIDTypes);
    //this.Itemlist = this.FormViewerDetails.BasicDetails.itemlist = this.item;
    this.Itemlist = this.FormViewerDetails.BasicDetails.itemlist = this.item.slice(0,this.item.length-1);
  }
  private GetAdminTimes(
    oItemDetail: IPPMAManagePrescSer.PrescriptionItemDetails,
    oDoseRegime: IPPMAManagePrescSer.DoseRegime
  ): void {
    if (
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
    ) {
      let _AdminType: string;
      if (
        oDoseRegime != null &&
        ((oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails !=
          null &&
          oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
            .ScheduledTimes != null &&
          oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
            .ScheduledTimes.Count > 0) ||
          (oItemDetail.BasicProperties.Dose.DoseRegime[0]
            .AdministeredTimeAndDoseDetails != null &&
            oItemDetail.BasicProperties.Dose.DoseRegime[0]
              .AdministeredTimeAndDoseDetails.Count > 0))
      ) {
        let oGrdAdminstrativeTimesCols: ObservableCollection<GrdAdminstrativeTimesCols> =
          new ObservableCollection<GrdAdminstrativeTimesCols>();
        let strHourMinFormat: string = String.Empty;
        if (
          !String.IsNullOrEmpty(
            Convert.ToString(
              oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
                .IsFixedAdministration
            )
          ) &&
          oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
            .IsFixedAdministration != ' ' &&
          oItemDetail.BasicProperties.Dose.DoseRegime[0]
            .AdministeredTimeAndDoseDetails != null &&
          oItemDetail.BasicProperties.Dose.DoseRegime[0]
            .AdministeredTimeAndDoseDetails.Count > 0
        ) {
          let sceduledTimelst: List<string> = new List<string>();
          if (this.FormViewerDetails.BasicDetails.AdminTimes == null)
            this.FormViewerDetails.BasicDetails.AdminTimes =
              new AdminScheduleTimeVM();
          this.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes =
            new ObservableCollection<AdminScheduleTime>();
          if (this.ActionCode == ActivityTypes.Reorder) {
            this.FormViewerDetails.BasicDetails.AdminTimes.AdminType =
              _AdminType = 'F';
          } else {
            this.FormViewerDetails.BasicDetails.AdminTimes.AdminType =
              _AdminType =
                oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
                  .IsFixedAdministration;
          }
          let oSchedule: AdminScheduleTime = null;
          let dt: DateTime = CommonBB.GetServerDateTime();
          let nFreqSchCnt: number =
            oItemDetail.BasicProperties.Dose.DoseRegime[0]
              .AdministeredTimeAndDoseDetails.Count;
          for (let i: number = 0; i < nFreqSchCnt; i++) {
            dt = dt.DateTime.AddMinutes(
              oItemDetail.BasicProperties.Dose.DoseRegime[0]
                .AdministeredTimeAndDoseDetails[i].ScheduledTimeInMins
            );
            
            strHourMinFormat = dt.ToString('HH:mm');
            if (!sceduledTimelst.Contains(strHourMinFormat)) {
              sceduledTimelst.Add(strHourMinFormat);
              oSchedule = ObjectHelper.CreateObject(
                new AdminScheduleTime(
                  this.FormViewerDetails.BasicDetails.AdminTimes
                ),
                {
                  ScheduleDTTM: oItemDetail.StartDTTM.DateTime.AddMinutes(
                    oItemDetail.BasicProperties.Dose.DoseRegime[0]
                      .AdministeredTimeAndDoseDetails[i].ScheduledTimeInMins
                  ),
                }
              );
              oSchedule.IsFixedMandatory = true;
              oSchedule.IsFixedEnable = true;
              oSchedule.FixedSchDTTMChanged = (s,e) => {
                this.oSchedule_FixedSchDTTMChanged();
              };
              this.FormViewerDetails.BasicDetails.AdminTimes.IsSavedPrescription =
                true;
              this.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Add(
                oSchedule
              );
            }
          }
          if (sceduledTimelst.Count > 0) {
            this.FormViewerDetails.BasicDetails.GivenFixedTime =
              new ObservableCollection<IPPMAManagePrescSer.IPPScheduledetails>();
            for (let i: number = 0; i < sceduledTimelst.Count; i++) {
              let oGrdAdminstrativeTimesColsDetails: GrdAdminstrativeTimesCols =
                new GrdAdminstrativeTimesCols();
              if (_AdminType == 'F') {
                oGrdAdminstrativeTimesColsDetails.FixedTimes =
                  sceduledTimelst[i];
                let arrTime: string[] = sceduledTimelst[i].Split(':');
                if (arrTime != null && arrTime.length > 0) {
                  let oSchTimes: IPPMAManagePrescSer.IPPScheduledetails =
                    new IPPMAManagePrescSer.IPPScheduledetails();
                  let nMinutes: number = Common.ConvertHourstoMinutes(
                    Convert.ToDouble(arrTime[0])
                  );
                  let nTotMinutes: number =
                    nMinutes + Convert.ToInt32(arrTime[1]);
                  oSchTimes.ScheduledTime = nTotMinutes.ToString();
                  this.FormViewerDetails.BasicDetails.GivenFixedTime.Add(
                    oSchTimes
                  );
                }
                oGrdAdminstrativeTimesColsDetails.FrequencyType = 'CC_PERIOD';
              } else {
                oGrdAdminstrativeTimesColsDetails.DruRoundTimes =
                  sceduledTimelst[i];
                oGrdAdminstrativeTimesColsDetails.FrequencyType = 'CC_PERIOD';
              }
              oGrdAdminstrativeTimesCols.Add(oGrdAdminstrativeTimesColsDetails);
            }
          }
        } else {
          let isUnholdClicked: boolean =
            String.Equals(this.ActionCode, ActivityTypes.UnHold) &&
            String.Equals(this.OperationMode, 'U');
          if (
            isUnholdClicked &&
            this.FormViewerDetails.BasicDetails.AdminTimes == null
          ) {
            this.FormViewerDetails.BasicDetails.InitializationAdminTimes();
          }
          if (
            isUnholdClicked &&
            this.FormViewerDetails.BasicDetails.AdminTimes != null
          ) {
            if (
              DateTime.Equals(this.FormViewerDetails.BasicDetails.AdminTimes.StartDTTM,
              DateTime.MinValue)
            ) {
              this.FormViewerDetails.BasicDetails.AdminTimes.StartDTTM =
                this.FormViewerDetails.BasicDetails.StartDTTM;
            }
            if (
              this.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails == null
            ) {
              let sFreqTag: string[] = null;
              if (
                oDoseRegime.FrequencyDetails instanceof
                  IPPMAManagePrescSer.FrequencyDetails &&
                oDoseRegime.FrequencyDetails.Frequency instanceof
                  IPPMAManagePrescSer.ObjectInfo
              ) {
                sFreqTag = (
                  !String.IsNullOrEmpty(
                    oDoseRegime.FrequencyDetails.Frequency.Code
                  )
                    ? oDoseRegime.FrequencyDetails.Frequency.Code
                    : '0~'
                ).Split('~');
              }
              let oIPPDoseRegime: IPPMAManagePrescSer.IPPDoseRegime =
                ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
                  oDoseRegime,
                  IPPMAManagePrescSer.IPPDoseRegime
                );
              this.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails =
                new IPPMAManagePrescSer.CResMsgGetAdministrationTimes();
              if (oDoseRegime.FrequencyDetails != null) {
                this.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency =
                  ObjectHelper.CreateObject(
                    new IPPMAManagePrescSer.IPPFrequency(),
                    {
                      UOM: sFreqTag.length > 2 ? sFreqTag[1] : String.Empty,
                      IsPRN: sFreqTag.length > 2 ? sFreqTag[0] : '0',
                      Type:
                        oIPPDoseRegime != null
                          ? oIPPDoseRegime.FrequencyType
                          : String.Empty,
                      LowEvent:
                        sFreqTag.length > 7
                          ? !String.IsNullOrEmpty(sFreqTag[7])
                            ? Convert.ToInt32(sFreqTag[7])
                            : 0
                          : 0,
                      LowPeriod:
                        sFreqTag.length > 8
                          ? !String.IsNullOrEmpty(sFreqTag[8])
                            ? Convert.ToInt32(sFreqTag[8])
                            : 0
                          : 0,
                    }
                  );
              }
            }
            this.FormViewerDetails.BasicDetails.AdminTimes.FillAdministrationTimes();
          }
          let strDateFormat: string = String.Empty;
          if (
            oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails !=
              null &&
            oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
              .ScheduledTimes != null &&
            oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
              .ScheduledTimes.Count > 0
          ) {
            let nFreqDet: number =
              oItemDetail.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
                .ScheduledTimes.Count;
            for (let i: number = 0; i < nFreqDet; i++) {
              let oGrdAdminstrativeTimesColsDetails: GrdAdminstrativeTimesCols =
                new GrdAdminstrativeTimesCols();
              strDateFormat =
                ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                  oItemDetail.BasicProperties.Dose.DoseRegime[0]
                    .FrequencyDetails.ScheduledTimes[i],
                  IPPMAManagePrescSer.IPPScheduledetails
                ).ScheduleDate.ToShortDateString();
              strHourMinFormat =
                ObjectHelper.CreateType<IPPMAManagePrescSer.IPPScheduledetails>(
                  oItemDetail.BasicProperties.Dose.DoseRegime[0]
                    .FrequencyDetails.ScheduledTimes[i],
                  IPPMAManagePrescSer.IPPScheduledetails
                ).ScheduleDate.ToString('HH:mm');
              oGrdAdminstrativeTimesColsDetails.FixedTimes = strDateFormat;
              oGrdAdminstrativeTimesColsDetails.DruRoundTimes =
                strHourMinFormat;
              oGrdAdminstrativeTimesColsDetails.FrequencyType = 'CC_INTERVAL';
              oGrdAdminstrativeTimesCols.Add(oGrdAdminstrativeTimesColsDetails);
            }
          }
        }
        if (oGrdAdminstrativeTimesCols.Count > 0) {
          this.FormViewerDetails.BasicDetails.MultiDoseDetails =
            new ObservableCollection<MultipleDoseDetail>();
          let oDetails: MultipleDoseDetail = new MultipleDoseDetail();
          oDetails.AdminTimesData = oGrdAdminstrativeTimesCols;
          this.FormViewerDetails.BasicDetails.MultiDoseDetails.Add(oDetails);
        }
        this.formViewerDetails.BasicDetails.ScheduledTimes = true;
      }
      if (
        (this.ActionCode == ActivityTypes.Amend ||
          this.ActionCode == ActivityTypes.Reorder) &&
        PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
      ) {
        if (this.FormViewerDetails.BasicDetails.AdminTimes != null) {
          if (
            String.Equals(
              oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks[0],
              'T',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.AdminTimes.IsSun = true;
          }
          if (
            String.Equals(
              oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks[1],
              'T',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.AdminTimes.IsMon = true;
          }
          if (
            String.Equals(
              oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks[2],
              'T',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.AdminTimes.IsTue = true;
          }
          if (
            String.Equals(
              oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks[3],
              'T',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.AdminTimes.IsWed = true;
          }
          if (
            String.Equals(
              oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks[4],
              'T',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.AdminTimes.IsThu = true;
          }
          if (
            String.Equals(
              oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks[5],
              'T',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.AdminTimes.IsFri = true;
          }
          if (
            String.Equals(
              oItemDetail.BasicProperties.FrequencyDetails.DaysOfWeeks[6],
              'T',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.AdminTimes.IsSat = true;
          }
        }
      }
    }
  }
  oSchedule_FixedSchDTTMChanged(): void {
    if (this.FormViewerDetails.BasicDetails != null)
      this.FormViewerDetails.BasicDetails.SetAdditionalOptionMessage();
  }
  GetAdministrationTimesDetails(): void {
    if (
      this.ActionCode != ActivityTypes.Reorder ||
      (this.ActionCode == ActivityTypes.Reorder &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .FrequencyType,
          CConstants.PeriodFrequency
        ))
    ) {
      let FreqOID: number = 0;
      if (
        String.Equals(this.OperationMode, 'U') &&
        String.Equals(this.ActionCode, ActivityTypes.UnHold)
      ) {
        this.oAdminTimesVM = new AdminstrativeTimesVM(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[
            this.Index
          ].StartDTTM,
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[
            this.Index
          ].EndDTTM
        );
        this.oAdminTimesVM.FreqDetails =
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[
            this.Index
          ].FreqDetails;
        this.oAdminTimesVM.AdminstrativeTimesCompleted = (s,e) => {
          this.FillAdminTimesForExisitngDoseCompleted();
        };
        this.oAdminTimesVM.FillAdministrationTimes(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .sceduledTimelst,
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .SlotTimeMode
        );
      } else if (
        this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
          .sceduledTimelst != null &&
        this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
          .sceduledTimelst.Count > 0
      ) {
        Number.TryParse(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .Frequency.Value,
          (o) => (FreqOID = o)
        );
        if (FreqOID > 0) {
          this.oAdminTimesVM = new AdminstrativeTimesVM(
            FreqOID,
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[
              this.Index
            ].sceduledTimelst,
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[
              this.Index
            ].SlotTimeMode
          );
          this.oAdminTimesVM.AdminstrativeTimesCompleted = (s,e) => {
            this.FillAdminTimesForExisitngDoseCompleted();
          };
        }
      } else {
        this.FillAdminTimesForExisitngDoseCompleted();
      }
    } else {
      if (
        this.ActionCode == ActivityTypes.Reorder &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .FrequencyType,
          CConstants.IntervalFreq
        )
      ) {
        this.FillAdminTimesForExisitngDoseCompleted();
      }
    }
  }
  FillAdminTimesForExisitngDoseCompleted(): void {
    if (this.oAdminTimesVM != null) {
      if (
        this.oAdminTimesVM.GrdData != null &&
        (!this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
          .IsReorderAndRetainSourceAdminTimes ||
          (this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .IsScheduleTimeLoaded &&
            this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
              .AdminTimesData == null))
      ) {
        this.oAdminTimesVM.EnableDisableAdminTimes(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .SlotTimeMode
        );
        this.FormViewerDetails.BasicDetails.MultiDoseDetails[
          this.Index
        ].AdminTimesData = this.oAdminTimesVM.GrdData;
      }
      this.oAdminTimesVM = null;
    }
    this.Index++;
    if (
      this.Index < this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count
    ) {
      this.GetAdministrationTimesDetails();
    }
  }
  GetFrequencyDetails(): void {
    if (
      this.ActionCode != ActivityTypes.Reorder ||
      (this.ActionCode == ActivityTypes.Reorder &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .FrequencyType,
          CConstants.PeriodFrequency
        ))
    ) {
      let FreqOID: number = 0;
      this.oAdminTimesVM = new AdminstrativeTimesVM();
      if (
        this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
          .Frequency != null
      ) {
        Number.TryParse(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .Frequency.Value,
          (o) => (FreqOID = o)
        );
        if (FreqOID > 0) {
          let oReq: IPPMAManagePrescSer.CReqMsgGetAdministrationTimes =
            ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.CReqMsgGetAdministrationTimes(),
              {
                oContextInformation: Common.FillContext(),
                lnFrequencyOIDBC: FreqOID,
                sMCVersionBC: AppSessionInfo.AMCV,
              }
            );
          let FreqOnChange: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
            new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
          FreqOnChange.GetAdministrationTimesCompleted = (s, e) => {
            this.FreqOnChange_GetAdministrationTimesCompleted(s, e);
          };
          FreqOnChange.GetAdministrationTimesAsync(oReq);
        }
      }
    } else {
      if (
        this.ActionCode == ActivityTypes.Reorder &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .FrequencyType,
          CConstants.IntervalFreq
        )
      ) {
        this.FreqOnChange_GetAdministrationTimesCompleted(this, null);
      }
    }
  }
  FreqOnChange_GetAdministrationTimesCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetAdministrationTimesCompletedEventArgs
  ): void {
    if (e != null && e.Result != null) {
      let oRes: IPPMAManagePrescSer.CResMsgGetAdministrationTimes = e.Result;
      if (oRes.oFrequency != null) {
        this.FormViewerDetails.BasicDetails.MultiDoseDetails[
          this.Index
        ].FreqDetails = oRes;
        if (
          this.formViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .FreqDetails.oFixedTimes != null
        ) {
          this.oAdminTimesVM.CheckSortTimes(
            this.formViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
              .FreqDetails.oFixedTimes,
            'F'
          );
        }
        if (
          this.formViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
            .FreqDetails.oDrugRoundTimes != null
        ) {
          this.oAdminTimesVM.CheckSortTimes(
            this.formViewerDetails.BasicDetails.MultiDoseDetails[this.Index]
              .FreqDetails.oDrugRoundTimes,
            'D'
          );
        }
      }
    }
    this.Index++;
    if (
      this.Index < this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count
    ) {
      this.GetFrequencyDetails();
    }
  }
  public GetResolveDetailsforQuantity(
    identiOid: number,
    IdentifyingType: string,
    mcversionNo: string,
    FollowupStat: string,
    prescriptionitemoid: number
  ): void {
    let objServiceProxyQuantity: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    objServiceProxyQuantity.GetResolveDetailCompleted = (s, e) => {
      this.objServiceProxyQuantity_GetResolveDetailCompleted(s, e);
    };
    let objReqResolve: IPPMAManagePrescSer.CReqMsgGetResolveDetail =
      new IPPMAManagePrescSer.CReqMsgGetResolveDetail();
    objReqResolve.oDrugItemBasicDataBC =
      new IPPMAManagePrescSer.DrugItemBasicData();
    objReqResolve.oDrugItemBasicDataBC.IdentifyingOID = identiOid;
    objReqResolve.oDrugItemBasicDataBC.IdentifyingType = IdentifyingType;
    objReqResolve.oDrugItemBasicDataBC.MCVersionNo = mcversionNo;
    objReqResolve.oDrugItemBasicDataBC.PrescribableItemListOID =
      prescriptionitemoid;
    objReqResolve.cFollowupStatBC = FollowupStat;
    objReqResolve.oContextInformation = Common.FillContext();
    objServiceProxyQuantity.GetResolveDetailAsync(objReqResolve);
  }
  objServiceProxyQuantity_GetResolveDetailCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetResolveDetailCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000039;
    this.NonFormularyCheckNote = String.Empty;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:PrescriptionItemVM, Method:objServiceProxy_GetResolveDetailCompleted()';
    if (e.Error == null) {
      try {
        let objResResolve: IPPMAManagePrescSer.CResMsgGetResolveDetail =
          e.Result;
        if (this.FormViewerDetails == null)
          this.FormViewerDetails = new FormViewerVM();
        if (this.FormViewerDetails.PresItemDRCVM == null)
          this.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
        if (this.FormViewerDetails.BasicDetails == null)
          this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
        if (this.FormViewerDetails.BasicDetails.DefaultDetails == null)
          this.FormViewerDetails.BasicDetails.DefaultDetails =
            new FormViewerDefaultsVM();
        if (
          this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys == null
        )
          this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys =
            new ObservableCollection<CListItem>();
        if (objResResolve != null && objResResolve.ResolveDetail != null) {
          if (objResResolve.ResolveDetail.Quantity != null) {
            let oDefValue: CListItem = null;
            objResResolve.ResolveDetail.Quantity.forEach((q) => {
              if (!String.IsNullOrEmpty(q.QuantityUOMName)) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: q.QuantityUOMName,
                    Value: q.QuantityUOMId.ToString(),
                  }
                );
                if (
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Where(
                    (x) =>
                      String.Equals(
                        x.Value,
                        oList.Value,
                        StringComparison.InvariantCultureIgnoreCase
                      )
                  ).Count() == 0
                ) {
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Add(
                    oList
                  );
                }
                if (
                  this.FormViewerDetails.BasicDetails.QuantityUOM != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.QuantityUOM.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails.QuantityUOM != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.QuantityUOM.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.QuantityUOM = oDefValue;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.QuantityUOM.DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Add(
                    this.FormViewerDetails.BasicDetails.QuantityUOM
                  );
              }
            }
          }
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            )
          ) {
            this.FormViewerDetails.BasicDetails.ReviewAfter =
              objResResolve.ResolveDetail.ReviewAfter;
            this.FormViewerDetails.BasicDetails.ReviewafterUOM =
              objResResolve.ResolveDetail.ReviewAfterUOM != null
                ? ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      objResResolve.ResolveDetail.ReviewAfterUOM.Name,
                    Value: objResResolve.ResolveDetail.ReviewAfterUOM.Code,
                  })
                : new CListItem();
            this.FormViewerDetails.BasicDetails.ReviewAfterMandatory =
              objResResolve.ResolveDetail.IsReviewafterReq;
            this.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig =
              objResResolve.ResolveDetail.IsReviewafterReq;
            if (objResResolve.ResolveDetail.IsReviewafterReq) {
              this.FormViewerDetails.BasicDetails.CurrentReviewAfterVisible =
                Visibility.Visible;
              if (
                (this.FormViewerDetails.BasicDetails.InfusionType != null &&
                  (String.Equals(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.CONTINUOUS
                  ) ||
                    String.Equals(
                      this.FormViewerDetails.BasicDetails.InfusionType.Value,
                      InfusionTypesCode.SINGLEDOSEVOLUME
                    ) ||
                    String.Equals(
                      this.FormViewerDetails.BasicDetails.InfusionType.Value,
                      InfusionTypesCode.FLUID
                    )) &&
                  this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .PrevSequentialPrescribingData != null &&
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .PrevSequentialPrescribingData.IsSequentialPrescribing) ||
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .SelectedSequenceName != null
              ) {
                this.FormViewerDetails.BasicDetails.ReviewAfterVisible =
                  Visibility.Collapsed;
                this.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
                  Visibility.Collapsed;
              } else {
                this.FormViewerDetails.BasicDetails.ReviewAfterVisible =
                  Visibility.Visible;
              }
            }
          }
          if (
            this.ActionCode == ActivityTypes.Prescribe &&
            this.FormViewerDetails.BasicDetails.Ordersets == null
          ) {
            if (
              !String.IsNullOrEmpty(objResResolve.ResolveDetail.PrescribingNote)
            ) {
              this.NonFormularyCheckNote =
                objResResolve.ResolveDetail.PrescribingNote;
              //Not Required for LHS. To be Re-Visited.
              if (this.oMedBrandChild.objPresItemVM.FormViewerDetails.BasicDetails.IsFormulary == "1") {
                  this.FormViewerDetails.BasicDetails.PrescribingNote = this.NonFormularyCheckNote;
                  this.FormViewerDetails.BasicDetails.IsPrescribingNoteIconVisible = Visibility.Visible;
              }
            } else {
              this.FormViewerDetails.BasicDetails.PrescribingNote =
                this.NonFormularyCheckNote;
              this.FormViewerDetails.BasicDetails.IsPrescribingNoteIconVisible =
                Visibility.Collapsed;
            }
          }
          if (
            this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.OrdersetSequence != null
          ) {
            this.FormViewerDetails.BasicDetails.ReviewAfterVisible =
              Visibility.Collapsed;
            this.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
              Visibility.Collapsed;
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    }
  }
  private callRTE(resolveDetailSender,resolveDetailCompletedEventArgs){
    ProcessRTE.GetValuesByDomainCode(ValueDomain.RANGEOPERATOR, (RTEResult,domainValuesCompletedEventArgs) => {this.OnRTEResultForRangeOperator(resolveDetailSender,resolveDetailCompletedEventArgs,RTEResult)});
  }
  private OnRTEResultForRangeOperator(resolveDetailSender,resolveDetailCompletedEventArgs,RTEResult){
    this.objServiceProxy_GetResolveDetailCompleted(resolveDetailSender,resolveDetailCompletedEventArgs,RTEResult);
  }
  public GetResolveDetails(
    identiOid: number,
    IdentifyingType: string,
    mcversionNo: string,
    FollowupStat: string,
    prescriptionitemoid: number,
    ordersetoid: string
  ): void {
    let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    objServiceProxy.GetResolveDetailCompleted = (s, e) => {
      this.callRTE(s, e);
    };
    let objReqResolve: IPPMAManagePrescSer.CReqMsgGetResolveDetail =
      new IPPMAManagePrescSer.CReqMsgGetResolveDetail();
    objReqResolve.oDrugItemBasicDataBC =
      new IPPMAManagePrescSer.DrugItemBasicData();
    objReqResolve.oDrugItemBasicDataBC.IdentifyingOID = identiOid;
    objReqResolve.oDrugItemBasicDataBC.IdentifyingType = IdentifyingType;
    objReqResolve.oDrugItemBasicDataBC.MCVersionNo = mcversionNo;
    objReqResolve.oDrugItemBasicDataBC.PrescribableItemListOID =
      prescriptionitemoid;
    objReqResolve.oDrugItemBasicDataBC.PrescribableItemDetailOID =
      this.PrescribableItemDetailOID;
    objReqResolve.oDrugItemBasicDataBC.OrdersetOID = ordersetoid;
    objReqResolve.cFollowupStatBC = FollowupStat;
    objReqResolve.oContextInformation = Common.FillContext();
    objServiceProxy.GetResolveDetailAsync(objReqResolve);
  }
  public GetMultiRoutes(
    IdentifyingOId: number,
    IdentifyingType: string,
    MCVersion: string
  ): void {  
    Busyindicator.SetStatusBusy("Multiroute");  
    let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    objServiceProxy.GetMultiRoutesCompleted = (s, e) => {
      this.objServiceProxy_GetMultiRoutesCompleted(s, e);
    };
    let objReqMultiRoutes: IPPMAManagePrescSer.CReqMsgGetMultiRoutes =
      new IPPMAManagePrescSer.CReqMsgGetMultiRoutes();
    objReqMultiRoutes.IdentifyingOIdBC = IdentifyingOId;
    objReqMultiRoutes.IdentifyingTypeBC = IdentifyingType;
    objReqMultiRoutes.MCVersionBC = MCVersion;
    objReqMultiRoutes.oContextInformation = Common.FillContext();
    objServiceProxy.GetMultiRoutesAsync(objReqMultiRoutes);
  }
  objServiceProxy_GetResolveDetailCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetResolveDetailCompletedEventArgs,RTEResult?:any
  ): void {
    let ArrayIndex: number = 3;
    let _ErrorID: number = 80000039;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:PrescriptionItemVM, Method:objServiceProxy_GetResolveDetailCompleted()';
    if (e.Error == null) {
      try {
        let objResResolve: IPPMAManagePrescSer.CResMsgGetResolveDetail =
          e.Result;
        this.objGetResolveDetail = objResResolve;
        if (this.FormViewerDetails == null)
          this.FormViewerDetails = new FormViewerVM();
        if (this.FormViewerDetails.PresItemDRCVM == null)
          this.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
        if (this.FormViewerDetails.BasicDetails == null)
          this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
        if (this.FormViewerDetails.BasicDetails.InfusionDetails == null)
          this.FormViewerDetails.BasicDetails.InfusionDetails = new InfusionVM(
            this.FormViewerDetails.BasicDetails
          );
        if (this.FormViewerDetails.BasicDetails.DefaultDetails == null)
          this.FormViewerDetails.BasicDetails.DefaultDetails =
            new FormViewerDefaultsVM();
        this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.MasterFrequencys =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.Forms =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.AdminInstructions =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.PRNInstructions =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUOM =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDurationList =
          new ObservableCollection<CListItem>();
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList == null
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList =
            new ObservableCollection<CListItem>();
        }
        this.FormViewerDetails.BasicDetails.DefaultDetails.ReviewAfterUOMList =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.ReviewAfterUOMListOriginal =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodList =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOMlist =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOMlist =
          new ObservableCollection<CListItem>();
        if (this.FormViewerDetails.BasicDetails.RecordAdmin == null)
          this.FormViewerDetails.BasicDetails.RecordAdmin = new RecordAdminVM();
        this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOMs =
          new ObservableCollection<CListItem>();
        this.FormViewerDetails.BasicDetails.DefaultDetails.IntervalInstalmentsUoM =
          new ObservableCollection<CListItem>();
        if (objResResolve != null && objResResolve.ResolveDetail != null) {
          if (objResResolve.ResolveDetail.InfusionPeriodUOM != null) {
            let oDefValue: CListItem = null;
            objResResolve.ResolveDetail.InfusionPeriodUOM.forEach((q) => {
              if (
                !String.IsNullOrEmpty(q.UOMName) &&
                !String.Equals(q.UOMCode, CConstants.second) &&
                !String.Equals(q.UOMCode, CConstants.minute)
              ) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: q.UOMName + '(s)',
                    Value: q.UOMId.ToString(),
                  }
                );
                this.FormViewerDetails.BasicDetails.DefaultDetails.IntervalInstalmentsUoM.Add(
                  oList
                );
                if (
                  this.FormViewerDetails.BasicDetails
                    .IntervalBetweenInstallmentUOM != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails
                      .IntervalBetweenInstallmentUOM.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails
                .IntervalBetweenInstallmentUOM != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails
                  .IntervalBetweenInstallmentUOM.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
                  oDefValue;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails
                      .IntervalBetweenInstallmentUOM.DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.DefaultDetails.IntervalInstalmentsUoM.Add(
                    this.FormViewerDetails.BasicDetails
                      .IntervalBetweenInstallmentUOM
                  );
              }
            }
          }
        }
        if (objResResolve != null && objResResolve.ResolveDetail != null) {
          if (objResResolve.ResolveDetail.Route != null) {
            let oDefValue: CListItem = null;
            objResResolve.ResolveDetail.Route.forEach((r) => {
              if (!String.IsNullOrEmpty(r.RouteName)) {
                let oRoute: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: r.RouteName,
                    Value: r.RouteId.ToString(),
                    Tag: r.bInfusion,
                    Level: !String.IsNullOrEmpty(r.IsStrengthReqd)
                      ? Convert.ToInt32(r.IsStrengthReqd)
                      : 0,
                  }
                );
                this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(
                  oRoute
                );
                if (
                  !String.IsNullOrEmpty(r.bInfusion) &&
                  this.FormViewerDetails.BasicDetails.Infusions != true
                ) {
                  if (PatientContext.IsINFUSIONON && r.bInfusion == '1')
                    this.FormViewerDetails.BasicDetails.Infusions = true;
                  else this.FormViewerDetails.BasicDetails.Infusions = false;
                }
                if (
                  this.FormViewerDetails.BasicDetails.Route != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.Route.Value,
                    oRoute.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oRoute;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails.Route != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.Route.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.Route = oDefValue;
                let oSelectedItem =
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
                    (oItem) =>
                      String.Compare(
                        oDefValue.Value,
                        oItem.Value,
                        StringComparison.OrdinalIgnoreCase
                      ) == 0
                  ).Select((oItem) => oItem);
                if (oSelectedItem != null && oSelectedItem.Count() > 0)
                  oSelectedItem.First().IsSelected = true;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.Route.DisplayText
                  ) &&
                  !this.FormViewerDetails.BasicDetails.Route.DisplayText.Contains(
                    '/'
                  )
                )
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(
                    this.FormViewerDetails.BasicDetails.Route
                  );
              }
            }
            oDefValue = null;
          } else {
            if (this.FormViewerDetails.BasicDetails.Route != null) {
              let oDefValue: CListItem = null;
              let oRoute: CListItem = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText:
                    this.FormViewerDetails.BasicDetails.Route.DisplayText,
                  Value: this.FormViewerDetails.BasicDetails.Route.Value,
                  Tag: this.FormViewerDetails.BasicDetails.Route.Tag,
                }
              );
              this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(
                oRoute
              );
              if (
                this.FormViewerDetails.BasicDetails.Route != null &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.Route.Value,
                  oRoute.Value,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
              )
                oDefValue = oRoute;
              if (
                this.FormViewerDetails.BasicDetails.Route != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.Route.Value
                )
              ) {
                if (oDefValue != null) {
                  this.FormViewerDetails.BasicDetails.Route = oDefValue;
                } else {
                  if (
                    !String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.Route.DisplayText
                    ) &&
                    !this.FormViewerDetails.BasicDetails.Route.DisplayText.Contains(
                      '/'
                    )
                  )
                    this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(
                      this.FormViewerDetails.BasicDetails.Route
                    );
                }
              }
            }
          }
          if (objResResolve.ResolveDetail.Quantity != null) {
            let oDefValue: CListItem = null;
            objResResolve.ResolveDetail.Quantity.forEach((q) => {
              if (!String.IsNullOrEmpty(q.QuantityUOMName)) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: q.QuantityUOMName,
                    Value: q.QuantityUOMId.ToString(),
                  }
                );
                this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Add(
                  oList
                );
                if (
                  this.FormViewerDetails.BasicDetails.QuantityUOM != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.QuantityUOM.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails.QuantityUOM != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.QuantityUOM.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.QuantityUOM = oDefValue;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.QuantityUOM.DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Add(
                    this.FormViewerDetails.BasicDetails.QuantityUOM
                  );
              }
            }
          }
          if (objResResolve.ResolveDetail.AdminInstruction != null) {
            let oDefValue: CListItem = null;
            for (
              let i: number = 0;
              i < objResResolve.ResolveDetail.AdminInstruction.Count;
              i++
            ) {
              if (
                objResResolve.ResolveDetail.AdminInstruction[i] != null &&
                !String.IsNullOrEmpty(
                  objResResolve.ResolveDetail.AdminInstruction[i].Name
                )
              ) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText:
                      objResResolve.ResolveDetail.AdminInstruction[i].Name,
                    Value:
                      objResResolve.ResolveDetail.AdminInstruction[
                        i
                      ].OID.ToString(),
                  }
                );
                this.FormViewerDetails.BasicDetails.DefaultDetails.AdminInstructions.Add(
                  oList
                );
                if (
                  this.FormViewerDetails.BasicDetails.AdminInstruction !=
                    null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.AdminInstruction.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
              }
            }
            if (
              this.FormViewerDetails.BasicDetails.AdminInstruction != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.AdminInstruction.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.AdminInstruction =
                  oDefValue;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.AdminInstruction
                      .DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.DefaultDetails.AdminInstructions.Add(
                    this.FormViewerDetails.BasicDetails.AdminInstruction
                  );
              }
            }
          }
          if (
            !String.IsNullOrEmpty(
              objResResolve.ResolveDetail.PrescribingNote
            ) &&
            this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null
          ) {
            this.FormViewerDetails.BasicDetails.PrescribingNote =
              objResResolve.ResolveDetail.PrescribingNote;
            this.FormViewerDetails.BasicDetails.IsPrescribingNoteIconVisible =
              Visibility.Visible;
          }
          if (
            ReviewAfterUOMList.ConceptCodes != null &&
            ReviewAfterUOMList.ConceptCodes.Count > 0
          ) {
            ReviewAfterUOMList.ConceptCodes.forEach((oCListItem) => {
              this.FormViewerDetails.BasicDetails.DefaultDetails.ReviewAfterUOMList.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: oCListItem.Value,
                  DisplayText: oCListItem.DisplayText,
                })
              );
              this.FormViewerDetails.BasicDetails.DefaultDetails.ReviewAfterUOMListOriginal.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: oCListItem.Value,
                  DisplayText: oCListItem.DisplayText,
                })
              );
            });
          }
          if (
            objResResolve.ResolveDetail.IsReviewafterReq &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration
            ) &&
            this.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
              Visibility.Collapsed
          ) {
            let TypeInDrug: boolean = false;
            if (
              this.FormViewerDetails != null &&
              this.FormViewerDetails.BasicDetails != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.IdentifyingType
              ) &&
              (String.Compare(
                this.FormViewerDetails.BasicDetails.IdentifyingType,
                CConstants.NONCATALOGUEITEM,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
                String.Compare(
                  this.FormViewerDetails.BasicDetails.IdentifyingType,
                  CConstants.Precatalog,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0)
            ) {
              TypeInDrug = true;
            }
          }
          if (objResResolve.ResolveDetail.IsReviewafterReq) {
            this.FormViewerDetails.BasicDetails.ReviewAfterMandatory = true;
            this.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig =
              true;
          } else {
            this.FormViewerDetails.BasicDetails.ReviewAfterMandatory = false;
            this.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig =
              false;
          }
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration
            )
          ) {
            this.FormViewerDetails.BasicDetails.ReviewAfterVisible =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.CurrentReviewAfterVisible =
              Visibility.Visible;
          }
          if (this.FormViewerDetails.BasicDetails.OrdersetSequence != null) {
            this.FormViewerDetails.BasicDetails.ReviewAfterVisible =
              Visibility.Collapsed;
            this.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
              Visibility.Collapsed;
          }
          this.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod =
            objResResolve.ResolveDetail.IsIgnoreAdminMethod;
          if (
            this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')
          ) {
            if (
              objResResolve.ResolveDetail.oPGDListDetail != null &&
              objResResolve.ResolveDetail.oPGDListDetail.Frequnecy != null
            ) {
              let oList: CListItem = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText:
                    objResResolve.ResolveDetail.oPGDListDetail.Frequnecy.Name,
                  Value:
                    objResResolve.ResolveDetail.oPGDListDetail.Frequnecy.OID.ToString(),
                  Tag: '0~CC_IPONCENLY'.Split('~'),
                }
              );
              this.FormViewerDetails.BasicDetails.DefaultDetails.MasterFrequencys.Add(
                oList
              );
              this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(
                oList
              );
              this.FormViewerDetails.BasicDetails.Frequency = oList;
              this.FormViewerDetails.BasicDetails.IsenableDoseType = false;
              this.FormViewerDetails.BasicDetails.IsenableFrequency = false;
              this.oDefaultFreq =
                this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys;
              this.oDefaultMFreq =
                this.FormViewerDetails.BasicDetails.DefaultDetails.MasterFrequencys;
            } else {
              this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
            }
          } else if (
            objResResolve.ResolveDetail.objFrequencyDetails != null &&
            objResResolve.ResolveDetail.objFrequencyDetails.Count > 0
          ) {
            this.FormViewerDetails.BasicDetails.DefaultDetails.NonPRNFrequencies =
              new ObservableCollection<CListItem>();
            this.FormViewerDetails.BasicDetails.DefaultDetails.SteppedFrequencies =
              new ObservableCollection<CListItem>();
            let nFreqCnt: number =
              objResResolve.ResolveDetail.objFrequencyDetails.Count;
            let oDefValue: CListItem = null;
            let oList: CListItem = null;
            let sFreqTag: string[] = null;
            let bIsNonPRNFreq: boolean = false;
            let sDoseType: string =
              this.FormViewerDetails.BasicDetails.DoseType != null
                ? this.FormViewerDetails.BasicDetails.DoseType.Value
                : String.Empty;
            this.FormViewerDetails.BasicDetails.IsFreqFilledForDOS = false;
            for (let i: number = 0; i < nFreqCnt; i++) {
              if (
                objResResolve.ResolveDetail.objFrequencyDetails[i] != null &&
                !String.IsNullOrEmpty(
                  objResResolve.ResolveDetail.objFrequencyDetails[i].Name
                )
              ) {
                sFreqTag = (
                  !String.IsNullOrEmpty(
                    objResResolve.ResolveDetail.objFrequencyDetails[i].Code
                  )
                    ? objResResolve.ResolveDetail.objFrequencyDetails[i].Code
                    : '0~'
                ).Split('~');
                bIsNonPRNFreq = String.Compare(sFreqTag[0], '0') == 0;
                oList = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText:
                    objResResolve.ResolveDetail.objFrequencyDetails[i].Name,
                  Value:
                    objResResolve.ResolveDetail.objFrequencyDetails[
                      i
                    ].OID.ToString(),
                  Tag: sFreqTag,
                });
                this.FormViewerDetails.BasicDetails.DefaultDetails.MasterFrequencys.Add(
                  oList
                );
                if (
                  String.Compare(
                    sDoseType,
                    DoseTypeCode.TITRATED,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                ) {
                  if (bIsNonPRNFreq) {
                    this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(
                      oList
                    );
                    if (String.Compare(sFreqTag[1], 'CC_IPONCENLY') != 0)
                      this.FormViewerDetails.BasicDetails.DefaultDetails.NonPRNFrequencies.Add(
                        oList
                      );
                  }
                  if (
                    String.Compare(
                      sDoseType,
                      DoseTypeCode.STEPPEDVARIABLE,
                      StringComparison.OrdinalIgnoreCase
                    ) == 0
                  ) {
                    let _AsDirectedLZOID: string = CConstants.AsDirectedLZOID;
                    if (!String.IsNullOrEmpty(Common.Frc001Childs))
                      _AsDirectedLZOID = Common.Frc001Childs;
                    let _WhenRequiredLZOID: string =
                      CConstants.WhenRequiredLZOID;
                    if (!String.IsNullOrEmpty(Common.Frq88Childs))
                      _WhenRequiredLZOID = Common.Frq88Childs;
                    if (
                      !String.Equals(
                        sFreqTag[4],
                        CConstants.IntervalFreq,
                        StringComparison.InvariantCultureIgnoreCase
                      ) &&
                      !String.Equals(
                        sFreqTag[0],
                        '1',
                        StringComparison.InvariantCultureIgnoreCase
                      ) &&
                      !_WhenRequiredLZOID.Equals(sFreqTag[2]) &&
                      !_AsDirectedLZOID.Equals(sFreqTag[2])
                    ) {
                      this.FormViewerDetails.BasicDetails.DefaultDetails.SteppedFrequencies.Add(
                        oList
                      );
                    }
                  }
                } else {
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(
                    oList
                  );
                  let _AsDirectedLZOID: string = CConstants.AsDirectedLZOID;
                  if (!String.IsNullOrEmpty(Common.Frc001Childs))
                    _AsDirectedLZOID = Common.Frc001Childs;
                  let _WhenRequiredLZOID: string = CConstants.WhenRequiredLZOID;
                  if (!String.IsNullOrEmpty(Common.Frq88Childs))
                    _WhenRequiredLZOID = Common.Frq88Childs;
                  if (
                    !String.Equals(sFreqTag[4], CConstants.IntervalFreq) &&
                    !String.Equals(sFreqTag[0], '1') &&
                    !_WhenRequiredLZOID.Contains(sFreqTag[2]) &&
                    !_AsDirectedLZOID.Contains(sFreqTag[2])
                  ) {
                    this.FormViewerDetails.BasicDetails.DefaultDetails.SteppedFrequencies.Add(
                      oList
                    );
                  }
                  if (
                    bIsNonPRNFreq &&
                    String.Compare(sFreqTag[1], 'CC_IPONCENLY') != 0
                  )
                    this.FormViewerDetails.BasicDetails.DefaultDetails.NonPRNFrequencies.Add(
                      oList
                    );
                }
                if (
                  this.FormViewerDetails.BasicDetails.Frequency != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.Frequency.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                ) {
                  oDefValue = oList;
                  this.FormViewerDetails.BasicDetails.IsFreqFilledForDOS = true;
                }
              }
            }
            if (
              this.FormViewerDetails.BasicDetails.Frequency != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.Frequency.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.Frequency = oDefValue;
                this.FormViewerDetails.BasicDetails.SetAsRequiredState();
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.Frequency.DisplayText
                  )
                ) {
                  this.FormViewerDetails.BasicDetails.DefaultDetails.MasterFrequencys.Insert(
                    0,
                    this.FormViewerDetails.BasicDetails.Frequency
                  );
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(
                    this.FormViewerDetails.BasicDetails.Frequency
                  );
                  sFreqTag = ObjectHelper.CreateType<string[]>(
                    this.FormViewerDetails.BasicDetails.Frequency.Tag,
                    'string[]'
                  );
                  if (sFreqTag != null && sFreqTag.Count() == 1) {
                    if (String.Compare(sFreqTag[0], '0') == 0)
                      this.FormViewerDetails.BasicDetails.DefaultDetails.NonPRNFrequencies.Add(
                        this.FormViewerDetails.BasicDetails.Frequency
                      );
                  } else {
                    if (
                      sFreqTag != null &&
                      sFreqTag.length > 1 &&
                      String.Compare(sFreqTag[0], '0') == 0 &&
                      String.Compare(sFreqTag[1], 'CC_IPONCENLY') != 0
                    )
                      this.FormViewerDetails.BasicDetails.DefaultDetails.NonPRNFrequencies.Add(
                        this.FormViewerDetails.BasicDetails.Frequency
                      );
                    if (
                      sFreqTag != null &&
                      sFreqTag.length > 1 &&
                      String.Equals(sFreqTag[0], '0') &&
                      !String.Equals(sFreqTag[1], 'CC_IPONCENLY')
                    ) {
                      this.FormViewerDetails.BasicDetails.DefaultDetails.SteppedFrequencies.Add(
                        this.FormViewerDetails.BasicDetails.Frequency
                      );
                    }
                  }
                  this.FormViewerDetails.BasicDetails.SetAsRequiredState();
                }
              }
            }
            this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
            this.FormViewerDetails.BasicDetails.DefaultDetails.MasterFrequencys.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
            this.FormViewerDetails.BasicDetails.DefaultDetails.NonPRNFrequencies.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
            this.FormViewerDetails.BasicDetails.DefaultDetails.SteppedFrequencies.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
            this.oDefaultFreq = ObjectHelper.CreateType<Object>(
              this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys,
              Object
            );
            this.oDefaultMFreq = ObjectHelper.CreateType<Object>(
              this.FormViewerDetails.BasicDetails.DefaultDetails
                .MasterFrequencys,
              Object
            );
            this.oDefaultNFreq = ObjectHelper.CreateType<Object>(
              this.FormViewerDetails.BasicDetails.DefaultDetails
                .NonPRNFrequencies,
              Object
            );
          } else {
            this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
          if (
            objResResolve.ResolveDetail.objFrequencyDetails != null &&
            objResResolve.ResolveDetail.objFrequencyDetails.Count > 0
          ) {
            let nAllFreqCnt: number =
              objResResolve.ResolveDetail.objFrequencyDetails.Count;
            let sQualifiedFreqTag: string[] = null;
            let oQualifiedList: CListItem = null;
            for (let iCnt: number = 0; iCnt < nAllFreqCnt - 1; iCnt++) {
              if (
                objResResolve.ResolveDetail.objFrequencyDetails[iCnt] != null &&
                !String.IsNullOrEmpty(
                  objResResolve.ResolveDetail.objFrequencyDetails[iCnt].Name
                )
              ) {
                sQualifiedFreqTag = (
                  !String.IsNullOrEmpty(
                    objResResolve.ResolveDetail.objFrequencyDetails[iCnt].Code
                  )
                    ? objResResolve.ResolveDetail.objFrequencyDetails[iCnt].Code
                    : '0~'
                ).Split('~');
                let Check: number = 3;
                if (
                  sQualifiedFreqTag.Count() > Check &&
                  sQualifiedFreqTag[ArrayIndex] != null &&
                  String.Equals(sQualifiedFreqTag[ArrayIndex], '1')
                ) {
                  oQualifiedList = ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      objResResolve.ResolveDetail.objFrequencyDetails[iCnt]
                        .Name,
                    Value: Convert.ToString(
                      objResResolve.ResolveDetail.objFrequencyDetails[iCnt].OID
                    ),
                    Tag: objResResolve.ResolveDetail.objFrequencyDetails[iCnt]
                      .Code,
                  });
                  this.FormViewerDetails.BasicDetails.DefaultDetails.QualifiedFrequencies.Add(
                    oQualifiedList
                  );
                }
              }
            }
            this.FormViewerDetails.BasicDetails.DefaultDetails.QualifiedFrequencies.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
          if (
            objResResolve.ResolveDetail.objDoseCalciUOMs != null &&
            objResResolve.ResolveDetail.objDoseCalciUOMs.Count > 0
          ) {
            let nAllUOMCnt: number =
              objResResolve.ResolveDetail.objDoseCalciUOMs.Count;
            let oQualifiedList: CListItem = null;
            for (let iCnt: number = 0; iCnt < nAllUOMCnt - 1; iCnt++) {
              oQualifiedList = ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  objResResolve.ResolveDetail.objDoseCalciUOMs[iCnt].Name,
                Value: objResResolve.ResolveDetail.objDoseCalciUOMs[iCnt].Code,
                Tag: objResResolve.ResolveDetail.objDoseCalciUOMs[iCnt]
                  .OperationMode,
              });
              this.FormViewerDetails.BasicDetails.DefaultDetails.DoseCalciQualifiedUOMs.Add(
                oQualifiedList
              );
            }
          }
          this.FormViewerDetails.BasicDetails.DefaultDetails.AdminMethods =
            new ObservableCollection<CListItem>();
          if (objResResolve.ResolveDetail.Adminmethod != null) {
            objResResolve.ResolveDetail.Adminmethod.forEach((a) => {
              this.FormViewerDetails.BasicDetails.DefaultDetails.AdminMethods.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: a.AdminMethodName,
                  Value: a.AdminMethodId.ToString(),
                })
              );
              if (
                this.FormViewerDetails.BasicDetails.AdminMethod != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.AdminMethod.Value
                ) &&
                this.FormViewerDetails.BasicDetails.AdminMethod.Value.length >
                  0 &&
                this.FormViewerDetails.BasicDetails.AdminMethod.Value ==
                  a.AdminMethodId.ToString()
              )
                this.FormViewerDetails.BasicDetails.AdminMethod =
                  this.FormViewerDetails.BasicDetails.DefaultDetails.AdminMethods.LastOrDefault();
            });
          }
          if (
            objResResolve.ResolveDetail.PRNInstructions != null &&
            objResResolve.ResolveDetail.PRNInstructions.Count > 0
          ) {
            let nCnt: number =
              objResResolve.ResolveDetail.PRNInstructions.Count;
            let oDefaultItem: CListItem = null;
            let oListItem: CListItem = null;
            for (let i: number = 0; i < nCnt; i++) {
              if (
                objResResolve.ResolveDetail.PRNInstructions[i] == null ||
                String.IsNullOrEmpty(
                  objResResolve.ResolveDetail.PRNInstructions[i].Name
                )
              )
                continue;
              oListItem = ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  objResResolve.ResolveDetail.PRNInstructions[i].Name,
                Value:
                  objResResolve.ResolveDetail.PRNInstructions[i].OID.ToString(),
              });
              if (
                this.FormViewerDetails.BasicDetails.PRNInstruction != null &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.PRNInstruction.Value,
                  oListItem.Value
                ) == 0
              )
                oDefaultItem = oListItem;
              else if (
                this.FormViewerDetails.BasicDetails.PRNInstruction != null &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.PRNInstruction
                    .DisplayText,
                  oListItem.DisplayText
                ) == 0
              )
                oDefaultItem = oListItem;
              this.FormViewerDetails.BasicDetails.DefaultDetails.PRNInstructions.Add(
                oListItem
              );
            }
            if (oDefaultItem != null)
              this.FormViewerDetails.BasicDetails.PRNInstruction = oDefaultItem;
          }
          if (
            objResResolve.ResolveDetail.WarningMessage != null &&
            objResResolve.ResolveDetail.WarningMessage.Count > 0
          ) {
            this.FormViewerDetails.BasicDetails.IngredientWarning = String.Join(
              '\n',
              objResResolve.ResolveDetail.WarningMessage.ToArray()
            );
          }
          this.FormViewerDetails.BasicDetails.IsAllowMultiRoute =
            objResResolve.ResolveDetail.IsAllowMultipleRoute;
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            ) &&
            PatientContext.ClerkFormViewDefaultBehavior !=
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ) {
            this.FormViewerDetails.BasicDetails.IsAuthorise =
              objResResolve.ResolveDetail.IsAuthorise;
            this.FormViewerDetails.BasicDetails.IsOrgAuthorise =
              objResResolve.ResolveDetail.IsAuthorise;
            if (objResResolve.ResolveDetail.IsAuthorise) {
              this._bOtherAuthorise =
                this.FormViewerDetails.BasicDetails.IdentifyingName == null
                  ? true
                  : false;
              if (this.FormViewerDetails.BasicDetails.IdentifyingName != null) {
                this.FormViewerDetails.BasicDetails.IndentifyingDrugName = null;
                this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
                  this.FormViewerDetails.BasicDetails.IdentifyingName +
                  CConstants.sAuthoriseText;
              }
            }
          }
          if (objResResolve.ResolveDetail.VolumeUOM != null) {
            let oDefValue: CListItem = null;
            let oDefUpperconValue: CListItem = null;
            objResResolve.ResolveDetail.VolumeUOM.forEach((q) => {
              if (!String.IsNullOrEmpty(q.UOMName)) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: q.UOMName,
                    Value: q.UOMId.ToString(),
                    Tag: q.UOMCode,
                  }
                );
                this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList.Add(
                  oList
                );
                this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOMlist.Add(
                  oList
                );
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .VolumeUOM != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .VolumeUOM.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .UpperConcentrationUOM != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .UpperConcentrationUOM.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefUpperconValue = oList;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM !=
                null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM
                  .Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM =
                  oDefValue;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .VolumeUOM.DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList.Add(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .VolumeUOM
                  );
              }
            }
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .LowConcentrationUOM != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .LowConcentrationUOM.Value
              )
            ) {
              if (oDefUpperconValue != null) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM =
                  oDefUpperconValue;
              } else {
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .UpperConcentrationUOM != null &&
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .UpperConcentrationUOM.DisplayText
                  )
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOMlist.Add(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .UpperConcentrationUOM
                  );
                }
              }
            }
          }
          if (objResResolve.ResolveDetail.InfusionPeriodUOM != null) {
            let oDefValue: CListItem = null;
            objResResolve.ResolveDetail.InfusionPeriodUOM.forEach((q) => {
              if (
                !String.IsNullOrEmpty(q.UOMName) &&
                !String.Equals(q.UOMCode, CConstants.second) &&
                !String.Equals(q.UOMCode, CConstants.month) &&
                !String.Equals(q.UOMCode, CConstants.year)
              ) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: q.UOMName,
                    Value: q.UOMId.ToString(),
                    Tag: q.UOMCode,
                  }
                );
                this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUOM.Add(
                  oList
                );
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .InfusionPeriodUom != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfusionPeriodUom.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfusionPeriodUom != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriodUom.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom =
                  oDefValue;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfusionPeriodUom.DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUOM.Add(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfusionPeriodUom
                  );
              }
            }
          }
          if (objResResolve.ResolveDetail.RateDenaminatorUOM != null) {
            let oDefValue: CListItem = null;
            if (
              this.FormViewerDetails.BasicDetails.itemSubType !=
              CConstants.SUBTYPE_GAS
            ) {
              oDefValue = null;
              if (
                !String.Equals(
                  this.FormViewerDetails.BasicDetails.itemSubType,
                  CConstants.SUBTYPE
                ) &&
                this.ActionCode != ActivityTypes.Amend
              ) {
                objResResolve.ResolveDetail.RateDenaminatorUOM.forEach((q) => {
                  if (
                    !String.IsNullOrEmpty(q.UOMName) &&
                    !String.Equals(q.UOMCode, CConstants.litre)
                  ) {
                    let oList: CListItem = ObjectHelper.CreateObject(
                      new CListItem(),
                      {
                        DisplayText: q.UOMName,
                        Value: q.UOMId.ToString(),
                        Tag: q.UOMCode,
                      }
                    );
                    if (
                      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(
                        (x) =>
                          x.Tag != null &&
                          oList.Tag != null &&
                          x.Tag.ToString().Contains(oList.Tag.ToString())
                      ).Count() == 0
                    ) {
                      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Add(
                        oList
                      );
                    }
                    if (
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .InfRateNumeratorUom != null &&
                      (String.Equals(
                        this.FormViewerDetails.BasicDetails.InfusionDetails
                          .InfRateNumeratorUom.Value,
                        oList.Value,
                        StringComparison.OrdinalIgnoreCase
                      ) ||
                        String.Equals(
                          this.FormViewerDetails.BasicDetails.InfusionDetails
                            .InfRateNumeratorUom.DisplayText,
                          oList.DisplayText,
                          StringComparison.OrdinalIgnoreCase
                        ))
                    ) {
                      oDefValue = oList;
                    }
                  }
                });
              }
              if (
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfRateNumeratorUom != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .InfRateNumeratorUom.Value
                )
              ) {
                if (oDefValue != null) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
                    oDefValue;
                } else {
                  if (
                    !String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .InfRateNumeratorUom.DisplayText
                    ) &&
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        String.Equals(
                          x.Value,
                          this.FormViewerDetails.BasicDetails.InfusionDetails
                            .InfRateNumeratorUom.Value
                        )
                    ).Count() == 0
                  ) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Add(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .InfRateNumeratorUom
                    );
                  }
                }
              }
              if (objResResolve.ResolveDetail.ConcentrationDoseUOM != null) {
                oDefValue = null;
                objResResolve.ResolveDetail.ConcentrationDoseUOM.forEach(
                  (q) => {
                    let oList: CListItem = ObjectHelper.CreateObject(
                      new CListItem(),
                      {
                        DisplayText: q.UOMName,
                        Value: q.UOMId.ToString(),
                        Tag: q.UOMCode,
                      }
                    );
                    if (
                      this.FormViewerDetails.BasicDetails.RecordAdmin
                        .ConcentrationStrengthUOMs != null
                    )
                      this.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrengthUOMs.Add(
                        oList
                      );
                    if (
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .LowConcentrationUOM != null &&
                      String.Compare(
                        this.FormViewerDetails.BasicDetails.InfusionDetails
                          .LowConcentrationUOM.Value,
                        oList.Value,
                        StringComparison.OrdinalIgnoreCase
                      ) == 0
                    )
                      oDefValue = oList;
                  }
                );
              }
              if (
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .LowConcentrationUOM != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .LowConcentrationUOM.Value
                )
              ) {
                if (
                  oDefValue != null &&
                  objResResolve.ResolveDetail.ConcentrationDoseUOM != null
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM =
                    oDefValue;
                } else {
                  if (
                    !String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .LowConcentrationUOM.DisplayText
                    )
                  )
                    this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOMlist.Add(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .LowConcentrationUOM
                    );
                }
              }
            } else {
              objResResolve.ResolveDetail.RateDenaminatorUOM.forEach((q) => {
                if (
                  !String.IsNullOrEmpty(q.UOMName) &&
                  String.Equals(q.UOMCode, CConstants.litre)
                ) {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: q.UOMName,
                      Value: q.UOMId.ToString(),
                      Tag: q.UOMCode,
                    }
                  );
                  if (
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        x.Tag != null &&
                        oList.Tag != null &&
                        x.Tag.ToString().Contains(oList.Tag.ToString())
                    ).Count() == 0
                  ) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Add(
                      oList
                    );
                  }
                  if (
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfRateNumeratorUom != null &&
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfRateNumeratorUom.Value == oList.Value
                  ) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
                      oList;
                  }
                }
              });
            }
          }
          if (objResResolve.ResolveDetail.RateDenaminatorUOMO != null) {
            let oDefValue: CListItem = null;
            if (
              this.FormViewerDetails.BasicDetails.itemSubType !=
              CConstants.SUBTYPE_GAS
            ) {
              objResResolve.ResolveDetail.RateDenaminatorUOMO.forEach((q) => {
                if (
                  !String.IsNullOrEmpty(q.UOMName) &&
                  (String.Equals(q.UOMCode, CConstants.hour) ||
                    String.Equals(q.UOMCode, CConstants.minute))
                ) {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: q.UOMName,
                      Value: q.UOMId.ToString(),
                      Tag: q.UOMCode,
                    }
                  );
                  this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Add(
                    oList
                  );
                  if (
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfRateDinominatorUom != null &&
                    (String.Equals(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .InfRateDinominatorUom.Value,
                      oList.Value,
                      StringComparison.OrdinalIgnoreCase
                    ) ||
                      String.Equals(
                        this.FormViewerDetails.BasicDetails.InfusionDetails
                          .InfRateDinominatorUom.DisplayText,
                        oList.DisplayText,
                        StringComparison.OrdinalIgnoreCase
                      ))
                  ) {
                    oDefValue = oList;
                  }
                }
              });
              if (
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfRateDinominatorUom != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .InfRateDinominatorUom.Value
                )
              ) {
                if (oDefValue != null) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
                    oDefValue;
                } else {
                  if (
                    !String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .InfRateDinominatorUom.DisplayText
                    )
                  )
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Add(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .InfRateDinominatorUom
                    );
                }
              }
            } else {
              objResResolve.ResolveDetail.RateDenaminatorUOMO.forEach((q) => {
                if (
                  !String.IsNullOrEmpty(q.UOMName) &&
                  String.Equals(q.UOMCode, CConstants.minute)
                ) {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: q.UOMName,
                      Value: q.UOMId.ToString(),
                      Tag: q.UOMCode,
                    }
                  );
                  this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Add(
                    oList
                  );
                  if (
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfRateDinominatorUom != null &&
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .InfRateDinominatorUom.Value == oList.Value
                  ) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
                      oList;
                  }
                }
              });
            }
          }
          if (objResResolve.ResolveDetail.InfusionPeriodUOM != null) {
            let oDefValue: CListItem = null;
            objResResolve.ResolveDetail.InfusionPeriodUOM.forEach((q) => {
              if (
                !String.IsNullOrEmpty(q.UOMName) &&
                !String.Equals(q.UOMCode, CConstants.second)
              ) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: q.UOMName,
                    Value: q.UOMId.ToString(),
                  }
                );
                this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDurationList.Add(
                  oList
                );
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .LockoutDuration != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .LockoutDuration.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .LockoutDuration != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .LockoutDuration.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration =
                  oDefValue;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .LockoutDuration.DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDurationList.Add(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .LockoutDuration
                  );
              }
            }
          }
          if (objResResolve.ResolveDetail.InfusionPeriodUOM != null) {
            let oDefValue: CListItem = null;
            objResResolve.ResolveDetail.InfusionPeriodUOM.forEach((q) => {
              if (
                !String.IsNullOrEmpty(q.UOMName) &&
                !String.Equals(q.UOMCode, CConstants.second)
              ) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: q.UOMName,
                    Value: q.UOMId.ToString(),
                  }
                );
                this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodList.Add(
                  oList
                );
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .MonitoringPeriodUOM != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .MonitoringPeriodUOM.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .MonitoringPeriodUOM != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .MonitoringPeriodUOM.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM =
                  oDefValue;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .MonitoringPeriodUOM.DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodList.Add(
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .MonitoringPeriodUOM
                  );
              }
            }
          }
          if (objResResolve.ResolveDetail.oInfusionFluidDetails != null) {
            let oVPInfFluidItems =
              objResResolve.ResolveDetail.oInfusionFluidDetails
                .Where((oItem) => oItem.IdentifyingType == 'VIRTUALPRODUCT')
                .Select((oItem) => oItem);
            if (oVPInfFluidItems != null && oVPInfFluidItems.Count() > 0) {
              let oInfFluidItems =
                objResResolve.ResolveDetail.oInfusionFluidDetails
                  .Where(
                    (oItem) =>
                      oItem.IdentifyingType == 'VIRTUALPRODUCT' &&
                      oItem.IsInfusionFluid == '1'
                  )
                  .Select((oItem) => oItem);
              if (oInfFluidItems != null && oInfFluidItems.Count() > 0) {
                if (
                  objResResolve.ResolveDetail.oInfusionFluidDetails.Count ==
                  oInfFluidItems.Count()
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
                    Visibility.Collapsed;
                  this.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue =
                    null;
                  this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext =
                    String.Empty;
                  this.FormViewerDetails.BasicDetails.IsInfusionFluid = '1';
                } else {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
                    this != null &&
                    this.FormViewerDetails != null &&
                    this.FormViewerDetails.BasicDetails != null &&
                    this.FormViewerDetails.BasicDetails.itemSubType != null &&
                    String.Equals(
                      this.FormViewerDetails.BasicDetails.itemSubType,
                      CConstants.SUBTYPE,
                      StringComparison.OrdinalIgnoreCase
                    )
                      ? Visibility.Collapsed
                      : Visibility.Visible;
                  this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory =
                    false;
                  if (
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .isFluidVisible == Visibility.Visible &&
                    !String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .FluidFreetext
                    )
                  ) {
                    if (
                      this.FormViewerDetails.BasicDetails.InfusionType !=
                        null &&
                      String.Equals(
                        this.FormViewerDetails.BasicDetails.InfusionType.Value,
                        InfusionTypesCode.CONTINUOUS
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible =
                        Visibility.Visible;
                      this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationMandatory =
                        false;
                    } else if (
                      this.FormViewerDetails.BasicDetails.InfusionType !=
                        null &&
                      String.Equals(
                        this.FormViewerDetails.BasicDetails.InfusionType.Value,
                        InfusionTypesCode.SINGLEDOSEVOLUME
                      )
                    ) {
                      this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible =
                        Visibility.Visible;
                      this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeMandatory =
                        false;
                    }
                  }
                }
              } else {
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .oBasicDetailsVM.Infusions != null
                ) {
                  let oVPInfFluidItems_1 =
                    this.objGetResolveDetail.ResolveDetail.oInfusionFluidDetails
                      .Where(
                        (oItem) =>
                          oItem.FluidItemIdfyngOID ==
                            this.FormViewerDetails.BasicDetails.InfusionDetails
                              .oBasicDetailsVM.IdentifyingOID &&
                          oItem.IdentifyingType ==
                            this.FormViewerDetails.BasicDetails.InfusionDetails
                              .oBasicDetailsVM.IdentifyingType &&
                          oItem.IsInfusionFluid == '1'
                      )
                      .Select((oItem) => oItem);
                  if (
                    oVPInfFluidItems_1 != null &&
                    oVPInfFluidItems_1.Count() > 0
                  ) {
                    this.FormViewerDetails.BasicDetails.IsInfusionFluid = '1';
                    this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
                      Visibility.Collapsed;
                    this.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue =
                      null;
                    this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext =
                      String.Empty;
                    this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory =
                      false;
                  } else {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
                      this != null &&
                      this.FormViewerDetails != null &&
                      this.FormViewerDetails.BasicDetails != null &&
                      this.FormViewerDetails.BasicDetails.itemSubType != null &&
                      String.Equals(
                        this.FormViewerDetails.BasicDetails.itemSubType,
                        CConstants.SUBTYPE,
                        StringComparison.OrdinalIgnoreCase
                      )
                        ? Visibility.Collapsed
                        : Visibility.Visible;
                    this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory =
                      false;
                    if (
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .isFluidVisible == Visibility.Visible &&
                      !String.IsNullOrEmpty(
                        this.FormViewerDetails.BasicDetails.InfusionDetails
                          .FluidFreetext
                      )
                    ) {
                      if (
                        this.FormViewerDetails.BasicDetails.InfusionType !=
                          null &&
                        String.Equals(
                          this.FormViewerDetails.BasicDetails.InfusionType
                            .Value,
                          InfusionTypesCode.CONTINUOUS
                        )
                      ) {
                        this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationVisible =
                          Visibility.Visible;
                        this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcentrationMandatory =
                          false;
                      } else if (
                        this.FormViewerDetails.BasicDetails.InfusionType !=
                          null &&
                        String.Equals(
                          this.FormViewerDetails.BasicDetails.InfusionType
                            .Value,
                          InfusionTypesCode.SINGLEDOSEVOLUME
                        )
                      ) {
                        this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible =
                          Visibility.Visible;
                        this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeMandatory =
                          false;
                      }
                    }
                  }
                }
              }
            }
            let oCCInfFluidItems =
              objResResolve.ResolveDetail.oInfusionFluidDetails
                .Where(
                  (oItem) => oItem.IdentifyingType == 'COMPATIBLECOMPONENT'
                )
                .Select((oItem) => oItem);
            if (oCCInfFluidItems != null && oCCInfFluidItems.Count() > 0) {
              let oCIFluidItems =
                objResResolve.ResolveDetail.oInfusionFluidDetails
                  .Where(
                    (oItem) =>
                      oItem.IdentifyingType == 'COMPATIBLECOMPONENT' &&
                      oItem.IsInfusionFluid == '0'
                  )
                  .Select((oItem) => oItem);
              if (oCIFluidItems != null && oCIFluidItems.Count() > 0) {
                if (
                  objResResolve.ResolveDetail.oInfusionFluidDetails.Count ==
                  oCIFluidItems.Count()
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
                    this != null &&
                    this.FormViewerDetails != null &&
                    this.FormViewerDetails.BasicDetails != null &&
                    this.FormViewerDetails.BasicDetails.itemSubType != null &&
                    String.Equals(
                      this.FormViewerDetails.BasicDetails.itemSubType,
                      CConstants.SUBTYPE,
                      StringComparison.OrdinalIgnoreCase
                    )
                      ? Visibility.Collapsed
                      : Visibility.Visible;
                  if (
                    String.Compare(
                      PatientContext.PrescriptionType,
                      PrescriptionTypes.Clerking,
                      StringComparison.OrdinalIgnoreCase
                    ) != 0
                  ) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory =
                      false;
                  }
                } else {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
                    this != null &&
                    this.FormViewerDetails != null &&
                    this.FormViewerDetails.BasicDetails != null &&
                    this.FormViewerDetails.BasicDetails.itemSubType != null &&
                    String.Equals(
                      this.FormViewerDetails.BasicDetails.itemSubType,
                      CConstants.SUBTYPE,
                      StringComparison.OrdinalIgnoreCase
                    )
                      ? Visibility.Collapsed
                      : Visibility.Visible;
                  if (
                    String.Compare(
                      PatientContext.PrescriptionType,
                      PrescriptionTypes.Clerking,
                      StringComparison.OrdinalIgnoreCase
                    ) != 0
                  ) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory =
                      true;
                  }
                }
              } else {
                this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
                  this != null &&
                  this.FormViewerDetails != null &&
                  this.FormViewerDetails.BasicDetails != null &&
                  this.FormViewerDetails.BasicDetails.itemSubType != null &&
                  String.Equals(
                    this.FormViewerDetails.BasicDetails.itemSubType,
                    CConstants.SUBTYPE,
                    StringComparison.OrdinalIgnoreCase
                  )
                    ? Visibility.Collapsed
                    : Visibility.Visible;
                if (
                  String.Compare(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.Clerking,
                    StringComparison.OrdinalIgnoreCase
                  ) != 0
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory =
                    true;
                }
              }
              let oCIFluidItemsAdd =
                objResResolve.ResolveDetail.oInfusionFluidDetails
                  .Where(
                    (oItem) =>
                      oItem.IdentifyingType == 'COMPATIBLECOMPONENT' &&
                      oItem.IsInfusionFluid == '1'
                  )
                  .Select((oItem) => oItem);
              let oDefValue: CListItem = null;
              oCIFluidItemsAdd.forEach((q) => {
                if (!String.IsNullOrEmpty(q.IdentifyingName)) {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: q.IdentifyingName,
                      Value: q.IdentifyingOID.ToString(),
                      Tag:
                        q.LorenzoID +
                        '~' +
                        'VIRTUALPRODUCT' +
                        '~' +
                        q.FluidItemIdfyngOID,
                    }
                  );
                  if (
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .FluidList != null
                  ) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList.Add(
                      oList
                    );
                  }
                  if (
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .FluidSelectedItem != null &&
                    String.Compare(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .FluidSelectedItem.Value,
                      oList.Value,
                      StringComparison.OrdinalIgnoreCase
                    ) == 0
                  )
                    oDefValue = oList;
                }
              });
              if (
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .FluidSelectedItem != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .FluidSelectedItem.Value
                )
              ) {
                if (oDefValue != null) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectedItem =
                    oDefValue;
                } else {
                  if (
                    this.FormViewerDetails.BasicDetails.InfusionDetails
                      .FluidList != null &&
                    !String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .FluidSelectedItem.DisplayText
                    )
                  ) {
                    this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList.Add(
                      this.FormViewerDetails.BasicDetails.InfusionDetails
                        .FluidSelectedItem
                    );
                  }
                }
              } else {
                if (
                  this.FormViewerDetails.BasicDetails.InfusionDetails
                    .FluidList != null &&
                  this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList
                    .Count == 1
                ) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue =
                    this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList[0];
                }
              }
            }
          } else {
            this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible =
              this != null &&
              this.FormViewerDetails != null &&
              this.FormViewerDetails.BasicDetails != null &&
              this.FormViewerDetails.BasicDetails.itemSubType != null &&
              String.Equals(
                this.FormViewerDetails.BasicDetails.itemSubType,
                CConstants.SUBTYPE,
                StringComparison.OrdinalIgnoreCase
              )
                ? Visibility.Collapsed
                : Visibility.Visible;
          }
          this.formViewerDetails.BasicDetails.IsCondDoseMonitoringPeriodReq =
            String.Equals(
              objResResolve.ResolveDetail.IsCondDoseMonitoringPeriodReq,
              '1'
            )
              ? true
              : false;
          if (objResResolve.ResolveDetail.oDoseCalcInfo != null) {
            let objDoseCalc: IPPMAManagePrescSer.DoseFormula =
              objResResolve.ResolveDetail.oDoseCalcInfo;
            this.oDoseCalcDefault = new DoseCalcDefault();
            let isDoseCalcDShasAnyValue: boolean = false;
            if (!String.IsNullOrEmpty(objDoseCalc.BSAFormula)) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.BSAFormula = ObjectHelper.CreateObject(
                new CListItem(),
                { Value: objDoseCalc.BSAFormula }
              );
            }
            if (!String.IsNullOrEmpty(objDoseCalc.CalculationFor)) {
              if (
                String.Equals(
                  this.oDoseCalcDefault.CalculationFor,
                  CConstants.DailyDose
                )
              ) {
                isDoseCalcDShasAnyValue = true;
              }
              this.oDoseCalcDefault.CalculationFor = objDoseCalc.CalculationFor;
            }
            if (!String.IsNullOrEmpty(objDoseCalc.DefaultWeightType)) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.DefaultWeightType =
                objDoseCalc.DefaultWeightType;
            }
            if (!String.IsNullOrEmpty(objDoseCalc.DosageFormType)) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.DosageFormType = objDoseCalc.DosageFormType;
            }
            if (!String.IsNullOrEmpty(objDoseCalc.DoseCalcBasedOn)) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.DoseCalcBasedOn =
                objDoseCalc.DoseCalcBasedOn;
            }
            if (!String.IsNullOrEmpty(objDoseCalc.RequestedDose)) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.RequestedDose = objDoseCalc.RequestedDose;
            }
            if (
              objDoseCalc.RequestedUOM != null &&
              objDoseCalc.RequestedUOM.UOMId > 0
            ) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.RequestedDoseUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: objDoseCalc.RequestedUOM.UOMName,
                  Value: objDoseCalc.RequestedUOM.UOMId.ToString(),
                });
            }
            if (!String.IsNullOrEmpty(objDoseCalc.RequestDosePerUOM)) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.RequestDosePerUOM =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: objDoseCalc.RequestDosePer2UOMName,
                  Value: objDoseCalc.RequestDosePerUOM,
                });
            }
            if (!String.IsNullOrEmpty(objDoseCalc.IsDoseCalcAlwaysUse)) {
              this.FormViewerDetails.BasicDetails.ISAlwaysuseDosecalc =
                !String.IsNullOrEmpty(objDoseCalc.IsDoseCalcAlwaysUse) &&
                objDoseCalc.IsDoseCalcAlwaysUse.Equals('1')
                  ? true
                  : false;
            }
            let objFreTag: string = String.Empty;
            if (
              objDoseCalc.Freqdetail != null &&
              !String.IsNullOrEmpty(objDoseCalc.Freqdetail.Code)
            ) {
              objFreTag = objDoseCalc.Freqdetail.Code;
            }
            if (objDoseCalc.DoseCalcFrequencyOID > 0) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.Frequency = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText: objDoseCalc.DoseCalcFrequencyName,
                  Value: objDoseCalc.DoseCalcFrequencyOID.ToString(),
                  Tag: objFreTag,
                }
              );
            }
            if (!String.IsNullOrEmpty(objDoseCalc.RequestDosePer2UOMLzoID)) {
              isDoseCalcDShasAnyValue = true;
              this.oDoseCalcDefault.RequestDosePer2UOMLzoID =
                objDoseCalc.RequestDosePer2UOMLzoID;
            }
            if (!isDoseCalcDShasAnyValue) {
              this.oDoseCalcDefault = null;
            }
          }
          if (objResResolve.ResolveDetail.DRCDefDoseTypeLorenzoIDs != null) {
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes =
              new ObservableCollection<CListItem>();
            let objDRCDoseType: CListItem = null;
            objResResolve.ResolveDetail.DRCDefDoseTypeLorenzoIDs.forEach(
              (objDRCDoseTypeLorenzoID) => {
                objDRCDoseType = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: objDRCDoseTypeLorenzoID.Name,
                  Value: objDRCDoseTypeLorenzoID.Code,
                });
                this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Add(
                  objDRCDoseType
                );
              }
            );
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: Resource.DRCConflict.DRC_SystemDefined,
                Value: DRCDoseTypes.Systemdefined,
              })
            );
          }
          if (
            (this.ActionCode == ActivityTypes.Prescribe ||
              this.ActionCode == ActivityTypes.Reorder) &&
            this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes !=
              null &&
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes
              .Count > 0 &&
            this.FormViewerDetails.BasicDetails.DRCDosetype != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.DRCDosetype.Value
            )
          ) {
            this.FormViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
              true;
            this.FormViewerDetails.BasicDetails.DRCDosetype =
              this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
                (c) =>
                  String.Equals(
                    c.Value,
                    this.FormViewerDetails.BasicDetails.DRCDosetype.Value,
                    StringComparison.InvariantCultureIgnoreCase
                  )
              ).FirstOrDefault();
          }
          this.FormViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
            false;
        } else {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (
          this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
          this.FormViewerDetails.BasicDetails.IsMultiRouteChecked
        ) {
          if (
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration
            ) != 0
          ) {
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
        } else {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        this.oDefaultRoute =
          this.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
        if (
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.AdminInstruction != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails != null
        ) {
          this.FormViewerDetails.BasicDetails.GetComboValue(
            this.FormViewerDetails.BasicDetails.AdminInstruction,
            this.FormViewerDetails.BasicDetails.DefaultDetails.AdminInstructions
          );
        }
        this.FormViewerDetails.BasicDetails.DefaultDetails.AdminInstructions.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: 'More',
            Value: 'CC_More',
          })
        );
        if (
          this.FormViewerDetails.BasicDetails.DefaultDetails.AdminInstructions.Where(
            (x) => x.DisplayText.Contains('Other')
          ).Count() == 0
        ) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.AdminInstructions.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'Other',
              Value: 'CC_Other',
            })
          );
        }
        if (
          this.oItemDetailIPPMA != null &&
          this.oItemDetailIPPMA.BasicProperties != null &&
          ((String.IsNullOrEmpty(this.oItemDetailIPPMA.ITMSUBTYP) &&
            String.Compare(
              this.oItemDetailIPPMA.ITMSUBTYP,
              CConstants.SUBTYPE,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0) ||
            (String.IsNullOrEmpty(
              this.oItemDetailIPPMA.BasicProperties.ItemSubType
            ) &&
              String.Compare(
                this.oItemDetailIPPMA.BasicProperties.ItemSubType,
                CConstants.SUBTYPE,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0))
        ) {
          if (
            this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys != null
          )
            this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
        }
        if (this.ActionCode == ActivityTypes.Prescribe) {
          if (this.FormViewerDetails.MulticomponentDetails == null)
            this.FormViewerDetails.MulticomponentDetails =
              new MulticomponentVM();
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo =
            new ObservableCollection<MulticomponentChildVM>();
          let sTip: StringBuilder = new StringBuilder();
          let smulti: string;
          let UniqueID: Random = new Random();
          if (this != null && this.UniqueRowID == 0) {
            this.UniqueRowID = UniqueID.Next();
          }
          if (
            this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null
          )
            this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM =
              new ObservableCollection<CListItem>();
          if (objResResolve.ResolveDetail.MultiComponentDetails != null) {
            for (
              let ncount: number = 0;
              ncount < objResResolve.ResolveDetail.MultiComponentDetails.Count;
              ncount++
            ) {
              let objMulti: MulticomponentChildVM = new MulticomponentChildVM();
              objMulti.ComponentName =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].ComponentName;
              objMulti.Compoentsdrugprop =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].DrugProperties;
              objMulti.IdentifyingType =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].IdentifyingType;
              objMulti.PrescriptionItemOID =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].PrescriptionItemOID;
              objMulti.Quantity =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].Quantity;
              objMulti.QuantityUOM =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].QuantityUOM;
              objMulti.IdentifyingOID =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].IdentifyingOID;
              objMulti.isEditable =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].isEditable;
              objMulti.isQtyEditable =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].isQtyEditable;
              objMulti.isQtyUOMEditable =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].isQtyUOMEditable;
              objMulti.IsDisableConflicts =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].IsDisableConflicts;
              objMulti.IsUpto =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].IsUpto;
              objMulti.IsNonFormulary =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].IsNonFormulary;
              objMulti.QuantityUOMOID =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].QuantityUOMOID;
              objMulti.VMVPLorenzoID =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].VMVPLorenzoID;
              objMulti.VMVPMCIdentifyingName =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].VMVPMCIdentifyingName;
              if (!String.IsNullOrEmpty(objMulti.VMVPMCIdentifyingName))
                objMulti.ComponentName =
                  objMulti.VMVPMCIdentifyingName +
                  ' - ' +
                  objMulti.ComponentName;
              if (
                !String.IsNullOrEmpty(
                  objResResolve.ResolveDetail.MultiComponentDetails[ncount]
                    .MCDoseUOMDeActivated
                )
              ) {
                let tempDeactQuantityUOMColl: CListItem = new CListItem();
                tempDeactQuantityUOMColl =
                  MedicationCommonBB.ReturnDeactivatedList(
                    objResResolve.ResolveDetail.MultiComponentDetails[ncount]
                      .MCDoseUOMDeActivated
                  );
                this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: tempDeactQuantityUOMColl.DisplayText,
                    Value: tempDeactQuantityUOMColl.Value,
                    Tag: objMulti.ComponentName,
                  })
                );
              }
              if (
                objResResolve.ResolveDetail.MultiComponentDetails[ncount]
                  .IsNonFormulary
              ) {
                if (
                  this.NonFormularyReason != null &&
                  !String.IsNullOrEmpty(this.NonFormularyReason.Value)
                ) {
                  objMulti.Nonformularyreason =
                    this.NonFormularyReason.Value.ToString();
                }
                objMulti.OtherNonformularyreason = this.OtherNonFormularyReason;
              }
              objMulti.PrescribableItemListOID =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].PrescribableItemListOID;
              objMulti.LorenzoID =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].LorenzoID;
              objMulti.DisplayOrder =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].DisplayOrder;
              objMulti.QuantityUomcol =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].QuantityUomcol;
              objMulti.MCUOMValue = new CListItem();
              let sUomlist: StringBuilder = new StringBuilder();
              let sProblemName: StringBuilder = new StringBuilder();
              objMulti.MCUOMCombo = new ObservableCollection<CListItem>();
              if (
                objMulti.QuantityUomcol != null &&
                !String.IsNullOrEmpty(objMulti.QuantityUomcol)
              ) {
                let sQUOMlist: string[] = objMulti.QuantityUomcol.Split('|');
                if (sQUOMlist != null && sQUOMlist.length > 0) {
                  for (let i: number = 0; i <= sQUOMlist.length - 1; i++) {
                    let stmp: string[] = sQUOMlist[i].Split('~');
                    if (
                      objMulti.QuantityUOMOID == 0 ||
                      (objMulti.QuantityUOMOID > 0 &&
                        objMulti.QuantityUOMOID.ToString() != stmp[0])
                    ) {
                      objMulti.MCUOMCombo.Add(
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: stmp[1],
                          Value: stmp[0],
                        })
                      );
                    }
                  }
                }
              }
              if (objMulti.QuantityUOM != null) {
                objMulti.MCUOMValue = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: objMulti.QuantityUOM,
                    Value: objMulti.QuantityUOMOID.ToString(),
                  }
                );
                if (
                  objMulti.MCUOMCombo.Where(
                    (o) =>
                      o != null &&
                      String.Compare(o.Value, objMulti.MCUOMValue.Value) == 0
                  ).Count() == 0
                ) {
                  objMulti.MCUOMCombo.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objMulti.QuantityUOM,
                      Value: objMulti.QuantityUOMOID.ToString(),
                    })
                  );
                }
              }
              objMulti.MCUomName = objMulti.MCUOMValue.DisplayText;
              objMulti.MCUOMCombo.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
              objMulti.UniqueMCRowID = UniqueID.Next();
              if (String.IsNullOrEmpty(this.MCIItemDisplay)) {
                if (objMulti.IsUpto == true) {
                  smulti =
                    objMulti.ComponentName +
                    ' upto ' +
                    objMulti.Quantity +
                    ' ' +
                    objMulti.QuantityUOM;
                } else {
                  smulti =
                    objMulti.ComponentName +
                    '  ' +
                    objMulti.Quantity +
                    ' ' +
                    objMulti.QuantityUOM;
                }
                sTip.Append(smulti);
                sTip.Append(Environment.NewLine);
              }
              objMulti.OID =
                objResResolve.ResolveDetail.MultiComponentDetails[ncount].OID;
              objMulti.IsWardStock =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].IsWardStock;
              objMulti.IsSupplyRequested =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].IsSupplyRequested;
              objMulti.RequisitionCACode =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].RequisitionCACode;
              if (
                objResResolve.ResolveDetail.MultiComponentDetails[ncount]
                  .SupplyInstruction != null &&
                objResResolve.ResolveDetail.MultiComponentDetails[ncount]
                  .SupplyInstruction.Count > 0
              ) {
                objMulti.SupplyInstruction =
                  objResResolve.ResolveDetail.MultiComponentDetails[
                    ncount
                  ].SupplyInstruction;
              }
              if (
                objResResolve.ResolveDetail.MultiComponentDetails[ncount]
                  .DispensingInstruction != null &&
                objResResolve.ResolveDetail.MultiComponentDetails[ncount]
                  .DispensingInstruction.Count > 0
              ) {
                objMulti.DispensingInstruction =
                  objResResolve.ResolveDetail.MultiComponentDetails[
                    ncount
                  ].DispensingInstruction;
              }
              if (
                !String.IsNullOrEmpty(
                  objResResolve.ResolveDetail.MultiComponentDetails[ncount]
                    .OtherDispensingInstruction
                )
              )
                objMulti.OtherDispensingInstruction =
                  objResResolve.ResolveDetail.MultiComponentDetails[
                    ncount
                  ].OtherDispensingInstruction;
              objMulti.IsMCAuthorize =
                objResResolve.ResolveDetail.MultiComponentDetails[
                  ncount
                ].IsMCAuthorize;
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Add(
                objMulti
              );
            }
            this.IsConflictDisabled =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
                .Count > 0 &&
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.All(
                (x) => x.IsDisableConflicts
              );
          }
          if (String.IsNullOrEmpty(this.MCIItemDisplay) && sTip != null) {
            this.MCIItemDisplay =
              this.FormViewerDetails.BasicDetails.mCIItemDisplay =
                sTip.ToString();
          }
          this.GetMcchilditemDisplay();
        }
        //Not Required for LHS. To be Re-Visited.
       
                if (this.FormViewerDetails.MulticomponentDetails != null && this.ActionCode == ActivityTypes.Amend && this.FormViewerDetails.dupMulticomponentDetails != null)
                {
                  this.FormViewerDetails.dupMulticomponentDetails.oMCItemBasicInfo= ObjectHelper.Clone(this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo);
                }
                   // IPPMABaseVM.CloneObjects(this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo, this.FormViewerDetails.dupMulticomponentDetails.oMCItemBasicInfo);
                
        if (
          this.FormViewerDetails.BasicDetails.TitratedDoseDetails != null &&
          this.ActionCode == ActivityTypes.Amend
        ) {
          let nTDCnt: number =
            this.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated
              .Count;
          for (let ncount: number = 0; ncount < nTDCnt; ncount++) {
            let ot: TitratedScheduleDetails = new TitratedScheduleDetails();
            let oDoses: string[] = new Array(CConstants.TitratedgridSize);
            if (
              this.FormViewerDetails.BasicDetails.TitratedDoseDetails
                .GrdTitrated[ncount].ScheduleDoseValue != null
            ) {
              oDoses = ObjectHelper.CreateType<string[]>(
                this.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated[
                  ncount
                ].ScheduleDoseValue.Clone(),
                'string[]'
              );
            }
            ot.ScheduleDoseValue = oDoses;
            ot.ScheduleTime =
              this.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated[
                ncount
              ].ScheduleTime;
            this.FormViewerDetails.BasicDetails.DupTitratedDoseVM.GrdTitrated.Add(
              ot
            );
          }
        }
        if (objResResolve.ResolveDetail.IsOxygen != null) {
          if (objResResolve.ResolveDetail.IsOxygen == '1') {
            this.formViewerDetails.BasicDetails.InfusionDetails.IsOxygen = true;
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsTarSatrangevisible =
              Visibility.Visible;
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcenEnabled =
              true;
          } else {
            this.formViewerDetails.BasicDetails.InfusionDetails.IsOxygen =
              false;
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsTarSatrangevisible =
              Visibility.Collapsed;
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcenMandatory =
              false;
            this.FormViewerDetails.BasicDetails.InfusionDetails.IsConcenEnabled =
              false;
          }
        }
        if (
          String.Compare(
            this.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          this.LorenzoID == CommonFlags.MClorenzoid
        ) {
          if (objResResolve.ResolveDetail.Form != null) {
            let oDefValue: CListItem = null;
            objResResolve.ResolveDetail.Form.forEach((F) => {
              if (!String.IsNullOrEmpty(F.FormName)) {
                let oForm: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: F.FormName,
                    Value: F.FormId.ToString(),
                  }
                );
                this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Add(
                  oForm
                );
                if (
                  this.FormViewerDetails.BasicDetails.DosageForm != null &&
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.DosageForm.Value,
                    oForm.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oForm;
              }
            });
            if (
              this.FormViewerDetails.BasicDetails.DosageForm != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.DosageForm.Value
              )
            ) {
              if (oDefValue != null) {
                this.FormViewerDetails.BasicDetails.DosageForm = oDefValue;
                let oSelectedItem =
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Where(
                    (oItem) =>
                      String.Compare(
                        oDefValue.Value,
                        oItem.Value,
                        StringComparison.OrdinalIgnoreCase
                      ) == 0
                  ).Select((oItem) => oItem);
                if (oSelectedItem != null && oSelectedItem.Count() > 0)
                  oSelectedItem.First().IsSelected = true;
              } else {
                if (
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.BasicDetails.DosageForm.DisplayText
                  )
                )
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Add(
                    this.FormViewerDetails.BasicDetails.DosageForm
                  );
              }
            }
          } else {
            if (this.FormViewerDetails.BasicDetails.DosageForm != null) {
              let oDefValue: CListItem = null;
              let oForm: CListItem = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText:
                    this.FormViewerDetails.BasicDetails.DosageForm.DisplayText,
                  Value: this.FormViewerDetails.BasicDetails.DosageForm.Value,
                }
              );
              this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(
                oForm
              );
              if (
                this.FormViewerDetails.BasicDetails.DosageForm != null &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.DosageForm.Value,
                  oForm.Value,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
              )
                oDefValue = oForm;
              if (
                this.FormViewerDetails.BasicDetails.DosageForm != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.DosageForm.Value
                )
              ) {
                if (oDefValue != null) {
                  this.FormViewerDetails.BasicDetails.DosageForm = oDefValue;
                } else {
                  if (
                    !String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.DosageForm.DisplayText
                    )
                  )
                    this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Add(
                      this.FormViewerDetails.BasicDetails.DosageForm
                    );
                }
              }
            }
          }
        }
        if (
          this.FormViewerDetails.BasicDetails.DosageForm != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DosageForm.Value
          ) &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DosageForm.DisplayText
          ) &&
          this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.Forms != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Where((x) =>
            String.Equals(
              x.Value,
              this.FormViewerDetails.BasicDetails.DosageForm.Value
            )
          ).Count() == 0
        ) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.FormViewerDetails.BasicDetails.DosageForm.DisplayText,
              Value: this.FormViewerDetails.BasicDetails.DosageForm.Value,
            })
          );
          if (
            this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Where(
              (x) => x.DisplayText.Contains('More')
            ).Count() == 0
          ) {
            this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
          if (
            this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Count > 0
          )
            this.FormViewerDetails.BasicDetails.DosageForm =
              this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.First();
        } else {
          if (
            this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Where(
              (x) => x.DisplayText.Contains('More')
            ).Count() == 0
          ) {
            this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
        }
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .HumidificationList == null
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.HumidificationList =
            new ObservableCollection<CListItem>();
        }
        if (
          InfHumdificationConceptCodeData.ConceptCodes != null &&
          InfHumdificationConceptCodeData.ConceptCodes.Count > 0
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.HumidificationList =
            InfHumdificationConceptCodeData.ConceptCodes;
        }
        if (
          objResResolve != null &&
          this.ActionCode == ActivityTypes.Prescribe &&
          objResResolve.ResolveDetail != null &&
          objResResolve.ResolveDetail.Indication != null &&
          objResResolve.ResolveDetail.Indication.Count > 0
        ) {
          let sProblemIndication: StringBuilder = new StringBuilder();
          let sProblemCode: StringBuilder = new StringBuilder();
          let sProblemIndicationTerm: StringBuilder = new StringBuilder();
          let strConst: string = '#';
          let ncount: number = objResResolve.ResolveDetail.Indication.Count;
          for (let i: number = 0; i < ncount; i++) {
            sProblemIndication.Append(
              objResResolve.ResolveDetail.Indication[i].Term
            );
            sProblemIndicationTerm.Append(
              objResResolve.ResolveDetail.Indication[i].Term
            );
            sProblemCode.Append(strConst);
            sProblemCode.Append(objResResolve.ResolveDetail.Indication[i].Term);
            sProblemCode.Append(strConst);
            sProblemCode.Append(
              objResResolve.ResolveDetail.Indication[i].Version
            );
            sProblemCode.Append(strConst);
            sProblemCode.Append(objResResolve.ResolveDetail.Indication[i].Code);
            sProblemCode.Append(strConst);
            sProblemCode.Append(strConst);
            sProblemCode.Append(strConst);
            sProblemCode.Append(
              objResResolve.ResolveDetail.Indication[i].CodingschemeCode
            );
            sProblemCode.Append(strConst);
            sProblemCode.Append(strConst);
            if (i != ncount - 1) {
              sProblemIndicationTerm.Append('~^');
              sProblemIndication.Append(', ');
              sProblemCode.Append('!');
            }
          }
          this.FormViewerDetails.BasicDetails.ProblemIndicationTerm =
            sProblemIndicationTerm.ToString();
          this.FormViewerDetails.BasicDetails.ProblemIndication =
            sProblemIndication.ToString();
          this.FormViewerDetails.BasicDetails.PatientProblemCode =
            sProblemCode.ToString();
        }
        this.GetPresItemDetails(this.oItemDetailIPPMA,RTEResult);
        if (
          this.FormViewerDetails.MulticomponentDetails != null &&
          this.ActionCode == ActivityTypes.Amend
        ) {
          this.FormViewerDetails.BasicDetails.MCIDosageForm =
            this.FormViewerDetails.BasicDetails.DosageForm;
        }
        this.FrequencyDetailsCompleted();
        if (
          this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('F') ||
          this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')
        ) {
          if (
            String.Compare(
              this.ItemSubType,
              CConstants.SUBTYPE,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            this.FormViewerDetails.MulticomponentDetails =
              this.ParentbaseVM.objMCItemVM.FormViewerDetails.MulticomponentDetails;
            this.FormViewerDetails.BasicDetails.DosageForm =
              this.ParentbaseVM.objMCItemVM.FormViewerDetails.BasicDetails.DosageForm;
          }
          if (
            this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
              'S'
            ) &&
            this.ParentbaseVM != null &&
            this.ParentbaseVM.objSTATItemVM != null
          ) {
            this.FillDataForSTAT();
          }
          if (
            this.ParentbaseVM != null &&
            this.ParentbaseVM.objSTATItemVM != null
          ) {
            this.ParentbaseVM.objSTATItemVM = null;
          }
        }
        if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.IsenableReviewAfter &&
          PatientContext.PrescriptionType == CConstants.CAMEDFORADM &&
          (this.ActionCode == ActivityTypes.Prescribe ||
            (this.ActionCode == ActivityTypes.Reorder &&
              this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID == 0))
        ) {
          if (objResResolve != null && objResResolve.ResolveDetail != null) {
            this.FormViewerDetails.BasicDetails.ReviewAfter =
              objResResolve.ResolveDetail.ReviewAfter != null &&
              !this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'S'
              )
                ? objResResolve.ResolveDetail.ReviewAfter
                : String.Empty;
            this.FormViewerDetails.BasicDetails.ReviewafterUOM =
              objResResolve.ResolveDetail.ReviewAfterUOM != null &&
              !this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'S'
              )
                ? ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      objResResolve.ResolveDetail.ReviewAfterUOM.Name,
                    Value: objResResolve.ResolveDetail.ReviewAfterUOM.Code,
                  })
                : new CListItem();
          }
        }
        if (
          (this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend &&
            (this.ActionCode == ActivityTypes.Amend ||
              this.ActionCode == ActivityTypes.Reorder)) ||
          (this.ActionCode == ActivityTypes.Prescribe &&
            this.FormViewerDetails.BasicDetails.IsLoadingDataForOrderSentence)
        ) {
          this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend = false;
          this.FormViewerDetails.BasicDetails.IsLoadingDataForOrderSentence =
            false;
          this.FormViewerDetails.BasicDetails.GetFormDefaults(
            this.FormViewerDetails.BasicDetails.IdentifyingOID,
            this.FormViewerDetails.BasicDetails.IdentifyingType,
            this.FormViewerDetails.BasicDetails.Route != null
              ? this.FormViewerDetails.BasicDetails.Route.Value
              : String.Empty,
            this.FormViewerDetails.BasicDetails.DosageForm != null
              ? this.FormViewerDetails.BasicDetails.DosageForm.Value
              : String.Empty,
            this.FormViewerDetails.BasicDetails.MCVersion,
            FormDefaults.ALL.ToString() + '~' + 'AMEND',
            'ROUTE',
            false,
            this.IsFormViewerDisable
          );
          this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend = true;
          this.FormViewerDetails.BasicDetails.IsLoadingDataForOrderSentence =
            true;
        }
      } catch (ex: any) {
        this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend = false;
        this.FormViewerDetails.BasicDetails.IsLoadingDataForOrderSentence =
          false;
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend = false;
      this.FormViewerDetails.BasicDetails.IsLoadingDataForOrderSentence = false;
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  objServiceProxy_GetMultiRoutesCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetMultiRoutesCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000039;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:PrescriptionItemVM, Method:objServiceProxy_GetMultiRoutesCompleted()';
    if (e.Error == null) {
      try {
        let objResMultiRoutes: IPPMAManagePrescSer.CResMsgGetMultiRoutes =
          e.Result;
        if (this.FormViewerDetails == null) {
          this.FormViewerDetails = new FormViewerVM();
        }
        if (this.FormViewerDetails.PresItemDRCVM == null) {
          this.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
        }
        if (this.FormViewerDetails.BasicDetails == null) {
          this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
        }
        if (this.FormViewerDetails.BasicDetails.DefaultDetails == null) {
          this.FormViewerDetails.BasicDetails.DefaultDetails =
            new FormViewerDefaultsVM();
        }
        let MultiRoute: ObservableCollection<CListItem> =
          new ObservableCollection<CListItem>();
        let selectedRoutesValue: string[] = null;
        let selectedRoutesDistext: string[] = null;
        let selectedRoutesTagValue: string[] = null;
        if (
          this.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds &&
          (this.ActionCode == ActivityTypes.Amend ||
            this.ActionCode == ActivityTypes.Reorder ||
            this.ActionCode == ActivityTypes.Prescribe)
        ) {
          this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend = true;
        } else {
          this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend = false;
        }
        if (this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.RoutesBC =
            new ObservableCollection<CListItem>();
          this.FormViewerDetails.BasicDetails.DefaultDetails.RoutesBC =
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
          if (
            (this.ActionCode == ActivityTypes.Amend ||
              this.ActionCode == ActivityTypes.Reorder ||
              this.ActionCode == ActivityTypes.Prescribe) &&
            this.FormViewerDetails.BasicDetails.Route != null
          ) {
            selectedRoutesValue =
              this.FormViewerDetails.BasicDetails.Route.Value.Split(',');
            selectedRoutesDistext =
              this.FormViewerDetails.BasicDetails.Route.DisplayText.Split('/');
            if (this.FormViewerDetails.BasicDetails.Route.Tag != null) {
              selectedRoutesTagValue =
                this.FormViewerDetails.BasicDetails.Route.Tag.ToString().Split(
                  ','
                );
            }
          }
          this.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
            new ObservableCollection<CListItem>();
        }
        this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes =
          new ObservableCollection<CListItem>();
        if (
          objResMultiRoutes != null &&
          objResMultiRoutes.objmultiRoutes != null
        ) {
          objResMultiRoutes.objmultiRoutes.forEach((r) => {
            if (!String.IsNullOrEmpty(r.MultiRouteName)) {
              let oRoute: CListItem = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText: r.MultiRouteName,
                  Value: r.MultiRouteId.ToString(),
                  Tag: r.bInfusion,
                }
              );
              if (
                selectedRoutesDistext != null &&
                selectedRoutesDistext.length > 0
              ) {
                selectedRoutesValue.forEach((item) => {
                  if (item == r.MultiRouteId.ToString() && !oRoute.IsSelected) {
                    oRoute.IsSelected = true;
                  }
                });
              }
              MultiRoute.Add(oRoute);
              if (
                !String.IsNullOrEmpty(r.bInfusion) &&
                this.FormViewerDetails.BasicDetails.Infusions != true
              ) {
                if (PatientContext.IsINFUSIONON && r.bInfusion == '1')
                  this.FormViewerDetails.BasicDetails.Infusions = true;
                else this.FormViewerDetails.BasicDetails.Infusions = false;
              }
            }
          });
          let isExist: boolean = false;
          if (
            selectedRoutesDistext != null &&
            selectedRoutesDistext.length > 0 &&
            selectedRoutesTagValue != null &&
            selectedRoutesValue.length > 0 &&
            selectedRoutesTagValue.length > 0 &&
            selectedRoutesValue.length == selectedRoutesTagValue.length &&
            (this.ActionCode == ActivityTypes.Amend ||
              this.ActionCode == ActivityTypes.Reorder ||
              this.ActionCode == ActivityTypes.Prescribe)
          ) {
            for (let i: number = 0; i < selectedRoutesValue.length; i++) {
              isExist = false;
              for(let j=0; j< MultiRoute.Count; j++){
                let MulRoute : CListItem = MultiRoute[j];             
                if (!isExist && selectedRoutesValue[i] == MulRoute.Value) {
                  isExist = true;
                  break;
                }
               }             
              if (!isExist) {
                MultiRoute.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    Value: selectedRoutesValue[i],
                    DisplayText: selectedRoutesDistext[i],
                    Tag: selectedRoutesTagValue[i],
                    IsSelected: true,
                  })
                );
              }
            }
          }
          this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes =
            MultiRoute;
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes = new ObservableCollection(this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes.array);

            // if (this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoute2 == undefined)
            // {
            //   this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoute2 = new ObservableCollection<CListItem>();
            // }
            if (this.FormViewerDetails.BasicDetails.IsMultiRouteChecked){
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.array.forEach(element => {
              if(element.IsSelected == true) {
                this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoute2.Add(element);
              }
            });
            this.FormViewerDetails.BasicDetails.DynamicControlEndInstallLoaded.emit(true);
          }
         
          if (this.MultiRouteChangeEvent != null) {
            this.MultiRouteChangeEvent();
          }
          if (
            this.ActionCode == ActivityTypes.Amend ||
            this.ActionCode == ActivityTypes.Reorder ||
            (this.ActionCode == ActivityTypes.Prescribe &&
              this.FormViewerDetails.BasicDetails.RouteSelected != null)
          ) {
            if (
              this.FormViewerDetails.BasicDetails.Route == null ||
              (this.FormViewerDetails.BasicDetails.Route != null &&
                String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.Route.DisplayText
                ))
            ) {
              this.FormViewerDetails.BasicDetails.Route =
                this.FormViewerDetails.BasicDetails.RouteSelected;
              this.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = false;
              this.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = false;
            }
          }
        }
        this.FormviewerLoadedEvent.emit(true);
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }

      this.FormViewerDetails.BasicDetails.IsLoadingDataForAmend = false;
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }    
    Busyindicator.SetStatusIdle("Multiroute");
  }
  private FillDataForSTAT(): void {
    this.ParentbaseVM.objSTATItemVM.DoseCalculationDetails = null;
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route !=
        null &&
      !String.IsNullOrEmpty(
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route
          .Value
      ) &&
      !this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route.Value.Contains(
        ','
      )
    ) {
      this.FormViewerDetails.BasicDetails.Route = ObjectHelper.CreateObject(
        new CListItem(),
        {
          DisplayText:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route
              .DisplayText,
          Value:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route
              .Value,
          Tag: this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
            .Route.Tag,
          IsSelected: true,
        }
      );
    }
    this.VMVPLorenzoID = this.ParentbaseVM.objSTATItemVM.VMVPLorenzoID;
    this.VMVPIdentifyingName =
      this.ParentbaseVM.objSTATItemVM.VMVPIdentifyingName;
    this.FormViewerDetails.BasicDetails.OriginalIdentifyingName =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.OriginalIdentifyingName;
    this.FormViewerDetails.BasicDetails.BrandName =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.BrandName;
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route !=
        null &&
      !String.IsNullOrEmpty(
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route
          .Value
      ) &&
      !this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route.Value.Contains(
        ','
      )
    ) {
      this.FormViewerDetails.BasicDetails.RouteRecorded =
        ObjectHelper.CreateObject(new CListItem(), {
          DisplayText:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route
              .DisplayText,
          Value:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route
              .Value,
          IsSelected: true,
        });
    }
    let isMultipleRoutes: boolean = false;
    this.FormViewerDetails.BasicDetails.IsAllowMultiRoute =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute;
    this.FormViewerDetails.BasicDetails.IsMultiRouteChecked =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked;
    if (
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) &&
      this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
      this.FormViewerDetails.BasicDetails.IsMultiRouteChecked
    ) {
      if (
        this.ParentbaseVM.objSTATItemVM != null &&
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails !=
          null &&
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route !=
          null
      ) {
        if (
          this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0
        ) {
          let nCount: number =
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count;
          let tempRouteValue: string[] =
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Route.Value.Split(
              ','
            );
          if (tempRouteValue.length > 1) {
            isMultipleRoutes = true;
          }
          if (
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DefaultDetails != null &&
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DefaultDetails.Routes != null
          ) {
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
          }
          if (
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DefaultDetails != null &&
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DefaultDetails.MultiRoutes != null
          ) {
            this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes =
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes;
              this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoute2 =
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoute2;
          }
        }
      }
    }
    if (isMultipleRoutes) {
      this.FormViewerDetails.BasicDetails.IsenableDosage = false;
      this.FormViewerDetails.BasicDetails.IsSiteEnabled = false;
      this.FormViewerDetails.BasicDetails.IsEnableStrength = false;
    }
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
        .DosageForm != null
    ) {
      this.FormViewerDetails.BasicDetails.DosageForm =
        ObjectHelper.CreateObject(new CListItem(), {
          DisplayText:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DosageForm.DisplayText,
          Value:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DosageForm.Value,
          Tag: this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
            .DosageForm.Tag,
        });
    }
    if (this.FormViewerDetails.BasicDetails.IsMultiRouteChecked) {
      this.FormViewerDetails.BasicDetails.IsenableDosage =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.IsenableDosage;
      this.FormViewerDetails.BasicDetails.IsDosageFormMandatory =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.IsDosageFormMandatory;
    }
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
        .NONCatalogueReason != null
    ) {
      this.FormViewerDetails.BasicDetails.NONCatalogueReason =
        ObjectHelper.CreateObject(new CListItem(), {
          DisplayText:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .NONCatalogueReason.DisplayText,
          Value:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .NONCatalogueReason.Value,
        });
    }
    this.FormViewerDetails.BasicDetails.OtherNONCatalogueReason =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason;
    this.FormViewerDetails.BasicDetails.Dose =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Dose;
    this.FormViewerDetails.BasicDetails.UpperDose =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.UpperDose;
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOM !=
      null
    ) {
      this.FormViewerDetails.BasicDetails.DoseUOM = ObjectHelper.CreateObject(
        new CListItem(),
        {
          DisplayText:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DoseUOM.DisplayText,
          Value:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DoseUOM.Value,
          Tag: this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
            .DoseUOM.Tag,
        }
      );
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .DoseUOMTypeCode != null &&
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .DoseUOM != null &&
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOM
          .Tag != null
      ) {
        let TempUOMTypeCode: string;
        let checkvalue: boolean =
          this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOMTypeCode.TryGetValue(
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOM.Tag.ToString(),
            (o) => (TempUOMTypeCode = o)
          );
        if (
          checkvalue &&
          !this.FormViewerDetails.BasicDetails.DoseUOMTypeCode.ContainsKey(
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOM.Tag.ToString()
          )
        ) {
          this.FormViewerDetails.BasicDetails.DoseUOMTypeCode.Add(
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOM.Tag.ToString(),
            TempUOMTypeCode
          );
        }
      }
    }
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
        .AdminMethod != null
    ) {
      this.FormViewerDetails.BasicDetails.AdminMethod =
        ObjectHelper.CreateObject(new CListItem(), {
          DisplayText:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .AdminMethod.DisplayText,
          Value:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .AdminMethod.Value,
        });
    }
    this.FormViewerDetails.BasicDetails.Strength =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Strength;
    this.FormViewerDetails.BasicDetails.Site =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.Site;
    this.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction;
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
        .AdminInstruction != null
    ) {
      this.FormViewerDetails.BasicDetails.AdminInstruction =
        ObjectHelper.CreateObject(new CListItem(), {
          DisplayText:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .AdminInstruction.DisplayText,
          Value:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .AdminInstruction.Value,
        });
    }
    this.FormViewerDetails.BasicDetails.ProblemIndication =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.ProblemIndication;
    this.FormViewerDetails.BasicDetails.PatientProblemCode =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.PatientProblemCode;
    this.FormViewerDetails.BasicDetails.ProblemIndicationTerm =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.ProblemIndicationTerm;
    this.FormViewerDetails.BasicDetails.IsWardStock =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.IsWardStock;
    if (this.RouteorFormchangePresEvent != null) {
      this.RouteorFormchangePresEvent();
    }
    this.FormViewerDetails.BasicDetails.PrimaryInd =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.PrimaryInd;
    this.FormViewerDetails.BasicDetails.StationaryType =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.StationaryType;
    this.FormViewerDetails.BasicDetails.SupplyInsVal =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.SupplyInsVal;
    this.FormViewerDetails.BasicDetails.SupplyInsText =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.SupplyInsText;
    this.FormViewerDetails.BasicDetails.OriginalSupplyInstructionText =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.OriginalSupplyInstructionText;
    this.PrescriberDetails.Name =
      this.ParentbaseVM.objSTATItemVM.PrescriberDetails.Name;
    this.FormViewerDetails.BasicDetails.InfusionType =
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionType;
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
        .InfusionDetails != null
    ) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext;
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.DeliveryDevice != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.DeliveryDevice.DisplayText,
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.DeliveryDevice.Value,
            Tag: this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails.DeliveryDevice.Tag,
          });
      }
      this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose;
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.Boosterdoseuom != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.Boosterdoseuom.DisplayText,
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.Boosterdoseuom.Value,
          });
      } else {
        this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom =
          new CListItem();
      }
      this.FormViewerDetails.BasicDetails.InfusionDetails.Lumen =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Lumen;
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod;
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.InfusionPeriodUom != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.InfusionPeriodUom.DisplayText,
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.InfusionPeriodUom.Value,
          });
      }
      this.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart;
      this.FormViewerDetails.BasicDetails.InfusionDetails.Rate =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
      this.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate;
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.InfRateDinominatorUom != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.InfRateDinominatorUom.DisplayText,
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.InfRateDinominatorUom.Value,
          });
      }
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.InfRateNumeratorUom != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.InfRateNumeratorUom.DisplayText,
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.InfRateNumeratorUom.Value,
          });
      }
      this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume;
      this.FormViewerDetails.BasicDetails.InfusionDetails.Volume =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume;
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.VolumeUOM != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.VolumeUOM.DisplayText,
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.VolumeUOM.Value,
          });
      }
      //fluid list issue fix - 54470 bug
      this.FormViewerDetails.BasicDetails.InfusionDetails.FluidList =
          this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidList;
      this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext;
      this.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
      this.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID;
      this.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType;
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.FluidSelectvalue != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue =
          ObjectHelper.CreateObject(new CListItem(), {
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.FluidSelectvalue.Value,
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.FluidSelectvalue.DisplayText,
            Tag: this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails.FluidSelectvalue.Tag,
          });
      }
      this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration;
      this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration;
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.LowConcentrationUOM != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.LowConcentrationUOM.DisplayText,
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.LowConcentrationUOM.Value,
          });
      }
      if (
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails.UpperConcentrationUOM != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.UpperConcentrationUOM.DisplayText,
            Value:
              this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.UpperConcentrationUOM.Value,
          });
      }
    }
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DoseType !=
      null
    ) {
      this.FormViewerDetails.BasicDetails.DoseType = ObjectHelper.CreateObject(
        new CListItem(),
        {
          DisplayText:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DoseType.DisplayText,
          Value:
            this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
              .DoseType.Value,
        }
      );
    }
    if (
      this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails
        .ParentUniqueIDofSTAT > 0
    ) {
      this.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT =
        this.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT;
    }
    if (this.FormViewerDetails.BasicDetails != null) {
      this.FormViewerDetails.BasicDetails.GetFormViewControls(
        '1',
        (s, e) => {
          this.objServiceProxy_GetFormViewControlsCompleted(s, e);
        },
        'FL'
      );
    }
  }
  private FrequencyDetailsCompleted(): void {
    this.GetDomainComboValues();
  }
  private stepDoseGridColms: ObservableCollection<MultipleDoseDetail>;
  public get StepDoseGridColms(): ObservableCollection<MultipleDoseDetail> {
    return this.stepDoseGridColms;
  }
  public set StepDoseGridColms(
    value: ObservableCollection<MultipleDoseDetail>
  ) {
    if (this.stepDoseGridColms != value) {
      this.stepDoseGridColms = value;
      //super.NotifyPropertyChanged("StepDoseGridColms");
    }
  }
  public GetSteppedDoseInfo(
    oMultipleDoseDetail: ObservableCollection<MultipleDoseDetail>,
    PrescriptionItemOID: number
  ): void {
    if (oMultipleDoseDetail != null) {
      this.StepDoseGridColms = oMultipleDoseDetail;
    } else {
      let oReqPresItemDoseInfo: IPPMAManagePrescSer.CReqMsgGetPrescriptionItemDoseInfo =
        new IPPMAManagePrescSer.CReqMsgGetPrescriptionItemDoseInfo();
      oReqPresItemDoseInfo.PrescriptionItemOIDBC = PrescriptionItemOID;
      oReqPresItemDoseInfo.oContextInformation = Common.FillContext();
      let oPresWS: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      oPresWS.GetPrescriptionItemDoseInfoCompleted = (s, e) => {
        this.oPresWS_GetPrescriptionItemDoseInfoCompleted(s, e);
      };
      oPresWS.GetPrescriptionItemDoseInfoAsync(oReqPresItemDoseInfo);
    }
  }
  oPresWS_GetPrescriptionItemDoseInfoCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetPrescriptionItemDoseInfoCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000011;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:PrescriptionItemVM, Method:oPresWS_GetPrescriptionItemDoseInfoCompleted()';
    if (e.Error == null) {
      try {
        let oResPresItemDoseInfo: IPPMAManagePrescSer.CResMsgGetPrescriptionItemDoseInfo =
          e.Result;
        this.FillDataContextPresItemDose(oResPresItemDoseInfo);
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private FillDataContextPresItemDose(
    oResPresItemDoseInfo: IPPMAManagePrescSer.CResMsgGetPrescriptionItemDoseInfo
  ): void {
    if (
      oResPresItemDoseInfo instanceof
      IPPMAManagePrescSer.CResMsgGetPrescriptionItemDoseInfo
    ) {
      this.StepDoseGridColms = new ObservableCollection<MultipleDoseDetail>();
      let oMaptoGridStpdDose: ObservableCollection<MultipleDoseDetail> =
        new ObservableCollection<MultipleDoseDetail>();
      if (
        oResPresItemDoseInfo.oDose.DoseDetails != null &&
        oResPresItemDoseInfo.oDose.DoseDetails.Count > 0
      ) {
        oResPresItemDoseInfo.oDose.DoseDetails.forEach((oDoseDet) => {
          let oMulDoseDet: MultipleDoseDetail = new MultipleDoseDetail();
          oMulDoseDet.LowerDose = Convert.ToDouble(oDoseDet.FromDoseValue);
          oMulDoseDet.UpperDose = Convert.ToDouble(oDoseDet.ToDoseValue);
          if (oDoseDet.Frequency != null) {
            oMulDoseDet.Frequency = ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: oDoseDet.Frequency.FrequencyName,
              Value: oDoseDet.Frequency.FrequencyId.ToString(),
            });
          }
          oMulDoseDet.Duration = oDoseDet.Duration;
          oMulDoseDet.IsPRN =
            !String.IsNullOrEmpty(oDoseDet.Direction) &&
            (String.Compare(oDoseDet.Direction, 'CC_MEDDIRECTION') == 0 ||
              String.Compare(oDoseDet.Direction, 'As needed') == 0);
          oMulDoseDet.DoseInstructions = oDoseDet.DosingInstruction;
          if (oDoseDet.FromDoseUOM != null) {
            oMulDoseDet.DoseUOM = ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: oDoseDet.FromDoseUOM.UOMName,
              Value: oDoseDet.FromDoseUOM.UOMId.ToString(),
            });
          }
          if (oMulDoseDet.LowerDose > 0) oMaptoGridStpdDose.Add(oMulDoseDet);
        });
      }
      this.StepDoseGridColms = oMaptoGridStpdDose;
    }
  }
  public IsAccessContraint: string;
  public IsPrescribeByBrand: string;
  private _IsControlledDrug: string;
  public get IsControlledDrug(): string {
    return this._IsControlledDrug;
  }
  public set IsControlledDrug(value: string) {
    this._IsControlledDrug = value;
    this.SetQuantityState();
  }
  public SetQuantityState(): void {
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      if (
        (String.Compare(
          this.FormViewerDetails.BasicDetails.IdentifyingType,
          'CatalogueItem',
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
          String.Compare(
            this.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.ACTUALMOIETY,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0) &&
        (String.Compare(
          this.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 ||
          String.IsNullOrEmpty(this.ItemSubType))
      ) {
        this.FormViewerDetails.BasicDetails.IsQuantityEnabled = false;
        this.FormViewerDetails.BasicDetails.IsQuantityMandatory = false;
        if (
          !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity)
        ) {
          this.FormViewerDetails.BasicDetails.Quantity = String.Empty;
        }
        if (this.FormViewerDetails.BasicDetails.QuantityUOM != null) {
          this.FormViewerDetails.BasicDetails.QuantityUOM = null;
        }
      } else if (
        this._IsControlledDrug == '1' &&
        String.Compare(PatientContext.PrescriptionType, CConstants.Clerking) !=
          0 &&
        (String.Compare(
          this.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 ||
          String.IsNullOrEmpty(this.ItemSubType))
      ) {
        this.FormViewerDetails.BasicDetails.IsQuantityEnabled = true;
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0
        ) {
          this.FormViewerDetails.BasicDetails.IsQuantityMandatory = false;
        } else {
          this.FormViewerDetails.BasicDetails.IsQuantityMandatory = true;
        }
      } else if (
        this._IsControlledDrug == '1' &&
        String.Compare(PatientContext.PrescriptionType, CConstants.Clerking) !=
          0 &&
        String.Compare(
          this.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        this.FormViewerDetails.BasicDetails.IsQuantityEnabled = true;
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0
        ) {
          this.FormViewerDetails.BasicDetails.IsQuantityMandatory = false;
        } else {
          this.FormViewerDetails.BasicDetails.IsQuantityMandatory = true;
        }
      } else if (
        this._IsControlledDrug == '0' &&
        String.Compare(PatientContext.PrescriptionType, CConstants.Clerking) !=
          0 &&
        String.Compare(
          this.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        this.FormViewerDetails.BasicDetails.IsQuantityMandatory = false;
      } else if (
        this._IsControlledDrug == '0' &&
        (this.FormViewerDetails.BasicDetails.AccessContraintControls == null ||
          this.FormViewerDetails.BasicDetails.AccessContraintControls.Count ==
            0) &&
        (String.Compare(
          this.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 ||
          String.IsNullOrEmpty(this.ItemSubType))
      ) {
        this.FormViewerDetails.BasicDetails.IsQuantityEnabled = true;
      }
    }
  }
  //public delegate void ReBindMCiGRID();
  public ReBindMCiGRIDEvent: Function;
  //public delegate void RouteorFormchange();
  public RouteorFormchangeEvent: Function;
  //public delegate void RefreshConflictICON();
  public RefreshConflictICONEvent: Function;
  //public delegate void RefreshDRCConflictICON();
  public RefreshDRCConflictICONEvent: Function;
  //public delegate void RePresBindResolveGrid(bool IsRepositionDrug, PrescriptionItemVM objItemVM, int ? Index = 0, string sFrom = null);
  public RePresBindResolveGridEvent: Function;
  //public delegate void UpdateMultiRoutePropertyChanged();
  public UpdateMultiRoutePropertyChangedEvent: Function;
  public ItemSubType: string;
  public MCIItemDisplay: string;
  public MCIItemDrugprop: string;
  public MCChilditem: string;
  public MCIDEActiveItems: string;
  public MCIMatchVersionItems: string;
  public bCnflctGenAftrRcrdAllergy: boolean = false;
  public GetConflictImageStatus(): void {
    let bRed: boolean = false,
      bTechRed = false,
      bAmber = false,
      bAcknowledged = false,
      bQuestion = false;
    let _AllConflictsAcknowledged: boolean = false;
    if (this != null && this.FormViewerDetails != null && !this.IsGroupHeader) {
      if (
        this.IsTechValidateMandatory &&
        (this.FormViewerDetails.TechValidateDetails == null ||
          this.FormViewerDetails.TechValidateDetails.TechValidatedItems ==
            null ||
          this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count ==
            0)
      ) {
        bTechRed = true;
      }
      let IsPrescribeFluidDrug: boolean = false;
      if (
        this.ActionCode == ActivityTypes.Prescribe ||
        this.ActionCode == ActivityTypes.Reorder
      ) {
        IsPrescribeFluidDrug = true;
      }
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == false ||
        ((String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          PatientContext.ClerkFormViewDefaultBehavior ==
            ClerkFormViewDeftBehaviour.LaunchFormMandatory) &&
          ProfileData.MedConflictConfig != null &&
          ProfileData.MedConflictConfig.DisplayConflicts == '1')
      ) {
        if (
          this.FormViewerDetails.ConflictDetails != null &&
          this.FormViewerDetails.ConflictDetails.Count > 0
        ) {
          this.FormViewerDetails.ConflictDetails.forEach((oCVM) => {
            if (
              !oCVM.IsFluidOrSequence &&
              String.Equals(
                oCVM.WarningBehaviourType,
                'Type 1',
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              bRed = true;
            } else if (
              !oCVM.IsFluidOrSequence &&
              String.Equals(
                oCVM.WarningBehaviourType,
                'Type 2',
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              oCVM.PrescriberReason != null &&
              !String.IsNullOrEmpty(oCVM.PrescriberReason.Value) &&
              (oCVM.PrescriberReason.Value == 'Select reason*' ||
                oCVM.PrescriberReason.Value == 'Select reason')
            ) {
              if (
                !(
                  oCVM.IsSeal &&
                  String.Equals(
                    oCVM.SealType,
                    'CC_SEALLOCK',
                    StringComparison.CurrentCultureIgnoreCase
                  )
                )
              ) {
                bRed = true;
              }
            } else if (
              !oCVM.IsFluidOrSequence &&
              String.Equals(
                oCVM.WarningBehaviourType,
                'Type 3',
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              (oCVM.PrescriberReason.Value == 'Select reason*' ||
                oCVM.PrescriberReason.Value == 'Select reason') &&
              !oCVM.AcknowledgeStatus
            ) {
              if (
                !(
                  oCVM.IsSeal &&
                  String.Equals(
                    oCVM.SealType,
                    'CC_SEALLOCK',
                    StringComparison.CurrentCultureIgnoreCase
                  )
                )
              ) {
                bRed = true;
              }
            } else if (
              String.Equals(
                oCVM.WarningBehaviourType,
                'Type 3',
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              (oCVM.PrescriberReason.Value == 'Select reason*' ||
                oCVM.PrescriberReason.Value == 'Select reason') &&
              !oCVM.AcknowledgeStatus &&
              !(oCVM.IsFluidOrSequence && IsPrescribeFluidDrug)
            ) {
              bRed = true;
            } else if (
              String.Equals(
                oCVM.WarningBehaviourType,
                'Type 4',
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              oCVM.PrescriberReason != null &&
              !String.IsNullOrEmpty(oCVM.PrescriberReason.Value) &&
              (oCVM.PrescriberReason.Value == 'Select reason*' ||
                oCVM.PrescriberReason.Value == 'Select reason') &&
              !oCVM.AcknowledgeStatus
            ) {
              bAmber = true;
            } else if (
              String.Equals(
                oCVM.WarningBehaviourType,
                'Type 5',
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              oCVM.PrescriberReason != null &&
              !String.IsNullOrEmpty(oCVM.PrescriberReason.Value) &&
              (oCVM.PrescriberReason.Value == 'Select reason*' ||
                oCVM.PrescriberReason.Value == 'Select reason') &&
              !oCVM.AcknowledgeStatus
            ) {
              bQuestion = true;
            } else if (bAmber == true && oCVM.AcknowledgeStatus) {
              bAmber = true;
            } else if (bRed == true && oCVM.AcknowledgeStatus) {
              bRed = true;
            } else if (bQuestion == true && oCVM.AcknowledgeStatus) {
              bQuestion = true;
            } else if (oCVM.AcknowledgeStatus) {
              bRed = bAmber = bQuestion = false;
              bAcknowledged = true;
            }
          });
          _AllConflictsAcknowledged =
            this.FormViewerDetails.ConflictDetails != null &&
            this.FormViewerDetails.ConflictDetails.Count > 0
              ? true
              : false;
        } else if (
          this.IsResolveGrid &&
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) == false &&
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) == false &&
          String.Equals(
            this.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.CANCELLED,
            StringComparison.CurrentCultureIgnoreCase
          ) == false &&
          String.Equals(
            this.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.DISCONTINUED,
            StringComparison.CurrentCultureIgnoreCase
          ) == false &&
          String.Equals(
            this.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.COMPLETED,
            StringComparison.CurrentCultureIgnoreCase
          ) == false &&
          this.HIIsAcknowledged == '2'
        ) {
          if (this.HIWarningBehaviourType == 'R') {
            bRed = true;
            this.bCnflctGenAftrRcrdAllergy = true;
          } else if (this.HIWarningBehaviourType == 'A') {
            bAmber = true;
          } else if (this.HIWarningBehaviourType == 'Q') {
            bQuestion = true;
          } else {
            bRed = bAmber = bQuestion = false;
            bAcknowledged = true;
          }
        } else if (
          this.IsResolveGrid &&
          (String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            )) &&
          String.Equals(
            this.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.CANCELLED,
            StringComparison.CurrentCultureIgnoreCase
          ) == false &&
          String.Equals(
            this.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.DISCONTINUED,
            StringComparison.CurrentCultureIgnoreCase
          ) == false &&
          String.Equals(
            this.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.COMPLETED,
            StringComparison.CurrentCultureIgnoreCase
          ) == false &&
          this.HIIsAcknowledged == '2'
        ) {
          if (this.HIWarningBehaviourType == 'R') {
            bRed = true;
            this.bCnflctGenAftrRcrdAllergy = true;
          } else if (this.HIWarningBehaviourType == 'A') {
            bAmber = true;
          } else if (this.HIWarningBehaviourType == 'Q') {
            bQuestion = true;
          } else {
            bRed = bAmber = bQuestion = false;
            bAcknowledged = true;
          }
        }
        if (bRed || bTechRed) {
          this.TrafficSymbol = ConflictIcons.Red;
          this.TrafficIcon = bRed ? ConflictIcons.Red : ConflictIcons.None;
        } else if (bAmber) {
          this.TrafficSymbol = ConflictIcons.Amber;
          this.TrafficIcon = ConflictIcons.Amber;
        } else if (bQuestion) {
          this.TrafficSymbol = ConflictIcons.Question;
          this.TrafficIcon = ConflictIcons.Question;
        } else if (_AllConflictsAcknowledged) {
          this.TrafficSymbol = ConflictIcons.MandatoryIndicator;
          this.TrafficIcon = ConflictIcons.MandatoryIndicator;
        } else if (bAcknowledged) {
          this.TrafficSymbol = ConflictIcons.None;
          this.TrafficIcon = ConflictIcons.None;
        } else {
          this.TrafficIcon = ConflictIcons.None;
          this.TrafficSymbol = ConflictIcons.None;
        }
      } else {
        this.TrafficIcon = ConflictIcons.None;
        this.TrafficSymbol = ConflictIcons.None;
      }
      this.TrafficIconResolve = this.TrafficIcon;
      if (this.ReBindMCiGRIDEvent != null) this.ReBindMCiGRIDEvent();
      if (
        String.Equals(
          this.ItemSubType,
          'CC_MULCMPNTITM',
          StringComparison.InvariantCultureIgnoreCase
        ) == false
      ) {
        if (this.RefreshConflictICONEvent != null)
          this.RefreshConflictICONEvent();
      }
    }
  }
  public GetMCConflictImageStatus(): void {
    let bRed: boolean = false,
      bAmber = false,
      bQuestion = false;
    if (this != null && this.FormViewerDetails != null) {
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == false ||
        ((String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          PatientContext.ClerkFormViewDefaultBehavior ==
            ClerkFormViewDeftBehaviour.LaunchFormMandatory) &&
          ProfileData.MedConflictConfig != null &&
          ProfileData.MedConflictConfig.DisplayConflicts == '1')
      ) {
        if (
          this.FormViewerDetails.ConflictDetails != null &&
          this.FormViewerDetails.MulticomponentDetails != null &&
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null
        ) {
          let nOID: number = 0;
          let mcicount: number =
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
          let ConCount: number = this.FormViewerDetails.ConflictDetails.Count;
          for (let rcount: number = 0; rcount < mcicount; rcount++) {
            for (let j: number = 0; j < ConCount; j++) {
              if (
                this.FormViewerDetails.ConflictDetails[j].UniqueMCRowId ==
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].UniqueMCRowID
              ) {
                if (
                  String.Equals(
                    this.FormViewerDetails.ConflictDetails[j]
                      .WarningBehaviourType,
                    'Type 1',
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '1';
                  bRed = true;
                  nOID = rcount;
                  break;
                } else if (
                  String.Equals(
                    this.FormViewerDetails.ConflictDetails[j]
                      .WarningBehaviourType,
                    'Type 2',
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  this.FormViewerDetails.ConflictDetails[j].PrescriberReason !=
                    null &&
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                      .Value
                  ) &&
                  (this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                    .Value == 'Select reason*' ||
                    this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                      .Value == 'Select reason')
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '1';
                  bRed = true;
                  nOID = rcount;
                  break;
                } else if (
                  String.Equals(
                    this.FormViewerDetails.ConflictDetails[j]
                      .WarningBehaviourType,
                    'Type 3',
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  !this.FormViewerDetails.ConflictDetails[j].AcknowledgeStatus
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '1';
                  bRed = true;
                  nOID = rcount;
                  break;
                } else if (
                  String.Equals(
                    this.FormViewerDetails.ConflictDetails[j]
                      .WarningBehaviourType,
                    'Type 3',
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  !this.FormViewerDetails.ConflictDetails[j].AcknowledgeStatus
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '0';
                  bRed = true;
                } else if (
                  String.Equals(
                    this.FormViewerDetails.ConflictDetails[j]
                      .WarningBehaviourType,
                    'Type 4',
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  this.FormViewerDetails.ConflictDetails[j].PrescriberReason !=
                    null &&
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                      .Value
                  ) &&
                  (this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                    .Value == 'Select reason*' ||
                    this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                      .Value == 'Select reason') &&
                  !this.FormViewerDetails.ConflictDetails[j].AcknowledgeStatus
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '0';
                  nOID = rcount;
                  bAmber = true;
                } else if (
                  String.Equals(
                    this.FormViewerDetails.ConflictDetails[j]
                      .WarningBehaviourType,
                    'Type 5',
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  this.FormViewerDetails.ConflictDetails[j].PrescriberReason !=
                    null &&
                  !String.IsNullOrEmpty(
                    this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                      .Value
                  ) &&
                  (this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                    .Value == 'Select reason*' ||
                    this.FormViewerDetails.ConflictDetails[j].PrescriberReason
                      .Value == 'Select reason') &&
                  !this.FormViewerDetails.ConflictDetails[j].AcknowledgeStatus
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '3';
                  nOID = rcount;
                  bQuestion = true;
                } else if (
                  bAmber == true &&
                  nOID == rcount &&
                  this.FormViewerDetails.ConflictDetails[j].AcknowledgeStatus
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '0';
                } else if (
                  bRed == true &&
                  nOID == rcount &&
                  this.FormViewerDetails.ConflictDetails[j].AcknowledgeStatus
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '1';
                } else if (
                  bQuestion == true &&
                  nOID == rcount &&
                  this.FormViewerDetails.ConflictDetails[j].AcknowledgeStatus
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '3';
                } else if (
                  this.FormViewerDetails.ConflictDetails[j].AcknowledgeStatus
                ) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].SealImage = '2';
                }
              }
            }
          }
        }
      }
    }
  }
  public SetTechvalImageStatus(): void {
    let bTechRed: boolean = false;
    let bisdosecombination: boolean = false;
    if (this != null && this.FormViewerDetails != null) {
      this.CheckForTechValidateMandatory();
      if (
        this.IsTechValidateMandatory &&
        (this.FormViewerDetails.TechValidateDetails == null ||
          this.FormViewerDetails.TechValidateDetails.TechValidatedItems ==
            null ||
          this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count ==
            0)
      ) {
        bTechRed = true;
      } else if (
        this.FormViewerDetails.TechValidateDetails != null &&
        this.FormViewerDetails.TechValidateDetails.TechValidatedItems != null &&
        this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0
      ) {
        let temp =
          this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
            (oResnforModfctn) =>
              oResnforModfctn.IsDoseCombinationsDefined == '0'
          ).Select((oResnforModfctn) => oResnforModfctn);
        if (
          temp != null &&
          temp.Count() > 0 &&
          this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count ==
            temp.Count()
        ) {
          bisdosecombination = true;
        }
        if (this.IsTechValidateMandatory && bisdosecombination) {
          bTechRed = true;
        }
      }
      if (bTechRed) {
        this.TvTrafficSymbol = ConflictIcons.Red;
        this.TvTrafficIcon = bTechRed ? ConflictIcons.Red : ConflictIcons.None;
      } else {
        this.TvTrafficSymbol = ConflictIcons.None;
        this.TvTrafficIcon = ConflictIcons.None;
      }
      if (this.RouteorFormchangeEvent != null) this.RouteorFormchangeEvent();
    }
  }
  public GetDomainCombo(Domain: string): void {
    switch (Domain) {
      case ValueDomain.HoldReason:
        ProcessRTE.GetValuesByDomainCode(Domain, (s, e) => {
          this.OnRTEResult(s);
        });
        break;
    }
  }
  public GetDomainComboValues(): void {
    if (this.FormViewerDetails == null)
      this.FormViewerDetails = new FormViewerVM();
    if (this.FormViewerDetails.PresItemDRCVM == null)
      this.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
    if (this.FormViewerDetails.BasicDetails == null)
      this.FormViewerDetails.BasicDetails = new BasicDetailsVM(this);
    if (this.FormViewerDetails.BasicDetails.InfusionDetails == null) {
      this.FormViewerDetails.BasicDetails.InfusionDetails = new InfusionVM(
        this.FormViewerDetails.BasicDetails
      );
    }
    if (this.FormViewerDetails.BasicDetails.DefaultDetails == null) {
      this.FormViewerDetails.BasicDetails.DefaultDetails =
        new FormViewerDefaultsVM();
    }
    let DomainCodes: string = String.Empty;
    let ViewDomainCodes: string = String.Empty;
    let MEDCATREASONDomainCode: string = String.Empty;
    if (
      String.Compare(
        this.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.NONCATALOGUEITEM
      ) == 0 ||
      String.Compare(
        this.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.Precatalog
      ) == 0
    ) {
      MEDCATREASONDomainCode = ValueDomain.MEDCATREASON + ',';
    }
    
    DomainCodes =
      MEDCATREASONDomainCode +
      ValueDomain.TreatmentToContinue +
      ',' +
      ValueDomain.ReasonForModification +
      ',' +
      ValueDomain.MedClerkModificationReasons;
    DomainCodes +=
      ',' +
      ValueDomain.Duration +
      ',' +
      ValueDomain.ForAdminDoseType +
      ',' +
      ValueDomain.Month +
      ',' +
      ValueDomain.SupplyInstruction;
    DomainCodes +=
      ',' +
      ValueDomain.EndorsementProperties +
      ',' +
      ValueDomain.InstallIns +
      ',' +
      ValueDomain.DispensingInstruction +
      ',' +
      ValueDomain.ConflictsReason +
      ',' +
      ValueDomain.InstallVDur;
    if (WarningConceptCode.ConceptData == null)
      DomainCodes +=
        ',' +
        ValueDomain.BHVTY +
        ',' +
        ValueDomain.Contyp +
        ',' +
        ValueDomain.DrugAllergy +
        ',' +
        ValueDomain.DrugContra;
    DomainCodes +=
      ',' +
      ValueDomain.DrugDuplication +
      ',' +
      ValueDomain.Severity +
      ',' +
      ValueDomain.SUBINT +
      ',' +
      ValueDomain.INFUSIONTYPE +
      ',' +
      ValueDomain.INFROUNDTO;
    DomainCodes += ',' + ValueDomain.HUMIDIFICATION;
    DomainCodes += ',' + ValueDomain.DRCErrorCode;
    DomainCodes += ',' + ValueDomain.INDICATIONOVRDREASON;
    DomainCodes += ',' + ValueDomain.DRCACKREASON;
    DomainCodes += ',' + ValueDomain.TITRATEDDOSEINSTRUCTION;
    ProcessRTE.GetHierarchicalValuesByDomains(
      CConstants.CodingSchemeName,
      CConstants.Version,
      CConstants.FilterType,
      ContextInfo.Culture,
      DomainCodes,
      (s, e) => {
        this.OnRTEResultForDomainsCodes(s);
      }
    );
    if (!CommonFlags.IsFormViewerDomainLoaded) {
      ViewDomainCodes =
        ValueDomain.TreatmentToContinue +
        ',' +
        ValueDomain.Duration +
        ',' +
        ValueDomain.DispensingInstruction +
        ',' +
        ValueDomain.DRCACKREASON +
        ',' +
        ValueDomain.Supplystatus;
      ProcessRTE.GetValuesByDomainCodes(ViewDomainCodes, (s, e) => {
        this.OnRTEViewResult(s);
      });
    }
  }
  OnRTEViewResult(args: RTEEventargs): void {
    if (String.IsNullOrEmpty(args.Request) || args.Result == null) return;
    if (
      String.Equals(
        args.Request,
        'MEDTRTCONTINUE,MEDDRSN,DISPINS,DRCACKWRSN,MEDSUPPLYSTATUS',
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      if (args.Result instanceof Dictionary) {
        if (MedicationCommonConceptCodeData.ViewConceptCodes == null) {
          MedicationCommonConceptCodeData.ViewConceptCodes =
            new ObservableCollection<CValuesetTerm>();
        }
        let objResult: Dictionary<string, List<CListItem>> = <
          Dictionary<string, List<CListItem>>
        >args.Result;
        objResult.forEach((objDomainDetail) => {
          switch (objDomainDetail.Key.ToUpper()) {
            case 'MEDTRTCONTINUE':
            case 'MEDDRSN':
            case 'DISPINS':
            case 'DRCACKWRSN':
            case 'MEDSUPPLYSTATUS':
              objDomainDetail.Value.forEach((oCListItem) => {
                MedicationCommonConceptCodeData.ViewConceptCodes.Add(
                  ObjectHelper.CreateObject(new CValuesetTerm(), {
                    csCode: oCListItem.Value,
                    csDescription: oCListItem.DisplayText,
                  })
                );
              });
              break;
          }
        });
        if (
          MedicationCommonConceptCodeData.ViewConceptCodes != null &&
          MedicationCommonConceptCodeData.ViewConceptCodes.Count > 0
        ) {
          CommonFlags.IsFormViewerDomainLoaded = true;
        }
      }
    }
  }
  LoadConflictsReason(lstCListItem: List<CListItem>, IsCnftRsn: boolean): void {
    if (IsCnftRsn) {
      if (lstCListItem != null && lstCListItem.Count > 0) {
        this.FormViewerDetails.ConflictsReason =
          new ObservableCollection<CListItem>();
        lstCListItem.forEach((oCListItem) => {
          this.FormViewerDetails.ConflictsReason.Add(oCListItem);
        });
      }
    } else {
      if (WarningConceptCode.ConceptData == null)
        WarningConceptCode.ConceptData =
          new ObservableCollection<CValuesetTerm>();
      if (lstCListItem != null && lstCListItem.Count > 0) {
        lstCListItem.forEach((oCListItem) => {
          WarningConceptCode.ConceptData.Add(
            ObjectHelper.CreateObject(new CValuesetTerm(), {
              csCode: oCListItem.Value,
              csDescription: oCListItem.DisplayText,
            })
          );
        });
      }
    }
  }
  LoadDRCAcknowledgeReason(lstCListItem: List<CListItem>): void {
    if (
      lstCListItem != null &&
      lstCListItem.Count > 0 &&
      this.FormViewerDetails != null &&
      this.FormViewerDetails.PresItemDRCVM != null
    ) {
      let oSelectedMedDRCReason: CListItem = null;
      let oDefaultItem: CListItem = null;
      if (
        this.FormViewerDetails.PresItemDRCVM.MedDRCReason != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value
        )
      ) {
        oSelectedMedDRCReason = ObjectHelper.CreateObject(new CListItem(), {
          Value: this.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value,
        });
      }
      this.FormViewerDetails.PresItemDRCVM.MedDRCReasonList =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.PresItemDRCVM.MedDRCReasonList.Add(oCListItem);
        if (
          oSelectedMedDRCReason != null &&
          String.Compare(oCListItem.Value, oSelectedMedDRCReason.Value) == 0
        )
          oDefaultItem = oCListItem;
      });
      if (oDefaultItem != null) {
        this.FormViewerDetails.PresItemDRCVM.MedDRCReason = oDefaultItem;
      }
    }
  }
  private FillInfusiontypes(lstCListItem: List<CListItem>): void {
    let oTmpClistItem: CListItem = null;
    if (this.FormViewerDetails.BasicDetails.InfusionType != null) {
      oTmpClistItem = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText:
          this.FormViewerDetails.BasicDetails.InfusionType.DisplayText,
        Value: this.FormViewerDetails.BasicDetails.InfusionType.Value,
        Tag: this.FormViewerDetails.BasicDetails.InfusionType.Tag,
      });
    }
    let oDefaultItem: CListItem = null;
    if (lstCListItem != null && lstCListItem.Count > 0) {
      if (
        this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
        (this.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList ==
          null ||
          this.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList
            .Count == 0)
      ) {
        this.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList =
          new ObservableCollection<CListItem>();
        lstCListItem.forEach((oCListItem) => {
          if (
            this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
            !(
              String.Compare(
                this.FormViewerDetails.BasicDetails.itemSubType,
                CConstants.SUBTYPE_BLOOD,
                StringComparison.OrdinalIgnoreCase
              ) == 0 &&
              String.Compare(
                oCListItem.Value,
                InfusionTypesCode.PCA,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            )
          )
            this.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList.Add(
              oCListItem
            );
          if (
            oTmpClistItem != null &&
            String.Compare(oCListItem.Value, oTmpClistItem.Value) == 0
          )
            oDefaultItem = oCListItem;
        });
        if (oDefaultItem != null) {
          this.FormViewerDetails.BasicDetails.InfusionType = oDefaultItem;
        } else if (
          oTmpClistItem != null &&
          !String.IsNullOrEmpty(oTmpClistItem.Value) &&
          !String.IsNullOrEmpty(oTmpClistItem.DisplayText)
        ) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.InfusionTypeList.Add(
            oTmpClistItem
          );
          this.FormViewerDetails.BasicDetails.InfusionType = oTmpClistItem;
        }
      }
    }
  }
  private FillInfusionRoundto(lstCListItem: List<CListItem>): void {
    if (lstCListItem != null && lstCListItem.Count > 0) {
      let oDefaultItem: CListItem = null;
      let savedItem: CListItem = null;
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateRndtoList =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateRndtoList.Add(
          oCListItem
        );
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfusionRateRndtoList != null &&
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfusionRateRndto != null &&
          String.Compare(
            oCListItem.Value,
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionRateRndto.Value
          ) == 0
        )
          oDefaultItem = oCListItem;
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails.RoundOffCode
          ) &&
          String.Equals(
            oCListItem.Value,
            this.FormViewerDetails.BasicDetails.InfusionDetails.RoundOffCode,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          savedItem = oCListItem;
        }
      });
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.RoundOffCode
        ) &&
        savedItem != null
      ) {
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateRndto =
          savedItem;
      } else {
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateRndto =
          lstCListItem[0];
      }
    }
  }
  private FillVolumeUoM(lstCListItem: List<CListItem>): void {
    let oDefaultItem: CListItem = null;
    if (lstCListItem != null && lstCListItem.Count > 0) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList.Add(
          oCListItem
        );
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM !=
            null &&
          String.Compare(
            oCListItem.Value,
            this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM.Value
          ) == 0
        )
          oDefaultItem = oCListItem;
      });
    }
  }
  private FillInfRateNumUoM(lstCListItem: List<CListItem>): void {
    let oDefaultItem: CListItem = null;
    if (lstCListItem != null && lstCListItem.Count > 0) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(
            (x) =>
              x.Tag != null &&
              oCListItem.Tag != null &&
              x.Tag.ToString().Contains(oCListItem.Tag.ToString())
          ).Count() == 0
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Add(
            oCListItem
          );
        }
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
          String.Compare(
            oCListItem.Value,
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.Value
          ) == 0
        )
          oDefaultItem = oCListItem;
      });
    }
  }
  private FillInfConcentrationUoM(lstCListItem: List<CListItem>): void {
    let oDefaultItem: CListItem = null;
    if (lstCListItem != null && lstCListItem.Count > 0) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(
            (x) =>
              x.Tag != null &&
              oCListItem.Tag != null &&
              x.Tag.ToString().Contains(oCListItem.Tag.ToString())
          ).Count() == 0
        ) {
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Add(
            oCListItem
          );
        }
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
          String.Compare(
            oCListItem.Value,
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.Value
          ) == 0
        )
          oDefaultItem = oCListItem;
      });
    }
  }
  private FillInfPeriodUoM(lstCListItem: List<CListItem>): void {
    let oDefaultItem: CListItem = null;
    if (lstCListItem != null && lstCListItem.Count > 0) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUOM =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUOM.Add(
          oCListItem
        );
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfusionPeriodUom != null &&
          String.Compare(
            oCListItem.Value,
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom.Value
          ) == 0
        )
          oDefaultItem = oCListItem;
      });
    }
  }
  private FillInfRatDenoUoM(lstCListItem: List<CListItem>): void {
    let oDefaultItem: CListItem = null;
    if (lstCListItem != null && lstCListItem.Count > 0) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM.Add(
          oCListItem
        );
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom != null &&
          String.Compare(
            oCListItem.Value,
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.Value
          ) == 0
        )
          oDefaultItem = oCListItem;
      });
    }
  }
  private FillNonCatalogueReason(lstCListItem: List<CListItem>): void {
    let oTmpClistItem: CListItem = null;
    if (this.FormViewerDetails.BasicDetails.NONCatalogueReason != null) {
      oTmpClistItem = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText:
          this.FormViewerDetails.BasicDetails.NONCatalogueReason.DisplayText,
        Value: this.FormViewerDetails.BasicDetails.NONCatalogueReason.Value,
        Tag: this.FormViewerDetails.BasicDetails.NONCatalogueReason.Tag,
      });
    }
    let oDefaultItem: CListItem = null;
    this.FormViewerDetails.BasicDetails.DefaultDetails.NONCatalogueReasons =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.DefaultDetails.NONCatalogueReasons.Add(
          oCListItem
        );
        if (
          oTmpClistItem != null &&
          String.Compare(oCListItem.Value, oTmpClistItem.Value) == 0
        )
          oDefaultItem = oCListItem;
      });
    }
    if (oDefaultItem != null) {
      this.FormViewerDetails.BasicDetails.NONCatalogueReason = oDefaultItem;
    }
  }
  LoadTreatmentToContinue(lstCListItem: List<CListItem>): void {
    let oDefValue: CListItem = null;
    if (
      this.FormViewerDetails.BasicDetails.TreatmentToContinue != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.TreatmentToContinue.Value
      )
    ) {
      oDefValue = this.FormViewerDetails.BasicDetails.TreatmentToContinue;
    }
    this.FormViewerDetails.BasicDetails.DefaultDetails.TreatToContinue =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      let _IsDefaultExist: boolean = false;
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.DefaultDetails.TreatToContinue.Add(
          oCListItem
        );
        if (
          oDefValue != null &&
          String.Compare(
            oDefValue.Value,
            oCListItem.Value,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          oDefValue = oCListItem;
          _IsDefaultExist = true;
        } else if (
          oDefValue == null &&
          oCListItem.IsDefault == true &&
          this.ActionCode != ActivityTypes.Amend
        ) {
          oDefValue = oCListItem;
          _IsDefaultExist = true;
        }
      });
      if (oDefValue != null) {
        if (!_IsDefaultExist && !String.IsNullOrEmpty(oDefValue.DisplayText)) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.TreatToContinue.Add(
            oDefValue
          );
        }
        this.FormViewerDetails.BasicDetails.TreatmentToContinue = oDefValue;
      }
    }
  }
  LoadReasonForModificationValues(lstCListItem: List<CListItem>): void {
    this.FormViewerDetails.BasicDetails.DefaultDetails.ReasonforModification =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      this.formViewerDetails.BasicDetails.DefaultDetails.MedClerkingModificationReason =
        new ObservableCollection<CListItem>();
      if (DateTime.Equals(FormviewerCommonData.ServerDateTime, DateTime.MinValue)) {
        FormviewerCommonData.ServerDateTime = CommonBB.GetServerDateTime();
      }
      let nCount: number = lstCListItem.Count;
      for (let i: number = 0; i < nCount; i++) {
        if (
          String.Compare(
            lstCListItem[i].Value,
            'CC_MEDADDINFORMAVBLE',
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
          String.Compare(
            lstCListItem[i].Value,
            'CC_MEDENTEREDINERROR',
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          this.formViewerDetails.BasicDetails.DefaultDetails.MedClerkingModificationReason.Add(
            lstCListItem[i]
          );
        }
        if (
          DateTime.LessThanOrEqualTo(this.FormViewerDetails.BasicDetails.StartDTTM,
            FormviewerCommonData.ServerDateTime) &&
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
          (String.Compare(
            lstCListItem[i].Value,
            'CC_MEDWRNGFREQNCY',
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            String.Compare(
              lstCListItem[i].Value,
              'CC_MEDENTEREDINERROR',
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              lstCListItem[i].Value,
              'CC_MEDWRNGDOSE',
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              lstCListItem[i].Value,
              'CC_PRESINERR',
              StringComparison.OrdinalIgnoreCase
            ) == 0)
        ) {
          continue;
        }
        if (
          PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          if (
            String.Compare(
              lstCListItem[i].Value,
              'CC_MEDADDINFORMAVBLE',
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              lstCListItem[i].Value,
              'CC_MEDENTEREDINERROR',
              StringComparison.OrdinalIgnoreCase
            ) == 0
          )
            this.FormViewerDetails.BasicDetails.DefaultDetails.ReasonforModification.Add(
              lstCListItem[i]
            );
        } else {
          this.FormViewerDetails.BasicDetails.DefaultDetails.ReasonforModification.Add(
            lstCListItem[i]
          );
        }
      }
      /*
            lstCListItem.forEach( (oCListItem)=> {
                if (String.Compare(oCListItem.Value, "CC_MEDADDINFORMAVBLE", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(oCListItem.Value, "CC_MEDENTEREDINERROR", StringComparison.OrdinalIgnoreCase) == 0) {
                    this.formViewerDetails.BasicDetails.DefaultDetails.MedClerkingModificationReason.Add(oCListItem);
                }
                if (DateTime.LessThanOrEqualTo(this.FormViewerDetails.BasicDetails.StartDTTM, FormviewerCommonData.ServerDateTime) && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.ForAdministration, StringComparison.OrdinalIgnoreCase) == 0 && PatientContext.ClerkFormViewDefaultBehavior != ClerkFormViewDeftBehaviour.LaunchFormMandatory && (String.Compare(oCListItem.Value, "CC_MEDWRNGFREQNCY", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(oCListItem.Value, "CC_MEDENTEREDINERROR", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(oCListItem.Value, "CC_MEDWRNGDOSE", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(oCListItem.Value, "CC_PRESINERR", StringComparison.OrdinalIgnoreCase) == 0)) {
                    continue;
                }
                if (PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory) {
                    if (String.Compare(oCListItem.Value, "CC_MEDADDINFORMAVBLE", StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(oCListItem.Value, "CC_MEDENTEREDINERROR", StringComparison.OrdinalIgnoreCase) == 0)
                        this.FormViewerDetails.BasicDetails.DefaultDetails.ReasonforModification.Add(oCListItem);
                }
                else {
                    this.FormViewerDetails.BasicDetails.DefaultDetails.ReasonforModification.Add(oCListItem);
                }
            });
            */
    }
    if (this.FormViewerDetails.BasicDetails.ReasonforModification != null) {
      let temp =
        this.FormViewerDetails.BasicDetails.DefaultDetails.ReasonforModification.Where(
          (oResnforModfctn) =>
            oResnforModfctn.DisplayText ==
            this.FormViewerDetails.BasicDetails.ReasonforModification
              .DisplayText
        ).Select((oResnforModfctn) => oResnforModfctn);
      this.FormViewerDetails.BasicDetails.ReasonforModification =
        ObjectHelper.CreateType<CListItem>(temp.FirstOrDefault(), CListItem);
    }
  }
  LoadMedClerkModificationReasons(lstCListItem: List<CListItem>): void {
    this.FormViewerDetails.BasicDetails.DefaultDetails.ClerkingReasonforModification =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      let oDefault: CListItem = null;
      let TempMedClerkModifyReason: CListItem =
        this.FormViewerDetails.BasicDetails.MedClerkModifyReason;
      lstCListItem.forEach((oCListItem) => {
        if (
          String.Compare(
            oCListItem.Value,
            'CC_WTHOLDUNTLDSCHRG',
            StringComparison.OrdinalIgnoreCase
          ) != 0
        )
          this.FormViewerDetails.BasicDetails.DefaultDetails.ClerkingReasonforModification.Add(
            oCListItem
          );
        if (
          TempMedClerkModifyReason != null &&
          String.Compare(oCListItem.Value, TempMedClerkModifyReason.Value) == 0
        )
          oDefault = oCListItem;
      });
      if (oDefault != null)
        this.FormViewerDetails.BasicDetails.MedClerkModifyReason = oDefault;
    }
  }
  LoadDuration(lstCListItem: List<CListItem>): void {
    let oTmpClistItem: CListItem = null;
    if (this.FormViewerDetails.BasicDetails.DurationUOM != null) {
      oTmpClistItem = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText:
          this.FormViewerDetails.BasicDetails.DurationUOM.DisplayText,
        Value: this.FormViewerDetails.BasicDetails.DurationUOM.Value,
        Tag: this.FormViewerDetails.BasicDetails.DurationUOM.Tag,
      });
    }
    this.FormViewerDetails.BasicDetails.DefaultDetails.Duration =
      new ObservableCollection<CListItem>();
    this.formViewerDetails.BasicDetails.DefaultDetails.DurationOriginal =
      new ObservableCollection<CListItem>();
    this.FormViewerDetails.BasicDetails.DefaultDetails.DurationStepped =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      let oDefValue: CListItem = null;
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.DefaultDetails.Duration.Add(
          oCListItem
        );
        this.formViewerDetails.BasicDetails.DefaultDetails.DurationOriginal.Add(
          oCListItem
        );
        if (
          !String.Equals(
            oCListItem.Value,
            ConstDurationUOM.Minutes,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            oCListItem.Value,
            ConstDurationUOM.Weeks,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            oCListItem.Value,
            ConstDurationUOM.Months,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            oCListItem.Value,
            ConstDurationUOM.Years,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.DurationStepped.Add(
            oCListItem
          );
        }
        if (
          oTmpClistItem != null &&
          String.Compare(
            oTmpClistItem.Value,
            oCListItem.Value,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        )
          oDefValue = oCListItem;
      });
      if (oDefValue != null) {
        this.FormViewerDetails.BasicDetails.DurationUOM = oDefValue;
      } else {
        if (
          oTmpClistItem != null &&
          !String.IsNullOrEmpty(oTmpClistItem.Value) &&
          !String.IsNullOrEmpty(oTmpClistItem.DisplayText)
        ) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Duration.Add(
            oTmpClistItem
          );
          this.FormViewerDetails.BasicDetails.DurationUOM = oTmpClistItem;
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.AsRequired &&
        (this.ActionCode == ActivityTypes.Amend ||
          this.ActionCode == ActivityTypes.Reorder ||
          this.ActionCode == ActivityTypes.Prescribe)
      ) {
        this.FormViewerDetails.BasicDetails.RemoveDoseFromDuration();
      }
    }
  }
  LoadForAdminDoseType(lstCListItem: List<CListItem>): void {
    let SelectedDoseType: CListItem = null;
    if (
      this.FormViewerDetails.BasicDetails.DoseType != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.DoseType.Value)
    ) {
      SelectedDoseType = ObjectHelper.CreateObject(new CListItem(), {
        Value: this.FormViewerDetails.BasicDetails.DoseType.Value,
        DisplayText: this.FormViewerDetails.BasicDetails.DoseType.DisplayText,
        Tag: this.FormViewerDetails.BasicDetails.DoseType.Tag,
      });
    }
    this.FormViewerDetails.BasicDetails.DefaultDetails.DoseType =
      new ObservableCollection<CListItem>();
    this.FormViewerDetails.BasicDetails.DefaultDetails.InfuInterDoseType =
      new ObservableCollection<CListItem>();
    this.FormViewerDetails.BasicDetails.DefaultDetails.InfuContDoseType =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      let oDefValue: CListItem = null;
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.DefaultDetails.DoseType.Add(
          oCListItem
        );
        if (String.Compare(oCListItem.Value, DoseTypeCode.TITRATED) != 0) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.InfuInterDoseType.Add(
            oCListItem
          );
        } else {
          this.FormViewerDetails.BasicDetails.DefaultDetails.IsTitrated = true;
        }
        if (
          String.Compare(oCListItem.Value, DoseTypeCode.DOSAGERANGE) != 0 &&
          String.Compare(oCListItem.Value, DoseTypeCode.TITRATED) != 0 &&
          String.Compare(oCListItem.Value, DoseTypeCode.STEPPEDVARIABLE) != 0
        ) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.InfuContDoseType.Add(
            oCListItem
          );
        }
        if (
          SelectedDoseType != null &&
          String.Compare(
            SelectedDoseType.Value,
            oCListItem.Value,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        )
          oDefValue = oCListItem;
      });
      if (
        SelectedDoseType != null &&
        !String.IsNullOrEmpty(SelectedDoseType.Value)
      ) {
        if (oDefValue != null) {
          this.FormViewerDetails.BasicDetails.DoseType = oDefValue;
        } else {
          if (!String.IsNullOrEmpty(SelectedDoseType.DisplayText))
            this.FormViewerDetails.BasicDetails.DefaultDetails.DoseType.Add(
              SelectedDoseType
            );
        }
      } else if (
        (this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.IdentifyingType
          ) &&
          String.Compare(
            this.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.NONCATALOGUEITEM
          ) == 0) ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.IdentifyingType,
          CConstants.Precatalog
        ) == 0
      ) {
        this.FormViewerDetails.BasicDetails.DoseType =
          ObjectHelper.CreateObject(new CListItem(), {
            Value: DoseTypeCode.NORMAL,
            DisplayText: 'Normal',
          });
      }
    }
  }
  LoadMonth(lstCListItem: List<CListItem>): void {
    if (
      this.FormViewerDetails.BasicDetails.DefaultDetails.Month == null ||
      this.FormViewerDetails.BasicDetails.DefaultDetails.Month.Count == 0
    ) {
      this.FormViewerDetails.BasicDetails.DefaultDetails.Month =
        new ObservableCollection<CListItem>();
      if (lstCListItem != null && lstCListItem.Count > 0) {
        lstCListItem.forEach((oCListItem) => {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Month.Add(
            oCListItem
          );
        });
      }
    }
  }
  LoadSupplyInstruction(lstCListItem: List<CListItem>): void {
    this.FormViewerDetails.BasicDetails.DefaultDetails.SupplyInstructions =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      DomainValuesForTechValidate.SupplyInstructions =
        new ObservableCollection<CValuesetTerm>();
      FormviewerComboValues.SupplyInstructions =
        new ObservableCollection<CValuesetTerm>();
      FormviewerComboValues.SupplyInstr = new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.DefaultDetails.SupplyInstructions.Add(
          oCListItem
        );
        DomainValuesForTechValidate.SupplyInstructions.Add(
          ObjectHelper.CreateObject(new CValuesetTerm(), {
            csCode: oCListItem.Value,
            csDescription: oCListItem.DisplayText,
          })
        );
        FormviewerComboValues.SupplyInstructions.Add(
          ObjectHelper.CreateObject(new CValuesetTerm(), {
            csCode: oCListItem.Value,
            csDescription: oCListItem.DisplayText,
          })
        );
        FormviewerComboValues.SupplyInstr.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oCListItem.DisplayText,
            Value: oCListItem.Value,
            ConceptProperties: oCListItem.ConceptProperties,
            IsSelected: false,
          })
        );
      });
    }
  }
  LoadEndorsementProperties(lstCListItem: List<CListItem>): void {
    if (lstCListItem != null && lstCListItem.Count > 0) {
      this.FormViewerDetails.BasicDetails.EndorsementProperties =
        new ObservableCollection<CListItem>();
      let IsSelected: boolean = false;
      lstCListItem.forEach((oCListItem) => {
        IsSelected = false;
        if (
          this.FormViewerDetails.BasicDetails.SelectedEndorsment != null &&
          this.FormViewerDetails.BasicDetails.SelectedEndorsment.Count > 0
        ) {
          for(let i=0; i< this.FormViewerDetails.BasicDetails.SelectedEndorsment.Count; i++){
            let oSelectedCListItem : CListItem = this.FormViewerDetails.BasicDetails.SelectedEndorsment[i];          
              if (oSelectedCListItem.Value == oCListItem.Value) {
                IsSelected = true;
                break;
              }
            }
        }
        oCListItem.IsSelected = IsSelected;
        this.FormViewerDetails.BasicDetails.EndorsementProperties.Add(
          oCListItem
        );
      });
    }
  }
  LoadInstallIns(lstCListItem: List<CListItem>): void {
    let lstInstalInst: ObservableCollection<CListItem> =
      new ObservableCollection<CListItem>();
    let oItem: CListItem;
    if (lstCListItem != null && lstCListItem.Count > 0) {
      lstCListItem.forEach((oCListItem) => {
        oItem = ObjectHelper.CreateObject(new CListItem(), {
          DisplayText: oCListItem.DisplayText,
          Value: oCListItem.Value,
        });
        if (
          this.FormViewerDetails.BasicDetails.InstalmentInstructions != null &&
          this.FormViewerDetails.BasicDetails.InstalmentInstructions.Count > 0
        ) {
          for (
            let j: number = 0;
            j <
            this.FormViewerDetails.BasicDetails.InstalmentInstructions.Count;
            j++
          ) {
            if (
              this.FormViewerDetails.BasicDetails.InstalmentInstructions[j]
                .IsSelected &&
              String.Compare(
                oItem.Value,
                this.FormViewerDetails.BasicDetails.InstalmentInstructions[j]
                  .Value
              ) == 0
            ) {
              oItem.IsSelected = true;
              break;
            }
          }
        }
        lstInstalInst.Add(oItem);
      });
    }
    this.FormViewerDetails.BasicDetails.InstalmentInstructions = lstInstalInst;
  }
  public LoadDispensingInstruction(lstCListItem: List<CListItem>): void {
    if (
      lstCListItem != null &&
      lstCListItem.Count > 0 &&
      (this.FormViewerDetails.BasicDetails.DispensingInstruction == null ||
        this.FormViewerDetails.BasicDetails.DispensingInstruction.Count == 0)
    ) {
      DomainValuesForTechValidate.DispensingInstructions =
        new ObservableCollection<CValuesetTerm>();
      this.FormViewerDetails.BasicDetails.DispensingInstruction =
        new ObservableCollection<CListItem>();
      DomainValuesForTechValidate.SelecteddispInstruction =
        new ObservableCollection<CValuesetTerm>();
      this.FormViewerDetails.BasicDetails.SelecteddispInstruction =
        new ObservableCollection<CListItem>();
      let SeldispInstruction: ObservableCollection<CListItem> =
        new ObservableCollection<CListItem>();
      let TechSeldispInstruction: ObservableCollection<CValuesetTerm> =
        new ObservableCollection<CValuesetTerm>();
      let IsSelected: boolean = false;
      lstCListItem.forEach((oCListItem) => {
        IsSelected = false;
        if (
          this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction !=
            null &&
          this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction
            .Count > 0
        ) {
          for(let i=0;i<this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction.Count; i++){
            let oSelectedCListItem : CListItem = this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction[i];          
              if (oSelectedCListItem.Value == oCListItem.Value) {
                IsSelected = true;
                if (
                  !SeldispInstruction.Where(
                    (x) => x.Value == oCListItem.Value
                  ).Any()
                )
                  SeldispInstruction.Add(oCListItem);
                if (
                  !TechSeldispInstruction.Where(
                    (x) => x.csCode == oCListItem.Value
                  ).Any()
                )
                  TechSeldispInstruction.Add(
                    ObjectHelper.CreateObject(new CValuesetTerm(), {
                      csCode: oCListItem.Value,
                      csDescription: oCListItem.DisplayText,
                    })
                  );
                if (
                  String.Compare(
                    oCListItem.Value,
                    'CC_OTHER',
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0
                )
                  oCListItem.Tag = oSelectedCListItem.Tag;
                break;
              }
            }
        }
        oCListItem.IsSelected = IsSelected;
        this.FormViewerDetails.BasicDetails.DispensingInstruction.Add(
          oCListItem
        );
        DomainValuesForTechValidate.DispensingInstructions.Add(
          ObjectHelper.CreateObject(new CValuesetTerm(), {
            csCode: oCListItem.Value,
            csDescription: oCListItem.DisplayText,
          })
        );
      });
      if (
        this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction !=
          null &&
        this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction
          .Count > 0
      ) {
        if (
          MedicationCommonConceptCodeData.ViewConceptCodes != null &&
          MedicationCommonConceptCodeData.ViewConceptCodes.Count > 0
        ) {
          this.FormViewerDetails.BasicDetails.SelectedDispensingInstruction.forEach(
            (oSelectedCListItem) => {
              for(let i=0; i< MedicationCommonConceptCodeData.ViewConceptCodes.Count; i++){
                let oCListItem: CValuesetTerm = MedicationCommonConceptCodeData.ViewConceptCodes[i];             
                  if (oSelectedCListItem.Value == oCListItem.csCode) {
                    IsSelected = true;
                    oSelectedCListItem.DisplayText = oCListItem.csDescription;
                    if (
                      !SeldispInstruction.Where(
                        (x) => x.Value == oSelectedCListItem.Value
                      ).Any()
                    )
                      SeldispInstruction.Add(oSelectedCListItem);
                    if (
                      !TechSeldispInstruction.Where(
                        (x) => x.csCode == oSelectedCListItem.Value
                      ).Any()
                    )
                      TechSeldispInstruction.Add(
                        ObjectHelper.CreateObject(new CValuesetTerm(), {
                          csCode: oCListItem.csCode,
                          csDescription: oCListItem.csDescription,
                        })
                      );
                    break;
                  }
                 }
            }
          );
        }
      }
      this.FormViewerDetails.BasicDetails.SelecteddispInstruction =
        SeldispInstruction;
      DomainValuesForTechValidate.SelecteddispInstruction =
        TechSeldispInstruction;
    }
  }
  public LoadDRCErrorCode(lstCListItem: List<CListItem>): void {
    if (
      lstCListItem != null &&
      lstCListItem.Count > 0 &&
      (DRCErrorCodeConceptCodeData.ConceptCodes == null ||
        (DRCErrorCodeConceptCodeData.ConceptCodes != null &&
          DRCErrorCodeConceptCodeData.ConceptCodes.Count == 0))
    ) {
      DRCErrorCodeConceptCodeData.ConceptCodes =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        DRCErrorCodeConceptCodeData.ConceptCodes.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            Value: oCListItem.Value,
            DisplayText: oCListItem.DisplayText,
          })
        );
      });
    }
  }
  public LoadTitratedInstructionList(lstCListItem: List<CListItem>): void {
    if (
      lstCListItem != null &&
      lstCListItem.Count > 0 &&
      (TitratedDoseInstructions.ConceptCodes == null ||
        (TitratedDoseInstructions.ConceptCodes != null &&
          TitratedDoseInstructions.ConceptCodes.Count == 0))
    ) {
      TitratedDoseInstructions.ConceptCodes =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        TitratedDoseInstructions.ConceptCodes.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            Value: oCListItem.Value,
            DisplayText: oCListItem.DisplayText,
          })
        );
      });
    }
    let oDefValue: CListItem = null;
    if (
      this.FormViewerDetails.BasicDetails.TitratedDoseInstruction != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.TitratedDoseInstruction.Value
      )
    ) {
      oDefValue = this.FormViewerDetails.BasicDetails.TitratedDoseInstruction;
    }
    this.FormViewerDetails.BasicDetails.TitratedDoseInstructionList =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      let _IsDefaultExist: boolean = false;
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.TitratedDoseInstructionList.Add(
          oCListItem
        );
        if (
          oDefValue != null &&
          String.Compare(
            oDefValue.Value,
            oCListItem.Value,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          oDefValue = oCListItem;
          _IsDefaultExist = true;
        } else if (oDefValue == null && oCListItem.IsDefault == true) {
          oDefValue = oCListItem;
          _IsDefaultExist = true;
        }
      });
      let bresult: CListItem =
        this.FormViewerDetails.BasicDetails.TitratedDoseInstructionList.Where(
          (a) => a.IsDefault
        ).FirstOrDefault();
      if (bresult != null && bresult.IsDefault) {
        this.formViewerDetails.BasicDetails.odefTitratedDoseInstruction =
          bresult;
      }
      if (oDefValue != null) {
        if (!_IsDefaultExist && !String.IsNullOrEmpty(oDefValue.DisplayText)) {
          this.FormViewerDetails.BasicDetails.TitratedDoseInstructionList.Add(
            oDefValue
          );
        }
        this.FormViewerDetails.BasicDetails.TitratedDoseInstruction = oDefValue;
      }
    }
  }
  LoadInstalmentUOM(lstCListItem: List<CListItem>): void {
    let lstInstalUOM: ObservableCollection<CListItem> =
      new ObservableCollection<CListItem>();
    if (lstCListItem != null && lstCListItem.Count > 0) {
      if (
        this.FormViewerDetails.BasicDetails.DefaultDetails
          .IntervalInstalmentsUoM == null
      ) {
        let oLstDefaultItem: CListItem = null;
        this.FormViewerDetails.BasicDetails.DefaultDetails.IntervalInstalmentsUoM =
          new ObservableCollection<CListItem>();
        (<List<CListItem>>lstCListItem).forEach((oCListItem) => {
          this.FormViewerDetails.BasicDetails.DefaultDetails.IntervalInstalmentsUoM.Add(
            oCListItem
          );
          if (
            this.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM !=
              null &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM
                .Value,
              oCListItem.Value,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            oLstDefaultItem = oCListItem;
          }
        });
        if (oLstDefaultItem != null)
          this.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
            oLstDefaultItem;
      }
    }
  }
  public NonFormularyReason: CListItem;
  public OtherNonFormularyReason: string;
  public MCOtherNonFormularyReason: string;
  public MCNonFormularyReason: string;
  public IsCompletedDisContItemFor72Hrs: string;
  private _isAmendment: string;
  public get IsAmendment(): string {
    return this._isAmendment;
  }
  public set IsAmendment(value: string) {
    this._isAmendment = value;
    //NotifyPropertyChanged("IsAmendment");
  }
  private _isClinicallyVerifyEnable: boolean = false;
  public get IsClinicallyVerifyEnable(): boolean {
    return this._isClinicallyVerifyEnable;
  }
  public set IsClinicallyVerifyEnable(value: boolean) {
    if (this._isClinicallyVerifyEnable != value) {
      this._isClinicallyVerifyEnable = value;
      //NotifyPropertyChanged("IsClinicallyVerifyEnable");
    }
  }
  private _IsAmendCompletedStatus: boolean = false;
  public get IsAmendCompletedStatus(): boolean {
    return this._IsAmendCompletedStatus;
  }
  public set IsAmendCompletedStatus(value: boolean) {
    if (this._IsAmendCompletedStatus != value) {
      this._IsAmendCompletedStatus = value;
      //NotifyPropertyChanged("IsAmendCompletedStatus");
    }
  }
  private isSupplyRequestedEnable: boolean = false;
  public get IsSupplyRequestedEnable(): boolean {
    return this.isSupplyRequestedEnable;
  }
  public set IsSupplyRequestedEnable(value: boolean) {
    if (this.isSupplyRequestedEnable != value) {
      this.isSupplyRequestedEnable = value;
      //NotifyPropertyChanged("IsSupplyRequestedEnable");
    }
  }
  private _isClinicallyVerifyCommentsMandatory: boolean = false;
  public get IsClinicallyVerifyCommentsMandatory(): boolean {
    return this._isClinicallyVerifyCommentsMandatory;
  }
  public set IsClinicallyVerifyCommentsMandatory(value: boolean) {
    if (this._isClinicallyVerifyCommentsMandatory != value) {
      this._isClinicallyVerifyCommentsMandatory = value;
      //NotifyPropertyChanged("IsClinicallyVerifyCommentsMandatory");
    }
  }
  public SubscribeClickEvent(imgSteppedVariable: Image): void {
    this._ImageSteppedDoseClicked = imgSteppedVariable;
    //Not Required for LHS. To be Re-Visited.
    // imgSteppedVariable.MouseLeftButtonUp  = (s,e) => { this.imgSteppedVariable_MouseLeftButtonUp(s,e); } ;
  }
  bIsSteepedWinOpen: boolean = false;
  //Not Required for LHS. To be Re-Visited.
  /*
public imgSteppedVariable_MouseLeftButtonUp(sender:Object, e:MouseButtonEventArgs): void
    {
        if(!this.bIsSteepedWinOpen)
{
    let oSDDet: MedSteppedDoseDetails = new MedSteppedDoseDetails(this.FormViewerDetails.BasicDetails.MultiDoseDetails, this.PrescriptionItemOID, this.FormViewerDetails.BasicDetails.IdentifyingName);
    oSDDet.Closed  = (s,e) => { this.oSDDet_Closed(s,e); } ;
    this.bIsSteepedWinOpen = true;
    oSDDet.Show();
}
}
*/
  //public delegate void SteppedCloseDelegate();
  public SteppedCloseEvent: Function;
  oSDDet_Closed(sender: Object, e: EventArgs): void {
    this.bIsSteepedWinOpen = false;
    if (this.SteppedCloseEvent != null) this.SteppedCloseEvent();
  }
  public GetConflictConfig(
    GetMedicationConfilictConfigCompletedEvent: Function
  ): void {
    let objService: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    let objReqConfig: IPPMAManagePrescSer.CReqMsgGetMedicationConfilictConfig =
      new IPPMAManagePrescSer.CReqMsgGetMedicationConfilictConfig();
    objReqConfig.IsMainAppConflictsBC = '1';
    objReqConfig.oContextInformation = Common.FillContext();
    objService.GetMedicationConfilictConfigCompleted = (s, e) => {
      GetMedicationConfilictConfigCompletedEvent(s, e);
    };
    objService.GetMedicationConfilictConfigAsync(objReqConfig);
  }
  public GetWarningsForCurrentItem(
    CurrentMedication: ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria>
  ): void {
    let objSer: ManagePrescSer.ManagePrescriptionWSSoapClient =
      new ManagePrescSer.ManagePrescriptionWSSoapClient();
    let objIPPSer: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    let IsFluidItemConflict: boolean = false;
    if (
      !this.IsClinicallyVerifyCommentsMandatory &&
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      this.IsClinicallyVerifyCommentsMandatory =
        !this.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
        this.PrescriptionItemStatus == CConstants.CLINICALLYVERIFIED;
    }
    let isFormNotactive: boolean =
      !String.IsNullOrEmpty(this.PrescriptionItemStatus) &&
      (String.Equals(
        this.PrescriptionItemStatus,
        PrescriptionItemStatusCodes.DISCONTINUED,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          this.PrescriptionItemStatus,
          PrescriptionItemStatusCodes.CANCELLED,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          this.PrescriptionItemStatus,
          PrescriptionItemStatusCodes.COMPLETED,
          StringComparison.InvariantCultureIgnoreCase
        ));
    if (
      this.ActionCode == ActivityTypes.Amend &&
      (String.IsNullOrEmpty(this.OperationMode) ||
        (!String.IsNullOrEmpty(this.OperationMode) &&
          this.IsClinicallyVerifyCommentsMandatory) ||
        (!String.IsNullOrEmpty(this.OperationMode) &&
          !this.OperationMode.Equals('N')) ||
        isFormNotactive)
    ) {
      this.objWarningItem = null;
      let objReqValidation: ManagePrescSer.CReqMsgGetValidationsDetails =
        new ManagePrescSer.CReqMsgGetValidationsDetails();
      objReqValidation.oValidationDetailsBC =
        new ManagePrescSer.ValidationDetails();
      objReqValidation.oValidationDetailsBC.PrescriptionItemOid =
        this.PrescriptionItemOID;
      objReqValidation.oValidationDetailsBC.IsBreak =
        PatientContext.PatientSealBreakExists ? '1' : '0';
      objReqValidation.oContextInformation = Common.FillContext();
      objSer.GetValidationsDetailsCompleted = (s, e) => {
        this.objSer_GetValidationsDetailsCompleted(s, e);
      };
      objSer.GetValidationsDetailsAsync(objReqValidation);
    } else {
      this.objWarningDetail = null;
      let objReqDecSupp: IPPMAManagePrescSer.CReqMsgGetIPPDecisionSupport =
        new IPPMAManagePrescSer.CReqMsgGetIPPDecisionSupport();
      objReqDecSupp.objDecisionSuppCriteriaBC =
        new IPPMAManagePrescSer.DecisionSupportCriteria();
      objReqDecSupp.oContextInformation = Common.FillContext();
      objReqDecSupp.objDecisionSuppCriteriaBC.PatientOID = Convert.ToInt64(
        PatientContext.PatientOID
      );
      if (!PatientContext.IsAgeSexFilledforConflict) {
        if (
          String.IsNullOrEmpty(PatientContext.Sex) ||
          String.IsNullOrEmpty(PatientContext.DOB) ||
          (!String.IsNullOrEmpty(PatientContext.DOB) &&
          DateTime.Equals(Convert.ToDateTime(PatientContext.DOB), DateTime.MinValue))
        ) {
          let returnValue: ScriptObject = ObjectHelper.CreateType<ScriptObject>(
            HtmlPage.Window.Invoke('GetAgeGenderForConflicts'),
            'ScriptObject'
          );
          if (returnValue != null) {
            let nAge: number = 0;
            if (returnValue.GetProperty('SEX') != null) {
              PatientContext.Sex = returnValue.GetProperty('SEX').ToString();
            }
            if (returnValue.GetProperty('DOB') != null) {
              PatientContext.DOB = returnValue.GetProperty('DOB').ToString();
            }
            if (
              returnValue.GetProperty('Age') != null &&
              Number.TryParse(
                returnValue.GetProperty('Age').ToString(),
                (o) => (nAge = o)
              )
            )
              PatientContext.Age = nAge;
            PatientContext.IsAgeSexFilledforConflict = true;
          }
        } else {
          let returnValue: ScriptObject = ObjectHelper.CreateType<ScriptObject>(
            HtmlPage.Window.Invoke('GetAgeGenderForConflicts'),
            'ScriptObject'
          );
          if (returnValue != null && returnValue.GetProperty('DOB') != null) {
            PatientContext.DOB = returnValue.GetProperty('DOB').ToString();
          }
          PatientContext.IsAgeSexFilledforConflict = true;
        }
      }
      objReqDecSupp.objDecisionSuppCriteriaBC.PatientSex = PatientContext.Sex;
      objReqDecSupp.objDecisionSuppCriteriaBC.IsBreak =
        PatientContext.PatientSealBreakExists ? '1' : '0';
      objReqDecSupp.objDecisionSuppCriteriaBC.PatientDOB = PatientContext.DOB;
      objReqDecSupp.objDecisionSuppCriteriaBC.MCVersionNo = AppSessionInfo.AMCV;
      objReqDecSupp.objDecisionSuppCriteriaBC.CACode =
        IPPMAManagePrescSer.CACode.Prescribe;
      objReqDecSupp.objDecisionSuppCriteriaBC.AddedMedication =
        new ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria>();
      if (!IsFluidItemConflict) {
        let dsNewItem: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
          new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
        dsNewItem.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
        {
          if (
            String.Equals(
              this.ItemSubType,
              CConstants.SUBTYPE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            dsNewItem.DrugItem.IdentifyingName = CommonFlags.MCidentifyingName;
          } else
            dsNewItem.DrugItem.IdentifyingName =
              this.FormViewerDetails.BasicDetails.IdentifyingName;
        }
        dsNewItem.DrugItem.IdentifyingOID =
          this.FormViewerDetails.BasicDetails.IdentifyingOID;
        dsNewItem.DrugItem.IdentifyingType =
          this.FormViewerDetails.BasicDetails.IdentifyingType;
        dsNewItem.DrugItem.ItemType = this.ItemMainType;
        dsNewItem.DrugItem.ITMSUBTYP = this.ItemSubType;
        dsNewItem.DrugItem.LorenzoID = this.LorenzoID;
        dsNewItem.DrugItem.MCVersionNo = AppSessionInfo.AMCV;
        dsNewItem.StartDate = CommonBB.GetServerDateTime();
        dsNewItem.EndDate = CommonBB.GetServerDateTime();
        dsNewItem.RowID = Convert.ToString(this.UniqueRowID);
        dsNewItem.PrescriptionType = PatientContext.PrescriptionType;
        if (!this.AllergenCheck || this.IsFluidAllergenCheck) {
          objReqDecSupp.objDecisionSuppCriteriaBC.IsAllergenCheckNeed = true;
          this.AllergenCheck = true;
          this.IsFluidAllergenCheck = false;
        } else {
          objReqDecSupp.objDecisionSuppCriteriaBC.IsAllergenCheckNeed = false;
        }
        let bIsSequence: boolean = false;
        if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          this.formViewerDetails.BasicDetails.InfusionDetails != null &&
          (this.FormViewerDetails.BasicDetails.InfusionDetails
            .IsSequentialPrescribing ||
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder > 0)
        ) {
          bIsSequence = true;
        }
        if (
          this.ParentbaseVM != null &&
          this.ParentbaseVM.InfusionContinousSeq != null &&
          (this.ParentbaseVM.InfusionContinousSeq.IsSequentialPrescribing ||
            bIsSequence) &&
          this.ParentbaseVM.InfusionContinousSeq.PrescriptionItemNumber > 0
        ) {
          dsNewItem.DrugItem.PrescriptionItemNumber =
            this.ParentbaseVM.InfusionContinousSeq.PrescriptionItemNumber;
          dsNewItem.DrugItem.IsMandatoryForOthers = true;
        } else if (
          this.ActionCode == ActivityTypes.Amend ||
          this.ActionCode == ActivityTypes.Reorder
        ) {
          if (
            bIsSequence &&
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber > 0
          ) {
            dsNewItem.DrugItem.PrescriptionItemNumber =
              this.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
            dsNewItem.DrugItem.IsMandatoryForOthers = true;
          }
        }
        if (this.ActionCode == ActivityTypes.Amend) {
          dsNewItem.IsAmend = '1';
        }
        if (
          String.Equals(
            this.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.InvariantCultureIgnoreCase
          ) == false
        ) {
          objReqDecSupp.objDecisionSuppCriteriaBC.AddedMedication.Add(
            dsNewItem
          );
        }
        if (
          String.Equals(
            dsNewItem.DrugItem.ITMSUBTYP,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          if (this.FormViewerDetails != null) {
            if (
              this.FormViewerDetails.MulticomponentDetails != null &&
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo !=
                null
            ) {
              let mcicount: number =
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
                  .Count;
              if (mcicount > 0) {
                for (let ncount: number = 0; ncount < mcicount; ncount++) {
                  let dsNewItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
                    new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
                  dsNewItems.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
                  dsNewItems.DrugItem.IdentifyingOID =
                    this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                      ncount
                    ].IdentifyingOID;
                  dsNewItems.DrugItem.IdentifyingType =
                    this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                      ncount
                    ].IdentifyingType;
                  dsNewItems.DrugItem.LorenzoID =
                    this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                      ncount
                    ].LorenzoID;
                  dsNewItems.DrugItem.IdentifyingName =
                    this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                      ncount
                    ].ComponentName;
                  dsNewItems.DrugItem.PrescribableItemListOID =
                    this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                      ncount
                    ].PrescribableItemListOID;
                  dsNewItems.DrugItem.UniqueMCRowID =
                    this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                      ncount
                    ].UniqueMCRowID;
                  dsNewItems.DrugItem.ITMSUBTYP = this.ItemSubType;
                  if (this.FormViewerDetails.BasicDetails.isAdhocitem) {
                    dsNewItems.DrugItem.IsConflictDisabled = false;
                  } else
                    dsNewItems.DrugItem.IsConflictDisabled =
                      this.IsConflictDisabled;
                  if (
                    this.FormViewerDetails.BasicDetails.Ordersets != null &&
                    !String.IsNullOrEmpty(
                      this.FormViewerDetails.BasicDetails.Ordersets.Value
                    )
                  ) {
                    if (
                      !this.FormViewerDetails.BasicDetails.Ordersets.IsSelected
                    ) {
                      if (
                        this.FormViewerDetails.MulticomponentDetails
                          .oMCItemBasicInfo[ncount].PrescriptionItemOID != 0
                      ) {
                        dsNewItems.OrdersetOID = Convert.ToInt64(
                          this.FormViewerDetails.BasicDetails.Ordersets.Value
                        );
                      }
                    }
                  }
                  dsNewItems.DrugItem.NonCatItemReason =
                    CommonFlags.MCidentifyingName;
                  dsNewItem.DrugItem.ItemType = this.ItemMainType;
                  dsNewItems.DrugItem.MCVersionNo = AppSessionInfo.AMCV;
                  dsNewItems.StartDate = CommonBB.GetServerDateTime();
                  dsNewItems.EndDate = CommonBB.GetServerDateTime();
                  dsNewItems.RowID = Convert.ToString(this.UniqueRowID);
                  dsNewItems.PrescriptionType = PatientContext.PrescriptionType;
                  if (ncount == 0) {
                    if (this.ActionCode == ActivityTypes.Amend) {
                      dsNewItems.IsAmend = '1';
                    }
                  }
                  objReqDecSupp.objDecisionSuppCriteriaBC.AddedMedication.Add(
                    dsNewItems
                  );
                }
              }
            } else {
              if (
                this.FormViewerDetails != null &&
                this.FormViewerDetails.MulticomponentDetails == null
              ) {
                let UniqueID: Random = new Random();
                if (
                  String.Equals(
                    this.ItemSubType,
                    CConstants.SUBTYPE,
                    StringComparison.OrdinalIgnoreCase
                  )
                ) {
                  if (!String.IsNullOrEmpty(this.MCChilditem)) {
                    let sMCitem: string = this.MCChilditem;
                    let sMCitemSerialize: string[] = sMCitem.Split('^');
                    if (
                      sMCitemSerialize != null &&
                      sMCitemSerialize.length > 0
                    ) {
                      let sProblemDetails: StringBuilder = new StringBuilder();
                      let sProblemName: StringBuilder = new StringBuilder();
                      let mcicount: number = sMCitemSerialize.length - 1;
                      for (let i: number = 0; i <= mcicount; i++) {
                        let dsCurrItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
                          new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
                        dsCurrItems.DrugItem =
                          new IPPMAManagePrescSer.DrugBasicData();
                        let stmp: string[] = sMCitemSerialize[i].Split('~');
                        let lnIdentifyingOID: number = 0;
                        Number.TryParse(stmp[0], (o) => (lnIdentifyingOID = o));
                        let dsNewItems1: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
                          new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
                        dsNewItems1.DrugItem =
                          new IPPMAManagePrescSer.DrugBasicData();
                        dsNewItems1.DrugItem.IdentifyingOID = lnIdentifyingOID;
                        dsNewItems1.DrugItem.IdentifyingType = stmp[1];
                        if (stmp.length > 3)
                          dsNewItems1.DrugItem.LorenzoID = stmp[3];
                        dsNewItems1.DrugItem.IdentifyingName = stmp[2];
                        dsNewItems1.DrugItem.UniqueMCRowID = UniqueID.Next();
                        dsNewItems1.DrugItem.ITMSUBTYP = this.ItemSubType;
                        dsNewItems1.DrugItem.NonCatItemReason =
                          CommonFlags.MCidentifyingName;
                        dsNewItems1.DrugItem.ItemType = this.ItemMainType;
                        dsNewItems1.DrugItem.MCVersionNo = AppSessionInfo.AMCV;
                        dsNewItems1.StartDate = CommonBB.GetServerDateTime();
                        dsNewItems1.EndDate = CommonBB.GetServerDateTime();
                        dsNewItems1.RowID = Convert.ToString(this.UniqueRowID);
                        dsNewItems1.PrescriptionType =
                          PatientContext.PrescriptionType;
                        objReqDecSupp.objDecisionSuppCriteriaBC.AddedMedication.Add(
                          dsNewItems1
                        );
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        PatientContext.IsINFUSIONON &&
        this.FormViewerDetails.BasicDetails.Route != null &&
        this.FormViewerDetails.BasicDetails.Route.Tag != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.Route.Tag.ToString()
        ) &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
          '1'
        ) == 0 &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID
        ) &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .FluidIdentifyingOID > 0
      ) {
        let dsNewItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
          new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
        dsNewItems.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
        dsNewItems.DrugItem.IdentifyingOID =
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
        dsNewItems.DrugItem.IdentifyingType =
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType;
        dsNewItems.DrugItem.LorenzoID =
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID;
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .FluidSelectvalue != null
        ) {
          dsNewItems.DrugItem.IdentifyingName =
            this.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue.DisplayText;
        }
        dsNewItems.DrugItem.PrescribableItemListOID =
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidPrescribableItemListOID;
        dsNewItems.DrugItem.ITMSUBTYP = 'INFUSION';
        dsNewItems.DrugItem.IsMandatoryForOthers = true;
        if (this.ActionCode == ActivityTypes.Amend) {
          dsNewItems.IsAmend = '1';
        }
        objReqDecSupp.objDecisionSuppCriteriaBC.AddedMedication.Add(dsNewItems);
        objReqDecSupp.objDecisionSuppCriteriaBC.AddedMedication[0].DrugItem.ITMSUBTYP =
          'INFUSION';
      }
      objReqDecSupp.objDecisionSuppCriteriaBC.CurrentMedication =
        CurrentMedication;
      objReqDecSupp.objDecisionSuppCriteriaBC.DrugExpiryDuration =
        PatientContext.EncounterOid;
      objReqDecSupp.oContextInformation = Common.FillContext();
      objIPPSer.GetIPPDecisionSupportCompleted = (s, e) => {
        this.objSer_GetIPPDecisionSupportCompleted(s, e);
      };
      objIPPSer.GetIPPDecisionSupportAsync(objReqDecSupp);
    }
  }
  public GetConflictAmendSealDetails(
    oSealingDetails: ObservableCollection<ManagePrescSer.SealingDetails>,
    HealthIssueCode: string,
    HealthIssueType: string
  ): ManagePrescSer.SealingDetails {
    let objConflictSealDetails: ManagePrescSer.SealingDetails = null;
    let oMedconflictSealData: IEnumerable<ManagePrescSer.SealingDetails>;
    if (oSealingDetails != null && oSealingDetails.Count > 0) {
      oMedconflictSealData = oSealingDetails
        .Where(
          (HCodeType) =>
            HCodeType != null &&
            String.Compare(HCodeType.IdentifyingCode, HealthIssueCode) == 0 &&
            String.Compare(HCodeType.IdentifyingType, HealthIssueType) == 0
        )
        .Select((HCodeType) => HCodeType);
      if (oMedconflictSealData != null && oMedconflictSealData.Count() > 0) {
        objConflictSealDetails = new ManagePrescSer.SealingDetails();
        oMedconflictSealData.forEach((obj) => {
          objConflictSealDetails = obj;
        });
      }
    }
    return objConflictSealDetails;
  }
  objSer_GetValidationsDetailsCompleted(
    sender: Object,
    e: ManagePrescSer.GetValidationsDetailsCompletedEventArgs
  ): void {
    let objResponse: ManagePrescSer.CResMsgGetValidationsDetails = e.Result;
    if (
      objResponse != null &&
      objResponse.oWarningDetails != null &&
      objResponse.oWarningDetails.Count > 0
    ) {
      objResponse.oWarningDetails.forEach((oWarningDetails) => {
        let objConflictSealDetails: ManagePrescSer.SealingDetails =
          this.GetConflictAmendSealDetails(
            objResponse.oSealingDetails,
            oWarningDetails.Code,
            oWarningDetails.ConflictType
          );
        if (
          objConflictSealDetails != null &&
          !String.IsNullOrEmpty(objConflictSealDetails.SealType) &&
          String.Compare(objConflictSealDetails.SealType, 'CC_SEAL') == 0
        ) {
          oWarningDetails.IsSeal = '1';
          oWarningDetails.SealType = objConflictSealDetails.SealType;
          this.FormViewerDetails.BasicDetails.IsConflictExistSealInfo = true;
        } else {
          oWarningDetails.IsSeal = '0';
          oWarningDetails.SealType = String.Empty;
        }
        if (
          objConflictSealDetails != null &&
          !String.IsNullOrEmpty(objConflictSealDetails.SealType) &&
          (String.Compare(objConflictSealDetails.SealType, 'CC_SEAL') == 0 ||
            String.Compare(objConflictSealDetails.SealType, 'CC_SEALLOCK') == 0)
        ) {
          this.FormViewerDetails.BasicDetails.IsConflictExistSealLock = true;
        }
        if (this.objWarningDetails == null)
          this.objWarningDetails =
            new ObservableCollection<ManagePrescSer.WarningDetails>();
        this.objWarningDetails.Add(oWarningDetails);
      });
      this.ShowDecisionSupport();
    } else {
      if (objResponse != null && objResponse.oWarningDetails == null) {
        if (this.WarningsCompletedEvent != null)
          this.WarningsCompletedEvent(true);
        if (this.WarningsGenerationCompleted != null)
          this.WarningsGenerationCompleted();
      }
    }
  }
  objWarningDetails: ObservableCollection<ManagePrescSer.WarningDetails> = null;
  objWarningItem: IPPMAManagePrescSer.WarningItems = null;
  objWarningDetail: ObservableCollection<IPPMAManagePrescSer.WarningDetails> =
    null;
  objSer_GetIPPDecisionSupportCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetIPPDecisionSupportCompletedEventArgs
  ): void {
    let DomainCodes: string = String.Empty;
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      let IsFluidValuesEmpty: boolean = false;
      if (
        this.FormViewerDetails.BasicDetails.lstAmendedFlds != null &&
        this.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
          'FluidSelectvalue'
        )
      ) {
        if (
          this.FormViewerDetails.BasicDetails.lstAmendedFlds != null &&
          this.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 26
        ) {
          IsFluidValuesEmpty = false;
        } else {
          IsFluidValuesEmpty = true;
        }
      }
      if (
        !IsFluidValuesEmpty &&
        !this.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD
      ) {
        let blIsModificationReasonExists: boolean =
          this.FormViewerDetails.BasicDetails.IsModificationReasonExists;
        this.FormViewerDetails.BasicDetails.IsenableRSNFORMOD = false;
        this.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD = false;
        if (blIsModificationReasonExists) {
          this.FormViewerDetails.BasicDetails.IsModificationReasonExists = true;
        }
        this.FormViewerDetails.BasicDetails.IsenableModificationcomments =
          false;
        this.FormViewerDetails.BasicDetails.lstAmendedFlds.Clear();
      }
      if (
        this.FormViewerDetails.BasicDetails.Route != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.Route.DisplayText
        ) &&
        this.FormViewerDetails.BasicDetails.Route.DisplayText.Contains(
          CConstants.MULTIROUTEDILIMITER
        ) &&
        !String.IsNullOrEmpty(this.ActionCode.ToString()) &&
        this.ActionCode == ActivityTypes.Reorder &&
        PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration
      ) {
        this.FormViewerDetails.BasicDetails.Route = null;
        if (this.FormViewerDetails.BasicDetails != null) {
          this.FormViewerDetails.BasicDetails.GetFormViewControls(
            '1',
            (s, e) => {
              this.objServiceProxy_GetFormViewControlsCompleted(s, e);
            },
            'FL'
          );
        }
        this.FormViewerDetails.BasicDetails.InfusionType = null;
        if (this.FormViewerDetails.BasicDetails.InfusionDetails != null) {
          let VolumeUOM: ObservableCollection<CListItem> =
            this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList;
          let InfRateDenominator: ObservableCollection<CListItem> =
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDenominatorUOM;
          let InfPeriod: ObservableCollection<CListItem> =
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUOM;
          let ConcentrationUpperrUOM: ObservableCollection<CListItem> =
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .UpperConcentrationUOMlist;
          this.FormViewerDetails.BasicDetails.InfusionDetails = new InfusionVM(
            this.FormViewerDetails.BasicDetails
          );
          this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList =
            new ObservableCollection<CListItem>();
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM =
            new ObservableCollection<CListItem>();
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUOM =
            new ObservableCollection<CListItem>();
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOMlist =
            new ObservableCollection<CListItem>();
          this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList =
            VolumeUOM;
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDenominatorUOM =
            InfRateDenominator;
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUOM =
            InfPeriod;
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOMlist =
            ConcentrationUpperrUOM;
          VolumeUOM = null;
          InfRateDenominator = null;
          InfPeriod = null;
          ConcentrationUpperrUOM = null;
        }
      }
    }
    let objResponse: IPPMAManagePrescSer.CResMsgGetIPPDecisionSupport =
      e.Result;
    if (objResponse != null && objResponse.objDrugWarnings != null) {
      if (
        objResponse.objDrugWarnings.SealingDetails != null &&
        objResponse.objDrugWarnings.SealingDetails.Count > 0
      ) {
        for(let i=0; i< objResponse.objDrugWarnings.SealingDetails.Count;i++){
          let oDetails : IPPMAManagePrescSer.SealingDetails = objResponse.objDrugWarnings.SealingDetails[i];        
          if (String.Equals(oDetails.SealType, 'CC_SEAL')) {
            this.FormViewerDetails.BasicDetails.IsConflictExistSealInfo = true;
            break;
          }
          if (
            String.Equals(oDetails.SealType, 'CC_SEAL') ||
            String.Equals(oDetails.SealType, 'CC_SEALLOCK')
          ) {
            this.FormViewerDetails.BasicDetails.IsConflictExistSealLock = true;
            break;
          }
        }
      } else {
        this.FormViewerDetails.BasicDetails.IsConflictExistSealInfo = false;
        this.FormViewerDetails.BasicDetails.IsConflictExistSealLock = false;
      }
      if (WarningConceptCode.ConceptData == null) {
        DomainCodes +=
          ',' +
          ValueDomain.BHVTY +
          ',' +
          ValueDomain.Contyp +
          ',' +
          ValueDomain.DrugAllergy +
          ',' +
          ValueDomain.DrugContra;
        DomainCodes +=
          ',' +
          ValueDomain.DrugDuplication +
          ',' +
          ValueDomain.Severity +
          ',' +
          ValueDomain.SUBINT;
        ProcessRTE.GetValuesByDomainCodes(DomainCodes, (s, e) => {
          this.OnRTEResultForDomainsCodes(s);
        });
      }
      this.objWarningItem = objResponse.objDrugWarnings;
      this.ShowDecisionSupport();
    }
    this.GetMCConflictImageStatus();
    this.GetConflictImageStatus();
    if (
      this.ParentbaseVM.UnHoldSeqInprogress &&
      this.ParentbaseVM.HoldSeqItemIndex != -1
    ) {
      this.Conflict_UpdateUnHoldSequential();
    }
    let medotherdisplaypipe = new DisplayOtherInformationLineItemPipe1();
    this.MedOtherDisplay1 = medotherdisplaypipe.transform(this, '', 0,'');
    let medlinedisplaypipe = new DisplayPrescriptionLineItemPipe1();
    this.MedLineDisplay = medlinedisplaypipe.transform(this, '', 0, '');
    let infoIconKey = new InfoIconPipe();
    this.InfoIconKey = infoIconKey.transform(this, '', 0);
    this.mode='update';
  }
  objServiceProxy_GetFormViewControlsCompleted(
    sender: Object,
    e: ManagePrescSer.GetFormViewControlsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000031;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM,Method:GetFormViewControlsCompleted()';
    if (e.Error == null && e.Result != null) {
      try {
        if (this != null && this.FormViewerDetails != null) {
          this.FormViewerDetails.FillFormViewerDetails(e.Result, true);
          if (
            e.Result.oFormViewControls.IsFLorTCorRF.Equals('FL') ||
            e.Result.oFormViewControls.IsFLorTCorRF.Equals('RF')
          ) {
            this.FormViewerDetails.BasicDetails.IsWardStock =
              e.Result.oFormViewControls.IsWardStock;
            if (this.RouteorFormchangePresEvent != null)
              this.RouteorFormchangePresEvent();
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private Conflict_UpdateUnHoldSequential(): void {
    if (
      this.ParentbaseVM.UnHoldSeqInprogress &&
      this.ParentbaseVM.HoldSeqItemLists != null &&
      this.ParentbaseVM.HoldSeqItemIndex != this.ParentbaseVM.HoldSeqItemsCount
    ) {
      if (
        this.ParentbaseVM.PreviousSeqPrescItemOID > 0 &&
        this.ParentbaseVM.HoldSeqItemLists != null
      ) {
        this.ParentbaseVM.GetNextHoldSeqitem =
          new ObservableCollection<PrescriptionItemVM>();
        let PreviousSeqItem: PrescriptionItemVM =
          this.ParentbaseVM.HoldSeqItemLists.Where(
            (c) =>
              c.PrescriptionItemOID == this.ParentbaseVM.PreviousSeqPrescItemOID
          )
            .Select((s) => s)
            .FirstOrDefault();
        if (PreviousSeqItem != null)
          this.ParentbaseVM.HoldSeqItemLists.Remove(PreviousSeqItem);
        this.ParentbaseVM.GetNextHoldSeqitem.Add(
          this.ParentbaseVM.HoldSeqItemLists.Select((s) => s).FirstOrDefault()
        );
        let Index: number = -1;
        this.ParentbaseVM.MedsResolve.ForEach((ReInsert) => {
          if (this.ParentbaseVM.GetNextHoldSeqitem.Contains(ReInsert)) {
            Index = this.ParentbaseVM.MedsResolve.IndexOf(ReInsert);
            ReInsert.ActionCode = ActivityTypes.UnHold;
            ReInsert.ReasonForHold = null;
            ReInsert.IsHold = false;
            ReInsert.PrescriptionItemStatus = String.Empty;
            ReInsert.IsFormViewerDisable = false;
            ReInsert.AllergenCheck = false;
            ReInsert.IsUnHoldAction = true;
            if (ReInsert.PrescriptionItemOID > 0) {
              ReInsert.OperationMode = 'U';
              ReInsert.IsUnholddrug = true;
              this.ParentbaseVM.PreviousSeqPrescItemOID =
                ReInsert.PrescriptionItemOID;
            }
          }
        });
        if (Index != -1) {
          this.ParentbaseVM.UnHoldSeqInprogress = true;
          this.ParentbaseVM.HoldSeqItemIndex += 1;
          this.ParentbaseVM.UpdateConflicts(Index, 'UNHOLD');
        }
      }
    } else {
      this.ParentbaseVM.UnHoldSeqInprogress = false;
      this.ParentbaseVM.HoldSeqItemIndex = 0;
      Busyindicator.SetStatusIdle('UNHOLDSEQINPROGESS');
    }
  }
  private Conflict_UpdWarning(): void {
    let ClerkConflict: boolean = true;
    if (
      ProfileData.MedConflictConfig != null &&
      ProfileData.MedConflictConfig.DisplayConflicts == '0' &&
      PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      ClerkConflict = false;
    }
    if (ClerkConflict) {
      this.UpdateWarningSubType();
    }
    if (this.WarningsCompletedEvent != null) this.WarningsCompletedEvent(true);
    if (this.WarningsGenerationCompleted != null)
      this.WarningsGenerationCompleted();
  }
  private ShowDecisionSupport(): void {
    if (
      WarningConceptCode.ConceptData != null &&
      WarningConceptCode.ConceptData.Count > 0
    ) {
      if (this.FormViewerDetails.ConflictsReason == null) {
        ProcessRTE.GetValuesByDomainCode(
          ValueDomain.ConflictsReason,
          (s, e) => {
            this.OnRTEResult(s);
          }
        );
      } else {
        this.Conflict_UpdWarning();
        if (this.RefreshConflictICONEvent != null) {
          this.RefreshConflictICONEvent();
        }
      }
    }
  }
  //public delegate void WarningsGenerated();
  public WarningsGenerationCompleted: Function;
  //public delegate void WarningsCompleted(bool IsGenerated);
  public WarningsCompletedEvent: Function;
  private UpdateWarningSubType(): void {
    let Istypeindrug: boolean = false;
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.IdentifyingType
      ) &&
      (String.Equals(
        this.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.NONCATALOGUEITEM,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          this.FormViewerDetails.BasicDetails.IdentifyingType,
          CConstants.Precatalog,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      Istypeindrug = true;
    }
    if (
      this.objWarningDetails != null &&
      this.objWarningDetails.Count > 0 &&
      this.objWarningItem == null
    ) {
      this.oAddGrid = new ObservableCollection<ConflictsVM>();
      if (
        ProfileData.MedConflictConfig != null &&
        ProfileData.MedConflictConfig.oMedicationConflictConfigData != null
      ) {
        ProfileData.MedConflictConfig.oMedicationConflictConfigData.forEach(
          (objConfig) => {
            if (
              WarningConceptCode.ConceptData != null &&
              !String.IsNullOrEmpty(objConfig.ConflictType)
            ) {
              let sRefConflictType: string = String.Empty;
              if (!String.IsNullOrEmpty(objConfig.ConflictType)) {
                sRefConflictType = Common.GetText(
                  objConfig.ConflictType,
                  WarningConceptCode.ConceptData
                );
                if (
                  String.Equals(
                    objConfig.ConflictType,
                    CConstants.DRUGDUPLICATION
                  )
                ) {
                  objConfig.ConflictType = CConstants.sDuplication;
                } else if (
                  String.Equals(objConfig.ConflictType, CConstants.DRUGCONTRA)
                ) {
                  objConfig.ConflictType = CConstants.sContraIndication;
                } else if (
                  String.Equals(objConfig.ConflictType, CConstants.DRUGINTRACT)
                ) {
                  objConfig.ConflictType = CConstants.sInteract;
                } else if (!String.IsNullOrEmpty(sRefConflictType)) {
                  objConfig.ConflictType = sRefConflictType;
                }
              }
              if (!String.IsNullOrEmpty(objConfig.ConflictSubType)) {
                let sRefConflictSubType: string = String.Empty;
                sRefConflictSubType = Common.GetText(
                  objConfig.ConflictSubType,
                  WarningConceptCode.ConceptData
                );
                if (!String.IsNullOrEmpty(sRefConflictSubType)) {
                  objConfig.ConflictSubType = sRefConflictSubType;
                }
              }
            }
          }
        );
        let lstMedCofCofigData: List<IPPMAManagePrescSer.MedConflictConfigData> =
          new List<IPPMAManagePrescSer.MedConflictConfigData>(
            ProfileData.MedConflictConfig.oMedicationConflictConfigData
          );
        let objMedConflictConfigDataTemp: IPPMAManagePrescSer.MedConflictConfigData =
          null;
        let objMedConflictConfigData: IPPMAManagePrescSer.MedConflictConfigData =
          null;
        this.objWarningDetails.forEach((objWarnDet) => {
          if (!String.IsNullOrEmpty(objWarnDet.WarningType)) {
            let strRefWarnType: string = String.Empty;
            strRefWarnType = Common.GetText(
              objWarnDet.WarningType,
              WarningConceptCode.ConceptData
            );
            if (String.Equals(objWarnDet.WarningType, CConstants.DRUGCONTRA))
              objWarnDet.WarningType = CConstants.sContraIndication;
            else if (
              String.Equals(objWarnDet.WarningType, CConstants.DRUGINTRACT)
            )
              objWarnDet.WarningType = CConstants.sInteract;
            else if (
              String.Equals(objWarnDet.WarningType, CConstants.DRUGDUPLICATION)
            )
              objWarnDet.WarningType = CConstants.sDuplication;
            else if (!String.IsNullOrEmpty(strRefWarnType))
              objWarnDet.WarningType = strRefWarnType;
          }
          if (!String.IsNullOrEmpty(objWarnDet.WarningSubType)) {
            let sRefWarningSubType: string = String.Empty;
            sRefWarningSubType = Common.GetText(
              objWarnDet.WarningSubType,
              WarningConceptCode.ConceptData
            );
            if (!String.IsNullOrEmpty(sRefWarningSubType)) {
              objWarnDet.WarningSubType = sRefWarningSubType;
            }
          }
          if (
            String.Equals(objWarnDet.WarningType, 'Warning') &&
            !String.IsNullOrEmpty(objWarnDet.WarningSubType)
          ) {
            let sWarnSubType: string[] = objWarnDet.WarningSubType.Split(',');
            let sBehaviorType: string = String.Empty;
            let sQualifiedWarnSubTypes: string = String.Empty;
            for (let j: number = 0; j < sWarnSubType.length; j++) {
              objMedConflictConfigData = null;
              let oDataFound =
                ProfileData.MedConflictConfig.oMedicationConflictConfigData
                  .Where(
                    (oConfigData) =>
                      String.Equals(
                        oConfigData.ConflictType,
                        objWarnDet.WarningType,
                        StringComparison.InvariantCultureIgnoreCase
                      ) &&
                      String.Equals(
                        oConfigData.ConflictSubType,
                        sWarnSubType[j],
                        StringComparison.InvariantCultureIgnoreCase
                      )
                  )
                  .Select((oConfigData) => oConfigData);
              if (oDataFound != null && oDataFound.Count() > 0) {
                objMedConflictConfigDataTemp = oDataFound.First();
                objMedConflictConfigData =
                  new IPPMAManagePrescSer.MedConflictConfigData();
                objMedConflictConfigData.BehaviourType =
                  objMedConflictConfigDataTemp.BehaviourType;
                objMedConflictConfigData.ConflictSubType =
                  objMedConflictConfigDataTemp.ConflictSubType;
                objMedConflictConfigData.ConflictType =
                  objMedConflictConfigDataTemp.ConflictType;
                objMedConflictConfigData.DisplaySeqNumber =
                  objMedConflictConfigDataTemp.DisplaySeqNumber;
                objMedConflictConfigData.EPRFilterList =
                  objMedConflictConfigDataTemp.EPRFilterList;
                objMedConflictConfigData.LastModifiedAt =
                  objMedConflictConfigDataTemp.LastModifiedAt;
                objMedConflictConfigData.ModifiedAt =
                  objMedConflictConfigDataTemp.ModifiedAt;
                objMedConflictConfigData.OID = objMedConflictConfigDataTemp.OID;
                objMedConflictConfigData.OperationMode =
                  objMedConflictConfigDataTemp.OperationMode;
                objMedConflictConfigData.SealImage =
                  objMedConflictConfigDataTemp.SealImage;
                objMedConflictConfigData.SealImageList =
                  objMedConflictConfigDataTemp.SealImageList;
                objMedConflictConfigData.SealRecordList =
                  objMedConflictConfigDataTemp.SealRecordList;
                objMedConflictConfigData.SealType =
                  objMedConflictConfigDataTemp.SealType;
                objMedConflictConfigData.TypeColorCode =
                  objMedConflictConfigDataTemp.TypeColorCode;
                if (
                  objMedConflictConfigData != null &&
                  !String.IsNullOrEmpty(objMedConflictConfigData.BehaviourType)
                ) {
                  sBehaviorType += String.IsNullOrEmpty(sBehaviorType)
                    ? objMedConflictConfigData.BehaviourType
                    : ',' + objMedConflictConfigData.BehaviourType;
                }
              }
            }
            if (sBehaviorType.Contains(CConstants.sBehaviourType1)) {
              sBehaviorType = CConstants.sBehaviourType1;
            } else if (sBehaviorType.Contains(CConstants.sBehaviourType2)) {
              sBehaviorType = CConstants.sBehaviourType2;
            } else if (sBehaviorType.Contains(CConstants.sBehaviourType3)) {
              sBehaviorType = CConstants.sBehaviourType3;
            } else if (sBehaviorType.Contains(CConstants.sBehaviourType4)) {
              sBehaviorType = CConstants.sBehaviourType4;
            } else if (sBehaviorType.Contains(CConstants.sBehaviourType5)) {
              sBehaviorType = CConstants.sBehaviourType5;
            }
            if (
              objMedConflictConfigData != null &&
              !String.IsNullOrEmpty(sBehaviorType)
            ) {
              objMedConflictConfigData.BehaviourType = sBehaviorType;
            }
            this.ValidateBindDataToVM(
              objMedConflictConfigData,
              objWarnDet,
              this.FormViewerDetails.BasicDetails.IdentifyingName,
              this.FormViewerDetails.BasicDetails.IdentifyingType,
              this.FormViewerDetails.BasicDetails.IdentifyingOID,
              true
            );
          } else {
            let oDataFound =
              ProfileData.MedConflictConfig.oMedicationConflictConfigData
                .Where(
                  (oConfigData) =>
                    String.Equals(
                      oConfigData.ConflictType,
                      objWarnDet.WarningType,
                      StringComparison.InvariantCultureIgnoreCase
                    ) &&
                    String.Equals(
                      oConfigData.ConflictSubType,
                      objWarnDet.WarningSubType,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                )
                .Select((oConfigData) => oConfigData);
            if (oDataFound != null && oDataFound.Count() > 0) {
              let oDataFoundItem = oDataFound.First();
              this.ValidateBindDataToVM(
                oDataFoundItem,
                objWarnDet,
                this.FormViewerDetails.BasicDetails.IdentifyingName,
                this.FormViewerDetails.BasicDetails.IdentifyingType,
                this.FormViewerDetails.BasicDetails.IdentifyingOID,
                true
              );
            }
          }
        });
        let oGridAdd: ObservableCollection<ConflictsVM> =
          new ObservableCollection<ConflictsVM>(
            this.oAddGrid
              .OrderBy((AddGrid) => AddGrid.WarningBehaviourType)
              .ThenBy((AddGrid) => AddGrid.DisplaySeqNumber)
          );
        if (!Istypeindrug) {
          this.FormViewerDetails.ConflictDetails = oGridAdd;
        }
        if (
          this.FormViewerDetails.ConflictDetails != null &&
          this.FormViewerDetails.ConflictDetails.Count > 0
        ) {
          if (this.HIWarningBehaviourType != String.MinValue) {
            switch (this.HIWarningBehaviourType) {
              case 'R':
                this.TrafficIcon = ConflictIcons.Red;
                break;
              case 'A':
                this.TrafficIcon = ConflictIcons.Amber;
                break;
              case 'Q':
                this.TrafficIcon = ConflictIcons.Question;
                break;
              default:
                this.TrafficIcon = ConflictIcons.MandatoryIndicator;
                break;
            }
          } else {
            this.TrafficIcon = ConflictIcons.MandatoryIndicator;
          }
        }
      }
    } else if (this.objWarningItem != null) {
      let strDrgName: string = String.Empty;
      let strDrgType: string = String.Empty;
      let lnDrgOID: number = 0;
      if (this.objWarningItem.DrugItem != null) {
        strDrgName = this.objWarningItem.DrugItem.IdentifyingName;
        strDrgType = this.objWarningItem.DrugItem.IdentifyingType;
        lnDrgOID = this.objWarningItem.DrugItem.IdentifyingOID;
      }
      this.oAddGrid = new ObservableCollection<ConflictsVM>();
      if (
        this.objWarningItem.DrugInteraction != null &&
        this.objWarningItem.DrugInteraction.Count > 0
      )
        this.ShowWarnings(
          this.objWarningItem.DrugInteraction,
          strDrgName,
          strDrgType,
          lnDrgOID
        );
      if (
        this.objWarningItem.DrugDoubling != null &&
        this.objWarningItem.DrugDoubling.Count > 0
      )
        this.ShowWarnings(
          this.objWarningItem.DrugDoubling,
          strDrgName,
          strDrgType,
          lnDrgOID
        );
      if (
        this.objWarningItem.DrugAllergy != null &&
        this.objWarningItem.DrugAllergy.Count > 0
      )
        this.ShowWarnings(
          this.objWarningItem.DrugAllergy,
          strDrgName,
          strDrgType,
          lnDrgOID
        );
      if (
        this.objWarningItem.DrugContraIndication != null &&
        this.objWarningItem.DrugContraIndication.Count > 0
      )
        this.ShowWarnings(
          this.objWarningItem.DrugContraIndication,
          strDrgName,
          strDrgType,
          lnDrgOID
        );
      if (
        this.objWarningItem.DrugCrossReaction != null &&
        this.objWarningItem.DrugCrossReaction.Count > 0
      )
        this.ShowWarnings(
          this.objWarningItem.DrugCrossReaction,
          strDrgName,
          strDrgType,
          lnDrgOID
        );
      if (
        this.objWarningItem.DrugAllergenNotIncluded != null &&
        this.objWarningItem.DrugAllergenNotIncluded.Count > 0
      )
        this.ShowWarnings(
          this.objWarningItem.DrugAllergenNotIncluded,
          strDrgName,
          strDrgType,
          lnDrgOID
        );
      if (this.ActionCode == ActivityTypes.Amend) {
        let isDiscon: boolean = CommonFlags.bDiscontinueCancelClicked;
        let eIndex: number = -1;
        if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.ConflictDetails != null &&
          this.FormViewerDetails.ConflictDetails.Count > 0
        ) {
          for (
            let i: number = 0;
            i < this.FormViewerDetails.ConflictDetails.Count;
            i++
          ) {
            if (
              this.FormViewerDetails.ConflictDetails[i] != null &&
              this.FormViewerDetails.ConflictDetails[i].WarningType != null
            ) {
              let sWarningType: string = String.Empty;
              if (
                this.FormViewerDetails.ConflictDetails[i].WarningType.Contains(
                  '-'
                ) &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.ConflictDetails[i].WarningType.Split(
                    '-'
                  )[0]
                )
              ) {
                sWarningType =
                  this.FormViewerDetails.ConflictDetails[i].WarningType.Split(
                    '-'
                  )[0].Trim();
              } else {
                sWarningType =
                  this.FormViewerDetails.ConflictDetails[i].WarningType.Trim();
              }
              if (!isDiscon) {
                if (
                  sWarningType != CConstants.sContraIndication &&
                  sWarningType != CConstants.sAllergy &&
                  !this.oAddGrid.Contains(
                    this.FormViewerDetails.ConflictDetails[i]
                  )
                ) {
                  if (
                    this.FormViewerDetails.ConflictDetails[i]
                      .PrescriberReason == null ||
                    String.IsNullOrEmpty(
                      this.FormViewerDetails.ConflictDetails[i].PrescriberReason
                        .Value
                    ) ||
                    String.IsNullOrEmpty(
                      this.FormViewerDetails.ConflictDetails[i].PrescriberReason
                        .DisplayText
                    )
                  ) {
                    this.FormViewerDetails.ConflictDetails[
                      i
                    ].EnableAcknowledgementDetails = true;
                    this.FormViewerDetails.ConflictDetails[i].PrescriberReason =
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: 'Select reason',
                        Value: 'Select reason',
                      });
                  } else {
                    this.FormViewerDetails.ConflictDetails[
                      i
                    ].EnableAcknowledgementDetails = true;
                  }
                  if (
                    this.FormViewerDetails.ConflictDetails[i]
                      .PrescriberReasonCombo == null &&
                    this.FormViewerDetails.ConflictsReason != null
                  ) {
                    this.FormViewerDetails.ConflictDetails[
                      i
                    ].PrescriberReasonCombo =
                      this.FormViewerDetails.ConflictsReason;
                  }
                  this.oAddGrid.Add(this.FormViewerDetails.ConflictDetails[i]);
                }
              } else {
                eIndex = this.oAddGrid.IndexOf(
                  this.oAddGrid
                    .Where(
                      (e) =>
                        e.UniqueMCRowId ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .UniqueMCRowId &&
                        e.MCChildIDOID ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .MCChildIDOID &&
                        e.MCChildIDType ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .MCChildIDType &&
                        e.WarningMessage ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .WarningMessage &&
                        e.ConflictMessage ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .ConflictMessage &&
                        e.MCChildIDName ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .MCChildIDName &&
                        e.WarningOID ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .WarningOID &&
                        e.WarningBehaviourType ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .WarningBehaviourType &&
                        e.WarningConfType ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .WarningConfType &&
                        e.WarningSubType ==
                          this.FormViewerDetails.ConflictDetails[i]
                            .WarningSubType &&
                        e.WarningType ==
                          this.FormViewerDetails.ConflictDetails[i].WarningType
                    )
                    .FirstOrDefault()
                );
                if (eIndex != -1) {
                  this.oAddGrid.RemoveAt(eIndex);
                }
                this.oAddGrid.Add(this.FormViewerDetails.ConflictDetails[i]);
              }
            }
          }
          this.FormViewerDetails.ConflictDetails = null;
        }
      }
      if (this.oAddGrid != null) {
        let oGridAdd: ObservableCollection<ConflictsVM> =
          new ObservableCollection<ConflictsVM>(
            this.oAddGrid
              .OrderBy((AddGrid) => AddGrid.WarningBehaviourType)
              .ThenBy((AddGrid) => AddGrid.DisplaySeqNumber)
          );
        if (
          this.FormViewerDetails.ConflictDetails == null ||
          this.FormViewerDetails.ConflictDetails.Count == 0
        ) {
          if (!Istypeindrug) {
            if (
              this.formViewerDetails != null &&
              this.formViewerDetails.MulticomponentDetails != null
            ) {
              if (
                !this.IsConflictDisabled ||
                this.FormViewerDetails.BasicDetails.isAdhocitem
              ) {
                this.FormViewerDetails.ConflictDetails = oGridAdd;
              } else if (this.IsConflictDisabled) {
                this.FormViewerDetails.ConflictDetails = oGridAdd;
              } else {
                this.FormViewerDetails.ConflictDetails =
                  new ObservableCollection<ConflictsVM>();
              }
            } else {
              this.FormViewerDetails.ConflictDetails = oGridAdd;
            }
          }
        } else {
          let oGridCount: number = oGridAdd.Count;
          let cCount: number = this.FormViewerDetails.ConflictDetails.Count;
          for (let nCnt: number = 0; nCnt < cCount; nCnt++) {
            let oMedconflictData = oGridAdd
              .Where(
                (ConflictData) =>
                  ConflictData.UniqueMCRowId ==
                    this.FormViewerDetails.ConflictDetails[nCnt]
                      .UniqueMCRowId &&
                  ConflictData.MCChildIDOID ==
                    this.FormViewerDetails.ConflictDetails[nCnt].MCChildIDOID &&
                  ConflictData.MCChildIDType ==
                    this.FormViewerDetails.ConflictDetails[nCnt]
                      .MCChildIDType &&
                  ConflictData.WarningMessage ==
                    this.FormViewerDetails.ConflictDetails[nCnt]
                      .WarningMessage &&
                  ConflictData.ConflictMessage ==
                    this.FormViewerDetails.ConflictDetails[nCnt]
                      .ConflictMessage &&
                  ConflictData.MCChildIDName ==
                    this.FormViewerDetails.ConflictDetails[nCnt]
                      .MCChildIDName &&
                  ConflictData.WarningOID ==
                    this.FormViewerDetails.ConflictDetails[nCnt].WarningOID &&
                  ConflictData.WarningBehaviourType ==
                    this.FormViewerDetails.ConflictDetails[nCnt]
                      .WarningBehaviourType &&
                  ConflictData.WarningConfType ==
                    this.FormViewerDetails.ConflictDetails[nCnt]
                      .WarningConfType &&
                  ConflictData.WarningSubType ==
                    this.FormViewerDetails.ConflictDetails[nCnt]
                      .WarningSubType &&
                  ConflictData.WarningType ==
                    this.FormViewerDetails.ConflictDetails[nCnt].WarningType
              )
              .Select((ConflictData) => ConflictData)
              .FirstOrDefault();
            if (oMedconflictData != null) {
              if (
                this.FormViewerDetails.ConflictDetails[nCnt].PrescriberReason !=
                null
              ) {
                oMedconflictData.PrescriberReason = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: Convert.ToString(
                      this.FormViewerDetails.ConflictDetails[nCnt]
                        .PrescriberReason.DisplayText
                    ),
                    Value: Convert.ToString(
                      this.FormViewerDetails.ConflictDetails[nCnt]
                        .PrescriberReason.Value
                    ),
                  }
                );
              }
              if (
                this.FormViewerDetails.ConflictDetails[nCnt]
                  .ClinicalVerfierReason != null
              ) {
                oMedconflictData.ClinicalVerfierReason =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: Convert.ToString(
                      this.FormViewerDetails.ConflictDetails[nCnt]
                        .ClinicalVerfierReason.DisplayText
                    ),
                    Value: Convert.ToString(
                      this.FormViewerDetails.ConflictDetails[nCnt]
                        .ClinicalVerfierReason.Value
                    ),
                  });
              }
              if (
                this.FormViewerDetails.ConflictDetails[nCnt].AuthoriserReason !=
                null
              ) {
                oMedconflictData.AuthoriserReason = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: Convert.ToString(
                      this.FormViewerDetails.ConflictDetails[nCnt]
                        .AuthoriserReason.DisplayText
                    ),
                    Value: Convert.ToString(
                      this.FormViewerDetails.ConflictDetails[nCnt]
                        .AuthoriserReason.Value
                    ),
                  }
                );
              }
              oMedconflictData.AcknowledgeStatus =
                this.FormViewerDetails.ConflictDetails[nCnt].AcknowledgeStatus;
            }
          }
          if (
            !String.IsNullOrEmpty(this.OperationMode) &&
            String.Equals(
              this.OperationMode,
              'N',
              StringComparison.OrdinalIgnoreCase
            ) &&
            this.FormViewerDetails.BasicDetails.IsFollowUpStat
          ) {
            let updatePresItems: IEnumerable<PrescriptionItemVM> =
              this.ParentbaseVM.MedsResolve.Where(
                (item) =>
                  !String.IsNullOrEmpty(item.OperationMode) &&
                  String.Equals(
                    item.OperationMode,
                    'N',
                    StringComparison.OrdinalIgnoreCase
                  ) &&
                  (item.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                    'F'
                  ) ||
                    item.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                      'S'
                    )) &&
                  item.FormViewerDetails.BasicDetails.oPrescitemVM
                    .ParentUniqueRowID != 0 &&
                  (item.FormViewerDetails.BasicDetails.oPrescitemVM
                    .ParentUniqueRowID == this.UniqueRowItemID ||
                    item.FormViewerDetails.BasicDetails.oPrescitemVM
                      .ParentUniqueRowID == this.UniqueRowID) &&
                  item.FormViewerDetails.BasicDetails.oPrescitemVM.LorenzoID.Equals(
                    this.FormViewerDetails.BasicDetails.oPrescitemVM.LorenzoID
                  )
              ).Select((item) => item);
            if (updatePresItems != null && updatePresItems.Count() > 0) {
              let oItem: PrescriptionItemVM = updatePresItems.FirstOrDefault();
              if (oItem != null && oItem.FormViewerDetails != null) {
                if (!Istypeindrug) {
                  oItem.FormViewerDetails.ConflictDetails = oGridAdd;
                }
              }
              if (!Istypeindrug) {
                this.FormViewerDetails.ConflictDetails = oGridAdd;
              }
            } else {
              if (!Istypeindrug) {
                this.FormViewerDetails.ConflictDetails = oGridAdd;
              }
            }
          } else {
            if (!Istypeindrug) {
              this.FormViewerDetails.ConflictDetails = oGridAdd;
            }
          }
        }
      }
    }
  }
  oAddGrid: ObservableCollection<ConflictsVM>;
  private ShowWarnings(
    objWarningDetails: ObservableCollection<IPPMAManagePrescSer.WarningDetails>,
    sDrugName: string,
    sDrugType: string,
    lnDrugOID: number
  ): void {
    objWarningDetails.forEach((oDetails) => {
      if (
        this.objWarningItem.SealingDetails != null &&
        this.objWarningItem.SealingDetails.Count > 0
      ) {
        let objConflictSealDetails: IPPMAManagePrescSer.SealingDetails =
          this.GetConflictSealDetails(
            this.objWarningItem.SealingDetails,
            oDetails.HealthIssueCode,
            oDetails.HealthIssueType
          );
        if (
          objConflictSealDetails != null &&
          !String.IsNullOrEmpty(objConflictSealDetails.SealType) &&
          (String.Equals(objConflictSealDetails.SealType, 'CC_SEAL') ||
            String.Equals(objConflictSealDetails.SealType, 'CC_SEALLOCK'))
        ) {
          oDetails.IsSeal = '1';
          oDetails.SealType = objConflictSealDetails.SealType;
        } else {
          oDetails.IsSeal = '0';
          oDetails.SealType = String.Empty;
        }
      }
      if (
        oDetails != null &&
        !String.IsNullOrEmpty(oDetails.TypeColorCode) &&
        String.Equals(oDetails.TypeColorCode, '1')
      ) {
        this.BindDataToVM(
          null,
          oDetails,
          sDrugName,
          sDrugType,
          lnDrugOID,
          false
        );
      }
    });
  }
  public GetConflictSealDetails(
    oSealingDetails: ObservableCollection<IPPMAManagePrescSer.SealingDetails>,
    HealthIssueCode: string,
    HealthIssueType: string
  ): IPPMAManagePrescSer.SealingDetails {
    let objConflictSealDetails: IPPMAManagePrescSer.SealingDetails = null;
    let oMedconflictSealData: IEnumerable<IPPMAManagePrescSer.SealingDetails>;
    if (oSealingDetails != null && oSealingDetails.Count > 0) {
      oMedconflictSealData = oSealingDetails
        .Where(
          (HCodeType) =>
            HCodeType != null &&
            String.Compare(HCodeType.IdentifyingCode, HealthIssueCode) == 0 &&
            String.Compare(HCodeType.IdentifyingType, HealthIssueType) == 0
        )
        .Select((HCodeType) => HCodeType);
      if (oMedconflictSealData != null && oMedconflictSealData.Count() > 0) {
        objConflictSealDetails = new IPPMAManagePrescSer.SealingDetails();
        oMedconflictSealData.forEach((obj) => {
          objConflictSealDetails = obj;
        });
      }
    }
    return objConflictSealDetails;
  }
  private ValidateBindDataToVM(
    oDataFound: IPPMAManagePrescSer.MedConflictConfigData,
    oDetails: ManagePrescSer.WarningDetails,
    sDrugName: string,
    sDrugType: string,
    lnDrugOID: number,
    bIsAmend: boolean
  ): void {
    let oVM: ConflictsVM = new ConflictsVM();
    oVM.DrugName = sDrugName;
    oVM.DrugType = sDrugType;
    oVM.DrugMonoInfoOID = lnDrugOID;
    oVM.IsAmend = true;
    if (this != null && this.HIIsAcknowledged == '2') {
      oVM.EnableAcknowledgementDetails = true;
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.ConflictsReason != null
      )
        oVM.PrescriberReasonCombo = this.FormViewerDetails.ConflictsReason;
      if (
        oDetails != null &&
        String.Equals(
          oDetails.PrescriberComments,
          'Select reason',
          StringComparison.InvariantCulture
        )
      )
        oDetails.PrescriberComments = String.Empty;
      oVM.PrescriberReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: String.IsNullOrEmpty(oDetails.PrescriberComments)
          ? 'Select reason'
          : oDetails.PrescriberComments,
        Value: String.IsNullOrEmpty(oDetails.PrescriberComments)
          ? 'Select reason'
          : oDetails.PrescriberComments,
      });
      if (
        oDetails != null &&
        !String.IsNullOrEmpty(oDetails.AcknowledgeStatus) &&
        String.Equals(oDetails.AcknowledgeStatus, '1')
      ) {
        oVM.AcknowledgeStatus = true;
        oVM.AckstatusToolTip = 'Acknowledged';
      } else {
        oVM.AcknowledgeStatus = false;
        oVM.AckstatusToolTip = 'Select to acknowledge conflict';
      }
      if (
        oDataFound != null &&
        oDataFound.BehaviourType != null &&
        oDetails != null &&
        String.IsNullOrEmpty(oDetails.AcknowledgeStatus)
      ) {
        let sRefBehType: string = String.Empty;
        sRefBehType = Common.GetText(
          oDataFound.BehaviourType,
          WarningConceptCode.ConceptData
        );
        if (!String.IsNullOrEmpty(sRefBehType)) {
          oVM.WarningBehaviourType = sRefBehType;
        }
      } else if (!String.IsNullOrEmpty(oDetails.WarningBehaviourType)) {
        oVM.WarningBehaviourType = oDetails.WarningBehaviourType;
      }
      if (oVM.ReasonMandatory) {
        oVM.PrescriberReason = ObjectHelper.CreateObject(new CListItem(), {
          DisplayText: 'Select reason',
          Value: 'Select reason*',
        });
      }
    } else {
      oVM.EnableAcknowledgementDetails = false;
      if (
        String.Equals(
          oDetails.PrescriberComments,
          'Select reason',
          StringComparison.InvariantCulture
        )
      )
        oDetails.PrescriberComments = String.Empty;
      oVM.PrescriberReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: oVM.EnableAcknowledgementDetails
          ? String.Empty
          : oDetails.PrescriberComments,
        Value: oVM.EnableAcknowledgementDetails
          ? String.Empty
          : oDetails.PrescriberComments,
      });
      if (
        !String.IsNullOrEmpty(oDetails.AcknowledgeStatus) &&
        String.Equals(oDetails.AcknowledgeStatus, '1')
      ) {
        oVM.AcknowledgeStatus = true;
        oVM.AckstatusToolTip = 'Acknowledged';
      } else {
        oVM.AcknowledgeStatus = false;
        oVM.AckstatusToolTip = 'Select to acknowledge conflict';
      }
    }
    if (
      String.Equals(
        oDetails.AuthroiserComments,
        'Select reason',
        StringComparison.InvariantCulture
      )
    )
      oDetails.AuthroiserComments = '';
    if (
      String.Equals(
        oDetails.ClinicallVeriferComments,
        'Select reason',
        StringComparison.InvariantCulture
      )
    )
      oDetails.ClinicallVeriferComments = '';
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenu,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.AuthoriseReasonCombo = this.FormViewerDetails.ConflictsReason;
      let sReasonValue: string = String.Equals(
        this.PrescriptionItemStatus,
        PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
        StringComparison.InvariantCultureIgnoreCase
      )
        ? String.IsNullOrEmpty(oDetails.AuthroiserComments)
          ? 'Select reason'
          : oDetails.AuthroiserComments
        : oVM.EnableAcknowledgementDetails
        ? 'Select reason'
        : oDetails.AuthroiserComments;
      oVM.AuthoriserReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: sReasonValue,
        Value: sReasonValue,
      });
    } else {
      let sReasonValue: string = oVM.EnableAcknowledgementDetails
        ? String.Empty
        : oDetails.AuthroiserComments;
      oVM.AuthoriserReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: sReasonValue,
        Value: sReasonValue,
      });
    }
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenu,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.ClinicalReasonCombo = this.FormViewerDetails.ConflictsReason;
      let sReasonValue: string = String.Equals(
        this.PrescriptionItemStatus,
        PrescriptionItemStatusCodes.SUBMITTED,
        StringComparison.InvariantCultureIgnoreCase
      )
        ? String.IsNullOrEmpty(oDetails.ClinicallVeriferComments)
          ? 'Select reason'
          : oDetails.ClinicallVeriferComments
        : oVM.EnableAcknowledgementDetails
        ? 'Select reason'
        : oDetails.ClinicallVeriferComments;
      oVM.ClinicalVerfierReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: sReasonValue,
        Value: sReasonValue,
      });
    } else {
      let sReasonValue: string = oVM.EnableAcknowledgementDetails
        ? String.Empty
        : oDetails.ClinicallVeriferComments;
      oVM.ClinicalVerfierReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: sReasonValue,
        Value: sReasonValue,
      });
    }
    if (!String.IsNullOrEmpty(oDetails.WarningMessage))
      oVM.WarningMessage = oDetails.WarningMessage.Replace('%2B', '+');
    if (
      String.Equals(
        oDetails.WarningType,
        CConstants.sDrugInt,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.WarningMessage = oVM.WarningMessage.Replace('<BR>', '\n')
        .Replace('<br />', '\n')
        .Replace('&amp;', '&')
        .Replace('monograph', '~monograph~');
    }
    if (
      String.Equals(
        oDetails.WarningType,
        'Warning',
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.WarningType = oDetails.WarningType;
    } else if (!String.IsNullOrEmpty(oDetails.WarningSubType)) {
      oVM.WarningType = oDetails.WarningType + ' - ' + oDetails.WarningSubType;
    }
    if (
      String.Equals(
        oDetails.WarningType,
        'Warning',
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.IsNullOrEmpty(oDetails.WarningSubType)
    ) {
      oVM.WarningSubType = oDetails.WarningSubType;
    }
    if (oDataFound != null && oDataFound.BehaviourType != null) {
      let sRefBehType: string = String.Empty;
      sRefBehType = Common.GetText(
        oDataFound.BehaviourType,
        WarningConceptCode.ConceptData
      );
      if (!String.IsNullOrEmpty(sRefBehType)) {
        oVM.WarningBehaviourType = sRefBehType;
      }
    } else if (!String.IsNullOrEmpty(oDetails.WarningBehaviourType)) {
      oVM.WarningBehaviourType = oDetails.WarningBehaviourType;
    }
    if (
      this != null &&
      this.HIIsAcknowledged == '2' &&
      !String.IsNullOrEmpty(oDetails.PrescriberComments) &&
      !String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.ReasonMandatory = false;
      oVM.AcknowledgeMandatory = '';
    }
    if (oDataFound != null)
      oVM.DisplaySeqNumber =
        oDataFound instanceof IPPMAManagePrescSer.MedConflictConfigData
          ? oDataFound.DisplaySeqNumber
          : Number.MaxValue;
    else oVM.DisplaySeqNumber = oDetails.DisplaySequenceNumber;
    this.CommonConflictsFormatting(oVM);
    oVM.IsSeal = String.IsNullOrEmpty(oDetails.IsSeal)
      ? false
      : String.Equals(
          oDetails.IsSeal,
          '0',
          StringComparison.CurrentCultureIgnoreCase
        )
      ? false
      : true;
    oVM.SealType = oDetails.SealType;
    oVM.ConflictCode = oDetails.Code;
    oVM.ConflictType = oDetails.ConflictType;
    this.oAddGrid.Add(oVM);
  }
  private BindDataToVM(
    oDataFound: IPPMAManagePrescSer.MedConflictConfigData,
    oDetails: IPPMAManagePrescSer.WarningDetails,
    sDrugName: string,
    sDrugType: string,
    lnDrugOID: number,
    bIsAmend: boolean
  ): void {
    let oVM: ConflictsVM = new ConflictsVM();
    oVM.IsFluidOrSequence = oDetails.IsMandatoryForOthers;
    if (
      !String.IsNullOrEmpty(this.ItemSubType) &&
      String.Equals(
        this.ItemSubType,
        CConstants.SUBTYPE,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      (String.Equals(
        oDetails.WarningType,
        CConstants.sWarning,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          oDetails.WarningType,
          CConstants.sPrecaution,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          oDetails.WarningType,
          CConstants.sDrugContraIndication,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      oVM.DrugName = !String.IsNullOrEmpty(oDetails.MCChildIDName)
        ? oDetails.MCChildIDName
        : sDrugName;
      oVM.DrugType = !String.IsNullOrEmpty(oDetails.MCChildIDType)
        ? oDetails.MCChildIDType
        : sDrugType;
      oVM.DrugMonoInfoOID =
        oDetails.MCChildIDOID > 0 ? oDetails.MCChildIDOID : lnDrugOID;
    } else {
      oVM.DrugName = sDrugName;
      oVM.DrugType = sDrugType;
      oVM.DrugMonoInfoOID = lnDrugOID;
    }
    oVM.IsSeal = !String.IsNullOrEmpty(oDetails.IsSeal)
      ? String.Compare(oDetails.IsSeal, '1') == 0
        ? true
        : false
      : false;
    oVM.SealType = oDetails.SealType;
    oVM.ConflictCode = oDetails.Code;
    oVM.ConflictType = oDetails.ConflictType;
    oVM.WarningBehaviourType = oDetails.WarningBehaviourType;
    oVM.IsAmend = false;
    oVM.WarningConfType = oDetails.WarningType;
    oVM.WarningSubType = oDetails.WarningSubType;
    oVM.AcknowledgeStatus = false;
    oVM.AckstatusToolTip = 'Select to acknowledge conflict';
    oVM.MessageFormat = oDetails.MessageFormat;
    oVM.ApplicableTo = oDetails.ApplicableTo;
    oVM.ConflictMessage = oDetails.ConflictMessage;
    oVM.IsProblem = oDetails.IsProblem;
    oVM.PerformedOn = oDetails.PerformedOn;
    oVM.ProblemText = oDetails.ProblemText;
    oVM.WarningOID = oDetails.WarningOID;
    oVM.WarningSeverity = oDetails.WarningSeverity;
    oVM.PrescriberReasonCombo = this.FormViewerDetails.ConflictsReason;
    oVM.MCChildIDName = oDetails.MCChildIDName;
    oVM.MCChildIDOID = oDetails.MCChildIDOID;
    oVM.MCChildIDType = oDetails.MCChildIDType;
    oVM.UniqueMCRowId = oDetails.UniqueMCRowID;
    oVM.PrescriberReason = ObjectHelper.CreateObject(new CListItem(), {
      DisplayText: 'Select reason',
      Value: oVM.ReasonMandatory ? 'Select reason*' : 'Select reason',
    });
    if (
      String.Equals(
        oDetails.AuthroiserComments,
        'Select reason',
        StringComparison.InvariantCulture
      )
    )
      oDetails.AuthroiserComments = '';
    if (
      String.Equals(
        oDetails.ClinicallVeriferComments,
        'Select reason',
        StringComparison.InvariantCulture
      )
    )
      oDetails.ClinicallVeriferComments = '';
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenu,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.AuthoriseReasonCombo = this.FormViewerDetails.ConflictsReason;
      let sReasonValue: string = String.Equals(
        this.PrescriptionItemStatus,
        PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
        StringComparison.InvariantCultureIgnoreCase
      )
        ? String.IsNullOrEmpty(oDetails.AuthroiserComments)
          ? 'Select reason'
          : oDetails.AuthroiserComments
        : oVM.EnableAcknowledgementDetails
        ? 'Select reason'
        : oDetails.AuthroiserComments;
      oVM.AuthoriserReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: sReasonValue,
        Value: sReasonValue,
      });
    } else {
      let sReasonValue: string = oVM.EnableAcknowledgementDetails
        ? String.Empty
        : oDetails.AuthroiserComments;
      oVM.AuthoriserReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: sReasonValue,
        Value: sReasonValue,
      });
    }
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenu,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.ClinicalReasonCombo = this.FormViewerDetails.ConflictsReason;
      let sReasonValue: string = String.Equals(
        this.PrescriptionItemStatus,
        PrescriptionItemStatusCodes.SUBMITTED,
        StringComparison.InvariantCultureIgnoreCase
      )
        ? String.IsNullOrEmpty(oDetails.ClinicallVeriferComments)
          ? 'Select reason'
          : oDetails.ClinicallVeriferComments
        : oVM.EnableAcknowledgementDetails
        ? 'Select reason'
        : oDetails.ClinicallVeriferComments;
      oVM.ClinicalVerfierReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: sReasonValue,
        Value: sReasonValue,
      });
    } else {
      let sReasonValue: string = oVM.EnableAcknowledgementDetails
        ? String.Empty
        : oDetails.ClinicallVeriferComments;
      oVM.ClinicalVerfierReason = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: sReasonValue,
        Value: sReasonValue,
      });
    }
    if (!String.IsNullOrEmpty(oDetails.WarningMessage))
      oVM.WarningMessage = oDetails.WarningMessage.Replace('%2B', '+');
    if (
      String.Equals(
        oDetails.WarningType,
        CConstants.sDrugInt,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.WarningMessage = oVM.WarningMessage.Replace('<BR>', '\n')
        .Replace('<br />', '\n')
        .Replace('&amp;', '&')
        .Replace('monograph', '~monograph~');
    }
    if (
      String.Equals(
        oDetails.WarningType,
        'Warning',
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.WarningType = oDetails.WarningType;
    } else if (!String.IsNullOrEmpty(oDetails.WarningSubType)) {
      oVM.WarningType = oDetails.WarningType + ' - ' + oDetails.WarningSubType;
    }
    if (oDataFound != null && oDataFound.BehaviourType != null) {
      let sRefBehType: string = String.Empty;
      sRefBehType = Common.GetText(
        oDataFound.BehaviourType,
        WarningConceptCode.ConceptData
      );
      if (!String.IsNullOrEmpty(sRefBehType)) {
        oVM.WarningBehaviourType = sRefBehType;
      }
    } else if (!String.IsNullOrEmpty(oDetails.WarningBehaviourType)) {
      oVM.WarningBehaviourType = oDetails.WarningBehaviourType;
    }
    if (
      this != null &&
      this.HIIsAcknowledged == '2' &&
      !String.IsNullOrEmpty(oDetails.PrescriberComments) &&
      !String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oVM.ReasonMandatory = false;
      oVM.AcknowledgeMandatory = '';
    }
    if (oDataFound != null)
      oVM.DisplaySeqNumber =
        oDataFound instanceof IPPMAManagePrescSer.MedConflictConfigData
          ? oDataFound.DisplaySeqNumber
          : Number.MaxValue;
    else oVM.DisplaySeqNumber = oDetails.DisplaySequenceNumber;
    this.CommonConflictsFormatting(oVM);
    this.oAddGrid.Add(oVM);
  }
  public CommonConflictsFormatting(value: Object): void {
    let sWarningType: string,
      sDrugName,
      sDrugType,
      sWarningSubType,
      sSubDupDoubleFormat,
      sSubDupIngredientFormat,
      sSubDupHierarchyFormat,
      sWarningMsg,
      sIngredient,
      sPerformedOn,
      sAllWarningsText;
    sWarningType =
      sDrugName =
      sDrugType =
      sWarningSubType =
      sSubDupDoubleFormat =
      sSubDupIngredientFormat =
      sSubDupHierarchyFormat =
      sWarningMsg =
      sIngredient =
      sPerformedOn =
      sAllWarningsText =
        String.Empty;
    let oVM: ConflictsVM = ObjectHelper.CreateType<ConflictsVM>(
      value,
      ConflictsVM
    );
    if (
      (oVM.IsAmend && !String.IsNullOrEmpty(oVM.WarningMessage)) ||
      (!oVM.IsAmend &&
        this.HIIsAcknowledged == '2' &&
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == false &&
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == false &&
        oVM.WarningMessage != null)
    ) {
      sWarningMsg = oVM.WarningMessage.Replace('<BR>', '\n')
        .Replace('<br />', '\n')
        .Replace('&amp;', '&')
        .replace(/\bmonograph\b|~monograph~/gi, "~monograph~");
      oVM.WarningMessage = sWarningMsg;
    } else {
      sWarningSubType = oVM.WarningSubType;
      sWarningType = oVM.WarningConfType;
      sDrugName = oVM.DrugName;
      sDrugType = oVM.DrugType;
      if (
        this.ActionCode == ActivityTypes.Amend &&
        String.IsNullOrEmpty(this.OperationMode)
      ) {
        if (
          String.Equals(
            sWarningType,
            CConstants.sDuplication,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          let dtSecondDate: DateTime = DateTime.MinValue;
          let dtThirdDate: DateTime = DateTime.MinValue;
          let dtFourthDate: DateTime = DateTime.MinValue;
          let dtTemp: DateTime = DateTime.MinValue;
          let oFormat: IFormatProvider = new CultureInfo('en-GB');
          if (oVM.MessageFormat != null) {
            DateTime.TryParseExact(
              oVM.MessageFormat.SecondMessage,
              'dd/MM/yyyy HH:mm:ss',
              oFormat,
              DateTimeStyles.None,
              (o) => {
                dtSecondDate = o;
              }
            );
            DateTime.TryParseExact(
              oVM.MessageFormat.ThirdMessage,
              'dd/MM/yyyy HH:mm:ss',
              oFormat,
              DateTimeStyles.None,
              (o) => {
                dtThirdDate = o;
              }
            );
            DateTime.TryParseExact(
              oVM.MessageFormat.FourthMessage,
              'dd/MM/yyyy HH:mm:ss',
              oFormat,
              DateTimeStyles.None,
              (o) => {
                dtFourthDate = o;
              }
            );
          }
          switch (sWarningSubType) {
            case CConstants.sSubDupDouble:
              if (
                DateTime.NotEquals(dtSecondDate.Date, DateTime.MinValue.Date) &&
                DateTime.Equals(dtThirdDate, DateTime.MinValue.Date)
              ) {
                sSubDupDoubleFormat = CConstants.SUBDUPDOUBLEFORMAT;
              } else if (
                DateTime.NotEquals(dtSecondDate.Date, DateTime.MinValue.Date) &&
                DateTime.NotEquals(dtThirdDate.Date, DateTime.MinValue.Date)
              ) {
                sSubDupDoubleFormat = CConstants.SUBDUPDBLFRMTFORCURRMED;
              } else if (
                DateTime.Equals(dtSecondDate.Date, DateTime.MinValue.Date) &&
                DateTime.Equals(dtThirdDate.Date, DateTime.MinValue.Date)
              ) {
                sSubDupDoubleFormat = CConstants.SUBDUPDOUBLEFORMAT;
              }
              DateTime.TryParseExact(
                oVM.MessageFormat.ThirdMessage,
                'dd/MM/yyyy HH:mm:ss',
                oFormat,
                DateTimeStyles.None,
                (o) => {
                  dtTemp = o;
                }
              );
              sWarningMsg = String.Format(
                sSubDupDoubleFormat,
                oVM.MessageFormat.FirstMessage,
                dtTemp.ToString(CConstants.LongDateListFormat)
              );
              break;
            case CConstants.sSubDupIngredient:
              if (DateTime.Equals(dtFourthDate.Date, DateTime.MinValue.Date)) {
                sSubDupIngredientFormat = CConstants.SUBDUPINGFRMTFORCURRMED;
              } else {
                sSubDupIngredientFormat = CConstants.SUBDUPINGREDIENTFORMAT;
              }
              DateTime.TryParseExact(
                oVM.MessageFormat.FourthMessage,
                'dd/MM/yyyy HH:mm:ss',
                oFormat,
                DateTimeStyles.None,
                (o) => {
                  dtTemp = o;
                }
              );
              sWarningMsg = String.Format(
                sSubDupIngredientFormat,
                oVM.MessageFormat.FirstMessage,
                oVM.MessageFormat.SecondMessage,
                oVM.MessageFormat.ThirdMessage,
                dtTemp.ToString(CConstants.LongDateListFormat)
              );
              break;
            case CConstants.sSubDupHierarchy:
              if (DateTime.Equals(dtThirdDate.Date, DateTime.MinValue.Date)) {
                sSubDupHierarchyFormat = CConstants.SUBDUPHRCHYFRMTFORCURRMED;
              } else {
                sSubDupHierarchyFormat = CConstants.SUBDUPHIERARCHYFORMAT;
              }
              DateTime.TryParseExact(
                oVM.MessageFormat.ThirdMessage,
                'dd/MM/yyyy HH:mm:ss',
                oFormat,
                DateTimeStyles.None,
                (o) => {
                  dtTemp = o;
                }
              );
              sWarningMsg = String.Format(
                sSubDupHierarchyFormat,
                oVM.MessageFormat.FirstMessage,
                oVM.MessageFormat.SecondMessage,
                dtTemp.ToString(CConstants.LongDateListFormat)
              );
              break;
          }
        } else if (
          String.Equals(
            sWarningType,
            CConstants.sAllergy,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          switch (sWarningSubType) {
            case CConstants.sSubAllergyClass:
              sWarningMsg = String.Format(
                CConstants.SUBALLERGYINGFORMAT,
                oVM.MessageFormat.FirstMessage,
                oVM.MessageFormat.SecondMessage,
                oVM.MessageFormat.ThirdMessage,
                oVM.MessageFormat.FourthMessage,
                oVM.MessageFormat.FifthMessage,
                oVM.MessageFormat.SixthMessage
              );
              break;
            case CConstants.sSubAllergyCross:
              sWarningMsg = String.Format(
                CConstants.SUBALLERGYCROSSFORMAT,
                oVM.MessageFormat.FirstMessage,
                oVM.MessageFormat.SecondMessage,
                oVM.MessageFormat.ThirdMessage,
                oVM.MessageFormat.FourthMessage,
                oVM.MessageFormat.FifthMessage
              );
              break;
            case CConstants.sSubAllergyIng:
              sWarningMsg = String.Format(
                CConstants.SUBALLERGYINGGFORMAT,
                oVM.MessageFormat.FirstMessage,
                oVM.MessageFormat.SecondMessage,
                oVM.MessageFormat.ThirdMessage,
                oVM.MessageFormat.FourthMessage,
                oVM.MessageFormat.FifthMessage,
                oVM.MessageFormat.SixthMessage
              );
              break;
            case CConstants.sSubAllergyNotIncluded:
              sWarningMsg = oVM.WarningMessage;
              break;
          }
        } else if (
          String.Equals(
            sWarningType,
            CConstants.sContraIndication,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            oVM.PerformedOn != null &&
            DateTime.NotEquals(oVM.PerformedOn.Date, DateTime.MinValue.Date)
          )
            sPerformedOn = oVM.PerformedOn.ToUserDateTimeString(
              CConstants.LongDateListFormat
            );
          switch (sWarningSubType) {
            case CConstants.sAbsolute:
              sWarningMsg = this.GetContraMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                String.Empty,
                String.Empty
              );
              break;
            case CConstants.sRelated:
              sWarningMsg = this.GetContraMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                oVM.ProblemText,
                sPerformedOn
              );
              break;
            case CConstants.sSpecific:
              sWarningMsg = this.GetContraMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                oVM.ProblemText,
                sPerformedOn
              );
              break;
            case CConstants.sGeneric:
              sWarningMsg = oVM.ConflictMessage;
              break;
          }
        } else if (
          String.Equals(
            sWarningType,
            CConstants.sPrecaution,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            oVM.PerformedOn != null &&
            DateTime.NotEquals(oVM.PerformedOn.Date, DateTime.MinValue.Date)
          )
            sPerformedOn = oVM.PerformedOn.ToString(
              CConstants.LongDateListFormat
            );
          switch (sWarningSubType) {
            case CConstants.sAbsolute:
              sWarningMsg = this.GetPreCautionMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                String.Empty,
                String.Empty
              );
              break;
            case CConstants.sRelated:
              sWarningMsg = this.GetPreCautionMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                oVM.ProblemText,
                sPerformedOn
              );
              break;
            case CConstants.sSpecific:
              sWarningMsg = this.GetPreCautionMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                oVM.ProblemText,
                sPerformedOn
              );
              break;
            case CConstants.sGeneric:
              sWarningMsg = oVM.ConflictMessage;
              break;
          }
        } else if (
          String.Equals(
            sWarningType,
            CConstants.sWarning,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            oVM.PerformedOn != null &&
            DateTime.NotEquals(oVM.PerformedOn.Date, DateTime.MinValue.Date)
          )
            sPerformedOn = oVM.PerformedOn.ToString(
              CConstants.LongDateListFormat
            );
          switch (sWarningSubType) {
            case CConstants.sAbsolute:
              sWarningMsg = this.GetWarningMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                String.Empty,
                String.Empty
              );
              break;
            case CConstants.sRelated:
              sWarningMsg = this.GetWarningMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                oVM.ProblemText,
                sPerformedOn
              );
              break;
            case CConstants.sSpecific:
              sWarningMsg = this.GetWarningMessage(
                sWarningSubType,
                sDrugName,
                sDrugType,
                oVM.ConflictMessage,
                oVM.IsProblem,
                oVM.ApplicableTo,
                oVM.ProblemText,
                sPerformedOn
              );
              break;
            case CConstants.sGeneric:
              sWarningMsg = oVM.ConflictMessage;
              break;
          }
        }
        if (
          String.Equals(
            sWarningType,
            CConstants.sDrugInt,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          sWarningMsg = oVM.WarningMessage.Replace('<BR>', '\n')
            .Replace('<br />', '\n')
            .Replace('&amp;', '&')
            .Replace('monograph', '~monograph~');
        }
        oVM.WarningMessage = sWarningMsg;
      }
    }
  }
  public GetContraMessage(
    Type: string,
    sDrugName: string,
    sDrugType: string,
    sMessage: string,
    bProblem: boolean,
    sApplicableTo: string,
    sProblemText: string,
    sPerformedOn: string
  ): string {
    if (
      !String.IsNullOrEmpty(sDrugType) &&
      !(
        sDrugType.Equals(
          CConstants.CATALOGUEITEM,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        sDrugType.Equals(
          CConstants.ACTUALMOIETY,
          StringComparison.InvariantCultureIgnoreCase
        )
      )
    ) {
      switch (Type) {
        case CConstants.sSpecific:
          if (bProblem)
            return String.Format(
              CConstants.CON_PROBLEM,
              sProblemText,
              sDrugName,
              sMessage
            );
          else
            return String.Format(
              CConstants.CON_PROCEDURE,
              sProblemText,
              sPerformedOn,
              sDrugName,
              sMessage
            );
        case CConstants.sRelated:
          if (bProblem)
            return String.Format(
              CConstants.CON_RPROBLEM,
              sProblemText,
              sDrugName,
              sMessage
            );
          else
            return String.Format(
              CConstants.CON_RPROCEDURE,
              sProblemText,
              sPerformedOn,
              sDrugName,
              sMessage
            );
        case CConstants.sAbsolute:
          return sMessage;
      }
    } else if (
      !String.IsNullOrEmpty(sDrugType) &&
      (sDrugType.Equals(
        CConstants.CATALOGUEITEM,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        sDrugType.Equals(
          CConstants.ACTUALMOIETY,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      let sAppliText: string = String.Empty;
      switch (Type) {
        case CConstants.sSpecific: {
          if (
            String.Compare(
              sApplicableTo,
              CConstants.sAllChilds,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          )
            sAppliText = String.Format(
              CConstants.VM_ALLCHILD,
              sDrugName,
              sMessage
            );
          else if (
            String.Compare(
              sApplicableTo,
              CConstants.sSomeChilds,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          )
            sAppliText = String.Format(
              CConstants.VM_SOMECHILD,
              sDrugName,
              sMessage
            );
          if (bProblem)
            return String.Format(
              CConstants.VM_PROBLEM,
              sProblemText,
              sAppliText
            );
          else
            return String.Format(
              CConstants.VM_PROCEDURE,
              sProblemText,
              sPerformedOn,
              sAppliText
            );
        }
        case CConstants.sRelated: {
          if (
            String.Compare(
              sApplicableTo,
              CConstants.sAllChilds,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          )
            sAppliText = String.Format(
              CConstants.VM_RALLCHILD,
              sDrugName,
              sMessage
            );
          else if (
            String.Compare(
              sApplicableTo,
              CConstants.sSomeChilds,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          )
            sAppliText = String.Format(
              CConstants.VM_RSOMECHILD,
              sDrugName,
              sMessage
            );
          if (bProblem)
            return String.Format(
              CConstants.VM_PROBLEM,
              sProblemText,
              sAppliText
            );
          else
            return String.Format(
              CConstants.VM_PROCEDURE,
              sProblemText,
              sPerformedOn,
              sAppliText
            );
        }
        case CConstants.sAbsolute:
          if (
            String.Compare(
              sApplicableTo,
              CConstants.sAllChilds,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          )
            return 'General contraindications apply, review ~monograph~.';
          else
            return 'General contraindications apply for some products, review ~monograph~ of intended product';
      }
    }
    return String.Empty;
  }
  public GetPreCautionMessage(
    Type: string,
    sDrugName: string,
    sDrugType: string,
    sMessage: string,
    bProblem: boolean,
    sApplicableTo: string,
    sProblemText: string,
    sPerformedOn: string
  ): string {
    if (
      !String.IsNullOrEmpty(sDrugType) &&
      !(
        sDrugType.Equals(
          CConstants.CATALOGUEITEM,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        sDrugType.Equals(
          CConstants.ACTUALMOIETY,
          StringComparison.InvariantCultureIgnoreCase
        )
      )
    ) {
      switch (Type) {
        case CConstants.sSpecific:
          if (bProblem)
            return String.Format(
              CConstants.SPECIFIC1,
              sProblemText,
              sDrugName,
              sMessage
            );
          else
            return String.Format(
              CConstants.SPECIFIC2,
              sProblemText,
              sPerformedOn,
              sDrugName,
              sMessage
            );
        case CConstants.sRelated:
          if (bProblem)
            return String.Format(CConstants.RELATED1, sProblemText, sMessage);
          else
            return String.Format(
              CConstants.RELATED2,
              sProblemText,
              sPerformedOn,
              sMessage
            );
        case CConstants.sAbsolute:
          return sMessage;
      }
    } else if (
      !String.IsNullOrEmpty(sDrugType) &&
      (sDrugType.Equals(
        CConstants.CATALOGUEITEM,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        sDrugType.Equals(
          CConstants.ACTUALMOIETY,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      let sAppliText: string = String.Empty;
      if (
        String.Compare(
          Type,
          CConstants.sRelated,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0
      ) {
        if (
          String.Compare(
            sApplicableTo,
            CConstants.sAllChilds,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        )
          sAppliText = String.Format(CConstants.ALLCHILD1, sDrugName);
        else if (
          String.Compare(
            sApplicableTo,
            CConstants.sSomeChilds,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        )
          sAppliText = String.Format(CConstants.ALLCHILD2, sDrugName);
      } else if (
        String.Compare(
          Type,
          CConstants.sRelated,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        if (
          String.Compare(
            sApplicableTo,
            CConstants.sAllChilds,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        )
          sAppliText = String.Format(CConstants.RELATED3, sDrugName, sMessage);
        else if (
          String.Compare(
            sApplicableTo,
            CConstants.sSomeChilds,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        )
          sAppliText = String.Format(CConstants.RELATED4, sDrugName, sMessage);
      }
      switch (Type) {
        case CConstants.sSpecific:
          if (bProblem)
            return String.Format(
              CConstants.VM_PROBLEM,
              sProblemText,
              sAppliText
            );
          else
            return String.Format(
              CConstants.VM_PROCEDURE,
              sProblemText,
              sPerformedOn,
              sAppliText
            );
        case CConstants.sRelated:
          if (bProblem)
            return String.Format(
              CConstants.VM_PROBLEM,
              sProblemText,
              sAppliText
            );
          else
            return String.Format(
              CConstants.VM_PROCEDURE,
              sProblemText,
              sPerformedOn,
              sAppliText
            );
        case CConstants.sAbsolute:
          if (
            String.Compare(
              sApplicableTo,
              CConstants.sAllChilds,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          )
            return 'General precautions apply, review ~monograph~.';
          else
            return 'General precautions apply for some products, review ~monograph~ of intended product';
      }
    }
    return String.Empty;
  }
  public GetWarningMessage(
    Type: string,
    sDrugName: string,
    sDrugType: string,
    sMessage: string,
    bProblem: boolean,
    sApplicableTo: string,
    sProblemText: string,
    sPerformedOn: string
  ): string {
    if (
      String.Compare(
        Type,
        CConstants.sGeneric,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    )
      return sMessage;
    if (
      !String.IsNullOrEmpty(sDrugType) &&
      !(
        sDrugType.Equals(
          CConstants.CATALOGUEITEM,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        sDrugType.Equals(
          CConstants.ACTUALMOIETY,
          StringComparison.InvariantCultureIgnoreCase
        )
      )
    ) {
      switch (Type) {
        case CConstants.sSpecific:
          if (bProblem)
            return String.Format(
              CConstants.SPECIFIC5,
              sProblemText,
              sDrugName,
              sMessage
            );
          else
            return String.Format(
              CConstants.SPECIFIC6,
              sProblemText,
              sPerformedOn,
              sDrugName,
              sMessage
            );
        case CConstants.sRelated:
          if (bProblem)
            return String.Format(
              CConstants.RELATED7,
              sProblemText,
              sDrugName,
              sMessage
            );
          else
            return String.Format(
              CConstants.RELATED8,
              sProblemText,
              sPerformedOn,
              sDrugName,
              sMessage
            );
        case CConstants.sAbsolute:
          return sMessage;
      }
    } else if (
      !String.IsNullOrEmpty(sDrugType) &&
      (sDrugType.Equals(
        CConstants.CATALOGUEITEM,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        sDrugType.Equals(
          CConstants.ACTUALMOIETY,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      let sAppliText: string = String.Empty;
      if (
        String.Compare(
          sApplicableTo,
          CConstants.sAllChilds,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      )
        sAppliText = String.Format(CConstants.ALLCHILD3, sDrugName);
      else if (
        String.Compare(
          sApplicableTo,
          CConstants.sSomeChilds,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      )
        sAppliText = String.Format(CConstants.ALLCHILD4, sDrugName);
      switch (Type) {
        case CConstants.sSpecific:
          if (bProblem)
            return String.Format(
              CConstants.SPECIFIC7,
              sProblemText,
              sAppliText
            );
          else
            return String.Format(
              CConstants.SPECIFIC8,
              sProblemText,
              sPerformedOn,
              sAppliText
            );
        case CConstants.sRelated:
          if (bProblem)
            return String.Format(CConstants.RELATED9, sProblemText, sAppliText);
          else
            return String.Format(
              CConstants.RELATED10,
              sProblemText,
              sPerformedOn,
              sAppliText
            );
        case CConstants.sAbsolute:
          if (
            String.Compare(
              sApplicableTo,
              CConstants.sAllChilds,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          )
            return 'General warnings apply, review ~monograph~.';
          else
            return 'General warnings apply for some products, review ~monograph~ of intended product';
      }
    }
    return String.Empty;
  }
  public CanPerformDRC(oPrescriptionItemVM: PrescriptionItemVM): boolean {
    let TypeInDrug: boolean = false;
    let MultipleRoute: boolean = false;
    let MCIDrug: boolean = false;
    let LocalDrug: boolean = false;
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.itemSubType) &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.itemSubType,
        CConstants.SUBTYPE,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      MCIDrug = true;
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.IdentifyingType
      ) &&
      (String.Compare(
        this.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.NONCATALOGUEITEM,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.IdentifyingType,
          CConstants.Precatalog,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0)
    ) {
      TypeInDrug = true;
    }
    if (
      !String.IsNullOrEmpty(this.LorenzoID) &&
      !this.LorenzoID.Contains('-')
    ) {
      LocalDrug = true;
    }
    if (
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
      this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
      this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null &&
      this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0 &&
      this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
        (X) => X.IsSelected
      ).ToList().Count > 1
    ) {
      MultipleRoute = true;
    }
    let _PresItemStatusActive: boolean = true;
    if (this.ActionCode == ActivityTypes.Amend && this.IsFormViewerDisable) {
      _PresItemStatusActive = false;
    }
    let DRCTabEnable: boolean = false;
    if (
      _PresItemStatusActive &&
      ((ProfileData.MedConflictConfig != null &&
        ProfileData.MedConflictConfig.TurnOnDRC != null &&
        ProfileData.MedConflictConfig.TurnOnDRC == '1') ||
        (ProfileData.MedConflictConfig == null && PatientContext.IsTurnONDRC))
    ) {
      DRCTabEnable = true;
    }
    if (
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      DRCTabEnable &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.Ordersets.IsDefault &&
      oPrescriptionItemVM.ActionCode == ActivityTypes.Prescribe
    ) {
      DRCTabEnable = false;
    }
    if (
      PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
      PatientContext.ClerkFormViewDefaultBehavior !=
        ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
      DRCTabEnable &&
      oPrescriptionItemVM.formViewerDetails.BasicDetails != null &&
      ((oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType != null &&
        (String.Compare(
          oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.NORMAL
        ) == 0 ||
          String.Compare(
            oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.DOSAGERANGE
          ) == 0)) ||
        (oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType != null &&
          (String.Compare(
            oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.CONDITIONAL
          ) == 0 ||
            String.Compare(
              oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.TITRATED
            ) == 0 ||
            String.Compare(
              oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE
            ) == 0)) ||
        MCIDrug ||
        TypeInDrug ||
        LocalDrug ||
        MultipleRoute)
    ) {
      return true;
    }
    return false;
  }
  private FillDRCSteppedDoseDetails(
    oMultipleDoseDetail: ObservableCollection<MultipleDoseDetail>
  ): ObservableCollection<IPPMAManagePrescSer.DRCMultipleDoseValue> {
    let objDRCMultipleDoseValue: ObservableCollection<IPPMAManagePrescSer.DRCMultipleDoseValue> =
      new ObservableCollection<IPPMAManagePrescSer.DRCMultipleDoseValue>();
    oMultipleDoseDetail.forEach((objMultipleDoseDetail) => {
      let oDRCMultipleDoseValue: IPPMAManagePrescSer.DRCMultipleDoseValue =
        new IPPMAManagePrescSer.DRCMultipleDoseValue();
      if (objMultipleDoseDetail.LowerDose > 0)
        oDRCMultipleDoseValue.LowDose = objMultipleDoseDetail.LowerDose;
      if (objMultipleDoseDetail.UpperDose > 0)
        oDRCMultipleDoseValue.HighDose = objMultipleDoseDetail.UpperDose;
      if (objMultipleDoseDetail.DoseUOM != null) {
        oDRCMultipleDoseValue.DoseUOM = ObjectHelper.CreateObject(
          new IPPMAManagePrescSer.DRCUOM(),
          {
            Value: objMultipleDoseDetail.DoseUOM.Value,
            Text: objMultipleDoseDetail.DoseUOM.DisplayText,
            LorenzoID:
              objMultipleDoseDetail.DoseUOM.Tag != null
                ? objMultipleDoseDetail.DoseUOM.Tag.ToString()
                : String.Empty,
          }
        );
      }
      if (
        objMultipleDoseDetail.Frequency != null &&
        !String.IsNullOrEmpty(objMultipleDoseDetail.Frequency.Value)
      ) {
        oDRCMultipleDoseValue.Frequency =
          objMultipleDoseDetail.Frequency.DisplayText;
        if (objMultipleDoseDetail.Frequency.Tag != null) {
          let FreqTag: string[] =
            objMultipleDoseDetail.Frequency.Tag instanceof Array
              ? ObjectHelper.CreateType<string[]>(
                  objMultipleDoseDetail.Frequency.Tag,
                  'string[]'
                )
              : null;
          if (FreqTag != null && FreqTag.Count() >= 3) {
            oDRCMultipleDoseValue.FrequencyLZOID = FreqTag[2];
          }
        }
        if (!String.IsNullOrEmpty(objMultipleDoseDetail.Frequency.Value))
          oDRCMultipleDoseValue.FrequencyOID = Convert.ToInt64(
            objMultipleDoseDetail.Frequency.Value
          );
      }
      if (objMultipleDoseDetail.LowerDose > 0){
        objDRCMultipleDoseValue.Add(oDRCMultipleDoseValue);
      }
      if (
        oDRCMultipleDoseValue.LowDose == 0 &&
        oDRCMultipleDoseValue.HighDose == 0 &&
        objMultipleDoseDetail.ScheduleDetailsData != null &&
        objMultipleDoseDetail.ScheduleDetailsData.Count > 0
      ) {
        this.isChangeDoseExistInSV = true;
      //   let lstDoseVal: List<string> = new List<string>();
      //   objMultipleDoseDetail.ScheduleDetailsData.forEach(
      //     (oScheduleDetailsCols) => {
      //       let vDoseVal = oScheduleDetailsCols.ScheduleDoseValue.Select(
      //         (s) => s
      //       )
      //         .Distinct()
      //         .ToList();
      //       if (vDoseVal != null && vDoseVal.Count > 0) {
      //         vDoseVal.forEach((sDose) => {
      //           if (!String.IsNullOrEmpty(sDose)) {
      //             lstDoseVal.Add(sDose);
      //           }
      //         });
      //       }
      //     }
      //   );
      //   if (lstDoseVal != null && lstDoseVal.Count > 0) {
      //     oDRCMultipleDoseValue.ChangingDose =
      //       new IPPMAManagePrescSer.ArrayOfString();
      //     let vDoseVal = lstDoseVal
      //       .Select((s) => s)
      //       .Distinct()
      //       .ToList();
      //     vDoseVal.forEach((sDose) => {
      //       oDRCMultipleDoseValue.ChangingDose.Add(sDose);
      //     });
      //   }
      }
      //objDRCMultipleDoseValue.Add(oDRCMultipleDoseValue);
    });
    return objDRCMultipleDoseValue;
  }
  public PerformDRC(oPrescriptionItemVM: PrescriptionItemVM): void {
    this.isChangeDoseExistInSV = false;
    if (
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null
    ) {
      this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.lstDRCAmendedFlds;
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.lstDRCAmendedFlds =
        new List<string>();
    }
    let oReqInvokeDRCConflict: IPPMAManagePrescSer.CReqMsgInvokeDRCConflict =
      new IPPMAManagePrescSer.CReqMsgInvokeDRCConflict();
    oReqInvokeDRCConflict.oContextInformation = Common.FillContext();
    oReqInvokeDRCConflict.oDRCObjectBC = new IPPMAManagePrescSer.DRCObject();
    if (
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Dose
      )
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.Dose = Convert.ToDouble(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Dose
      );
    }
    if (
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseUOM != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseUOM.Value
      )
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.DoseUOM = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.DRCUOM(),
        {
          Value:
            oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseUOM.Value,
          Text: oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseUOM
            .DisplayText,
          LorenzoID:
            oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseUOM.Tag !=
            null
              ? oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseUOM.Tag.ToString()
              : String.Empty,
        }
      );
    }
    if (
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseType.Value
      )
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.PrescribeDosetype =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.DoseType.Value;
    }
    if (
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.UpperDose
      )
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.UpperDose = Convert.ToDouble(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.UpperDose
      );
    }
    if (
      oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType != null &&
      String.Compare(
        oPrescriptionItemVM.formViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE
      ) == 0 &&
      oPrescriptionItemVM.formViewerDetails.BasicDetails.MultiDoseDetails !=
        null &&
      oPrescriptionItemVM.formViewerDetails.BasicDetails.MultiDoseDetails
        .Count > 0
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.DRCMultipleDoseValues =
        new ObservableCollection<IPPMAManagePrescSer.DRCMultipleDoseValue>();
      oReqInvokeDRCConflict.oDRCObjectBC.DRCMultipleDoseValues =
        this.FillDRCSteppedDoseDetails(
          oPrescriptionItemVM.formViewerDetails.BasicDetails.MultiDoseDetails
        );
    }
    if (
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.Route != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Route.Value
      ) &&
      !oPrescriptionItemVM.FormViewerDetails.BasicDetails.Route.Value.Contains(
        ','
      )
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.RouteOID = Convert.ToInt64(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Route.Value
      );
      oReqInvokeDRCConflict.oDRCObjectBC.RouteName =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Route.DisplayText;
    }
    let IsInfDurg: boolean = false;
    if (
      PatientContext.IsINFUSIONON &&
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
      )
    ) {
      IsInfDurg = true;
    }
    if (
      !IsInfDurg &&
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.DosageForm != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.DosageForm.Value
      )
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.FormLZOID =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.DosageForm.Value;
      oReqInvokeDRCConflict.oDRCObjectBC.DosageFormText = !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.DosageForm
          .DisplayText
      )
        ? oPrescriptionItemVM.FormViewerDetails.BasicDetails.DosageForm
            .DisplayText
        : String.Empty;
    }
    if (
      !IsInfDurg &&
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.Strength != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Strength.Value
      )
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.Strengthtext =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Strength.Value;
    }
    if (
      !IsInfDurg &&
      oPrescriptionItemVM != null &&
      oPrescriptionItemVM.FormViewerDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails != null &&
      oPrescriptionItemVM.FormViewerDetails.BasicDetails._isStrengthMandatory
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.IsStrengthMandatory =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails._isStrengthMandatory;
    }
    if (!String.IsNullOrEmpty(PatientContext.DOB)) {
      oReqInvokeDRCConflict.oDRCObjectBC.DOB = Convert.ToDateTime(
        PatientContext.DOB
      );
    } else {
      oReqInvokeDRCConflict.oDRCObjectBC.DOB = DateTime.MinValue;
    }
    oReqInvokeDRCConflict.oDRCObjectBC.IsEstimatedDOB =
      PatientContext.IsEstimatedDOB;
    if (oPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingOID > 0)
      oReqInvokeDRCConflict.oDRCObjectBC.IdentifyingOID =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingOID;
    if (
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingType
      )
    )
      oReqInvokeDRCConflict.oDRCObjectBC.IdentifyingType =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingType.ToUpper();
    if (!String.IsNullOrEmpty(oPrescriptionItemVM.LorenzoID))
      oReqInvokeDRCConflict.oDRCObjectBC.LorenzoID =
        oPrescriptionItemVM.LorenzoID;
    if (
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingName
      )
    )
      oReqInvokeDRCConflict.oDRCObjectBC.IdentifyingName =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingName;
    let PatWeght: number = 0;
    if (!String.IsNullOrEmpty(PatientContext.PatientWEIGHT)) {
      Number.TryParse(PatientContext.PatientWEIGHT, (o) => (PatWeght = o));
    }
    if (PatWeght > 0) {
      oReqInvokeDRCConflict.oDRCObjectBC.PatientWeight = PatWeght;
      if (!String.IsNullOrEmpty(PatientContext.PatientWeightRecordedOn))
        oReqInvokeDRCConflict.oDRCObjectBC.PatientWeightRecordedOn =
          PatientContext.PatientWeightRecordedOn;
    }
    oReqInvokeDRCConflict.oDRCObjectBC.IsEstimatedWeight =
      PatientContext.isEstimatedWeight;
    let PatHeight: number = 0;
    if (!String.IsNullOrEmpty(PatientContext.PatientHEIGHT)) {
      Number.TryParse(PatientContext.PatientHEIGHT, (o) => (PatHeight = o));
    }
    if (PatHeight > 0) {
      oReqInvokeDRCConflict.oDRCObjectBC.PatientHeight = PatHeight;
      if (!String.IsNullOrEmpty(PatientContext.PatientHeightRecordedOn))
        oReqInvokeDRCConflict.oDRCObjectBC.PatientHeightRecordedOn =
          PatientContext.PatientHeightRecordedOn;
    }
    oReqInvokeDRCConflict.oDRCObjectBC.IsEstimatedHeight =
      PatientContext.isEstimatedHeight;
    if (!String.IsNullOrEmpty(PatientContext.BSA)) {
      oReqInvokeDRCConflict.oDRCObjectBC.PatientBSA = Convert.ToDouble(
        PatientContext.BSA
      );
      if (!String.IsNullOrEmpty(PatientContext.BSAFormula))
        oReqInvokeDRCConflict.oDRCObjectBC.BSAFormula =
          PatientContext.BSAFormula;
    }
    oReqInvokeDRCConflict.oDRCObjectBC.MCVersionNo = AppSessionInfo.AMCV;
    if (
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.Frequency != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Frequency.DisplayText
      )
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.Frequency =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Frequency.DisplayText;
      if (
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Frequency.Tag != null
      ) {
        let FreqTag: string[] =
          oPrescriptionItemVM.FormViewerDetails.BasicDetails.Frequency
            .Tag instanceof Array
            ? ObjectHelper.CreateType<string[]>(
                oPrescriptionItemVM.FormViewerDetails.BasicDetails.Frequency
                  .Tag,
                'string[]'
              )
            : null;
        if (FreqTag != null && FreqTag.Count() >= 3) {
          oReqInvokeDRCConflict.oDRCObjectBC.FrequencyLZOID = FreqTag[2];
        }
      }
      if (
        !String.IsNullOrEmpty(
          oPrescriptionItemVM.FormViewerDetails.BasicDetails.Frequency.Value
        )
      )
        oReqInvokeDRCConflict.oDRCObjectBC.FrequencyOID = Convert.ToInt64(
          oPrescriptionItemVM.FormViewerDetails.BasicDetails.Frequency.Value
        );
    }
    if (oPrescriptionItemVM.FormViewerDetails.BasicDetails.AsRequired) {
      oReqInvokeDRCConflict.oDRCObjectBC.AsRequired = true;
    }
    if (
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.Strength != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Strength.Value
      )
    )
      oReqInvokeDRCConflict.oDRCObjectBC.Strengthtext =
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.Strength.Value;
    let sbIndication: StringBuilder = new StringBuilder();
    if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.PatientProblemCode
      )
    ) {
      let strProb: string[] =
        this.FormViewerDetails.BasicDetails.PatientProblemCode.Split('!');
      if (strProb.length > 0) {
        let strIndication: string[];
        for (let i: number = 0; i < strProb.length; i++) {
          strIndication = strProb[i].Split('#');
          if (
            strIndication[0] != null &&
            String.Compare(
              strIndication[0].ToString(),
              'INDICATION',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            sbIndication.Append(strIndication[1]);
            sbIndication.Append(',');
          }
        }
      }
    }
    if (sbIndication != null && sbIndication.Length > 1) {
      oReqInvokeDRCConflict.oDRCObjectBC.Indication =
        new IPPMAManagePrescSer.ArrayOfString();
      oReqInvokeDRCConflict.oDRCObjectBC.Indication.Add(
        sbIndication.ToString().EndsWith(',')
          ? sbIndication.ToString().Remove(sbIndication.ToString().length - 1)
          : sbIndication.ToString()
      );
    }
    if (
      ProfileData.MedConflictConfig != null &&
      ProfileData.MedConflictConfig.oDRCConfigData != null &&
      ProfileData.MedConflictConfig.oDRCConfigData.Count > 0
    ) {
      oReqInvokeDRCConflict.oDRCConfigBC =
        ProfileData.MedConflictConfig.oDRCConfigData;
    }
    let oDefaultDRCDoseType: string = String.Empty;
    oDefaultDRCDoseType = this.SetDRCDoseType();
    if (
      oPrescriptionItemVM.FormViewerDetails.BasicDetails.DRCDosetype != null &&
      !String.IsNullOrEmpty(
        oPrescriptionItemVM.FormViewerDetails.BasicDetails.DRCDosetype.Value
      ) &&
      !String.IsNullOrEmpty(oDefaultDRCDoseType)
    ) {
      oReqInvokeDRCConflict.oDRCObjectBC.DRCDoseType =
        ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
          Code: oDefaultDRCDoseType,
        });
    }
    this.InvokeDRCConflict(oReqInvokeDRCConflict);
  }
  InvokeDRCConflict(
    oReqInvokeDRCConflict: IPPMAManagePrescSer.CReqMsgInvokeDRCConflict
  ): void {
    let CanInvokeDRC: boolean = true;
    if (this.ActionCode == ActivityTypes.Amend) {
      this.FormViewerDetails.BasicDetails.IsDRCPerfomedForAmendment = true;
    }
    if (
      oReqInvokeDRCConflict != null &&
      oReqInvokeDRCConflict.oDRCObjectBC != null
    ) {
      let objMedDRCVM: MedDRCVM = new MedDRCVM();
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.itemSubType
        ) &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.itemSubType,
          CConstants.SUBTYPE,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
          ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
            (x) => x.DRCSubType == OtherDRCErrorCodes.DRCMCI
          );
        CanInvokeDRC = false;
        if (
          filteredDRCConfig != null &&
          filteredDRCConfig.IsDisplayDRCConflict == '1'
        ) {
          if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
            objMedDRCVM = this.ConstructDRCMessage(this);
          }
          if (objMedDRCVM.DRCConflictDetail == null)
            objMedDRCVM.DRCConflictDetail =
              new ObservableCollection<DRCConflictDetail>();
          let objDRCConflictDetail: DRCConflictDetail =
            ObjectHelper.CreateObject(new DRCConflictDetail(), {
              ERRORCode: 'CC_OTHER',
              ERRORText: 'Other',
              DRCOtherErrorType: OtherDRCErrorCodes.DRCMCI,
              ErrorMessage: Resource.DRCConflict.DRC_MCIDrug,
            });
          objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
        }
      } else if (
        !String.IsNullOrEmpty(this.LorenzoID) &&
        !this.LorenzoID.Contains('-')
      ) {
        let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
          ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
            (x) => x.DRCSubType == OtherDRCErrorCodes.DRCLocalDrug
          );
        CanInvokeDRC = false;
        if (
          filteredDRCConfig != null &&
          filteredDRCConfig.IsDisplayDRCConflict == '1'
        ) {
          if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
            objMedDRCVM = this.ConstructDRCMessage(this);
          }
          if (objMedDRCVM.DRCConflictDetail == null)
            objMedDRCVM.DRCConflictDetail =
              new ObservableCollection<DRCConflictDetail>();
          let objDRCConflictDetail: DRCConflictDetail =
            ObjectHelper.CreateObject(new DRCConflictDetail(), {
              ERRORCode: 'CC_OTHER',
              ERRORText: 'Other',
              DRCOtherErrorType: OtherDRCErrorCodes.DRCLocalDrug,
              ErrorMessage: Resource.DRCConflict.DRC_LocalDrug,
            });
          objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
        }
      } else if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.IdentifyingType
        ) &&
        (String.Compare(
          this.FormViewerDetails.BasicDetails.IdentifyingType,
          CConstants.NONCATALOGUEITEM,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
          String.Compare(
            this.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.Precatalog,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0)
      ) {
        let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
          ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
            (x) => x.DRCSubType == OtherDRCErrorCodes.DRCTypeIn
          );
        CanInvokeDRC = false;
        if (
          filteredDRCConfig != null &&
          filteredDRCConfig.IsDisplayDRCConflict == '1'
        ) {
          if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
            objMedDRCVM = this.ConstructDRCMessage(this);
          }
          if (objMedDRCVM.DRCConflictDetail == null)
            objMedDRCVM.DRCConflictDetail =
              new ObservableCollection<DRCConflictDetail>();
          let objDRCConflictDetail: DRCConflictDetail =
            ObjectHelper.CreateObject(new DRCConflictDetail(), {
              ERRORCode: 'CC_OTHER',
              ERRORText: 'Other',
              DRCOtherErrorType: OtherDRCErrorCodes.DRCTypeIn,
              ErrorMessage: Resource.DRCConflict.DRC_TypeINDrug,
            });
          objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
        }
      } else if (
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null &&
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0 &&
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
          (X) => X.IsSelected
        ).ToList().Count > 1
      ) {
        let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
          ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
            (x) => x.DRCSubType == OtherDRCErrorCodes.DRCMultiRoute
          );
        CanInvokeDRC = false;
        if (
          filteredDRCConfig != null &&
          filteredDRCConfig.IsDisplayDRCConflict == '1'
        ) {
          if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
            objMedDRCVM = this.ConstructDRCMessage(this);
          }
          if (objMedDRCVM.DRCConflictDetail == null)
            objMedDRCVM.DRCConflictDetail =
              new ObservableCollection<DRCConflictDetail>();
          let objDRCConflictDetail: DRCConflictDetail =
            ObjectHelper.CreateObject(new DRCConflictDetail(), {
              ERRORCode: 'CC_OTHER',
              ERRORText: 'Other',
              DRCOtherErrorType: OtherDRCErrorCodes.DRCMultiRoute,
              ErrorMessage: Resource.DRCConflict.DRC_MultipleDrug,
            });
          objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
        }
      } else if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.CONDITIONAL,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
          ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
            (x) => x.DRCSubType == OtherDRCErrorCodes.DRCConditionalDose
          );
        CanInvokeDRC = false;
        if (
          filteredDRCConfig != null &&
          filteredDRCConfig.IsDisplayDRCConflict == '1'
        ) {
          if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
            objMedDRCVM = this.ConstructDRCMessage(this);
          }
          if (objMedDRCVM.DRCConflictDetail == null)
            objMedDRCVM.DRCConflictDetail =
              new ObservableCollection<DRCConflictDetail>();
          let objDRCConflictDetail: DRCConflictDetail =
            ObjectHelper.CreateObject(new DRCConflictDetail(), {
              ERRORCode: 'CC_OTHER',
              ERRORText: 'Other',
              DRCOtherErrorType: OtherDRCErrorCodes.DRCConditionalDose,
              ErrorMessage: Resource.DRCConflict.DRC_ConditionalDose,
            });
          objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
        }
      } else if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.TITRATED,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
          ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
            (x) => x.DRCSubType == OtherDRCErrorCodes.DRCTitratedDose
          );
        CanInvokeDRC = false;
        if (
          filteredDRCConfig != null &&
          filteredDRCConfig.IsDisplayDRCConflict == '1'
        ) {
          if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
            objMedDRCVM = this.ConstructDRCMessage(this);
          }
          if (objMedDRCVM.DRCConflictDetail == null)
            objMedDRCVM.DRCConflictDetail =
              new ObservableCollection<DRCConflictDetail>();
          let objDRCConflictDetail: DRCConflictDetail =
            ObjectHelper.CreateObject(new DRCConflictDetail(), {
              ERRORCode: 'CC_OTHER',
              ERRORText: 'Other',
              DRCOtherErrorType: OtherDRCErrorCodes.DRCTitratedDose,
              ErrorMessage: Resource.DRCConflict.DRC_TitratedDose,
            });
          objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
        }
      } else if (
        (this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
            Visibility.Visible) ||
        (!this.FormViewerDetails.BHasFormViewParams &&
          String.Compare(
            this.ItemMainType,
            CConstants.Formulary_Appliance,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0) ||
        (this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BHasFormViewParams &&
          !this.FormViewerDetails.BasicControls.Contains('CC_DOSE'))
      ) {
        let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
          ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
            (x) => x.DRCSubType == OtherDRCErrorCodes.DRCDose
          );
        CanInvokeDRC = false;
        if (
          filteredDRCConfig != null &&
          filteredDRCConfig.IsDisplayDRCConflict == '1'
        ) {
          if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
            objMedDRCVM = this.ConstructDRCMessage(this);
          }
          if (objMedDRCVM.DRCConflictDetail == null)
            objMedDRCVM.DRCConflictDetail =
              new ObservableCollection<DRCConflictDetail>();
          let objDRCConflictDetail: DRCConflictDetail =
            ObjectHelper.CreateObject(new DRCConflictDetail(), {
              ERRORCode: 'CC_OTHER',
              ERRORText: 'Other',
              DRCOtherErrorType: OtherDRCErrorCodes.DRCDose,
              ErrorMessage: Resource.DRCConflict.DRC_AdminMethod,
            });
          objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
        }
      }
      if (
        CanInvokeDRC &&
        ((PatientContext.Age == 0 &&
          DateTime.Equals(oReqInvokeDRCConflict.oDRCObjectBC.DOB, DateTime.MinValue)) ||
          (this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null &&
            (this.FormViewerDetails.BasicDetails.Route == null ||
              (this.FormViewerDetails.BasicDetails.Route != null &&
                String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.Route.DisplayText
                )))) ||
          ((String.IsNullOrEmpty(this.formViewerDetails.BasicDetails.Dose) ||
            this.formViewerDetails.BasicDetails.DoseUOM == null ||
            (this.formViewerDetails.BasicDetails.DoseUOM != null &&
              String.IsNullOrEmpty(
                this.formViewerDetails.BasicDetails.DoseUOM.DisplayText
              ))) &&
            this.formViewerDetails.BasicDetails.DoseType != null &&
            (String.Compare(
              this.formViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.NORMAL
            ) == 0 ||
              String.Compare(
                this.formViewerDetails.BasicDetails.DoseType.Value,
                DoseTypeCode.DOSAGERANGE
              ) == 0)) ||
          (this.formViewerDetails.BasicDetails.DoseType != null &&
            String.Compare(
              this.formViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE
            ) == 0 &&
            (this.formViewerDetails.BasicDetails.MultiDoseDetails == null ||
              (this.formViewerDetails.BasicDetails.MultiDoseDetails != null &&
                this.formViewerDetails.BasicDetails.MultiDoseDetails.Count ==
                  0))))
      ) {
        CanInvokeDRC = false;
        if (
          PatientContext.Age == 0 &&
          DateTime.Equals(oReqInvokeDRCConflict.oDRCObjectBC.DOB, DateTime.MinValue)
        ) {
          let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
            ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
              (x) => x.DRCSubType == OtherDRCErrorCodes.DRCPatientAge
            );
          if (
            filteredDRCConfig != null &&
            filteredDRCConfig.IsDisplayDRCConflict == '1'
          ) {
            if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
              objMedDRCVM = this.ConstructDRCMessage(this);
            }
            if (objMedDRCVM.DRCConflictDetail == null)
              objMedDRCVM.DRCConflictDetail =
                new ObservableCollection<DRCConflictDetail>();
            let objDRCConflictDetail: DRCConflictDetail =
              ObjectHelper.CreateObject(new DRCConflictDetail(), {
                ERRORCode: 'CC_OTHER',
                ERRORText: 'Other',
                DRCOtherErrorType: OtherDRCErrorCodes.DRCPatientAge,
                ErrorMessage: Resource.DRCConflict.DRC_PatientAge,
              });
            objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
          }
        }
        if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          (this.FormViewerDetails.BasicDetails.Route == null ||
            (this.FormViewerDetails.BasicDetails.Route != null &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.Route.DisplayText
              )))
        ) {
          let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
            ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
              (x) => x.DRCSubType == OtherDRCErrorCodes.DRCRoute
            );
          if (
            filteredDRCConfig != null &&
            filteredDRCConfig.IsDisplayDRCConflict == '1'
          ) {
            if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
              objMedDRCVM = this.ConstructDRCMessage(this);
            }
            if (objMedDRCVM.DRCConflictDetail == null)
              objMedDRCVM.DRCConflictDetail =
                new ObservableCollection<DRCConflictDetail>();
            let objDRCConflictDetail: DRCConflictDetail =
              ObjectHelper.CreateObject(new DRCConflictDetail(), {
                ERRORCode: 'CC_OTHER',
                ERRORText: 'Other',
                DRCOtherErrorType: OtherDRCErrorCodes.DRCRoute,
                ErrorMessage: Resource.DRCConflict.DRC_Route,
              });
            objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
          }
        }
        if (
          (String.IsNullOrEmpty(this.formViewerDetails.BasicDetails.Dose) ||
            this.formViewerDetails.BasicDetails.DoseUOM == null ||
            (this.formViewerDetails.BasicDetails.DoseUOM != null &&
              String.IsNullOrEmpty(
                this.formViewerDetails.BasicDetails.DoseUOM.DisplayText
              ))) &&
          this.formViewerDetails.BasicDetails.DoseType != null &&
          (String.Compare(
            this.formViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.NORMAL
          ) == 0 ||
            String.Compare(
              this.formViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.DOSAGERANGE
            ) == 0)
        ) {
          let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
            ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
              (x) => x.DRCSubType == OtherDRCErrorCodes.DRCDose
            );
          if (
            filteredDRCConfig != null &&
            filteredDRCConfig.IsDisplayDRCConflict == '1'
          ) {
            if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
              objMedDRCVM = this.ConstructDRCMessage(this);
            }
            if (objMedDRCVM.DRCConflictDetail == null)
              objMedDRCVM.DRCConflictDetail =
                new ObservableCollection<DRCConflictDetail>();
            let objDRCConflictDetail: DRCConflictDetail =
              ObjectHelper.CreateObject(new DRCConflictDetail(), {
                ERRORCode: 'CC_OTHER',
                ERRORText: 'Other',
                DRCOtherErrorType: OtherDRCErrorCodes.DRCDose,
                ErrorMessage: Resource.DRCConflict.DRC_DoseValue,
              });
            objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
          }
        } else if (
          this.formViewerDetails.BasicDetails.DoseType != null &&
          String.Compare(
            this.formViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE
          ) == 0 &&
          (this.formViewerDetails.BasicDetails.MultiDoseDetails == null ||
            (this.formViewerDetails.BasicDetails.MultiDoseDetails != null &&
              this.formViewerDetails.BasicDetails.MultiDoseDetails.Count == 0))
        ) {
          let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData =
            ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
              (x) => x.DRCSubType == OtherDRCErrorCodes.DRCDose
            );
          if (
            filteredDRCConfig != null &&
            filteredDRCConfig.IsDisplayDRCConflict == '1'
          ) {
            if (String.IsNullOrEmpty(objMedDRCVM.DRCMessage)) {
              objMedDRCVM = this.ConstructDRCMessage(this);
            }
            if (objMedDRCVM.DRCConflictDetail == null)
              objMedDRCVM.DRCConflictDetail =
                new ObservableCollection<DRCConflictDetail>();
            let objDRCConflictDetail: DRCConflictDetail =
              ObjectHelper.CreateObject(new DRCConflictDetail(), {
                ERRORCode: 'CC_OTHER',
                ERRORText: 'Other',
                DRCOtherErrorType: OtherDRCErrorCodes.DRCDose,
                ErrorMessage: Resource.DRCConflict.DRC_DoseValue,
              });
            objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
          }
        }
      }
      if (this.ParentbaseVM != null && QueryStringInfo.SelPrescItemOID >= 1) {
        this.ParentbaseVM.IsInprogressDRC = true;
      }
      if (CanInvokeDRC) {
        let ServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
          new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
        ServiceProxy.InvokeDRCConflictCompleted = (s, e) => {
          this.serviceProxy_InvokeDRCConflictCompleted(s, e);
        };
        ServiceProxy.InvokeDRCConflictAsync(oReqInvokeDRCConflict);
        Busyindicator.SetStatusBusy('DRCChangeDoseType');
      } else {
        if (this.FormViewerDetails.PresItemDRCVM != null) {
          this.FormViewerDetails.PresItemDRCVM.MedDRCVM =
            new ObservableCollection<MedDRCVM>();
          if (
            objMedDRCVM != null &&
            objMedDRCVM.DRCConflictDetail != null &&
            objMedDRCVM.DRCConflictDetail.Count > 0
          ) {
            objMedDRCVM.PatientWeight = PatientContext.PatientWEIGHT;
            objMedDRCVM.PatientBSA = PatientContext.BSA;
            this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Add(objMedDRCVM);
          }
        }
        if (
          this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes !=
            null &&
          this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes
            .Count > 0 &&
          this.FormViewerDetails.BasicDetails.DRCDosetype == null
        ) {
          this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
            true;
          this.FormViewerDetails.BasicDetails.DRCDosetype =
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
              (c) =>
                String.Equals(
                  c.Value,
                  DRCDoseTypes.Systemdefined,
                  StringComparison.InvariantCultureIgnoreCase
                )
            )
              .Select((s) => s)
              .FirstOrDefault();
          this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
            false;
        }
        if (this.ActionCode == ActivityTypes.Amend) {
          let oFilterDRCDoseType: string = String.Empty;
          this.FilteringDRCAndDefaultDRCDoseTypeInAmend(oFilterDRCDoseType);
        }
        let DRCCheckData: ObservableCollection<IPPMAManagePrescSer.DRCConfigData> =
          this.GetDRCCheckData(this.FormViewerDetails.PresItemDRCVM.MedDRCVM);
        let _lnResult: number = this.FillDRCResult(DRCCheckData);
        if (
          _lnResult == 1 &&
          this.formViewerDetails.PresItemDRCVM.MedDRCVM != null &&
          this.formViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0
        ) {
          objMedDRCVM =
            this.formViewerDetails.PresItemDRCVM.MedDRCVM.FirstOrDefault();
        }
        this.SetDRCBehaviour(DRCCheckData, String.Empty);
        this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields = null;
        this.ePrescribeSource = PrescribeSource.None;
        if (
          this.RefreshDRCConflictICONEvent != null &&
          !this.bDRCConflictGeToAddtoResolve
        ) {
          this.RefreshDRCConflictICONEvent();
        }
        let _IsAmendFromPrescriptionChart: boolean = false;
        if (QueryStringInfo.SelPrescItemOID > 0) {
          _IsAmendFromPrescriptionChart = true;
        }
        if (
          this.DRCConflictsDelegateCompleted != null &&
          !this.bDRCConflictGeToAddtoResolve
        ) {
          this.DRCConflictsDelegateCompleted();
        } else if (
          (this.ActionCode == ActivityTypes.Reorder ||
            (this.FormViewerDetails.BasicDetails != null &&
              !this.FormViewerDetails.BasicDetails.IsShowFormviwer &&
              this.ActionCode == ActivityTypes.Prescribe)) &&
          this.bDRCConflictGeToAddtoResolve &&
          this.ParentbaseVM != null
        ) {
          if (
            this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionType.Value
            ) &&
            (String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.CONTINUOUS,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.SINGLEDOSEVOLUME,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.FLUID,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0) &&
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder > 0
          ) {
            this.bDRCConflictGeToAddtoResolve = false;
            this.ParentbaseVM.AddtoResolutionGriddone = true;
            if (
              this.ParentbaseVM.ToCheckForZeroChangingDoseTime(
                this.FormViewerDetails.BasicDetails.MultiDoseDetails
              )
            ) {
              this.ParentbaseVM.ShowFormViewer();
              if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
                this.FormViewerDetails.BasicDetails.UnSubscribeEprescribeEvent();
              }
            } else {
              this.ParentbaseVM.AddToResolveGrid();
              if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
                this.FormViewerDetails.BasicDetails.EPrescribeRuleCompletedEvent();
              }
            }
          } else {
            this.bDRCConflictGeToAddtoResolve = false;
            this.ParentbaseVM.AddtoResolutionGriddone = true;
            let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData = null;
            if (
              ProfileData.MedConflictConfig.oDRCConfigData != null &&
              ProfileData.MedConflictConfig.oDRCConfigData.Count > 0 &&
              objMedDRCVM.DRCConflictDetail != null &&
              objMedDRCVM.DRCConflictDetail.Count > 0
            ) {
              filteredDRCConfig =
                ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefaultCustomPredicate(
                  (x) =>
                    x.DRCSubType ==
                    objMedDRCVM.DRCConflictDetail.FirstOrDefault()
                      .DRCOtherErrorType
                );
            }
            if (
              this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon ==
                ConflictIcons.Red ||
              (filteredDRCConfig != null &&
                filteredDRCConfig.IsOpenDRCTab.Equals('1'))
            ) {
              if (
                (((this.ePrescribeSource as PrescribeSource) ==
                  PrescribeSource.DOS &&
                  this.ActionCode == ActivityTypes.Prescribe) ||
                  this.ActionCode == ActivityTypes.Reorder) &&
                (objMedDRCVM.DRCConflictDetail == null ||
                  (objMedDRCVM.DRCConflictDetail != null &&
                    objMedDRCVM.DRCConflictDetail.Count == 0))
              ) {
                this.ParentbaseVM.AddToResolveGrid();
                if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
                  this.FormViewerDetails.BasicDetails.EPrescribeRuleCompletedEvent();
                }
              } else {
                this.ParentbaseVM.ShowFormViewer();
                if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
                  this.FormViewerDetails.BasicDetails.UnSubscribeEprescribeEvent();
                }
              }
            } else {
              this.bDRCConflictGeToAddtoResolve = false;
              this.ParentbaseVM.AddtoResolutionGriddone = true;
              this.ParentbaseVM.AddToResolveGrid(_IsAmendFromPrescriptionChart);
              if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
                this.FormViewerDetails.BasicDetails.EPrescribeRuleCompletedEvent();
              }
            }
          }
        } else if (
          this.bDRCConflictGeToAddtoResolve &&
          this.ParentbaseVM != null
        ) {
          this.bDRCConflictGeToAddtoResolve = false;
          this.ParentbaseVM.AddtoResolutionGriddone = true;
          if (
            this.ParentbaseVM.ToCheckForZeroChangingDoseTime(
              this.FormViewerDetails.BasicDetails.MultiDoseDetails
            )
          ) {
            this.ParentbaseVM.ShowFormViewer();
            if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
              this.FormViewerDetails.BasicDetails.UnSubscribeEprescribeEvent();
            }
          } else {
            this.ParentbaseVM.AddToResolveGrid();
            if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
              this.FormViewerDetails.BasicDetails.EPrescribeRuleCompletedEvent();
            }
          }
        }
        this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields = null;
        this.ePrescribeSource = PrescribeSource.None;
      }
    }
  }
  private ConstructDRCMessage(oVm: PrescriptionItemVM): MedDRCVM {
    let objMedDRCVM: MedDRCVM = new MedDRCVM();
    let sbDRCMessage: StringBuilder = new StringBuilder();
    let DrugName: string = String.Empty;
    objMedDRCVM.DRCDefDoseTypeCode = 'DDT-0';
    objMedDRCVM.DRCDefDoseType = 'General';
    objMedDRCVM.DRCOutCome = false;
    if (
      oVm != null &&
      oVm.FormViewerDetails != null &&
      oVm.FormViewerDetails.BasicDetails != null
    ) {
      let IsInfDurg: boolean = false;
      if (
        PatientContext.IsINFUSIONON &&
        oVm != null &&
        oVm.FormViewerDetails != null &&
        oVm.FormViewerDetails.BasicDetails != null &&
        oVm.FormViewerDetails.BasicDetails.InfusionType != null &&
        !String.IsNullOrEmpty(
          oVm.FormViewerDetails.BasicDetails.InfusionType.Value
        )
      ) {
        IsInfDurg = true;
      }
      if (
        !String.IsNullOrEmpty(oVm.FormViewerDetails.BasicDetails.itemSubType) &&
        String.Equals(
          oVm.FormViewerDetails.BasicDetails.itemSubType,
          CConstants.SUBTYPE,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        DrugName = Resource.DRCConflict.DRC_MCIName;
        if (
          oVm.FormViewerDetails.BasicDetails.DosageForm != null &&
          !String.IsNullOrEmpty(
            oVm.FormViewerDetails.BasicDetails.DosageForm.DisplayText
          )
        ) {
          DrugName +=
            '-' +
            oVm.FormViewerDetails.BasicDetails.DosageForm.DisplayText +
            (oVm.FormViewerDetails.BasicDetails.Route != null &&
            !String.IsNullOrEmpty(
              oVm.FormViewerDetails.BasicDetails.Route.Value
            )
              ? '-' + oVm.FormViewerDetails.BasicDetails.Route.DisplayText
              : String.Empty);
        }
      } else {
        if (
          String.Compare(
            oVm.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.CATALOGUEITEM,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          String.Equals(
            oVm.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.ACTUALMOIETY,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          DrugName = oVm.FormViewerDetails.BasicDetails.IdentifyingName;
          if (
            oVm.FormViewerDetails.BasicDetails.Strength != null &&
            !String.IsNullOrEmpty(
              oVm.FormViewerDetails.BasicDetails.Strength.Value
            )
          ) {
            DrugName +=
              ' - ' + oVm.FormViewerDetails.BasicDetails.Strength.Value;
          }
          if (
            !IsInfDurg &&
            oVm.FormViewerDetails.BasicDetails.DosageForm != null &&
            !String.IsNullOrEmpty(
              oVm.FormViewerDetails.BasicDetails.DosageForm.DisplayText
            )
          ) {
            DrugName +=
              ' - ' +
              oVm.FormViewerDetails.BasicDetails.DosageForm.DisplayText +
              (oVm.FormViewerDetails.BasicDetails.Route != null &&
              !String.IsNullOrEmpty(
                oVm.FormViewerDetails.BasicDetails.Route.Value
              )
                ? ' - ' + oVm.FormViewerDetails.BasicDetails.Route.DisplayText
                : String.Empty);
          } else {
            DrugName +=
              oVm.FormViewerDetails.BasicDetails.Route != null &&
              !String.IsNullOrEmpty(
                oVm.FormViewerDetails.BasicDetails.Route.Value
              )
                ? ' - ' + oVm.FormViewerDetails.BasicDetails.Route.DisplayText
                : String.Empty;
          }
        } else {
          DrugName =
            oVm.FormViewerDetails.BasicDetails.IdentifyingName +
            (oVm.FormViewerDetails.BasicDetails.Route != null &&
            !String.IsNullOrEmpty(
              oVm.FormViewerDetails.BasicDetails.Route.Value
            )
              ? ' - ' + oVm.FormViewerDetails.BasicDetails.Route.DisplayText
              : String.Empty);
        }
      }
      if (
        oVm.FormViewerDetails.BasicDetails.Route != null &&
        !String.IsNullOrEmpty(oVm.FormViewerDetails.BasicDetails.Route.Value)
      ) {
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append('by the ');
        sbDRCMessage.Append(
          oVm.FormViewerDetails.BasicDetails.Route.DisplayText
        );
        sbDRCMessage.Append(' ' + 'route');
      }
      let sbIndication: StringBuilder = null;
      if (
        !String.IsNullOrEmpty(
          oVm.FormViewerDetails.BasicDetails.PatientProblemCode
        )
      ) {
        sbIndication = new StringBuilder();
        let strProb: string[] =
          this.FormViewerDetails.BasicDetails.PatientProblemCode.Split('!');
        if (strProb.length > 0) {
          let strIndication: string[];
          for (let i: number = 0; i < strProb.length; i++) {
            strIndication = strProb[i].Split('#');
            if (
              strIndication[0] != null &&
              String.Compare(
                strIndication[0].ToString(),
                'INDICATION',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            ) {
              sbIndication.Append(strIndication[1]);
              sbIndication.Append(',');
            }
          }
        }
      }
      if (sbIndication != null) {
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append('for');
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append(sbIndication);
      }
      if (
        !String.IsNullOrEmpty(PatientContext.DOB) &&
        !String.Equals(
          PatientContext.DOB,
          DateTime.MinValue.ToString(),
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append('for a');
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append(
          this.CalculatePatAgeUnit(Convert.ToDateTime(PatientContext.DOB))
        );
        sbDRCMessage.Append(',');
        if (sbDRCMessage != null && PatientContext.IsEstimatedDOB) {
          let sDRCMessage: string = sbDRCMessage.ToString().EndsWith(',')
            ? sbDRCMessage.ToString().Substring(0, sbDRCMessage.Length - 1)
            : sbDRCMessage.ToString();
          sbDRCMessage = new StringBuilder(sDRCMessage);
          sbDRCMessage.Append(Resource.DRCConflict.DRC_Estimated);
          sbDRCMessage.Append(',');
        }
      }
      if (
        !String.IsNullOrEmpty(PatientContext.PatientWEIGHT) &&
        String.Compare(PatientContext.PatientWEIGHT, '0') != 0
      ) {
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append(PatientContext.PatientWEIGHT);
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append('Kg');
        if (PatientContext.isEstimatedWeight) {
          sbDRCMessage.Append(' (Estimated)');
        }
        if (!String.IsNullOrEmpty(PatientContext.PatientWeightRecordedOn)) {
          sbDRCMessage.Append(' (');
          sbDRCMessage.Append(Resource.DRCConflict.DRC_WeightRecordedOn);
          sbDRCMessage.Append(' ');
          sbDRCMessage.Append(PatientContext.PatientWeightRecordedOn + ')');
        }
        sbDRCMessage.Append(',');
      }
      if (
        !String.IsNullOrEmpty(PatientContext.PatientHEIGHT) &&
        !String.Equals(
          PatientContext.PatientHEIGHT,
          '0',
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append(PatientContext.PatientHEIGHT);
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append('m');
        if (PatientContext.isEstimatedHeight) {
          sbDRCMessage.Append(' (Estimated)');
        }
        if (!String.IsNullOrEmpty(PatientContext.PatientHeightRecordedOn)) {
          sbDRCMessage.Append(' (');
          sbDRCMessage.Append(Resource.DRCConflict.DRC_WeightRecordedOn);
          sbDRCMessage.Append(' ');
          sbDRCMessage.Append(PatientContext.PatientHeightRecordedOn + ')');
        }
        sbDRCMessage.Append(',');
      }
      if (
        !String.IsNullOrEmpty(PatientContext.BSA) &&
        String.Compare(PatientContext.BSA, '0') != 0
      ) {
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append(PatientContext.BSA);
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append('m2');
        if (!String.IsNullOrEmpty(PatientContext.BSAFormula)) {
          sbDRCMessage.Append(' - ');
          sbDRCMessage.Append(PatientContext.BSAFormula);
        }
      }
      if (!String.IsNullOrEmpty(sbDRCMessage.ToString())) {
        let sDRCMessage: string = sbDRCMessage.ToString().EndsWith(',')
          ? sbDRCMessage.ToString().Substring(0, sbDRCMessage.Length - 1)
          : sbDRCMessage.ToString();
        sbDRCMessage = new StringBuilder(sDRCMessage);
        sbDRCMessage.Append(' ');
        sbDRCMessage.Append('patient.');
      }
      if (!String.IsNullOrEmpty(sbDRCMessage.ToString())) {
        objMedDRCVM.DRCMessage = String.Format(
          Resource.DRCConflict.DRC_GenericErrMsg +
            ' ' +
            Resource.DRCConflict.DRC_GenericErrMsg_Extends,
          DrugName,
          sbDRCMessage.ToString()
        );
      } else {
        objMedDRCVM.DRCMessage = String.Format(
          Resource.DRCConflict.DRC_GenericErrMsg,
          DrugName
        );
      }
    }
    return objMedDRCVM;
  }
  public CalculatePatAgeUnit(dttmDOB: DateTime): string {
    let PatAgeUnitFormat: string = String.Empty;
    let CurrentDTTM: DateTime = CommonBB.GetServerDateTime();
    if (DateTime.NotEquals(dttmDOB, DateTime.MinValue)) {
      let ApproxDaysPerMonth: number = 30;
      let ApproxDaysPerYear: number = 365;
      let iTotalDays: number = 0;
      let iYear: number =
        CurrentDTTM.Year != dttmDOB.Year
          ? dttmDOB.Month <= CurrentDTTM.Month
            ? CurrentDTTM.AddYears(-dttmDOB.Year).Year
            : CurrentDTTM.AddYears(-dttmDOB.Year).Year - 1
          : 0;
      let iMonths: number =
        CurrentDTTM.Month != dttmDOB.Month
          ? dttmDOB.Day <= CurrentDTTM.Day
            ? CurrentDTTM.AddMonths(-dttmDOB.Month).Month
            : CurrentDTTM.AddMonths(-dttmDOB.Month).Month - 1
          : 0;
      let iDays: number = 0;
      if (CurrentDTTM.Month == dttmDOB.Month && dttmDOB.Day > CurrentDTTM.Day) {
        iYear -= 1;
        iMonths = 11;
        if (dttmDOB.Day != CurrentDTTM.Day)
          iDays = CurrentDTTM.AddDays(-dttmDOB.Day).Day - (1 % 30);
      } else {
        if (dttmDOB.Day > CurrentDTTM.Day && dttmDOB.Year == CurrentDTTM.Year) {
          iDays = CurrentDTTM.AddDays(-dttmDOB.Day).Day;
        } else if (
          dttmDOB.Day > CurrentDTTM.Day &&
          dttmDOB.Year != CurrentDTTM.Year
        ) {
          iDays = CurrentDTTM.AddDays(-dttmDOB.Day).Day;
        } else if (dttmDOB.Day < CurrentDTTM.Day) {
          iDays = CurrentDTTM.AddDays(-dttmDOB.Day).Day;
        }
      }
      if (iYear > 0) iTotalDays = iYear * ApproxDaysPerYear;
      if (iMonths > 0) iTotalDays += iMonths * ApproxDaysPerMonth;
      if (iDays > 0) iTotalDays += iDays;
      PatAgeUnitFormat =
        (iYear > 0 ? iYear + ' year(s) ' : String.Empty) +
        (iMonths > 0 ? iMonths + ' month(s) ' : String.Empty) +
        (iDays > 0 ? iDays + ' day(s)' : String.Empty);
    }
    return PatAgeUnitFormat;
  }
  public SetDRCDoseType(): string {
    let oFilterDRCDoseType: string = String.Empty;
    if (
      this.formViewerDetails != null &&
      this.formViewerDetails.BasicDetails != null
    ) {
      if (
        this.ActionCode == ActivityTypes.Prescribe ||
        this.ActionCode == ActivityTypes.Reorder
      ) {
        if (
          this.formViewerDetails.BasicDetails.DRCDosetype != null &&
          !String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.DRCDosetype.Value
          ) &&
          !String.Equals(
            this.formViewerDetails.BasicDetails.DRCDosetype.Value,
            DRCDoseTypes.Systemdefined,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          oFilterDRCDoseType =
            this.formViewerDetails.BasicDetails.DRCDosetype.Value;
        } else if (
          this.formViewerDetails.BasicDetails.Frequency != null &&
          this.formViewerDetails.BasicDetails.Frequency.Tag != null &&
          this.formViewerDetails.BasicDetails.Frequency.Tag instanceof Array
        ) {
          if (
            this.formViewerDetails.BasicDetails.DoseType != null &&
            !String.IsNullOrEmpty(
              this.formViewerDetails.BasicDetails.DoseType.Value
            ) &&
            String.Equals(
              this.formViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            oFilterDRCDoseType = DRCDoseTypes.Maintenance;
          } else {
            let FreqDetails: string[] = ObjectHelper.CreateType<string[]>(
              this.formViewerDetails.BasicDetails.Frequency.Tag,
              'string[]'
            );
            if (
              FreqDetails != null &&
              FreqDetails.Count() > 1 &&
              FreqDetails[1] != null &&
              String.Equals(
                FreqDetails[1],
                CConstants.OnceOnlyFrequency,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              oFilterDRCDoseType = DRCDoseTypes.Single;
            } else {
              oFilterDRCDoseType = DRCDoseTypes.Maintenance;
            }
          }
          if (
            String.Equals(
              oFilterDRCDoseType,
              DRCDoseTypes.Single,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              oFilterDRCDoseType,
              DRCDoseTypes.Maintenance,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
              true;
            this.FormViewerDetails.BasicDetails.DRCDosetype =
              this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
                (c) =>
                  String.Equals(
                    c.Value,
                    DRCDoseTypes.Systemdefined,
                    StringComparison.InvariantCultureIgnoreCase
                  )
              )
                .Select((s) => s)
                .FirstOrDefault();
          }
        } else {
          oFilterDRCDoseType = DRCDoseTypes.Maintenance;
          this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
            true;
          if (
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes !=
            null
          )
            this.FormViewerDetails.BasicDetails.DRCDosetype =
              this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
                (c) =>
                  String.Equals(
                    c.Value,
                    DRCDoseTypes.Systemdefined,
                    StringComparison.InvariantCultureIgnoreCase
                  )
              )
                .Select((s) => s)
                .FirstOrDefault();
        }
        this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
          false;
      } else if (this.ActionCode == ActivityTypes.Amend) {
        oFilterDRCDoseType = this.FilteringDRCAndDefaultDRCDoseTypeInAmend(oFilterDRCDoseType);
      }
    }
    return oFilterDRCDoseType;
  }
  public FillDRCResult(
    oDRCConfigData: ObservableCollection<IPPMAManagePrescSer.DRCConfigData>,
    _IsRefereshedDRCICON: boolean = false
  ): number {
    let _behavourType: string = String.Empty;
    let _IsOpenDRCTab: string = '0';
    if (
      (this.FormViewerDetails.PresItemDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM == null) ||
      (this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0) ||
      (this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Where(
          (s) => s.DRCConflictDetail != null && s.DRCConflictDetail.Count > 0
        ).Count() == 0)
    ) {
      let oMedDRCVM: MedDRCVM = new MedDRCVM();
      if (
        ProfileData.MedConflictConfig != null &&
        ProfileData.MedConflictConfig.oDRCConfigData != null &&
        ProfileData.MedConflictConfig.oDRCConfigData.Count > 0
      ) {
        oDRCConfigData =
          new ObservableCollection<IPPMAManagePrescSer.DRCConfigData>(
            ProfileData.MedConflictConfig.oDRCConfigData.Where((S) =>
              String.Equals(
                S.DRCSubType,
                'CC_NODRCNOTSUPRT9',
                StringComparison.InvariantCultureIgnoreCase
              )
            )
          );
        if (oDRCConfigData != null && oDRCConfigData.FirstOrDefault() != null) {
          _behavourType = oDRCConfigData.FirstOrDefault().BehaviourType;
          _IsOpenDRCTab = oDRCConfigData.FirstOrDefault().IsOpenDRCTab;
        }
      }
      if (String.IsNullOrEmpty(oMedDRCVM.DRCMessage)) {
        oMedDRCVM = this.ConstructDRCMessage(this);
      }
      if (oMedDRCVM.DRCConflictDetail == null)
        oMedDRCVM.DRCConflictDetail =
          new ObservableCollection<DRCConflictDetail>();
          let objDRCConflictDetail: DRCConflictDetail;
          if(this.isChangeDoseExistInSV)
            {              
              if(ProfileData.MedConflictConfig.oDRCConfigData != null && ProfileData.MedConflictConfig.oDRCConfigData.Count > 0)
              {
                let CHDSVConfigAvailable: boolean = false;
                ProfileData.MedConflictConfig.oDRCConfigData.forEach((oDrcCOnflict) => {
                  if(String.Equals(oDrcCOnflict.DRCSubType,"CC_SVCHANGDOSE") && !CHDSVConfigAvailable){
                    CHDSVConfigAvailable = true;        
                  }
                });
                if(!CHDSVConfigAvailable){
                  let oDRCConfigDataCD: IPPMAManagePrescSer.DRCConfigData = ObjectHelper.CreateObject(new IPPMAManagePrescSer.DRCConfigData(), {
                    //OID: number;
                    DRCType: "DDT-0",
                    DRCTypeDesc: "General",
                    DRCSubType: OtherDRCErrorCodes.DRCSVChangingDose,
                    DRCSubTypeDesc: Resource.DRCConflict.DRC_ChangeDoseInSteppedDoseType,
                    BehaviourType: CConstants.DRCBehaviourType4,
                    BehaviourTypeDesc: "Type 4",
                    IsDisplayDRCConflict: "1",
                    DisplaySeqNumber: 100,
                    IsOpenDRCTab: "1"
                });
                ProfileData.MedConflictConfig.oDRCConfigData.Add(oDRCConfigDataCD);
                }
              }
              objDRCConflictDetail =
                ObjectHelper.CreateObject(new DRCConflictDetail(), {
                  ERRORCode: 'CC_OTHER',
                  ERRORText: 'Other',
                  DRCOtherErrorType: OtherDRCErrorCodes.DRCSVChangingDose,
                  ErrorMessage: Resource.DRCConflict.DRC_ChangeDoseInSteppedDoseType,
		              DRCOuetcome: "CC_Fail",
                  BehaviourType: CConstants.DRCBehaviourType4
                });
                this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Amber;
            }
          else {
              objDRCConflictDetail = ObjectHelper.CreateObject(
              new DRCConflictDetail(),
              {
                ERRORCode: 'CC_OTHER',
                ERRORText: 'Other',
                DRCOtherErrorType: OtherDRCErrorCodes.NoDRCResult,
                ErrorMessage: Resource.DRCConflict.DRC_NoResult,
                BehaviourType: _behavourType,
              }
            );
          }
      oMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM =
        new ObservableCollection<MedDRCVM>();
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Add(oMedDRCVM);
      if(!this.isChangeDoseExistInSV)
        this.FormViewerDetails.PresItemDRCVM.BehaviourType = CConstants.DRCBehaviourType5;
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable = true;
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = false;
      return 1;
    }
    return 0;
  }
  serviceProxy_InvokeDRCConflictCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.InvokeDRCConflictCompletedEventArgs
  ): void {
    let oRes: IPPMAManagePrescSer.CResMsgInvokeDRCConflict = e.Result;
    let TmpMedDRCVM: ObservableCollection<MedDRCVM> =
      new ObservableCollection<MedDRCVM>();
    Busyindicator.SetStatusIdle('DRCChangeDoseType');
    if(ProfileData.MedConflictConfig.oDRCConfigData != null && ProfileData.MedConflictConfig.oDRCConfigData.Count > 0)
    {
      let CHDSVConfigAvailable: boolean = false;
      ProfileData.MedConflictConfig.oDRCConfigData.forEach((oDrcCOnflict) => {
        if(String.Equals(oDrcCOnflict.DRCSubType,"CC_SVCHANGDOSE") && !CHDSVConfigAvailable){
          CHDSVConfigAvailable = true;        
        }
      });
      if(!CHDSVConfigAvailable){
        let oDRCConfigDataCD: IPPMAManagePrescSer.DRCConfigData = ObjectHelper.CreateObject(new IPPMAManagePrescSer.DRCConfigData(), {
           //OID: number;
            DRCType: "DDT-0",
            DRCTypeDesc: "General",
            DRCSubType: OtherDRCErrorCodes.DRCSVChangingDose,
            DRCSubTypeDesc: Resource.DRCConflict.DRC_ChangeDoseInSteppedDoseType,
            BehaviourType: CConstants.DRCBehaviourType4,
            BehaviourTypeDesc: "Type 4",
            IsDisplayDRCConflict: "1",
            DisplaySeqNumber: 100,
            IsOpenDRCTab: "1"
      });
      ProfileData.MedConflictConfig.oDRCConfigData.Add(oDRCConfigDataCD);
      }
    }
    if (
      oRes != null &&
      oRes.oDRCConflicts != null &&
      oRes.oDRCConflicts.Count > 0 &&
      this.FormViewerDetails.PresItemDRCVM != null
    ) {
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM =
        new ObservableCollection<MedDRCVM>();
      let oFilterDRCDoseType: string = String.Empty;
      let IsToolTipDRCDosetype: string = String.Empty;
      oFilterDRCDoseType = this.SetDRCDoseType();
      let oFilterDRCConflicts = oRes.oDRCConflicts
        .Where(
          (c) =>
            c != null &&
            !String.IsNullOrEmpty(c.DRCDoseTypeCode) &&
            !String.IsNullOrEmpty(oFilterDRCDoseType) &&
            ((String.Equals(
              oFilterDRCDoseType,
              DRCDoseTypes.Systemdefined,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
              (String.Equals(
                c.DRCDoseTypeCode,
                DRCDoseTypes.Single,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
                String.Equals(
                  c.DRCDoseTypeCode,
                  DRCDoseTypes.Maintenance,
                  StringComparison.InvariantCultureIgnoreCase
                ))) ||
              String.Equals(
                c.DRCDoseTypeCode,
                oFilterDRCDoseType,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              String.Equals(
                c.DRCDoseTypeCode,
                DRCDoseTypes.General,
                StringComparison.InvariantCultureIgnoreCase
              ))
        )
        .Select((s) => s);
      let filteredDRCConfig: IPPMAManagePrescSer.DRCConfigData = null;
      if (
        ProfileData.MedConflictConfig.oDRCConfigData != null &&
        ProfileData.MedConflictConfig.oDRCConfigData.Count > 0
      ) {
        filteredDRCConfig =
          ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefault((x) =>
            String.Equals(
              x.DRCSubType,
              CConstants.NODRCDATA,
              StringComparison.InvariantCultureIgnoreCase
            )
          );
      }
      if (
        filteredDRCConfig != null &&
        filteredDRCConfig.IsDisplayDRCConflict == '1' &&
        (oFilterDRCConflicts == null || oFilterDRCConflicts.Count() == 0)
      ) {
        let oTempDRCConflictlst: ObservableCollection<IPPMAManagePrescSer.DRCConflicts> =
          new ObservableCollection<IPPMAManagePrescSer.DRCConflicts>();
        let oTempDRCConflicts: IPPMAManagePrescSer.DRCConflicts =
          new IPPMAManagePrescSer.DRCConflicts();
        let objMedDRCVM: MedDRCVM = new MedDRCVM();
        oTempDRCConflicts.DRCDoseType = Resource.DRCConflict.DRC_Title;
        oTempDRCConflicts.DRCDoseTypeCode = DRCDoseTypes.General;
        objMedDRCVM = this.ConstructDRCMessage(this);
        if (
          objMedDRCVM != null &&
          !String.IsNullOrEmpty(objMedDRCVM.DRCMessage)
        ) {
          oTempDRCConflicts.DRCErrorTittle = objMedDRCVM.DRCMessage;
          let sDrug: string =
            this.formViewerDetails.BasicDetails != null &&
            !String.IsNullOrEmpty(
              this.formViewerDetails.BasicDetails.IdentifyingName
            )
              ? this.formViewerDetails.BasicDetails.IdentifyingName
              : String.Empty;
          let oTempDRCErrorlst: ObservableCollection<IPPMAManagePrescSer.DRCError> =
            new ObservableCollection<IPPMAManagePrescSer.DRCError>();
          let oDRCError: IPPMAManagePrescSer.DRCError =
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.DRCError(), {
              DRCErrorType: CConstants.Other,
              DRCOtherErrorType: CConstants.NODRCDATA,
              DRCErrorMsg: String.Format(
                Resource.DRCConflict.DRC_GeneralDoseTypeError,
                sDrug
              ),
              DRCOutcome: '2',
              DRCErrorCode: CConstants.NOT_EXIST_DRCDATA,
            });
          oTempDRCErrorlst.Add(oDRCError);
          if (
            oTempDRCErrorlst != null &&
            oTempDRCErrorlst.Count > 0 &&
            oTempDRCConflicts != null
          ) {
            oTempDRCConflicts.DRCError = oTempDRCErrorlst;
            oTempDRCConflictlst.Add(oTempDRCConflicts);
            oFilterDRCConflicts = oTempDRCConflictlst.AsEnumerable();
          }
        }
      }
      if (oFilterDRCConflicts != null && oFilterDRCConflicts.Count() > 0) {
        oFilterDRCConflicts.forEach((oDrcCOnflict) => {
          let objMedDRCVM: MedDRCVM = new MedDRCVM();
          let objDRCConflictDetail: DRCConflictDetail;
          if (!String.IsNullOrEmpty(oDrcCOnflict.DRCDoseType))
            objMedDRCVM.DRCDefDoseType = oDrcCOnflict.DRCDoseType;
          if (!String.IsNullOrEmpty(oDrcCOnflict.DRCDoseTypeCode)) {
            objMedDRCVM.DRCDefDoseTypeCode = oDrcCOnflict.DRCDoseTypeCode;
          }
          if (!String.IsNullOrEmpty(oDrcCOnflict.DRCErrorTittle))
            objMedDRCVM.DRCMessage = oDrcCOnflict.DRCErrorTittle;
          objMedDRCVM.PatientBSA = PatientContext.BSA;
          objMedDRCVM.PatientWeight = PatientContext.PatientWEIGHT;
          if (
            oDrcCOnflict.DRCError != null &&
            oDrcCOnflict.DRCError.Count > 0
          ) {
            let IsMaxDoseFail: boolean = false;
            let DRCOuetcome = oDrcCOnflict.DRCError.Where(
              (outDrc) =>
                !String.IsNullOrEmpty(outDrc.DRCOutcome) &&
                String.Compare(outDrc.DRCOutcome, 'CC_PASS') == 0
            ).Select((outDrc) => outDrc);
            if (DRCOuetcome != null && DRCOuetcome.Count() > 0) {
              objMedDRCVM.DRCOutCome = true;
            } else {
              objMedDRCVM.DRCOutCome = false;
            }
            let DRCMaxDoseOutcome = oDrcCOnflict.DRCError.Where(
              (outDrc) =>
                !String.IsNullOrEmpty(outDrc.DRCOutcome) &&
                String.Compare(outDrc.DRCOutcome, 'CC_Fail') == 0 &&
                !String.IsNullOrEmpty(outDrc.DRCErrorType) &&
                String.Compare(outDrc.DRCErrorType, 'CC_MAXDOSE') == 0
            ).Select((outDrc) => outDrc);
            if (DRCMaxDoseOutcome != null && DRCMaxDoseOutcome.Count() > 0) {
              IsMaxDoseFail = true;
            }
            objMedDRCVM.DRCConflictDetail =
              new ObservableCollection<DRCConflictDetail>();
            oDrcCOnflict.DRCError.forEach((oDrcError) => {
              objDRCConflictDetail = new DRCConflictDetail();
              if (!String.IsNullOrEmpty(oDrcError.DRCErrorType)) {
                objDRCConflictDetail.ERRORCode = oDrcError.DRCErrorType;
                if (
                  DRCErrorCodeConceptCodeData.ConceptCodes != null &&
                  DRCErrorCodeConceptCodeData.ConceptCodes.Count > 0
                ) {
                  objDRCConflictDetail.ERRORText =
                    DRCErrorCodeConceptCodeData.ConceptCodes.Where(
                      (x) => x.Value == oDrcError.DRCErrorType
                    ).FirstOrDefault().DisplayText;
                }
              }
              if (!String.IsNullOrEmpty(oDrcError.DRCOtherErrorType))
                objDRCConflictDetail.DRCOtherErrorType =
                  oDrcError.DRCOtherErrorType;
              if (!String.IsNullOrEmpty(oDrcError.DRCErrorMsg))
                objDRCConflictDetail.ErrorMessage = oDrcError.DRCErrorMsg;
              if (!String.IsNullOrEmpty(objDRCConflictDetail.ERRORCode)) {
                if (!(IsMaxDoseFail && oDrcError.DRCErrorType == 'CC_HIGHDOSE'))
                  objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
              }
            });
            if(this.isChangeDoseExistInSV)
            {
              let objDRCConflictDetail1: DRCConflictDetail =
                ObjectHelper.CreateObject(new DRCConflictDetail(), {
                  ERRORCode: 'CC_OTHER',
                  ERRORText: 'Other',
                  DRCOtherErrorType: OtherDRCErrorCodes.DRCSVChangingDose,
                  ErrorMessage: Resource.DRCConflict.DRC_ChangeDoseInSteppedDoseType,
                  DRCOuetcome: "CC_Fail"
                });
              if(objMedDRCVM.DRCOutCome){
                objMedDRCVM.DRCConflictDetail = new ObservableCollection<DRCConflictDetail>();
                objMedDRCVM.DRCMessage = objMedDRCVM.DRCMessage.replace("passed", "failed");
                objMedDRCVM.DRCOutCome = false;
              }                          
              objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail1);
            }
          } else {
            objMedDRCVM.DRCOutCome = false;
            if (this.FormViewerDetails.PresItemDRCVM != null) {
              this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
              this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory =
                false;
              this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable =
                false;
              this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
                ConflictIcons.None;
              this.FormViewerDetails.PresItemDRCVM.MedDRCReason = null;
              this.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = false;
              if (
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.PresItemDRCVM.DRCComments
                )
              ) {
                this.FormViewerDetails.PresItemDRCVM.DRCComments = String.Empty;
              }
            }
          }
          TmpMedDRCVM.Add(objMedDRCVM);
        });
      } else {
        if (
          this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon != null &&
          this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon !=
            ConflictIcons.None
        ) {
          this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
            ConflictIcons.None;
        }
      }
    } else {
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.PresItemDRCVM != null
      ) {
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM =
          new ObservableCollection<MedDRCVM>();
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
          ConflictIcons.None;
        this.FormViewerDetails.PresItemDRCVM.DRCComments = String.Empty;
        this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
        this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = false;
        this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable =
          false;
        this.FormViewerDetails.PresItemDRCVM.MedDRCReason = null;
        this.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = false;
      }
    }
    if (TmpMedDRCVM != null && TmpMedDRCVM.Count > 0) {
      TmpMedDRCVM.ForEach((ReInsert) => {
        if (!String.IsNullOrEmpty(ReInsert.DRCDefDoseTypeCode)) {
          if (
            String.Equals(
              ReInsert.DRCDefDoseTypeCode,
              DRCDoseTypes.Maintenance,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            ReInsert.DRCOrder =
              ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefault(
                (x) => x.DRCType == DRCDoseTypes.Maintenance
              ).DisplaySeqNumber;
          }
          if (
            String.Equals(
              ReInsert.DRCDefDoseTypeCode,
              DRCDoseTypes.Single,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            ReInsert.DRCOrder =
              ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefault(
                (x) => x.DRCType == DRCDoseTypes.Single
              ).DisplaySeqNumber;
          }
          if (
            String.Equals(
              ReInsert.DRCDefDoseTypeCode,
              DRCDoseTypes.Loading,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            ReInsert.DRCOrder =
              ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefault(
                (x) => x.DRCType == DRCDoseTypes.Loading
              ).DisplaySeqNumber;
          }
          if (
            String.Equals(
              ReInsert.DRCDefDoseTypeCode,
              DRCDoseTypes.Initial,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            ReInsert.DRCOrder =
              ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefault(
                (x) => x.DRCType == DRCDoseTypes.Initial
              ).DisplaySeqNumber;
          }
          if (
            String.Equals(
              ReInsert.DRCDefDoseTypeCode,
              DRCDoseTypes.Test,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            ReInsert.DRCOrder =
              ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefault(
                (x) => x.DRCType == DRCDoseTypes.Test
              ).DisplaySeqNumber;
          }
          if (
            String.Equals(
              ReInsert.DRCDefDoseTypeCode,
              DRCDoseTypes.Titration,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            ReInsert.DRCOrder =
              ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefault(
                (x) => x.DRCType == DRCDoseTypes.Titration
              ).DisplaySeqNumber;
          }
          if (
            String.Equals(
              ReInsert.DRCDefDoseTypeCode,
              DRCDoseTypes.Prophylactic,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            ReInsert.DRCOrder =
              ProfileData.MedConflictConfig.oDRCConfigData.Max(
                (x) => x.DisplaySeqNumber
              ) + 1;
          }
        }
      });
      if (this.FormViewerDetails.PresItemDRCVM != null)
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM =
          new ObservableCollection<MedDRCVM>(
            TmpMedDRCVM.OrderBy((X) => X.DRCOrder).Select((s) => s)
          );
    }
    let _IsAmendFromPrescriptionChart: boolean = false;
    if (QueryStringInfo.SelPrescItemOID > 0) {
      _IsAmendFromPrescriptionChart = true;
    }
    let DRCCheckData: ObservableCollection<IPPMAManagePrescSer.DRCConfigData> =
      this.GetDRCCheckData(this.FormViewerDetails.PresItemDRCVM.MedDRCVM);
    if (
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM == null ||
      (this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0) ||
      (this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Where(
          (s) => s.DRCConflictDetail != null && s.DRCConflictDetail.Count > 0
        ).Count() == 0)
    ) {
      this.FillDRCResult(DRCCheckData, true);
    }
    if (
      DRCCheckData != null &&
      DRCCheckData.Count > 0 &&
      this.FormViewerDetails.PresItemDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Where(
        (C) =>
          String.Compare(
            C.DRCDefDoseTypeCode,
            'DDT-0',
            StringComparison.CurrentCultureIgnoreCase
          ) != 0 && !C.DRCOutCome
      ).ToList().Count > 0
    ) {
      this.SetDRCBehaviour(DRCCheckData, String.Empty);
    } else if (
      DRCCheckData != null &&
      DRCCheckData.Count == 0 &&
      this.FormViewerDetails.PresItemDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Where(
        (C) => C.DRCOutCome
      ).ToList().Count > 0
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Pass;
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable = true;
      if (
        this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
        this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
      ) {
        this.FormViewerDetails.PresItemDRCVM.MedDRCReason = null;
        this.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = false;
      }
    } else if (
      DRCCheckData != null &&
      DRCCheckData.Count == 0 &&
      this.FormViewerDetails.PresItemDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0
    ) {
      this.FormViewerDetails.PresItemDRCVM.MedDRCReason = null;
      this.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable = false;
    }
    if (
      DRCCheckData != null &&
      DRCCheckData.Count > 0 &&
      this.FormViewerDetails.PresItemDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0
    ) {
      let nvalue: List<number> = new List<number>();
      for (
        let i: number = 0;
        i < this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count;
        i++
      ) {
        let oDrcConflictdetails = this.FormViewerDetails.PresItemDRCVM.MedDRCVM[
          i
        ].DRCConflictDetail.Where((c) => c.ERRORCode == 'CC_OTHER').Select(
          (s) => s
        );
        if (oDrcConflictdetails.Count() > 0) {
          nvalue.Add(1);
        }
      }
      if (
        nvalue != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == nvalue.Count
      ) {
        this.SetDRCBehaviour(DRCCheckData, String.Empty);
      }
    } else if (
      (DRCCheckData == null ||
        (DRCCheckData != null && DRCCheckData.Count == 0)) &&
      this.actionCode == ActivityTypes.Prescribe &&
      this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
      this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
    ) {
      this.ClearDRCBehaviourType();
    }
    if (
      this.RefreshDRCConflictICONEvent != null &&
      !this.bDRCConflictGeToAddtoResolve
    ) {
      this.RefreshDRCConflictICONEvent();
    }
    if (
      this.DRCConflictsDelegateCompleted != null &&
      !this.bDRCConflictGeToAddtoResolve
    ) {
      this.DRCConflictsDelegateCompleted();
    } else if (
      (this.ActionCode == ActivityTypes.Reorder ||
        (this.FormViewerDetails.BasicDetails != null &&
          !this.FormViewerDetails.BasicDetails.IsShowFormviwer &&
          this.ActionCode == ActivityTypes.Prescribe)) &&
      this.bDRCConflictGeToAddtoResolve &&
      this.ParentbaseVM != null
    ) {
      if (
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon ==
          ConflictIcons.Red ||
        (this.IsDoseCalcVisible == Visibility.Visible &&
          this.IsDoseCalcEnabled &&
          (this.FormViewerDetails.BasicDetails.ISAlwaysuseDosecalc ||
            this.IsDosCalciReOrderShowFormviewerRequired))
      ) {
        if (
          this.FormViewerDetails.BasicDetails != null &&
          this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          this.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          (String.Compare(
            this.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.CONTINUOUS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
            String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.FLUID,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0) &&
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder > 0
        ) {
          this.bDRCConflictGeToAddtoResolve = false;
          this.ParentbaseVM.AddtoResolutionGriddone = true;
          this.ParentbaseVM.AddToResolveGrid(_IsAmendFromPrescriptionChart);
          if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
            this.FormViewerDetails.BasicDetails.EPrescribeRuleCompletedEvent();
          }
        } else {
          this.bDRCConflictGeToAddtoResolve = false;
          this.ParentbaseVM.AddtoResolutionGriddone = true;
          this.ParentbaseVM.ShowFormViewer();
          if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
            this.FormViewerDetails.BasicDetails.UnSubscribeEprescribeEvent();
          }
        }
      } else {
        this.bDRCConflictGeToAddtoResolve = false;
        this.ParentbaseVM.AddtoResolutionGriddone = true;
        this.ParentbaseVM.AddToResolveGrid(_IsAmendFromPrescriptionChart);
        if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
          this.FormViewerDetails.BasicDetails.EPrescribeRuleCompletedEvent();
        }
      }
    } else if (this.bDRCConflictGeToAddtoResolve && this.ParentbaseVM != null) {
      this.bDRCConflictGeToAddtoResolve = false;
      this.ParentbaseVM.AddtoResolutionGriddone = true;
      this.ParentbaseVM.AddToResolveGrid(_IsAmendFromPrescriptionChart);
      if (this.FormViewerDetails.BasicDetails.IsOrderSetDrug) {
        this.FormViewerDetails.BasicDetails.EPrescribeRuleCompletedEvent();
      }
    }
    this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields = null;
    this.ePrescribeSource = PrescribeSource.None;
  }
  public GetDRCCheckData(
    medDRCVM: ObservableCollection<MedDRCVM>
  ): ObservableCollection<IPPMAManagePrescSer.DRCConfigData> {
    let DRCCheckData: ObservableCollection<IPPMAManagePrescSer.DRCConfigData> =
      new ObservableCollection<IPPMAManagePrescSer.DRCConfigData>();
    let drcData: IPPMAManagePrescSer.DRCConfigData;
    if (
      this.FormViewerDetails.PresItemDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0
    ) {
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM.forEach((medDRC) => {
        if (
          medDRC.DRCConflictDetail != null &&
          medDRC.DRCConflictDetail.Count > 0 &&
          !medDRC.DRCOutCome
        ) {
          medDRC.DRCConflictDetail.forEach((drcConflict) => {
            if (
              !String.IsNullOrEmpty(drcConflict.ERRORCode) &&
              !String.Equals(
                drcConflict.ERRORCode,
                'CC_OTHER',
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              drcData = ProfileData.MedConflictConfig.oDRCConfigData
                .Where((x) => x.DRCType == medDRC.DRCDefDoseTypeCode)
                .Where((y) => y.DRCSubType == drcConflict.ERRORCode)
                .FirstOrDefault((y) =>y.DRCSubType == drcConflict.ERRORCode);
                
              if (drcData != null) DRCCheckData.Add(drcData);
            } else if (
              !String.IsNullOrEmpty(drcConflict.ERRORCode) &&
              String.Equals(
                drcConflict.ERRORCode,
                'CC_OTHER',
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              drcData = ProfileData.MedConflictConfig.oDRCConfigData
                .Where((x) => x.DRCSubType == drcConflict.DRCOtherErrorType)
                .FirstOrDefault((y) =>y.DRCSubType == drcConflict.DRCOtherErrorType);
              // drcData =
              //   ProfileData.MedConflictConfig.oDRCConfigData.FirstOrDefault(
              //     (y) => y.DRCSubType == drcConflict.DRCOtherErrorType
              //   );
              if (drcData != null) DRCCheckData.Add(drcData);
            }
          });
        }
      });
    }
    return DRCCheckData;
  }
  public SetDRCBehaviour(
    DRCCheckData: ObservableCollection<IPPMAManagePrescSer.DRCConfigData>,
    BehaviourTypeCode: string
  ): void {
    let BehavType: string = String.Empty;
    let CanOpenDRCTab: boolean = false;
    if (
      !String.IsNullOrEmpty(BehaviourTypeCode) &&
      this.actionCode == ActivityTypes.Amend
    ) {
      BehavType = BehaviourTypeCode;
    } else if (
      DRCCheckData != null &&
      DRCCheckData.FirstOrDefault() != null &&
      !String.IsNullOrEmpty(DRCCheckData.FirstOrDefault().BehaviourType)
    ) {
      let DRCCheckDataBehTypeOrderCol = DRCCheckData.OrderBy(
        (x) => x.BehaviourType
      ).FirstOrDefault();
      BehavType = DRCCheckDataBehTypeOrderCol.BehaviourType;
      CanOpenDRCTab =
        DRCCheckDataBehTypeOrderCol.IsOpenDRCTab == '1' ? true : false;
    }
    if (
      this.FormViewerDetails.PresItemDRCVM != null &&
      String.Equals(
        BehavType,
        CConstants.sBehaviourType1,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = true;
      // if (this.actionCode == ActivityTypes.Amend 
      //   && this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory
      //   && !this.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated) {
      //   this.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated = true;
      // }
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = true;
      this.FormViewerDetails.PresItemDRCVM.BehaviourType = BehavType;
      if (
        this.actionCode == ActivityTypes.Prescribe ||
        this.actionCode == ActivityTypes.Reorder
      ) {
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Red;
      } else
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
            ? ConflictIcons.Red
            : ConflictIcons.None;
    } else if (
      this.FormViewerDetails.PresItemDRCVM != null &&
      String.Equals(
        BehavType,
        CConstants.sBehaviourType2,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = true;
      // if (this.actionCode == ActivityTypes.Amend 
      //   && this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory
      //   && !this.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated) {
      //   this.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated = true;
      // }
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = true;
      this.FormViewerDetails.PresItemDRCVM.BehaviourType = BehavType;
      if (
        this.actionCode == ActivityTypes.Prescribe ||
        this.actionCode == ActivityTypes.Reorder
      ) {
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Red;
      } else
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
            ? ConflictIcons.Red
            : ConflictIcons.None;
    } else if (
      this.FormViewerDetails.PresItemDRCVM != null &&
      String.Equals(
        BehavType,
        CConstants.sBehaviourType3,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = true;
      this.FormViewerDetails.PresItemDRCVM.BehaviourType = BehavType;
      if (
        this.actionCode == ActivityTypes.Prescribe ||
        this.actionCode == ActivityTypes.Reorder
      ) {
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.Red;
      } else
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
            ? ConflictIcons.Red
            : ConflictIcons.None;
    } else if (
      this.FormViewerDetails.PresItemDRCVM != null &&
      String.Equals(
        BehavType,
        CConstants.sBehaviourType4,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.BehaviourType = BehavType;
      this.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab = CanOpenDRCTab;
      if (
        this.actionCode == ActivityTypes.Prescribe ||
        this.actionCode == ActivityTypes.Reorder
      ) {
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
          ConflictIcons.Amber;
      } else
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
            ? ConflictIcons.Amber
            : ConflictIcons.None;
    } else if (
      this.FormViewerDetails.PresItemDRCVM != null &&
      String.Equals(
        BehavType,
        CConstants.sBehaviourType5,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.BehaviourType = BehavType;
      this.FormViewerDetails.PresItemDRCVM.IsOpenDRCTab = CanOpenDRCTab;
      if (
        this.actionCode == ActivityTypes.Prescribe ||
        this.actionCode == ActivityTypes.Reorder
      ) {
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
          ConflictIcons.Question;
      } else
        this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
          this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
            ? ConflictIcons.Question
            : ConflictIcons.None;
    } else if (
      this.FormViewerDetails.PresItemDRCVM != null &&
      String.Equals(
        BehavType,
        String.Empty,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = false;
      this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon = ConflictIcons.None;
      this.FormViewerDetails.PresItemDRCVM.BehaviourType = BehavType;
    }
    if (
      (this.FormViewerDetails.PresItemDRCVM != null &&
        String.Equals(
          BehavType,
          CConstants.sBehaviourType1,
          StringComparison.InvariantCultureIgnoreCase
        )) ||
      String.Equals(
        BehavType,
        String.Empty,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable = false;
    } else {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable = true;
    }
    if (
      this.FormViewerDetails.PresItemDRCVM != null &&
      this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
      this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
    ) {
      this.FormViewerDetails.PresItemDRCVM.MedDRCReason = null;
      this.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = false;
    }
  }
  public ClearDRCBehaviourType(): void {
    this.FormViewerDetails.PresItemDRCVM.BehaviourType = String.Empty;
  }
  public GetDRCConflicts(oVM: PrescriptionItemVM): void {
    let serviceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    let objReqDRC: IPPMAManagePrescSer.CReqMsgGetDRCConflicts =
      new IPPMAManagePrescSer.CReqMsgGetDRCConflicts();
    serviceProxy.GetDRCConflictsCompleted = (s, e) => {
      this.serviceProxy_GetDRCConflictsCompleted(s, e);
    };
    objReqDRC.PrescriptionItemOIDBC = oVM.PrescriptionItemOID;
    objReqDRC.PatientOIDBC = PatientContext.PatientOID;
    objReqDRC.oContextInformation = CommonBB.FillContext();
    serviceProxy.GetDRCConflictsAsync(objReqDRC);
  }
  FillMedDRCVMFromResponse(
    oDRCConflict: ObservableCollection<IPPMAManagePrescSer.DRCConflict>,
    IsReadOnly: boolean
  ): void {
    let DRCAckLdeRSN: CListItem = new CListItem();
    let IsChecked: boolean;
    let Comments: string = String.Empty;
    let BehaviourType: string = String.Empty;
    if (
      oDRCConflict != null &&
      oDRCConflict.Count > 0 &&
      this.FormViewerDetails.PresItemDRCVM != null
    ) {
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM =
        new ObservableCollection<MedDRCVM>();
      this.FormViewerDetails.PresItemDRCVM.MedDRCVM = this.FillDRCConflictDet(
        oDRCConflict,
        (o1) => {
          DRCAckLdeRSN = o1;
        },
        (o2) => {
          IsChecked = o2;
        },
        (o3) => {
          Comments = o3;
        },
        (o4) => {
          BehaviourType = o4;
        }
      );
      if (DRCAckLdeRSN != null && !String.IsNullOrEmpty(DRCAckLdeRSN.Value)) {
        if (
          this.FormViewerDetails.PresItemDRCVM.MedDRCReasonList != null &&
          this.FormViewerDetails.PresItemDRCVM.MedDRCReasonList.Count > 0
        ) {
          let SelDRCRSN =
            this.FormViewerDetails.PresItemDRCVM.MedDRCReasonList.Where(
              (oitm) =>
                String.Compare(
                  oitm.Value,
                  DRCAckLdeRSN.Value,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
            ).Select((oitm) => oitm);
          if (SelDRCRSN != null && SelDRCRSN.Count() > 0) {
            this.FormViewerDetails.PresItemDRCVM.MedDRCReason =
              SelDRCRSN.FirstOrDefault();
          }
        } else {
          this.FormViewerDetails.PresItemDRCVM.MedDRCReason = DRCAckLdeRSN;
        }
        if (!String.IsNullOrEmpty(Comments)) {
          this.FormViewerDetails.PresItemDRCVM.DRCComments = Comments;
        }
      }
      this.FormViewerDetails.PresItemDRCVM.BehaviourType = BehaviourType;
      this.FormViewerDetails.PresItemDRCVM.DRCAcknowledge = IsChecked;
    }
    let DRCCheckData: ObservableCollection<IPPMAManagePrescSer.DRCConfigData> =
      this.GetDRCCheckData(this.FormViewerDetails.PresItemDRCVM.MedDRCVM);
    if (IsReadOnly) {
      if (
        DRCCheckData != null &&
        DRCCheckData.Count > 0 &&
        this.FormViewerDetails.PresItemDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Where(
          (C) =>
            String.Compare(
              C.DRCDefDoseTypeCode,
              'DDT-0',
              StringComparison.CurrentCultureIgnoreCase
            ) != 0 && !C.DRCOutCome
        ).ToList().Count > 0
      ) {
        this.SetDRCBehaviour(
          null,
          this.FormViewerDetails.PresItemDRCVM.BehaviourType
        );
      } else if (
        DRCCheckData.Count == 0 &&
        this.FormViewerDetails.PresItemDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Where(
          (C) => C.DRCOutCome
        ).ToList().Count > 0
      ) {
        this.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory = false;
        this.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory = false;
        if (this.actionCode == ActivityTypes.Prescribe)
          this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
            ConflictIcons.Pass;
        else
          this.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon =
            this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields != null &&
            this.FormViewerDetails.PresItemDRCVM.listDRCAmendedFields.Count > 0
              ? ConflictIcons.Pass
              : ConflictIcons.None;
        this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable = true;
      } else if (
        DRCCheckData != null &&
        DRCCheckData.Count == 0 &&
        this.FormViewerDetails.PresItemDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 &&
        !this.FormViewerDetails.PresItemDRCVM.MedDRCVM[0].IsDRCChecked
      ) {
        this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable =
          false;
      }
      if (
        this.FormViewerDetails.PresItemDRCVM != null &&
        (!String.IsNullOrEmpty(
          this.FormViewerDetails.PresItemDRCVM.BehaviourType
        ) ||
          (DRCCheckData != null && DRCCheckData.Count > 0)) &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0 &&
        this.FormViewerDetails.PresItemDRCVM.MedDRCVM.All((x) => !x.DRCOutCome)
      ) {
        let nvalue: List<number> = new List<number>();
        for (
          let i: number = 0;
          i < this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count;
          i++
        ) {
          let oDrcConflictdetails =
            this.FormViewerDetails.PresItemDRCVM.MedDRCVM[
              i
            ].DRCConflictDetail.Where((c) => c.ERRORCode == 'CC_OTHER').Select(
              (s) => s
            );
          if (oDrcConflictdetails.Count() > 0) {
            nvalue.Add(1);
          }
        }
        if (
          nvalue != null &&
          this.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == nvalue.Count
        ) {
          this.SetDRCBehaviour(
            null,
            this.FormViewerDetails.PresItemDRCVM.BehaviourType
          );
        }
      }
    }
    if (this.DRCConflictsDelegateCompleted != null) {
      this.DRCConflictsDelegateCompleted();
    }
    if (
      this.actionCode == ActivityTypes.Amend &&
      this.IsFormViewerDisable &&
      this.FormViewerDetails.PresItemDRCVM != null
    ) {
      this.FormViewerDetails.PresItemDRCVM.IsDRCReasonAcknowldgeEnable = false;
    }
  }
  serviceProxy_GetDRCConflictsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetDRCConflictsCompletedEventArgs
  ): void {
    let oRes: IPPMAManagePrescSer.CResMsgGetDRCConflicts = e.Result;
    let oDRCConflict: ObservableCollection<IPPMAManagePrescSer.DRCConflict> =
      new ObservableCollection<IPPMAManagePrescSer.DRCConflict>();
    if (
      oRes != null &&
      oRes.oDRCConflict != null &&
      oRes.oDRCConflict.Count > 0
    ) {
      oDRCConflict = oRes.oDRCConflict;
    }
    this.FillMedDRCVMFromResponse(oDRCConflict, true);
  }
  public FillDRCConflictDet(
    oDRCConflict: ObservableCollection<IPPMAManagePrescSer.DRCConflict>,
    out1: (AcknowledgeReason: CListItem) => void,
    out2: (IsCheckDRCSAck: boolean) => void,
    out3: (Comments: string) => void,
    out4: (BehaviourTypeCode: string) => void
  ): ObservableCollection<MedDRCVM> {
    let AcknowledgeReason: CListItem;
    let IsCheckDRCSAck: boolean = false;
    let Comments: string;
    let BehaviourTypeCode: string;

    let MedDRCdetails: ObservableCollection<MedDRCVM> =
      new ObservableCollection<MedDRCVM>();
    IsCheckDRCSAck = false;
    AcknowledgeReason = null;
    Comments = String.Empty;
    BehaviourTypeCode = String.Empty;
    oDRCConflict.forEach((oMedDRCDet) => {
      let objMedDRCVM: MedDRCVM = new MedDRCVM();
      objMedDRCVM.DRCDefDoseTypeCode = oMedDRCDet.DRCDefDoseTypeCode;
      objMedDRCVM.DRCDefDoseType = oMedDRCDet.DRCDefDoseTypeLorenzoID;
      objMedDRCVM.DRCMessage = oMedDRCDet.DRCMessage;
      objMedDRCVM.PatientBSA = oMedDRCDet.PatientBSA;
      objMedDRCVM.PatientWeight = oMedDRCDet.PatientWeight;
      objMedDRCVM.IsDRCChecked = oMedDRCDet.IsDRCChecked;
      objMedDRCVM.DRCOutCome = !String.IsNullOrEmpty(oMedDRCDet.IsDRCPassed)
        ? String.Compare(oMedDRCDet.IsDRCPassed, '1') == 0
          ? true
          : false
        : false;
      if (
        oMedDRCDet.ConflictDetails != null &&
        oMedDRCDet.ConflictDetails.Count > 0
      ) {
        objMedDRCVM.DRCConflictDetail =
          new ObservableCollection<DRCConflictDetail>();
        if (
          oMedDRCDet.ConflictDetails != null &&
          oMedDRCDet.ConflictDetails.Count > 0
        ) {
          let DRCRsn = oMedDRCDet.ConflictDetails.Where(
            (oitem) => !String.IsNullOrEmpty(oitem.AcknowledgeReason)
          ).Select((oitem) => oitem);
          if (
            DRCRsn != null &&
            DRCRsn.Count() > 0 &&
            DRCRsn.FirstOrDefault() != null
          ) {
            AcknowledgeReason = ObjectHelper.CreateObject(new CListItem(), {
              Value: DRCRsn.FirstOrDefault().AcknowledgeReason,
            });
            if (!String.IsNullOrEmpty(DRCRsn.FirstOrDefault().Comments)) {
              Comments = DRCRsn.FirstOrDefault().Comments;
            }
          }
          let DRCCHK = oMedDRCDet.ConflictDetails.Where(
            (oitem) => !String.IsNullOrEmpty(oitem.IsChecked)
          ).Select((oitem) => oitem);
          if (
            DRCCHK != null &&
            DRCCHK.Count() > 0 &&
            DRCCHK.FirstOrDefault() != null
          ) {
            IsCheckDRCSAck =
              String.Compare(DRCCHK.FirstOrDefault().IsChecked, '1') == 0
                ? true
                : false;
          }
        }
        oMedDRCDet.ConflictDetails.forEach((oConflictDetails) => {
          let objDRCConflictDetail: DRCConflictDetail = new DRCConflictDetail();
          if (!String.IsNullOrEmpty(oConflictDetails.ErrorCode)) {
            objDRCConflictDetail.ERRORCode = oConflictDetails.ErrorCode;
            if (
              DRCErrorCodeConceptCodeData.ConceptCodes != null &&
              DRCErrorCodeConceptCodeData.ConceptCodes.Count > 0
            ) {
              objDRCConflictDetail.ERRORText =
                DRCErrorCodeConceptCodeData.ConceptCodes.Where(
                  (x) => x.Value == oConflictDetails.ErrorCode
                ).FirstOrDefault().DisplayText;
            }
          }
          objDRCConflictDetail.ErrorMessage = oConflictDetails.ErrorMessage;
          objDRCConflictDetail.BehaviourType = BehaviourTypeCode =
            oConflictDetails.BehaviourType;
          objMedDRCVM.DRCConflictDetail.Add(objDRCConflictDetail);
        });
      }
      MedDRCdetails.Add(objMedDRCVM);
    });

    out1(AcknowledgeReason);
    out2(IsCheckDRCSAck);
    out3(Comments);
    out4(BehaviourTypeCode);

    return MedDRCdetails;
  }
  private FilteringDRCAndDefaultDRCDoseTypeInAmend(
    oFilterDRCDoseType: string
  ) {
    if (
      this.formViewerDetails != null &&
      this.formViewerDetails.BasicDetails != null
    ) {
      if (this.formViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend) {
        oFilterDRCDoseType =
          this.formViewerDetails.BasicDetails.DRCDosetype.Value;
        if (
          this.formViewerDetails.BasicDetails.DRCDosetype != null &&
          !String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.DRCDosetype.Value
          ) &&
          String.Equals(
            this.formViewerDetails.BasicDetails.DRCDosetype.Value,
            DRCDoseTypes.Systemdefined,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            this.formViewerDetails.BasicDetails.DoseType != null &&
            !String.IsNullOrEmpty(
              this.formViewerDetails.BasicDetails.DoseType.Value
            ) &&
            String.Equals(
              this.formViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            oFilterDRCDoseType = DRCDoseTypes.Maintenance;
          } else if (
            this.formViewerDetails.BasicDetails.Frequency != null &&
            this.formViewerDetails.BasicDetails.Frequency.Tag != null &&
            this.formViewerDetails.BasicDetails.Frequency.Tag instanceof Array
          ) {
            let FreqDetails: string[] = ObjectHelper.CreateType<string[]>(
              this.formViewerDetails.BasicDetails.Frequency.Tag,
              'string[]'
            );
            if (
              FreqDetails != null &&
              FreqDetails.Count() > 1 &&
              FreqDetails[1] != null &&
              String.Equals(
                FreqDetails[1],
                CConstants.OnceOnlyFrequency,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              oFilterDRCDoseType = DRCDoseTypes.Single;
            } else {
              oFilterDRCDoseType = DRCDoseTypes.Maintenance;
            }
          } else {
            oFilterDRCDoseType = DRCDoseTypes.Maintenance;
          }
        }
      } else if (
        PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
      ) {
        if (
          this.formViewerDetails.BasicDetails.DoseType != null &&
          !String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.DoseType.Value
          ) &&
          String.Equals(
            this.formViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          oFilterDRCDoseType = DRCDoseTypes.Maintenance;
        } else if (
          this.formViewerDetails.BasicDetails.Frequency != null &&
          this.formViewerDetails.BasicDetails.Frequency.Tag != null &&
          this.formViewerDetails.BasicDetails.Frequency.Tag instanceof Array
        ) {
          let FreqDetails: string[] = ObjectHelper.CreateType<string[]>(
            this.formViewerDetails.BasicDetails.Frequency.Tag,
            'string[]'
          );
          if (
            FreqDetails != null &&
            FreqDetails.Count() > 1 &&
            FreqDetails[1] != null &&
            String.Equals(
              FreqDetails[1],
              CConstants.OnceOnlyFrequency,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            oFilterDRCDoseType = DRCDoseTypes.Single;
          } else {
            oFilterDRCDoseType = DRCDoseTypes.Maintenance;
          }
        } else {
          oFilterDRCDoseType = DRCDoseTypes.Maintenance;
          this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
            true;
          this.FormViewerDetails.BasicDetails.DRCDosetype =
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
              (c) =>
                String.Equals(
                  c.Value,
                  DRCDoseTypes.Systemdefined,
                  StringComparison.InvariantCultureIgnoreCase
                )
            )
              .Select((s) => s)
              .FirstOrDefault();
        }
        if (
          String.Equals(
            oFilterDRCDoseType,
            DRCDoseTypes.Single,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            oFilterDRCDoseType,
            DRCDoseTypes.Maintenance,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
            true;
          this.FormViewerDetails.BasicDetails.DRCDosetype =
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
              (c) =>
                String.Equals(
                  c.Value,
                  DRCDoseTypes.Systemdefined,
                  StringComparison.InvariantCultureIgnoreCase
                )
            )
              .Select((s) => s)
              .FirstOrDefault();
        }
        this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
          false;
      } else if (
        PatientContext.PrescriptionType == PrescriptionTypes.Leave ||
        PatientContext.PrescriptionType == PrescriptionTypes.Discharge ||
        PatientContext.PrescriptionType == PrescriptionTypes.Outpatient
      ) {
        if (this.formViewerDetails.BasicDetails.DRCDosetype != null) {
          oFilterDRCDoseType =
            this.formViewerDetails.BasicDetails.DRCDosetype.Value;
          if (
            this.formViewerDetails.BasicDetails.DRCDosetype != null &&
            !String.IsNullOrEmpty(
              this.formViewerDetails.BasicDetails.DRCDosetype.Value
            ) &&
            String.Equals(
              this.formViewerDetails.BasicDetails.DRCDosetype.Value,
              DRCDoseTypes.Systemdefined,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (
              this.formViewerDetails.BasicDetails.DoseType != null &&
              !String.IsNullOrEmpty(
                this.formViewerDetails.BasicDetails.DoseType.Value
              ) &&
              String.Equals(
                this.formViewerDetails.BasicDetails.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              oFilterDRCDoseType = DRCDoseTypes.Maintenance;
            } else if (
              this.formViewerDetails.BasicDetails.Frequency != null &&
              this.formViewerDetails.BasicDetails.Frequency.Tag != null &&
              this.formViewerDetails.BasicDetails.Frequency.Tag instanceof Array
            ) {
              let FreqDetails: string[] = ObjectHelper.CreateType<string[]>(
                this.formViewerDetails.BasicDetails.Frequency.Tag,
                'string[]'
              );
              if (
                FreqDetails != null &&
                FreqDetails.Count() > 1 &&
                FreqDetails[1] != null &&
                String.Equals(
                  FreqDetails[1],
                  CConstants.OnceOnlyFrequency,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ) {
                oFilterDRCDoseType = DRCDoseTypes.Single;
              } else {
                oFilterDRCDoseType = DRCDoseTypes.Maintenance;
              }
            } else {
              oFilterDRCDoseType = DRCDoseTypes.Maintenance;
            }
          }
        } else {
          if (
            this.formViewerDetails.BasicDetails.DoseType != null &&
            !String.IsNullOrEmpty(
              this.formViewerDetails.BasicDetails.DoseType.Value
            ) &&
            String.Equals(
              this.formViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            oFilterDRCDoseType = DRCDoseTypes.Maintenance;
          } else if (
            this.formViewerDetails.BasicDetails.Frequency != null &&
            this.formViewerDetails.BasicDetails.Frequency.Tag != null &&
            this.formViewerDetails.BasicDetails.Frequency.Tag instanceof Array
          ) {
            let FreqDetails: string[] = ObjectHelper.CreateType<string[]>(
              this.formViewerDetails.BasicDetails.Frequency.Tag,
              'string[]'
            );
            if (
              FreqDetails != null &&
              FreqDetails.Count() > 1 &&
              FreqDetails[1] != null &&
              String.Equals(
                FreqDetails[1],
                CConstants.OnceOnlyFrequency,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              oFilterDRCDoseType = DRCDoseTypes.Single;
            } else {
              oFilterDRCDoseType = DRCDoseTypes.Maintenance;
            }
          } else {
            oFilterDRCDoseType = DRCDoseTypes.Maintenance;
          }
          this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
            true;
          this.FormViewerDetails.BasicDetails.DRCDosetype =
            this.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
              (c) =>
                String.Equals(
                  c.Value,
                  DRCDoseTypes.Systemdefined,
                  StringComparison.InvariantCultureIgnoreCase
                )
            )
              .Select((s) => s)
              .FirstOrDefault();
          this.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
            false;
        }
      }
    }
    return oFilterDRCDoseType;
  }
  public GenerateConflictsForInpatient(
    CurrentMedications: ObservableCollection<PrescriptionItemVM>
  ): void {
    if (CurrentMedications == null) {
      if (this.ParentbaseVM != null && this.ParentbaseVM.MedsResolve != null)
        CurrentMedications = this.ParentbaseVM.MedsResolve;
    }
    let objService: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    let objReqMedications: IPPMAManagePrescSer.CReqMsgGetMedicationsForInpatient =
      new IPPMAManagePrescSer.CReqMsgGetMedicationsForInpatient();
    objReqMedications.oContextInformation = Common.FillContext();
    objReqMedications.PatientOIDBC = Convert.ToInt64(PatientContext.PatientOID);
    objReqMedications.PresStartDateBC =
      this.FormViewerDetails.BasicDetails.StartDTTM;
    objReqMedications.PresEndDateBC =  // new DateTime(1977,5,5,1,1,1);
      this.FormViewerDetails.BasicDetails.EndDTTM;
    objReqMedications.EncounterOIDBC = PatientContext.EncounterOid;
    if (
      PatientContext.ClerkFormViewDefaultBehavior ==
      ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      objReqMedications.PRTYPCODEBC = PrescriptionTypes.Clerking;
    } else {
      objReqMedications.PRTYPCODEBC = PatientContext.PrescriptionType;
    }
    this.objItems = CurrentMedications;
    objService.GetMedicationsForInpatientCompleted = (s, e) => {
      this.objService_GetMedicationsForInpatientCompleted(s, e);
    };
    objService.GetMedicationsForInpatientAsync(objReqMedications);
  }
  objService_GetMedicationsForInpatientCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetMedicationsForInpatientCompletedEventArgs
  ): void {
    if (e.Error != null) return;
    let objRes: IPPMAManagePrescSer.CResMsgGetMedicationsForInpatient =
      e.Result;
    let objClinicalMedications: ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria> =
      new ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria>();
    if (objRes.objItems != null && objRes.objItems.Count > 0) {
      if (this.objItems != null) {
        let oItems = this.objItems
          .Where(
            (Items) =>
              !String.IsNullOrEmpty(Items.OperationMode) &&
              String.Compare(
                Items.OperationMode,
                'M',
                StringComparison.OrdinalIgnoreCase
              ) == 0 &&
              (Items.PrescriptionItemStatus ==
                PrescriptionItemStatusCodes.CANCELLED ||
                Items.PrescriptionItemStatus ==
                  PrescriptionItemStatusCodes.DISCONTINUED ||
                Items.PrescriptionItemStatus ==
                  PrescriptionItemStatusCodes.ONHOLD ||
                Items.PrescriptionItemStatus ==
                  PrescriptionItemStatusCodes.AWAITINGAUTHORISE ||
                Items.PrescriptionItemStatus ==
                  PrescriptionItemStatusCodes.COMPLETED) &&
              Items.formViewerDetails.BasicDetails.IdentifyingOID > 0 &&
              !String.IsNullOrEmpty(Items.LorenzoID)
          )
          .Select((Items) => Items);
        objRes.objItems.forEach((objDec) => {
          let objSupItems: DecisionSupportItems = new DecisionSupportItems();
          objSupItems.IdentifyingName = objDec.DrugItem.IdentifyingName;
          objSupItems.IdentifyingOID = objDec.DrugItem.IdentifyingOID;
          objSupItems.IdentifyingType = objDec.DrugItem.IdentifyingType;
          objSupItems.ItemType = objDec.DrugItem.ItemType;
          objSupItems.LorenzoID = objDec.DrugItem.LorenzoID;
          objSupItems.StartDate = objDec.StartDate;
          objSupItems.EndDate = objDec.EndDate;
          objSupItems.PrescriptionType = objDec.PrescriptionType;
          objSupItems.PrescriptionDTTM = objDec.PrescriptionDTTM;
          objSupItems.PrescriptionItemOID = objDec.DrugItem.PrescriptionItemId;
          objSupItems.ItemsubType = objDec.DrugItem.ITMSUBTYP;
          objSupItems.MCItem = objDec.DrugItem.MCIItem;
          objSupItems.GenericDrugLorenzoID =
            objDec.DrugItem.GenericDrugLorenzoID;
          objSupItems.Basedrugname = objDec.DrugItem.Basedrugname;
          objSupItems.FluidIdentifyingname =
            objDec.DrugItem.FluidIdentifyingname;
          objSupItems.FluidIdentifyingOID = objDec.DrugItem.FluidIdentifyingOID;
          objSupItems.FluidItemType = objDec.DrugItem.FluidItemType;
          objSupItems.FluidLorenzoID = objDec.DrugItem.FluidLorenzoID;
          objSupItems.FluidPrescribableItemListOID =
            objDec.DrugItem.FluidPrescribableItemListOID;
          objSupItems.PrescriptionItemNumber =
            objDec.DrugItem.PrescriptionItemNumber;
          if (objSupItems.PrescriptionItemNumber == 0) {
            let ModifiedDrug = this.objItems
              .Where(
                (Drug) =>
                  !String.IsNullOrEmpty(Drug.OperationMode) &&
                  !String.Equals(Drug.OperationMode, 'N') &&
                  String.Equals(
                    Drug.PrescriptionItemOID.ToString(),
                    objSupItems.PrescriptionItemOID
                  ) &&
                  Drug.FormViewerDetails != null &&
                  Drug.FormViewerDetails.BasicDetails != null &&
                  Drug.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                  Drug.FormViewerDetails.BasicDetails.InfusionDetails
                    .PrescriptionItemNumber > 0 &&
                  Drug.FormViewerDetails.BasicDetails.InfusionDetails
                    .IsSequentialPrescribing
              )
              .Select(
                (Drug) =>
                  Drug.FormViewerDetails.BasicDetails.InfusionDetails
                    .PrescriptionItemNumber
              );
            if (ModifiedDrug != null && ModifiedDrug.FirstOrDefault() > 0) {
              objSupItems.PrescriptionItemNumber =
                ModifiedDrug.FirstOrDefault();
            }
          }
          PrescriptionItemVM.CurrentMedicationsForConflicts(
            objClinicalMedications,
            objSupItems,
            false,
            oItems,
            this
          );
        });
      }
    }
    if (this.objItems != null && this.objItems.Count > 0) {
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        let dStopPrescriptionTime: DateTime = DateTime.MinValue;
        if (
          String.Compare(
            this.OperationMode,
            'N',
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          dStopPrescriptionTime = this.FormViewerDetails.BasicDetails.EndDTTM;
        } else {
          if (
            ObjectHelper.HasValue(
              this.FormViewerDetails.BasicDetails.StopPrescriptionTime
            )
          ) {
            dStopPrescriptionTime =
              this.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value;
          }
        }
        if (
          dStopPrescriptionTime != null &&
          DateTime.GreaterThan(dStopPrescriptionTime, DateTime.MinValue)
        ) {
          let NewItems = this.objItems
            .Where(
              (Items) =>
                !String.IsNullOrEmpty(Items.OperationMode) &&
                String.Compare(
                  Items.OperationMode,
                  'N',
                  StringComparison.OrdinalIgnoreCase
                ) == 0 &&
                Items.FormViewerDetails.BasicDetails.StartDTTM <=
                  dStopPrescriptionTime &&
                ((Items.FormViewerDetails.BasicDetails.StopPrescriptionTime !=
                  null &&
                  Items.FormViewerDetails.BasicDetails.StopPrescriptionTime >
                    DateTime.MinValue &&
                  Items.FormViewerDetails.BasicDetails.StopPrescriptionTime >=
                    this.FormViewerDetails.BasicDetails.StartDTTM) ||
                  ((Items.FormViewerDetails.BasicDetails.StopPrescriptionTime ==
                    null ||
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime ==
                      DateTime.MinValue) &&
                    dStopPrescriptionTime >=
                      this.FormViewerDetails.BasicDetails.StartDTTM)) &&
                ((Items.FormViewerDetails.BasicDetails.StartDTTM <=
                  this.FormViewerDetails.BasicDetails.StartDTTM &&
                  ((Items.FormViewerDetails.BasicDetails.StopPrescriptionTime !=
                    null &&
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime >
                      DateTime.MinValue &&
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime >=
                      this.FormViewerDetails.BasicDetails.StartDTTM) ||
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime ==
                      null ||
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime ==
                      DateTime.MinValue)) ||
                  Items.FormViewerDetails.BasicDetails.StartDTTM >
                    this.FormViewerDetails.BasicDetails.StartDTTM) &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.CANCELLED &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.DISCONTINUED &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.ONHOLD &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.AWAITINGAUTHORISE &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.COMPLETED &&
                Items.formViewerDetails.BasicDetails.IdentifyingOID > 0 &&
                !String.IsNullOrEmpty(Items.LorenzoID) &&
                Items != this
            )
            .Select((Items) => Items);
          if (NewItems != null && NewItems.Count() > 0) {
            this.AddMedicationItemsToCollection(
              NewItems,
              objClinicalMedications
            );
          }
        } else {
          let NewItems = this.objItems
            .Where(
              (Items) =>
                !String.IsNullOrEmpty(Items.OperationMode) &&
                String.Compare(
                  Items.OperationMode,
                  'N',
                  StringComparison.OrdinalIgnoreCase
                ) == 0 &&
                ((Items.FormViewerDetails.BasicDetails.StartDTTM <=
                  this.FormViewerDetails.BasicDetails.StartDTTM &&
                  ((Items.FormViewerDetails.BasicDetails.StopPrescriptionTime !=
                    null &&
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime >
                      DateTime.MinValue &&
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime >=
                      this.FormViewerDetails.BasicDetails.StartDTTM) ||
                    ((DateTime.Equals(Items.FormViewerDetails.BasicDetails
                      .StopPrescriptionTime, DateTime.MinValue) ||
                      Items.FormViewerDetails.BasicDetails
                        .StopPrescriptionTime == null) &&
                        DateTime.Equals(this.FormViewerDetails.BasicDetails
                        .StopPrescriptionTime, DateTime.MinValue)) ||
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime ==
                      null)) ||
                  Items.FormViewerDetails.BasicDetails.StartDTTM >=
                    this.FormViewerDetails.BasicDetails.StartDTTM) &&
                ((Items.FormViewerDetails.BasicDetails.StartDTTM <=
                  this.FormViewerDetails.BasicDetails.StartDTTM &&
                  ((Items.FormViewerDetails.BasicDetails.StopPrescriptionTime !=
                    null &&
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime !=
                      DateTime.MinValue &&
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime >
                      CommonBB.GetServerDateTime()) ||
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime ==
                      null ||
                    Items.FormViewerDetails.BasicDetails.StopPrescriptionTime ==
                      DateTime.MinValue)) ||
                  Items.FormViewerDetails.BasicDetails.StartDTTM >
                    this.FormViewerDetails.BasicDetails.StartDTTM) &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.CANCELLED &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.DISCONTINUED &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.ONHOLD &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.AWAITINGAUTHORISE &&
                Items.PrescriptionItemStatus !=
                  PrescriptionItemStatusCodes.COMPLETED &&
                Items.formViewerDetails.BasicDetails.IdentifyingOID > 0 &&
                !String.IsNullOrEmpty(Items.LorenzoID) &&
                Items != this
            )
            .Select((Items) => Items);
          if (NewItems != null && NewItems.Count() > 0) {
            this.AddMedicationItemsToCollection(
              NewItems,
              objClinicalMedications
            );
          }
        }
      } else {
        let NewItems = this.objItems
          .Where(
            (Items) =>
              !String.IsNullOrEmpty(Items.OperationMode) &&
              String.Compare(
                Items.OperationMode,
                'N',
                StringComparison.OrdinalIgnoreCase
              ) == 0 &&
              Items.PrescriptionItemStatus !=
                PrescriptionItemStatusCodes.CANCELLED &&
              Items.PrescriptionItemStatus !=
                PrescriptionItemStatusCodes.DISCONTINUED &&
              Items.PrescriptionItemStatus !=
                PrescriptionItemStatusCodes.ONHOLD &&
              Items.PrescriptionItemStatus !=
                PrescriptionItemStatusCodes.AWAITINGAUTHORISE &&
              Items.PrescriptionItemStatus !=
                PrescriptionItemStatusCodes.COMPLETED &&
              Items.formViewerDetails.BasicDetails.IdentifyingOID > 0 &&
              !String.IsNullOrEmpty(Items.LorenzoID) &&
              Items != this
          )
          .Select((Items) => Items);
        if (NewItems != null && NewItems.Count() > 0) {
          this.AddMedicationItemsToCollection(NewItems, objClinicalMedications);
        }
      }
    }
    this.GetWarningsForCurrentItem(objClinicalMedications);
  }
  private static CurrentMedicationsForConflicts(
    objClinicalMedications: ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria>,
    objSuppItems: DecisionSupportItems,
    bIsCurrentSession: boolean,
    oItems: IEnumerable<PrescriptionItemVM>,
    oVM: PrescriptionItemVM
  ): void {
    if (!bIsCurrentSession) {
      if (oItems != null && oItems.Count() > 0) {
        let DiscontinueDrug = oItems
          .Where(
            (Drug) =>
              Drug.PrescriptionItemOID.ToString() ==
              objSuppItems.PrescriptionItemOID
          )
          .Select((Drug) => Drug);
        if (
          DiscontinueDrug == null ||
          (DiscontinueDrug != null && DiscontinueDrug.Count() == 0)
        )
          PrescriptionItemVM.AddItems(
            objClinicalMedications,
            objSuppItems,
            oVM
          );
      } else {
        PrescriptionItemVM.AddItems(objClinicalMedications, objSuppItems, oVM);
      }
    } else {
      PrescriptionItemVM.AddItems(objClinicalMedications, objSuppItems, oVM);
    }
  }
  private static AddItems(
    objClinicalMedications: ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria>,
    objSuppItems: DecisionSupportItems,
    PresItemVM: PrescriptionItemVM
  ): void {
    let dsCurrItem: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
      new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
    dsCurrItem.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
    dsCurrItem.DrugItem.IdentifyingName = objSuppItems.IdentifyingName;
    dsCurrItem.DrugItem.IdentifyingOID = objSuppItems.IdentifyingOID;
    dsCurrItem.DrugItem.IdentifyingType = objSuppItems.IdentifyingType;
    dsCurrItem.DrugItem.ItemType = objSuppItems.ItemType;
    dsCurrItem.DrugItem.LorenzoID = objSuppItems.LorenzoID;
    dsCurrItem.DrugItem.GenericDrugLorenzoID =
      objSuppItems.GenericDrugLorenzoID;
    dsCurrItem.DrugItem.Basedrugname = objSuppItems.Basedrugname;
    dsCurrItem.StartDate = objSuppItems.StartDate;
    dsCurrItem.EndDate = objSuppItems.EndDate;
    dsCurrItem.PrescriptionType = objSuppItems.PrescriptionType;
    dsCurrItem.PrescriptionDTTM = objSuppItems.PrescriptionDTTM;
    dsCurrItem.DrugItem.ITMSUBTYP = objSuppItems.ItemsubType;
    dsCurrItem.DrugItem.PrescriptionItemNumber =
      objSuppItems.PrescriptionItemNumber;
    if (
      objSuppItems.PrescriptionDTTM != null &&
      DateTime.NotEquals(objSuppItems.PrescriptionDTTM.Date, DateTime.MinValue.Date)
    ) {
      dsCurrItem.DrugItem.PrescriptionItemId = objSuppItems.PrescriptionItemOID;
      dsCurrItem.DrugItem.ConflictUniqueId = 'CC_PCPRES';
    } else {
      dsCurrItem.DrugItem.ConflictUniqueId = 'CC_UNIQUEID';
    }
    objClinicalMedications.Add(dsCurrItem);
    if (
      String.Compare(
        objSuppItems.ItemsubType,
        CConstants.SUBTYPE,
        StringComparison.OrdinalIgnoreCase
      ) == 0 &&
      objSuppItems.PrescriptionDTTM != null &&
      DateTime.NotEquals(objSuppItems.PrescriptionDTTM.Date, DateTime.MinValue.Date)
    ) {
      if (!String.IsNullOrEmpty(objSuppItems.MCItem)) {
        let sMCitem: string = objSuppItems.MCItem;
        let sMCitemSerialize: string[] = sMCitem.Split('^');
        if (sMCitemSerialize != null && sMCitemSerialize.length > 0) {
          let sProblemDetails: StringBuilder = new StringBuilder();
          let sProblemName: StringBuilder = new StringBuilder();
          let ncount: number = sMCitemSerialize.length - 1;
          for (let i: number = 0; i <= ncount; i++) {
            let dsCurrItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
              new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
            dsCurrItems.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
            let stmp: string[] = sMCitemSerialize[i].Split('~');
            let lnIdentifyingOID: number = 0;
            Number.TryParse(stmp[0], (o) => (lnIdentifyingOID = o));
            dsCurrItems.DrugItem.IdentifyingOID = lnIdentifyingOID;
            dsCurrItems.DrugItem.IdentifyingType = stmp[1];
            dsCurrItems.DrugItem.IdentifyingName = stmp[2];
            if (stmp.length > 3) dsCurrItems.DrugItem.LorenzoID = stmp[3];
            dsCurrItems.StartDate = objSuppItems.StartDate;
            dsCurrItems.EndDate = objSuppItems.EndDate;
            dsCurrItems.PrescriptionType = objSuppItems.PrescriptionType;
            dsCurrItems.PrescriptionDTTM = objSuppItems.PrescriptionDTTM;
            dsCurrItems.DrugItem.PrescriptionItemId =
              objSuppItems.PrescriptionItemOID;
            dsCurrItems.DrugItem.ITMSUBTYP = objSuppItems.ItemsubType;
            dsCurrItems.DrugItem.ConflictUniqueId = 'CC_PCPRES';
            dsCurrItems.DrugItem.NonCatItemReason =
              CommonFlags.MCidentifyingName;
            objClinicalMedications.Add(dsCurrItems);
          }
        }
      }
    } else if (
      String.Equals(
        objSuppItems.ItemsubType,
        CConstants.SUBTYPE,
        StringComparison.OrdinalIgnoreCase
      ) &&
      PresItemVM.ActionCode != ActivityTypes.UnHold
    ) {
      if (
        PresItemVM.FormViewerDetails.MulticomponentDetails != null &&
        PresItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo !=
          null
      ) {
        let mcicount: number =
          PresItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
            .Count;
        if (mcicount > 0) {
          for (let ncount: number = 0; ncount < mcicount; ncount++) {
            let dsCurrItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
              new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
            dsCurrItems.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
            dsCurrItems.DrugItem.IdentifyingOID =
              PresItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                ncount
              ].IdentifyingOID;
            dsCurrItems.DrugItem.IdentifyingType =
              PresItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                ncount
              ].IdentifyingType;
            dsCurrItems.DrugItem.LorenzoID =
              PresItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                ncount
              ].LorenzoID;
            dsCurrItems.DrugItem.IdentifyingName =
              PresItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                ncount
              ].ComponentName;
            dsCurrItems.DrugItem.ConflictUniqueId = 'CC_UNIQUEID';
            dsCurrItems.DrugItem.ITMSUBTYP = objSuppItems.ItemsubType;
            dsCurrItems.DrugItem.PrescribableItemListOID =
              PresItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                ncount
              ].PrescribableItemListOID;
            dsCurrItems.DrugItem.UniqueMCRowID =
              PresItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                ncount
              ].UniqueMCRowID;
            dsCurrItems.DrugItem.NonCatItemReason =
              CommonFlags.MCidentifyingName;
            objClinicalMedications.Add(dsCurrItems);
          }
        }
      }
    }
    if (
      objSuppItems != null &&
      objSuppItems.FluidIdentifyingOID > 0 &&
      !String.IsNullOrEmpty(objSuppItems.FluidLorenzoID) &&
      !String.IsNullOrEmpty(objSuppItems.FluidItemType) &&
      objSuppItems.FluidPrescribableItemListOID > 0 &&
      objSuppItems.PrescriptionDTTM != null &&
      DateTime.NotEquals(objSuppItems.PrescriptionDTTM.Date, DateTime.MinValue.Date)
    ) {
      let dsInfCurrItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
        new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
      dsInfCurrItems.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
      dsInfCurrItems.DrugItem.IdentifyingOID = objSuppItems.FluidIdentifyingOID;
      dsInfCurrItems.DrugItem.IdentifyingType = objSuppItems.FluidItemType;
      dsInfCurrItems.DrugItem.LorenzoID = objSuppItems.FluidLorenzoID;
      dsInfCurrItems.DrugItem.IdentifyingName =
        objSuppItems.FluidIdentifyingname;
      dsInfCurrItems.DrugItem.PrescribableItemListOID =
        objSuppItems.FluidPrescribableItemListOID;
      dsInfCurrItems.DrugItem.ConflictUniqueId = 'CC_PCPRES';
      dsInfCurrItems.StartDate = objSuppItems.StartDate;
      dsInfCurrItems.EndDate = objSuppItems.EndDate;
      dsInfCurrItems.PrescriptionType = objSuppItems.PrescriptionType;
      dsInfCurrItems.PrescriptionDTTM = objSuppItems.PrescriptionDTTM;
      dsInfCurrItems.DrugItem.PrescriptionItemId =
        objSuppItems.PrescriptionItemOID;
      objClinicalMedications.Add(dsInfCurrItems);
    } else if (
      objSuppItems != null &&
      objSuppItems.FluidIdentifyingOID > 0 &&
      PresItemVM.FormViewerDetails.BasicDetails != null &&
      PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      PatientContext.IsINFUSIONON &&
      PresItemVM.FormViewerDetails.BasicDetails.Route != null &&
      PresItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
      !String.IsNullOrEmpty(
        PresItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString()
      ) &&
      String.Compare(
        PresItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
        '1'
      ) == 0 &&
      !String.IsNullOrEmpty(
        PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID
      ) &&
      !String.IsNullOrEmpty(
        PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType
      ) &&
      PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .FluidIdentifyingOID > 0 &&
      PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .FluidIdentifyingOID == objSuppItems.FluidIdentifyingOID &&
      PresItemVM.FormViewerDetails.BasicDetails.IsFluidAssociated &&
      PresItemVM.ActionCode != ActivityTypes.UnHold
    ) {
      let dsNewItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
        new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
      dsNewItems.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
      dsNewItems.DrugItem.IdentifyingOID =
        PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
      dsNewItems.DrugItem.IdentifyingType =
        PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType;
      dsNewItems.DrugItem.LorenzoID =
        PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID;
      dsNewItems.DrugItem.IdentifyingName =
        PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .FluidSelectvalue != null
          ? PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .FluidSelectvalue.DisplayText
          : String.Empty;
      dsNewItems.DrugItem.PrescribableItemListOID =
        PresItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidPrescribableItemListOID;
      dsNewItems.DrugItem.ConflictUniqueId = 'CC_UNIQUEID';
      objClinicalMedications.Add(dsNewItems);
    }
  }
  private AddMedicationItemsToCollection(
    NewItems: IEnumerable<PrescriptionItemVM>,
    objClinicalMedications: ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria>
  ): void {
    let nCount: number = NewItems.Count();
    for (let i: number = 0; i < nCount; i++) {
      let oVM: PrescriptionItemVM = NewItems[i];
      // NewItems.forEach( (oVM)=> {
      let objSupItems: DecisionSupportItems = new DecisionSupportItems();
      objSupItems.IdentifyingName =
        oVM.FormViewerDetails.BasicDetails.IdentifyingName;
      objSupItems.IdentifyingOID =
        oVM.FormViewerDetails.BasicDetails.IdentifyingOID;
      objSupItems.IdentifyingType =
        oVM.FormViewerDetails.BasicDetails.IdentifyingType;
      objSupItems.ItemType = oVM.ItemMainType;
      objSupItems.LorenzoID = oVM.LorenzoID;
      objSupItems.StartDate = oVM.FormViewerDetails.BasicDetails.StartDTTM;
      objSupItems.EndDate = oVM.FormViewerDetails.BasicDetails.EndDTTM;
      objSupItems.PrescriptionType = oVM.PrescriptionType;
      objSupItems.PrescriptionDTTM = oVM.PrescriptionDTTM;
      objSupItems.PrescriptionItemOID = oVM.PrescriptionItemOID.ToString();
      objSupItems.ItemsubType = oVM.ItemSubType;
      if (
        oVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        (oVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsSequentialPrescribing ||
          oVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder > 0) &&
        oVM.FormViewerDetails.BasicDetails.InfusionDetails
          .PrescriptionItemNumber > 0
      )
        objSupItems.PrescriptionItemNumber =
          oVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
      if (oVM.FormViewerDetails.BasicDetails.InfusionDetails != null) {
        if (
          oVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue !=
            null &&
          !String.IsNullOrEmpty(
            oVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue
              .DisplayText
          )
        ) {
          objSupItems.FluidIdentifyingname =
            oVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue.DisplayText;
        }
        objSupItems.FluidIdentifyingOID =
          oVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
        if (
          this.ActionCode == ActivityTypes.Reorder ||
          this.ActionCode == ActivityTypes.Amend
        ) {
          this.SetInfusionRateProperties();
        }
        objSupItems.FluidItemType =
          oVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType;
        objSupItems.FluidLorenzoID =
          oVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID;
        objSupItems.FluidPrescribableItemListOID =
          oVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidPrescribableItemListOID;
      }
      if (
        oVM.FormViewerDetails.BasicDetails.Ordersets != null &&
        !String.IsNullOrEmpty(
          oVM.FormViewerDetails.BasicDetails.Ordersets.Value
        )
      ) {
        if (
          this.FormViewerDetails.BasicDetails.Ordersets != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Ordersets.Value
          )
        ) {
          if (
            !this.FormViewerDetails.BasicDetails.Ordersets.IsSelected &&
            this.FormViewerDetails.BasicDetails.Ordersets.Value ==
              oVM.FormViewerDetails.BasicDetails.Ordersets.Value
          ) {
            continue;
          }
        }
      }
      PrescriptionItemVM.CurrentMedicationsForConflicts(
        objClinicalMedications,
        objSupItems,
        true,
        null,
        oVM
      );
      // });
    }
  }
  public CheckSequentialAA(): boolean {
    if (
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) &&
      PatientContext.ClerkFormViewDefaultBehavior !=
        ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionType.Value
      ) &&
      (String.Equals(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypeCode.CONTINUOUS,
        StringComparison.CurrentCultureIgnoreCase
      ) ||
        String.Equals(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypeCode.SINGLEDOSEVOLUME,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
        String.Equals(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypeCode.FLUID,
          StringComparison.CurrentCultureIgnoreCase
        )) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails
        .SelectedSequenceName != null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0 &&
      (String.IsNullOrEmpty(this.PrescriptionItemStatus) ||
        String.Equals(
          this.PrescriptionItemStatus,
          CConstants.AWAITINGAUTHORISE,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      let IsAAdrugavailableinSeq: boolean = this.ParentbaseVM.MedsResolve.Any(
        (c) =>
          c.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            c.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          c.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          c.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo ==
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo &&
          c.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0 &&
          String.Equals(
            c.PrescriptionItemStatus,
            CConstants.AWAITINGAUTHORISE,
            StringComparison.InvariantCultureIgnoreCase
          )
      );
      let IsExistingSeq: boolean = this.ParentbaseVM.MedsResolve.Any(
        (c) =>
          c.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            c.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          c.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          c.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo ==
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo &&
          (String.Equals(
            c.PrescriptionItemStatus,
            CConstants.SUBMITTED,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
            String.Equals(
              c.PrescriptionItemStatus,
              CConstants.AUTOVERIFIED,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              c.PrescriptionItemStatus,
              CConstants.CLINICALLYVERIFIED,
              StringComparison.InvariantCultureIgnoreCase
            ))
      );
      if (
        (this.FormViewerDetails.BasicDetails.IsAuthorise ||
          this.FormViewerDetails.BasicDetails.IsFluidAuthorise) &&
        !IsAAdrugavailableinSeq &&
        IsExistingSeq
      ) {
        let iMsgBox: iMessageBox = ObjectHelper.CreateObject(
          new iMessageBox(),
          {
            Title: 'Lorenzo - Manage prescription',
            Message: Resource.MedicationForm.SequenceAAMsg,
            MessageButton: MessageBoxButton.OK,
            IconType: MessageBoxType.Information,
          }
        );
        iMsgBox.MessageBoxClose = (s, e) => {
          this.iMessageBox_MsgBoxClose(s, e);
        };
        iMsgBox.Show();
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
  public CheckBasicMandatory(objMsg: iMessageBox): boolean {
    this.objMsgBox = objMsg;
    let dLDose: number;
    Number.TryParse(
      this.FormViewerDetails.BasicDetails.Dose,
      (o) => (dLDose = o)
    );
    let dUDose: number;
    Number.TryParse(
      this.FormViewerDetails.BasicDetails.UpperDose,
      (o) => (dUDose = 0)
    );
    let IsMultiInfusionRoutes: boolean = false;
    let sInfusionType: string = String.Empty;
    if (this.FormViewerDetails.BasicDetails.InfusionType != null)
      sInfusionType = this.FormViewerDetails.BasicDetails.InfusionType.Value;
    let IsIntermittent: boolean =
      String.Compare(
        sInfusionType,
        InfusionTypesCode.INTERMITTENT,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0;
    let IsPCA: boolean =
      String.Compare(
        sInfusionType,
        InfusionTypesCode.PCA,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0;
    let IsContinuous: boolean =
      String.Compare(
        sInfusionType,
        InfusionTypesCode.CONTINUOUS,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sInfusionType,
        InfusionTypesCode.SINGLEDOSEVOLUME,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sInfusionType,
        InfusionTypesCode.FLUID,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0;
    if (this.FormViewerDetails.BasicDetails.launchsupplyinstrmezzanineCheck) {
      return false;
    }
    if (
      this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
      this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null &&
      this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
    ) {
      let SelInfusionRoutes =
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
          (SelInfRoutes) =>
            SelInfRoutes.IsSelected &&
            SelInfRoutes.Tag != null &&
            String.Compare(
              SelInfRoutes.Tag.ToString(),
              '1',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
        ).Select((SelInfRoutes) => SelInfRoutes);
      if (SelInfusionRoutes != null && SelInfusionRoutes.Count() > 0) {
        IsMultiInfusionRoutes = true;
      } else {
        IsMultiInfusionRoutes = false;
      }
    }
    if (
      PatientContext.IsINFUSIONON &&
      this.FormViewerDetails.BasicDetails.Infusions &&
      ((this.FormViewerDetails.BasicDetails.Route != null &&
        this.FormViewerDetails.BasicDetails.Route.Tag != null &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
          '1'
        ) == 0) ||
        IsMultiInfusionRoutes) &&
      this.FormViewerDetails.BasicDetails.itemSubType != CConstants.SUBTYPE_GAS
    ) {
      if (!this.CheckRoute()) {
        return false;
      }
      if (
        ((this.FormViewerDetails.BasicDetails.Route != null &&
          this.FormViewerDetails.BasicDetails.Route.Tag != null &&
          String.Compare(
            this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
            '1'
          ) == 0) ||
          IsMultiInfusionRoutes) &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.itemSubType,
          CConstants.SUBTYPE_GAS,
          StringComparison.CurrentCultureIgnoreCase
        ) != 0
      ) {
        if (
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .isProductVisible == Visibility.Visible &&
          String.Compare(
            this.FormViewerDetails.BasicDetails.InfusionDetails.SelProdName,
            CConstants.SelProdLink,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0 &&
          this.FormViewerDetails.BasicDetails.InfusionDetails.isProductMandatory
        ) {
          if (!this.CheckProduct()) {
            return false;
          }
          if (!this.InfusionType()) {
            return false;
          }
        } else {
          if (!this.InfusionType()) {
            return false;
          }
        }
        if (IsPCA) {
          if (!this.CheckDeliveryDevice()) {
            return false;
          }
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfBoosterDoseVisi == Visibility.Visible
      ) {
        if (!this.BoosterDose()) return false;
        if (!this.BoosterDoseUOM()) return false;
      }
      if (!this.CheckDoseType()) return false;
      if (IsContinuous) {
        if (!this.CheckMonitoringPeriod()) return false;
      }
      if (
        this.FormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Visible
      ) {
        if (!this.CheckDose()) return false;
      }
      if (!this.CheckFluid()) return false;
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsConcentrationVisible == Visibility.Visible
      ) {
        if (!this.CheckConcentrationMandatory()) {
          return false;
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeVisible ==
          Visibility.Visible
      ) {
        if (!this.CheckVolume()) return false;
        if (!this.CheckVolumeUOM()) return false;
      }
      if (!this.InfusionPeriod()) return false;
      if (!this.InfusionPeriodUOM()) return false;
      if (IsContinuous) {
        if (!this.InfusionRate()) return false;
        if (
          String.Compare(
            sInfusionType,
            InfusionTypesCode.CONTINUOUS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          if (!this.InfusionPeriodforSequential()) return false;
        }
      } else if (IsIntermittent) {
        if (!this.CheckInfusionPeriod()) return false;
        if (!this.InfusionRate()) return false;
        if (!this.CheckFrequency()) return false;
        if (!this.CheckPrnInstructions()) return false;
      } else if (IsPCA) {
        if (!this.CheckBolus()) return false;
        if (!this.CheckLockoutPeriod()) return false;
        if (!this.BackgroundInfusionRate()) return false;
      }
      if (!this.CheckRsnforModification()) {
        return false;
      }
      if (IsContinuous || IsPCA || IsIntermittent) {
        if (
          PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
        ) {
          if (!this.ReviewAfterMandatory()) return false;
        }
        if (
          this.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
          Visibility.Visible
        ) {
          if (IsIntermittent) {
            if (!this.CheckReviewAfterWithDuration()) {
              return false;
            }
          } else if (IsContinuous || IsPCA) {
            if (!this.CheckReviewAfter()) {
              return false;
            }
          }
        }
      }
      if (!this.CheckStartDTTM()) {
        return false;
      } else if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) &&
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
          Visibility.Visible &&
        !this.ValidateReview()
      ) {
        return false;
      } else if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) &&
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
          Visibility.Visible &&
        !this.ValidateStopDate()
      ) {
        return false;
      } else if (!this.CheckDuration()) {
        return false;
      } else if (!this.ValidateStopDateTime()) {
        return false;
      } else if (
        !this.IsClinicallyVerifyEnable &&
        !(
          (this.ActionCode == ActivityTypes.Prescribe ||
            this.ActionCode == ActivityTypes.Reorder) &&
          (this.FormViewerDetails.BasicDetails.IsAuthorise ||
            this.FormViewerDetails.BasicDetails.IsFluidAuthorise ||
            this.FormViewerDetails.BasicDetails.IsMCIAuthorise)
        )
      ) {
        if (this.FormViewerDetails.BasicDetails.IsInfAmendStartDTTMBlank)
          return true;
        if (this.IsDueNowSlot || this.IsInfInprogress) return true;
        if (
          (PatientContext.IsINFUSIONON &&
            this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .SubSequentialItemOrderno <= 1) ||
          !PatientContext.IsINFUSIONON
        ) {
          if (
            String.Compare(
              ContextInfo.MenuCode,
              'MN_MEDADMINISTRAT_P2',
              StringComparison.CurrentCultureIgnoreCase
            ) != 0 &&
            !String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            String.Compare(
              ContextInfo.MenuCode,
              'MN_MEDINPATSL_P2',
              StringComparison.CurrentCultureIgnoreCase
            ) != 0 &&
            String.Compare(
              ContextInfo.MenuCode,
              'CC_FOR_ADMIN',
              StringComparison.CurrentCultureIgnoreCase
            ) != 0 &&
            String.Compare(
              ContextInfo.MenuCode,
              'MN_MEDDISCHRGESL_P2',
              StringComparison.InvariantCultureIgnoreCase
            ) != 0 &&
            String.Compare(
              ContextInfo.MenuCode,
              'MN_MEDLEAVESL_P2',
              StringComparison.InvariantCultureIgnoreCase
            ) != 0 &&
            DateTime.LessThan(this.FormViewerDetails.BasicDetails.StartDTTM.Date,
              CommonBB.GetServerDateTime().Date) &&
            !this.CheckStartDTTM()
          ) {
            this.FocusControl = 'dtpStartDate';
            objMsg.Message = 'Start date cannot be earlier than current date';
            objMsg.Show();
            return false;
          } else if (
            String.Compare(
              ContextInfo.MenuCode,
              'MN_MEDADMINISTRAT_P2',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 &&
            DateTime.LessThan(this.FormViewerDetails.BasicDetails.StartDTTM.Date,
              PatientContext.EncounterStartDate.Date)
          ) {
            this.FocusControl = 'dtpStartDate';
            objMsg.Message =
              'Start date cannot be earlier than encounter start date';
            objMsg.Show();
            return false;
          }
        }
      }
      if (!this.CheckBrand()) return false;
      if (!this.CheckQuantity()) return false;
      if (!this.CheckMED_GRP_STATYP()) return false;
      if (!this.CheckMedClerkModifyReason()) return false;
      if (!this.CheckVerificationComments()) {
        return false;
      }
      return true;
    } else if (
      PatientContext.IsINFUSIONON &&
      this.FormViewerDetails.BasicDetails.itemSubType == CConstants.SUBTYPE_GAS
    ) {
      if (!this.CheckRoute()) {
        return false;
      }
      if (!this.CheckFlowrate()) {
        return false;
      }
      if (!this.CheckSaturationRange()) {
        return false;
      }
      if (!this.CheckStartDTTM()) {
        return false;
      }
      if (
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
          Visibility.Visible &&
        !this.ValidateReview()
      ) {
        return false;
      }
      if (!this.ValidateStopDateTime()) {
        return false;
      }
      if (!this.CheckMED_GRP_STATYP()) {
        return false;
      }
      if (!this.CheckRsnforModification()) {
        return false;
      }
      if (!this.CheckVerificationComments()) {
        return false;
      }
      if (!this.CheckMedClerkModifyReason()) {
        return false;
      }
      return true;
    } else {
      if (!this.CheckRoute()) {
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsDosageFormMandatory &&
        (this.FormViewerDetails.BasicDetails.DosageForm == null ||
          (this.FormViewerDetails.BasicDetails.DosageForm != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.DosageForm.DisplayText
            ))) &&
        this.FormViewerDetails.BasicDetails.IsenableDosage
      ) {
        this.FocusControl = 'cboDosageForm';
        objMsg.Message = 'Dosage form cannot be blank';
        objMsg.Show();
        return false;
      } else if (!this.CheckDoseType()) {
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
          Visibility.Collapsed &&
        !this.CheckDose()
      ) {
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
          Visibility.Visible &&
        !this.CheckADMIN_METHOD()
      ) {
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsEnableStrength &&
        this.FormViewerDetails.BasicDetails.IsStrengthMandatory &&
        (this.FormViewerDetails.BasicDetails.Strength == null ||
          (this.FormViewerDetails.BasicDetails.Strength != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.Strength.Value
            )))
      ) {
        this.FocusControl = 'cboStrength';
        objMsg.Message = Resource.MedicationForm.Strength_Msg;
        objMsg.Show();
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsSiteMandatory &&
        (this.FormViewerDetails.BasicDetails.Site == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Site.DisplayText
          )) &&
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.SiteFreeText
        ) &&
        this.FormViewerDetails.BasicDetails.IsSiteEnabled &&
        this.FormViewerDetails.BasicDetails.SiteVisibility == Visibility.Visible
      ) {
        if (
          !String.Equals(
            this.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.NONCATALOGUEITEM,
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          !String.Equals(
            this.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.Precatalog,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          this.FocusControl = 'cboSite';
          objMsg.Message = 'Site cannot be blank';
          objMsg.Show();
          return false;
        }
      } else if (!this.CheckFrequency()) {
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsBrandMandatory ==
          Visibility.Visible &&
        (!this.FormViewerDetails.BasicDetails.IsClearEnabled ||
          String.Compare(
            this.FormViewerDetails.BasicDetails.BrandName,
            'Select brand',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0)
      ) {
        this.FocusControl = 'cmdBrand';
        objMsg.Message = 'Enter brand, this field is mandatory.';
        objMsg.Show();
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsPRNInstructionMandatory &&
        (this.FormViewerDetails.BasicDetails.PRNInstruction == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.PRNInstruction.DisplayText
          )) &&
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.PRNInstructionFreeText
        )
      ) {
        this.FocusControl = 'cboPRNInstruction';
        objMsg.Message = 'PRN instructions cannot be blank';
        objMsg.Show();
        return false;
      } else if (!this.CheckStartDTTM()) {
        return false;
      } else if (!this.CheckMED_GRP_STATYP()) {
        return false;
      } else if (!this.CheckQuantity()) {
        return false;
      } else if (!this.ReviewAfterMandatory()) {
        return false;
      } else if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) &&
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
          Visibility.Visible &&
        (!this.ValidateReview() || !this.CheckReviewAfterWithDuration())
      ) {
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.Route != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.Route.DisplayText
        ) &&
        this.FormViewerDetails.BasicDetails.RouteRecorded != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.RouteRecorded.DisplayText
        ) &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.Route.Value,
          this.FormViewerDetails.BasicDetails.RouteRecorded.Value,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 &&
        this.IsProhibitedRoute
      ) {
        this.FocusControl = 'cboRoute';
        objMsg.Message =
          'Route entered is a prohibited route. Enter another value.';
        objMsg.Show();
        return false;
      } else if (
        this.IsReasonForModificationVisible == Visibility.Visible &&
        this.FormViewerDetails.BasicDetails.IsenableRSNFORMOD == true &&
        this.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD == true &&
        (this.FormViewerDetails.BasicDetails.ReasonforModification == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.ReasonforModification
              .DisplayText
          ) ||
          this.FormViewerDetails.BasicDetails.ReasonforModification
            .DisplayText == 'Select reason')
      ) {
        this.FocusControl = 'cboRsnForMod';
        objMsg.Message = 'Reason for modification cannot be blank.';
        objMsg.Show();
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails
          .IsMandatoryReasonForMedClerkModify &&
        this.IsReasonForMedicationClerkModifyVisible == Visibility.Visible &&
        (this.FormViewerDetails.BasicDetails.MedClerkModifyReason == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.MedClerkModifyReason.DisplayText
          ))
      ) {
        this.FocusControl = 'cboModClerkReason';
        objMsg.Message = Resource.MedicationForm.ManMedClerkModReason;
        objMsg.Show();
        return false;
      } else if (
        !this.IsClinicallyVerifyEnable &&
        !(
          (this.ActionCode == ActivityTypes.Prescribe ||
            this.ActionCode == ActivityTypes.Reorder) &&
          (this.FormViewerDetails.BasicDetails.IsAuthorise ||
            this.FormViewerDetails.BasicDetails.IsMCIAuthorise)
        )
      ) {
        if (
          this.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD == true &&
          !this.IsSkipStartDateValidation
        ) {
          let IsStepReorderInPast: boolean = false;
          if (
            this.ActionCode == ActivityTypes.Reorder &&
            this.FormViewerDetails.BasicDetails.DoseType != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.DoseType.Value
            ) &&
            String.Equals(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            IsStepReorderInPast = true;
          }
          let bCheckStartDTTM: boolean = true;
          if (
            this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo > 0
          ) {
            let seqItem = CSequentialHelper.GetFirstActiveItemInfusionVM(
              this.ParentbaseVM.MedsResolve,
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .GroupSequenceNo
            );
            if (
              seqItem != null &&
              seqItem.ItemSequenceNo !=
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .ItemSequenceNo
            ) {
              bCheckStartDTTM = false;
            } else if (
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .ItemSequenceNo == 0 &&
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .SelectedSequenceName != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .SelectedSequenceName.Value
              )
            ) {
              bCheckStartDTTM = false;
            }
          } else if (
            this.FormViewerDetails.BasicDetails.SequenceInfo != null &&
            this.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo >
              0 &&
            CommonSequentialHelper.IsSequeneSubsequentItem(this)
          ) {
            bCheckStartDTTM = false;
          }
          if (bCheckStartDTTM) {
            if (
              !IsStepReorderInPast &&
              String.Compare(
                ContextInfo.MenuCode,
                'MN_MEDADMINISTRAT_P2',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              !String.Equals(
                ContextInfo.MenuCode,
                CConstants.AuthoriseMenuCode,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              String.Compare(
                ContextInfo.MenuCode,
                'MN_MEDINPATSL_P2',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              String.Compare(
                ContextInfo.MenuCode,
                'CC_FOR_ADMIN',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              PatientContext.ClerkFormViewDefaultBehavior !=
                ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
                DateTime.LessThan(this.FormViewerDetails.BasicDetails.StartDTTM.Date,
                CommonBB.GetServerDateTime().Date)
            ) {
              this.FocusControl = 'dtpStartDate';
              objMsg.Message = 'Start date cannot be earlier than current date';
              objMsg.Show();
              return false;
            } else if (
              String.Compare(
                ContextInfo.MenuCode,
                'MN_MEDADMINISTRAT_P2',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
              DateTime.LessThan(this.FormViewerDetails.BasicDetails.StartDTTM.Date,
                PatientContext.EncounterStartDate.Date)
            ) {
              this.FocusControl = 'dtpStartDate';
              objMsg.Message =
                'Start date cannot be earlier than encounter start date';
              objMsg.Show();
              return false;
            }
          }
        }
      } else if (
        this.IsClinicallyVerifyEnable &&
        this.IsClinicallyVerifyCommentsMandatory &&
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.VerificationComments
        )
      ) {
        if (
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          objMsg.Message = 'Verification comments cannot be blank.';
        } else if (
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          objMsg.Message = "Authoriser’s comment's cannot be blank.";
        }
        this.FocusControl = 'txtVerificationComments';
        objMsg.Show();
        return false;
      }
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) &&
        !this.ValidateStopDateTime()
      ) {
        return false;
      }
      if (
        !String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking
        ) &&
        !this.ValidateStopDate()
      ) {
        return false;
      }
      if (!this.CheckVerificationComments()) {
        return false;
      }
      return true;
    }
  }
  public ValidateStopDateTime(): boolean {
    if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.IsVisibleStopDate ==
        Visibility.Visible &&
      this.FormViewerDetails.BasicDetails.IsenableStopDate &&
      this.FormViewerDetails.BasicDetails.StartDTTM.Year >
        CConstants.DateTimeMinYear &&
      this.FormViewerDetails.BasicDetails.StartDTTM.Year <
        CConstants.DateTimeMaxYear &&
      this.FormViewerDetails.BasicDetails.StopDate.Year >
        CConstants.DateTimeMinYear &&
      this.FormViewerDetails.BasicDetails.StopDate.Year <
        CConstants.DateTimeMaxYear
    ) {
      let dtStartDTTM: DateTime =
        this.FormViewerDetails.BasicDetails.StartDTTM.DateTime.Add(
          this.FormViewerDetails.BasicDetails.StartPrescriptionTime.TimeOfDay
        );
      let dtEndDTTM: DateTime = DateTime.MinValue;
      if (
        ObjectHelper.HasValue(
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime
        )
      ) {
        dtEndDTTM = this.FormViewerDetails.BasicDetails.StopDate.DateTime.Add(
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value
            .TimeOfDay
        );
      } else {
        dtEndDTTM = this.FormViewerDetails.BasicDetails.StopDate.Date;
      }
      if (DateTime.LessThan(dtEndDTTM, dtStartDTTM)) {
        this.FocusControl = 'dtpStopDate';
        this.objMsgBox.Message = Resource.MedicationForm.ValidateStopDTTM;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    if (
      this.FormViewerDetails.BasicDetails != null &&
      PatientContext.ClerkFormViewDefaultBehavior !=
        ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
      this.FormViewerDetails.BasicDetails.IsVisibleStopDate ==
        Visibility.Visible &&
      (this.FormViewerDetails.BasicDetails.IsenableStopDate ||
        (this.FormViewerDetails.BasicDetails.SequenceInfo != null &&
          this.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo >
            0 &&
          this.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo >
            0)) &&
      this.FormViewerDetails.BasicDetails.RecordedadminDTTM.Year >
        CConstants.DateTimeMinYear &&
      this.FormViewerDetails.BasicDetails.RecordedadminDTTM.Year <
        CConstants.DateTimeMaxYear &&
      this.FormViewerDetails.BasicDetails.StopDate.Year >
        CConstants.DateTimeMinYear &&
      this.FormViewerDetails.BasicDetails.StopDate.Year <
        CConstants.DateTimeMaxYear
    ) {
      let dtRecordedadminDTTM: DateTime =
        this.FormViewerDetails.BasicDetails.RecordedadminDTTM;
      let dtEndDTTM: DateTime = DateTime.MinValue;
      if (
        ObjectHelper.HasValue(
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime
        )
      ) {
        dtEndDTTM = this.FormViewerDetails.BasicDetails.StopDate.DateTime.Add(
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value
            .TimeOfDay
        );
      } else {
        dtEndDTTM = this.FormViewerDetails.BasicDetails.StopDate.Date;
      }
      if (DateTime.LessThanOrEqualTo(dtEndDTTM, dtRecordedadminDTTM)) {
        this.FocusControl = 'dtpStopDate';
        if (this.objMsgBox != null) {
          this.objMsgBox.Message =
            'Administration has been recorded for a future slot. Stop date cannot be earlier than the slot time ' +
            dtRecordedadminDTTM.ToString(CConstants.LongDateListFormat);
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    }
    return true;
  }
  public CheckForTechValidateMandatory(): void {
    let isCntrlDrug: boolean = this.IsControlledDrug !=null ? this.IsControlledDrug.Equals('1') : false;
    if (this.ItemSubType == 'CC_MULCMPNTITM' && isCntrlDrug) {
      this.IsTechValidateMandatory = false;
      this.IsFormviewTechValtabMandatory = false;
    } else {
      this.IsTechValidateMandatory =
        !this.formViewerDetails.BasicDetails.IsFormViewerDisable &&
        this.IsFormviewTechValtabMandatory &&
        (String.Compare(
          this.formViewerDetails.BasicDetails.IdentifyingType,
          CConstants.CATALOGUEITEM,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
          String.Compare(
            this.formViewerDetails.BasicDetails.IdentifyingType,
            CConstants.ACTUALMOIETY,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0) &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0;
    }
  }
  public DrugVersionMatch: string;
  public CheckDynamicFormMandatoryDynamicForm(objMsg: iMessageBox): boolean {
    this.objMsgBox = objMsg;
    if (
      this.FormViewerDetails.MandatoryControls != null &&
      this.FormViewerDetails.BasicControls != null
    ) {
      let tmp: List<string> = new List<string>(
        this.FormViewerDetails.BasicControls.ToList()
      );
      let tmpMand: List<boolean> = new List<boolean>(
        this.FormViewerDetails.MandatoryControls.ToList()
      );
      if (!this.FormViewerDetails.BasicControls.Contains('CC_TRTMNT')) {
        this.FormViewerDetails.BasicDetails.TreatmentToContinue = null;
      }
      if (
        this.formViewerDetails.BasicDetails.IsStrengthMandatory &&
        !this.FormViewerDetails.BasicControls.Contains('CC_STRENGTH')
      ) {
        tmp.Add('CC_STRENGTH');
        tmpMand.Add(true);
      }
      if (
        this.formViewerDetails.BasicDetails.IsDosageFormMandatory &&
        !this.FormViewerDetails.BasicControls.Contains('CC_FORM')
      ) {
        tmp.Add('CC_FORM');
        tmpMand.Add(true);
      }
      if (
        this.formViewerDetails.BasicDetails.IsSiteMandatory &&
        !this.FormViewerDetails.BasicControls.Contains('CC_SITE')
      ) {
        tmp.Add('CC_SITE');
        tmpMand.Add(true);
      }
      if (
        this.formViewerDetails.BasicDetails.IsBrandMandatory ==
          Visibility.Visible &&
        !this.FormViewerDetails.BasicControls.Contains('CC_Brand')
      ) {
        tmp.Add('CC_Brand');
        tmpMand.Add(true);
      }
      if (tmp.Count > 0) {
        this.FormViewerDetails.BasicControls = tmp.ToArray();
        this.FormViewerDetails.MandatoryControls = tmpMand.ToArray();
      }
      let nLen: number = this.FormViewerDetails.MandatoryControls.Length;
      let nBasicLen: number = this.FormViewerDetails.BasicControls.Length;
      for (let i: number = 0; i < nLen && i < nBasicLen; i++) {
        if (
          this.FormViewerDetails.MandatoryControls[i] ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_QUANTITY' &&
            this.formViewerDetails.BasicDetails.IsQuantityMandatory) ||
          (String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Clerking,
            StringComparison.InvariantCultureIgnoreCase
          ) != 0 &&
            this.FormViewerDetails.BasicControls[i] == 'CC_QUANTITY' &&
            String.IsNullOrEmpty(
              this.formViewerDetails.BasicDetails.Quantity
            ) &&
            this.formViewerDetails.BasicDetails.QuantityUOM != null &&
            !String.IsNullOrEmpty(
              this.formViewerDetails.BasicDetails.QuantityUOM.Value
            )) ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_FORM' &&
            this.formViewerDetails.BasicDetails.IsDosageFormMandatory) ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_STRENGTH' &&
            this.formViewerDetails.BasicDetails.IsStrengthMandatory) ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_SITE' &&
            this.formViewerDetails.BasicDetails.IsSiteMandatory) ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_DIRECTION' &&
            this.formViewerDetails.BasicDetails.IsPRNInstructionMandatory) ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_VerifyAuthoriseCOM' &&
            this.IsClinicallyVerifyCommentsMandatory) ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_Brand' &&
            this.formViewerDetails.BasicDetails.IsBrandMandatory ==
              Visibility.Visible &&
            !(
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            )) ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_REASONMOD' &&
            this.IsReasonForModificationVisible == Visibility.Visible) ||
          (this.FormViewerDetails.BasicControls[i] == 'CC_FREQUENCY' &&
            this.formViewerDetails.BasicDetails.IsMandatoryFrequency) ||
          this.FormViewerDetails.BasicControls[i] == 'CC_REVIEWAFTER'
        ) {
          let bValidate: boolean = true;
          switch (this.FormViewerDetails.BasicControls[i]) {
            case 'ROUTE':
              bValidate = this.CheckRoute();
              break;
            case 'CC_PROBLEM':
              bValidate = this.CheckProblem();
              break;
            case 'CC_SITE':
              bValidate = this.CheckSite();
              break;
            case 'LINEE':
              bValidate = this.CheckLINEE();
              break;
            case 'CC_FORM':
              bValidate = this.CheckForm();
              break;
            case 'CC_DIRECTION':
              bValidate = this.CheckDIRECTION();
              break;
            case 'CC_FREQUENCY':
              bValidate = this.CheckFrequency();
              break;
            case 'CC_ADMININSTR':
              bValidate = this.CheckADMININSTR();
              break;
            case 'CC_ADMININSTROTHERS':
              bValidate = this.CheckADMININSTROTHERS();
              break;
            case 'CC_MED_GRP_STATYP':
              bValidate = this.CheckMED_GRP_STATYP();
              break;
            case 'CC_DOSETYPE':
              bValidate = this.CheckDoseType();
              break;
            case 'CC_ENDRSMNT_PROPTY':
              bValidate = this.CheckENDRSMNT_PROPTY();
              break;
            case 'CC_TRTMNT':
              bValidate = this.CheckTRTMNT();
              break;
            case 'CC_SUPLYINSTR':
              bValidate = this.CheckSUPLYINSTR();
              break;
            case 'CC_MEDCLERK':
              bValidate = this.CheckMEDCLERK();
              break;
            case 'CC_QUANTITY':
              bValidate = this.CheckQUANTITY();
              break;
            case 'CC_DOSE':
              bValidate = this.CheckDose();
              break;
            case 'CC_STARTDTTM':
            case 'CC_STARTDT':
              bValidate = this.CheckStartDTTM();
              break;
            case 'CC_STOPDTTM':
              bValidate = this.CheckSTOPDTTM();
              break;
            case 'CC_ADNALCMNT':
              bValidate = this.CheckADNALCMNT();
              break;
            case 'CC_BATCHNO':
              bValidate = this.CheckBatchNumber();
              break;
            case 'CC_ADMN_METHOD':
              bValidate = this.CheckADMIN_METHOD();
              break;
            case 'CC_EXPIRYDT':
              bValidate = this.CheckEXPIRYDT();
              break;
            case 'CC_INSTLMNT_INSTCS':
              bValidate = this.CheckINSTLMNT_INSTCS();
              break;
            case 'CC_INTVLBNINSTL':
              bValidate = this.CheckINTVLBNINSTL();
              break;
            case 'CC_LEGALCAT':
              bValidate = this.CheckLegalCategory();
              break;
            case 'CC_NOINSTL':
              bValidate = this.CheckNOINSTL();
              break;
            case 'CC_DRUGNAME':
              bValidate = this.CheckDRUGNAME();
              break;
            case 'DURON':
              bValidate = this.CheckDURON();
              break;
            case 'CC_NONCATNAME':
              bValidate = this.CheckNONCATNAME();
              break;
            case 'CC_NONCATREASON':
              bValidate = this.CheckNONCATREASON();
              break;
            case 'CC_NONCATOTHREA':
              bValidate = this.CheckNONCATOTHREA();
              break;
            case 'CC_REASONMOD':
              bValidate = this.CheckRsnforModification();
              break;
            case 'CC_STRENGTH':
              bValidate = this.CheckStrength();
              break;
            case 'CC_VerifyAuthoriseCOM':
              bValidate = this.CheckVerificationComments();
              break;
            case 'CC_Brand':
              bValidate = this.CheckBrand();
              break;
            case 'CC_REVIEWAFTER':
              bValidate = this.ReviewAfterMandatory();
              break;
          }
          if (!bValidate) return false;
        }
      }
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        if (
          this.FormViewerDetails.BasicDetails.Completedate == true &&
          DateTime.GreaterThan(this.FormViewerDetails.BasicDetails.CompleteStartDTTM.Date,
            CommonBB.GetServerDateTime().Date)
        ) {
          this.FocusControl = 'dtpStartDate';
          this.objMsgBox.Message = Resource.MedicationForm.ValidateDate;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        } else if (this.FormViewerDetails.BasicDetails.Partialdate == true) {
          let MonthNo: number = 1;
          if (this.FormViewerDetails.BasicDetails.Month != null) {
            MonthNo = Convert.ToInt32(
              Enum.Parse(
                /*typeof*/ EnumVals,
                this.FormViewerDetails.BasicDetails.Month.Value,
                true
              )
            );
          }
          let YearNo: number =
            this.FormViewerDetails.BasicDetails.Year > 0
              ? Convert.ToInt32(this.FormViewerDetails.BasicDetails.Year)
              : 1;
          if (
            DateTime.GreaterThan(new DateTime(YearNo, MonthNo, 1), CommonBB.GetServerDateTime().Date)
          ) {
            this.FocusControl = 'udYear';
            this.objMsgBox.Message = Resource.MedicationForm.ValidateDate;
            this.objMsgBox.MessageButton = MessageBoxButton.OK;
            this.objMsgBox.Show();
            return false;
          }
        }
      }
      if (
        !PatientContext.IsINFUSIONON ||
        (PatientContext.IsINFUSIONON &&
          ((this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.InfusionType != null &&
            this.FormViewerDetails.BasicDetails.InfusionType.Value ==
              InfusionTypesCode.INTERMITTENT) ||
            this.FormViewerDetails.BasicDetails.InfusionType == null))
      )
        if (
          String.Compare(
            PrescriptionTypes.ForAdministration,
            PatientContext.PrescriptionType,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          !this.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds
        ) {
          if (!this.FormViewerDetails.BasicDetails.AsRequired) {
            if (
              this.FormViewerDetails.BasicDetails.AdminTimes
                .AdministrationScheduleTimes == null ||
              this.FormViewerDetails.BasicDetails.AdminTimes
                .AdministrationScheduleTimes.Count == 0 ||
              this.FormViewerDetails.BasicDetails.IsDaysOfWeekMandatory
            ) {
              return false;
            } else if (
              this.FormViewerDetails.BasicDetails.SelectedFrequencyDetails !=
                null &&
              String.Compare(
                this.FormViewerDetails.BasicDetails.SelectedFrequencyDetails
                  .Type,
                'CC_PERIOD'
              ) == 0 &&
              String.Compare(
                this.FormViewerDetails.BasicDetails.SelectedFrequencyDetails
                  .UOM,
                'CC_IPONCENLY'
              ) != 0 &&
              this.FormViewerDetails.BasicDetails.AdminTimes.IsFixedTime
            ) {
              let nCount: number =
                this.FormViewerDetails.BasicDetails.AdminTimes
                  .AdministrationScheduleTimes.Count;
              let nZeroCnt: number = 0;
              for (let i: number = 0; i < nCount; i++) {
                if (
                  this.FormViewerDetails.BasicDetails.AdminTimes
                    .AdministrationScheduleTimes[i].ScheduleDTTM.TimeOfDay
                    .TotalMinutes <= 0
                )
                  nZeroCnt++;
                if (nZeroCnt > 1) break;
              }
              if (nZeroCnt > 1) return false;
            }
          }
          if (
            (this.ActionCode == ActivityTypes.Prescribe ||
              this.ActionCode == ActivityTypes.Reorder) &&
            this.FormViewerDetails != null &&
            this.FormViewerDetails.BasicDetails != null &&
            !this.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds &&
            (this.formViewerDetails.BasicDetails.IsDoNotOpenFVForOrderSet ==
              null ||
              (this.formViewerDetails.BasicDetails.IsDoNotOpenFVForOrderSet !=
                null &&
                ObjectHelper.HasValue(
                  this.formViewerDetails.BasicDetails.IsDoNotOpenFVForOrderSet
                ) &&
                !this.formViewerDetails.BasicDetails.IsDoNotOpenFVForOrderSet
                  .Value))
          ) {
            return false;
          }
        }
      if (!this.ValidateStopDateTime()) {
        return false;
      }
      if (
        PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
        this.FormViewerDetails.BasicControls != null &&
        this.FormViewerDetails.BasicControls.Count() > 0 &&
        (this.FormViewerDetails.BasicControls.Contains('CC_STARTDTTM') ||
          this.FormViewerDetails.BasicControls.Contains('CC_STARTDT'))
      ) {
        if (!this.IsClinicallyVerifyEnable) {
          if (
            this.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD == true &&
            !this.IsSkipStartDateValidation
          ) {
            let IsStepReorderInPast: boolean = false;
            if (
              this.ActionCode == ActivityTypes.Reorder &&
              this.FormViewerDetails.BasicDetails.DoseType != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.DoseType.Value
              ) &&
              String.Equals(
                this.FormViewerDetails.BasicDetails.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              IsStepReorderInPast = true;
            }
            if (
              !IsStepReorderInPast &&
              String.Compare(
                ContextInfo.MenuCode,
                'MN_MEDADMINISTRAT_P2',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              !String.Equals(
                ContextInfo.MenuCode,
                CConstants.AuthoriseMenuCode,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              String.Compare(
                ContextInfo.MenuCode,
                'MN_MEDINPATSL_P2',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              String.Compare(
                ContextInfo.MenuCode,
                'CC_FOR_ADMIN',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              PatientContext.ClerkFormViewDefaultBehavior !=
                ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
              DateTime.LessThan(this.FormViewerDetails.BasicDetails.StartDTTM.Date,
                CommonBB.GetServerDateTime().Date)
            ) {
              this.FocusControl = 'dtpStartDate';
              if (objMsg != null) {
                objMsg.Message =
                  'Start date cannot be earlier than current date';
                objMsg.Show();
              }
              return false;
            } else if (
              String.Compare(
                ContextInfo.MenuCode,
                'MN_MEDADMINISTRAT_P2',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
              DateTime.LessThan(this.FormViewerDetails.BasicDetails.StartDTTM.Date,
                PatientContext.EncounterStartDate.Date)
            ) {
              this.FocusControl = 'dtpStartDate';
              if (objMsg != null) {
                objMsg.Message =
                  'Start date cannot be earlier than encounter start date';
                objMsg.Show();
              }
              return false;
            }
          }
        }
      }
      if (
        this != null &&
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.IsDaysOfWeekMandatory &&
        !String.Equals(
          PrescriptionTypes.ForAdministration,
          PatientContext.PrescriptionType,
          StringComparison.OrdinalIgnoreCase
        ) &&
        !String.Equals(
          PrescriptionTypes.Clerking,
          PatientContext.PrescriptionType,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        if (
          this.FormViewerDetails.BasicDetails.DaysOfWeekVisibility ==
            Visibility.Visible &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DrugFreqUOMCode
          ) &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.DrugFreqUOMCode,
            'CC_MEDDRSN2',
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          let nDayCnt: number = 0;
          if (this.FormViewerDetails.BasicDetails.IsMon) nDayCnt++;
          if (this.FormViewerDetails.BasicDetails.IsTue) nDayCnt++;
          if (this.FormViewerDetails.BasicDetails.IsWed) nDayCnt++;
          if (this.FormViewerDetails.BasicDetails.IsThu) nDayCnt++;
          if (this.FormViewerDetails.BasicDetails.IsFri) nDayCnt++;
          if (this.FormViewerDetails.BasicDetails.IsSat) nDayCnt++;
          if (this.FormViewerDetails.BasicDetails.IsSun) nDayCnt++;
          if (nDayCnt < this.FormViewerDetails.BasicDetails.FrequencyLowEvent) {
            if (this.objMsgBox != null) {
              this.FocusControl = 'Weekdays';
              this.objMsgBox.Message = Resource.MedicationForm.ManDaysofWeek;
              this.objMsgBox.MessageButton = MessageBoxButton.OK;
              this.objMsgBox.Show();
            }
            return false;
          }
        }
      }
      let IsOrderSetMedication: boolean = false;
      if (
        this.FormViewerDetails.BasicDetails.Ordersets != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.Ordersets.Value
        ) &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.Ordersets.DisplayText
        ) &&
        !String.Equals(
          PrescriptionTypes.Clerking,
          PatientContext.PrescriptionType,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        IsOrderSetMedication = true;
      }
      if (
        IsOrderSetMedication &&
        this.ActionCode == ActivityTypes.Prescribe &&
        this.IsDoseCalcVisible == Visibility.Visible &&
        this.IsDoseCalcEnabled &&
        this.FormViewerDetails.BasicDetails.ISAlwaysuseDosecalc &&
        !this.IsDoseCalcPerformed &&
        MedicationCommonProfileData.PrescribeConfig != null &&
        MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
      ) {
        return false;
      }
    }
    return true;
  }
  public ValidateStopDate(): boolean {
    if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.IsVisibleStopDate ==
        Visibility.Visible &&
      this.FormViewerDetails.BasicDetails.IsenableStopDate &&
      this.FormViewerDetails.BasicDetails.StartDTTM.Year >
        CConstants.DateTimeMinYear &&
      this.FormViewerDetails.BasicDetails.StartDTTM.Year <
        CConstants.DateTimeMaxYear &&
      this.FormViewerDetails.BasicDetails.StopDate.Year >
        CConstants.DateTimeMinYear &&
      this.FormViewerDetails.BasicDetails.StopDate.Year <
        CConstants.DateTimeMaxYear
    ) {
      let dtStartDTTM: DateTime =
        this.FormViewerDetails.BasicDetails.StartDTTM.DateTime.Add(
          this.FormViewerDetails.BasicDetails.StartPrescriptionTime.TimeOfDay
        );
      let dtEndDTTM: DateTime = DateTime.MinValue;
      if (
        ObjectHelper.HasValue(
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime
        )
      ) {
        dtEndDTTM = this.FormViewerDetails.BasicDetails.StopDate.DateTime.Add(
          this.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value
            .TimeOfDay
        );
      } else {
        dtEndDTTM = this.FormViewerDetails.BasicDetails.StopDate.Date;
      }
      if (DateTime.LessThan(dtEndDTTM, dtStartDTTM)) {
        this.FocusControl = 'dtpStopDate';
        this.objMsgBox.Message = Resource.MedicationForm.ValidateStopDTTM;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      } else if (
        this.formViewerDetails.BasicDetails.ReviewAfterVisible ==
          Visibility.Visible &&
        DateTime.NotEquals(this.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
          DateTime.MinValue) &&
        DateTime.GreaterThanOrEqualTo(this.FormViewerDetails.BasicDetails.ReviewAfterDTTM, dtEndDTTM)
      ) {
        this.FocusControl = 'udReviewafter';
        this.objMsgBox.Message =
          Resource.Infusion.ReviewAfter_Dur_StopDt_Val_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public ValidateReview(): boolean {
    let dtStartDTTM: DateTime = DateTime.MinValue;
    let dtReviewAfterDTTM: DateTime = DateTime.MinValue;
    let IsReviewAfterDataExist: boolean = false;
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.ReviewAfter != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.ReviewAfter) &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.ReviewAfter,
        '-1.79769313486232E+308'
      ) != 0 &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.ReviewAfter,
        '-2147483648.0'
      ) != 0 &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.ReviewAfter,
        '-2147483648'
      ) != 0 &&
      Convert.ToDouble(this.FormViewerDetails.BasicDetails.ReviewAfter) !=
        Number.MinValue &&
      this.FormViewerDetails.BasicDetails.ReviewafterUOM != null
    ) {
      IsReviewAfterDataExist = true;
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      if (DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)) {
        dtStartDTTM = this.FormViewerDetails.BasicDetails.StartDTTM.Date;
        if (
          DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartPrescriptionTime,
          DateTime.MinValue)
        )
          dtStartDTTM =
            this.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
              this.FormViewerDetails.BasicDetails.StartPrescriptionTime
            );
      }
      if (
        DateTime.NotEquals(this.FormViewerDetails.BasicDetails.ReviewAfterDTTM, DateTime.MinValue)
      )
        dtReviewAfterDTTM = this.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
    }
    if (
      (IsReviewAfterDataExist ||
        (this.FormViewerDetails.BasicDetails.lstAmendedFlds != null &&
          (this.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
            'StartDTTM'
          ) ||
            this.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
              'StartPrescriptionTime'
            )))) &&
            DateTime.NotEquals(dtReviewAfterDTTM, DateTime.MinValue) &&
      DateTime.LessThan(dtReviewAfterDTTM.ToUniversalTime(), dtStartDTTM.ToUniversalTime())
    ) {
      this.FocusControl = 'udReviewafter';
      this.objMsgBox.Message = Resource.Infusion.ReviewMsgPastwithPrescription;
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Show();
      return false;
    }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.lstAmendedFlds != null &&
      this.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0 &&
      !this.ParentbaseVM.GetDurationValueChange(
        this.FormViewerDetails.BasicDetails
      ) &&
      this.PrescriptionItemOID > 0 &&
      DateTime.NotEquals(dtReviewAfterDTTM, DateTime.MinValue) &&
      DateTime.LessThan(dtReviewAfterDTTM, CommonBB.GetServerDateTime())
    ) {
      this.FocusControl = 'udReviewafter';
      this.objMsgBox.Message = Resource.Infusion.ReviewMsgPastwithCurrent;
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Show();
      return false;
    }
    return true;
  }
  public CheckStartDTTM(): boolean {
    let bReturn: boolean = true;
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.OrdinalIgnoreCase
      ) != 0
    ) {
      let sErrormsg: string = String.Empty;
      if (this.FormViewerDetails.BasicDetails.IsInfAmendStartDTTMBlank)
        return true;
      if (
        DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) &&
        (this.IsDueNowSlot || this.IsInfInprogress)
      )
        return true;
      let bCheckStartDTTM: boolean = true;
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0
      ) {
        let seqItem = CSequentialHelper.GetFirstActiveItemInfusionVM(
          this.ParentbaseVM.MedsResolve,
          this.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo
        );
        if (
          seqItem != null &&
          seqItem.ItemSequenceNo !=
            this.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo
        ) {
          bCheckStartDTTM = false;
        } else if (
          this.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo ==
            0 &&
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .SelectedSequenceName != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .SelectedSequenceName.Value
          )
        ) {
          bCheckStartDTTM = false;
        }
      } else if (
        this.FormViewerDetails.BasicDetails.SequenceInfo != null &&
        this.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0 &&
        CommonSequentialHelper.IsSequeneSubsequentItem(this)
      ) {
        bCheckStartDTTM = false;
      }
      if (
        bCheckStartDTTM &&
        (this.FormViewerDetails.BasicDetails == null ||
          (this.FormViewerDetails.BasicDetails != null &&
            DateTime.Equals(this.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)))
      ) {
        if (
          (String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Inpatient,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
            this.FormViewerDetails.BasicDetails.IsMandatoryStartDTTM == true) ||
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Inpatient,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          sErrormsg = 'Start date time cannot be blank.';
          bReturn = false;
        } else {
          sErrormsg = 'Start date time cannot be blank.';
          bReturn = false;
        }
        if (this.objMsgBox != null && bReturn == false) {
          this.FocusControl = 'dtpStartDate';
          this.objMsgBox.Message = sErrormsg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
      }
    } else {
      if (
        this.formViewerDetails.BasicDetails != null &&
        !this.FormViewerDetails.BasicDetails.Completedate &&
        !this.FormViewerDetails.BasicDetails.Partialdate
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'optCompletedate';
          this.objMsgBox.Message = 'DateTime.Commenced cannot be blank.';
          this.objMsgBox.Show();
        }
        bReturn = false;
      } else if (
        this.FormViewerDetails.BasicDetails == null ||
        (this.formViewerDetails.BasicDetails.Completedate &&
          DateTime.Equals(this.FormViewerDetails.BasicDetails.CompleteStartDTTM.Date,
            DateTime.MinValue))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'dtpStartDate';
          this.objMsgBox.Message = 'DateTime.Commenced cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        bReturn = false;
      } else if (
        this.FormViewerDetails.BasicDetails.Completedate == true &&
        DateTime.GreaterThan(this.FormViewerDetails.BasicDetails.CompleteStartDTTM.Date,
          CommonBB.GetServerDateTime().Date)
      ) {
        this.FocusControl = 'dtpStartDate';
        this.objMsgBox.Message = Resource.MedicationForm.ValidateDate;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        bReturn = false;
      } else if (
        this.FormViewerDetails.BasicDetails.Partialdate == true &&
        this.FormViewerDetails.BasicDetails.IsenableMonthYear == true &&
        this.FormViewerDetails.BasicDetails.Month != null &&
        this.FormViewerDetails.BasicDetails.Year < 1900
      ) {
        this.FocusControl = 'udYear';
        this.objMsgBox.Message = 'Year cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        bReturn = false;
      } else if (this.FormViewerDetails.BasicDetails.Partialdate == true) {
        let MonthNo: number = 1;
        if (this.FormViewerDetails.BasicDetails.Month != null) {
          MonthNo = Convert.ToInt32(
            Enum.Parse(
              /*typeof*/ EnumVals,
              this.FormViewerDetails.BasicDetails.Month.Value,
              true
            )
          );
        }
        let YearNo: number =
          this.FormViewerDetails.BasicDetails.Year > 0
            ? Convert.ToInt32(this.FormViewerDetails.BasicDetails.Year)
            : 1;
        if (
          DateTime.GreaterThan(new DateTime(YearNo, MonthNo, 1),  CommonBB.GetServerDateTime().Date)
        ) {
          this.FocusControl = 'udYear';
          this.objMsgBox.Message = Resource.MedicationForm.ValidateDate;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          bReturn = false;
        }
      }
    }
    return bReturn;
  }
  public InfusionType(): boolean {
    if (
      this.formViewerDetails.BasicDetails.InfusionType == null ||
      (this.formViewerDetails.BasicDetails.InfusionType != null &&
        String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionType.DisplayText
        ))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboInfusion';
        this.objMsgBox.Message = 'Infusion type cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public CheckDeliveryDevice(): boolean {
    if (
      this.formViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice ==
        null &&
      String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails
          .DeliveryDeviceFreetext
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboDeliveryDevice';
        this.objMsgBox.Message = 'Delivery device cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public CheckFluid(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidVisible ==
        Visibility.Visible &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.isFluidMandatory &&
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext
      )
    ) {
      this.GetMCFormviewcloseflag();
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboFluid';
        this.objMsgBox.Message = 'Fluid cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public CheckConcentrationMandatory(): boolean {
    if (
      (String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
      ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsConcentrationMandatory) ||
      (String.Equals(
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration,
        '0'
      ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsConcentrationMandatory)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtLowConcentration';
        this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
        this.objMsgBox.Show();
        return false;
      }
    } else if (
      (String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
      ) ||
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration.Equals(
          '0'
        )) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM !=
        null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM
          .Value
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtLowConcentration';
        this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
        this.objMsgBox.Show();
        return false;
      }
    } else if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
      ) &&
      (this.FormViewerDetails.BasicDetails.InfusionDetails
        .LowConcentrationUOM == null ||
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .LowConcentrationUOM != null &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .LowConcentrationUOM.Value,
            '0'
          )))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboLowConcentrationUOMlist';
        this.objMsgBox.Message = 'Concentration UOM cannot be blank.';
        this.objMsgBox.Show();
        return false;
      }
    } else if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration
      ) &&
      String.Equals(
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration,
        '0'
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtUpperConcentration';
        this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
        this.objMsgBox.Show();
        return false;
      }
    } else if (
      (String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration
      ) ||
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration.Equals(
          '0'
        )) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails
        .UpperConcentrationUOM != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .UpperConcentrationUOM.Value
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtUpperConcentration';
        this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
        this.objMsgBox.Show();
        return false;
      }
    } else if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration
      ) &&
      (this.FormViewerDetails.BasicDetails.InfusionDetails
        .UpperConcentrationUOM == null ||
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .UpperConcentrationUOM != null &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .UpperConcentrationUOM.Value,
            '0'
          )))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboUpperConcentrationUOMlist';
        this.objMsgBox.Message = 'Concentration UOM cannot be blank.';
        this.objMsgBox.Show();
        return false;
      }
    } else if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration !=
        null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM
          .Value
      )
    ) {
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration
        ) &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .UpperConcentration,
          '0'
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtUpperConcentration';
          this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration
        ) &&
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .UpperConcentrationUOM == null ||
          (this.FormViewerDetails.BasicDetails.InfusionDetails
            .UpperConcentrationUOM != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .UpperConcentrationUOM.DisplayText
            )))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtUpperConcentration';
          this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        (String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration
        ) ||
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration.Equals(
            '0'
          )) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .UpperConcentrationUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .UpperConcentrationUOM.Value
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtUpperConcentration';
          this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration
        ) &&
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .UpperConcentrationUOM == null ||
          (this.FormViewerDetails.BasicDetails.InfusionDetails
            .UpperConcentrationUOM != null &&
            String.Equals(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .UpperConcentrationUOM.Value,
              '0'
            )))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboUpperConcentrationUOMlist';
          this.objMsgBox.Message = 'Concentration UOM cannot be blank.';
          this.objMsgBox.Show();
          return false;
        }
      }
    } else if (
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails
        .UpperConcentrationUOM != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .UpperConcentrationUOM.Value
      )
    ) {
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
        ) &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration,
          '0'
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtLowConcentration';
          this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
        ) &&
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .LowConcentrationUOM == null ||
          (this.FormViewerDetails.BasicDetails.InfusionDetails
            .LowConcentrationUOM != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .LowConcentrationUOM.DisplayText
            )))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtLowConcentration';
          this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        (String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
        ) ||
          this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration.Equals(
            '0'
          )) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .LowConcentrationUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .LowConcentrationUOM.Value
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtLowConcentration';
          this.objMsgBox.Message = 'Concentration cannot be zero or empty.';
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration
        ) &&
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .LowConcentrationUOM == null ||
          (this.FormViewerDetails.BasicDetails.InfusionDetails
            .LowConcentrationUOM != null &&
            String.Equals(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .LowConcentrationUOM.Value,
              '0'
            )))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboLowConcentrationUOMlist';
          this.objMsgBox.Message = 'Concentration UOM cannot be blank.';
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public CheckBrand(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsBrandMandatory ==
        Visibility.Visible &&
      (!this.FormViewerDetails.BasicDetails.IsClearEnabled ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.BrandName,
          'Select brand',
          StringComparison.InvariantCultureIgnoreCase
        ) == 0)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cmdBrand';
        this.objMsgBox.Message = 'Enter brand, this field is mandatory.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckVolume(): boolean {
    if (
      ((String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.FluidVolume
      ) ||
        Convert.ToDecimal(
          this.formViewerDetails.BasicDetails.InfusionDetails.FluidVolume
        ) <= 0) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM !=
          null) ||
      (this.FormViewerDetails.BasicDetails.InfusionDetails.IsVolumeMandatory &&
        (String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
        ) ||
          Convert.ToDecimal(
            this.formViewerDetails.BasicDetails.InfusionDetails.FluidVolume
          ) <= 0))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtVolume';
        this.objMsgBox.Message = Resource.Infusion.Volume_Zero_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public CheckVolumeUOM(): boolean {
    {
      if (
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.FluidVolume
        ) &&
        Convert.ToDecimal(
          this.formViewerDetails.BasicDetails.InfusionDetails.FluidVolume
        ) > 0 &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM == null
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboVolumeUOM';
          this.objMsgBox.Message = Resource.Infusion.VolumeUOM_Blank_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public BoosterDose(): boolean {
    if (
      this.formViewerDetails.BasicDetails.InfusionDetails.InfBoosterDoseVisi ==
      Visibility.Visible
    ) {
      if (
        (String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Boosterdose
        ) ||
          Convert.ToDecimal(
            this.formViewerDetails.BasicDetails.InfusionDetails.Boosterdose
          ) == 0) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom !=
          null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom
            .Value
        ) &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom
            .Value,
          '0',
          StringComparison.CurrentCultureIgnoreCase
        ) != 0
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtBoosterDose';
          this.objMsgBox.Message = Resource.Infusion.BoosterDose_Zero_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public BoosterDoseUOM(): boolean {
    if (
      !String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.Boosterdose
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom == null
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboBoosterUOM';
        this.objMsgBox.Message = Resource.Infusion.BoosterUOM_Blank_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public InfusionPeriod(): boolean {
    {
      if (
        (this.formViewerDetails.BasicDetails.InfusionDetails
          .InfusionPeriodUom != null &&
          !String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom.Value
          ) &&
          (String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
          ) ||
            Convert.ToDecimal(
              this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            ) == 0)) ||
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .IsInfusionPeriodMandatory &&
          (String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
          ) ||
            Convert.ToDecimal(
              this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            ) == 0))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtInfusionperiod';
          this.objMsgBox.Message = Resource.Infusion.InfuPer_Zero_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public InfusionPeriodUOM(): boolean {
    if (
      !String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) &&
      Convert.ToDecimal(
        this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) > 0 &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom ==
        null
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboinfustionPeriodUOM';
        this.objMsgBox.Message = Resource.Infusion.InfuPerUOM_Blank_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public HomeLeaveSetFocus(): void {
    if (this.OnHomeLeaveMsgFocus != null) {
      this.OnHomeLeaveMsgFocus();
    }
  }
  public ReviewAfterMandatory(): boolean {
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.ReviewAfter) &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.ReviewAfter,
        '-2147483648'
      ) == 0
    )
      this.FormViewerDetails.BasicDetails.ReviewAfter = String.Empty;
    if (
      this.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
      Visibility.Visible
    ) {
      if (
        this.FormViewerDetails.BasicDetails.ReviewAfterMandatory ||
        DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StopPrescriptionTime,
          DateTime.MinValue) ||
        !this.FormViewerDetails.BasicDetails.ReviewAfterMandatory
      ) {
        if (this.FormViewerDetails.BasicDetails.ReviewAfterMandatory) {
          if (
            this.ActionCode == ActivityTypes.Amend &&
            DateTime.NotEquals(this.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
              DateTime.MinValue) &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.ReviewAfter
            ) &&
            ((this.FormViewerDetails.BasicDetails.ReviewafterUOM != null &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.ReviewafterUOM.DisplayText
              )) ||
              this.FormViewerDetails.BasicDetails.ReviewafterUOM == null)
          ) {
            return true;
          }
          if (
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.ReviewAfter
            )
          ) {
            if (this.objMsgBox != null) {
              this.FocusControl = 'udReviewafter';
              this.objMsgBox.Message = Resource.Infusion.ReviewAfter_Blank_Msg;
              this.objMsgBox.MessageButton = MessageBoxButton.OK;
              this.objMsgBox.Show();
            }
            return false;
          }
          if (
            (this.FormViewerDetails.BasicDetails.ReviewafterUOM != null &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.ReviewafterUOM.DisplayText
              )) ||
            this.FormViewerDetails.BasicDetails.ReviewafterUOM == null
          ) {
            if (this.objMsgBox != null) {
              this.FocusControl = 'cboreviewAfterUOM';
              this.objMsgBox.Message =
                Resource.Infusion.ReviewAfterUOM_Blank_Msg;
              this.objMsgBox.MessageButton = MessageBoxButton.OK;
              this.objMsgBox.Show();
            }
            return false;
          }
        } else {
          if (
            (this.FormViewerDetails.BasicDetails.ReviewafterUOM != null &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.ReviewafterUOM.DisplayText
              ) &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.ReviewAfter
              )) ||
            (this.FormViewerDetails.BasicDetails.ReviewafterUOM == null &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.ReviewAfter
              ))
          )
            return true;
          if (
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.ReviewAfter
            ) &&
            this.FormViewerDetails.BasicDetails.ReviewafterUOM != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.ReviewafterUOM.DisplayText
            )
          ) {
            if (this.objMsgBox != null) {
              this.FocusControl = 'udReviewafter';
              this.objMsgBox.Message = Resource.Infusion.ReviewAfter_Blank_Msg;
              this.objMsgBox.MessageButton = MessageBoxButton.OK;
              this.objMsgBox.Show();
            }
            return false;
          }
          if (
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.ReviewAfter
            ) &&
            ((this.FormViewerDetails.BasicDetails.ReviewafterUOM != null &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.ReviewafterUOM.DisplayText
              )) ||
              this.FormViewerDetails.BasicDetails.ReviewafterUOM == null)
          ) {
            if (this.objMsgBox != null) {
              this.FocusControl = 'cboreviewAfterUOM';
              this.objMsgBox.Message =
                Resource.Infusion.ReviewAfterUOM_Blank_Msg;
              this.objMsgBox.MessageButton = MessageBoxButton.OK;
              this.objMsgBox.Show();
            }
            return false;
          }
        }
      }
    }
    return true;
  }
  public BackgroundInfusionRate(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfInfusionRateVisi ==
        Visibility.Visible
    ) {
      if (
        this.FormViewerDetails.BasicDetails.InfusionType != null &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.PCA,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        if (
          (String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.InfusionDetails.Rate
          ) ||
            Convert.ToDecimal(
              this.formViewerDetails.BasicDetails.InfusionDetails.Rate
            ) == 0) &&
          (this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null ||
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom != null)
        ) {
          if (this.objMsgBox != null) {
            this.FocusControl = 'txtInfusionRate';
            this.objMsgBox.Message =
              Resource.Infusion.lblInfusionRateLabel_Text +
              ' ' +
              Resource.Infusion.InfusionRate_Zero_Msg;
            this.objMsgBox.Show();
            return false;
          }
        }
      }
      if (
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom == null ||
          (this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom.DisplayText
            ))) &&
        this.formViewerDetails.BasicDetails.InfusionDetails
          .IsFrmInfusRateMand &&
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboInfustionRateUOM';
          this.objMsgBox.Message =
            Resource.Infusion.lblInfusionRateLabel_Text +
            ' ' +
            Resource.Infusion.InfusionRateUOM_Msg;
          this.objMsgBox.Show();
          return false;
        }
      }
      if (
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom == null ||
          (this.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateDinominatorUom.DisplayText
            ))) &&
        this.formViewerDetails.BasicDetails.InfusionDetails
          .IsFrmInfusRateMand &&
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboInfusionRateUOM';
          this.objMsgBox.Message =
            Resource.Infusion.lblInfusionRateLabel_Text +
            ' ' +
            Resource.Infusion.InfusionRateUOM_Msg;
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public InfusionRate(): boolean {
    let dLRate: number = 0,
      dURate = 0;
    if (
      !String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.Rate
      )
    )
      Number.TryParse(
        this.formViewerDetails.BasicDetails.InfusionDetails.Rate,
        (o) => (dLRate = o)
      );
    if (
      !String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.UpperRate
      )
    )
      Number.TryParse(
        this.formViewerDetails.BasicDetails.InfusionDetails.UpperRate,
        (o) => (dURate = o)
      );
    if (
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      (String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.CONTINUOUS,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.FLUID,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate
    ) {
      if (
        String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom == null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom == null
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtInfusionRate';
          this.objMsgBox.Message =
            Resource.Infusion.lblInfusionRateLabel1_Text +
            ' ' +
            Resource.Infusion.Infusionrate_blank_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        ) ||
        Convert.ToDecimalwithThreeprecision(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        ) <= 0
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtInfusionRate';
          this.objMsgBox.Message =
            Resource.Infusion.lblInfusionRateLabel1_Text +
            ' ' +
            Resource.Infusion.InfusionRate_Zero_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.UpperRate
        ) &&
        Convert.ToDecimal(
          this.formViewerDetails.BasicDetails.InfusionDetails.UpperRate
        ) <= 0
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtUpperInfusionRate';
          this.objMsgBox.Message =
            'Upper ' +
            Resource.Infusion.lblInfusionRateLabelforlower_Text +
            ' ' +
            Resource.Infusion.InfusionRate_Zero_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      } else if (dLRate > 0 && dURate > 0 && dLRate == dURate) {
        this.FocusControl = 'txtUpperInfusionRate';
        this.objMsgBox.Message =
          'Lower and upper limit values are the same. Please change either.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      } else if (dLRate > 0 && dURate > 0 && dLRate > dURate) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtInfusionRate';
          this.objMsgBox.Message =
            'Upper limit value is less than the lower limit value. Please change the value.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    } else if (
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.INTERMITTENT,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (
        (String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        ) ||
          Convert.ToDecimalwithThreeprecision(
            this.formViewerDetails.BasicDetails.InfusionDetails.Rate
          ) == 0) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom != null
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtInfusionRate';
          this.objMsgBox.Message =
            Resource.Infusion.lblInfusionRateLabel1_Text +
            ' ' +
            Resource.Infusion.InfusionRate_Zero_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
      if (
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.UpperRate
        ) &&
        Convert.ToDecimal(
          this.formViewerDetails.BasicDetails.InfusionDetails.UpperRate
        ) <= 0
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtUpperInfusionRate';
          this.objMsgBox.Message =
            'Upper ' +
            Resource.Infusion.lblInfusionRateLabelforlower_Text +
            ' ' +
            Resource.Infusion.InfusionRate_Zero_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      } else if (dLRate > 0 && dURate > 0 && dLRate == dURate) {
        this.FocusControl = 'txtUpperInfusionRate';
        this.objMsgBox.Message =
          'Lower and upper limit values are the same. Please change either.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      } else if (dLRate > 0 && dURate > 0 && dLRate > dURate) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtInfusionRate';
          this.objMsgBox.Message =
            'Upper limit value is less than the lower limit value. Please change the value.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    }
    if (
      (this.FormViewerDetails.BasicDetails.InfusionDetails
        .InfRateNumeratorUom == null ||
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.DisplayText
          ))) &&
      this.formViewerDetails.BasicDetails.InfusionDetails.IsFrmInfusRateMand &&
      !String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.Rate
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboInfustionRateUOM';
        this.objMsgBox.Message =
          Resource.Infusion.lblInfusionRateLabel1_Text +
          ' ' +
          Resource.Infusion.InfusionRateUOM_Msg;
        this.objMsgBox.Show();
        return false;
      }
    }
    if (
      (this.FormViewerDetails.BasicDetails.InfusionDetails
        .InfRateDinominatorUom == null ||
        (this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.DisplayText
          ))) &&
      this.formViewerDetails.BasicDetails.InfusionDetails.IsFrmInfusRateMand &&
      !String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.Rate
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboInfusionRateUOM';
        this.objMsgBox.Message =
          Resource.Infusion.lblInfusionRateLabel1_Text +
          ' ' +
          Resource.Infusion.InfusionRateUOM_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public InfusionPeriodforSequential(): boolean {
    if (
      (this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom ==
        null ||
        (this.formViewerDetails.BasicDetails.InfusionDetails
          .InfusionPeriodUom != null &&
          String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom.Value
          )) ||
        String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        ) ||
        Convert.ToDecimal(
          this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        ) == 0) &&
      this.formViewerDetails.BasicDetails.InfusionDetails
        .IsChksequentialPresitem
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtInfusionperiod';
        this.objMsgBox.Message = Resource.Infusion.InfuPer_Zero_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    } else if (
      (this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom ==
        null ||
        (this.formViewerDetails.BasicDetails.InfusionDetails
          .InfusionPeriodUom != null &&
          String.IsNullOrEmpty(
            this.formViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom.Value
          )) ||
        String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        ) ||
        Convert.ToDecimal(
          this.formViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        ) == 0) &&
      this.formViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder >
        0 &&
      this.formViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder <
        this.formViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtInfusionperiod';
        this.objMsgBox.Message = Resource.Infusion.InfuPer_Zero_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public CheckVerificationComments(): boolean {
    if (
      this.IsClinicallyVerifyCommentsMandatory &&
      (this.IsClinicallyVerifyEnable ||
        (String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
          this.ActionCode == ActivityTypes.Amend)) &&
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.VerificationComments
      )
    ) {
      if (
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.objMsgBox.Message = 'Verification comments cannot be blank.';
      } else if (
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.objMsgBox.Message = "Authoriser’s comment's cannot be blank.";
      }
      this.FocusControl = 'txtVerificationComments';
      this.objMsgBox.Show();
      return false;
    }
    return true;
  }
  public CheckBolus(): boolean {
    if (
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM == null
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtBolus';
        this.objMsgBox.Message = Resource.Infusion.Bolus_Blank_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    if (
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus
      ) ||
      Convert.ToDecimal(
        this.FormViewerDetails.BasicDetails.InfusionDetails.Bolus
      ) == 0
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtBolus';
        this.objMsgBox.Message = Resource.Infusion.Bolus_Zero_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM == null ||
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM.DisplayText
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboBolusUOM';
        this.objMsgBox.Message = Resource.Infusion.BolusUOM_Blank_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public CheckMonitoringPeriod(): boolean {
    let _IsMonPeriodMandatory: boolean =
      this.FormViewerDetails.BasicDetails.InfusionDetails
        .IsMandatoryMonitoringPeriod;
    let _IsMonPeriodEntered: boolean =
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod
      ) &&
      Convert.ToDecimal(
        this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod
      ) != 0;
    let _IsMonPeriodUOMSelected: boolean =
      this.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM !=
      null;
    if (
      (_IsMonPeriodMandatory && !_IsMonPeriodEntered) ||
      (!_IsMonPeriodMandatory &&
        !_IsMonPeriodEntered &&
        _IsMonPeriodUOMSelected)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtMonitoringdevice';
        this.objMsgBox.Message = Resource.Infusion.MoniPer_Zero_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    if (
      (_IsMonPeriodMandatory && !_IsMonPeriodUOMSelected) ||
      (!_IsMonPeriodMandatory &&
        _IsMonPeriodEntered &&
        !_IsMonPeriodUOMSelected)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboMonitoringdeviceUOM';
        this.objMsgBox.Message = Resource.Infusion.MoniPerUOM_Blank_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public CheckDuration(): Boolean {
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Duration)
    ) {
      let CurrentDTTM: DateTime = CommonBB.GetServerDateTime();
      let DurationDTTM: DateTime = DateTime.MinValue;
      let InfPrdDTTM: DateTime = DateTime.MinValue;
      if (
        this.FormViewerDetails.BasicDetails.DurationUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DurationUOM.DisplayText
        )
      ) {
        switch (this.FormViewerDetails.BasicDetails.DurationUOM.Value) {
          case 'CC_MINUTES':
            DurationDTTM = CurrentDTTM.AddMinutes(
              Convert.ToDouble(this.FormViewerDetails.BasicDetails.Duration)
            );
            break;
          case 'CC_HOURS':
            DurationDTTM = CurrentDTTM.AddHours(
              Convert.ToDouble(this.FormViewerDetails.BasicDetails.Duration)
            );
            break;
          case 'CC_MEDDRSN1':
            DurationDTTM = CurrentDTTM.AddDays(
              Convert.ToDouble(this.FormViewerDetails.BasicDetails.Duration)
            );
            break;
          case 'CC_MEDDRSN2':
            DurationDTTM = CurrentDTTM.AddDays(
              Convert.ToDouble(this.FormViewerDetails.BasicDetails.Duration) * 7
            );
            break;
          case 'CC_MEDRSN3':
            DurationDTTM = CurrentDTTM.AddMonths(
              Convert.ToInt32(this.FormViewerDetails.BasicDetails.Duration)
            );
            break;
          case 'CC_MEDRSN4':
            DurationDTTM = CurrentDTTM.AddYears(
              Convert.ToInt32(this.FormViewerDetails.BasicDetails.Duration)
            );
            break;
        }
      }
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
            .DisplayText
        ) &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        )
      ) {
        switch (
          this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
            .DisplayText
        ) {
          case 'minute':
            InfPrdDTTM = CurrentDTTM.AddMinutes(
              Convert.ToDouble(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriod
              )
            );
            break;
          case 'hour':
            InfPrdDTTM = CurrentDTTM.AddHours(
              Convert.ToDouble(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriod
              )
            );
            break;
          case 'day':
            InfPrdDTTM = CurrentDTTM.AddDays(
              Convert.ToDouble(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriod
              )
            );
            break;
          case 'week':
            InfPrdDTTM = CurrentDTTM.AddDays(
              Convert.ToDouble(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriod
              ) * 7
            );
            break;
          case 'month':
            InfPrdDTTM = CurrentDTTM.AddMonths(
              Convert.ToInt32(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriod
              )
            );
            break;
          case 'year':
            InfPrdDTTM = CurrentDTTM.AddYears(
              Convert.ToInt32(
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriod
              )
            );
            break;
        }
      }
      if (
        DateTime.NotEquals(DurationDTTM, DateTime.MinValue) &&
        DateTime.NotEquals(InfPrdDTTM, DateTime.MinValue) &&
        DateTime.LessThan(DurationDTTM, InfPrdDTTM)
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'udDuration';
          this.objMsgBox.Message = Resource.Infusion.DurationValid_Msg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    }
    return true;
  }
  public CheckInfusionPeriod(): boolean {
    return true;
  }
  public CheckReviewAfterWithInfusionPeriod(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
          .DisplayText
      )
    ) {
      let dtInfusionPeriodDttm: DateTime = DateTime.MinValue;
      let lInfusionPeriod: double = Convert.ToDouble(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      );
      switch (
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
          .DisplayText
      ) {
        case 'minute':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddMinutes(
              lInfusionPeriod
            );
          break;
        case 'hour':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddHours(
              lInfusionPeriod
            );
          break;
        case 'day':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddDays(
              lInfusionPeriod
            );
          break;
        case 'week':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddDays(
              lInfusionPeriod * 7
            );
          break;
        case 'month':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddMonths(
              Convert.ToInt32(lInfusionPeriod)
            );
          break;
        case 'year':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddYears(
              Convert.ToInt32(lInfusionPeriod)
            );
          break;
        case 'second':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddSeconds(
              lInfusionPeriod
            );
          break;
      }
      let sReviewAfter: string = String.Empty;
      let sReviewAfterUOM: string = String.Empty;
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) == 0
      ) {
        if (
          !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.ReviewAfter)
        ) {
          sReviewAfter = this.FormViewerDetails.BasicDetails.ReviewAfter;
        } else if (
          this.ActionCode == ActivityTypes.Amend &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.currentItemReviewafter
          )
        ) {
          sReviewAfter =
            this.FormViewerDetails.BasicDetails.currentItemReviewafter;
        }
      }
      let dtReviewAfterdttm: DateTime = DateTime.MinValue;
      if (!String.IsNullOrEmpty(sReviewAfter)) {
        let lReviewAfter: number = Convert.ToDouble(sReviewAfter);
        dtReviewAfterdttm =
          this.FormViewerDetails.BasicDetails.StartDTTM.AddHours(lReviewAfter);
      }
      if (DateTime.GreaterThan(dtReviewAfterdttm, dtInfusionPeriodDttm)) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'udReviewafter';
          this.objMsgBox.Message =
            'Review after should not be greater than infusion period.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public CheckReviewAfterWithDuration(): boolean {
    if (
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Duration) &&
      this.FormViewerDetails.BasicDetails.DurationUOM != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.DurationUOM.Value
      )
    ) {
      let validReviewafterUOM: boolean = false,
        validDurationUOM = false;
      let lDuration: number = Convert.ToInt64(
        this.FormViewerDetails.BasicDetails.Duration
      );
      let intDuration: number = Convert.ToInt32(
        this.FormViewerDetails.BasicDetails.Duration
      );
      let lReviewAfter: number = 0;
      let sReviewAfterUOM: string = String.Empty;
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) == 0
      ) {
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.ReviewAfter
          ) &&
          this.FormViewerDetails.BasicDetails.ReviewafterUOM != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.ReviewafterUOM.Value
          )
        ) {
          lReviewAfter = Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.ReviewAfter
          );
          sReviewAfterUOM =
            this.FormViewerDetails.BasicDetails.ReviewafterUOM.Value;
        } else if (
          this.ActionCode == ActivityTypes.Amend &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.currentItemReviewafter
          ) &&
          this.FormViewerDetails.BasicDetails.currentItemReviewafterUOM !=
            null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.currentItemReviewafterUOM.Value
          )
        ) {
          lReviewAfter = Convert.ToInt64(
            this.FormViewerDetails.BasicDetails.currentItemReviewafter
          );
          sReviewAfterUOM =
            this.FormViewerDetails.BasicDetails.currentItemReviewafterUOM.Value;
        }
      }
      if (lReviewAfter > 0 && !String.IsNullOrEmpty(sReviewAfterUOM)) {
        if (
          String.Equals(
            this.FormViewerDetails.BasicDetails.DurationUOM.Value,
            sReviewAfterUOM
          )
        ) {
          if (lReviewAfter > lDuration) {
            if (this.objMsgBox != null) {
              this.FocusControl = 'udReviewafter';
              this.objMsgBox.Message =
                'The review after time period cannot be longer than the duration time period';
              this.objMsgBox.MessageButton = MessageBoxButton.OK;
              this.objMsgBox.Show();
              return false;
            }
          }
        } else {
          switch (this.FormViewerDetails.BasicDetails.DurationUOM.Value) {
            case 'CC_HOURS':
              lDuration = lDuration * 3600;
              validDurationUOM = true;
              break;
            case 'CC_MINUTES':
              lDuration = lDuration * 60;
              validDurationUOM = true;
              break;
            case 'CC_MEDDRSN1':
              lDuration = lDuration * 86400;
              validDurationUOM = true;
              break;
            case 'CC_MEDDRSN2':
              lDuration = lDuration * 604800;
              validDurationUOM = true;
              break;
            case 'CC_MEDRSN3':
              lDuration = lDuration * 2419200;
              validDurationUOM = true;
              break;
            case 'CC_MEDRSN4':
              lDuration = lDuration * 31536000;
              validDurationUOM = true;
              break;
          }
          switch (sReviewAfterUOM) {
            case 'CC_HOURS':
              lReviewAfter = lReviewAfter * 3600;
              validReviewafterUOM = true;
              break;
            case 'CC_MEDDRSN1':
              lReviewAfter = lReviewAfter * 86400;
              validReviewafterUOM = true;
              break;
            case 'CC_MEDDRSN2':
              lReviewAfter = lReviewAfter * 604800;
              validReviewafterUOM = true;
              break;
          }
          if (
            lReviewAfter > lDuration &&
            validReviewafterUOM &&
            validDurationUOM
          ) {
            if (this.objMsgBox != null) {
              this.FocusControl = 'udReviewafter';
              this.objMsgBox.Message =
                'The review after time period cannot be longer than the duration time period';
              this.objMsgBox.MessageButton = MessageBoxButton.OK;
              this.objMsgBox.Show();
              return false;
            }
          }
        }
      }
    }
    return true;
  }
  public GetReviewAfterDatetime(): DateTime {
    let dtReviewAfterdttm: DateTime = DateTime.MinValue;
    let IsReviewAfterHasValue: boolean =
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.ReviewAfter != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.ReviewAfter) &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.ReviewAfter,
        '-1.79769313486232E+308'
      ) != 0 &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.ReviewAfter,
        '-2147483648.0'
      ) != 0 &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.ReviewAfter,
        '-2147483648'
      ) != 0 &&
      Convert.ToDouble(this.FormViewerDetails.BasicDetails.ReviewAfter) !=
        Number.MinValue;
    let IsReviewAfterUOMHasValue: boolean =
      this.FormViewerDetails.BasicDetails.ReviewafterUOM != null;
    if (IsReviewAfterHasValue && IsReviewAfterUOMHasValue) {
      let dtStartDttm: DateTime = DateTime.MinValue;
      let dtCurrentDateTime: DateTime = DateTime.MinValue;
      if (DateTime.Equals(FormviewerCommonData.ServerDateTime, DateTime.MinValue))
        dtCurrentDateTime = CommonBB.GetServerDateTime();
      else dtCurrentDateTime = FormviewerCommonData.ServerDateTime;
      if (DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)) {
        dtStartDttm = this.FormViewerDetails.BasicDetails.StartDTTM;
        if (
          DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StartPrescriptionTime,
          DateTime.MinValue)
        ) {
          dtStartDttm = dtStartDttm.DateTime.AddTime(
            this.FormViewerDetails.BasicDetails.StartPrescriptionTime
          );
        }
        if (
          DateTime.LessThan(dtStartDttm, dtCurrentDateTime) &&
          this.FormViewerDetails.BasicDetails.ReviewafterUOM != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.ReviewafterUOM.Value
          ) &&
          !this.FormViewerDetails.BasicDetails.ReviewafterUOM.Value.Equals(
            'CC_DOSES'
          )
        ) {
          dtStartDttm = dtCurrentDateTime;
        }
      } else dtStartDttm = dtCurrentDateTime;
      let lReviewAfter: number = Convert.ToDouble(
        this.FormViewerDetails.BasicDetails.ReviewAfter
      );
      switch (this.FormViewerDetails.BasicDetails.ReviewafterUOM.Value) {
        case 'CC_HOURS':
          dtReviewAfterdttm = dtStartDttm.AddHours(lReviewAfter);
          break;
        case 'CC_MEDDRSN1':
          dtReviewAfterdttm = dtStartDttm.AddDays(lReviewAfter);
          break;
        case 'CC_MEDDRSN2':
          dtReviewAfterdttm = dtStartDttm.AddDays(lReviewAfter * 7);
          break;
        case 'CC_DOSES':
          dtReviewAfterdttm = this.GetEnddatetimeforDoseReview(
            dtStartDttm,
            dtCurrentDateTime
          );
          break;
      }
      if (this.ActionCode == ActivityTypes.Amend)
        this.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend = true;
      else
        this.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend =
          false;
    } else if (
      (IsReviewAfterHasValue || IsReviewAfterUOMHasValue) &&
      ((this.ActionCode == ActivityTypes.Amend &&
        this.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend) ||
        !this.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend)
    ) {
      dtReviewAfterdttm = DateTime.MinValue;
      if (this.ActionCode == ActivityTypes.Amend)
        this.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend = true;
      else
        this.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend =
          false;
    } else if (
      this.ActionCode == ActivityTypes.Amend &&
      !this.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend &&
      DateTime.NotEquals(this.FormViewerDetails.BasicDetails.ReviewAfterDTTM, DateTime.MinValue)
    ) {
      dtReviewAfterdttm = this.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
    } else {
      dtReviewAfterdttm = DateTime.MinValue;
    }
    if (DateTime.NotEquals(dtReviewAfterdttm, DateTime.MinValue)) {
      this.FormViewerDetails.BasicDetails.ReviewAfterDTTM = dtReviewAfterdttm;
      let IsDST: boolean, IsAmbiguous, IsInvalid;
      this.FormViewerDetails.BasicDetails.ReviewAfterDateTime =
        dtReviewAfterdttm
          .ConvertToUser(
            (o1) => {
              IsDST = o1;
            },
            (o2) => {
              IsAmbiguous = o2;
            },
            (o3) => {
              IsInvalid = o3;
            }
          )
          .ToDateTimeString(IsDST, IsAmbiguous, CConstants.DateHMFormat);
    } else {
      this.FormViewerDetails.BasicDetails.ReviewAfterDTTM = DateTime.MinValue;
      this.FormViewerDetails.BasicDetails.ReviewAfterDateTime = String.Empty;
    }
    if (
      this.ActionCode == ActivityTypes.Amend &&
      this.FormViewerDetails.BasicDetails.DoReviewOutcomeGenerate
    ) {
      this.ManageReviewOutcome();
      this.CheckReviewAfterManadatory();
    }
    return dtReviewAfterdttm;
  }
  public GetEnddatetimeforDoseDuration(dtStartDttm: DateTime): DateTime {
    let FreqDetail: IPPMAManagePrescSer.CResMsgGetAdministrationTimes =
      this.GetCResMsgGetAdministrationTimes();
    let lDuration: number = 0;
    if (
      this.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Duration)
    )
      lDuration = Convert.ToDouble(
        this.FormViewerDetails.BasicDetails.Duration
      );
    let tmpEndDateTime: DateTime = DateTime.MinValue;
    let lstScheduleDates: List<DateTime> = new List<DateTime>();
    if (FreqDetail != null) {
      lstScheduleDates = MedicationCommonBB.GetScheduleDatesForDoseDuration(
        dtStartDttm,
        dtStartDttm,
        lDuration,
        FreqDetail
      );
    }
    if (lstScheduleDates != null && lstScheduleDates.Count > 0) {
      tmpEndDateTime = lstScheduleDates.Max((o) => o);
    }
    return tmpEndDateTime;
  }
  private GetEnddatetimeforDoseReview(
    dtStartDttm: DateTime,
    currentDateTime: DateTime
  ): DateTime {
    let oTempStartDttm: DateTime = dtStartDttm;
    let FreqDetail: IPPMAManagePrescSer.CResMsgGetAdministrationTimes =
      this.GetCResMsgGetAdministrationTimes();
    let lReviewAfter: number = 0;
    if (
      this.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.ReviewAfter)
    )
      lReviewAfter = Convert.ToDouble(
        this.FormViewerDetails.BasicDetails.ReviewAfter
      );
    let tmpEndDateTime: DateTime = DateTime.MinValue;
    let lstScheduleDates: List<DateTime> = new List<DateTime>();
    if (FreqDetail != null) {
      lstScheduleDates = MedicationCommonBB.GetScheduleDatesForDoseDuration(
        oTempStartDttm,
        currentDateTime,
        lReviewAfter,
        FreqDetail
      );
    }
    if (lstScheduleDates != null && lstScheduleDates.Count > 0) {
      tmpEndDateTime = lstScheduleDates
        .Max((x) => x.ToUniversalTime())
        .ToLocalTime();
    }
    return tmpEndDateTime;
  }
  public GetCResMsgGetAdministrationTimes(): IPPMAManagePrescSer.CResMsgGetAdministrationTimes {
    let oAdminTimesData: ObservableCollection<AdminScheduleTime> = null;
    let oFrequency: IPPMAManagePrescSer.IPPFrequency = null;
    let FreqDetail: IPPMAManagePrescSer.CResMsgGetAdministrationTimes =
      new IPPMAManagePrescSer.CResMsgGetAdministrationTimes();
    if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.AdminTimes != null
    ) {
      if (
        this.FormViewerDetails.BasicDetails.AdminTimes
          .AdministrationScheduleTimes != null
      ) {
        oAdminTimesData = new ObservableCollection<AdminScheduleTime>(
          this.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.OrderBy(
            (x) => x.ScheduleDTTM
          )
        );
      }
      if (
        this.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails != null &&
        this.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency !=
          null
      ) {
        //Not Required for LHS. To be Re-Visited.
        oFrequency=ObjectHelper.Clone(this.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency);
        //oFrequency = this.FormViewerDetails.BasicDetails.AdminTimes.FreqDetails.oFrequency.Clone();
        if (
          oFrequency != null &&
          this.FormViewerDetails.BasicDetails.AdminTimes.isDayOfWeekEnable
        ) {
          oFrequency.IsSunday =
            this.FormViewerDetails.BasicDetails.AdminTimes.IsSun;
          oFrequency.IsMonday =
            this.FormViewerDetails.BasicDetails.AdminTimes.IsMon;
          oFrequency.IsTuesday =
            this.FormViewerDetails.BasicDetails.AdminTimes.IsTue;
          oFrequency.IsWednesday =
            this.FormViewerDetails.BasicDetails.AdminTimes.IsWed;
          oFrequency.IsThursday =
            this.FormViewerDetails.BasicDetails.AdminTimes.IsThu;
          oFrequency.IsFriday =
            this.FormViewerDetails.BasicDetails.AdminTimes.IsFri;
          oFrequency.IsSaturday =
            this.FormViewerDetails.BasicDetails.AdminTimes.IsSat;
        }
      }
      FreqDetail.oFrequency = oFrequency;
      let oAdminData: ObservableCollection<IPPMAManagePrescSer.IPPScheduledetails> =
        new ObservableCollection<IPPMAManagePrescSer.IPPScheduledetails>();
      let oIPPSchDetail: IPPMAManagePrescSer.IPPScheduledetails = null;
      let IsFixed: boolean = false;
      if (oAdminTimesData != null) {
        for (let i: number = 0; i < oAdminTimesData.Count; i++) {
          oIPPSchDetail = new IPPMAManagePrescSer.IPPScheduledetails();
          let nMinutes: number = 0;
          let nTotMinutes: number = 0;
          if (oAdminTimesData[i].IsFixedEnable) {
            IsFixed = true;
            nMinutes = Common.ConvertHourstoMinutes(
              Convert.ToDouble(oAdminTimesData[i].ScheduleDTTM.Hour)
            );
            nTotMinutes =
              nMinutes +
              Convert.ToInt32(oAdminTimesData[i].ScheduleDTTM.Minute);
            oIPPSchDetail.ScheduledTime = nTotMinutes.ToString();
            oAdminData.Add(oIPPSchDetail);
          } else {
            nMinutes = Common.ConvertHourstoMinutes(
              Convert.ToDouble(oAdminTimesData[i].DrugroundDTTM.Hour)
            );
            nTotMinutes =
              nMinutes +
              Convert.ToInt32(oAdminTimesData[i].DrugroundDTTM.Minute);
            oIPPSchDetail.ScheduledTime = nTotMinutes.ToString();
            oAdminData.Add(oIPPSchDetail);
          }
        }
      }
      if (oAdminData != null && oAdminData.Count > 0) {
        if (IsFixed) FreqDetail.oFixedTimes = oAdminData;
        else FreqDetail.oDrugRoundTimes = oAdminData;
      }
    }
    return FreqDetail;
  }
  public CheckReviewAfterManadatory(): void {
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      if (
        DateTime.Equals(this.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue) &&
        String.IsNullOrEmpty(this.formViewerDetails.BasicDetails.Duration) &&
        this.ParentbaseVM != null
      )
        this.FormViewerDetails.BasicDetails.ReviewAfterMandatory =
          this.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig;
      else this.FormViewerDetails.BasicDetails.ReviewAfterMandatory = false;
      if (
        this.FormViewerDetails.BasicDetails.ManageReviewDetail != null &&
        this.FormViewerDetails.BasicDetails.ManageReviewDetail
          .oReviewAfterDetail != null
      ) {
        if (
          this.FormViewerDetails.BasicDetails.ManageReviewDetail
            .oReviewAfterDetail.ReviewType != null &&
          this.FormViewerDetails.BasicDetails.ManageReviewDetail
            .oReviewAfterDetail.ReviewType.Code ==
            medcommonbbconstant.OmitReview &&
          (this.FormViewerDetails.BasicDetails.ManageReviewDetail
            .oReviewAfterDetail.ReviewOutcome == null ||
            (this.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail.ReviewOutcome != null &&
              String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.ManageReviewDetail
                  .oReviewAfterDetail.ReviewOutcome.Code
              )))
        ) {
          this.FormViewerDetails.BasicDetails.ReviewAfterMandatory = true;
        }
        if (
          this.FormViewerDetails.BasicDetails.ManageReviewDetail
            .oReviewAfterDetail.ReviewOutcome != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail.ReviewOutcome.Code
          )
        ) {
          if (
            this.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail.ReviewOutcome.Code ==
            medcommonbbconstant.Schedulefurtherreview
          )
            this.FormViewerDetails.BasicDetails.ReviewAfterMandatory = true;
          else if (
            this.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail.ReviewOutcome.Code ==
              medcommonbbconstant.Reinstatemedication &&
            this.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig
          )
            this.FormViewerDetails.BasicDetails.ReviewAfterMandatory = true;
          else if (
            this.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail.ReviewOutcome.Code ==
            medcommonbbconstant.Nofurtherreviewrequired
          ) {
            this.FormViewerDetails.BasicDetails.ReviewAfterMandatory = false;
          } else {
            this.FormViewerDetails.BasicDetails.ReviewAfterMandatory =
              this.FormViewerDetails.BasicDetails.IsReviewAfterMandatoryByConfig;
          }
        }
      }
    }
  }
  public ManageReviewOutcome(): void {
    if (
      this.ActionCode == ActivityTypes.Amend &&
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.ManageReviewDetail != null &&
      this.FormViewerDetails.BasicDetails.ManageReviewDetail
        .oReviewAfterDetail != null
    ) {
      let IsReviewAfterChanged: boolean = false;
      let IsReviewAfterUOM: boolean = false;
      let IsReviewComments: boolean = false;
      let IsAllBlank: boolean = false;
      if (
        this.FormViewerDetails.BasicDetails.ManageReviewDetail
          .oReviewAfterDetail.ReviewType != null
      ) {
        if (
          this.FormViewerDetails != null &&
          this.FormViewerDetails.BasicDetails != null &&
          !(
            this.FormViewerDetails.BasicDetails.ReviewAfter != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.ReviewAfter
            ) &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.ReviewAfter,
              '-1.79769313486232E+308'
            ) != 0 &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.ReviewAfter,
              '-2147483648.0'
            ) != 0 &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.ReviewAfter,
              '-2147483648'
            ) != 0 &&
            Convert.ToDouble(this.FormViewerDetails.BasicDetails.ReviewAfter) !=
              Number.MinValue
          ) &&
          this.FormViewerDetails.BasicDetails.ReviewafterUOM == null &&
          DateTime.Equals(this.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
            DateTime.MinValue)
        ) {
          IsAllBlank = true;
        } else {
          if (this.FormViewerDetails.BasicDetails.ReviewafterUOM != null) {
            IsReviewAfterUOM = true;
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterDTTM =
              this.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
            if (this.FormViewerDetails.BasicDetails.ReviewafterUOM != null) {
              this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterUOM =
                ObjectHelper.CreateObject(
                  new IPPMAManagePrescSer.ObjectInfo(),
                  {
                    Code: this.FormViewerDetails.BasicDetails.ReviewafterUOM
                      .Value,
                    Name: this.FormViewerDetails.BasicDetails.ReviewafterUOM
                      .DisplayText,
                  }
                );
            }
          }
          if (
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.ReviewAfter != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.ReviewAfter
            ) &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.ReviewAfter,
              '-1.79769313486232E+308'
            ) != 0 &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.ReviewAfter,
              '-2147483648.0'
            ) != 0 &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.ReviewAfter,
              '-2147483648'
            ) != 0 &&
            Convert.ToDouble(this.FormViewerDetails.BasicDetails.ReviewAfter) !=
              Number.MinValue
          ) {
            IsReviewAfterChanged = true;
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfter =
              this.FormViewerDetails.BasicDetails.ReviewAfter;
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterDTTM =
              this.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
          }
          if (
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.ReviewRequestComments != null &&
            !this.FormViewerDetails.BasicDetails.ReviewRequestComments.Equals(
              this.FormViewerDetails.BasicDetails.ManageReviewDetail
                .oReviewAfterDetail.ReviewRequestComments
            )
          ) {
            IsReviewComments = true;
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewRequestComments =
              this.FormViewerDetails.BasicDetails.ReviewRequestComments;
          }
        }
        if (
          IsAllBlank &&
          this.FormViewerDetails.BasicDetails.ManageReviewDetail
            .oReviewAfterDetail.ReviewType != null &&
          this.FormViewerDetails.BasicDetails.ManageReviewDetail
            .oReviewAfterDetail.ReviewType.Code ==
            medcommonbbconstant.GeneralReview &&
          (!this.FormViewerDetails.BasicDetails
            .IsReviewAfterMandatoryByConfig ||
            (this.FormViewerDetails.BasicDetails
              .IsReviewAfterMandatoryByConfig &&
              DateTime.NotEquals(this.FormViewerDetails.BasicDetails.StopDate,
                DateTime.MinValue)))
        ) {
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcome =
            new IPPMAManagePrescSer.ObjectInfo();
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcome.Code =
            medcommonbbconstant.Nofurtherreviewrequired;
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfter =
            null;
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterUOM =
            null;
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterDTTM =
            DateTime.MinValue;
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewRequestComments =
            String.Empty;
        } else if (
          IsReviewAfterUOM ||
          IsReviewAfterChanged ||
          IsReviewComments
        ) {
          if (
            this.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail.ReviewOutcome != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.ManageReviewDetail
                .oReviewAfterDetail.ReviewOutcome.Code
            ) &&
            this.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail.ReviewOutcome.Code ==
              medcommonbbconstant.Reinstatemedication
          ) {
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewType =
              new IPPMAManagePrescSer.ObjectInfo();
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewType.Code =
              medcommonbbconstant.GeneralReview;
          } else {
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcome =
              new IPPMAManagePrescSer.ObjectInfo();
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcome.Code =
              medcommonbbconstant.Schedulefurtherreview;
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewType =
              this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewType;
          }
          if (
            !(
              this.FormViewerDetails != null &&
              this.FormViewerDetails.BasicDetails != null &&
              this.FormViewerDetails.BasicDetails.ReviewAfter != null &&
              !String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.ReviewAfter
              ) &&
              String.Compare(
                this.FormViewerDetails.BasicDetails.ReviewAfter,
                '-1.79769313486232E+308'
              ) != 0 &&
              String.Compare(
                this.FormViewerDetails.BasicDetails.ReviewAfter,
                '-2147483648.0'
              ) != 0 &&
              String.Compare(
                this.FormViewerDetails.BasicDetails.ReviewAfter,
                '-2147483648'
              ) != 0 &&
              Convert.ToDouble(
                this.FormViewerDetails.BasicDetails.ReviewAfter
              ) != Number.MinValue &&
              this.FormViewerDetails.BasicDetails.ReviewafterUOM != null
            ) &&
            DateTime.NotEquals(this.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
              DateTime.MinValue)
          ) {
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterDTTM =
              this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewDueDTTM;
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterUOM =
              this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewAfterUOM;
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfter =
              this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewPeriod;
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewType =
              this.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewType;
          } else
            this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewRequestComments =
              this.FormViewerDetails.BasicDetails.ReviewRequestComments;
        } else if (IsAllBlank) {
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfter =
            null;
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterUOM =
            null;
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterDTTM =
            DateTime.MinValue;
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewRequestComments =
            String.Empty;
        }
      }
    } else {
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.BasicDetails != null &&
        this.FormViewerDetails.BasicDetails.ReviewAfter != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.ReviewAfter
        ) &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.ReviewAfter,
          '-1.79769313486232E+308'
        ) != 0 &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.ReviewAfter,
          '-2147483648.0'
        ) != 0 &&
        String.Compare(
          this.FormViewerDetails.BasicDetails.ReviewAfter,
          '-2147483648'
        ) != 0 &&
        Convert.ToDouble(this.FormViewerDetails.BasicDetails.ReviewAfter) !=
          Number.MinValue &&
        this.FormViewerDetails.BasicDetails.ReviewafterUOM != null
      ) {
        this.FormViewerDetails.BasicDetails.ManageReviewDetail =
          new IPPMAManagePrescSer.ManageReviewPeriod();
        if (this.FormViewerDetails.BasicDetails.ReviewafterUOM != null) {
          this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterUOM =
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
              Code: this.FormViewerDetails.BasicDetails.ReviewafterUOM.Value,
              Name: this.FormViewerDetails.BasicDetails.ReviewafterUOM
                .DisplayText,
            });
        }
        this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfter =
          this.FormViewerDetails.BasicDetails.ReviewAfter;
        this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewAfterDTTM =
          this.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
        this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewRequestComments =
          this.FormViewerDetails.BasicDetails.ReviewRequestComments;
        this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewType =
          new IPPMAManagePrescSer.ObjectInfo();
        this.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewType.Code =
          CConstants.GenReview;
      }
    }
  }
  public CheckReviewAfter(): boolean {
    let bShowReview: boolean = false;
    let dtReviewAfterdttm: DateTime = DateTime.MinValue;
    let dtInfusionPeriodDttm: DateTime = DateTime.MinValue;
    let dtDurationDttm: DateTime = DateTime.MinValue;
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
          .DisplayText
      )
    ) {
      let lInfusionPeriod: double = Convert.ToDouble(
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      );
      switch (
        this.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
          .DisplayText
      ) {
        case 'minute':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddMinutes(
              lInfusionPeriod
            );
          break;
        case 'hour':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddHours(
              lInfusionPeriod
            );
          break;
        case 'day':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddDays(
              lInfusionPeriod
            );
          break;
        case 'week':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddDays(
              lInfusionPeriod * 7
            );
          break;
        case 'month':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddMonths(
              Convert.ToInt32(lInfusionPeriod)
            );
          break;
        case 'year':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddYears(
              Convert.ToInt32(lInfusionPeriod)
            );
          break;
        case 'second':
          dtInfusionPeriodDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddSeconds(
              lInfusionPeriod
            );
          break;
      }
    }
    if (
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Duration) &&
      this.FormViewerDetails.BasicDetails.DurationUOM != null &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.DurationUOM.Value
      )
    ) {
      let lDuration: number = Convert.ToInt64(
        this.FormViewerDetails.BasicDetails.Duration
      );
      switch (this.FormViewerDetails.BasicDetails.DurationUOM.Value) {
        case 'CC_HOURS':
          dtDurationDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddHours(lDuration);
          break;
        case 'CC_MINUTES':
          dtDurationDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddMinutes(lDuration);
          break;
        case 'CC_MEDDRSN1':
          dtDurationDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddDays(lDuration);
          break;
        case 'CC_MEDDRSN2':
          dtDurationDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddDays(
              lDuration * 7
            );
          break;
        case 'CC_MEDRSN3':
          dtDurationDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddMonths(
              Convert.ToInt32(lDuration)
            );
          break;
        case 'CC_MEDRSN4':
          dtDurationDttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddYears(
              Convert.ToInt32(lDuration)
            );
          break;
      }
    }
    let sReviewAfter: string = String.Empty;
    let sReviewAfterUOM: string = String.Empty;
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0
    ) {
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.ReviewAfter
        ) &&
        this.FormViewerDetails.BasicDetails.ReviewafterUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.ReviewafterUOM.Value
        )
      ) {
        sReviewAfter = this.FormViewerDetails.BasicDetails.ReviewAfter;
        sReviewAfterUOM =
          this.FormViewerDetails.BasicDetails.ReviewafterUOM.Value;
      } else if (
        this.ActionCode == ActivityTypes.Amend &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.currentItemReviewafter
        ) &&
        this.FormViewerDetails.BasicDetails.currentItemReviewafterUOM != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.currentItemReviewafterUOM.Value
        )
      ) {
        sReviewAfter =
          this.FormViewerDetails.BasicDetails.currentItemReviewafter;
        sReviewAfterUOM =
          this.FormViewerDetails.BasicDetails.currentItemReviewafterUOM.Value;
      }
    }
    if (
      !String.IsNullOrEmpty(sReviewAfter) &&
      String.Compare(sReviewAfter, '-1.79769313486232E+308') != 0 &&
      String.Compare(sReviewAfter, '-2147483648.0') != 0 &&
      Convert.ToDouble(sReviewAfter) != Number.MinValue
    ) {
      let lReviewAfter: number = Convert.ToDouble(sReviewAfter);
      switch (sReviewAfterUOM) {
        case 'CC_HOURS':
          dtReviewAfterdttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddHours(
              lReviewAfter
            );
          break;
        case 'CC_MEDDRSN1':
          dtReviewAfterdttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddDays(lReviewAfter);
          break;
        case 'CC_MEDDRSN2':
          dtReviewAfterdttm =
            this.FormViewerDetails.BasicDetails.StartDTTM.AddDays(
              lReviewAfter * 7
            );
          break;
      }
    }
    if (
      DateTime.NotEquals(dtReviewAfterdttm, DateTime.MinValue) &&
      DateTime.NotEquals(dtInfusionPeriodDttm, DateTime.MinValue) &&
      DateTime.NotEquals(dtDurationDttm, DateTime.MinValue)
    ) {
      if (
        DateTime.GreaterThan(dtInfusionPeriodDttm, dtDurationDttm) &&
        DateTime.LessThan(dtInfusionPeriodDttm, dtReviewAfterdttm)
      )
        bShowReview = true;
      else if (
        DateTime.GreaterThan(dtDurationDttm, dtInfusionPeriodDttm) &&
        DateTime.LessThan(dtDurationDttm, dtReviewAfterdttm)
      )
        bShowReview = true;
      else if (
        DateTime.Equals(dtInfusionPeriodDttm, dtDurationDttm)&&
        DateTime.LessThan(dtInfusionPeriodDttm, dtReviewAfterdttm)
      )
        bShowReview = true;
    } else if (
      DateTime.NotEquals(dtInfusionPeriodDttm, DateTime.MinValue) &&
      DateTime.NotEquals(dtReviewAfterdttm, DateTime.MinValue) &&
      DateTime.Equals(dtDurationDttm, DateTime.MinValue)
    ) {
      if (
        DateTime.GreaterThan(dtInfusionPeriodDttm, dtDurationDttm) &&
        DateTime.LessThan(dtInfusionPeriodDttm, dtReviewAfterdttm)
      )
        bShowReview = true;
    } else if (
      DateTime.Equals(dtInfusionPeriodDttm, DateTime.MinValue) &&
      DateTime.NotEquals(dtReviewAfterdttm, DateTime.MinValue) &&
      DateTime.NotEquals(dtDurationDttm, DateTime.MinValue)
    ) {
      if (
        DateTime.GreaterThan(dtDurationDttm, dtInfusionPeriodDttm) &&
        DateTime.LessThan(dtDurationDttm, dtReviewAfterdttm)
      )
        bShowReview = true;
    }
    if (bShowReview) {
      this.FocusControl = 'udReviewafter';
      if (this.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded) {
        this.objMsgBox.Message = Resource.Infusion.ReviewAfter_IP_Msg;
      } else {
        this.objMsgBox.Message = Resource.Infusion.ReviewAfter_IP_Dur_Msg;
      }
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Show();
      return false;
    } else return true;
  }
  public CheckFlowrate(): boolean {
    if (
      String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.Rate
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom ==
        null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails
        .InfRateDinominatorUom == null
    )
      return true;
    else {
      if (
        String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtFlowRate';
          this.objMsgBox.Message = 'Flow rate cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
      if (
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        ) &&
        Convert.ToDecimalwithThreeprecision(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        ) == 0
      ) {
        if (this.objMsgBox != null) {
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate =
            String.Empty;
          this.FocusControl = 'txtFlowRate';
          this.objMsgBox.Message = 'Flow rate cannot be zero or empty.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
      if (
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom == null
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboUOMFlowrate';
          this.objMsgBox.Message = 'Flow rate UOM cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
      if (
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails.Rate
        ) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom == null
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboUOMFlowrate1';
          this.objMsgBox.Message = 'Flow rate UOM cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public CheckConcentration(): boolean {
    if (
      this.formViewerDetails != null &&
      this.formViewerDetails.BasicDetails != null &&
      this.formViewerDetails.BasicDetails.InfusionDetails != null
    ) {
      if (
        this.formViewerDetails.BasicDetails.InfusionDetails
          .IsConcentrationMandatory &&
        String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.InfusionDetails
            .ConcentrationFreeText
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboConcentration';
          this.objMsgBox.Message = 'Concentration cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
      let concentrationFreetext: string =
        this.formViewerDetails.BasicDetails.InfusionDetails
          .ConcentrationFreeText;
      if (
        !String.IsNullOrEmpty(concentrationFreetext) &&
        String.Equals(concentrationFreetext, '0')
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboConcentration';
          this.objMsgBox.Message = Resource.MedicationForm.ConcentrationNoZero;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public CheckSaturationRange(): boolean {
    if (
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange
      ) &&
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange
      )
    ) {
      this.FocusControl = 'txtTargetLow';
      this.objMsgBox.Message = 'Target saturation range cannot be blank.';
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Show();
      return false;
    } else {
      let iTargetLow: number,
        iTargetHigh = 0;
      iTargetLow = !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.TargetLowerSatRange
      )
        ? Convert.ToInt32(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .TargetLowerSatRange
          )
        : 0;
      iTargetHigh = !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.TargetUpperSatRange
      )
        ? Convert.ToInt32(
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .TargetUpperSatRange
          )
        : 0;
      if (
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .TargetLowerSatRange
        ) &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .TargetUpperSatRange
        )
      ) {
        if (iTargetLow == iTargetHigh) {
          if (this.objMsgBox != null) {
            this.FocusControl = 'txtTargetHigh';
            this.objMsgBox.Message =
              'Target saturation range lower and upper limit values are the same. please change either.';
            this.objMsgBox.MessageButton = MessageBoxButton.OK;
            this.objMsgBox.Show();
            return false;
          }
        } else if (iTargetHigh < iTargetLow) {
          if (this.objMsgBox != null) {
            this.FocusControl = 'txtTargetHigh';
            this.objMsgBox.Message =
              'Upper limit value is less than the lower limit value. please change the value.';
            this.objMsgBox.MessageButton = MessageBoxButton.OK;
            this.objMsgBox.Show();
            return false;
          }
        }
      } else if (
        iTargetLow > 0 &&
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .TargetUpperSatRange
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtTargetHigh';
          this.objMsgBox.Message =
            'Target saturation range upper value cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      } else if (
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.InfusionDetails
            .TargetLowerSatRange
        ) &&
        iTargetHigh > 0
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtTargetLow';
          this.objMsgBox.Message =
            'Target saturation range lower value cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  public CheckLockoutPeriod(): boolean {
    if (
      String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod
      ) &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration ==
        null
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtLockoutPeriod';
        this.objMsgBox.Message = Resource.Infusion.LOP_Blank_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    if (
      String.IsNullOrEmpty(
        this.formViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod
      ) ||
      Convert.ToDecimal(
        this.formViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod
      ) == 0
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtLockoutPeriod';
        this.objMsgBox.Message = Resource.Infusion.LOP_Zero_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration ==
        null ||
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration
          .DisplayText
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboLockoutPeriodUOM';
        this.objMsgBox.Message = Resource.Infusion.LOPUOM_Blank_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
        return false;
      }
    }
    return true;
  }
  public CheckProduct(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.InfusionDetails.isProductVisible ==
        Visibility.Visible &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionDetails.SelProdName,
        CConstants.SelProdLink,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.isProductMandatory
    ) {
      this.FocusControl = 'SelectProduct';
      this.objMsgBox.Message = Resource.Infusion.SelProdLinkMsg;
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Show();
      return false;
    }
    return true;
  }
  public objMsgBox: iMessageBox;
  public CheckRoute(): boolean {
    let selectedClistitem: List<CListItem> = null;
    if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.DefaultDetails != null &&
      this.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null
    ) {
      selectedClistitem =
        this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
          (cl) => cl.IsSelected == true
        ).ToList();
    }
    if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.IsenableMultiRoute &&
      this.FormViewerDetails.BasicDetails.IsMultiRouteChecked
    ) {
      if (selectedClistitem != null && selectedClistitem.Count <= 0) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'iMultiRoute';
          this.objMsgBox.Message = 'Route cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    } else if (
      (this.FormViewerDetails.BasicDetails.Route == null ||
        (this.FormViewerDetails.BasicDetails.Route != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Route.Value
          ))) &&
      this.FormViewerDetails.BasicDetails.IsenableRoute &&
      !(
        this.FormViewerDetails.BasicDetails.FollowUpStatLaunch != '\0' &&
        this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S') &&
        this.FormViewerDetails.BasicDetails.IsMultiRouteChecked &&
        selectedClistitem != null &&
        selectedClistitem.Count > 0
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboRoute';
        this.objMsgBox.Message = 'Route cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckDIRECTION(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsenableAsrequired &&
      !this.FormViewerDetails.BasicDetails.AsRequired
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'chkPRN';
        this.objMsgBox.Message = 'As required cannot be blank';
        this.objMsgBox.Show();
      }
      return false;
    }
    if (
      this.FormViewerDetails.BasicDetails.IsEnablePRNInst &&
      this.FormViewerDetails.BasicDetails.AsRequired &&
      this.FormViewerDetails.BasicDetails.IsPRNInstructionMandatory &&
      (this.FormViewerDetails.BasicDetails.PRNInstruction == null ||
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.PRNInstruction.DisplayText
        )) &&
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.PRNInstructionFreeText
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboPRNInstruction';
        this.objMsgBox.Message = 'PRN instruction cannot be blank';
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckADMININSTR(): boolean {
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0 ||
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Inpatient
      ) == 0
    ) {
      if (
        this.FormViewerDetails.BasicDetails.IsEnableAdminInst &&
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.OtherAdminiInstruction
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtAdminInstruction';
          this.objMsgBox.Message =
            'Administration instructions cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    } else {
      if (
        this.FormViewerDetails.BasicDetails.IsEnableAdminInst &&
        (this.FormViewerDetails.BasicDetails.AdminInstruction == null ||
          (this.FormViewerDetails.BasicDetails.AdminInstruction != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.AdminInstruction.Value
            )))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboAdmin';
          this.objMsgBox.Message =
            'Administration instructions cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    }
    return true;
  }
  public CheckADMININSTROTHERS(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsEnableAdminInst &&
      this.FormViewerDetails.BasicDetails.OtherAdminiInstruction == null
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtAdminInstruction';
        this.objMsgBox.Message =
          'Other administration instructions cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckMED_GRP_STATYP(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsEnableStationeryType &&
      ((String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Inpatient,
        StringComparison.OrdinalIgnoreCase
      ) != 0 &&
        this.FormViewerDetails.BasicDetails.StationaryType == null) ||
        (this.FormViewerDetails.BasicDetails.IsMandatoryStatType == true &&
          this.FormViewerDetails.BasicDetails.StationaryType == null))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboStationary';
        this.objMsgBox.Message = 'Stationery type cannot be blank.';
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckQuantity(): boolean {
    if (
      ((String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Outpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Leave,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0) &&
        !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity) &&
        Convert.ToDouble(this.FormViewerDetails.BasicDetails.Quantity) > 0 &&
        (this.FormViewerDetails.BasicDetails.QuantityUOM == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.QuantityUOM.Value
          ))) ||
      ((String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0) &&
        !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity) &&
        (this.FormViewerDetails.BasicDetails.QuantityUOM == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.QuantityUOM.Value
          )))
    ) {
      this.FocusControl = 'cboQuantity';
      this.sMandMsgChck = 'QuantityUOM';
      this.objMsgBox.Message = 'Quantity UOM cannot be blank';
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Show();
      return false;
    } else if (
      (String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Outpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Leave,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0) &&
      ((this.FormViewerDetails.BasicDetails.IsQuantityMandatory &&
        String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity)) ||
        (this.FormViewerDetails.BasicDetails.QuantityUOM != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.QuantityUOM.Value
          ) &&
          String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity)))
    ) {
      this.FocusControl = 'txtQuantity';
      this.sMandMsgChck = 'Quantity';
      this.objMsgBox.Message = Resource.MedicationForm.ManQty;
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Show();
      return false;
    } else if (
      (String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0) &&
      ((this.FormViewerDetails.BasicDetails.IsQuantityMandatory &&
        (String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity) ||
          (!String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Quantity
          ) &&
            Convert.ToDouble(this.FormViewerDetails.BasicDetails.Quantity) ==
              0))) ||
        (this.FormViewerDetails.BasicDetails.QuantityUOM != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.QuantityUOM.Value
          ) &&
          (String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity) ||
            (!String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.Quantity
            ) &&
              Convert.ToDouble(this.FormViewerDetails.BasicDetails.Quantity) ==
                0))))
    ) {
      this.FocusControl = 'txtQuantity';
      this.sMandMsgChck = 'Quantity';
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Message = Resource.MedicationForm.ManQuantity;
      this.objMsgBox.Show();
      return false;
    } else if (
      this.FormViewerDetails.BasicDetails.IsenableSupplyInstruction &&
      this.FormViewerDetails.BasicDetails.IsMandatorySupplyInstr &&
      String.Equals(
        this.FormViewerDetails.BasicDetails.SupplyInsText,
        'Select supply instructions to enter value(s)'
      )
    ) {
      this.FocusControl = 'txtQuantity';
      this.sMandMsgChck = 'Supplyinstr';
      this.objMsgBox.Message = Resource.TechValProdOpt.SupplyInstMand;
      this.objMsgBox.MessageButton = MessageBoxButton.OK;
      this.objMsgBox.Show();
      this.objMsgBox.MessageBoxClose = (s, e) => {
        this.objmsgtech_Close(s, e);
      };
      return false;
    }
    return true;
  }
  objmsgtech_Close(sender: Object, e: MessageEventArgs): void {
    if (String.Equals(this.sMandMsgChck, 'Supplyinstr')) {
      this.FormViewerDetails.BasicDetails.launchsupplyinstrmezzanine();
      this.sMandMsgChck = String.Empty;
    }
  }
  public CheckLegalCategory(): boolean {
    if (
      String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.LegalCategory)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtLegalCatag';
        this.objMsgBox.Message = 'Legal category cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckStrength(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsEnableStrength &&
      this.FormViewerDetails.BasicDetails.IsStrengthMandatory &&
      (this.FormViewerDetails.BasicDetails.Strength == null ||
        (this.FormViewerDetails.BasicDetails.Strength != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Strength.Value
          )))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboStrength';
        this.objMsgBox.Message = Resource.MedicationForm.Strength_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckRsnforModification(objMsg?: iMessageBox): boolean {
    if (objMsg) {
      return this.CheckRsnforModification1(objMsg);
    } else {
      return this.CheckRsnforModification0();
    }
  }

  private CheckRsnforModification1(objMsg: iMessageBox): boolean {
    if (
      this.IsReasonForModificationVisible == Visibility.Visible &&
      this.FormViewerDetails.BasicDetails.IsenableRSNFORMOD == true &&
      this.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD == true &&
      (this.FormViewerDetails.BasicDetails.ReasonforModification == null ||
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText
        ) ||
        this.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText ==
          'Select reason')
    ) {
      if (objMsg != null) {
        this.FocusControl = 'cboRsnForMod';
        objMsg.Message = 'Reason for modification cannot be blank.';
        objMsg.Show();
      }
      return false;
    }
    return true;
  }
  private CheckRsnforModification0(): boolean {
    return this.CheckRsnforModification(this.objMsgBox);
  }
  public CheckBatchNumber(): boolean {
    if (String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.BatchNumber)) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtBatchNo';
        this.objMsgBox.Message = 'Batch number cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckLINEE(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsEnableAdminInst &&
      (this.FormViewerDetails.BasicDetails.AdminInstruction == null ||
        (this.FormViewerDetails.BasicDetails.AdminInstruction != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.AdminInstruction.Value
          )))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboLine';
        this.objMsgBox.Message = 'Line cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckForm(): boolean {
    let _IsMultipleRouteAvailable: boolean = false;
    if (
      this.FormViewerDetails.BasicDetails.Route != null &&
      this.FormViewerDetails.BasicDetails.Route.Tag != null &&
      !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Route.Value) &&
      this.FormViewerDetails.BasicDetails.Route.Value.Contains(',')
    ) {
      _IsMultipleRouteAvailable = true;
    }
    if (
      !_IsMultipleRouteAvailable &&
      (this.FormViewerDetails.BasicDetails.DosageForm == null ||
        (this.FormViewerDetails.BasicDetails.DosageForm != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DosageForm.Value
          ))) &&
      this.FormViewerDetails.BasicDetails.IsDosageFormMandatory &&
      this.FormViewerDetails.BasicDetails.IsenableDosage
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboDosageForm';
        this.objMsgBox.Message = 'Dosage form cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckSTOPDTTM(): boolean {
    if (
      (this.FormViewerDetails.BasicDetails.StopDate == null ||
        DateTime.Equals(this.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)) &&
      this.FormViewerDetails.BasicDetails.IsenableStopDate
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'dtpStopDate';
        this.objMsgBox.Message = 'Stop date cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckADNALCMNT(): boolean {
    if (
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.AdditionalComments
      ) &&
      this.FormViewerDetails.BasicDetails.IsenableAdditionalcomments
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtAddComments';
        this.objMsgBox.Message = 'Additional comments cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckADMIN_METHOD(): boolean {
    if (
      (this.FormViewerDetails.BasicDetails.AdminMethod == null ||
        (this.FormViewerDetails.BasicDetails.AdminMethod != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.AdminMethod.Value
          ))) &&
      this.FormViewerDetails.BasicDetails.IsenableAdminMthd &&
      this.FormViewerDetails.BasicDetails.IsenableDose
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboAdminMethod';
        this.objMsgBox.Message = 'Administration method cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckEXPIRYDT(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.ExpiryDate == null ||
      DateTime.Equals(this.formViewerDetails.BasicDetails.ExpiryDate, DateTime.MinValue)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'dtpExpirydate';
        this.objMsgBox.Message = 'Expiry date cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckINSTLMNT_INSTCS(): boolean {
    let bInstallInstSelected: boolean = false;
    if (this.FormViewerDetails.BasicDetails.InstalmentInstructions != null) {
      let nCnt: number =
        this.FormViewerDetails.BasicDetails.InstalmentInstructions.Count;
      for (let i: number = 0; i < nCnt; i++) {
        if (
          this.FormViewerDetails.BasicDetails.InstalmentInstructions[i]
            .IsSelected
        ) {
          bInstallInstSelected = true;
          break;
        }
      }
    }
    if (
      !bInstallInstSelected &&
      this.FormViewerDetails.BasicDetails.IsEnableInstalInst
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboInstalIns';
        this.objMsgBox.Message = 'Instalment instruction cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckINTVLBNINSTL(): boolean {
    if (
      (!ObjectHelper.HasValue(
        this.FormViewerDetails.BasicDetails.IntervalBetweenInstallment
      ) ||
        this.FormViewerDetails.BasicDetails.IntervalBetweenInstallment.Value <=
          0) &&
      this.FormViewerDetails.BasicDetails.IsEnableInterBwtInstalValue
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'udnIntervalInst';
        this.objMsgBox.Message = 'Interval between instalments cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    } else if (
      this.FormViewerDetails.BasicDetails.IsEnableInterBwtInstalUoM &&
      (this.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM ==
        null ||
        (this.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM !=
          null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM
              .DisplayText
          )))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboIntervalInst';
        this.objMsgBox.Message =
          'Interval between instalments UOM cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckNOINSTL(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsEnableNoOfInstal &&
      (!ObjectHelper.HasValue(
        this.FormViewerDetails.BasicDetails.NoOfInstallments
      ) ||
        this.FormViewerDetails.BasicDetails.NoOfInstallments.Value <= 0)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'udnNumberofIns';
        this.objMsgBox.Message = 'Number of instalments cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckDRUGNAME(): boolean {
    if (
      String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.IdentifyingName)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtDrugName';
        this.objMsgBox.Message = 'Drug name cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckDURON(): boolean {
    if (
      String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Duration) &&
      (this.FormViewerDetails.BasicDetails.DurationUOM == null ||
        (this.FormViewerDetails.BasicDetails.DurationUOM != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DurationUOM.Value
          )) ||
        (this.FormViewerDetails.BasicDetails.DurationUOM != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DurationUOM.Value
          ))) &&
      !String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.DoseType.Value
      ) &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE
      ) != 0 &&
      this.FormViewerDetails.BasicDetails.IsenableDuration
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'udDuration';
        this.objMsgBox.Message = 'Duration cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    } else if (
      this.FormViewerDetails.BasicDetails.IsenableDuration &&
      (this.FormViewerDetails.BasicDetails.DurationUOM == null ||
        (this.FormViewerDetails.BasicDetails.DurationUOM != null &&
          (String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DurationUOM.Value
          ) ||
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.DurationUOM.DisplayText
            )) &&
          !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Duration)))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboDuration';
        this.objMsgBox.Message = 'Duration UOM cannot be blank';
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckNONCATNAME(): boolean {
    if (
      String.IsNullOrWhiteSpace(
        this.FormViewerDetails.BasicDetails.IdentifyingName
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtNonCatItem';
        this.objMsgBox.Message = 'Non catalogue item cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckNONCATREASON(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.NONCatalogueReason == null ||
      (this.FormViewerDetails.BasicDetails.NONCatalogueReason != null &&
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.NONCatalogueReason.Value
        ))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboNONCATReason';
        this.objMsgBox.Message = 'Non catalogue reason cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckNONCATOTHREA(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsOtherNONCatReasonMandatory &&
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.OtherNONCatalogueReason
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtOtherNonCatReason';
        this.objMsgBox.Message = 'Other non catalogue reason cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckSite(): boolean {
    if (
      (this.FormViewerDetails.BasicDetails.Site == null ||
        (this.FormViewerDetails.BasicDetails.Site != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Site.Value
          ))) &&
      this.FormViewerDetails.BasicDetails.IsSiteMandatory &&
      this.FormViewerDetails.BasicDetails.IsSiteEnabled &&
      this.FormViewerDetails.BasicDetails.SiteVisibility ==
        Visibility.Visible &&
      String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.SiteFreeText)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboSite';
        this.objMsgBox.Message = 'Site cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckProblem(): boolean {
    if (
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.ProblemIndication
      ) &&
      this.FormViewerDetails.BasicDetails.IsEnableProblemIndication
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'txtProblem';
        this.objMsgBox.Message = 'Problem indication cannot be blank';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckDoseType(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.itemSubType != CConstants.SUBTYPE_GAS
    ) {
      if (
        (this.FormViewerDetails.BasicDetails.DoseType == null ||
          (this.FormViewerDetails.BasicDetails.DoseType != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.DoseType.Value
            ))) &&
        this.FormViewerDetails.BasicDetails.IsenableDoseType
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboDoseType';
          this.objMsgBox.Message = 'Dose type cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    }
    return true;
  }
  public CheckDose(): boolean {
    let sDoseType: string =
      this.FormViewerDetails.BasicDetails.DoseType != null
        ? this.FormViewerDetails.BasicDetails.DoseType.Value
        : String.Empty;
    if (String.Compare(sDoseType, DoseTypeCode.CONDITIONAL) == 0) {
      if (
        this.FormViewerDetails.BasicDetails.ConditionalDosingDetails == null ||
        this.FormViewerDetails.BasicDetails.ConditionalDosingDetails
          .DoseDetails == null ||
        this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails
          .Count == 0
      ) {
      }
    } else if (
      this.FormViewerDetails.BasicDetails.itemSubType == CConstants.SUBTYPE_GAS
    ) {
    } else {
      let dLDose: number = 0;
      Number.TryParse(
        this.FormViewerDetails.BasicDetails.Dose,
        (o) => (dLDose = o)
      );
      let dUDose: number = 0;
      Number.TryParse(
        this.FormViewerDetails.BasicDetails.UpperDose,
        (o) => (dUDose = o)
      );
      if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DoseType.Value
        ) &&
        !String.Equals(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.TITRATED
        ) &&
        dLDose <= 0 &&
        this.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
          Visibility.Collapsed &&
        this.FormViewerDetails.BasicDetails.DoseUOM != null &&
        this.FormViewerDetails.BasicDetails.IsenableDose
      ) {
        let sMsg: string = String.Empty;
        if (
          this.FormViewerDetails.BasicDetails.DoseType.Value ==
          DoseTypeCode.DOSAGERANGE
        )
          sMsg = 'From dose cannot be zero or empty.';
        else sMsg = 'Dose value cannot be blank or zero';
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtLowerDose';
          this.objMsgBox.Message = sMsg;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
          Visibility.Visible &&
        this.FormViewerDetails.BasicDetails.IsenableAdminMthd
      ) {
        if (
          this.FormViewerDetails.BasicDetails.AdminMethod == null ||
          (this.FormViewerDetails.BasicDetails.AdminMethod != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.AdminMethod.Value
            ))
        ) {
          if (this.objMsgBox != null) {
            this.FocusControl = 'cboAdminMethod';
            this.objMsgBox.Message = 'Administration method cannot be empty';
            this.objMsgBox.MessageButton = MessageBoxButton.OK;
            this.objMsgBox.Show();
          }
          return false;
        }
      } else if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        this.FormViewerDetails.BasicDetails.DoseType.Value ==
          DoseTypeCode.NORMAL &&
        String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose) &&
        this.FormViewerDetails.BasicDetails.IsenableDose &&
        this.FormViewerDetails.BasicDetails.IsDoseVisible ==
          Visibility.Visible &&
        this.FormViewerDetails.BasicDetails.IsDoseMandatory
      ) {
        if (
          (this.FormViewerDetails.BasicDetails.InfusionType != null &&
            (String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypesCode.INTERMITTENT,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypesCode.SINGLEDOSEVOLUME,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0) &&
            dLDose <= 0) ||
          this.FormViewerDetails.BasicDetails.InfusionType == null
        ) {
          if (this.objMsgBox != null) {
            this.FocusControl = 'txtLowerDose';
            this.objMsgBox.Message = 'Dose value cannot be blank or zero';
            this.objMsgBox.MessageButton = MessageBoxButton.OK;
            this.objMsgBox.Show();
          }
          return false;
        }
      } else if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.DOSAGERANGE,
          StringComparison.CurrentCultureIgnoreCase
        ) &&
        String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose) &&
        this.FormViewerDetails.BasicDetails.IsenableDose &&
        this.FormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Visible
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtLowerDose';
          this.objMsgBox.Message = Resource.MedicationForm.FromDose_Empty;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        this.FormViewerDetails.BasicDetails.DoseType.Value ==
          DoseTypeCode.DOSAGERANGE &&
        dUDose == 0 &&
        this.FormViewerDetails.BasicDetails.IsenableDose &&
        this.FormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Visible
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtUpperDose';
          this.objMsgBox.Message = 'To dose cannot be zero or empty.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        this.FormViewerDetails.BasicDetails.DoseType.Value ==
          DoseTypeCode.DOSAGERANGE &&
        dLDose == dUDose &&
        this.FormViewerDetails.BasicDetails.IsenableDose &&
        this.FormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Visible
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtUpperDose';
          this.objMsgBox.Message =
            'Lower and upper limit values are the same. Please change either.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        this.FormViewerDetails.BasicDetails.DoseType.Value ==
          DoseTypeCode.DOSAGERANGE &&
        dLDose > dUDose &&
        this.FormViewerDetails.BasicDetails.IsenableDose &&
        this.FormViewerDetails.BasicDetails.IsDoseVisible == Visibility.Visible
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtLowerDose';
          this.objMsgBox.Message =
            'Upper limit value is less than the lower limit value. Please change the value.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.IsenableDoseUOM == true &&
        this.FormViewerDetails.BasicDetails.IsDoseVisible ==
          Visibility.Visible &&
        this.FormViewerDetails.BasicDetails.IsMandatoryUOM &&
        !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Dose) &&
        (this.FormViewerDetails.BasicDetails.DoseUOM == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DoseUOM.Value
          ))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboUOM';
          this.objMsgBox.Message = 'Dose UOM cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      } else if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.TITRATED,
          StringComparison.CurrentCultureIgnoreCase
        ) &&
        this.FormViewerDetails.BasicDetails.IsenableDoseUOM &&
        this.FormViewerDetails.BasicDetails.IsDoseVisible ==
          Visibility.Visible &&
        this.FormViewerDetails.BasicDetails.IsMandatoryUOM &&
        PatientContext.PrescriptionType !=
          PrescriptionTypes.ForAdministration &&
        (this.FormViewerDetails.BasicDetails.DoseUOM == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DoseUOM.Value
          ))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboUOM';
          this.objMsgBox.Message = Resource.MedicationForm.cboUOMBlankMsg;
          this.objMsgBox.Show();
        }
        return false;
      }
    }
    return true;
  }
  public CheckFrequency(): boolean {
    let IsInfusionRoutes: boolean = false;
    let IsPRN: boolean = false;
    if (
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.Route != null &&
      this.FormViewerDetails.BasicDetails.Route.Tag != null &&
      this.FormViewerDetails.BasicDetails.Route.Tag.Equals('1')
    ) {
      IsInfusionRoutes = true;
    }
    if (
      this.FormViewerDetails.BasicControls != null &&
      this.FormViewerDetails.BasicControls.Length > 0
    ) {
      if (
        this.FormViewerDetails.BasicDetails.AsRequired &&
        this.FormViewerDetails.BasicControls.Where((x) =>
          x.Contains('CC_DIRECTION')
        ).Count() > 0
      ) {
        IsPRN = true;
      }
      if (
        !this.FormViewerDetails.BasicDetails.IsMandatoryFrequency &&
        !IsPRN &&
        !(
          this.FormViewerDetails.BasicDetails.InfusionType != null &&
          String.Equals(
            this.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.INTERMITTENT,
            StringComparison.OrdinalIgnoreCase
          )
        )
      ) {
        let indexfreq: number = Array.IndexOf(
          this.FormViewerDetails.BasicControls,
          this.FormViewerDetails.BasicControls.Where((x) =>
            x.Contains('CC_FREQUENCY')
          ).FirstOrDefault()
        );
        if (this.FormViewerDetails.MandatoryControls != null) {
          if (
            this.FormViewerDetails.MandatoryControls.Length >= indexfreq &&
            indexfreq != -1
          ) {
            this.FormViewerDetails.BasicDetails.IsMandatoryFrequency =
              this.FormViewerDetails.MandatoryControls[indexfreq];
          }
        }
      }
    }
    if (
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.INTERMITTENT,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (
        this.FormViewerDetails.BasicDetails.IsenableFrequency &&
        this.FormViewerDetails.BasicDetails.IsMandatoryFrequency &&
        (this.FormViewerDetails.BasicDetails.Frequency == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Frequency.DisplayText
          ))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboFrequency';
          this.objMsgBox.Message = 'Frequency cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    } else if (
      this.FormViewerDetails.BasicDetails.InfusionType == null ||
      !IsInfusionRoutes
    ) {
      if (
        this.FormViewerDetails.BasicDetails.IsenableFrequency &&
        this.FormViewerDetails.BasicDetails.IsMandatoryFrequency &&
        (this.FormViewerDetails.BasicDetails.Frequency == null ||
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Frequency.DisplayText
          ))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboFrequency';
          this.objMsgBox.Message = 'Frequency cannot be blank.';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
    }
    return true;
  }
  public CheckPrnInstructions(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsPRNInstructionMandatory &&
      (this.FormViewerDetails.BasicDetails.PRNInstruction == null ||
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.PRNInstruction.DisplayText
        )) &&
      String.IsNullOrEmpty(
        this.FormViewerDetails.BasicDetails.PRNInstructionFreeText
      )
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboPRNInstruction';
        this.objMsgBox.Message = Resource.Infusion.PrnInstructions_Blank_Msg;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckENDRSMNT_PROPTY(): boolean {
    let bEndorsPropSelected: boolean = false;
    if (this.FormViewerDetails.BasicDetails.EndorsementProperties != null) {
      let nCnt: number =
        this.FormViewerDetails.BasicDetails.EndorsementProperties.Count;
      for (let i: number = 0; i < nCnt; i++) {
        if (
          this.FormViewerDetails.BasicDetails.EndorsementProperties[i]
            .IsSelected
        ) {
          bEndorsPropSelected = true;
          break;
        }
      }
    }
    if (!bEndorsPropSelected) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'clbEndorprop';
        this.objMsgBox.Message = 'Endorsement properties cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckTRTMNT(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsEnableTreatmentCont &&
      (this.FormViewerDetails.BasicDetails.TreatmentToContinue == null ||
        (this.FormViewerDetails.BasicDetails.TreatmentToContinue != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.TreatmentToContinue.Value
          )))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboTreatment';
        this.objMsgBox.Message = 'Treatment to continue cannot be blank.';
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckSUPLYINSTR(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsenableSupplyInstruction &&
      String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.SupplyInsVal)
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboSupply';
        this.objMsgBox.Message = Resource.TechValProdOpt.SupplyInstMand;
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.sMandMsgChck = 'Supplyinstr';
        this.objMsgBox.MessageBoxClose = (s, e) => {
          this.objmsgtech_Close(s, e);
        };
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckMEDCLERK(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsenableModificationcomments &&
      (this.FormViewerDetails.BasicDetails == null ||
        (this.FormViewerDetails.BasicDetails != null &&
          String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.ModificationComments
          )))
    ) {
      if (this.objMsgBox != null) {
        this.FocusControl = 'cboModClerkReason';
        this.objMsgBox.Message = 'ModificationComments cannot be blank.';
        this.objMsgBox.MessageButton = MessageBoxButton.OK;
        this.objMsgBox.Show();
      }
      return false;
    }
    return true;
  }
  public CheckQUANTITY(): boolean {
    if (this.FormViewerDetails.BasicDetails.IsQuantityEnabled) {
      if (
        (String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Outpatient,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Leave,
            StringComparison.InvariantCultureIgnoreCase
          )) &&
        ((this.FormViewerDetails.BasicDetails.IsQuantityMandatory &&
          String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity)) ||
          (this.FormViewerDetails.BasicDetails.QuantityUOM != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.QuantityUOM.Value
            ) &&
            String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity)))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtQuantity';
          this.sMandMsgChck = 'Quantity';
          this.objMsgBox.Message = Resource.MedicationForm.ManQty;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      } else if (
        (String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Inpatient,
            StringComparison.InvariantCultureIgnoreCase
          )) &&
        ((this.FormViewerDetails.BasicDetails.IsQuantityMandatory &&
          (String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity) ||
            Convert.ToDouble(this.FormViewerDetails.BasicDetails.Quantity) ==
              0)) ||
          (this.FormViewerDetails.BasicDetails.QuantityUOM != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.QuantityUOM.Value
            ) &&
            (String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.Quantity
            ) ||
              (!String.IsNullOrEmpty(
                this.FormViewerDetails.BasicDetails.Quantity
              ) &&
                Convert.ToDouble(
                  this.FormViewerDetails.BasicDetails.Quantity
                ) == 0))))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtQuantity';
          this.sMandMsgChck = 'Quantity';
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Message = Resource.MedicationForm.ManQuantity;
          this.objMsgBox.Show();
        }
        return false;
      }
      if (
        ((String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Outpatient,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Leave,
            StringComparison.InvariantCultureIgnoreCase
          )) &&
          !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity) &&
          Convert.ToDouble(this.FormViewerDetails.BasicDetails.Quantity) > 0 &&
          (this.FormViewerDetails.BasicDetails.QuantityUOM == null ||
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.QuantityUOM.Value
            ))) ||
        ((String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Inpatient,
            StringComparison.InvariantCultureIgnoreCase
          )) &&
          !String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.Quantity) &&
          (this.FormViewerDetails.BasicDetails.QuantityUOM == null ||
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.QuantityUOM.Value
            )))
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'cboQuantity';
          this.sMandMsgChck = 'QuantityUOM';
          this.objMsgBox.Message = Resource.MedicationForm.ManQtyUOM;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.Show();
        }
        return false;
      }
      if (
        this.FormViewerDetails.BasicDetails.IsenableSupplyInstruction &&
        this.FormViewerDetails.BasicDetails.IsMandatorySupplyInstr &&
        String.Equals(
          this.FormViewerDetails.BasicDetails.SupplyInsText,
          'Select supply instructions to enter value(s)'
        )
      ) {
        if (this.objMsgBox != null) {
          this.FocusControl = 'txtQuantity';
          this.sMandMsgChck = 'Supplyinstr';
          this.objMsgBox.Message = Resource.TechValProdOpt.SupplyInstMand;
          this.objMsgBox.MessageButton = MessageBoxButton.OK;
          this.objMsgBox.MessageBoxClose = (s, e) => {
            this.objmsgtech_Close(s, e);
          };
          this.objMsgBox.Show();
        }
        return false;
      }
    }
    return true;
  }
  public CheckMedClerkModifyReason(): boolean {
    if (
      this.FormViewerDetails.BasicDetails.IsMandatoryReasonForMedClerkModify &&
      this.IsReasonForMedicationClerkModifyVisible == Visibility.Visible &&
      (this.FormViewerDetails.BasicDetails.MedClerkModifyReason == null ||
        String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.MedClerkModifyReason.DisplayText
        ))
    ) {
      this.FocusControl = 'cboModClerkReason';
      this.objMsgBox.Message = Resource.MedicationForm.ManMedClerkModReason;
      this.objMsgBox.Show();
      return false;
    }
    return true;
  }
  public AllergenCheck: boolean = false;
  public IsFluidAllergenCheck: boolean = false;
  public CheckNonCatalogueItemDetails(objMsg: iMessageBox): boolean {
    this.objMsgBox = objMsg;
    if (
      !this.CheckNONCATNAME() ||
      !this.CheckNONCATREASON() ||
      !this.CheckNONCATOTHREA()
    ) {
      return false;
    } else {
      return true;
    }
  }
  public IsConflictViewed: boolean = false;
  public IsDRCConflictViewed: boolean = false;
  public IsConflictFaxTabLoaded: boolean = false;
  public IsTechValFauxTabLoaded: boolean = false;
  public ParentSourcePrescriptionType: string;
  public ParentSourcePrescriptionItemOID: number = 0;
  public ParentPrescriptionitemstatus: string;
  public InPatDisReorderFlag: string;
  public FillDoseRegime(
    oBaseVM: BasicDetailsVM
  ): ObservableCollection<IPPMAManagePrescSer.DoseRegime> {
    this.lstDoseRegime =
      new ObservableCollection<IPPMAManagePrescSer.DoseRegime>();
    let sDoseType: string = String.Empty;
    let InfusionType: string = String.Empty;
    if (
      oBaseVM.DoseType != null &&
      !String.IsNullOrEmpty(oBaseVM.DoseType.Value)
    ) {
      sDoseType = oBaseVM.DoseType.Value;
    }
    if (
      oBaseVM.InfusionType != null &&
      !String.IsNullOrEmpty(oBaseVM.InfusionType.Value)
    ) {
      InfusionType = oBaseVM.InfusionType.Value;
    }
    if (
      String.Compare(
        sDoseType,
        DoseTypeCode.NORMAL,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.DOSAGERANGE,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.TITRATED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.CONDITIONAL,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      let oDoseRegime: IPPMAManagePrescSer.IPPDoseRegime =
        new IPPMAManagePrescSer.IPPDoseRegime();
      if (
        (oBaseVM.AdminMethod == null ||
          (oBaseVM.AdminMethod != null && oBaseVM.AdminMethod.Value == null)) &&
        String.Compare(
          sDoseType,
          DoseTypeCode.CONDITIONAL,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0
      ) {
        let dLDose: number = 0;
        let dUDose: number = 0;
        Number.TryParse(oBaseVM.Dose, (o) => (dLDose = o));
        Number.TryParse(oBaseVM.UpperDose, (o) => (dUDose = o));
        oDoseRegime.LowerDose = dLDose;
        oDoseRegime.UpperDose = dUDose;
        let lDoseUOMOID: number = 0;
        oDoseRegime.DoseUOM = new IPPMAManagePrescSer.UOM();
        if (
          oBaseVM.DoseUOM != null &&
          Number.TryParse(oBaseVM.DoseUOM.Value, (o) => (lDoseUOMOID = o))
        ) {
          oDoseRegime.DoseUOM.UOMId = lDoseUOMOID;
          oDoseRegime.DoseUOM.UOMName = oBaseVM.DoseUOM.DisplayText;
        }
      }
      oDoseRegime.IsHavingAdminTime = CConstants.sIsHavingtime;
      let lnDuration: number = 0;
      if (Number.TryParse(oBaseVM.Duration, (o) => (lnDuration = o))) {
        oDoseRegime.Duration = new IPPMAManagePrescSer.MeasurableObject();
        oDoseRegime.Duration.Value = lnDuration;
        if (
          oBaseVM.DurationUOM != null &&
          !String.IsNullOrEmpty(oBaseVM.DurationUOM.Value)
        ) {
          oDoseRegime.Duration.UOMName = oBaseVM.DurationUOM.Value;
        }
      }
      if (
        oDoseRegime.Duration == null &&
        oBaseVM.SequenceInfo != null &&
        oBaseVM.SequenceInfo.GroupSequenceNo > 0 &&
        oBaseVM.DurationInfo != null
      ) {
        if (
          Number.TryParse(oBaseVM.DurationInfo.Value, (o) => (lnDuration = o))
        ) {
          oDoseRegime.Duration = new IPPMAManagePrescSer.MeasurableObject();
          oDoseRegime.Duration.Value = lnDuration;
          if (
            oBaseVM.DurationInfo.Tag != null &&
            !String.IsNullOrEmpty(oBaseVM.DurationInfo.Tag.ToString())
          ) {
            oDoseRegime.Duration.UOMName = oBaseVM.DurationInfo.Tag.ToString();
          }
        }
      }
      oDoseRegime.FrequencyDetails =
        new IPPMAManagePrescSer.IPPFrequencyDetails();
      let lFreqOID: number = 0;
      if (
        oBaseVM.Frequency != null &&
        Number.TryParse(oBaseVM.Frequency.Value, (o) => (lFreqOID = o)) &&
        lFreqOID > 0
      ) {
        oDoseRegime.FrequencyDetails.Frequency = ObjectHelper.CreateObject(
          new IPPMAManagePrescSer.ObjectInfo(),
          {
            OID: lFreqOID,
            Name: oBaseVM.Frequency.DisplayText,
          }
        );
      }
      if (
        PatientContext.PrescriptionType !=
          PrescriptionTypes.ForAdministration &&
        !String.IsNullOrEmpty(oBaseVM.DrugFreqUOMCode) &&
        String.Equals(
          oBaseVM.DrugFreqUOMCode,
          'CC_MEDDRSN2',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        let arrDaysOfWeek: IPPMAManagePrescSer.ArrayOfString =
          new IPPMAManagePrescSer.ArrayOfString();
        arrDaysOfWeek.Add(oBaseVM.IsSun.ToString());
        arrDaysOfWeek.Add(oBaseVM.IsMon.ToString());
        arrDaysOfWeek.Add(oBaseVM.IsTue.ToString());
        arrDaysOfWeek.Add(oBaseVM.IsWed.ToString());
        arrDaysOfWeek.Add(oBaseVM.IsThu.ToString());
        arrDaysOfWeek.Add(oBaseVM.IsFri.ToString());
        arrDaysOfWeek.Add(oBaseVM.IsSat.ToString());
        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPFrequencyDetails>(
          oDoseRegime.FrequencyDetails,
          IPPMAManagePrescSer.IPPFrequencyDetails
        ).DaysOfWeek = arrDaysOfWeek;
      }
      if (oBaseVM.AdminTimes != null) {
        this.FillAdminTimes(oDoseRegime, oBaseVM);
        oDoseRegime.FrequencyType =
          oBaseVM.AdminTimes.FreqDetails != null &&
          oBaseVM.AdminTimes.FreqDetails.oFrequency != null
            ? oBaseVM.AdminTimes.FreqDetails.oFrequency.Type
            : String.Empty;
      }
      if (
        String.Compare(
          sDoseType,
          DoseTypeCode.CONDITIONAL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        if (
          oBaseVM.ConditionalDosingDetails != null &&
          oBaseVM.ConditionalDosingDetails.DoseDetails != null &&
          oBaseVM.ConditionalDosingDetails.DoseDetails.Count > 0
        ) {
          oDoseRegime.oConditionalDoseRegime = this.FillConditionalDoseRegime(
            oBaseVM.ConditionalDosingDetails
          );
        }
      }
      if (
        PatientContext.PrescriptionType !=
          PrescriptionTypes.ForAdministration &&
        String.Compare(
          sDoseType,
          DoseTypeCode.TITRATED,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        if (
          oBaseVM.TitratedDoseDetails != null &&
          oBaseVM.TitratedDoseDetails.GrdTitrated != null &&
          oBaseVM.TitratedDoseDetails.GrdTitrated.Count > 0
        ) {
          if (
            oBaseVM.TitratedDoseDetails.GrdTitrated[0].ScheduleTime.Contains(
              CConstants.sDose
            )
          ) {
            oBaseVM.TitratedDoseDetails.IsHavingAdminTime =
              CConstants.sIsHavingtimeZero;
          }
          oDoseRegime.IsHavingAdminTime =
            oBaseVM.TitratedDoseDetails.IsHavingAdminTime;
          oDoseRegime.oTitratedDoseRegime =
            this.FillTitratedDoseRegime(oBaseVM);
        }
        oDoseRegime.TitratedDoseAdtnlComments =
          oBaseVM.TitratedDoseAdtnlComments;
        if (oBaseVM.TitratedDoseInstruction != null) {
          oDoseRegime.TitratedDoseInstruction = ObjectHelper.CreateObject(
            new IPPMAManagePrescSer.ObjectInfo(),
            {
              Code: oBaseVM.TitratedDoseInstruction.Value,
              Name: oBaseVM.TitratedDoseInstruction.DisplayText,
            }
          );
        }
      }
      oDoseRegime.PrescibableItemOID = oBaseVM.PrescibableItemOID;
      if (DateTime.Equals(oDoseRegime.StartDTTM, DateTime.MinValue)) {
        oDoseRegime.StartDTTM = oBaseVM.StartPrescriptionTime;
      }
      if (DateTime.Equals(oDoseRegime.EndDTTM, DateTime.MinValue)) {
        oDoseRegime.EndDTTM = oBaseVM.EndDTTM;
      }
      this.lstDoseRegime.Add(oDoseRegime);
    } else if (
      String.Compare(
        sDoseType,
        DoseTypeCode.STEPPED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.VARIABLE,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      let ServerDatetime = CommonBB.GetServerDateTime();
      if (
        oBaseVM.MultiDoseDetails != null &&
        oBaseVM.MultiDoseDetails.Count > 0
      ) {
        oBaseVM.MultiDoseDetails.forEach((oDoseDetails) => {
          if (oDoseDetails instanceof MultipleDoseDetail) {
            let itemDose: IPPMAManagePrescSer.IPPDoseRegime =
              new IPPMAManagePrescSer.IPPDoseRegime();
            itemDose.DosingInstruction = !String.IsNullOrEmpty(
              oDoseDetails.DoseInstructions
            )
              ? oDoseDetails.DoseInstructions
              : String.Empty;
            itemDose.FrequencyDetails =
              new IPPMAManagePrescSer.IPPFrequencyDetails();
            let lSVFreqOID: number = 0;
            if (
              oDoseDetails.Frequency != null &&
              Number.TryParse(
                oDoseDetails.Frequency.Value,
                (o) => (lSVFreqOID = o)
              ) &&
              lSVFreqOID > 0
            ) {
              itemDose.FrequencyDetails.Frequency = ObjectHelper.CreateObject(
                new IPPMAManagePrescSer.ObjectInfo(),
                {
                  OID: lSVFreqOID,
                  Name: oDoseDetails.Frequency.DisplayText,
                }
              );
              if (
                itemDose.FrequencyDetails.Frequency != null &&
                oDoseDetails.Frequency != null &&
                oDoseDetails.Frequency.Tag != null &&
                oDoseDetails.Frequency.Tag instanceof Array
              ) {
                let FreqDetails: string[] = ObjectHelper.CreateType<string[]>(
                  oDoseDetails.Frequency.Tag,
                  'string[]'
                );
                if (FreqDetails != null && FreqDetails.length > 2) {
                  itemDose.FreqUOMCode = FreqDetails[1];
                }
              }
            }
            if (DateTime.Equals(oDoseDetails.StartDTTM, DateTime.MinValue)) {
              oDoseDetails.StartDTTM = CommonBB.GetServerDateTime().Date;
            }
            itemDose.StartDTTM = oDoseDetails.StartDTTM;
            if (
              oDoseDetails.ScheduleDetailsData == null &&
              oDoseDetails.Duration > 0
            )
              itemDose.EndDTTM = oDoseDetails.EndDTTM;
            else if (oDoseDetails.Duration > 0)
              itemDose.EndDTTM = oDoseDetails.EndDTTM;
            if (oDoseDetails.FreqDetails != null) {
              itemDose.Frequency =
                itemDose.Frequency == null
                  ? oDoseDetails.FreqDetails.oFrequency
                  : itemDose.Frequency;
              itemDose.FixedTimes =
                itemDose.FixedTimes == null
                  ? oDoseDetails.FreqDetails.oFixedTimes
                  : itemDose.FixedTimes;
              itemDose.DrugroundTimes =
                itemDose.DrugroundTimes == null
                  ? oDoseDetails.FreqDetails.oDrugRoundTimes
                  : itemDose.DrugroundTimes;
            }
            if (
              oDoseDetails.FreqDetails != null &&
              oDoseDetails.FreqDetails.oFrequency != null &&
              String.Equals(
                oDoseDetails.FreqDetails.oFrequency.Type,
                'CC_INTERVAL',
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              itemDose.FrequencyDetails.IsFixedAdministration = String.MinValue;
            } else {
              {
                itemDose.FrequencyDetails.IsFixedAdministration =
                  oDoseDetails.SlotTimeMode;
                if (
                  !String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.ForAdministration,
                    StringComparison.CurrentCultureIgnoreCase
                  )
                ) {
                  if (
                    oDoseDetails != null &&
                    oDoseDetails.AdminTimesData != null &&
                    oDoseDetails.AdminTimesData.Count > 0 &&
                    String.Equals(
                      oDoseDetails.AdminTimesData[0].FrequencyType,
                      'CC_INTERVAL',
                      StringComparison.CurrentCultureIgnoreCase
                    )
                  ) {
                    itemDose.FrequencyDetails.IsFixedAdministration =
                      String.MinValue;
                  }
                }
              }
            }
            ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
              itemDose,
              IPPMAManagePrescSer.IPPDoseRegime
            ).PrescribableItemDoseOID = oDoseDetails.PrescriptionItemDosageOID;
            if (oDoseDetails.DaysOfWeek != null) {
              ObjectHelper.CreateType<IPPMAManagePrescSer.IPPFrequencyDetails>(
                itemDose.FrequencyDetails,
                IPPMAManagePrescSer.IPPFrequencyDetails
              ).DaysOfWeek = new IPPMAManagePrescSer.ArrayOfString();
              for (let i: number = 0; i < oDoseDetails.DaysOfWeek.Length; i++) {
                ObjectHelper.CreateType<IPPMAManagePrescSer.IPPFrequencyDetails>(
                  itemDose.FrequencyDetails,
                  IPPMAManagePrescSer.IPPFrequencyDetails
                ).DaysOfWeek.Add(oDoseDetails.DaysOfWeek[i]);
              }
            }
            if (!String.IsNullOrEmpty(oDoseDetails.InfusionRate)) {
              itemDose.Rate = oDoseDetails.InfusionRate;
            }
            if (!String.IsNullOrEmpty(oDoseDetails.InfusionUpperrate)) {
              itemDose.UpperRate = oDoseDetails.InfusionUpperrate;
            }
            if (
              oDoseDetails.Infratenumeratoruom != null &&
              !String.IsNullOrEmpty(oDoseDetails.Infratenumeratoruom.Value)
            ) {
              itemDose.RateUOMOID = ObjectHelper.CreateObject(
                new IPPMAManagePrescSer.UOM(),
                {
                  UOMId: Convert.ToInt64(
                    oDoseDetails.Infratenumeratoruom.Value
                  ),
                  UOMName: oDoseDetails.Infratenumeratoruom.DisplayText,
                }
              );
            }
            if (
              oDoseDetails.InfrateDenominatoruom != null &&
              !String.IsNullOrEmpty(oDoseDetails.InfrateDenominatoruom.Value)
            ) {
              itemDose.RateDenaminatorUOMOID = ObjectHelper.CreateObject(
                new IPPMAManagePrescSer.UOM(),
                {
                  UOMId: Convert.ToInt64(
                    oDoseDetails.InfrateDenominatoruom.Value
                  ),
                  UOMName: oDoseDetails.InfrateDenominatoruom.DisplayText,
                }
              );
            }
            itemDose.IsStartFromNextDay = oDoseDetails.IsStartFromNextDay;
            if (
              oDoseDetails.ScheduleDetailsData != null ||
              oDoseDetails.AdminTimesData != null
            ) {
              itemDose.FrequencyDetails.ScheduledTimes =
                new ObservableCollection<IPPMAManagePrescSer.Scheduledetails>();
              if (
                oDoseDetails.AdminTimesData != null &&
                oDoseDetails.AdminTimesData.Count > 0
              )
                itemDose.FrequencyType =
                  oDoseDetails.AdminTimesData[0].FrequencyType;
              if (oDoseDetails.ScheduleDetailsData != null) {
                itemDose.FrequencyDetails.ScheduledTimes =
                  this.FillChangingDoseDataForWSCall(oDoseDetails);
              } else {
                if (
                  oDoseDetails.AdminTimesData != null &&
                  oDoseDetails.AdminTimesData.Count > 0
                ) {
                  itemDose.FrequencyType =
                    oDoseDetails.AdminTimesData[0].FrequencyType;
                  for (
                    let i: number = 0;
                    i < oDoseDetails.AdminTimesData.Count;
                    i++
                  ) {
                    let oSchedule: IPPMAManagePrescSer.IPPScheduledetails =
                      new IPPMAManagePrescSer.IPPScheduledetails();
                    if (
                      itemDose.FrequencyDetails.IsFixedAdministration == 'F'
                    ) {
                      oSchedule.ScheduledTime =
                        oDoseDetails.AdminTimesData[i].FixedTimes;
                    } else {
                      oSchedule.ScheduledTime =
                        oDoseDetails.AdminTimesData[i].DruRoundTimes;
                    }
                    itemDose.FrequencyDetails.ScheduledTimes.Add(oSchedule);
                  }
                }
              }
            }
            if (oDoseDetails.IsPRN) {
              itemDose.Direction = ObjectHelper.CreateObject(
                new IPPMAManagePrescSer.ObjectInfo(),
                { Code: 'CC_MEDDIRECTION' }
              );
            }
            if (oDoseDetails.Duration && oDoseDetails.Duration >= 0) {
              itemDose.Duration = new IPPMAManagePrescSer.MeasurableObject();
              itemDose.Duration.Value = Convert.ToInt64(oDoseDetails.Duration);
              if (
                oDoseDetails.DurationUOM != null &&
                !String.IsNullOrEmpty(oDoseDetails.DurationUOM.Value)
              ) {
                itemDose.Duration.UOMName = oDoseDetails.DurationUOM.Value;
                itemDose.Duration.UOMCode =
                  oDoseDetails.DurationUOM.DisplayText;
              }
            }
            itemDose.LowerDose = oDoseDetails.LowerDose;
            itemDose.UpperDose = oDoseDetails.UpperDose;
            itemDose.IsDaywise = oDoseDetails.IsDaywiseView == true ? '1' : '0';
            let lSVDoseUOMOID: number = 0;
            if (
              oDoseDetails.DoseUOM != null &&
              Number.TryParse(
                oDoseDetails.DoseUOM.Value,
                (o) => (lSVDoseUOMOID = o)
              ) &&
              lSVDoseUOMOID > 0
            ) {
              itemDose.DoseUOM = ObjectHelper.CreateObject(
                new IPPMAManagePrescSer.UOM(),
                {
                  UOMId: lSVDoseUOMOID,
                  UOMName: oDoseDetails.DoseUOM.DisplayText,
                }
              );
            }
            if (
              PatientContext.ClerkFormViewDefaultBehavior ==
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
            ) {
              itemDose.PrescriptionType = PrescriptionTypes.Clerking;
            } else {
              itemDose.PrescriptionType = PatientContext.PrescriptionType;
            }
            itemDose.EPRFilterList = oDoseDetails.AdministrationTimes;
            this.lstDoseRegime.Add(itemDose);
          }
        });
      }
    }
    if (
      oBaseVM.InfusionType != null &&
      String.Compare(
        oBaseVM.InfusionType.Value,
        InfusionTypeCode.INTERMITTENT,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this.lstDoseRegime = this.FillDoseRegimeIntermntInfusionDetail(
        this.lstDoseRegime,
        oBaseVM
      );
    }
    return this.lstDoseRegime;
  }
  public FillDoseRegimeInfusionDetail(
    oBaseVM: BasicDetailsVM
  ): ObservableCollection<IPPMAManagePrescSer.DoseRegime> {
    this.lstDoseRegime =
      new ObservableCollection<IPPMAManagePrescSer.DoseRegime>();
    let sDoseType: string = String.Empty;
    if (
      oBaseVM.DoseType != null &&
      !String.IsNullOrEmpty(oBaseVM.DoseType.Value)
    ) {
      sDoseType = oBaseVM.DoseType.Value;
    }
    if (
      String.Compare(
        sDoseType,
        DoseTypeCode.NORMAL,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.DOSAGERANGE,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.TITRATED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.CONDITIONAL,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      let oDoseRegime: IPPMAManagePrescSer.IPPDoseRegime =
        new IPPMAManagePrescSer.IPPDoseRegime();
      if (
        (oBaseVM.AdminMethod == null ||
          (oBaseVM.AdminMethod != null && oBaseVM.AdminMethod.Value == null)) &&
        String.Compare(
          sDoseType,
          DoseTypeCode.CONDITIONAL,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0
      ) {
        let dLDose: number = 0;
        let dUDose: number = 0;
        Number.TryParse(oBaseVM.Dose, (o) => (dLDose = o));
        Number.TryParse(oBaseVM.UpperDose, (o) => (dUDose = o));
        oDoseRegime.LowerDose = dLDose;
        oDoseRegime.UpperDose = dUDose;
        let lDoseUOMOID: number = 0;
        oDoseRegime.DoseUOM = new IPPMAManagePrescSer.UOM();
        if (
          oBaseVM.DoseUOM != null &&
          Number.TryParse(oBaseVM.DoseUOM.Value, (o) => (lDoseUOMOID = o))
        ) {
          oDoseRegime.DoseUOM.UOMId = lDoseUOMOID;
          oDoseRegime.DoseUOM.UOMName = oBaseVM.DoseUOM.DisplayText;
        }
      }
      if (
        String.Compare(
          sDoseType,
          DoseTypeCode.CONDITIONAL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        if (
          oBaseVM.ConditionalDosingDetails != null &&
          oBaseVM.ConditionalDosingDetails.DoseDetails != null &&
          oBaseVM.ConditionalDosingDetails.DoseDetails.Count > 0
        ) {
          oDoseRegime.oConditionalDoseRegime = this.FillConditionalDoseRegime(
            oBaseVM.ConditionalDosingDetails
          );
        }
      }
      oDoseRegime.PrescibableItemOID = oBaseVM.PrescibableItemOID;
      let oDoseRegimeInfusionDetail: IPPMAManagePrescSer.DoseRegimeInfusionDetail =
        new IPPMAManagePrescSer.DoseRegimeInfusionDetail();
      let lnDuration: number = 0;
      if (Number.TryParse(oBaseVM.Duration, (o) => (lnDuration = o))) {
        oDoseRegimeInfusionDetail.Duration =
          new IPPMAManagePrescSer.MeasurableObject();
        oDoseRegimeInfusionDetail.Duration.Value = lnDuration;
        if (
          oBaseVM.DurationUOM != null &&
          !String.IsNullOrEmpty(oBaseVM.DurationUOM.Value)
        ) {
          oDoseRegimeInfusionDetail.Duration.UOMName =
            oBaseVM.DurationUOM.Value;
        }
      }
      if (oBaseVM.InfusionDetails != null) {
        if (
          oBaseVM.InfusionType != null &&
          String.Compare(
            oBaseVM.InfusionType.Value,
            InfusionTypeCode.PCA,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          if (
            String.IsNullOrEmpty(oBaseVM.InfusionDetails.BackgroundRate) &&
            oBaseVM.InfusionDetails.InfRateNumeratorUom == null &&
            oBaseVM.InfusionDetails.InfRateDinominatorUom == null
          )
            this.FillInfusionRate(
              oBaseVM.InfusionDetails.Rate,
              oBaseVM.InfusionDetails.UpperRate,
              oBaseVM.InfusionDetails.InfRateNumeratorUom,
              oBaseVM.InfusionDetails.InfRateDinominatorUom,
              oDoseRegimeInfusionDetail
            );
          else
            this.FillInfusionRate(
              oBaseVM.InfusionDetails.BackgroundRate,
              '',
              oBaseVM.InfusionDetails.BackgroundRateNumeratorUom,
              oBaseVM.InfusionDetails.BackgroundRateDinominatorUom,
              oDoseRegimeInfusionDetail
            );
        } else {
          this.FillInfusionRate(
            oBaseVM.InfusionDetails.Rate,
            oBaseVM.InfusionDetails.UpperRate,
            oBaseVM.InfusionDetails.InfRateNumeratorUom,
            oBaseVM.InfusionDetails.InfRateDinominatorUom,
            oDoseRegimeInfusionDetail
          );
        }
      }
      if (
        PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
      ) {
        if (DateTime.NotEquals(oBaseVM.StartPrescriptionTime, DateTime.MinValue)) {
          oDoseRegime.StartDTTM = oBaseVM.StartDTTM.DateTime.AddTime(
            oBaseVM.StartPrescriptionTime
          );
        } else {
          oDoseRegime.StartDTTM = oBaseVM.StartDTTM;
        }
        if (
          DateTime.NotEquals(oBaseVM.StopDate, DateTime.MinValue) &&
          ObjectHelper.HasValue(oBaseVM.StopPrescriptionTime) &&
          oBaseVM.StopPrescriptionTime.Value.ToString('HH:mm') != '00:00'
        ) {
          if (ObjectHelper.HasValue(oBaseVM.StopPrescriptionTime)) {
            oDoseRegime.EndDTTM = oBaseVM.StopDate.DateTime.AddTime(
              oBaseVM.StopPrescriptionTime.Value
            );
          } else {
            oDoseRegime.EndDTTM = oBaseVM.StopDate.Date;
          }
        } else {
          oDoseRegime.EndDTTM = oBaseVM.StopDate;
        }
      } else {
        oDoseRegime.StartDTTM = oBaseVM.StartDTTM;
        oDoseRegime.EndDTTM = oBaseVM.StopDate;
      }
      oDoseRegime.InfusionDetails =
        new ObservableCollection<IPPMAManagePrescSer.DoseRegimeInfusionDetail>();
      oDoseRegime.InfusionDetails.Add(oDoseRegimeInfusionDetail);
      this.lstDoseRegime.Add(oDoseRegime);
    } else if (
      String.Compare(
        sDoseType,
        DoseTypeCode.STEPPED,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.VARIABLE,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        sDoseType,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      let ServerDatetime = CommonBB.GetServerDateTime();
      if (
        oBaseVM.MultiDoseDetails != null &&
        oBaseVM.MultiDoseDetails.Count > 0
      ) {
        let itemDose: IPPMAManagePrescSer.IPPDoseRegime =
          new IPPMAManagePrescSer.IPPDoseRegime();
        if (
          (oBaseVM.AdminMethod == null ||
            (oBaseVM.AdminMethod != null &&
              oBaseVM.AdminMethod.Value == null)) &&
          String.Compare(
            sDoseType,
            DoseTypeCode.CONDITIONAL,
            StringComparison.InvariantCultureIgnoreCase
          ) != 0
        ) {
          let dLDose: number = 0;
          let dUDose: number = 0;
          Number.TryParse(oBaseVM.Dose, (o) => (dLDose = o));
          Number.TryParse(oBaseVM.UpperDose, (o) => (dUDose = o));
          itemDose.LowerDose = dLDose;
          itemDose.UpperDose = dUDose;
          let lDoseUOMOID: number = 0;
          itemDose.DoseUOM = new IPPMAManagePrescSer.UOM();
          if (
            oBaseVM.DoseUOM != null &&
            Number.TryParse(oBaseVM.DoseUOM.Value, (o) => (lDoseUOMOID = o))
          ) {
            itemDose.DoseUOM.UOMId = lDoseUOMOID;
            itemDose.DoseUOM.UOMName = oBaseVM.DoseUOM.DisplayText;
          }
        }
        if (
          String.Compare(
            sDoseType,
            DoseTypeCode.CONDITIONAL,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          if (
            oBaseVM.ConditionalDosingDetails != null &&
            oBaseVM.ConditionalDosingDetails.DoseDetails != null &&
            oBaseVM.ConditionalDosingDetails.DoseDetails.Count > 0
          ) {
            itemDose.oConditionalDoseRegime = this.FillConditionalDoseRegime(
              oBaseVM.ConditionalDosingDetails
            );
          }
        }
        itemDose.PrescibableItemOID = oBaseVM.PrescibableItemOID;
        if (
          oBaseVM.MultiDoseDetails != null &&
          oBaseVM.MultiDoseDetails.Count > 0
        ) {
          if (DateTime.Equals(oBaseVM.MultiDoseDetails[0].StartDTTM, DateTime.MinValue))
            oBaseVM.MultiDoseDetails[0].StartDTTM = ServerDatetime;
          itemDose.StartDTTM = oBaseVM.MultiDoseDetails[0].StartDTTM;
          if (DateTime.NotEquals(oBaseVM.MultiDoseDetails[0].EndDTTM, DateTime.MinValue))
            itemDose.EndDTTM = oBaseVM.MultiDoseDetails[0].EndDTTM;
        } else {
          if (DateTime.Equals(oBaseVM.StartDTTM, DateTime.MinValue))
            oBaseVM.StartDTTM = ServerDatetime;
          itemDose.StartDTTM = oBaseVM.StartDTTM;
          if (DateTime.NotEquals(oBaseVM.EndDTTM, DateTime.MinValue))
            itemDose.EndDTTM = oBaseVM.EndDTTM;
        }
        if (oBaseVM.AsRequired || oBaseVM.IsenableAsrequired) {
          itemDose.Direction = ObjectHelper.CreateObject(
            new IPPMAManagePrescSer.ObjectInfo(),
            { Code: 'CC_MEDDIRECTION' }
          );
        }
        itemDose.PrescriptionType = PatientContext.PrescriptionType;
        itemDose.InfusionDetails =
          new ObservableCollection<IPPMAManagePrescSer.DoseRegimeInfusionDetail>();
        oBaseVM.MultiDoseDetails.forEach((oDoseDetails) => {
          let oDoseRegimeInfusionDetail: IPPMAManagePrescSer.DoseRegimeInfusionDetail =
            new IPPMAManagePrescSer.DoseRegimeInfusionDetail();
          if (oDoseDetails instanceof MultipleDoseDetail) {
            oDoseRegimeInfusionDetail.VariableDoseInstruction =
              !String.IsNullOrEmpty(oDoseDetails.DoseInstructions)
                ? oDoseDetails.DoseInstructions
                : String.Empty;
            if (oDoseDetails.Duration > 0) {
              oDoseRegimeInfusionDetail.Duration =
                new IPPMAManagePrescSer.MeasurableObject();
              oDoseRegimeInfusionDetail.Duration.Value = Convert.ToInt64(
                oDoseDetails.Duration
              );
              if (
                oDoseDetails.DurationUOM != null &&
                !String.IsNullOrEmpty(oDoseDetails.DurationUOM.Value)
              ) {
                oDoseRegimeInfusionDetail.Duration.UOMName =
                  oDoseDetails.DurationUOM.Value;
                oDoseRegimeInfusionDetail.Duration.UOMCode =
                  oDoseDetails.DurationUOM.DisplayText;
              }
            }
            if (oDoseDetails != null) {
              this.FillInfusionRate(
                oDoseDetails.InfusionRate,
                oDoseDetails.InfusionUpperrate,
                oDoseDetails.Infratenumeratoruom,
                oDoseDetails.InfrateDenominatoruom,
                oDoseRegimeInfusionDetail
              );
            }
            itemDose.DosingInstruction = !String.IsNullOrEmpty(
              oDoseDetails.DoseInstructions
            )
              ? oDoseDetails.DoseInstructions
              : String.Empty;
            itemDose.IsStartFromNextDay = oDoseDetails.IsStartFromNextDay;
            itemDose.InfusionDetails.Add(oDoseRegimeInfusionDetail);
          }
        });
        this.lstDoseRegime.Add(itemDose);
      }
    }
    return this.lstDoseRegime;
  }
  public FillDoseRegimeIntermntInfusionDetail(
    lstDoseRegime: ObservableCollection<IPPMAManagePrescSer.DoseRegime>,
    oBaseVM: BasicDetailsVM
  ): ObservableCollection<IPPMAManagePrescSer.DoseRegime> {
    let lstLocalDoseRegime: ObservableCollection<IPPMAManagePrescSer.DoseRegime> =
      lstDoseRegime;
    let sDoseType: string = String.Empty;
    if (
      oBaseVM.DoseType != null &&
      !String.IsNullOrEmpty(oBaseVM.DoseType.Value)
    ) {
      sDoseType = oBaseVM.DoseType.Value;
    }
    if (lstLocalDoseRegime != null && lstLocalDoseRegime.Count > 0) {
      if (
        String.Compare(
          sDoseType,
          DoseTypeCode.NORMAL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          sDoseType,
          DoseTypeCode.DOSAGERANGE,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          sDoseType,
          DoseTypeCode.TITRATED,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          sDoseType,
          DoseTypeCode.CONDITIONAL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        let oDoseRegimeInfusionDetails: ObservableCollection<IPPMAManagePrescSer.DoseRegimeInfusionDetail> =
          new ObservableCollection<IPPMAManagePrescSer.DoseRegimeInfusionDetail>();
        let oDoseRegimeInfusionDetail: IPPMAManagePrescSer.DoseRegimeInfusionDetail =
          new IPPMAManagePrescSer.DoseRegimeInfusionDetail();
        let oIPPDoseRegime: IPPMAManagePrescSer.IPPDoseRegime =
          ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
            lstLocalDoseRegime[0],
            IPPMAManagePrescSer.IPPDoseRegime
          );
        let lnDuration: number = 0;
        if (Number.TryParse(oBaseVM.Duration, (o) => (lnDuration = o))) {
          oDoseRegimeInfusionDetail.Duration =
            new IPPMAManagePrescSer.MeasurableObject();
          oDoseRegimeInfusionDetail.Duration.Value = lnDuration;
          if (
            oBaseVM.DurationUOM != null &&
            !String.IsNullOrEmpty(oBaseVM.DurationUOM.Value)
          ) {
            oDoseRegimeInfusionDetail.Duration.UOMName =
              oBaseVM.DurationUOM.Value;
          }
        }
        if (oBaseVM.InfusionDetails != null) {
          if (
            oBaseVM.InfusionType != null &&
            String.Compare(
              oBaseVM.InfusionType.Value,
              InfusionTypeCode.PCA,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            if (
              String.IsNullOrEmpty(oBaseVM.InfusionDetails.BackgroundRate) &&
              oBaseVM.InfusionDetails.InfRateNumeratorUom == null &&
              oBaseVM.InfusionDetails.InfRateDinominatorUom == null
            )
              this.FillInfusionRate(
                oBaseVM.InfusionDetails.Rate,
                oBaseVM.InfusionDetails.UpperRate,
                oBaseVM.InfusionDetails.InfRateNumeratorUom,
                oBaseVM.InfusionDetails.InfRateDinominatorUom,
                oDoseRegimeInfusionDetail
              );
            else
              this.FillInfusionRate(
                oBaseVM.InfusionDetails.BackgroundRate,
                '',
                oBaseVM.InfusionDetails.BackgroundRateNumeratorUom,
                oBaseVM.InfusionDetails.BackgroundRateDinominatorUom,
                oDoseRegimeInfusionDetail
              );
          } else {
            this.FillInfusionRate(
              oBaseVM.InfusionDetails.Rate,
              oBaseVM.InfusionDetails.UpperRate,
              oBaseVM.InfusionDetails.InfRateNumeratorUom,
              oBaseVM.InfusionDetails.InfRateDinominatorUom,
              oDoseRegimeInfusionDetail
            );
          }
        }
        oDoseRegimeInfusionDetail.PrescriptionItemDosageOID =
          oIPPDoseRegime.PrescibableItemOID;
        oDoseRegimeInfusionDetails.Add(oDoseRegimeInfusionDetail);
        lstLocalDoseRegime[0].InfusionDetails = oDoseRegimeInfusionDetails;
      } else if (
        String.Compare(
          sDoseType,
          DoseTypeCode.STEPPED,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          sDoseType,
          DoseTypeCode.VARIABLE,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          sDoseType,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        let nTotalCount: number = lstLocalDoseRegime.Count;
        for (let i: number = 0; i < nTotalCount; i++) {
          let oDoseRegimeInfusionDetails: ObservableCollection<IPPMAManagePrescSer.DoseRegimeInfusionDetail> =
            new ObservableCollection<IPPMAManagePrescSer.DoseRegimeInfusionDetail>();
          let oDoseRegimeInfusionDetail: IPPMAManagePrescSer.DoseRegimeInfusionDetail =
            new IPPMAManagePrescSer.DoseRegimeInfusionDetail();
          let oIPPDoseRegime: IPPMAManagePrescSer.IPPDoseRegime =
            ObjectHelper.CreateType<IPPMAManagePrescSer.IPPDoseRegime>(
              lstLocalDoseRegime[i],
              IPPMAManagePrescSer.IPPDoseRegime
            );
          let oDoseDetails: MultipleDoseDetail = oBaseVM.MultiDoseDetails[i];
          if (oDoseDetails != null) {
            if (!String.IsNullOrEmpty(oDoseDetails.InfusionRate))
              oDoseRegimeInfusionDetail.InfusionRate =
                oDoseDetails.InfusionRate;
            if (!String.IsNullOrEmpty(oDoseDetails.InfusionUpperrate))
              oDoseRegimeInfusionDetail.UpperInfusionRate =
                oDoseDetails.InfusionUpperrate;
            if (
              oDoseDetails.Infratenumeratoruom != null &&
              !String.IsNullOrEmpty(oDoseDetails.Infratenumeratoruom.Value)
            ) {
              oDoseRegimeInfusionDetail.RateNumerator =
                ObjectHelper.CreateObject(new IPPMAManagePrescSer.UOM(), {
                  UOMId: Convert.ToInt64(
                    oDoseDetails.Infratenumeratoruom.Value
                  ),
                  UOMName: oDoseDetails.Infratenumeratoruom.DisplayText,
                });
            }
            if (
              oDoseDetails.InfrateDenominatoruom != null &&
              !String.IsNullOrEmpty(oDoseDetails.InfrateDenominatoruom.Value)
            ) {
              oDoseRegimeInfusionDetail.RateDenominator =
                ObjectHelper.CreateObject(new IPPMAManagePrescSer.UOM(), {
                  UOMId: Convert.ToInt64(
                    oDoseDetails.InfrateDenominatoruom.Value
                  ),
                  UOMName: oDoseDetails.InfrateDenominatoruom.DisplayText,
                });
            }
          }
          if (oIPPDoseRegime.Duration != null)
            oDoseRegimeInfusionDetail.Duration = oIPPDoseRegime.Duration;
          oDoseRegimeInfusionDetail.VariableDoseInstruction =
            oIPPDoseRegime.DosingInstruction;
          oDoseRegimeInfusionDetail.PrescriptionItemDosageOID =
            oIPPDoseRegime.PrescribableItemDoseOID;
          if (
            !String.IsNullOrEmpty(oDoseRegimeInfusionDetail.InfusionRate) &&
            String.Compare(
              oDoseRegimeInfusionDetail.InfusionRate,
              '0',
              StringComparison.CurrentCultureIgnoreCase
            ) != 0
          ) {
            oDoseRegimeInfusionDetails.Add(oDoseRegimeInfusionDetail);
            lstLocalDoseRegime[i].InfusionDetails = oDoseRegimeInfusionDetails;
          }
        }
      }
    }
    return lstLocalDoseRegime;
  }
  public FillTitratedDoseRegime(
    oBaseVM: BasicDetailsVM
  ): ObservableCollection<IPPMAManagePrescSer.TitratedDoseRegime> {
    this.lstTitratedDoseRegime =
      new ObservableCollection<IPPMAManagePrescSer.TitratedDoseRegime>();
    let lDoseUOMOID: number = 0;
    if (oBaseVM.DoseUOM != null) {
      Number.TryParse(oBaseVM.DoseUOM.Value, (o) => (lDoseUOMOID = o));
    }
    let time: DateTime = DateTime.MinValue;
    let ServerDatetime = CommonBB.GetServerDateTime();
    if (
      oBaseVM.TitratedDoseDetails != null &&
      oBaseVM.TitratedDoseDetails.GrdTitrated != null &&
      oBaseVM.TitratedDoseDetails.GrdTitrated.Count > 0
    ) {
      for (
        let i: number = 0;
        i < oBaseVM.TitratedDoseDetails.GrdTitrated.Count;
        i++
      ) {
        if (
          oBaseVM.TitratedDoseDetails.GrdTitrated[i].ScheduledDate != null &&
          oBaseVM.TitratedDoseDetails.GrdTitrated[i].ScheduledDate.Length > 0
        ) {
          for (
            let j: number = 0;
            j < oBaseVM.TitratedDoseDetails.GrdTitrated[i].ScheduledDate.Length;
            j++
          ) {
            let oTitratedDoseRegime: IPPMAManagePrescSer.TitratedDoseRegime =
              new IPPMAManagePrescSer.TitratedDoseRegime();
            oTitratedDoseRegime.Dose =
              oBaseVM.TitratedDoseDetails.GrdTitrated[i].ScheduleDoseValue[j];
            oTitratedDoseRegime.DoseUOMOID = lDoseUOMOID;
            oTitratedDoseRegime.scheduleDTTM =
              oBaseVM.TitratedDoseDetails.GrdTitrated[i].ScheduledDate[j];
            if (
              String.Equals(
                oBaseVM.TitratedDoseDetails.IsHavingAdminTime,
                CConstants.sIsHavingtimeZero
              )
            ) {
              if (
                !String.IsNullOrEmpty(
                  oBaseVM.TitratedDoseDetails.GrdTitrated[i].DupScheduleTime
                )
              ) {
                oTitratedDoseRegime.Scheduletime =
                  oBaseVM.TitratedDoseDetails.GrdTitrated[i].DupScheduleTime;
              } else {
                oTitratedDoseRegime.Scheduletime = time
                  .AddMinutes(i)
                  .TimeOfDay.ToString();
              }
            } else {
              oTitratedDoseRegime.Scheduletime =
                oBaseVM.TitratedDoseDetails.GrdTitrated[i].ScheduleTime;
            }
            this.lstTitratedDoseRegime.Add(oTitratedDoseRegime);
          }
        }
      }
    }
    return this.lstTitratedDoseRegime;
  }
  private FillInfusionRate(
    Rate: string,
    UpperRate: string,
    RateNumerator: CListItem,
    RateDinominator: CListItem,
    oDoseRegimeInfusionDetail: IPPMAManagePrescSer.DoseRegimeInfusionDetail
  ): void {
    if (!String.IsNullOrEmpty(Rate)) {
      oDoseRegimeInfusionDetail.InfusionRate = Rate;
    }
    if (!String.IsNullOrEmpty(UpperRate)) {
      oDoseRegimeInfusionDetail.UpperInfusionRate = UpperRate;
    }
    if (RateNumerator != null && !String.IsNullOrEmpty(RateNumerator.Value)) {
      oDoseRegimeInfusionDetail.RateNumerator = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.UOM(),
        {
          UOMName: RateNumerator.DisplayText,
          UOMId: Convert.ToInt64(RateNumerator.Value),
        }
      );
    }
    if (
      RateDinominator != null &&
      !String.IsNullOrEmpty(RateDinominator.Value)
    ) {
      oDoseRegimeInfusionDetail.RateDenominator = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.UOM(),
        {
          UOMName: RateDinominator.DisplayText,
          UOMId: Convert.ToInt64(RateDinominator.Value),
        }
      );
    }
  }
  private FillConditionalDoseRegime1(
    oConditionalDosingVM: ConditionalDosingVM
  ): ObservableCollection<IPPMAManagePrescSer.ConditionalDoseRegime> {
    this.lstConditionalDoseRegime =
      new ObservableCollection<IPPMAManagePrescSer.ConditionalDoseRegime>();
    let nDoseTotalCnt: number = oConditionalDosingVM.DoseDetails.Count;
    let nDoseCnt;
    for (nDoseCnt = 0;nDoseCnt < nDoseTotalCnt; nDoseCnt++) {
      this.oDoseDetails = oConditionalDosingVM.DoseDetails[nDoseCnt];
      if (this.oDoseDetails == null) continue;
      if (
        this.oDoseDetails != null &&
        oConditionalDosingVM.SelectedObservationResult != null
      ) {
        let oConditionalDoseRegime: IPPMAManagePrescSer.ConditionalDoseRegime =
          new IPPMAManagePrescSer.ConditionalDoseRegime();
        let oResObse: ObservationResult = null;
        if (
          oConditionalDosingVM.SelectedObservationResult.Tag instanceof
          ObservationResult
        )
          oResObse = ObjectHelper.CreateType<ObservationResult>(
            oConditionalDosingVM.SelectedObservationResult.Tag,
            ObservationResult
          );
        if (
          oConditionalDosingVM.SelectedObservationResult.Tag instanceof
          IPPMAManagePrescSer.ObjectInfo
        ) {
          let obj: IPPMAManagePrescSer.ObjectInfo =
            ObjectHelper.CreateType<IPPMAManagePrescSer.ObjectInfo>(
              oConditionalDosingVM.SelectedObservationResult.Tag,
              IPPMAManagePrescSer.ObjectInfo
            );
          oResObse = new ObservationResult();
          oResObse.ItemType = obj.Code;
          oResObse.ItemCode = obj.Name;
          oResObse.ItemOID = obj.OID;
        }
        if (oResObse != null) {
          oConditionalDoseRegime.AddlItemOID = oResObse.ItemOID;
          oConditionalDoseRegime.AddlItemType = oResObse.ItemType;
          oConditionalDoseRegime.AddlItemCode = oResObse.ItemCode;
          oConditionalDoseRegime.ParentAddlItemCode =
            oConditionalDosingVM.SelectedObservationResult.ParentKey;
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.LowerRange != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.LowerRange)
        ) {
          oConditionalDoseRegime.LowerValue = this.oDoseDetails.LowerRange;
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.UpperRange != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.UpperRange)
        ) {
          oConditionalDoseRegime.UpperValue = this.oDoseDetails.UpperRange;
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.RangeOperator != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.RangeOperator.Value)
        ) {
          oConditionalDoseRegime.ValueRange =
            this.oDoseDetails.RangeOperator.Value;
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.RangeOperator != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.RangeOperator.DisplayText)
        ) {
          oConditionalDoseRegime.ValueRangeOpratorText =
            this.oDoseDetails.RangeOperator.DisplayText;
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.Infusionrate != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.Infusionrate)
        ) {
          oConditionalDoseRegime.Rate = this.oDoseDetails.Infusionrate;
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.InfusionUpperrate != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.InfusionUpperrate)
        ) {
          oConditionalDoseRegime.UpperRate =
            this.oDoseDetails.InfusionUpperrate;
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.Infratenumeratoruom != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.Infratenumeratoruom.Value)
        ) {
          oConditionalDoseRegime.RateUOMOID = ObjectHelper.CreateObject(
            new IPPMAManagePrescSer.UOM(),
            {
              UOMName: this.oDoseDetails.Infratenumeratoruom.DisplayText,
              UOMId: Convert.ToInt64(
                this.oDoseDetails.Infratenumeratoruom.Value
              ),
            }
          );
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.InfrateDenominatoruom != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.InfrateDenominatoruom.Value)
        ) {
          oConditionalDoseRegime.RateDenaminatorUOMOID =
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.UOM(), {
              UOMName: this.oDoseDetails.InfrateDenominatoruom.DisplayText,
              UOMId: Convert.ToInt64(
                this.oDoseDetails.InfrateDenominatoruom.Value
              ),
            });
        }
        oConditionalDoseRegime.AddlItemName =
          this.oDoseDetails.ObservationResult;
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.RangeUoM != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.RangeUoM.Value)
        ) {
          oConditionalDoseRegime.ValueUOM = ObjectHelper.CreateObject(
            new IPPMAManagePrescSer.UOM(),
            {
              UOMName: this.oDoseDetails.RangeUoM.DisplayText,
              UOMCode: this.oDoseDetails.RangeUoM.Value,
            }
          );
        }
        Number.TryParse(this.oDoseDetails.Dose, (o) => (this.ConddLDose = o));
        oConditionalDoseRegime.Dose = Convert.ToString(this.ConddLDose);
        if (!String.IsNullOrEmpty(this.oDoseDetails.UpperDose)) {
          Number.TryParse(
            this.oDoseDetails.UpperDose,
            (o) => (this.ConddUDose = o)
          );
          oConditionalDoseRegime.UpperDose = Convert.ToString(this.ConddUDose);
        }
        if (
          this.oDoseDetails != null &&
          this.oDoseDetails.DoseUoM != null &&
          !String.IsNullOrEmpty(this.oDoseDetails.DoseUoM.Value) &&
          Number.TryParse(
            this.oDoseDetails.DoseUoM.Value,
            (o) => (this.lnDoseUoMOID = o)
          )
        ) {
          oConditionalDoseRegime.DoseUOM = ObjectHelper.CreateObject(
            new IPPMAManagePrescSer.UOM(),
            {
              UOMName: this.oDoseDetails.DoseUoM.DisplayText,
              UOMId: this.lnDoseUoMOID,
            }
          );
        }
        oConditionalDoseRegime.Instruction = this.oDoseDetails.Instruction;
        this.lstConditionalDoseRegime.Add(oConditionalDoseRegime);
      } else if (this.ActionCode == ActivityTypes.Reorder) {
        this.FillConditionalDoseRegime();
      }
    }
    return this.lstConditionalDoseRegime;
  }

  public FillConditionalDoseRegime(
    oItemDetail?:
      | IPPMAManagePrescSer.PrescriptionItemDetails
      | ConditionalDosingVM,
    IsInfusion?: boolean,
    IsAdmintimesReq?: boolean
  ): any {
    if (oItemDetail instanceof ConditionalDosingVM) {
      return this.FillConditionalDoseRegime1(oItemDetail);
    } else if (
      oItemDetail instanceof IPPMAManagePrescSer.PrescriptionItemDetails
    ) {
      return this.FillConditionalDoseRegime3(
        oItemDetail,
        IsInfusion,
        IsAdmintimesReq
      );
    } else {
      this.FillConditionalDoseRegime0();
    }
  }
  public FillConditionalDoseRegime0(): void {
    if (!this.bFlag) return;
    let oReq: CReqMsgGetConditionalDoseRegime = ObjectHelper.CreateObject(
      new CReqMsgGetConditionalDoseRegime(),
      {
        oContextInformation: CommonBB.FillContext(),
        PrescriptionItemOIDBC: this.sourcePrescriptionOid,
        PatientOIDBC: PatientContext.PatientOID,
      }
    );
    let serviceProxy: MedicationAdministrationWSSoapClient =
      new MedicationAdministrationWSSoapClient();
    serviceProxy.GetConditionalDoseRegimeCompleted = (s, e) => {
      this.serviceProxy_GetConditionalDoseRegimeCompleted(s, e);
    };
    serviceProxy.GetConditionalDoseRegimeAsync(oReq);
    this.bFlag = false;
  }
  serviceProxy_GetConditionalDoseRegimeCompleted(
    sender: Object,
    e: GetConditionalDoseRegimeCompletedEventArgs
  ): void {
    if (e.Error != null || e.Result == null) return;
    let oRes: CResMsgGetConditionalDoseRegime = e.Result;
    if (
      oRes.CondDoseRegime != null &&
      oRes.CondDoseRegime.ConditionalDoseRegimeDet != null &&
      oRes.CondDoseRegime.ConditionalDoseRegimeDet.Count > 0
    ) {
      let nLen: number = oRes.CondDoseRegime.ConditionalDoseRegimeDet.Count;
      for (let i: number = 0; i < nLen; i++) {
        if (oRes.CondDoseRegime.ConditionalDoseRegimeDet[i] != null) {
          let oConditionalDoseRegime: IPPMAManagePrescSer.ConditionalDoseRegime =
            new IPPMAManagePrescSer.ConditionalDoseRegime();
          if (
            this.FormViewerDetails.BasicDetails.ConditionalDosingDetails != null
          ) {
            oConditionalDoseRegime.AddlItemOID =
              this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemOID;
            oConditionalDoseRegime.AddlItemType =
              this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemType;
            oConditionalDoseRegime.AddlItemCode =
              this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.AdditionalItemValue;
            oConditionalDoseRegime.ParentAddlItemCode =
              this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.ParentAdditionalItemValue;
          }
          oConditionalDoseRegime.LowerValue =
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].LowerValue;
          oConditionalDoseRegime.UpperValue =
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].UpperValue;
          oConditionalDoseRegime.AddlItemName =
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].AddlItemName;
          if (
            this.oDoseDetails != null &&
            this.oDoseDetails.RangeUoM != null &&
            !String.IsNullOrEmpty(this.oDoseDetails.RangeUoM.Value) &&
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].ValueUOM != null
          ) {
            oConditionalDoseRegime.ValueUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.UOM(),
              {
                UOMName:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].ValueUOM
                    .UOMName,
                UOMCode: this.oDoseDetails.RangeUoM.Value,
              }
            );
          }
          Number.TryParse(
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].Dose,
            (o) => (this.ConddLDose = o)
          );
          oConditionalDoseRegime.Dose = Convert.ToString(this.ConddLDose);
          if (
            !String.IsNullOrEmpty(
              oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].UpperDose
            )
          ) {
            Number.TryParse(
              oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].UpperDose,
              (o) => (this.ConddUDose = o)
            );
            oConditionalDoseRegime.UpperDose = Convert.ToString(
              this.ConddUDose
            );
          }
          if (
            this.oDoseDetails != null &&
            this.oDoseDetails.DoseUoM != null &&
            !String.IsNullOrEmpty(this.oDoseDetails.DoseUoM.Value) &&
            Number.TryParse(
              this.oDoseDetails.DoseUoM.Value,
              (o) => (this.lnDoseUoMOID = o)
            )
          ) {
            oConditionalDoseRegime.DoseUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.UOM(),
              {
                UOMName:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].DoseUOM
                    .UOMName,
                UOMId:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].DoseUOM.UOMId,
              }
            );
          }
          oConditionalDoseRegime.Rate =
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].Rate;
          if (
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].RateUOMOID !=
              null &&
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].RateUOMOID.UOMId > 0
          ) {
            oConditionalDoseRegime.RateUOMOID = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.UOM(),
              {
                UOMId:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].RateUOMOID
                    .UOMId,
                UOMName:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].RateUOMOID
                    .UOMName,
                UOMCode:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].RateUOMOID
                    .UOMCode,
              }
            );
          }
          if (
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i]
              .RateDenaminatorUOMOID != null &&
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i]
              .RateDenaminatorUOMOID.UOMId > 0
          ) {
            oConditionalDoseRegime.RateDenaminatorUOMOID =
              ObjectHelper.CreateObject(new IPPMAManagePrescSer.UOM(), {
                UOMId:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i]
                    .RateDenaminatorUOMOID.UOMId,
                UOMName:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i]
                    .RateDenaminatorUOMOID.UOMName,
                UOMCode:
                  oRes.CondDoseRegime.ConditionalDoseRegimeDet[i]
                    .RateDenaminatorUOMOID.UOMCode,
              });
          }
          if (
            !String.IsNullOrEmpty(
              oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].ValueRange
            )
          ) {
            let oSelectedItem =
              this.FormViewerDetails.BasicDetails.ConditionalDosingDetails.RangeOperators.Where(
                (oItem) =>
                  String.Compare(
                    oItem.Value,
                    oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].ValueRange,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
              ).Select((oItem) => oItem);
            if (oSelectedItem != null && oSelectedItem.Count() > 0) {
              oConditionalDoseRegime.ValueRangeOpratorText =
                oSelectedItem.First().DisplayText;
            }
          }
          oConditionalDoseRegime.ValueRange =
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].ValueRange;
          oConditionalDoseRegime.Instruction =
            oRes.CondDoseRegime.ConditionalDoseRegimeDet[i].Instruction;
          this.lstConditionalDoseRegime.Add(oConditionalDoseRegime);
        }
      }
    }
  }
  public MoreOptionCode: string;
  public GetMoreComboOption(): void {
    let objService: ManagePrescSer.ManagePrescriptionWSSoapClient =
      new ManagePrescSer.ManagePrescriptionWSSoapClient();
    objService.GetAllOptionsCompleted = (s, e) => {
      this.objService_GetAllOptionsCompleted(s, e);
    };
    let objAllRequest: ManagePrescSer.CReqMsgGetAllOptions =
      new ManagePrescSer.CReqMsgGetAllOptions();
    objAllRequest.IdentifyingOIDBC =
      this.FormViewerDetails.BasicDetails.IdentifyingOID;
    objAllRequest.IdentifyingTypeBC =
      this.FormViewerDetails.BasicDetails.IdentifyingType;
    objAllRequest.sOptionCodeBC = this.MoreOptionCode;
    objAllRequest.MCVersionNoBC = AppSessionInfo.AMCV;
    objAllRequest.oContextInformation = Common.FillContext();
    objService.GetAllOptionsAsync(objAllRequest);
  }
  objService_GetAllOptionsCompleted(
    sender: Object,
    e: ManagePrescSer.GetAllOptionsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000046;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:BasicDetailsVM, Method:objService_GetAllOptionsCompleted()';
    if (e.Error == null) {
      try {
        let objResponse: ManagePrescSer.CResMsgGetAllOptions = e.Result;
        if (
          objResponse != null &&
          objResponse.oValues != null &&
          objResponse.oValues.Count > 0
        ) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms =
            new ObservableCollection<CListItem>();
          for (let i: number = 0; i < objResponse.oValues.Count; i++) {
            if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
              if (
                PatientContext.IsINFUSIONON &&
                this.FormViewerDetails.BasicDetails.Route != null &&
                this.FormViewerDetails.BasicDetails.Route.Tag != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.Route.Tag.ToString()
                ) &&
                (String.Compare(
                  this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
                  '1'
                ) == 0 ||
                  this.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains(
                    '1'
                  ))
              ) {
                if (
                  !String.Equals(
                    objResponse.oValues[i].SealImageList,
                    CConstants.CompositeUOM
                  )
                ) {
                  this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                      Tag: objResponse.oValues[i].OperationMode,
                    })
                  );
                }
              } else {
                this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: objResponse.oValues[i].Name,
                    Value: objResponse.oValues[i].Code.ToString(),
                    Tag: objResponse.oValues[i].OperationMode,
                  })
                );
              }
              if (
                !this.FormViewerDetails.BasicDetails.DoseUOMTypeCode.ContainsKey(
                  objResponse.oValues[i].OperationMode.ToString()
                )
              ) {
                this.FormViewerDetails.BasicDetails.DoseUOMTypeCode.Add(
                  objResponse.oValues[i].OperationMode.ToString(),
                  objResponse.oValues[i].SealImageList
                );
              }
            }
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private FillAdminTimes(
    oDoseRegime: IPPMAManagePrescSer.IPPDoseRegime,
    oBaseVM: BasicDetailsVM
  ): void {
    let oAdminSchdDetails: AdminScheduleTimeVM = oBaseVM.AdminTimes;
    if (oAdminSchdDetails != null) {
      if (oDoseRegime.FrequencyDetails == null)
        oDoseRegime.FrequencyDetails =
          new IPPMAManagePrescSer.FrequencyDetails();
      if (DateTime.Equals(oAdminSchdDetails.StartDTTM, DateTime.MinValue)) {
        oDoseRegime.StartDTTM = oBaseVM.StartDTTM.Date.AddHours(
          oBaseVM.StartDTTM.Hour
        ).AddMinutes(oBaseVM.StartDTTM.Minute);
        oDoseRegime.EndDTTM = oBaseVM.EndDTTM;
      } else {
        oDoseRegime.StartDTTM = oAdminSchdDetails.StartDTTM.Date.AddHours(
          oAdminSchdDetails.StartDTTM.Hour
        ).AddMinutes(oAdminSchdDetails.StartDTTM.Minute);
        oDoseRegime.EndDTTM = oAdminSchdDetails.StopDTTM;
      }
      if (oAdminSchdDetails.IsSlotTimeModeEnable) {
        if (oAdminSchdDetails.IsFixedTime) {
          oDoseRegime.FrequencyDetails.IsFixedAdministration = 'F';
        } else if (oAdminSchdDetails.IsDrugroundTime) {
          oDoseRegime.FrequencyDetails.IsFixedAdministration = 'D';
        }
      }
      if (oAdminSchdDetails.AdministrationScheduleTimes != null) {
        oDoseRegime.FrequencyDetails.ScheduledTimes =
          new ObservableCollection<IPPMAManagePrescSer.Scheduledetails>();
        for (
          let i: number = 0;
          i < oAdminSchdDetails.AdministrationScheduleTimes.Count;
          i++
        ) {
          let oSchedule: IPPMAManagePrescSer.Scheduledetails =
            new IPPMAManagePrescSer.Scheduledetails();
          if (
            oAdminSchdDetails.IsSlotTimeModeEnable &&
            oAdminSchdDetails.IsDrugroundTime
          ) {
            oSchedule.ScheduledTime =
              oAdminSchdDetails.AdministrationScheduleTimes[
                i
              ].DrugroundDTTM.ToUserDateTime().ToString('HH:mm');
          } else {
            oSchedule.ScheduledTime =
              oAdminSchdDetails.AdministrationScheduleTimes[
                i
              ].ScheduleDTTM.ToUserDateTime().ToString('HH:mm');
          }
          oDoseRegime.FrequencyDetails.ScheduledTimes.Add(oSchedule);
        }
      }
      if (oAdminSchdDetails.DaysOfWeekVisibility == Visibility.Visible) {
        let arrDaysOfWeek: IPPMAManagePrescSer.ArrayOfString =
          new IPPMAManagePrescSer.ArrayOfString();
        arrDaysOfWeek.Add(oAdminSchdDetails.IsSun.ToString());
        arrDaysOfWeek.Add(oAdminSchdDetails.IsMon.ToString());
        arrDaysOfWeek.Add(oAdminSchdDetails.IsTue.ToString());
        arrDaysOfWeek.Add(oAdminSchdDetails.IsWed.ToString());
        arrDaysOfWeek.Add(oAdminSchdDetails.IsThu.ToString());
        arrDaysOfWeek.Add(oAdminSchdDetails.IsFri.ToString());
        arrDaysOfWeek.Add(oAdminSchdDetails.IsSat.ToString());
        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPFrequencyDetails>(
          oDoseRegime.FrequencyDetails,
          IPPMAManagePrescSer.IPPFrequencyDetails
        ).DaysOfWeek = arrDaysOfWeek;
      }
    }
  }
  private _MedsSequentialResolve: ObservableCollection<PrescriptionItemVM>;
  public get MedsSequentialResolve(): ObservableCollection<PrescriptionItemVM> {
    return this._MedsSequentialResolve;
  }
  public set MedsSequentialResolve(
    value: ObservableCollection<PrescriptionItemVM>
  ) {
    if (this._MedsSequentialResolve != value) {
      this._MedsSequentialResolve = value;
      //super.NotifyPropertyChanged("MedsSequentialResolve");
    }
  }
  public DisableDefaultSubSeqItems(defaultflag: boolean): void {
    if (
      this.TopMostAmendedPrescriptionItemOID > 0 &&
      this.TopMostAmendedPrescriptionItemOID ==
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .ParentPrescriptionItemOID
    ) {
      this.FormViewerDetails.BasicDetails.IsEnableStartdtSeq = true;
      this.FormViewerDetails.BasicDetails.InfusionDetails.IsMandatoryStartdtSeq =
        true;
    } else {
      this.FormViewerDetails.BasicDetails.IsEnableStartdtSeq = defaultflag;
      this.FormViewerDetails.BasicDetails.InfusionDetails.IsMandatoryStartdtSeq =
        defaultflag;
    }
    if (this.FormViewerDetails.BasicDetails.SequenceInfo != null) {
      if (
        this.TopMostAmendedPrescriptionItemOID > 0 &&
        this.TopMostAmendedPrescriptionItemOID ==
          this.FormViewerDetails.BasicDetails.SequenceInfo
            .ParentPrescriptionItemOID
      ) {
        this.FormViewerDetails.BasicDetails.IsenableStartdate = true;
        this.FormViewerDetails.BasicDetails.IsEnableStartTime = true;
        this.FormViewerDetails.BasicDetails.IsMandatoryStartDTTM = true;
      } else {
        this.FormViewerDetails.BasicDetails.IsenableStartdate = defaultflag;
        this.FormViewerDetails.BasicDetails.IsEnableStartTime = defaultflag;
        this.FormViewerDetails.BasicDetails.IsMandatoryStartDTTM = defaultflag;
      }
    }
    if (
      !this.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S') &&
      defaultflag &&
      (this.FormViewerDetails.BasicDetails.InfusionType == null ||
        (this.FormViewerDetails.BasicDetails.InfusionType != null &&
          String.Compare(
            this.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.PCA,
            StringComparison.OrdinalIgnoreCase
          ) != 0)) &&
      this.FormViewerDetails.BasicDetails.DoseType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.CurrentCultureIgnoreCase
      ) != 0
    )
      this.FormViewerDetails.BasicDetails.IsenableStopDate = defaultflag;
    if (
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) &&
      this.FormViewerDetails.BasicDetails.SelectedFrequencyDetails != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) == 0 &&
      (this.ActionCode == ActivityTypes.Amend ||
        this.ActionCode == ActivityTypes.Reorder)
    ) {
      this.FormViewerDetails.BasicDetails.IsenableDuration = false;
    }
  }
  public CheckSubSequentialRoutechanged(objMsgBox: iMessageBox): boolean {
    if (
      !this.FormViewerDetails.BasicDetails.InfusionDetails
        .IsShowRouteDiscrepency
    ) {
      if (
        this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        this.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential !=
          null &&
        this.FormViewerDetails.BasicDetails.Route != null &&
        (this.FormViewerDetails.BasicDetails.Route.Tag == null ||
          String.Compare(
            this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
            '0'
          ) == 0 ||
          String.Compare(
            this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
            '1'
          ) == 0) &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .PrevSequentialPrescribingData != null &&
        this.FormViewerDetails.BasicDetails.Route.Value !=
          this.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential
            .Value &&
        this.FormViewerDetails.BasicDetails.InfusionDetails
          .PrevSequentialPrescribingData.SequentialItemOrder > 1
      ) {
        if (objMsgBox == null) {
          let iMsgBox: iMessageBox = ObjectHelper.CreateObject(
            new iMessageBox(),
            {
              Title: 'Lorenzo - Manage prescription',
              Message: String.Format(
                Resource.Infusion.SequentialRouteChanged_Message,
                this.FormViewerDetails.BasicDetails.InfusionDetails
                  .RouteSequential.DisplayText
              ),
              MessageButton: MessageBoxButton.OK,
              IconType: MessageBoxType.Question,
            }
          );
          iMsgBox.MessageBoxClose = (s, e) => {
            this.iMessageBox_MsgBoxClose(s, e);
          };
          iMsgBox.Show();
          return false;
        } else {
          this.FocusControl = 'cboRoute';
          objMsgBox.Message = String.Format(
            Resource.Infusion.SequentialRouteChanged_Message,
            this.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential
              .DisplayText
          );
          objMsgBox.MessageButton = MessageBoxButton.OK;
          objMsgBox.Show();
          return false;
        }
      }
    }
    return true;
  }
  iMessageBox_MsgBoxClose(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      this.FocusControl = 'cboRoute';
    }
  }
  public GetMCFormviewcloseflag(): void {
    if (this.ParentbaseVM != null) {
      if (this.ParentbaseVM.IsFormViewerClosed == true)
        this.ParentbaseVM.IsFormViewerClosed = false;
    }
  }
  public GetMcchilditemDisplay(): void {
    if (
      this.FormViewerDetails.MulticomponentDetails != null &&
      this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null &&
      this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 0
    ) {
      if (
        (this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count >
          5 &&
          this.FormViewerDetails.BasicDetails.IdentifyingOID ==
            CommonFlags.MCidentifyingOID) ||
        (this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count ==
          0 &&
          this.FormViewerDetails.BasicDetails.IdentifyingOID ==
            CommonFlags.MCidentifyingOID)
      ) {
        this.FormViewerDetails.BasicDetails.IdentifyingName =
          CommonFlags.MCidentifyingName;
        this.FormViewerDetails.BasicDetails.MCILorenzoID =
          CConstants.ADHOC_ITEM_LORENZOID;
        if (
          (!this.FormViewerDetails.BasicDetails.IsMCICtrlAuthorise &&
            String.IsNullOrEmpty(this.PrescriptionItemStatus)) ||
          (this.ActionCode == ActivityTypes.Amend &&
            String.Equals(
              this.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          let MCAuthorizeCount =
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
              .Where((s) => s.IsMCAuthorize)
              .ToList().Count;
          if (
            String.Equals(
              this.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            (MCAuthorizeCount > 0 &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) &&
              PatientContext.ClerkFormViewDefaultBehavior !=
                ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
              String.IsNullOrEmpty(this.PrescriptionItemStatus))
          ) {
            this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
              this.FormViewerDetails.BasicDetails.IdentifyingName +
              CConstants.sAuthoriseText;
            if (this.AuthoriseTVMCIDisableEvent != null) {
              this.AuthoriseTVMCIDisableEvent('1');
            }
            this.FormViewerDetails.BasicDetails.RecordAdminMsg1 = String.Empty;
          }
          if (
            MCAuthorizeCount > 0 &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            ) &&
            PatientContext.ClerkFormViewDefaultBehavior !=
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ) {
            this.FormViewerDetails.BasicDetails.IsMCIAuthorise = true;
          } else if (this.FormViewerDetails.BasicDetails.IsMCIAuthorise) {
            this.FormViewerDetails.BasicDetails.IsMCIAuthorise = false;
            if (this.AuthoriseTVMCIDisableEvent != null) {
              this.AuthoriseTVMCIDisableEvent('0');
            }
          }
        } else {
          if (this.AuthoriseTVMCIDisableEvent != null) {
            this.AuthoriseTVMCIDisableEvent('0');
          }
        }
      } else if (
        this.FormViewerDetails.BasicDetails.IdentifyingOID !=
          CommonFlags.MCidentifyingOID &&
        !this.FormViewerDetails.BasicDetails.isAdhocitem
      ) {
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.SIdentifyingoriginalname
          )
        ) {
          this.FormViewerDetails.BasicDetails.IdentifyingName =
            this.FormViewerDetails.BasicDetails.SIdentifyingoriginalname;
        } else if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.IdentifyingName
          )
        ) {
          this.FormViewerDetails.BasicDetails.SIdentifyingoriginalname =
            this.FormViewerDetails.BasicDetails.IdentifyingName;
        }
        if (
          (!this.FormViewerDetails.BasicDetails.IsMCICtrlAuthorise &&
            String.IsNullOrEmpty(this.PrescriptionItemStatus)) ||
          (this.ActionCode == ActivityTypes.Amend &&
            String.Equals(
              this.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          let MCAuthorizeCount =
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
              .Where((s) => s.IsMCAuthorize)
              .ToList().Count;
          if (
            String.Equals(
              this.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            (MCAuthorizeCount > 0 &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) &&
              PatientContext.ClerkFormViewDefaultBehavior !=
                ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
              String.IsNullOrEmpty(this.PrescriptionItemStatus))
          ) {
            this.FormViewerDetails.BasicDetails.IndentifyingDrugName =
              this.FormViewerDetails.BasicDetails.IdentifyingName +
              ' - ' +
              CConstants.sMCAuthoriseText;
            if (this.AuthoriseTVMCIDisableEvent != null) {
              this.AuthoriseTVMCIDisableEvent('1');
            }
            this.FormViewerDetails.BasicDetails.RecordAdminMsg1 = String.Empty;
          }
          if (
            MCAuthorizeCount > 0 &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            ) &&
            PatientContext.ClerkFormViewDefaultBehavior !=
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ) {
            this.FormViewerDetails.BasicDetails.IsMCIAuthorise = true;
          } else if (this.FormViewerDetails.BasicDetails.IsMCIAuthorise) {
            this.FormViewerDetails.BasicDetails.IsMCIAuthorise = false;
            if (this.AuthoriseTVMCIDisableEvent != null) {
              this.AuthoriseTVMCIDisableEvent('0');
            }
          }
        } else {
          if (this.AuthoriseTVMCIDisableEvent != null) {
            this.AuthoriseTVMCIDisableEvent('0');
          }
        }
      } else {
        this.FormViewerDetails.BasicDetails.MCILorenzoID =
          CConstants.ADHOC_ITEM_LORENZOID;
        let sName: StringBuilder = new StringBuilder();
        for (
          let rcount: number = 0;
          rcount <
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
          rcount++
        ) {
          if (
            !String.IsNullOrEmpty(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].ComponentName
            )
          ) {
            sName.Append(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].ComponentName
            );
            if (
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IsUpto == true
            ) {
              sName.Append(' up to');
              this.FormViewerDetails.BasicDetails.MCuptoIdentifyingoid =
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].IdentifyingOID;
              this.FormViewerDetails.BasicDetails.MCuptoIdentifyingtype =
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].IdentifyingType;
            }
            if (
              !String.IsNullOrEmpty(
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].Quantity
              )
            ) {
              sName.Append(
                ' ' +
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].Quantity
              );
            }
            sName.Append(
              ' ' +
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].MCUomName
            );
            if (
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IsMCAuthorize &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) &&
              PatientContext.ClerkFormViewDefaultBehavior !=
                ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
              (String.IsNullOrEmpty(this.PrescriptionItemStatus) ||
                String.Equals(
                  this.PrescriptionItemStatus,
                  CConstants.AWAITINGAUTHORISE,
                  StringComparison.InvariantCultureIgnoreCase
                ))
            ) {
              sName.Append(CConstants.sAuthoriseText);
            }
            if (
              rcount !=
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
                .Count -
                1
            ) {
              sName.Append(Environment.NewLine);
            }
          }
        }
        this.FormViewerDetails.BasicDetails.IdentifyingName = sName.ToString();
        if (this.isAdhocitem) {
          this.FormViewerDetails.BasicDetails.IdentifyingOID =
            CommonFlags.MCidentifyingOID;
          this.FormViewerDetails.BasicDetails.itemSubType =
            CommonFlags.MCsubtype;
        }
        if (
          (!this.FormViewerDetails.BasicDetails.IsMCICtrlAuthorise &&
            String.IsNullOrEmpty(this.PrescriptionItemStatus)) ||
          (this.ActionCode == ActivityTypes.Amend &&
            String.Equals(
              this.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          let MCAuthorizeCount =
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
              .Where((s) => s.IsMCAuthorize)
              .ToList().Count;
          if (
            String.Equals(
              this.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            (MCAuthorizeCount > 0 &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) &&
              PatientContext.ClerkFormViewDefaultBehavior !=
                ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
              String.IsNullOrEmpty(this.PrescriptionItemStatus))
          ) {
            if (this.AuthoriseTVMCIDisableEvent != null) {
              this.AuthoriseTVMCIDisableEvent('1');
            }
            this.FormViewerDetails.BasicDetails.RecordAdminMsg1 = String.Empty;
          }
          if (
            MCAuthorizeCount > 0 &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            ) &&
            PatientContext.ClerkFormViewDefaultBehavior !=
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ) {
            this.FormViewerDetails.BasicDetails.IsMCIAuthorise = true;
          } else if (this.FormViewerDetails.BasicDetails.IsMCIAuthorise) {
            this.FormViewerDetails.BasicDetails.IsMCIAuthorise = false;
            if (this.AuthoriseTVMCIDisableEvent != null) {
              this.AuthoriseTVMCIDisableEvent('0');
            }
          }
        } else {
          if (this.AuthoriseTVMCIDisableEvent != null) {
            this.AuthoriseTVMCIDisableEvent('0');
          }
        }
      }
      if (
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.OrdinalIgnoreCase
        ) &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
        (this.ActionCode == ActivityTypes.Prescribe ||
          this.ActionCode == ActivityTypes.Reorder)
      ) {
        if (
          this.FormViewerDetails.BasicDetails.IsOrgAuthorise ||
          this.FormViewerDetails.BasicDetails.IsFluidAuthorise ||
          this.FormViewerDetails.BasicDetails.IsMCIAuthorise
        ) {
          this.FormViewerDetails.BasicDetails.IsClinicallyVerified = false;
          this.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
            false;
          this.IsClinicallyVerifyEnable = false;
        } else {
          this.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
            true;
          this.IsClinicallyVerifyEnable = true;
        }
      }
      let sTip: StringBuilder = new StringBuilder();
      let sDrugprop: StringBuilder = new StringBuilder();
      if (
        this.FormViewerDetails.BasicDetails.IdentifyingOID !=
          CommonFlags.MCidentifyingOID &&
        !this.isAdhocitem
      ) {
        if (this.FormViewerDetails.BasicDetails.DrugProperties == null) {
          this.FormViewerDetails.BasicDetails.DrugProperties =
            new ObservableCollection<ManagePrescSer.DrugProperty>();
        }
      } else
        this.FormViewerDetails.BasicDetails.DrugProperties =
          new ObservableCollection<ManagePrescSer.DrugProperty>();
      for (
        let rcount: number = 0;
        rcount <
        this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
        rcount++
      ) {
        if (
          !String.IsNullOrEmpty(
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].ComponentName
          )
        ) {
          sTip.Append(
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].ComponentName
          );
          sDrugprop.Append(
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].ComponentName
          );
          if (
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].IsUpto == true
          ) {
            sTip.Append(' up to');
            sDrugprop.Append(' up to');
            this.FormViewerDetails.BasicDetails.MCuptoIdentifyingoid =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IdentifyingOID;
            this.FormViewerDetails.BasicDetails.MCuptoIdentifyingtype =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IdentifyingType;
            this.FormViewerDetails.BasicDetails.isUptoprodrule = true;
          } else {
            this.FormViewerDetails.BasicDetails.isUptoprodrule = false;
          }
          if (
            !String.IsNullOrEmpty(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].Quantity
            )
          ) {
            sTip.Append(
              ' ' +
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].Quantity
            );
            sDrugprop.Append(
              ' ' +
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].Quantity
            );
          }
          sTip.Append(
            ' ' +
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUomName
          );
          sDrugprop.Append(
            ' ' +
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUomName
          );
          sDrugprop.Append(
            '~' +
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].Compoentsdrugprop
          );
          if (
            rcount !=
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
              .Count -
              1
          ) {
            sTip.Append('^');
            sDrugprop.Append('^');
          }
          if (
            !String.IsNullOrEmpty(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].Compoentsdrugprop
            )
          ) {
            if (
              !this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].Compoentsdrugprop.Equals('null')
            ) {
              let sDrugProperties: string[] =
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].Compoentsdrugprop.Split(',');
              for (let j: number = 0; j < sDrugProperties.length; j++) {
                let sProp: string[] = null;
                if (
                  !String.IsNullOrEmpty(sDrugProperties[j]) &&
                  sDrugProperties[j].Contains('~')
                ) {
                  sProp = sDrugProperties[j].Split('~');
                } else {
                  sProp = new Array(1);
                  sProp[0] = sDrugProperties[j];
                }
                this.FormViewerDetails.BasicDetails.DrugProperties.Add(
                  ObjectHelper.CreateObject(new ManagePrescSer.DrugProperty(), {
                    DrugPropertyCode: sProp[0],
                    VMChildCode: 'CC_OCCRALLCHILD',
                    UniqueMCRowID:
                      this.FormViewerDetails.MulticomponentDetails
                        .oMCItemBasicInfo[rcount].UniqueMCRowID,
                  })
                );
                if (sDrugProperties[j] == 'CC_CNTRLDDRUG') {
                  this._IsControlledDrug = '1';
                  this.IsControlledDrug = '1';
                }
              }
            }
          } else if (
            this.FormViewerDetails.BasicDetails.DrugProperties != null
          ) {
            for (
              let n: number = 0;
              n < this.FormViewerDetails.BasicDetails.DrugProperties.Count;
              n++
            ) {
              if (
                this.FormViewerDetails.BasicDetails.DrugProperties[n]
                  .DrugPropertyCode == 'CC_CNTRLDDRUG'
              ) {
                this._IsControlledDrug = '1';
                this.IsControlledDrug = '1';
              }
            }
          }
          if (
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].isEditable == true &&
            this.FormViewerDetails.BasicDetails.IsMCiUptoProdexist == false &&
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].IsUpto == true &&
            this.FormViewerDetails.BasicDetails != null &&
            this.FormViewerDetails.BasicDetails.Route != null &&
            this.FormViewerDetails.BasicDetails.Route.Value != null
          ) {
            if (
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].IdentifyingOID > 0
            ) {
              if (
                this.FormViewerDetails.BasicDetails.Route != null &&
                this.FormViewerDetails.BasicDetails.Route.Tag != null &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
                  '1'
                ) == 0
              ) {
                if (
                  this.FormViewerDetails.BasicDetails.Formset != true &&
                  this.FormViewerDetails.BasicDetails.DosageForm == null
                )
                  this.FormViewerDetails.BasicDetails.Formset = true;
                else {
                  if (
                    this.FormViewerDetails.BasicDetails.DosageForm != null &&
                    this.FormViewerDetails.BasicDetails.DosageForm.Value != null
                  ) {
                    this.formViewerDetails.BasicDetails.GetMciProductRule(
                      this.FormViewerDetails.BasicDetails.Route.Value,
                      this.FormViewerDetails.BasicDetails.DosageForm.Value,
                      this.FormViewerDetails.BasicDetails.MCVersion,
                      this.FormViewerDetails.MulticomponentDetails
                        .oMCItemBasicInfo[rcount].IdentifyingOID,
                      this.FormViewerDetails.MulticomponentDetails
                        .oMCItemBasicInfo[rcount].IdentifyingType
                    );
                  } else {
                    this.formViewerDetails.BasicDetails.GetMciProductRule(
                      this.FormViewerDetails.BasicDetails.Route.Value,
                      String.Empty,
                      this.FormViewerDetails.BasicDetails.MCVersion,
                      this.FormViewerDetails.MulticomponentDetails
                        .oMCItemBasicInfo[rcount].IdentifyingOID,
                      this.FormViewerDetails.MulticomponentDetails
                        .oMCItemBasicInfo[rcount].IdentifyingType
                    );
                  }
                  this.FormViewerDetails.BasicDetails.Formset = false;
                }
              } else if (
                this.FormViewerDetails.BasicDetails.Route != null &&
                this.FormViewerDetails.BasicDetails.Route.Tag != null &&
                String.Compare(
                  this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
                  '0'
                ) == 0
              ) {
                if (
                  this.FormViewerDetails.BasicDetails.DosageForm != null &&
                  this.FormViewerDetails.BasicDetails.DosageForm.Value != null
                ) {
                  this.formViewerDetails.BasicDetails.GetMciProductRule(
                    this.FormViewerDetails.BasicDetails.Route.Value,
                    this.FormViewerDetails.BasicDetails.DosageForm.Value,
                    this.FormViewerDetails.BasicDetails.MCVersion,
                    this.FormViewerDetails.MulticomponentDetails
                      .oMCItemBasicInfo[rcount].IdentifyingOID,
                    this.FormViewerDetails.MulticomponentDetails
                      .oMCItemBasicInfo[rcount].IdentifyingType
                  );
                } else {
                  this.formViewerDetails.BasicDetails.GetMciProductRule(
                    this.FormViewerDetails.BasicDetails.Route.Value,
                    String.Empty,
                    this.FormViewerDetails.BasicDetails.MCVersion,
                    this.FormViewerDetails.MulticomponentDetails
                      .oMCItemBasicInfo[rcount].IdentifyingOID,
                    this.FormViewerDetails.MulticomponentDetails
                      .oMCItemBasicInfo[rcount].IdentifyingType
                  );
                }
              }
            }
          }
        }
      }
      this.FormViewerDetails.BasicDetails.mCIItemDisplay = sTip.ToString();
      this.FormViewerDetails.BasicDetails.MCIItemDrugprop =
        sDrugprop.ToString();
    }
  }
  public Infusionperiodmin(oFormViewerDetails: FormViewerVM): number {
    let CurrentDTTM: DateTime = CommonBB.GetServerDateTime();
    let InfPrdDTTM: TimeSpan = new TimeSpan();
    if (
      oFormViewerDetails != null &&
      oFormViewerDetails.BasicDetails != null &&
      oFormViewerDetails.BasicDetails.InfusionDetails != null &&
      oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod != null &&
      oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom !=
        null &&
      !String.IsNullOrEmpty(
        oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
          .DisplayText
      ) &&
      !String.IsNullOrEmpty(
        oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
      ) &&
      DateTime.NotEquals(CurrentDTTM, DateTime.MinValue)
    ) {
      switch (
        oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom
          .DisplayText
      ) {
        case 'minute':
          InfPrdDTTM = CurrentDTTM.AddMinutes(
            Convert.ToDouble(
              oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            )
          ).Subtract(CurrentDTTM);
          break;
        case 'hour':
          InfPrdDTTM = CurrentDTTM.AddHours(
            Convert.ToDouble(
              oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            )
          ).Subtract(CurrentDTTM);
          break;
        case 'day':
          InfPrdDTTM = CurrentDTTM.AddDays(
            Convert.ToDouble(
              oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            )
          ).Subtract(CurrentDTTM);
          break;
        case 'week':
          InfPrdDTTM = CurrentDTTM.AddDays(
            Convert.ToDouble(
              oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            )
          ).Subtract(CurrentDTTM);
          break;
        case 'month':
          InfPrdDTTM = CurrentDTTM.AddMonths(
            Convert.ToInt32(
              oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            )
          ).Subtract(CurrentDTTM);
          break;
        case 'year':
          InfPrdDTTM = CurrentDTTM.AddYears(
            Convert.ToInt32(
              oFormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
            )
          ).Subtract(CurrentDTTM);
          break;
      }
    }
    return InfPrdDTTM.TotalMinutes;
  }
  public Converterml(Volume: string, VolumeUOM: string): number {
    let dml: number = 0;
    if (
      Volume != null &&
      VolumeUOM != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList !=
        null &&
      Volume.length > 0 &&
      VolumeUOM.length > 0
    ) {
      let InfRateNumUOM =
        this.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOMList.Where(
          (c) => c.DisplayText == VolumeUOM
        )
          .Select((s) => s)
          .LastOrDefault();
      switch (InfRateNumUOM.DisplayText) {
        case InfusionVolume.litre:
          dml = Convert.ToInt32(Volume) * (1000 / 1);
          break;
        case InfusionVolume.microlitre:
          dml = Convert.ToInt32(Convert.ToDouble(Volume) * 0.001);
          break;
        case InfusionVolume.ml:
          dml = Convert.ToInt32(Volume);
          break;
      }
    }
    return dml;
  }
  public GetnamewithoutUOM(): void {
    let sNamewithoutQuantity: StringBuilder = new StringBuilder();
    let sNamewithoutUOM: StringBuilder = new StringBuilder();
    this.FormViewerDetails.BasicDetails.SNamewithoutQuantitys = String.Empty;
    this.FormViewerDetails.BasicDetails.SNamewithoutUOM = String.Empty;
    if (
      this.FormViewerDetails.MulticomponentDetails != null &&
      this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null
    ) {
      for (
        let rcount: number = 0;
        rcount <
        this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
        rcount++
      ) {
        if (
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount]
            .isQtyEditable == true ||
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount]
            .isQtyUOMEditable == true
        ) {
          if (
            String.IsNullOrEmpty(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].Quantity
            ) ||
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].Quantity == '0' ||
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].Quantity == '.0' ||
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              rcount
            ].Quantity == '.00'
          ) {
            sNamewithoutQuantity.Append(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].ComponentName
            );
            sNamewithoutQuantity.Append(',');
          } else if (
            String.IsNullOrEmpty(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].MCUomName
            )
          ) {
            sNamewithoutUOM.Append(
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                rcount
              ].ComponentName
            );
            sNamewithoutUOM.Append(',');
          }
        }
      }
      var sQuantity;
      if (sNamewithoutQuantity.Length > 0) {
       // sNamewithoutQuantity.Remove(sNamewithoutQuantity.Length - 1, 1);
        this.sQuantity =
          sNamewithoutQuantity.ToString();
        this.FormViewerDetails.BasicDetails.SNamewithoutQuantitys = this.sQuantity.slice(0, this.sQuantity.length - 1);
        }
      var sUOM;
      if (sNamewithoutUOM.Length > 0) {
        //sNamewithoutUOM.Remove(sNamewithoutUOM.Length - 1, 1);
        this.sUOM =
          sNamewithoutUOM.ToString();
        this.FormViewerDetails.BasicDetails.SNamewithoutUOM = this.sUOM.slice(0, this.sUOM.length - 1);
      }
    }
  }
  public EprescribingruleEvent(): void {
    if (this.ParentbaseVM != null) {
      let _IsMultipleRouteCheckedFromDOS: boolean = false;
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        this.FormViewerDetails.BasicDetails.IsMultiRouteCheckedforAmend &&
        this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
        this.ActionCode == ActivityTypes.Prescribe
      ) {
        _IsMultipleRouteCheckedFromDOS = true;
      }
      if (
        (this.FormViewerDetails.BasicDetails.isRuleexecuted ||
          _IsMultipleRouteCheckedFromDOS) &&
        this.FormViewerDetails.BasicDetails.isConflictsgenerated
      ) {
        if (
          !this.FormViewerDetails.BasicDetails.IsRegenerateConflictsForBrand
        ) {
          let _IsDRCInprogress: boolean = false;
          let IsdynamicFormWithOtherClick: boolean =
            this.FormViewerDetails.BHasFormViewParams && this.IsOtherClick;
          if (
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            this.FormViewerDetails.BHasFormViewParams &&
            !this.ParentbaseVM.IsMandatoryAndDeactAttri() &&
            this.ActionCode != ActivityTypes.Amend
          ) {
            this.ParentbaseVM.GetDeactiveFlag();
          } else if (
            !IsdynamicFormWithOtherClick &&
            this.ActionCode != ActivityTypes.Amend &&
            ((String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
              this.ParentbaseVM.isDeactivatedAttributesExists()) ||
              this.ParentbaseVM.IsMandatoryAndDeactAttri())
          ) {
            this.ParentbaseVM.objNewItemVM_WarningsGenerationCompleted();
          } else {
            this.ParentbaseVM.GetDeactiveFlag();
          }
          if (this.ParentbaseVM.AddtoResolutionGriddone) {
            //this.WarningsGenerationCompleted -= this.ParentbaseVM.objNewItemVM_WarningsGenerationCompleted;
            this.ParentbaseVM.CallOrderSetSequence(
              this.ParentbaseVM.orsseqcount
            );
            this.ParentbaseVM.orsseqcount++;
            if (
              this.ParentbaseVM.objRePresItmCollection != null &&
              this.ParentbaseVM.objRePresItmCollection.Count > 0
            ) {
              this.ParentbaseVM.CallRePresSequence(
                this.ParentbaseVM.represcseqcount
              );
              this.ParentbaseVM.represcseqcount++;
            }
            Busyindicator.SetStatusIdle('OrderSetPrescribe');
            Busyindicator.SetStatusIdle('OrderSetPrescribe');
          }
          if (
            PatientContext.IsTurnONDRC &&
            PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
            this.bDRCConflictGeToAddtoResolve &&
            !this.ParentbaseVM.AddtoResolutionGriddone &&
            this.FormViewerDetails.BasicDetails.IsOrderSetDrug
          ) {
            _IsDRCInprogress = true;
          }
          if (!_IsDRCInprogress) {
            this.FormViewerDetails.BasicDetails.isRuleexecuted = false;
            this.FormViewerDetails.BasicDetails.isConflictsgenerated = false;
            //this.FormViewerDetails.BasicDetails.EprescribingruleEvent -= this.EprescribingruleEvent;
          }
        } else {
          if (
            this.FormViewerDetails.BasicDetails.Ordersets != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.Ordersets.Value
            )
          ) {
            this.ParentbaseVM.IsMandatoryValuesFilled();
          }
        }
      }
    }
  }
  public showDeactivatedFields(objNewItemVM: PrescriptionItemVM): void {
    let deactivatedAttributes: string = String.Empty;
    if (
      objNewItemVM != null &&
      objNewItemVM.FormViewerDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      if (
        objNewItemVM.FormViewerDetails.BasicDetails
          .DeactivatedRouteCollection != null &&
        objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedRouteCollection
          .Count > 0
      ) {
        for (
          let i: number = 0;
          i <
          objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedRouteCollection
            .Count;
          i++
        ) {
          let lqRoute =
            objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
              (x) =>
                String.Equals(
                  x.Value,
                  objNewItemVM.FormViewerDetails.BasicDetails
                    .DeactivatedRouteCollection[i].Value
                )
            );
          if (lqRoute != null && lqRoute.Count() > 0) {
            if (String.IsNullOrEmpty(deactivatedAttributes)) {
              deactivatedAttributes = 'Route';
            } else {
              deactivatedAttributes += ',' + 'Route';
            }
            break;
          }
        }
        if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          (objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
            objNewItemVM.ActionCode == ActivityTypes.Amend) &&
          objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
          objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
          !String.IsNullOrEmpty(
            objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
          ) &&
          objNewItemVM.FormViewerDetails.BasicDetails
            .IsMultiRouteCheckedforAmend
        ) {
          let RouteOIDs: string[] =
            objNewItemVM.FormViewerDetails.BasicDetails.Route.Value.Split(',');
          if (RouteOIDs != null && RouteOIDs.length > 0) {
            for (
              let i: number = 0;
              i <
              objNewItemVM.FormViewerDetails.BasicDetails
                .DeactivatedRouteCollection.Count;
              i++
            ) {
              let lqRoute = RouteOIDs.Where((x) =>
                String.Equals(
                  x,
                  objNewItemVM.FormViewerDetails.BasicDetails
                    .DeactivatedRouteCollection[i].Value
                )
              );
              if (lqRoute != null && lqRoute.Count() > 0) {
                if (String.IsNullOrEmpty(deactivatedAttributes)) {
                  deactivatedAttributes = 'Route';
                } else if (
                  !String.IsNullOrEmpty(deactivatedAttributes) &&
                  !deactivatedAttributes.Contains('Route')
                ) {
                  deactivatedAttributes += ',' + 'Route';
                }
                break;
              }
            }
          }
        }
      }
      let isInfDrug: boolean = false;
      if (
        objNewItemVM != null &&
        objNewItemVM.formViewerDetails != null &&
        objNewItemVM.FormViewerDetails.BasicDetails != null &&
        objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
        objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
        String.Compare(
          objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
          '1'
        ) == 0 &&
        (String.IsNullOrEmpty(
          objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
        ) ||
          (!String.IsNullOrEmpty(
            objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
          ) &&
            String.Compare(
              objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
              'CC_MEDGAS'
            ) != 0))
      ) {
        isInfDrug = true;
      }
      if (isInfDrug) {
        if (
          this.CanshowBoosterMessage() &&
          !String.IsNullOrEmpty(
            objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .DeliveryDeviceFreetext
          )
        ) {
          if (
            objNewItemVM.FormViewerDetails.BasicDetails
              .DeactivatedBoosterUOMList != null &&
            !String.IsNullOrEmpty(
              objNewItemVM.FormViewerDetails.BasicDetails
                .DeactivatedBoosterUOMList.Value
            )
          ) {
            if (
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .Boosterdoseuom != null &&
              !String.IsNullOrEmpty(
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .Boosterdoseuom.DisplayText
              )
            ) {
              let lBooster =
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.BoosterDoseUOMList.Where(
                  (x) =>
                    String.Equals(
                      x.Value,
                      objNewItemVM.FormViewerDetails.BasicDetails
                        .DeactivatedBoosterUOMList.Value
                    )
                );
              if (lBooster != null && lBooster.Count() > 0) {
                if (String.IsNullOrEmpty(deactivatedAttributes)) {
                  deactivatedAttributes = 'Booster dose UOM';
                } else {
                  deactivatedAttributes += ',' + 'Booster dose UOM';
                }
              }
            }
          }
        }
      }
      if (
        objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedDoseUOMList !=
          null &&
        !String.IsNullOrEmpty(
          objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedDoseUOMList
            .Value
        )
      ) {
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM != null &&
          !String.IsNullOrEmpty(
            objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM.DisplayText
          )
        ) {
          if (
            objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Uoms !=
              null &&
            objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Uoms
              .Count > 0
          ) {
            let lSite =
              objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Where(
                (x) =>
                  String.Equals(
                    x.Value,
                    objNewItemVM.FormViewerDetails.BasicDetails
                      .DeactivatedDoseUOMList.Value
                  )
              );
            if (lSite != null && lSite.Count() > 0) {
              if (String.IsNullOrEmpty(deactivatedAttributes)) {
                deactivatedAttributes = 'Dose UOM';
              } else {
                deactivatedAttributes += ',' + 'Dose UOM';
              }
            }
          } else {
            if (String.IsNullOrEmpty(deactivatedAttributes)) {
              deactivatedAttributes = 'Dose UOM';
            } else {
              deactivatedAttributes += ',' + 'Dose UOM';
            }
          }
        }
      }
      if (
        !isInfDrug ||
        (!String.IsNullOrEmpty(
          objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
        ) &&
          String.Compare(
            objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
            DrugItemSubTypeCode.MULTI_COMPONENT
          ) == 0)
      ) {
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedFormList !=
            null &&
          !String.IsNullOrEmpty(
            objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedFormList
              .Value
          )
        ) {
          if (
            objNewItemVM.FormViewerDetails.BasicDetails.DosageForm != null &&
            !String.IsNullOrEmpty(
              objNewItemVM.FormViewerDetails.BasicDetails.DosageForm.DisplayText
            )
          ) {
            let lforms =
              objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Where(
                (x) =>
                  String.Equals(
                    x.Value,
                    objNewItemVM.FormViewerDetails.BasicDetails
                      .DeactivatedFormList.Value
                  )
              );
            if (lforms != null && lforms.Count() > 0) {
              if (String.IsNullOrEmpty(deactivatedAttributes)) {
                deactivatedAttributes = 'Dosage form';
              } else {
                deactivatedAttributes += ',' + 'Dosage form';
              }
            }
          }
        }
      }
      if (!isInfDrug) {
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedStrength !=
          null
        ) {
          if (String.IsNullOrEmpty(deactivatedAttributes)) {
            deactivatedAttributes = 'Strength';
          } else {
            deactivatedAttributes += ',' + 'Strength';
          }
        }
      }
      if (
        objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedSiteList !=
          null &&
        !String.IsNullOrEmpty(
          objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedSiteList.Value
        )
      ) {
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.Site != null &&
          !String.IsNullOrEmpty(
            objNewItemVM.FormViewerDetails.BasicDetails.Site.DisplayText
          )
        ) {
          let lSite =
            objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Sites.Where(
              (x) =>
                String.Equals(
                  x.Value,
                  objNewItemVM.FormViewerDetails.BasicDetails
                    .DeactivatedSiteList.Value
                )
            );
          if (lSite != null && lSite.Count() > 0) {
            if (String.IsNullOrEmpty(deactivatedAttributes)) {
              deactivatedAttributes = 'Site';
            } else {
              deactivatedAttributes += ',' + 'Site';
            }
          }
        }
      }
      if (
        objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedQuantityList !=
          null &&
        !String.IsNullOrEmpty(
          objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedQuantityList
            .Value
        )
      ) {
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOM != null &&
          !String.IsNullOrEmpty(
            objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOM.DisplayText
          )
        ) {
          let lSite =
            objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Where(
              (x) =>
                String.Equals(
                  x.Value,
                  objNewItemVM.FormViewerDetails.BasicDetails
                    .DeactivatedQuantityList.Value
                )
            );
          if (lSite != null && lSite.Count() > 0) {
            if (String.IsNullOrEmpty(deactivatedAttributes)) {
              deactivatedAttributes = 'Quantity UOM';
            } else {
              deactivatedAttributes += ',' + 'Quantity UOM';
            }
          }
        }
      }
      if (isInfDrug) {
        if (
          objNewItemVM.FormViewerDetails.BasicDetails
            .DeactivatedRateNumUOMList != null &&
          !String.IsNullOrEmpty(
            objNewItemVM.FormViewerDetails.BasicDetails
              .DeactivatedRateNumUOMList.Value
          )
        ) {
          if (
            objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom != null &&
            !String.IsNullOrEmpty(
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom.DisplayText
            ) &&
            String.Compare(
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom.DisplayText,
              InfusionVolume.ml
            ) != 0
          ) {
            let lNumerator =
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(
                (x) =>
                  String.Equals(
                    x.Value,
                    objNewItemVM.FormViewerDetails.BasicDetails
                      .DeactivatedRateNumUOMList.Value
                  )
              );
            if (lNumerator != null && lNumerator.Count() > 0) {
              if (String.IsNullOrEmpty(deactivatedAttributes)) {
                deactivatedAttributes = 'Infusion rate Numerator UOM';
              } else {
                deactivatedAttributes += ',' + 'Infusion rate Numerator UOM';
              }
            }
          }
        }
        if (this.IsPCA()) {
          if (
            objNewItemVM.FormViewerDetails.BasicDetails
              .DeactivatedBolusUOMList != null &&
            !String.IsNullOrEmpty(
              objNewItemVM.FormViewerDetails.BasicDetails
                .DeactivatedBolusUOMList.Value
            )
          ) {
            if (
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .BolusUOM != null &&
              !String.IsNullOrEmpty(
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .BolusUOM.DisplayText
              )
            ) {
              let lBolus =
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOMList.Where(
                  (x) =>
                    String.Equals(
                      x.Value,
                      objNewItemVM.FormViewerDetails.BasicDetails
                        .DeactivatedBolusUOMList.Value
                    )
                );
              if (lBolus != null && lBolus.Count() > 0) {
                if (String.IsNullOrEmpty(deactivatedAttributes)) {
                  deactivatedAttributes = 'Bolus UOM';
                } else {
                  deactivatedAttributes += ',' + 'Bolus UOM';
                }
              }
            }
          }
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM != null &&
        this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM.Count > 0
      ) {
        let mcdeactuom =
          this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM.GroupBy(
            (x) => x.Value
          ).Select((y) => y.First());
        mcdeactuom.forEach((oitem) => {
          if (
            this.FormViewerDetails.MulticomponentDetails != null &&
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo !=
              null &&
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
              .Count > 0
          ) {
            let icount: number =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
                .Count;
            for (let rcount: number = 0; rcount < icount; rcount++) {
              if (
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].MCUOMValue != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUOMValue.DisplayText
                ) &&
                oitem.Value != null &&
                String.Compare(
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUOMValue.Value,
                  oitem.Value
                ) == 0 &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].ComponentName
                ) &&
                oitem.Tag != null &&
                !String.IsNullOrEmpty(oitem.Tag.ToString()) &&
                String.Compare(
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].ComponentName,
                  oitem.Tag.ToString()
                ) == 0
              ) {
                let lQuantity =
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUOMCombo.Where((x) =>
                    String.Equals(x.Value, oitem.Value)
                  );
                if (lQuantity != null && lQuantity.Count() > 0) {
                  if (String.IsNullOrEmpty(deactivatedAttributes)) {
                    deactivatedAttributes =
                      this.FormViewerDetails.MulticomponentDetails
                        .oMCItemBasicInfo[rcount].ComponentName +
                      ':' +
                      'UOM';
                  } else {
                    deactivatedAttributes +=
                      ',' +
                      Environment.NewLine +
                      this.FormViewerDetails.MulticomponentDetails
                        .oMCItemBasicInfo[rcount].ComponentName +
                      ':' +
                      'UOM';
                  }
                }
              }
            }
          }
        });
      }
      let IsTitratedRouteFormPairMsgShown: boolean = false;
      if (
        !String.IsNullOrEmpty(deactivatedAttributes) &&
        !objNewItemVM.FormViewerDetails.BasicDetails.IsPromptDeactivatedMsg &&
        objNewItemVM.FormViewerDetails.BasicDetails.IsShowFormviwer
      ) {
        IsTitratedRouteFormPairMsgShown = true;
        objNewItemVM.FormViewerDetails.BasicDetails.IsPromptDeactivatedMsg =
          true;
        let oMsgBox: iMessageBox = new iMessageBox();
        oMsgBox.MessageBoxClose = (s, e) => {
          this.DeactivateAttributes_MessageBoxClose(s, e);
        };
        oMsgBox.Title = 'Lorenzo';
        oMsgBox.MessageButton = MessageBoxButton.OK;
        oMsgBox.IconType = MessageBoxType.Information;
        oMsgBox.Message =
          'The value entered for' +
          Environment.NewLine +
          deactivatedAttributes +
          ' ' +
          'is no longer valid. Enter another value.';
        oMsgBox.Show();
        if(objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked && String.Equals(deactivatedAttributes,"Route",StringComparison.InvariantCultureIgnoreCase))
        {
          Busyindicator.SetStatusIdle("Multiroute");
          Busyindicator.SetStatusBusy("Multiroute");
        }
      } else if (
        !objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
        objNewItemVM.ItemMainType != CConstants.Formulary_Appliance &&
        ((objNewItemVM.FormViewerDetails.BasicDetails.Route == null &&
          objNewItemVM.ActionCode == ActivityTypes.Reorder &&
          objNewItemVM.SourcePrescriptionType != PrescriptionTypes.Clerking &&
          !objNewItemVM.FormViewerDetails.BHasFormViewParams) ||
          (objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
            !String.IsNullOrEmpty(
              objNewItemVM.FormViewerDetails.BasicDetails.Route.DisplayText
            ) &&
            objNewItemVM.FormViewerDetails.BasicDetails.Route.DisplayText.Contains(
              '/'
            ) &&
            objNewItemVM.ActionCode == ActivityTypes.Amend))
      ) {
        IsTitratedRouteFormPairMsgShown = true;
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.AccessContraintControls ==
            null ||
          (objNewItemVM.FormViewerDetails.BasicDetails
            .AccessContraintControls != null &&
            !objNewItemVM.FormViewerDetails.BasicDetails.AccessContraintControls.Contains(
              'cboDosageForm'
            ))
        ) {
          objNewItemVM.FormViewerDetails.BasicDetails.IsenableDosage = true;
        }
        let oMsgBox: iMessageBox = new iMessageBox();
        oMsgBox.MessageBoxClose = (s, e) => {
          this.AccessConstraint_MessageBoxClose(s, e);
        };
        oMsgBox.Title = 'Lorenzo';
        oMsgBox.MessageButton = MessageBoxButton.OK;
        oMsgBox.IconType = MessageBoxType.Information;
        oMsgBox.Message = Resource.Infusion.MultiRouteChanged_Msg;
        oMsgBox.Show();
      }
      //Not Required for LHS. To be Re-Visited.
      else if (objNewItemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist && objNewItemVM.IsFormViewerDisable == false) {
          objNewItemVM.LaunchMCBrandConstraint();
      }
      if (!IsTitratedRouteFormPairMsgShown) {
        this.TitratedRouteFormPairMsg();
      }
    }
  }
  AccessConstraint_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    this.FormViewerDetails.BasicDetails.InfusionType = null;
    this.FormViewerDetails.BasicDetails.Route = null;
    this.TitratedRouteFormPairMsg();
  }
  DeactivateAttributes_MessageBoxClose(
    sender: Object,
    e: MessageEventArgs
  ): void {
    let sFocus: string = String.Empty;
    let bInfusionDrug: boolean = this.isInfusionDrug();
    if (
      this != null &&
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      if (
        this.FormViewerDetails.BasicDetails.DeactivatedRouteCollection !=
          null &&
        this.FormViewerDetails.BasicDetails.DeactivatedRouteCollection.Count > 0
      ) {
        if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          (this.ActionCode == ActivityTypes.Prescribe ||
            this.ActionCode == ActivityTypes.Amend) &&
          this.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
          this.FormViewerDetails.BasicDetails.Route != null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.Route.Value
          ) &&
          this.FormViewerDetails.BasicDetails.IsMultiRouteCheckedforAmend
        ) {
          let RouteOIDs: string[] =
            this.FormViewerDetails.BasicDetails.Route.Value.Split(',');
          if (
            RouteOIDs != null &&
            RouteOIDs.length > 0 &&
            this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes !=
              null &&
            this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes
              .Count > 0
          ) {
            for (
              let i: number = 0;
              i <
              this.FormViewerDetails.BasicDetails.DeactivatedRouteCollection
                .Count;
              i++
            ) {
              let lqRoute =
                this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes.Where(
                  (x) =>
                    String.Equals(
                      x.Value,
                      this.FormViewerDetails.BasicDetails
                        .DeactivatedRouteCollection[i].Value
                    )
                );
              if (lqRoute != null && lqRoute.Count() > 0) {
                lqRoute.First().IsSelected = false;
                this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Remove(
                  lqRoute.First()
                );
                this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes.Remove(
                  lqRoute.First()
                );
                this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoute2.Remove(
                  lqRoute.First()
                );
                sFocus = 'cboRoute';
              }
            }
            if (
              this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes !=
                null &&
              this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes
                .Count > 0
            ) {
              let selectedrouteClistitem: CListItem[] =
                this.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes.Where(
                  (cl) => cl.IsSelected == true
                ).ToArray();
              if (selectedrouteClistitem.Count() > 1) {
                this.FormViewerDetails.BasicDetails.Route = new CListItem();
                this.FormViewerDetails.BasicDetails.Route.DisplayText =
                  MedicationCommonBB.RouteName(selectedrouteClistitem);
                this.FormViewerDetails.BasicDetails.Route.Value =
                  MedicationCommonBB.RouteOID(selectedrouteClistitem);
                  this.FormViewerDetails.BasicDetails.Route.Tag = 
                  MedicationCommonBB.RouteTag(selectedrouteClistitem);
              } else {
                this.FormViewerDetails.BasicDetails.Route =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: MedicationCommonBB.RouteName(
                      selectedrouteClistitem
                    ),
                    Value: MedicationCommonBB.RouteOID(selectedrouteClistitem),
                  });
              }
            }
          }
        } else {
          for (
            let i: number = 0;
            i <
            this.FormViewerDetails.BasicDetails.DeactivatedRouteCollection
              .Count;
            i++
          ) {
            let lqRoute =
              this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
                (x) =>
                  String.Equals(
                    x.Value,
                    this.FormViewerDetails.BasicDetails
                      .DeactivatedRouteCollection[i].Value
                  )
              );
            if (lqRoute != null && lqRoute.Count() > 0) {
              this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Remove(
                lqRoute.First()
              );
              sFocus = 'cboRoute';
            }
          }
          let selectedrouteClistitem: CListItem[] =
            this.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
              (cl) => cl.IsSelected == true
            ).ToArray();
          if (selectedrouteClistitem.Count() > 1) {
            this.FormViewerDetails.BasicDetails.Route = new CListItem();
            this.FormViewerDetails.BasicDetails.Route.DisplayText =
              MedicationCommonBB.RouteName(selectedrouteClistitem);
            this.FormViewerDetails.BasicDetails.Route.Value =
              MedicationCommonBB.RouteOID(selectedrouteClistitem);
          } else {
            this.FormViewerDetails.BasicDetails.Route = null;
              // ObjectHelper.CreateObject(new CListItem(), {
              //   DisplayText: MedicationCommonBB.RouteName(
              //     selectedrouteClistitem
              //   ),
              //   Value: MedicationCommonBB.RouteOID(selectedrouteClistitem),
              // });
          }
        }
      }
      this.FormViewerDetails.BasicDetails.DynamicControlEndInstallLoaded.emit(true);
      if (this.CanshowBoosterMessage()) {
        if (
          this.FormViewerDetails.BasicDetails.DeactivatedBoosterUOMList !=
            null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DeactivatedBoosterUOMList.Value
          )
        ) {
          let lBooster =
            this.FormViewerDetails.BasicDetails.InfusionDetails.BoosterDoseUOMList.Where(
              (x) =>
                String.Equals(
                  x.Value,
                  this.FormViewerDetails.BasicDetails.DeactivatedBoosterUOMList
                    .Value
                )
            );
          if (lBooster != null && lBooster.Count() > 0) {
            this.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom =
              null;
            this.FormViewerDetails.BasicDetails.InfusionDetails.BoosterDoseUOMList.Remove(
              lBooster.First()
            );
            if (String.IsNullOrEmpty(sFocus)) sFocus = 'cboBoosterUOM';
          }
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.DeactivatedDoseUOMList != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DeactivatedDoseUOMList.Value
        )
      ) {
        let lforms =
          this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Where((x) =>
            String.Equals(
              x.Value,
              this.FormViewerDetails.BasicDetails.DeactivatedDoseUOMList.Value
            )
          );
        if (lforms != null && lforms.Count() > 0) {
          this.FormViewerDetails.BasicDetails.DoseUOM = null;
          this.FormViewerDetails.BasicDetails.DefaultDetails.Uoms.Remove(
            lforms.First()
          );
          if (String.IsNullOrEmpty(sFocus)) sFocus = 'cboUOM';
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.DeactivatedFormList != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DeactivatedFormList.Value
        )
      ) {
        let lforms =
          this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Where((x) =>
            String.Equals(
              x.Value,
              this.FormViewerDetails.BasicDetails.DeactivatedFormList.Value
            )
          );
        if (lforms != null && lforms.Count() > 0) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Forms.Remove(
            lforms.First()
          );
          if (String.IsNullOrEmpty(sFocus)) sFocus = 'cboDosageForm';
        }
      }
      if (
        this.formViewerDetails.BasicDetails.DeactivatedStrength != null &&
        !String.IsNullOrEmpty(
          this.formViewerDetails.BasicDetails.DeactivatedStrength.Value
        )
      ) {
        let lstrength =
          this.FormViewerDetails.BasicDetails.DefaultDetails.Strengths.Where(
            (x) =>
              String.Equals(
                x.Value,
                this.formViewerDetails.BasicDetails.DeactivatedStrength.Value
              )
          );
        if (lstrength != null && lstrength.Count() > 0) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Strengths.Remove(
            this.formViewerDetails.BasicDetails.DeactivatedStrength
          );
          if (String.IsNullOrEmpty(sFocus)) sFocus = 'cboStrength';
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.DeactivatedSiteList != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DeactivatedSiteList.Value
        )
      ) {
        let lSites =
          this.FormViewerDetails.BasicDetails.DefaultDetails.Sites.Where((x) =>
            String.Equals(
              x.Value,
              this.FormViewerDetails.BasicDetails.DeactivatedSiteList.Value
            )
          );
        if (lSites != null && lSites.Count() > 0) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Sites.Remove(
            lSites.First()
          );
          this.FormViewerDetails.BasicDetails.SiteFreeText = String.Empty;
          if (String.IsNullOrEmpty(sFocus)) sFocus = 'cboSite';
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.DeactivatedQuantityList != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DeactivatedQuantityList.Value
        )
      ) {
        let lforms =
          this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Where(
            (x) =>
              String.Equals(
                x.Value,
                this.FormViewerDetails.BasicDetails.DeactivatedQuantityList
                  .Value
              )
          );
        if (lforms != null && lforms.Count() > 0) {
          this.FormViewerDetails.BasicDetails.DefaultDetails.Quantitys.Remove(
            lforms.First()
          );
          if (String.IsNullOrEmpty(sFocus)) sFocus = 'cboQuantity';
        }
      }
      if (bInfusionDrug) {
        if (
          this.FormViewerDetails.BasicDetails.DeactivatedRateNumUOMList !=
            null &&
          !String.IsNullOrEmpty(
            this.FormViewerDetails.BasicDetails.DeactivatedRateNumUOMList.Value
          )
        ) {
          if (
            this.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom != null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom.DisplayText
            ) &&
            String.Compare(
              this.FormViewerDetails.BasicDetails.InfusionDetails
                .InfRateNumeratorUom.DisplayText,
              InfusionVolume.ml
            ) != 0
          ) {
            let lRateNumerator =
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Where(
                (x) =>
                  String.Equals(
                    x.Value,
                    this.FormViewerDetails.BasicDetails
                      .DeactivatedRateNumUOMList.Value
                  )
              );
            if (lRateNumerator != null && lRateNumerator.Count() > 0) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUOM.Remove(
                lRateNumerator.First()
              );
              if (String.IsNullOrEmpty(sFocus)) sFocus = 'cboInfustionRateUOM';
              let IsInfusionRateSameProperty: boolean = false;
              if (
                PatientContext.IsINFUSIONON &&
                this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                this.FormViewerDetails.BasicDetails.InfusionType != null &&
                !String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.CONTINUOUS
                ) &&
                !String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME
                ) &&
                !String.Equals(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.FLUID
                )
              ) {
                IsInfusionRateSameProperty = true;
              }
              if (
                PatientContext.IsINFUSIONON &&
                PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
                this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                this.FormViewerDetails.BasicDetails.InfusionType != null &&
                (String.Compare(
                  this.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.CONTINUOUS
                ) == 0 ||
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.SINGLEDOSEVOLUME
                  ) == 0 ||
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.FLUID
                  ) == 0 ||
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.PCA
                  ) == 0 ||
                  String.Compare(
                    this.FormViewerDetails.BasicDetails.InfusionType.Value,
                    InfusionTypesCode.INTERMITTENT
                  ) == 0)
              ) {
                IsInfusionRateSameProperty = false;
              }
              if (this.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                if (IsInfusionRateSameProperty) {
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRate =
                    true;
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionRateforLabel =
                    true;
                } else
                  this.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom =
                    true;
              }
            }
          }
        }
        if (this.IsPCA()) {
          if (
            this.FormViewerDetails.BasicDetails.DeactivatedBolusUOMList !=
              null &&
            !String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.DeactivatedBolusUOMList.Value
            )
          ) {
            let lBolus =
              this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOMList.Where(
                (x) =>
                  String.Equals(
                    x.Value,
                    this.FormViewerDetails.BasicDetails.DeactivatedBolusUOMList
                      .Value
                  )
              );
            if (lBolus != null && lBolus.Count() > 0) {
              this.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOMList.Remove(
                lBolus.First()
              );
              if (String.IsNullOrEmpty(sFocus)) sFocus = 'cboBolusUOM';
            }
          }
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM != null &&
        this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM.Count > 0
      ) {
        for (
          let i: number = 0;
          i < this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM.Count;
          i++
        ) {
          if (
            this.FormViewerDetails.MulticomponentDetails != null &&
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo !=
              null &&
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
              .Count > 0
          ) {
            let icount: number =
              this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
                .Count;
            for (let rcount: number = 0; rcount < icount; rcount++) {
              if (
                this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  rcount
                ].MCUOMValue != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUOMValue.DisplayText
                ) &&
                this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM[i]
                  .Value != null &&
                String.Compare(
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUOMValue.Value,
                  this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM[i]
                    .Value
                ) == 0 &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].ComponentName
                ) &&
                this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM[i]
                  .Tag != null &&
                !String.IsNullOrEmpty(
                  this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM[
                    i
                  ].Tag.ToString()
                ) &&
                String.Compare(
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].ComponentName,
                  this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM[
                    i
                  ].Tag.ToString()
                ) == 0
              ) {
                let lQuantity =
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUOMCombo.Where((x) =>
                    String.Equals(
                      x.Value,
                      this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM[
                        i
                      ].Value
                    )
                  );
                if (lQuantity != null && lQuantity.Count() > 0) {
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUOMCombo.Remove(lQuantity.First());
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUomName = String.Empty;
                  this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    rcount
                  ].MCUOMValue = null;
                }
              }
            }
          }
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.DeactivatedRouteCollection != null
      )
        this.FormViewerDetails.BasicDetails.DeactivatedRouteCollection = null;
      if (this.FormViewerDetails.BasicDetails.DeactivatedDoseUOMList != null)
        this.FormViewerDetails.BasicDetails.DeactivatedDoseUOMList = null;
      if (this.FormViewerDetails.BasicDetails.DeactivatedFormList != null)
        this.FormViewerDetails.BasicDetails.DeactivatedFormList = null;
      if (this.FormViewerDetails.BasicDetails.DeactivatedSiteList != null)
        this.FormViewerDetails.BasicDetails.DeactivatedSiteList = null;
      if (this.FormViewerDetails.BasicDetails.DeactivatedQuantityList != null)
        this.FormViewerDetails.BasicDetails.DeactivatedQuantityList = null;
      if (this.FormViewerDetails.BasicDetails.DeactivatedRateNumUOMList != null)
        this.FormViewerDetails.BasicDetails.DeactivatedRateNumUOMList = null;
      if (this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM != null)
        this.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM = null;
      if (this.IsDeactivateCtrlFocusChangedEvent != null)
        this.IsDeactivateCtrlFocusChangedEvent(sFocus);
      //Not Required for LHS. To be Re-Visited.
      if (this.FormViewerDetails.BasicDetails.IsMCiUptoProdexist) {
          this.LaunchMCBrandConstraint();
      }
    }
    this.TitratedRouteFormPairMsg();
  }
  private TitratedRouteFormPairMsg(): void {
    if (
      this.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
        Visibility.Visible &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.TITRATED
      ) == 0 &&
      this.FormViewerDetails.BasicDetails.Route != null &&
      this.FormViewerDetails.BasicDetails.Route.DisplayText != null &&
      this.FormViewerDetails.BasicDetails.DosageForm != null &&
      this.FormViewerDetails.BasicDetails.DosageForm.DisplayText != null
    ) {
      this.FormViewerDetails.BasicDetails.RemoveTitratedDoseType(true);
      let oMsgBox: iMessageBox = new iMessageBox();
      oMsgBox.Title = 'Lorenzo';
      oMsgBox.MessageButton = MessageBoxButton.OK;
      oMsgBox.IconType = MessageBoxType.Critical;
      oMsgBox.Message =
        'The titrated dose type is not applicable for the selected route-form pair';
      oMsgBox.Show();
    }
  }
  public isInfusionDrug(): boolean {
    let isInfDrug: boolean = false;
    if (
      this != null &&
      this.formViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.BasicDetails.Route != null &&
      this.FormViewerDetails.BasicDetails.Route.Tag != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
        '1'
      ) == 0 &&
      (String.IsNullOrEmpty(this.FormViewerDetails.BasicDetails.itemSubType) ||
        (!String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.itemSubType
        ) &&
          String.Compare(
            this.FormViewerDetails.BasicDetails.itemSubType,
            'CC_MEDGAS'
          ) != 0))
    ) {
      isInfDrug = true;
    }
    return isInfDrug;
  }
  public CanshowBoosterMessage(): boolean {
    let bFormBoosterMessage: boolean = false;
    if (
      PatientContext.IsINFUSIONON &&
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      (String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.CONTINUOUS
      ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.FLUID
        ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.PCA
        ) == 0 ||
        String.Compare(
          this.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT
        ) == 0)
    ) {
      bFormBoosterMessage = true;
    }
    return bFormBoosterMessage;
  }
  public IsPCA(): boolean {
    let bFormBolusMessage: boolean = false;
    if (
      PatientContext.IsINFUSIONON &&
      this.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      this.FormViewerDetails.BasicDetails.InfusionType != null &&
      String.Compare(
        this.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.PCA
      ) == 0
    ) {
      bFormBolusMessage = true;
    }
    return bFormBolusMessage;
  }

  public CalculateEndDTTM(
    _StartDTTM: DateTime,
    _Duration: IPPMAManagePrescSer.MeasurableObject | number,
    _DurationUOMCode: string,
    oMultipleDoseDetail?: MultipleDoseDetail
  ): DateTime {
    if (_Duration instanceof IPPMAManagePrescSer.MeasurableObject) {
      return this.CalculateEndDTTM0(
        _StartDTTM,
        <IPPMAManagePrescSer.MeasurableObject>_Duration,
        _DurationUOMCode
      );
    } else {
      return this.CalculateEndDTTM1(
        _StartDTTM,
        <number>_Duration,
        _DurationUOMCode,
        <MultipleDoseDetail>oMultipleDoseDetail
      );
    }
  }

  private CalculateEndDTTM0(
    _StartDTTM: DateTime,
    _Duration: IPPMAManagePrescSer.MeasurableObject,
    _DurationUOMCode: string
  ): DateTime {
    let _EndDTTM: DateTime = DateTime.MinValue;
    if (
      DateTime.NotEquals(_StartDTTM, DateTime.MinValue) &&
      _Duration != null &&
      _Duration.Value > 0 &&
      !String.IsNullOrEmpty(_DurationUOMCode)
    ) {
      switch (_DurationUOMCode) {
        case 'CC_MINUTES':
          _EndDTTM = _StartDTTM.AddMinutes(_Duration.Value).AddMinutes(-1);
          break;
        case 'CC_HOURS':
          _EndDTTM = _StartDTTM.AddHours(_Duration.Value).AddMinutes(-1);
          break;
        case 'CC_MEDDRSN1':
          if (
            String.Equals(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.VARIABLE,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            let StartDTTM: DateTime = DateTime.MinValue;
            let StopDTTM: DateTime = DateTime.MinValue;
            MCommonBB.CalculateEndDTTMForDaysDuration(
              null,
              _StartDTTM,
              DateTime.MinValue,
              false,
              Convert.ToInt32(_Duration.Value),
              (o1) => {
                StartDTTM = o1;
              },
              (o2) => {
                StopDTTM = o2;
              }
            );
            _EndDTTM = StopDTTM;
          } else {
            _EndDTTM = _StartDTTM.AddDays(_Duration.Value).AddMinutes(-1);
          }
          break;
        case 'CC_MEDDRSN2':
          _EndDTTM = _StartDTTM.AddDays(_Duration.Value * 7).AddMinutes(-1);
          break;
        case 'CC_MEDRSN3':
          _EndDTTM = _StartDTTM
            .AddMonths(Convert.ToInt32(_Duration.Value))
            .AddMinutes(-1);
          break;
        case 'CC_MEDRSN4':
          _EndDTTM = _StartDTTM
            .AddYears(Convert.ToInt32(_Duration.Value))
            .AddMinutes(-1);
          break;
      }
    }
    return _EndDTTM;
  }
  private CalculateEndDTTM1(
    _StartDTTM: DateTime,
    _Duration: number,
    _DurationUOMCode: string,
    oMultipleDoseDetail: MultipleDoseDetail
  ): DateTime {
    let _EndDTTM: DateTime = DateTime.MinValue;
    if (
      DateTime.NotEquals(_StartDTTM, DateTime.MinValue) &&
      _Duration != null &&
      _Duration > 0 &&
      !String.IsNullOrEmpty(_DurationUOMCode)
    ) {
      switch (_DurationUOMCode) {
        case 'CC_MINUTES':
          _EndDTTM = _StartDTTM.AddMinutes(_Duration).AddMinutes(-1);
          break;
        case 'CC_HOURS':
          _EndDTTM = _StartDTTM.AddHours(_Duration).AddMinutes(-1);
          break;
        case 'CC_MEDDRSN1':
          if (
            String.Equals(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.VARIABLE,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              this.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            let StartDTTM: DateTime = DateTime.MinValue;
            let StopDTTM: DateTime = DateTime.MinValue;
            MCommonBB.CalculateEndDTTMForDaysDuration(
              oMultipleDoseDetail.AdminTimesData,
              _StartDTTM,
              DateTime.MinValue,
              oMultipleDoseDetail.IsfixedTime,
              Convert.ToInt32(_Duration),
              (o1) => {
                StartDTTM = o1;
              },
              (o2) => {
                StopDTTM = o2;
              }
            );
            _EndDTTM = StopDTTM;
          } else {
            _EndDTTM = _StartDTTM.AddDays(_Duration).AddMinutes(-1);
          }
          break;
        case 'CC_MEDDRSN2':
          _EndDTTM = _StartDTTM.AddDays(_Duration * 7).AddMinutes(-1);
          break;
        case 'CC_MEDRSN3':
          _EndDTTM = _StartDTTM
            .AddMonths(Convert.ToInt32(_Duration))
            .AddMinutes(-1);
          break;
        case 'CC_MEDRSN4':
          _EndDTTM = _StartDTTM
            .AddYears(Convert.ToInt32(_Duration))
            .AddMinutes(-1);
          break;
        case 'CC_DOSES':
          _EndDTTM = PrescriptionHelper.EndDTTMforDurationDose(
            oMultipleDoseDetail,
            null
          );
          break;
      }
    }
    return _EndDTTM;
  }
  public FillPresItemProcDetail(): void {
    let oBasicDetailsVM: BasicDetailsVM = this.FormViewerDetails.BasicDetails;
    oBasicDetailsVM.AccessContraintControls = new List<string>();
    if (oBasicDetailsVM.oIndiactionProcessDetails == null)
      oBasicDetailsVM.oIndiactionProcessDetails =
        new IndiactionProcessDetails();
    if (
      oBasicDetailsVM.Route != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.Route.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboRoute');
    }
    if (
      oBasicDetailsVM.DoseType != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.DoseType.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboDoseType');
      if (
        String.Compare(oBasicDetailsVM.DoseType.Value, 'CC_MEDDOSE4') == 0 ||
        String.Compare(oBasicDetailsVM.DoseType.Value, DoseTypeCode.TITRATED) ==
          0
      ) {
        if (
          !String.IsNullOrEmpty(oBasicDetailsVM.Dose) &&
          oBasicDetailsVM.DoseUOM != null &&
          !String.IsNullOrEmpty(oBasicDetailsVM.DoseUOM.Value)
        ) {
          oBasicDetailsVM.AccessContraintControls.Add('Dose');
        }
      } else if (
        String.Compare(oBasicDetailsVM.DoseType.Value, 'MEDDOSE17') == 0
      ) {
        if (
          !String.IsNullOrEmpty(oBasicDetailsVM.Dose) &&
          !String.IsNullOrEmpty(oBasicDetailsVM.UpperDose) &&
          oBasicDetailsVM.DoseUOM != null &&
          !String.IsNullOrEmpty(oBasicDetailsVM.DoseUOM.Value)
        ) {
          oBasicDetailsVM.AccessContraintControls.Add('Dose');
        }
      }
    }
    if (
      oBasicDetailsVM.DoseUOM != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.DoseUOM.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboUOM');
    }
    if (
      oBasicDetailsVM.DosageForm != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.DosageForm.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboDosageForm');
      oBasicDetailsVM.oIndiactionProcessDetails.DosageForm =
        ObjectHelper.CreateObject(new CListItem(), {
          Value: oBasicDetailsVM.DosageForm.Value,
          DisplayText: oBasicDetailsVM.DosageForm.DisplayText,
          Tag: oBasicDetailsVM.DosageForm.Tag,
        });
    }
    if (
      oBasicDetailsVM.Frequency != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.Frequency.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboFrequency');
      oBasicDetailsVM.oIndiactionProcessDetails.Frequency =
        ObjectHelper.CreateObject(new CListItem(), {
          Value: oBasicDetailsVM.Frequency.Value,
          DisplayText: oBasicDetailsVM.Frequency.DisplayText,
          Tag: oBasicDetailsVM.Frequency.Tag,
        });
    }
    if (
      oBasicDetailsVM.AdditionalComments != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.AdditionalComments)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('txtAddComments');
    }
    if (
      oBasicDetailsVM.ProblemIndication != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.ProblemIndication)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('txtProblem');
    }
    if (
      oBasicDetailsVM.StationaryType != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.StationaryType.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboStatType');
    }
    if (!String.IsNullOrEmpty(oBasicDetailsVM.SupplyInsVal)) {
      oBasicDetailsVM.AccessContraintControls.Add('cboSupplyInstruction');
    }
    if (
      oBasicDetailsVM.TreatmentToContinue != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.TreatmentToContinue.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboTreatToCon');
    }
    if (!String.IsNullOrEmpty(oBasicDetailsVM.Quantity)) {
      oBasicDetailsVM.AccessContraintControls.Add('txtQuantity');
    }
    if (
      oBasicDetailsVM.QuantityUOM != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.QuantityUOM.Value) &&
      !String.IsNullOrEmpty(oBasicDetailsVM.Quantity)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboQuantity');
    }
    if (
      oBasicDetailsVM.PRNInstruction != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.PRNInstruction.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboPRNInstruction');
    }
    if (
      oBasicDetailsVM.Strength != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.Strength.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboStrength');
    }
    if (
      oBasicDetailsVM.InstalmentInstructions != null &&
      oBasicDetailsVM.InstalmentInstructions.Count > 0 &&
      !String.IsNullOrEmpty(oBasicDetailsVM.InstalmentInstructions[0].Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboInstalIns');
    }
    if (
      ObjectHelper.HasValue(oBasicDetailsVM.IntervalBetweenInstallment) &&
      oBasicDetailsVM.IntervalBetweenInstallment.Value > 0
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('udnIntervalInst');
    }
    if (
      oBasicDetailsVM.IntervalBetweenInstallmentUOM != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.IntervalBetweenInstallmentUOM.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboIntervalInst');
    }
    if (
      ObjectHelper.HasValue(oBasicDetailsVM.NoOfInstallments) &&
      oBasicDetailsVM.NoOfInstallments.Value > 0
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('udnNumberofIns');
    }
    if (
      oBasicDetailsVM.Site != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.Site.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboSite');
    }
    if (oBasicDetailsVM.AdminMethod != null) {
      oBasicDetailsVM.AccessContraintControls.Add('cboAdminMethod');
    }
    if (
      oBasicDetailsVM.InfusionType != null &&
      !String.IsNullOrEmpty(oBasicDetailsVM.InfusionType.Value)
    ) {
      oBasicDetailsVM.AccessContraintControls.Add('cboInfusion');
    }
    if (oBasicDetailsVM.InfusionDetails != null) {
      if (
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.DeliveryDeviceFreetext
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboDeliveryDevice');
      }
      if (!String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.Boosterdose)) {
        oBasicDetailsVM.AccessContraintControls.Add('txtBoosterDose');
      }
      if (
        oBasicDetailsVM.InfusionDetails.Boosterdoseuom != null &&
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.Boosterdoseuom.Value
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboBoosterUOM');
      }
      if (
        !String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.MonitoringPeriod)
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('txtMonitoringdevice');
      }
      if (
        oBasicDetailsVM.InfusionDetails.MonitoringPeriodUOM != null &&
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.MonitoringPeriodUOM.Value
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboMonitoringdeviceUOM');
      }
      if (
        oBasicDetailsVM.InfusionDetails != null &&
        !String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.FluidFreetext)
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboFluid');
      }
      if (!String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.FluidVolume)) {
        oBasicDetailsVM.AccessContraintControls.Add('txtVolume');
      }
      if (
        oBasicDetailsVM.InfusionDetails.VolumeUOM != null &&
        !String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.VolumeUOM.Value)
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboVolumeUOM');
      }
      if (
        !String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.InfusionPeriod)
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('txtInfusionperiod');
      }
      if (
        oBasicDetailsVM.InfusionDetails.InfusionPeriodUom != null &&
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.InfusionPeriodUom.Value
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboinfustionPeriodUOM');
      }
      if (!String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.Rate)) {
        oBasicDetailsVM.AccessContraintControls.Add('txtInfusionRate');
        oBasicDetailsVM.AccessContraintControls.Add('txtFlowRate');
      }
      if (!String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.UpperRate)) {
        oBasicDetailsVM.AccessContraintControls.Add('txtUpperInfusionRate');
      }
      if (
        oBasicDetailsVM.InfusionDetails.InfRateNumeratorUom != null &&
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.InfRateNumeratorUom.Value
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboInfustionRateUOM');
        oBasicDetailsVM.AccessContraintControls.Add('cboUOMFlowrate');
      }
      if (
        oBasicDetailsVM.InfusionDetails.InfRateDinominatorUom != null &&
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.InfRateDinominatorUom.Value
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboInfusionRateUOM');
        oBasicDetailsVM.AccessContraintControls.Add('cboUOMFlowrate1');
      }
      if (!String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.Lumen)) {
        oBasicDetailsVM.AccessContraintControls.Add('txtLumen');
      }
      if (!String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.Bolus)) {
        oBasicDetailsVM.AccessContraintControls.Add('txtBolus');
      }
      if (
        oBasicDetailsVM.InfusionDetails.BolusUOM != null &&
        !String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.BolusUOM.Value) &&
        !String.Equals(
          oBasicDetailsVM.InfusionDetails.BolusUOM.Value,
          '0',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboBolusUOM');
      }
      if (
        !String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.LockOutPeriod)
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('txtLockoutPeriod');
      }
      if (
        oBasicDetailsVM.InfusionDetails.LockoutDuration != null &&
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.LockoutDuration.Value
        ) &&
        !String.Equals(
          oBasicDetailsVM.InfusionDetails.LockoutDuration.Value,
          '0',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('cboLockoutPeriodUOM');
      }
      if (!String.IsNullOrEmpty(oBasicDetailsVM.InfusionDetails.MaxDose)) {
        oBasicDetailsVM.AccessContraintControls.Add('txtMaxDose');
      }
      if (
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.TargetLowerSatRange
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('txtsaturationrange1');
      }
      if (
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.TargetUpperSatRange
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('txtsaturationrange2');
      }
      if (
        !String.IsNullOrEmpty(
          oBasicDetailsVM.InfusionDetails.DeliveryDeviceFreetext
        )
      ) {
        oBasicDetailsVM.AccessContraintControls.Add('txtDeliverydevice');
      }
    }
  }
  private DisposeVMObjects(): void {
    this.objMsgBox = null;
    this.objMulti = null;
    this.UnHoldEvent = null;
    this.HoldEvent = null;
    this.UnHoldCompletedEvent = null;
    this.CancelDiscontinueRebindDelegateEvent = null;
    this.OnFormViewerControlFocus = null;
    this.SteppedCloseEvent = null;
    this.oClearBrand = null;
    this.oClearProduct = null;
    this.oSequentialsfsLink = null;
    this.oBtnFluidsfsClick = null;
    this.oAddSequentialLink = null;
    this.oBtnInfusionrateClick = null;
    this.oBtnDriprateClick = null;
    this.oGridAdd = null;
    this.oBtnDCCalcClick = null;
    this.OnSelectedMciPresItmChldChanged = null;
    this.IsSupplyRequestedChangedEvent = null;
    this.OnFormViewerControlFocus = null;
    this.RegenerateConflictsForBrandEvent = null;
    this.RegenerateConflictsFluidItemEvent = null;
    this.RegenerateConflictsForAdhocMCIEventEvent = null;
    this.SteppedCloseEvent = null;
    this.oClearSequence = null;
  }
  private DisposeVMEvents(): void {
    //         if(this.FormViewerDetails != null && this.FormViewerDetails.BasicDetails != null)
    //  {
    //    // this.FormViewerDetails.BasicDetails.ClinicallyVerified -= this.BasicDetails_ClinicallyVerified;
    //     //this.FormViewerDetails.BasicDetails.ClinicallyAuthorised -= this.BasicDetails_ClinicallyVerified;
    // }
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.TechValidateDetails != null
    ) {
      this.formViewerDetails.TechValidateDetails.DoCleanUP();
    }
    // if (this.oSchedule != null)
    //     //this.oSchedule.FixedSchDTTMChanged -= this.oSchedule_FixedSchDTTMChanged;
    // if (this.oAdminTimesVM != null)
    //     //this.oAdminTimesVM.AdminstrativeTimesCompleted -= this.FillAdminTimesForExisitngDoseCompleted;
  }

  public DoCleanUP(): void {
    this.DisposeVMEvents();
    this.DisposeVMObjects();
  }
  public FillHumidification(lstCListItem: List<CListItem>): void {
    if (lstCListItem != null && lstCListItem.Count > 0) {
      this.FormViewerDetails.BasicDetails.InfusionDetails.HumidificationList =
        new ObservableCollection<CListItem>();
      lstCListItem.forEach((oCListItem) => {
        this.FormViewerDetails.BasicDetails.InfusionDetails.HumidificationList.Add(
          oCListItem
        );
      });
    }
  }
  public IsNextSeqSlotExists(
    InfusionContinousSeq: InfContinousSequentail,
    objNewItemVM: PrescriptionItemVM,
    out1: (PreviousStartDTTM: DateTime) => void,
    out2: (PreviousStartPrescriptionTime: DateTime) => void
  ): boolean {
    let PreviousStartDTTM: DateTime = DateTime.MinValue;
    let PreviousStartPrescriptionTime: DateTime = DateTime.MinValue;
    PreviousStartDTTM = DateTime.MinValue;
    PreviousStartPrescriptionTime = DateTime.MinValue;
    let isNextScheduleExists: boolean = false;
    if (
      objNewItemVM != null &&
      objNewItemVM.FormViewerDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails != null &&
      objNewItemVM.ActionCode == ActivityTypes.Amend &&
      DateTime.NotEquals(objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue)
    ) {
      isNextScheduleExists = true;
      PreviousStartDTTM = objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
      PreviousStartPrescriptionTime =
        objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
    } else {
      if (
        objNewItemVM != null &&
        this.ParentbaseVM != null &&
        this.ParentbaseVM.MedsResolve != null
      ) {
        let oSequentialItems: IEnumerable<PrescriptionItemVM> = null;
        if (
          InfusionContinousSeq != null &&
          InfusionContinousSeq.PrescriptionItemNumber > 0
        ) {
          oSequentialItems = this.ParentbaseVM.MedsResolve.Where(
            (s) =>
              s.FormViewerDetails != null &&
              s.FormViewerDetails.BasicDetails != null &&
              s.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              (s.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber ==
                InfusionContinousSeq.PrescriptionItemNumber ||
                s.FormViewerDetails.BasicDetails.InfusionDetails
                  .ParentPrescriptionItemOID ==
                  InfusionContinousSeq.PrescriptionItemNumber) &&
              s.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder > 0 &&
              s.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder < InfusionContinousSeq.SequentialItemOrder
          );
          if (
            oSequentialItems != null &&
            oSequentialItems.Count() == 0 &&
            objNewItemVM.FormViewerDetails != null &&
            objNewItemVM.FormViewerDetails.BasicDetails != null &&
            objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber > 0
          )
            oSequentialItems = this.ParentbaseVM.MedsResolve.Where(
              (s) =>
                s.FormViewerDetails != null &&
                s.FormViewerDetails.BasicDetails != null &&
                s.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                (s.FormViewerDetails.BasicDetails.InfusionDetails
                  .ParentPrescriptionItemOID ==
                  objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .PrescriptionItemNumber ||
                  s.FormViewerDetails.BasicDetails.InfusionDetails
                    .PrescriptionItemNumber ==
                    objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                      .PrescriptionItemNumber) &&
                s.FormViewerDetails.BasicDetails.InfusionDetails
                  .SequentialItemOrder > 0 &&
                s.FormViewerDetails.BasicDetails.InfusionDetails
                  .SequentialItemOrder <
                  objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .SequentialItemOrder
            );
        } else if (
          InfusionContinousSeq != null &&
          InfusionContinousSeq.FirstPrescItemOIDInSeq > 0
        ) {
          oSequentialItems = this.ParentbaseVM.MedsResolve.Where(
            (s) =>
              s.FormViewerDetails != null &&
              s.FormViewerDetails.BasicDetails != null &&
              s.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              (s.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID ==
                InfusionContinousSeq.FirstPrescItemOIDInSeq ||
                s.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber ==
                  InfusionContinousSeq.FirstPrescItemOIDInSeq) &&
              s.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder > 0 &&
              s.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder < InfusionContinousSeq.SequentialItemOrder
          );
        } else if (
          objNewItemVM.FormViewerDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ParentPrescriptionItemOID > 0
        ) {
          oSequentialItems = this.ParentbaseVM.MedsResolve.Where(
            (s) =>
              s.FormViewerDetails != null &&
              s.FormViewerDetails.BasicDetails != null &&
              s.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              (s.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber ==
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .ParentPrescriptionItemOID ||
                s.FormViewerDetails.BasicDetails.InfusionDetails
                  .ParentPrescriptionItemOID ==
                  objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID) &&
              s.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder > 0 &&
              s.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder <
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .SequentialItemOrder
          );
        } else if (
          objNewItemVM.FormViewerDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .PrescriptionItemNumber > 0
        ) {
          oSequentialItems = this.ParentbaseVM.MedsResolve.Where(
            (s) =>
              s.FormViewerDetails != null &&
              s.FormViewerDetails.BasicDetails != null &&
              s.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              (s.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID ==
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber ||
                s.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber ==
                  objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .PrescriptionItemNumber) &&
              s.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder > 0 &&
              s.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder <
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .SequentialItemOrder
          );
        }
        if (oSequentialItems != null && oSequentialItems.Count() > 0) {
          let InfSeqItemsOrdered = oSequentialItems.Where(
            (oItem) =>
              oItem.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder == 1
          );
          if (InfSeqItemsOrdered != null && InfSeqItemsOrdered.Count() > 0) {
            let oInfSeqItem = InfSeqItemsOrdered.First();
            if (
              oInfSeqItem != null &&
              oInfSeqItem.FormViewerDetails != null &&
              oInfSeqItem.FormViewerDetails.BasicDetails != null
            ) {
              isNextScheduleExists = true;
              PreviousStartDTTM =
                oInfSeqItem.FormViewerDetails.BasicDetails.StartDTTM;
              PreviousStartPrescriptionTime =
                oInfSeqItem.FormViewerDetails.BasicDetails
                  .StartPrescriptionTime;
            }
          }
        }
      }
    }
    out1(PreviousStartDTTM);
    out2(PreviousStartPrescriptionTime);
    return isNextScheduleExists;
  }
  public ClearAdminTimesForPRN(
    prsItem: IPPMAManagePrescSer.PrescriptionItemDetails
  ): boolean {
    if (
      prsItem != null &&
      prsItem.BasicProperties != null &&
      prsItem.BasicProperties.Dose != null &&
      prsItem.BasicProperties.Direction != null &&
      String.Equals(
        prsItem.BasicProperties.Direction.Code,
        'CC_MEDDIRECTION',
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      prsItem.BasicProperties.Dose != null &&
      prsItem.BasicProperties.Dose.DoseRegime.Count > 0 &&
      prsItem.BasicProperties.Dose.DoseRegime != null &&
      prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails != null &&
      prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
        .ScheduledTimes != null &&
      prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails.ScheduledTimes
        .Count > 0
    ) {
      let nCount: number =
        prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
          .ScheduledTimes.Count;
      if (
        prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails.ScheduledTimes.Where(
          (c) => c.ScheduledTime == '00:00'
        )
          .Select((s) => s)
          .Count() == nCount
      ) {
        return false;
      }
    }
    return true;
  }
  public SetPrnScheduleDet(
    prsItem: IPPMAManagePrescSer.PrescriptionItemDetails
  ): void {
    if (
      prsItem != null &&
      prsItem.BasicProperties != null &&
      prsItem.BasicProperties.Dose != null &&
      prsItem.BasicProperties.Direction != null &&
      String.Equals(
        prsItem.BasicProperties.Direction.Code,
        'CC_MEDDIRECTION',
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      prsItem.BasicProperties.Dose.DoseRegime != null &&
      prsItem.BasicProperties.Dose.DoseRegime.Count > 0 &&
      prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails != null
    ) {
      if (
        prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
          .ScheduledTimes != null &&
        prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
          .ScheduledTimes.Count > 0
      ) {
        let nCount: number =
          prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails
            .ScheduledTimes.Count;
        if (
          prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails.ScheduledTimes.Where(
            (c) => c.ScheduledTime == '00:00'
          )
            .Select((s) => s)
            .Count() == nCount
        ) {
          prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails.PRNScheduledDet =
            '0';
        } else {
          prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails.PRNScheduledDet =
            '1';
        }
      } else {
        prsItem.BasicProperties.Dose.DoseRegime[0].FrequencyDetails.PRNScheduledDet =
          '2';
      }
    }
  }
  private FillChangingDoseDataForWSCall(
    oMultipleDoseDetail: MultipleDoseDetail
  ): ObservableCollection<IPPMAManagePrescSer.Scheduledetails> {
    let _lstIPPScheduledetails: ObservableCollection<IPPMAManagePrescSer.Scheduledetails> =
      new ObservableCollection<IPPMAManagePrescSer.Scheduledetails>();
    if (
      oMultipleDoseDetail != null &&
      oMultipleDoseDetail.ScheduleDetailsData != null &&
      oMultipleDoseDetail.ScheduleDetailsData.Count > 0
    ) {
      let oScheduleDetVM: ScheduleDetailsSteppedVM = ObjectHelper.CreateObject(
        new ScheduleDetailsSteppedVM(),
        {
          StartDate: oMultipleDoseDetail.StartDTTM,
          EndDate: oMultipleDoseDetail.EndDTTM,
          GrdData: oMultipleDoseDetail.ScheduleDetailsData,
          DoseUOMValue:
            oMultipleDoseDetail.DoseUOM != null
              ? oMultipleDoseDetail.DoseUOM.Value
              : String.Empty,
          IsDaywiseView: oMultipleDoseDetail.IsDaywiseView,
          FreqDetails: oMultipleDoseDetail.FreqDetails,
        }
      );
      _lstIPPScheduledetails = oScheduleDetVM.GetChangingDoseDataForWSCall(
        this.ParentbaseVM.IsFinishClicked
      );
    }
    return _lstIPPScheduledetails;
  }
  private _SupplyDetails: ObservableCollection<PrescriptionItemVM>;
  public get SupplyDetails(): ObservableCollection<PrescriptionItemVM> {
    return this._SupplyDetails;
  }
  public set SupplyDetails(value: ObservableCollection<PrescriptionItemVM>) {
    if (Helper.ReferenceEquals(this._SupplyDetails, value) != true) {
      this._SupplyDetails = value;
      //NotifyPropertyChanged("SupplyDetails");
    }
  }
  bRelayCallRequiredForParacetamolIngredientCheck: boolean = false;
  public Set_IsParacetamolIngredient_Property(
    bRelayCallRequired: boolean
  ): void {
    this.bRelayCallRequiredForParacetamolIngredientCheck = bRelayCallRequired;
    if (
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Inpatient,
        StringComparison.CurrentCultureIgnoreCase
      )
    ) {
      iBusyIndicator.Stop('FormViewer');
      CommonVariables.FormViewerIsInProgress = false;
      iBusyIndicator.Start('CheckParaIngredient');
      //let oReq: PrescribableDefn.IsAnyDrugContainGivenIngredientRequest = new PrescribableDefn.IsAnyDrugContainGivenIngredientRequest();
      let oReq: CReqMsgIsAnyDrugContainGivenIngredient =
        new CReqMsgIsAnyDrugContainGivenIngredient();
      oReq.oMultiComponentItemBC = new CMultiComponentItem();
      oReq.oMultiComponentItemBC.Components =
        new ObservableCollection<InfusionFluidDetails>();
      if (
        this.FormViewerDetails != null &&
        this.FormViewerDetails.MulticomponentDetails != null &&
        this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null &&
        this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 0
      ) {
        let _NoOfComponents: number =
          this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
        //oReq.oMultiComponentItemBC.Components = new Array(_NoOfComponents);
        for (let i: number = 0; i < _NoOfComponents; i++) {
          let _tempComponent: MulticomponentChildVM =
            this.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[i];
          //oReq.oMultiComponentItemBC.Components[i] = new InfusionFluidDetails();
          //oReq.oMultiComponentItemBC.Components[i].IdentifyingOID = _tempComponent.IdentifyingOID;
          //oReq.oMultiComponentItemBC.Components[i].IdentifyingType = _tempComponent.IdentifyingType;
          let lstInfusionFluidDetails: InfusionFluidDetails =
            new InfusionFluidDetails();
          lstInfusionFluidDetails.IdentifyingOID =
            _tempComponent.IdentifyingOID;
          lstInfusionFluidDetails.IdentifyingType =
            _tempComponent.IdentifyingType;
          oReq.oMultiComponentItemBC.Components.Add(lstInfusionFluidDetails);
        }
      } else {
        /*oReq.oMultiComponentItemBC.Components = new Array(1);
                oReq.oMultiComponentItemBC.Components[0] = new InfusionFluidDetails();
                oReq.oMultiComponentItemBC.Components[0].IdentifyingOID = this.FormViewerDetails.BasicDetails.IdentifyingOID;
                oReq.oMultiComponentItemBC.Components[0].IdentifyingType = this.FormViewerDetails.BasicDetails.IdentifyingType;*/
        let lstInfusionFluidDetails1: InfusionFluidDetails =
          new InfusionFluidDetails();
        lstInfusionFluidDetails1.IdentifyingOID =
          this.FormViewerDetails.BasicDetails.IdentifyingOID;
        lstInfusionFluidDetails1.IdentifyingType =
          this.FormViewerDetails.BasicDetails.IdentifyingType;
        oReq.oMultiComponentItemBC.Components.Add(lstInfusionFluidDetails1);
      }
      oReq.oMultiComponentItemBC.MCVersionNumber = AppSessionInfo.AMCV;
      oReq.oMultiComponentItemBC.IngredientLorenzoID =
        CConstants.ParacetamolIngredientLorenzoID;
      oReq.oContextInformation = Common.FillContext();
      let serviceProxy: IPPMAPrescribableDefnWSSoapClient =
        new IPPMAPrescribableDefnWSSoapClient();
      serviceProxy.IsAnyDrugContainGivenIngredientCompleted = (s, e) => {
        this.serviceProxy_IsAnyDrugContainGivenIngredientCompleted(s, e);
      };
      serviceProxy.IsAnyDrugContainGivenIngredientAsync(oReq);
    }
  }
  serviceProxy_IsAnyDrugContainGivenIngredientCompleted(
    sender: Object,
    e: IsAnyDrugContainGivenIngredientCompletedEventArgs
  ): void {
    iBusyIndicator.Stop('CheckParaIngredient');
    if (e.Error == null) {
      let oResponse: CResMsgIsAnyDrugContainGivenIngredient = e.Result;
      if (oResponse != null) {
        this.IsParacetamolIngredient = oResponse.Result;
        if (
          !ObjectHelper.HasValue(this.IsParacetamolAdministered) &&
          ObjectHelper.HasValue(this.IsParacetamolIngredient) &&
          this.IsParacetamolIngredient.Value
        ) {
          if (this.bRelayCallRequiredForParacetamolIngredientCheck) {
            this.IsAnyParacetamolAdministered();
          }
        } else {
          if (this.TriggerParacetamolWarningEvent != null) {
            this.TriggerParacetamolWarningEvent(false);
          }
        }
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        80000013,
        'LorAppManagePrescriptionBBUI_P2.dll, PrescriptionItemVM.serviceProxy_IsAnyDrugContainGivenIngredientCompleted()',
        e.Error
      );
    }
  }
  private GetThisItemsDueOrAdminDTTM(): DateTime {
    let dtCurrent: DateTime = CommonBB.GetServerDateTime();
    dtCurrent = dtCurrent.DateTime.AddTime(dtCurrent);
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null
    ) {
      if (
        this.FormViewerDetails.BasicDetails.DoseType != null &&
        !String.IsNullOrEmpty(
          this.FormViewerDetails.BasicDetails.DoseType.Value
        ) &&
        (String.Equals(
          this.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE
        ) ||
          String.Equals(
            this.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPED
          ) ||
          String.Equals(
            this.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.VARIABLE
          )) &&
        this.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
        this.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
      ) {
        let sTime: string = String.Empty;
        let dtDueNowDTTM: DateTime = DateTime.MinValue;
        if (
          PrescriptionHelper.CheckIsDueNow(
            this.FormViewerDetails.BasicDetails,
            undefined,
            (o1) => {
              sTime = o1;
            },
            (o2) => {
              dtDueNowDTTM = o2;
            }
          ) &&
          !String.IsNullOrEmpty(sTime)
        ) {
          this.FormViewerDetails.BasicDetails.DueNowScheduleDTTM = dtDueNowDTTM;
          let ts: TimeSpan;
          if (
            TimeSpan.TryParse(sTime, (o) => {
              ts = o;
            })
          ) {
            dtCurrent = dtCurrent.Add(ts);
          }
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.AdminTimes != null &&
        this.FormViewerDetails.BasicDetails.AdminTimes
          .AdministrationScheduleTimes != null &&
        this.FormViewerDetails.BasicDetails.AdminTimes
          .AdministrationScheduleTimes.Count > 0
      ) {
        let schTime = this.FormViewerDetails.BasicDetails.AdminTimes.IsFixedTime
          ? this.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Where(
              (x) => x.ScheduleDTTM.TimeOfDay >= dtCurrent.TimeOfDay
            )
          : this.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Where(
              (x) => x.DrugroundDTTM.TimeOfDay >= dtCurrent.TimeOfDay
            );
        if (schTime != null && schTime.Count() > 0) {
          schTime = this.FormViewerDetails.BasicDetails.AdminTimes.IsFixedTime
            ? new IEnumerable(schTime.OrderBy((o) => o.ScheduleDTTM).ToArray())
            : new IEnumerable(
                schTime.OrderBy((o) => o.DrugroundDTTM).ToArray()
              );
          dtCurrent = dtCurrent.AddTime(
            this.FormViewerDetails.BasicDetails.AdminTimes.IsFixedTime
              ? schTime.FirstOrDefault().ScheduleDTTM
              : schTime.FirstOrDefault().DrugroundDTTM
          );
        }
      }
      if (
        this.FormViewerDetails.BasicDetails.RecordAdmin != null &&
        this.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled &&
        this.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate &&
        DateTime.NotEquals(this.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate,
          DateTime.MinValue)
      ) {
        let dtAdministeredDTTM: DateTime =
          this.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate.DateTime.AddTime(
            this.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime
          );
        dtCurrent = dtAdministeredDTTM;
      }
    }
    return dtCurrent;
  }
  public IsAnyParacetamolAdministered(): void {
    iBusyIndicator.Stop('FormViewer');
    CommonVariables.FormViewerIsInProgress = false;
    iBusyIndicator.Start('CheckParaAdministered');
    //let oReq:IPPMAManagePrescSer.IsAnyParacetamolAdministrationRequest = new IPPMAManagePrescSer.IsAnyParacetamolAdministrationRequest();
    let oReq = new IPPMAManagePrescSer.CReqMsgIsAnyParacetamolAdministration();
    let dtCurrent: DateTime = this.GetThisItemsDueOrAdminDTTM();
    let IngAdminParams: IPPMAManagePrescSer.IngredientAdminParams;
    IngAdminParams = ObjectHelper.CreateObject(
      new IPPMAManagePrescSer.IngredientAdminParams(),
      {
        PatientOID: PatientContext.PatientOID,
        IngredientLorenzoID: CConstants.ParacetamolIngredientLorenzoID,
        DuenessWindowTimeMinutes: MedChartData.DuenessThreshold,
        RangeStartDttm: dtCurrent.AddHours(
          -CConstants.AnyParacetamolAdministrationCheckInHours
        ),
        RangeEndDttm: dtCurrent.AddHours(
          CConstants.AnyParacetamolAdministrationCheckInHours
        ),
        EncounterOID:
          this.EncounterOID > 0
            ? this.EncounterOID
            : PatientContext.EncounterOid,
      }
    );
    oReq.IngAdminParamsBC = IngAdminParams;
    oReq.oContextInformation = Common.FillContext();
    let oServiceproxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    oServiceproxy.IsAnyParacetamolAdministrationCompleted = (s, e) => {
      this.oServiceproxy_IsAnyParacetamolAdministrationCompleted(s, e);
    };
    oServiceproxy.IsAnyParacetamolAdministrationAsync(oReq);
  }
  oServiceproxy_IsAnyParacetamolAdministrationCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.IsAnyParacetamolAdministrationCompletedEventArgs
  ): void {
    iBusyIndicator.Stop('CheckParaAdministered');
    if (e.Error == null) {
      let oResponse: IPPMAManagePrescSer.CResMsgIsAnyParacetamolAdministration =
        e.Result;
      if (oResponse != null) {
        let dtCurrent: DateTime = this.GetThisItemsDueOrAdminDTTM();
        this.IsParacetamolAdministered = oResponse.IsAnyParacetamolAdministered;
        if (
          (this.IsParacetamolAdministered ||
            (this.ParentbaseVM != null &&
              this.ParentbaseVM.IsAnyParacetamolMarkedAsAdministered(
                this.UniqueRowItemID,
                dtCurrent
              ))) &&
          this.TriggerParacetamolWarningEvent != null
        ) {
          this.TriggerParacetamolWarningEvent(true);
        } else if (this.TriggerParacetamolWarningEvent != null) {
          this.TriggerParacetamolWarningEvent(false);
        }
      } else {
        if (this.TriggerParacetamolWarningEvent != null) {
          this.TriggerParacetamolWarningEvent(false);
        }
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        80000013,
        'LorAppManagePrescriptionBBUI_P2.dll, PrescriptionItemVM.oServiceproxy_IsAnyParacetamolAdministrationCompleted()',
        e.Error
      );
    }
  }
  private _historyOfAmend: List<IPPMAManagePrescSer.PresItemAuditHistory>;
  public get HistoryOfAmend(): List<IPPMAManagePrescSer.PresItemAuditHistory> {
    return this._historyOfAmend;
  }
  public set HistoryOfAmend(
    value: List<IPPMAManagePrescSer.PresItemAuditHistory>
  ) {
    if (Helper.ReferenceEquals(this._historyOfAmend, value) != true) {
      this._historyOfAmend = value;
      //NotifyPropertyChanged("HistoryOfAmend");
    }
  }
  public DbValues: Dictionary<string, string>;
  public DbOsValues: Dictionary<string, string>;
  private _TopMostAmendedPrescriptionItemOID: number = 0;
  public get TopMostAmendedPrescriptionItemOID(): number {
    return this._TopMostAmendedPrescriptionItemOID;
  }
  public set TopMostAmendedPrescriptionItemOID(value: number) {
    this._TopMostAmendedPrescriptionItemOID = value;
  }
  private _IsGPConnectItem: boolean = false;
  public get IsGPConnectItem(): boolean {
    return this._IsGPConnectItem;
  }
  public set IsGPConnectItem(value: boolean) {
    this._IsGPConnectItem = value;
    //NotifyPropertyChanged("IsGPConnectItem");
  }
  private _gpConnectMedicationItem: GPConnectItemVM;
  public get GpConnectMedicationItem(): GPConnectItemVM {
    return this._gpConnectMedicationItem;
  }
  public set GpConnectMedicationItem(value: GPConnectItemVM) {
    this._gpConnectMedicationItem = value;
    //NotifyPropertyChanged("GpConnectMedicationItem");
  }
  private _CurrentDispenseStatus: string;
  public get CurrentDispenseStatus(): string {
    return this._CurrentDispenseStatus;
  }
  public set CurrentDispenseStatus(value: string) {
    if (this._CurrentDispenseStatus != value) {
      this._CurrentDispenseStatus = value;
      //NotifyPropertyChanged("CurrentDispenseStatus");
    }
  }
  private _IsAlreadyClinicallyVerified: boolean = false;
  public get IsAlreadyClinicallyVerified(): boolean {
    return this._IsAlreadyClinicallyVerified;
  }
  public set IsAlreadyClinicallyVerified(value: boolean) {
    this._IsAlreadyClinicallyVerified = value;
    //NotifyPropertyChanged("IsAlreadyClinicallyVerified");
  }
  private _OsInstance: OrderSetInstance = null;
  public get OsInstance(): OrderSetInstance {
    return this._OsInstance;
  }
  public set OsInstance(value: OrderSetInstance) {
    this._OsInstance = value;
    //NotifyPropertyChanged("OsInstance");
  }
  private _IsAdministratedDISCancel: boolean = false;
  public get IsAdministratedDiscontinue(): boolean {
    return this._IsAdministratedDISCancel;
  }
  public set IsAdministratedDiscontinue(value: boolean) {
    this._IsAdministratedDISCancel = value;
  }
  public GetNonIVSubseqentItemsReqDataForSequence(
    MedsResolve: ObservableCollection<PrescriptionItemVM>
  ): void {
    let _SeqItemsHasDoseUOM = MedsResolve.Where(
      (c) =>
        c != null &&
        !c.IsGroupHeader &&
        c.FormViewerDetails != null &&
        c.FormViewerDetails.BasicDetails != null &&
        c.FormViewerDetails.BasicDetails.SequenceInfo != null &&
        c.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0 &&
        !String.Equals(
          c.PrescriptionItemStatus,
          CConstants.CANCELLED,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !String.Equals(
          c.PrescriptionItemStatus,
          CConstants.COMPLETED,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !String.Equals(
          c.PrescriptionItemStatus,
          CConstants.DISCONTINUED,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        (c.FormViewerDetails.BasicDetails.AdminTimes == null ||
          c.FormViewerDetails.BasicDetails.SequenceInfo.FreqDetail == null) &&
        ((c.FormViewerDetails.BasicDetails.DurationUOM != null &&
          c.FormViewerDetails.BasicDetails.DurationUOM.Equals('CC_DOSES')) ||
          (c.FormViewerDetails.BasicDetails.DurationInfo != null &&
            c.FormViewerDetails.BasicDetails.DurationInfo.Tag != null &&
            !String.IsNullOrEmpty(
              c.FormViewerDetails.BasicDetails.DurationInfo.Tag.ToString()
            ) &&
            c.FormViewerDetails.BasicDetails.DurationInfo.Tag.ToString().Equals(
              'CC_DOSES'
            )))
    ).ToList();
    let lstSeqreqInputCriteria: ObservableCollection<IPPMAManagePrescSer.CSequenceRequiredInputCriteria> =
      null;
    let sMCversion: string = String.Empty;
    if (_SeqItemsHasDoseUOM != null) {
      lstSeqreqInputCriteria =
        new ObservableCollection<IPPMAManagePrescSer.CSequenceRequiredInputCriteria>();
      let objInputCriteria: IPPMAManagePrescSer.CSequenceRequiredInputCriteria =
        null;
      _SeqItemsHasDoseUOM.forEach((objItem) => {
        if (objItem != null) {
          if (String.IsNullOrEmpty(sMCversion)) {
            sMCversion = objItem.FormViewerDetails.BasicDetails.MCVersion;
          }
          objInputCriteria =
            new IPPMAManagePrescSer.CSequenceRequiredInputCriteria();
          objInputCriteria.PrescriptionItemOID = objItem.PrescriptionItemOID;
          objInputCriteria.EncounterOID = objItem.EncounterOID;
          objInputCriteria.FrequencyOID =
            objItem.FormViewerDetails.BasicDetails.Frequency != null &&
            !String.IsNullOrEmpty(
              objItem.FormViewerDetails.BasicDetails.Frequency.Value
            )
              ? Convert.ToInt64(
                  objItem.FormViewerDetails.BasicDetails.Frequency.Value
                )
              : 0;
          lstSeqreqInputCriteria.Add(objInputCriteria);
        }
      });
    }
    if (lstSeqreqInputCriteria != null && lstSeqreqInputCriteria.Count > 0) {
      let oReqObject: IPPMAManagePrescSer.CReqMsgGetNonIVSubseqentItemsReqDataForSequence =
        new IPPMAManagePrescSer.CReqMsgGetNonIVSubseqentItemsReqDataForSequence();
      oReqObject.objSequenceReqInpuCriteriaBC = lstSeqreqInputCriteria;
      oReqObject.sMcVersionNoBC = sMCversion;
      oReqObject.oContextInformation = Common.FillContext();
      let objWSClient: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      objWSClient.GetNonIVSubseqentItemsReqDataForSequenceCompleted = (
        s,
        e
      ) => {
        this.objWSClient_GetNonIVSubseqentItemsReqDataForSequenceCompleted(
          s,
          e
        );
      };
      objWSClient.GetNonIVSubseqentItemsReqDataForSequenceAsync(oReqObject);
    }
  }
  objWSClient_GetNonIVSubseqentItemsReqDataForSequenceCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetNonIVSubseqentItemsReqDataForSequenceCompletedEventArgs
  ): void {
    if (e.Error != null || e.Result == null) return;
    let oRes: IPPMAManagePrescSer.CResMsgGetNonIVSubseqentItemsReqDataForSequence =
      e.Result;
    if (
      oRes != null &&
      oRes.objSubsequentItemsRequiredDataForSeq != null &&
      oRes.objSubsequentItemsRequiredDataForSeq.Count > 0 &&
      this.ParentbaseVM != null
    ) {
      oRes.objSubsequentItemsRequiredDataForSeq.forEach((objRes) => {
        if (objRes != null && objRes.PrescriptionItemOID > 0) {
          let objItem: PrescriptionItemVM = this.ParentbaseVM.MedsResolve.Where(
            (x) => x.PrescriptionItemOID == objRes.PrescriptionItemOID
          ).FirstOrDefault();
          if (objItem != null) {
            let FreqDetail: IPPMAManagePrescSer.CResMsgGetAdministrationTimes =
              new IPPMAManagePrescSer.CResMsgGetAdministrationTimes();
            if (objRes.oFrequency != null) {
              FreqDetail.oFrequency = objRes.oFrequency;
              FreqDetail.oFixedTimes = objRes.oFixedTimes;
              FreqDetail.oDrugRoundTimes = objRes.oDrugRoundTimes;
              objItem.FormViewerDetails.BasicDetails.SequenceInfo.FreqDetail =
                FreqDetail;
            }
          }
        }
      });
    }
  }
  public TechnicallyValidateMessage(): void {
    if (
      this.FormViewerDetails != null &&
      this.FormViewerDetails.BasicDetails != null &&
      this.FormViewerDetails.TechValidateDetails != null &&
      this.FormViewerDetails.TechValidateDetails.TechValidatedItems != null &&
      this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0 &&
      this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where((x) =>
        x.IsDoseCombinationsDefined.Equals('1')
      ).Count() > 0 &&
      !this.FormViewerDetails.BasicDetails.TechvalMsgResetAmend &&
      !this.FormViewerDetails.BasicDetails.IsCancelClick &&
      this.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds &&
      !this.ParentbaseVM.IsFormViewerClosed
    ) {
      this.FormViewerDetails.BasicDetails.TechvalMsgResetAmend = true;
      this.FormViewerDetails.BasicDetails.TVMsgFormClose = true;
      this.FormViewerDetails.BasicDetails.StopTVMsgFromStepVar = false;
      let oMessage: iMessageBox = new iMessageBox();
      oMessage.Title = 'Lorenzo - Manage prescription';
      oMessage.Message = Resource.TechValidate.TVProdOptMsg;
      oMessage.MessageButton = MessageBoxButton.OK;
      oMessage.IconType = MessageBoxType.Information;
      oMessage.Height = 150;
      oMessage.MessageBoxClose = (s, e) => {
        this.oMessage_MessageBoxClose(s, e);
      };
      //Delay prompt for 50620 2nd observation DosageForm data to retain on 'route' more click
      setTimeout(() => {
        oMessage.Show();
      }, 500);
      
    }
  }
  oMessage_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    this.FormViewerDetails.BasicDetails.TVMsgFormClose = false;
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      if (this.FormViewerDetails != null) {
        this.FormViewerDetails.IsClearTechValidate = true;
        this.FormViewerDetails.TechValidateDetails.TechValidatedItems.Clear();
        this.FormViewerDetails.TechValidateDetails.TechValidatedItems = null;
        if (this.TechValidatedItems != null) this.TechValidatedItems.Clear();
        this.SelectedSupplyreq = this.iSSupplyrequest
          .Where(
            (x) =>
              x != null &&
              !String.IsNullOrEmpty(x.Value) &&
              String.Equals(x.Value, Resource.TechValidate.Empty)
          )
          .FirstOrDefault();
        if (
          !String.IsNullOrEmpty(this.ItemSubType) &&
          String.Equals(
            this.ItemSubType,
            'CC_MULCMPNTITM',
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          if (
            this.SelectedSupplyreq != null &&
            String.Equals(
              this.SelectedSupplyreq.Value,
              Resource.TechValidate.Empty,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            this.FormViewerDetails.BasicDetails != null &&
            String.IsNullOrEmpty(
              this.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            (this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction ==
              null ||
              this.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                .Count == 0) &&
            this.PresTechValidatedItemsChild != null &&
            this.PresTechValidatedItemsChild.Count > 0
          ) {
            this.PresTechValidatedItemsChild.forEach((child) => {
              child.EnableChildMCIComp = true;
            });
          }
        }
      }
      if (this.IsTechValidateMandatory) this.SetTechvalImageStatus();
    }
  }
}
export class OrderSetInstance {
  //extends System.ComponentModel.INotifyPropertyChanged
  public get OsIsLinkImgVisible(): boolean {
    return this.OsDisplayOrder != 0 && !this.OsIsGroupHeader;
  }
  private _OsIsGroupHeader: boolean = false;
  public get OsIsGroupHeader(): boolean {
    return this._OsIsGroupHeader;
  }
  public set OsIsGroupHeader(value: boolean) {
    this._OsIsGroupHeader = value;
    //this.//NotifyPropertyChanged("OsIsGroupHeader");
    //this.//NotifyPropertyChanged("OsIsLinkImgVisible");
  }
  private _OsGroupHeaderName: string;
  public get OsGroupHeaderName(): string {
    return this._OsGroupHeaderName;
  }
  public set OsGroupHeaderName(value: string) {
    this._OsGroupHeaderName = value;
    //this.//NotifyPropertyChanged("OsGroupHeaderName");
  }
  private _OsSeqGroupNo: number = 0;
  public get OsSeqGroupNo(): number {
    return this._OsSeqGroupNo;
  }
  public set OsSeqGroupNo(value: number) {
    this._OsSeqGroupNo = value;
    //this.//NotifyPropertyChanged("OsSeqGroupNo");
  }
  private _OsIsSequential: boolean = false;
  public get OsIsSequential(): boolean {
    return this._OsIsSequential;
  }
  public set OsIsSequential(value: boolean) {
    this._OsIsSequential = value;
    //this.//NotifyPropertyChanged("OsIsSequential");
    //this.//NotifyPropertyChanged("IsTimeAdjustEnabledRevd");
  }
  private _OsIsProtected: boolean = false;
  public get OsIsProtected(): boolean {
    return this._OsIsProtected;
  }
  public set OsIsProtected(value: boolean) {
    this._OsIsProtected = value;
    //this.//NotifyPropertyChanged("OsIsProtected");
  }
  private _OsDisplayOrder: number = 0;
  public get OsDisplayOrder(): number {
    return this._OsDisplayOrder;
  }
  public set OsDisplayOrder(value: number) {
    this._OsDisplayOrder = value;
    //this.//NotifyPropertyChanged("OsDisplayOrder");
    //this.//NotifyPropertyChanged("OsIsLinkImgVisible");
  }
  private _OsIsFirstItem: boolean = false;
  public get OsIsFirstItem(): boolean {
    return this._OsIsFirstItem;
  }
  public set OsIsFirstItem(value: boolean) {
    this._OsIsFirstItem = value;
    //this.//NotifyPropertyChanged("OsIsFirstItem");
    //this.//NotifyPropertyChanged("IsTimeAdjustEnabledRevd");
  }
  private _OsIsLastItem: boolean = false;
  public get OsIsLastItem(): boolean {
    return this._OsIsLastItem;
  }
  public set OsIsLastItem(value: boolean) {
    this._OsIsLastItem = value;
    //this.//NotifyPropertyChanged("OsIsLastItem");
  }
  public OsIsInfusion: boolean = false;
  public OsRouteOids: string;
  public UniqId: number = 0;
  public IsPrescribed: boolean = false;
  public FreqPeriodCode: string;
  // public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
  // private NotifyPropertyChanged(propertyName: string): void {
  //     if (this.PropertyChanged != null) {
  //         PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
  //     }
  // }
}
export class DoseFormulaDef {
  public BSAFormula: string;
  public DoseCalcBasedOn: string;
  public CalculationFor: string;
  public RequestedDose: string;
  public IsDoseCalcAlwaysUse: string;
  public FrequencyName: string;
  public DefaultWeightType: string;
  public RequestedUOMName: string;
  public RequestDosePerUOM: string;
  public RequestDosePer2UOMName: string;
}
export class InfContinousSequentail extends ViewModelBase {
  private _prescriptionItemNumber: number = 0;
  private _firstPrescItemOIDInSeq: number = 0;
  private _sequentialItemOrder: number = 0;
  private _IsSequentialPrescribing: boolean = false;
  private _sequentialRoute: CListItem;
  private _infusionrateInseq: string;
  private _infusionratenumuomInseq: CListItem;
  private _infusionratedenouomInseq: CListItem;
  private _isCurrentgrdResolveIndex: number = 0;
  private isInfusionRateChangedSeq: boolean = false;
  private _isCurrentInfusionRateChange: boolean = false;
  private deliveryDeviceInSeq: CListItem;
  private _infusiontype: CListItem;
  private _displaySequentialItemOrder: number = 0;
  private _deliveryDeviceFreetext: string;
  private _isfirstiteminseq: boolean = false;
  private _ispreviousactionamend: boolean = false;
  private _ispreviousactionupdate: boolean = false;
  private _parentprescriptionOID: number = 0;
  private _sequentialRoutes: ObservableCollection<CListItem>;
  public get PrescriptionItemNumber(): number {
    return this._prescriptionItemNumber;
  }
  public set PrescriptionItemNumber(value: number) {
    if (this._prescriptionItemNumber != value) {
      this._prescriptionItemNumber = value;
      //super.NotifyPropertyChanged("PrescriptionItemNumber");
    }
  }
  public get FirstPrescItemOIDInSeq(): number {
    return this._firstPrescItemOIDInSeq;
  }
  public set FirstPrescItemOIDInSeq(value: number) {
    if (this._firstPrescItemOIDInSeq != value) {
      this._firstPrescItemOIDInSeq = value;
      //super.NotifyPropertyChanged("FirstPrescItemOIDInSeq");
    }
  }
  public get SequentialItemOrder(): number {
    return this._sequentialItemOrder;
  }
  public set SequentialItemOrder(value: number) {
    if (this._sequentialItemOrder != value) {
      this._sequentialItemOrder = value;
      //super.NotifyPropertyChanged("SequentialItemOrder");
    }
  }
  public get IsSequentialPrescribing(): boolean {
    return this._IsSequentialPrescribing;
  }
  public set IsSequentialPrescribing(value: boolean) {
    if (this._IsSequentialPrescribing != value) {
      this._IsSequentialPrescribing = value;
      //super.NotifyPropertyChanged("IsSequentialPrescribing");
    }
  }
  public get SequentialRoute(): CListItem {
    return this._sequentialRoute;
  }
  public set SequentialRoute(value: CListItem) {
    this._sequentialRoute = value;
    //super.NotifyPropertyChanged("SequentialRoute");
  }
  public get InfusionrateInseq(): string {
    return this._infusionrateInseq;
  }
  public set InfusionrateInseq(value: string) {
    this._infusionrateInseq = value;
    //super.NotifyPropertyChanged("InfusionrateInseq");
  }
  public get InfusionratenumuomInseq(): CListItem {
    return this._infusionratenumuomInseq;
  }
  public set InfusionratenumuomInseq(value: CListItem) {
    this._infusionratenumuomInseq = value;
    //super.NotifyPropertyChanged("InfusionratenumuomInseq");
  }
  public get InfusionratedenouomInseq(): CListItem {
    return this._infusionratedenouomInseq;
  }
  public set InfusionratedenouomInseq(value: CListItem) {
    this._infusionratedenouomInseq = value;
    //super.NotifyPropertyChanged("InfusionratedenouomInseq");
  }
  public get IsCurrentgrdResolveIndex(): number {
    return this._isCurrentgrdResolveIndex;
  }
  public set IsCurrentgrdResolveIndex(value: number) {
    this._isCurrentgrdResolveIndex = value;
    //super.NotifyPropertyChanged("IsCurrentgrdResolveIndex");
  }
  public get IsInfRateChangedSequential(): boolean {
    return this.isInfusionRateChangedSeq;
  }
  public set IsInfRateChangedSequential(value: boolean) {
    if (this.isInfusionRateChangedSeq != value) {
      this.isInfusionRateChangedSeq = value;
      //super.NotifyPropertyChanged("IsInfRateChangedSequential");
    }
  }
  public get IsCurrentInfusionRateChange(): boolean {
    return this._isCurrentInfusionRateChange;
  }
  public set IsCurrentInfusionRateChange(value: boolean) {
    if (this._isCurrentInfusionRateChange != value) {
      this._isCurrentInfusionRateChange = value;
      //super.NotifyPropertyChanged("IsCurrentInfusionRateChange");
    }
  }
  public get DeliveryDeviceInSeq(): CListItem {
    return this.deliveryDeviceInSeq;
  }
  public set DeliveryDeviceInSeq(value: CListItem) {
    if (this.deliveryDeviceInSeq != value) {
      this.deliveryDeviceInSeq = value;
      //super.NotifyPropertyChanged("DeliveryDeviceInSeq");
    }
  }
  public get Infusiontype(): CListItem {
    return this._infusiontype;
  }
  public set Infusiontype(value: CListItem) {
    this._infusiontype = value;
    //super.NotifyPropertyChanged("Infusiontype");
  }
  public get DisplaySequentialItemOrder(): number {
    return this._displaySequentialItemOrder;
  }
  public set DisplaySequentialItemOrder(value: number) {
    if (this._displaySequentialItemOrder != value) {
      this._displaySequentialItemOrder = value;
      //super.NotifyPropertyChanged("DisplaySequentialItemOrder");
    }
  }
  public get DeliveryDeviceFreetext(): string {
    return this._deliveryDeviceFreetext;
  }
  public set DeliveryDeviceFreetext(value: string) {
    if (this._deliveryDeviceFreetext != value) {
      this._deliveryDeviceFreetext = value;
      //super.NotifyPropertyChanged("DeliveryDeviceFreetext");
    }
  }
  public get IsFirstiteminseq(): boolean {
    return this._isfirstiteminseq;
  }
  public set IsFirstiteminseq(value: boolean) {
    if (this._isfirstiteminseq != value) {
      this._isfirstiteminseq = value;
      //super.NotifyPropertyChanged("IsFirstiteminseq");
    }
  }
  public get IsPreviousationamend(): boolean {
    return this._ispreviousactionamend;
  }
  public set IsPreviousationamend(value: boolean) {
    if (this._ispreviousactionamend != value) {
      this._ispreviousactionamend = value;
      //super.NotifyPropertyChanged("IsPreviousationamend");
    }
  }
  public get IsPreviousationUpdate(): boolean {
    return this._ispreviousactionupdate;
  }
  public set IsPreviousationUpdate(value: boolean) {
    if (this._ispreviousactionupdate != value) {
      this._ispreviousactionupdate = value;
      //super.NotifyPropertyChanged("IsPreviousationUpdate");
    }
  }
  public get SequentialMultiplsRoutes(): ObservableCollection<CListItem> {
    return this._sequentialRoutes;
  }
  public set SequentialMultiplsRoutes(value: ObservableCollection<CListItem>) {
    this._sequentialRoutes = value;
    //super.NotifyPropertyChanged("SequentialMultiplsRoutes");
  }
  public get ParentPrescriptionOID(): number {
    return this._parentprescriptionOID;
  }
  public set ParentPrescriptionOID(value: number) {
    if (this._parentprescriptionOID != value) {
      this._parentprescriptionOID = value;
      //super.NotifyPropertyChanged("ParentPrescriptionOID");
    }
  }
}
//export module PrescriptionItemVM {
export enum EnumVals {
  CC_EXPJAN = 1,
  CC_EXPFEB = 2,
  CC_EXPMAR = 3,
  CC_EXPAPR = 4,
  CC_EXPMAY = 5,
  CC_EXPJUNE = 6,
  CC_EXPJULY = 7,
  CC_EXPAUG = 8,
  CC_EXPSEP = 9,
  CC_EXPOCT = 10,
  CC_EXPNOV = 11,
  CC_EXPDEC = 12,
}
//}
