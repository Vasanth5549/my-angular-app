import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import * as _ from 'lodash';
//import { StringBuilder,ProfileFactoryType,ContextManager,Convert,AppActivity} from 'epma-platform/services';
import {
  Level,
  ProfileContext,
  OnProfileResult,
  IProfileProp,
  Byte,
  Decimal,
  decimal,
  Double,
  Float,
  Int64,
  long,
  Long,
  StringComparison,
  ObservableCollection,
  List,
  Visibility,
  CListItem,
  ChildWindow,
  AppDialogEventargs,
  AppDialogResult,
  EncounterPresConfigurations,
  WindowButtonType,
  IEnumerable,
  GridConfig,
  RTEEventargs,
  IOrderedEnumerable,
  RelayCommand,
  HtmlPage,
  Random,
  Enum,
  ArrayOfLong,
  ChildWizardCloseEventargs,
  TimeZoneInfo,
  WizardAction,
  Int32,
  StringSplitOptions,
  int32
} from 'epma-platform/models';
import { iAppDialogWindow } from "src/app/shared/epma-platform/controls/iAppDialogWindow";
import { AppDialog, iLabel, TextBlock, iTabItem,EventArgs } from 'epma-platform/controls';
import 'epma-platform/stringextension';
import DateTime, { DateTimeKind } from 'epma-platform/DateTime';
import TimeSpan from 'epma-platform/TimeSpan';
import {
  MessageEventArgs,
  MessageBoxResult,
  iMessageBox,
  MessageBoxButton,
  MessageBoxType,
  MessageBoxDelegate,
  StringBuilder,
  Convert,
  ProfileFactoryType,
  AMSHelper,
  ContextManager,
  AppActivity,
  SLQueryCollection,
  ProcessRTE,
  iBusyIndicator,
  Regex,
  base,
  AggregateService,
} from 'epma-platform/services';
import { ObjectHelper } from 'epma-platform/helper';
import {
  InfContinousSequentail,
  PrescriptionItemVM,
} from './PrescriptionItemVM';
import { MedicationOptionVM } from './medicationoptionvm';
import { MulticomponentChildVM, MulticomponentVM } from './MulticomponentVM';
import { MedQuickSelectVM } from './medquickselectvm';
import {
  CustomTechValidatedItem,
  ProdOptBackup,
} from './customtechvalidateditem';
import {
  AppContextInfo,
  AppSessionInfo,
  ClerkFormViewDeftBehaviour,
  ContextInfo,
  PatientContext,
} from 'src/app/lorappcommonbb/utilities/globalvariable';
import {
  CAActivity,
  CConstants,
  ClerkFormViewDefault,
  DoseTypeCode,
  DRCDoseTypes,
  GPcStatus,
  InfusionTypesCode,
  InfusionVolume,
  PrescribeSource,
  PrescriptionItemStatusCodes,
  PrescriptionTypes,
  ValueDomain,
  ValueSet,
} from '../utilities/constants';
import {
  DCOverridereasonConceptCodes,
  DCReqDoseSecondUOMConceptCodes,
  DispenseStatusListConceptCodeData,
  DRCErrorCodeConceptCodeData,
  IndicationOverrideReason,
  InfHumdificationConceptCodeData,
  InfusionTypeConceptCodeData,
  MedDoseTypeConceptCodeData,
  MedicationCommonConceptCodeData,
  MedicationCommonProfileData,
  RequestUrgency,
  ReviewAfterUOMList,
  TitratedDoseInstructions,
} from 'src/app/lorappmedicationcommonbb/utilities/profiledata';
import {
  CommonFlags,
  CPremission,
  DomainValuesForTechValidate,
  FormviewerComboValues,
  FormviewerCommonData,
  GlobalVariable,
  QueryStringInfo,
  WebServiceURL,
} from '../utilities/globalvariable';
import { Resource } from 'src/app/lorappmanageprescriptionbbui/resource';
import {
  CReqMsgGetDeactivateAttributes,
  CReqMsgGetDocTemplatesPolicyType,
  CReqMsgGetMedClerkingSource,
  CResMsgGetDeactivateAttributes,
  CResMsgGetDocTemplatesPolicyType,
  CResMsgGetDrugBasicInfo,
  CResMsgGetPatientMedicationCount,
  GetDeactivateAttributesCompletedEventArgs,
  GetDocTemplatesPolicyTypeCompletedEventArgs,
  GetDrugBasicInfoCompletedEventArgs,
  GetFormViewControlsCompletedEventArgs,
  GetMedClerkingSourceCompletedEventArgs,
  GetPatientMedicationCountCompletedEventArgs,
  ManagePrescriptionWSSoapClient,
  MedicationListCriteria,
  DrugItemInputData
} from 'src/app/shared/epma-platform/soap-client/ManagePrescriptionWS';
import { ActivityTypes, ConflictIcons, DoseCalculation } from '../model/common';
import { Busyindicator } from 'src/app/lorappcommonbb/busyindicator';
import * as IPPMAManagePrescSer from 'src/app/shared/epma-platform/soap-client/IPPMAManagePrescriptionWS';
// import * as PrescribableDefn from 'src/app/shared/epma-platform/soap-client/IPPMAPrescribableDefnWS';
import {
  ConceptCodeData,
  ProfileData,
  UserPermissions,
} from '../utilities/profiledata';
//import { Common, CommonClo } from '../utilities/common';
import { Common,CommonClo } from '../utilities/common';
import {
  CommonDomainValues,
  MedChartData,
  WebServiceURLMedicationCommonBB,
} from 'src/app/lorappmedicationcommonbb/utilities/globalvariable';
import {
  OrderSetHelper,
  PrescriptionHelper,
} from '../utilities/prescriptionhelper';
import { DoseCalcDefault } from 'src/app/lorappmedicationcommonbb/viewmodel/DoseCalcVM';
import { ConflictsVM } from 'src/app/lorappmedicationcommonbb/viewmodel/conflictsvm';
import {
  CGPCDrugConversionRequest,
  CReqMsgGetTransformConversion,  
} from 'src/app/shared/epma-platform/soap-client/IPPMAManagePrescriptionWS';
import { CommonBB } from 'src/app/lorappcommonbb/utilities/common';
//import * as MedicationCommon from 'src/app/lorappmedicationcommonbb/utilities/common';
//import { MedChartData } from 'src/app/lorappmedicationcommonbb/utilities/common';
import {
  LockedUsersDetails,
  MedicationCommonBB,
} from 'src/app/lorappmedicationcommonbb/utilities/medicationcommonbb';
import { LzoWizardVmbaseService as LzoWizardVMBase } from 'src/app/shared/epma-platform/services/lzo-wizard-vmbase.service';
import { IViewModelBase } from 'src/app/lorappcommonbb/viewmodelbase';
import {
  GPConnectAdminDosage,
  GpConnectIdentifier,
  GPConnectItemVM,
} from './GPConnectItemVM';
import * as Application from '../../lorappcommonbb/amshelper';
import {
  CSequentialHelper,
  eSequenceNoReassignType,
} from '../utilities/CSequentialHelper';
import {
  DrugItemSubTypeCode,
  InfusionTypeCode,
  CConstants as CommConstants,
} from 'src/app/lorappmedicationcommonbb/utilities/constants';
import {
  TitratedDoseVM,
  TitratedScheduleDetails,
} from './TitratedDoseDetailsVM';
import { MedicationErrors } from '../resource/medicationerrors.designer';
import {
  InfusionVM,
  SequenceDetail,
  BasicDetailsVM,
  OrderSetSequenceDetail,
} from './BasicDetailsVM';
import {
  CommonSequentialHelper,
  eCommonSequenceNoReassignType,
} from '../utilities/CommonSequentialHelper';
import { EncounterVM } from './encountervm';
import { PrintUtility } from '../utilities/csprintutility';
import { MedicationPrescriptionHelper } from 'src/app/lorappmedicationcommonbb/utilities/medicationprescriptionhelper';
import * as MedicationConstants from 'src/app/lorappmedicationcommonbb/utilities/constants';
import { MedAccessConstraintsVM } from './medaccessconstraintsvm';
import { csResolveUtility } from '../utilities/csresolveutility';
import { Environment } from '../../product/shared/models/Common';
import { GpConnectListView } from '../view/gpconnectlistview';
import { Dictionary } from 'epma-platform/dictionary';
import {
  OrderSetSecMezzanineVM,
  PrescriptionItemAssociations,
} from './ordersetsecmezzanineVM';
import { TechValidateVM } from './TechValidateVM';
import { PresItemDRCVM } from './PresItemDRCVM';
import * as PrescribableDefn from 'src/app/shared/epma-platform/soap-client/IPPMAPrescribableDefnWS';
import * as MedicationMgmtSer from 'src/app/shared/epma-platform/soap-client/MedicationMgmtWS';
import { FormViewerVM } from './formviewervm';
import { FormViewerDefaultsVM } from './formviewerdefaultsvm';
import { ScheduleDetailsSteppedVM } from 'src/app/lorappmedicationcommonbb/viewmodel/scheduledetailsvm';
import { MultipleDoseDetail } from './MultipleDoseDetail';
import { ReplacementDrugVM } from './ReplacementDrugVM';
import { NonFormularyVM } from './NonFormularyVM';
import { MCommonBB } from 'src/app/lorappmedicationcommonbb/utilities/common';
import { RecordAdminVM } from './RecordAdminVM';
import { GrdAdminstrativeTimesCols } from 'src/app/lorappmedicationcommonbb/viewmodel/prescriptionitemdetailsvm';
import {
  CReqMsgGetUOMTypeList,
  CResMsgGetUOMTypeList,
  GetUOMTypeListCompletedEventArgs,
  MedicationAdministrationWSSoapClient,
} from 'src/app/shared/epma-platform/soap-client/MedicationAdministrationWS';
import { DRCConflictDetail, MedDRCVM } from './meddrcvm';
import { MedListView } from '../view/medlistview';
import * as ManagePrescSer from 'src/app/shared/epma-platform/soap-client/ManagePrescriptionWS';
import {
  CReqMsgGetPatientEncountersforRange,
  CResMsgGetEncountersPaging,
  CResMsgGetPatientEncountersforRange,
  Encounter,
  EncounterWSWSSoapClient,
  GetEncountersPagingCompletedEventArgs,
  GetPatientEncountersforRangeCompletedEventArgs,
} from 'src/app/shared/epma-platform/soap-client/EncounterWS';
import {
  CResMsgGetPatientLeaveByPatDet,
  GetPatientLeaveByPatDetCompletedEventArgs,
} from 'src/app/shared/epma-platform/soap-client/QueryInpatientWS';
import { Stationary } from 'src/app/shared/epma-platform/soap-client/MedicationMgmtWS';
import {
  CResMsgGetPatientAllergies,
  GetPatientAllergiesCompletedEventArgs,
} from 'src/app/shared/epma-platform/soap-client/ManageAllergyWS';
import {
  CResMsgGetProblemByCriteria,
  GetProblemByCriteriaCompletedEventArgs,
} from 'src/app/shared/epma-platform/soap-client/ManageProblemWS';
import { HttpUtility } from 'src/app/shared/epma-platform/models/httputility';
import {
  InfusionPresConfigData,
  PrescribingMethodConfigData,
  GPConnectConfiguration,
  ClinicalVerificationConfiguration,
  PrintConfigurationData,
  MedicationSearchConfigData,
  MedDrugDisplayConfigData,
  CClinicalIncidentConfig,
  ScheduleConfig,
  CChartDisplayConfig,
  PrescribingConfigData,
  CSlotCharacteristicsConfig,
  CMedicationLineDisplayData,
  MedicationViewConfigData,
  AddPrescribingConfigData,
} from 'src/app/lorappslprofiletypes/medication';

import { CValuesetTerm } from 'src/app/shared/epma-platform/soap-client/CReferenceWS';
import {
  OnCheckAccessEventArgs,
  SLSecurityAccess,
} from 'src/app/shared/epma-platform/services/SLSecurityAccess.service';
import { PropertyChangedEventArgs } from 'src/app/shared/epma-platform/controls/epma-tab/epma-tab.component';
import 'epma-platform/booleanextension';
import 'epma-platform/numberextension';
import 'epma-platform/stringextension';
import {iMath} from 'epma-platform/mathextension';
import 'epma-platform/arrayextension';
import { LineDisplayHelper } from 'src/app/lorappmedicationcommonbb/converter/medicationconverters';
import { SampleDataService } from './sample-data.service';
import { SubService } from './data.service';
import { InjectorInstance } from 'src/app/app.module';
import {EventEmitter} from '@angular/core';
import { BehaviorSubject,Observable } from 'rxjs';
import { medFormViewer } from '../view/medformviewer';
import { medNonFormulary } from '../view/mednonformulary';
import { MedSecondaryTabChild } from '../view/medsecondarytabchild';
import { frmFVFooter } from '../common/frmFVFooter';
import { SecondaryScreenLinkPanel } from '../view/secondaryscreenlinkpanel';
import { MedAccessConstraintsChild } from '../view/medaccessconstraintschild';
import { MedReconcileChild } from '../view/medreconcilechild';
import { AppLoadService }from "epma-platform/services";
import { OrderSetSecMezzanine } from '../view/OrderSetSecMezzanine';
import { OrderSetChildfooter } from '../view/OrderSetChildfooter';
import { DisplayOtherInformationLineItemPipe1, DisplayPrescriptionLineItemPipe1, InfoIconPipe } from 'src/app/product/shared/pipes/medicationconverters.pipe';
import { ACNode } from 'src/app/shared/epma-platform/controls/epma-iactivityconsideration/epma-iactivityconsideration.component';
export class IPPMABaseVM extends LzoWizardVMBase implements IViewModelBase {
  public oMulticomponentVM: MulticomponentVM;
  public IsTechValMandatory: boolean = false;
  public cbMedAlreadyPresOK: boolean = false;
  public DefaultTabload : BehaviorSubject<any> = new BehaviorSubject(null);
  DefaultTabloadObs = this.DefaultTabload.asObservable();
  // selectrow:any;
  public select : BehaviorSubject<any> = new BehaviorSubject(null);
  selectrow = this.select.asObservable();
  public colorChange : BehaviorSubject<any> = new BehaviorSubject(null);
  colorChange_observable = this.colorChange.asObservable();
  public oConflictsVM: ObservableCollection<ConflictsVM>;
  private profile: ProfileFactoryType = new ProfileFactoryType();
  //Revisit required, in silverlight there is no new instantiation.
  private a: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
  private b: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
  private c: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
  private d: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
  private h: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
  private ab: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
  private s: string;
  private k: string;
  private p: boolean = false;
  private drug: boolean = false;
  private cDisCan: string = '\0';
  private Q: boolean = false;
  private l: string;
  private StackChkBoxWidth: string;
  private IPLockCheck: boolean = false;
  private m: string;
  private sIppSealRecordList: string;
  private sIppSealImageList: string;
  private nHitCount: number = 0;
  private _resolveGridNoRecordsText: string = 'Loading...';
  private medsReconcile: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
  private medsCopyReconcile: ObservableCollection<PrescriptionItemVM>;
  public oLstItemReconcileCombo: ObservableCollection<CListItem> =
    new ObservableCollection<CListItem>();
  private IsReconcileMessage: boolean = false;
  private IsIteminReorder: boolean = false;
  private IsReconNextPrev: boolean = false;
  public IsFinishNow: boolean = false;
  public IsFinish: boolean = false;
  public IsreconcileClick: boolean = false;
  public ReconcileforIP: boolean = false;
  private medsReorder: ObservableCollection<PrescriptionItemVM>;
  private medsPrint: ObservableCollection<PrescriptionItemVM>;
  private quickSelectVM: MedQuickSelectVM;
  private isPrint: boolean = false;
  private isConsolidatedPrint: boolean = false;
  private DiscisPrint: boolean = false;
  private DiscisConsolidatedPrint: boolean = false;
  private printerPolicy: string;
  private consolidatedPrinterPolicy: string;
  private DiscprinterPolicy: string;
  private DiscconsolidatedPrinterPolicy: string;
  //public delegate void TeamBasedSearchDrugCatalogueDelegate();
  public TeamBasedSearchDrugCatalogueCompleted: Function;
  private consolidatedtemplate: string;
  private consolidatedtemplateName: string;
  private Discconsolidatedtemplate: string;
  private DiscconsolidatedtemplateName: string;
  public sStatTypOIDs: StringBuilder = new StringBuilder(',');
  public sStatTypNames: StringBuilder = new StringBuilder(',');
  private _dischargeLeaveDateDisplayText: string;
  private _dischargeLeaveDate: DateTime = DateTime.MinValue;
  private _leaveReturnDTTM: DateTime = DateTime.MinValue;
  private _medicationClerkingSource: ObservableCollection<CListItem>;
  private _dischargeLeaveDateVisiblity: Visibility;
  private _medicationClerkingSourceVisibility: Visibility;
  private _resolveTabDisplayText: string;
  private _defaultStationaryType: CListItem;
  private _stationaryTypes: ObservableCollection<CListItem>;
  private printDisInstruction: string;
  private printDisInstComments: string;
  private stationaryTYPOIDs: string;
  private stationaryTYPNames: string;
  public isCancelDisConVerify: boolean = false;
  private bIsReplacement: boolean = false;
  private teamMembersOID: number[];
  private sLeaveDTTM: string;
  private sDischargeDTTM: string;
  StatWithOutPrntPlcy: StringBuilder = new StringBuilder();
  StatWithPrntPlcy: StringBuilder = new StringBuilder();
  private prescriptionRes: ObservableCollection<IPPMAManagePrescSer.PrescriptionResponse>;
  public objFormViewer: medFormViewer;
  private oAppDialogWindow: ChildWindow;
  private oAppDialogWindow1: ChildWindow;
  omedNonFormulary: medNonFormulary;
  private oChildWindow: ChildWindow;
  oMedReconcile: MedReconcileChild; //Not Required for LHS. To be Re-Visited.
  //private oMeduserteam: meduserteam; //Not Required for LHS. To be Re-Visited.
  IsActivityConsiderationOpened: boolean = false;
  bFinalClose: boolean = false;
  public ActionValue: string;
  sPrescriptionItemOIDsPrn: string = String.Empty;
  sPresOIDPrn: string = String.Empty;
  FlagSubmitCheck: boolean = false;
  public sPresOIDDisSum: number = 0;
  private _CopyAcrossPresType: string;
  public IsDurationOnlyChanged: boolean = false;
  public IsAmendUpdateOnNonIP: boolean = false;
  public IsReasonforModficationChanged: boolean = false;
  public orsseqcount: number = 1;
  public represcseqcount: number = 1;
  public nonformokclick: boolean = false;
  public MCIlink_click: boolean = false;
  public UpdPresitemsOids: string = String.Empty;
  public IsInprogressDRC: boolean = false;
  oItemVM: PrescriptionItemVM;
  PrescribingConfig: ProfileFactoryType;
  PrescribingConfigPre: ProfileFactoryType;
  public sitemname: string = String.Empty;
  private IsPrescribeInProgress: boolean = false;
  public blMaxMsgFlag: boolean = false;
  //public delegate void DlgtReconcileReason();
  public OnSelectedReconcileReason: Function;
  //public delegate void DisableLHSFauxTabInMedPres();
  public OnFinishMaxPrescribeDisable: Function;
  public MaxNoOfPrescCounter: number = 0;
  public oIndicationdtl: Indicationdtl;
  public sIsAccessContraint: string;
  public sIsIndicationRequired: string;
  public AAConflict: boolean = false;
  public IsRouteFormDefault: boolean = false;
  ProdOpt: ProdOptBackup;
  public SupplyStatusBackup: string;
  public TrafficSymbolBkup: ConflictIcons;
  //public objMedalready: MedAlreadyPrescribedoption; //Not Required for LHS. To be Re-Visited.
  public bEnableADHOCMCI: boolean = false;
  Addedheader: List<string> = new List<string>();
  firstheader: boolean = true;
  private _alreadyPrescribedItemOID: number = 0;
  public IsResolutionGirdLoading: boolean = false;
  public IsGPConMatchFound: boolean = false;
  public ToAvoiddoubleClick: boolean = false;
  public oDoseCalculationForClone: DoseCalculation;
  public oDoseCalcDefaultForClone: DoseCalcDefault;

  //R/F DF Trans PAN 215
  public SubmitDrugsRetryCount:int32 = 0;
  public SubmitDrugsDone: boolean = true;

  public IsQuickSearchTabFirstVisit4CV=true;
 
  //public delegate void AuthoriseString();
  public AuthoriseStringEvent: Function;
  private _IsFormulary: boolean = false;
  private _PresItemName: string;
  private _IsSlotCharConfigLoaded: boolean = false;
  private _IsConflictConfigLoaded: AsyncCallStatus =
    AsyncCallStatus.YetToTrigger;
    //Siva recommended
    public IsCatalogue : number = 0;
  rteLoaded: boolean = false;
  refreshIntervalId: any;
  refreshIntervalId1: any;
  private get IsConflictConfigLoaded(): AsyncCallStatus {
    return this._IsConflictConfigLoaded;
  }
  private set IsConflictConfigLoaded(value: AsyncCallStatus) {
    if (value != this._IsConflictConfigLoaded) {
      this._IsConflictConfigLoaded = value;
      if (!this.IsTypeInDrug) {
        this.GetDrugDetails(this._IsFormulary, this._PresItemName);
      }
    }
  }
  public FirstDoseStepped: string;
  public FirstSTATDoseUom: CListItem;
  public IsSteppedScheduleDTTM: DateTime = DateTime.MinValue;
  private _IsFollowUpSTATDRCDoseType: boolean = false;
  public get IsFollowUpSTATDRCDoseType(): boolean {
    return this._IsFollowUpSTATDRCDoseType;
  }
  public set IsFollowUpSTATDRCDoseType(value: boolean) {
    if (this._IsFollowUpSTATDRCDoseType != value) {
      this._IsFollowUpSTATDRCDoseType = value;
    }
  }
  private _ReviewAfterMandatory: boolean = false;
  public get ReviewAfterMandatory(): boolean {
    return this._ReviewAfterMandatory;
  }
  public set ReviewAfterMandatory(value: boolean) {
    if (value != this._ReviewAfterMandatory) {
      this._ReviewAfterMandatory = value;
    }
  }
  //RR Amend link PresChart
  private _IsAmendFromPresChartAllergyPop:boolean=false;
  public get IsAmendFromPresChartAllergyPop():boolean{
    return this._IsAmendFromPresChartAllergyPop;
  }
  public set IsAmendFromPresChartAllergyPop(value:boolean)
  {
    if(value!=this._IsAmendFromPresChartAllergyPop)
      {
        this._IsAmendFromPresChartAllergyPop=value;
      }
  }
  private PresItemStatus: string = String.Empty;
  private AuthRoleOID: string = String.Empty;
  private _IsStationaryTypeLoaded: AsyncCallStatus =
    AsyncCallStatus.YetToTrigger;
  private get IsStationaryTypeLoaded(): AsyncCallStatus {
    return this._IsStationaryTypeLoaded;
  }
  private set IsStationaryTypeLoaded(value: AsyncCallStatus) {
    if (value != this._IsStationaryTypeLoaded) {
      this._IsStationaryTypeLoaded = value;
      if (!this.IsTypeInDrug)
        this.GetDrugDetails(this._IsFormulary, this._PresItemName);
    }
  }
  public objadhocMCItems: ObservableCollection<PrescriptionItemVM>;
  private _InfusionContinousSeq: InfContinousSequentail;
  public get InfusionContinousSeq(): InfContinousSequentail {
    return this._InfusionContinousSeq;
  }
  public set InfusionContinousSeq(value: InfContinousSequentail) {
    if (this._InfusionContinousSeq != value) {
      this._InfusionContinousSeq = value;
      //super.OnPropertyChanged("InfusionContinousSeq");
    }
  }
  _EncDockerPanelHeight: number = 0;
  public get EncDockerPanelHeight(): number {
    return this._EncDockerPanelHeight;
  }
  public set EncDockerPanelHeight(value: number) {
    this._EncDockerPanelHeight = value;
    //OnPropertyChanged("EncDockerPanelHeight");
  }
  private _IsOtherClick: boolean = false;
  public get IsOtherClick(): boolean {
    return this._IsOtherClick;
  }
  public set IsOtherClick(value: boolean) {
    this._IsOtherClick = value;
  }
  public bIsShowMessage: boolean = false;
  private _ClinicalEncounterOID: string;
  public get ClinicalEncounterOID(): string {
    return this._ClinicalEncounterOID;
  }
  public set ClinicalEncounterOID(value: string) {
    if (this._ClinicalEncounterOID != value) {
      this._ClinicalEncounterOID = value;
      //OnPropertyChanged("ClinicalEncounterOID");
    }
  }
  public oDrugItemInputData: DrugItemInputData;
  public oSecChild: MedSecondaryTabChild;
  public oORSChild: OrderSetSecMezzanine; //Not Required for LHS. To be Re-Visited.
  Isauthorise: string = String.Empty;
  public GPConnectConfigPrescTypes: string[] = [];
  public ReorderSeqItemsCount: number = 0;
  private ReorderSeqItemIndex: number = -1;
  private ReorderSeqItemParentItemOID: number = 0;
  private IsReorderingSeqItems: boolean = false;
  public IsNonSequentialitem: boolean = false;
  private sPrescriptionType: string = String.Empty;
  public ReorderSequentialItem(oPresItem: PrescriptionItemVM): void {
    if (oPresItem != null) {
      this.IsReorderingSeqItems = true;
      this.ReorderSeqItemIndex = 1;
      this.IsNonSequentialitem = false;
      if (this.InfusionContinousSeq == null) {
        this.reorderseqcount = 0;
      } else {
        if (PatientContext.PrescriptionType == PrescriptionTypes.Inpatient) {
          this.reorderseqcount =
            this.InfusionContinousSeq.IsCurrentgrdResolveIndex + 1;
        } else {
          if (this.InfusionContinousSeq.IsPreviousationamend) {
            this.reorderseqcount =
              this.InfusionContinousSeq.IsCurrentgrdResolveIndex + 2;
          } else {
            this.reorderseqcount =
              this.InfusionContinousSeq.IsCurrentgrdResolveIndex + 1;
          }
        }
      }
      this.ReorderSeqItemParentItemOID =
        oPresItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID;
      if (oPresItem.PrescriptionType != null) {
        let oAllItems: ObservableCollection<PrescriptionItemVM> =
          new ObservableCollection<PrescriptionItemVM>();
        this.sPrescriptionType = oPresItem.PrescriptionType;
        switch (oPresItem.PrescriptionType) {
          case PrescriptionTypes.Inpatient:
            oAllItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsInPatient.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID ==
                  this.ReorderSeqItemParentItemOID
              )
            );
            break;
          case PrescriptionTypes.Discharge:
            oAllItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsDischarge.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID ==
                  this.ReorderSeqItemParentItemOID
              )
            );
            break;
          case PrescriptionTypes.Leave:
            oAllItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsLeave.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID ==
                  this.ReorderSeqItemParentItemOID
              )
            );
            break;
          case PrescriptionTypes.Outpatient:
            oAllItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsOutPatient.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID ==
                  this.ReorderSeqItemParentItemOID
              )
            );
            break;
          case PrescriptionTypes.Clerking:
            oAllItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsClerked.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID ==
                  this.ReorderSeqItemParentItemOID
              )
            );
            break;
        }
        if (oAllItems != null) {
          this.ReorderSeqItemsCount = oAllItems.Count;
        }
      }
    } else {
      this.ReorderSeqItemIndex++;
      if (this.ReorderSeqItemIndex == this.ReorderSeqItemsCount) {
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Clerking
          ) == 0
        ) {
          Busyindicator.SetStatusIdle('SequentialReorder');
        }
        this.IsReorderingSeqItems = false;
      }
    }
    if (this.ReorderSeqItemIndex <= this.ReorderSeqItemsCount) {
      oPresItem = null;
      switch (this.sPrescriptionType) {
        case PrescriptionTypes.Inpatient:
          oPresItem = this.MedsInPatient.Where(
            (c) =>
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID ==
                this.ReorderSeqItemParentItemOID &&
              (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                '1'
              ) ||
                (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                  '0'
                ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType ==
                    CConstants.Precatalog)) &&
              c.PrescriptionItemStatus != 'MEDStatus3' &&
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder == this.ReorderSeqItemIndex
          ).FirstOrDefault();
          break;
        case PrescriptionTypes.Discharge:
          oPresItem = this.MedsDischarge.Where(
            (c) =>
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID ==
                this.ReorderSeqItemParentItemOID &&
              (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                '1'
              ) ||
                (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                  '0'
                ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType ==
                    CConstants.Precatalog)) &&
              c.PrescriptionItemStatus != 'MEDStatus3' &&
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder == this.ReorderSeqItemIndex
          ).FirstOrDefault();
          break;
        case PrescriptionTypes.Leave:
          oPresItem = this.MedsLeave.Where(
            (c) =>
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID ==
                this.ReorderSeqItemParentItemOID &&
              (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                '1'
              ) ||
                (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                  '0'
                ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType ==
                    CConstants.Precatalog)) &&
              c.PrescriptionItemStatus != 'MEDStatus3' &&
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder == this.ReorderSeqItemIndex
          ).FirstOrDefault();
          break;
        case PrescriptionTypes.Outpatient:
          oPresItem = this.MedsOutPatient.Where(
            (c) =>
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID ==
                this.ReorderSeqItemParentItemOID &&
              (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                '1'
              ) ||
                (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                  '0'
                ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType ==
                    CConstants.Precatalog)) &&
              c.PrescriptionItemStatus != 'MEDStatus3' &&
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder == this.ReorderSeqItemIndex
          ).FirstOrDefault();
          break;
        case PrescriptionTypes.Clerking:
          oPresItem = this.MedsClerked.Where(
            (c) =>
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID ==
                this.ReorderSeqItemParentItemOID &&
              (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                '1'
              ) ||
                (c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                  '0'
                ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType ==
                    CConstants.Precatalog)) &&
              c.PrescriptionItemStatus != 'MEDStatus3' &&
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder == this.ReorderSeqItemIndex
          ).FirstOrDefault();
          break;
      }
    }
    if (oPresItem != null) {
      oPresItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber = 0;
      if (
        oPresItem.FormViewerDetails.BasicDetails.InfusionDetails
          .SequentialItemOrder == 1
      ) {
        oPresItem.FormViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem =
          true;
      }
      this.PrescribeExistingItem(oPresItem, ActivityTypes.Reorder);
    } else if (oPresItem == null) {
      if (this.IsReorderingSeqItems) {
        this.ReorderSequentialItem(null);
      }
      Busyindicator.SetStatusIdle('SequentialReorder');
    }
  }
  public DeactivatedSequentialItem(oPresItem: PrescriptionItemVM): void {
    let oDeactivatedItems: ObservableCollection<PrescriptionItemVM> =
      new ObservableCollection<PrescriptionItemVM>();
    if (oPresItem != null) {
      let ReorderSeqItemParentItemOID: number =
        oPresItem.FormViewerDetails.BasicDetails.InfusionDetails
          .ParentPrescriptionItemOID;
      if (oPresItem.PrescriptionType != null) {
        switch (oPresItem.PrescriptionType) {
          case PrescriptionTypes.Inpatient:
            oDeactivatedItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsInPatient.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID == ReorderSeqItemParentItemOID &&
                  c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                    '0'
                  ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType !=
                    CConstants.Precatalog
              )
            );
            break;
          case PrescriptionTypes.Discharge:
            oDeactivatedItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsDischarge.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID == ReorderSeqItemParentItemOID &&
                  c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                    '0'
                  ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType !=
                    CConstants.Precatalog
              )
            );
            break;
          case PrescriptionTypes.Leave:
            oDeactivatedItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsLeave.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID == ReorderSeqItemParentItemOID &&
                  c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                    '0'
                  ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType !=
                    CConstants.Precatalog
              )
            );
            break;
          case PrescriptionTypes.Outpatient:
            oDeactivatedItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsOutPatient.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID == ReorderSeqItemParentItemOID &&
                  c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                    '0'
                  ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType !=
                    CConstants.Precatalog
              )
            );
            break;
          case PrescriptionTypes.Clerking:
            oDeactivatedItems = new ObservableCollection<PrescriptionItemVM>(
              this.MedsClerked.Where(
                (c) =>
                  c.FormViewerDetails.BasicDetails.InfusionDetails
                    .ParentPrescriptionItemOID == ReorderSeqItemParentItemOID &&
                  c.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
                    '0'
                  ) &&
                  c.FormViewerDetails.BasicDetails.IdentifyingType !=
                    CConstants.Precatalog
              )
            );
            break;
        }
      }
      if (oDeactivatedItems != null) {
        if (oDeactivatedItems.Count > 0) {
          let deactivateditem: string = String.Empty;
          for (let i: number = 0; i < oDeactivatedItems.Count; i++) {
            if (String.IsNullOrEmpty(deactivateditem)) {
              deactivateditem =
                oDeactivatedItems[i].FormViewerDetails.BasicDetails
                  .IdentifyingName;
            } else {
              deactivateditem +=
                ',' +
                oDeactivatedItems[i].FormViewerDetails.BasicDetails
                  .IdentifyingName;
            }
          }
          let oMsgBox: iMessageBox = new iMessageBox();
          oMsgBox.Title = 'Lorenzo';
          oMsgBox.MessageButton = MessageBoxButton.OK;
          oMsgBox.IconType = MessageBoxType.Information;
          oMsgBox.Message =
            deactivateditem +
            ' ' +
            Resource.Infusion.Reorderdeactivatedsequentialmul_Message;
          oMsgBox.Show();
          Busyindicator.SetStatusIdle('SequentialReorder');
        }
      }
    }
  }
  public LastInfusionGroupSequenceNo: number = 0;
  public OriginalLastInfusionGroupSequence: number = 0;
  public oTempPrescDisCancelItemVM: List<PrescriptionItemVM> = null;
  public bAlreadyWebMethodInvoked: boolean = false;
  public UnHoldSeqInprogress: boolean = false;
  public HoldSeqItemIndex: number = -1;
  public PreviousSeqPrescItemOID: number = 0;
  public HoldSeqItemLists: ObservableCollection<PrescriptionItemVM> = null;
  public GetNextHoldSeqitem: ObservableCollection<PrescriptionItemVM> = null;
  public HoldSeqItemsCount: number = 0;
  public get CopyAcrossPresType(): string {
    return this._CopyAcrossPresType;
  }
  public set CopyAcrossPresType(value: string) {
    this._CopyAcrossPresType = value;
    //OnPropertyChanged("CopyAcrossPresType");
  }
  private _EnableFauxTabs: boolean = false;
  public get EnableFauxTabs(): boolean {
    return this._EnableFauxTabs;
  }
  public set EnableFauxTabs(value: boolean) {
    this._EnableFauxTabs = value;
    //OnPropertyChanged("EnableFauxTabs");
  }
  private _IsTypeInDrug: boolean = false;
  public get IsTypeInDrug(): boolean {
    return this._IsTypeInDrug;
  }
  public set IsTypeInDrug(value: boolean) {
    this._IsTypeInDrug = value;
    //OnPropertyChanged("_IsTypeInDrug");
  }
  public get DischargeLeaveDateDisplayText(): string {
    return this._dischargeLeaveDateDisplayText;
  }
  public set DischargeLeaveDateDisplayText(value: string) {
    this._dischargeLeaveDateDisplayText = value;
    //OnPropertyChanged("DischargeLeaveDateDisplayText");
  }
  public get DischargeLeaveDTTM(): DateTime {
    return this._dischargeLeaveDate;
  }
  public set DischargeLeaveDTTM(value: DateTime) {
    this._dischargeLeaveDate = value;
    //OnPropertyChanged("DischargeLeaveDTTM");
  }
  public get LeaveReturnDTTM(): DateTime {
    return this._leaveReturnDTTM;
  }
  public set LeaveReturnDTTM(value: DateTime) {
    this._leaveReturnDTTM = value;
    //OnPropertyChanged("LeaveReturnDTTM");
  }
  public get MedicationClerkingSource(): ObservableCollection<CListItem> {
    return this._medicationClerkingSource;
  }
  public set MedicationClerkingSource(value: ObservableCollection<CListItem>) {
    this._medicationClerkingSource = value;
    //OnPropertyChanged("MedicationClerkingSource");
  }
  public get DischargeLeaveDateVisiblity(): Visibility {
    return this._dischargeLeaveDateVisiblity;
  }
  public set DischargeLeaveDateVisiblity(value: Visibility) {
    this._dischargeLeaveDateVisiblity = value;
    //OnPropertyChanged("DischargeLeaveDateVisiblity");
  }
  public get MedicationClerkingSourceVisibility(): Visibility {
    return this._medicationClerkingSourceVisibility;
  }
  public set MedicationClerkingSourceVisibility(value: Visibility) {
    this._medicationClerkingSourceVisibility = value;
    //OnPropertyChanged("MedicationClerkingSourceVisibility");
  }
  public get ResolveTabDisplayText(): string {
    return this._resolveTabDisplayText;
  }
  public set ResolveTabDisplayText(value: string) {
    if (!ObjectHelper.ReferenceEquals(this._resolveTabDisplayText, value)) {
      this._resolveTabDisplayText = value;
      //OnPropertyChanged("ResolveTabDisplayText");
    }
  }
  public get DefaultStationaryType(): CListItem {
    return this._defaultStationaryType;
  }
  public set DefaultStationaryType(value: CListItem) {
    this._defaultStationaryType = value;
    //OnPropertyChanged("DefaultStationaryType");
  }
  public get StationaryTypes(): ObservableCollection<CListItem> {
    return this._stationaryTypes;
  }
  public set StationaryTypes(value: ObservableCollection<CListItem>) {
    this._stationaryTypes = value;
    //OnPropertyChanged("StationaryTypes");
  }
  public get SecondaryTabDetails(): string {
    return this.s;
  }
  public set SecondaryTabDetails(value: string) {
    this.s = value;
  }
  public get IppSealRecordList(): string {
    return this.sIppSealRecordList;
  }
  public set IppSealRecordList(value: string) {
    this.sIppSealRecordList = value;
  }
  public get IppSealImageList(): string {
    return this.sIppSealImageList;
  }
  public set IppSealImageList(value: string) {
    this.sIppSealImageList = value;
  }
  public get HitCount(): number {
    return this.nHitCount;
  }
  public set HitCount(value: number) {
    this.nHitCount = value;
  }
  private _IsSupplyRequestInitiated: boolean = false;
  public get IsSupplyRequestInitiated(): boolean {
    return this._IsSupplyRequestInitiated;
  }
  public set IsSupplyRequestInitiated(value: boolean) {
    if (this._IsSupplyRequestInitiated != value) {
      this._IsSupplyRequestInitiated = value;
      if (this.IsSupplyRequestInitiated) {
        this.MedsResolve.Where(
          (x) =>
            x.IsSupplyRequestedEnable &&
            !x.IsOriginalSupplyRequested &&
            !x.IsWardStock
        ).forEach((obj) => {
          obj.IsSupplyRequested = true;
        });
      } else {
        this.MedsResolve.Where(
          (x) =>
            x.IsSupplyRequestedEnable &&
            !x.IsOriginalSupplyRequested &&
            !x.IsWardStock
        ).forEach((obj) => {
          obj.IsSupplyRequested = false;
        });
      }
      //OnPropertyChanged("IsSupplyRequestInitiated");
    }
  }
  private _SupplyRequestVisibility: Visibility = Visibility.Collapsed;
  public get SupplyRequestVisibility(): Visibility {
    return this._SupplyRequestVisibility;
  }
  public set SupplyRequestVisibility(value: Visibility) {
    if (this._SupplyRequestVisibility != value) {
      this._SupplyRequestVisibility = value;
      //OnPropertyChanged("SupplyRequestVisibility");
    }
  }
  _IsDispensingEnabled: boolean = false;
  public get IsDispensingEnabled(): boolean {
    return this._IsDispensingEnabled;
  }
  public set IsDispensingEnabled(value: boolean) {
    if (this._IsDispensingEnabled != value) {
      this._IsDispensingEnabled = value;
      //OnPropertyChanged("IsDispensingEnabled");
    }
  }
  public get IsDisCanChecked(): boolean {
    return this.p;
  }
  public set IsDisCanChecked(value: boolean) {
    if (this.p != value) {
      this.p = value;
      //OnPropertyChanged("IsDisCanChecked");
      if (this.IsDisCanChecked && !this.IsDisCompletedChecked) {
        this.ProfileDiscontinuedDrugFlag = '1';
        this.cDisCan = '5';
      } else if (this.IsDisCompletedChecked && !this.IsDisCanChecked) {
        this.ProfileDiscontinuedDrugFlag = '7';
        this.cDisCan = '5';
      } else if (!this.IsDisCompletedChecked && !this.IsDisCanChecked) {
        this.ProfileDiscontinuedDrugFlag = 'X';
        this.cDisCan = '5';
      } else if (this.IsDisCompletedChecked && this.IsDisCanChecked) {
        this.cDisCan = 'V';
      }
      if (this.p) {
        Busyindicator.SetStatusBusy('checked', true);
        this.AppendDisCanItems(this.cDisCan);
      } else {
        Busyindicator.SetStatusBusy('unchecked', true);
        this.RemoveDisCanItems(this.cDisCan);
      }
    }
  }
  public get IsDisCompletedChecked(): boolean {
    return this.drug;
  }
  public set IsDisCompletedChecked(value: boolean) {
    if (this.drug != value) {
      this.drug = value;
      //OnPropertyChanged("IsDisCompletedChecked");
      if (this.IsDisCanChecked && !this.IsDisCompletedChecked) {
        this.ProfileDiscontinuedDrugFlag = '1';
        this.cDisCan = 'S';
      } else if (this.IsDisCompletedChecked && !this.IsDisCanChecked) {
        this.ProfileDiscontinuedDrugFlag = '7';
        this.cDisCan = 'S';
      } else if (!this.IsDisCompletedChecked && !this.IsDisCanChecked) {
        this.ProfileDiscontinuedDrugFlag = 'X';
        this.cDisCan = 'S';
      } else if (this.IsDisCompletedChecked && this.IsDisCanChecked) {
        this.cDisCan = 'V';
      }
      if (this.drug) {
        Busyindicator.SetStatusBusy('DISCOmchecked', true);
        this.AppendDisCanItems(this.cDisCan);
      } else {
        Busyindicator.SetStatusBusy('DISCOmunchecked', true);
        this.RemoveDisCanItems(this.cDisCan);
      }
    }
  }
  public get ProfileDiscontinuedDrugFlag(): string {
    return this.k;
  }
  public set ProfileDiscontinuedDrugFlag(value: string) {
    this.k = value;
    //OnPropertyChanged("ProfileDiscontinuedDrugFlag");
  }
  public get CheckBoxGroupStackWidth(): string {
    return this.StackChkBoxWidth;
  }
  public set CheckBoxGroupStackWidth(value: string) {
    if (this.StackChkBoxWidth != value) {
      this.StackChkBoxWidth = value;
      //OnPropertyChanged("CheckBoxGroupStackWidth");
    }
  }
  public ViewDiscontinuedDrugText: string;
  // public get ViewDiscontinuedDrugText(): string {
  //   return this.l;
  // }
  // public set ViewDiscontinuedDrugText(value: string) {
  //   console.log('ViewDiscontinuedDrugText setter...', value);
  //   if (this.l != value) {
  //     this.l = value;
  //     //OnPropertyChanged("ViewDiscontinuedDrugText");
  //   }
  // }
  public ViewDiscontinuedDrugtooltip: string;
  // public get ViewDiscontinuedDrugtooltip(): string {
  //   return this.l;
  // }
  // public set ViewDiscontinuedDrugtooltip(value: string) {
  //   if (this.l != value) {
  //     this.l = value;
  //     //OnPropertyChanged("ViewDiscontinuedDrugtooltip");
  //   }
  // }
  public ViewCompletedDrugText: string;
  // public get ViewCompletedDrugText(): string {
  //   return this.l;
  // }
  // public set ViewCompletedDrugText(value: string) {
  //   if (this.l != value) {
  //     this.l = value;
  //     //OnPropertyChanged("ViewCompletedDrugText");
  //   }
  // }
  public ViewCompletedDrugtooltip: string;
  // public get ViewCompletedDrugtooltip(): string {
  //   return this.l;
  // }
  // public set ViewCompletedDrugtooltip(value: string) {
  //   if (this.l != value) {
  //     this.l = value;
  //     //OnPropertyChanged("ViewCompletedDrugtooltip");
  //   }
  // }
  public ViewDisComp72HRs: string;
  // public get ViewDisComp72HRs(): string {
  //   return this.l;
  // }
  // public set ViewDisComp72HRs(value: string) {
  //   if (this.l != value) {
  //     this.l = value;
  //     //OnPropertyChanged("ViewDisComp72HRs");
  //   }
  // }
  private _ViewDisComp72HRsLHS: string;
  public get ViewDisComp72HRsLHS(): string {
    return this._ViewDisComp72HRsLHS;
  }
  public set ViewDisComp72HRsLHS(value: string) {
    if (this._ViewDisComp72HRsLHS != value) {
      this._ViewDisComp72HRsLHS = value;
      //OnPropertyChanged("ViewDisComp72HRsLHS");
    }
  }
  private _CompletedByPrescriberText: string;
  private _CompletedByPrescriberToolTip: string;
  private _IsCompletedByPrescriberBoxChecked: boolean = false;
  private _CompletedByPrescriberVisible: Visibility;
  private _PrescriptionStatusDisplayTextVisibility: Visibility =
    Visibility.Collapsed;
  private _PrescriptionStatusDisplayText: string;
  private _ColorCompletedByPrescriberVisible: string = '#FFE0EFF1';
  public get CompletedByPrescriberText(): string {
    return this._CompletedByPrescriberText;
  }
  public set CompletedByPrescriberText(value: string) {
    if (this._CompletedByPrescriberText != value) {
      this._CompletedByPrescriberText = value;
      //OnPropertyChanged("CompletedByPrescriberText");
    }
  }
  public get CompletedByPrescriberToolTip(): string {
    return this._CompletedByPrescriberToolTip;
  }
  public set CompletedByPrescriberToolTip(value: string) {
    if (this._CompletedByPrescriberToolTip != value) {
      this._CompletedByPrescriberToolTip = value;
      //OnPropertyChanged("CompletedByPrescriberToolTip");
    }
  }
  public get IsCompletedByPrescriberBoxChecked(): boolean {
    return this._IsCompletedByPrescriberBoxChecked;
  }
  public set IsCompletedByPrescriberBoxChecked(value: boolean) {
    if (this._IsCompletedByPrescriberBoxChecked != value) {
      this._IsCompletedByPrescriberBoxChecked = value;
      if (PatientContext.PrescriptionType == PrescriptionTypes.Discharge) {
        if (this._IsCompletedByPrescriberBoxChecked == true)
          this.ColorCompletedByPrescriberVisible = '#B9FB72';
        else this.ColorCompletedByPrescriberVisible = '#FFE0EFF1';
      }
      //OnPropertyChanged("IsCompletedByPrescriberBoxChecked");
    }
  }
  public IsPatientHTWTUpdated: boolean = false;
  private _IsPatientHeightWTUpdatedChecked: boolean = false;
  public get IsPatientHeightWTUpdatedChecked(): boolean {
    return this._IsPatientHeightWTUpdatedChecked;
  }
  public set IsPatientHeightWTUpdatedChecked(value: boolean) {
    if (this._IsPatientHeightWTUpdatedChecked != value) {
      this._IsPatientHeightWTUpdatedChecked = value;
      //OnPropertyChanged("IsPatientHeightWTUpdatedChecked");
    }
  }
  private _IsRebindResolveGrdForDC: boolean = false;
  public get IsRebindResolveGrdForDC(): boolean {
    return this._IsRebindResolveGrdForDC;
  }
  public set IsRebindResolveGrdForDC(value: boolean) {
    if (this._IsRebindResolveGrdForDC != value) {
      this._IsRebindResolveGrdForDC = value;
    }
  }
  private _GPSummaryViewervisible: Visibility = Visibility.Collapsed;
  public get GPSummaryViewervisible(): Visibility {
    return this._GPSummaryViewervisible;
  }
  public set GPSummaryViewervisible(value: Visibility) {
    this._GPSummaryViewervisible = value;
    //OnPropertyChanged("GPSummaryViewervisible");
  }
  public get CompletedByPrescriberVisible(): Visibility {
    switch (this.AppContext.CACode) {
      case 'MN_MEDCLR':
      case 'MN_MEDCLERKSL_P2':
        this._CompletedByPrescriberVisible = Visibility.Collapsed;
        break;
      case 'MN_MEDLEAVE_P2':
      case 'MN_MEDLEAVESL_P2':
        this._CompletedByPrescriberVisible = Visibility.Collapsed;
        break;
      case 'MN_MEDDISCHARGE_P2':
      case 'MN_MEDDISCHRGESL_P2':
        this.CompletedByPrescriberText = 'Discharge medication list complete';
        this.CompletedByPrescriberToolTip =
          'Discharge medication list complete';
        this._CompletedByPrescriberVisible = Visibility.Visible;
        break;
      case 'MN_MEDOUTPAT_P2':
      case 'MN_MEDOUTPATSL_P2':
        this._CompletedByPrescriberVisible = Visibility.Collapsed;
        break;
      case 'MN_MEDINPAT':
      case 'MN_MEDINPATSL_P2':
        this._CompletedByPrescriberVisible = Visibility.Collapsed;
        break;
      case 'MN_MEDADMINISTRAT_P2':
        this._CompletedByPrescriberVisible = Visibility.Collapsed;
        break;
      case 'RECORDPGDSUPLY':
      case 'MN_RECORDPGDSUPLY_P2':
        this._CompletedByPrescriberVisible = Visibility.Collapsed;
        break;
      default:
        this._CompletedByPrescriberVisible = Visibility.Collapsed;
        break;
    }
    return this._CompletedByPrescriberVisible;
  }
  public set CompletedByPrescriberVisible(value: Visibility) {
    this._CompletedByPrescriberVisible = value;
  }
  public get PrescriptionStatusDisplayTextVisibility(): Visibility {
    return this._PrescriptionStatusDisplayTextVisibility;
  }
  public set PrescriptionStatusDisplayTextVisibility(value: Visibility) {
    this._PrescriptionStatusDisplayTextVisibility = value;
    //OnPropertyChanged("PrescriptionStatusDisplayTextVisibility");
  }
  public get ColorCompletedByPrescriberVisible(): string {
    return this._ColorCompletedByPrescriberVisible;
  }
  public set ColorCompletedByPrescriberVisible(value: string) {
    this._ColorCompletedByPrescriberVisible = value;
    //OnPropertyChanged("ColorCompletedByPrescriberVisible");
  }
  public get PrescriptionStatusDisplayText(): string {
    return this._PrescriptionStatusDisplayText;
  }
  public set PrescriptionStatusDisplayText(value: string) {
    this._PrescriptionStatusDisplayText = value;
    //OnPropertyChanged("PrescriptionStatusDisplayText");
  }
  _IsCheckedLaunchIP: boolean = false;
  public get CanLaunchForadminPrescription(): boolean {
    return this._IsCheckedLaunchIP;
  }
  public set CanLaunchForadminPrescription(value: boolean) {
    if (this._IsCheckedLaunchIP != value) {
      this._IsCheckedLaunchIP = value;
      if (
        this._IsCheckedLaunchIP ||
        !String.IsNullOrEmpty(QueryStringInfo.CDCFormCode)
      ) {
        this.IsButtonNextVisible = Visibility.Collapsed;
        this.IsRoadMapVisible = Visibility.Collapsed;
        this.IsButtonFinishNowVisible = Visibility.Collapsed;
        this.IsButtonFinishVisible = Visibility.Visible;
      } else {
        this.IsButtonNextVisible = Visibility.Visible;
        this.IsRoadMapVisible = Visibility.Visible;
        this.IsButtonFinishNowVisible = Visibility.Visible;
        this.IsButtonFinishVisible = Visibility.Collapsed;
      }
      //OnPropertyChanged("CanLaunchForadminPrescription");
    }
  }
  _IsVisibleHWIndicator: Visibility = Visibility.Collapsed;
  public get IsVisibleHWIndicator(): Visibility {
    return this._IsVisibleHWIndicator;
  }
  public set IsVisibleHWIndicator(value: Visibility) {
    if (this._IsVisibleHWIndicator != value) {
      if (
        MedicationCommonProfileData.PrescribeConfig != null &&
        MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc &&
        MedicationCommonProfileData.PrescribeConfig.HeightWeightChangeAlert
      ) {
        this._IsVisibleHWIndicator = value;
      } else {
        this._IsVisibleHWIndicator = Visibility.Collapsed;
      }
      //OnPropertyChanged("IsVisibleHWIndicator");
    }
  }
  _IsVisibleLaunchIP: Visibility = Visibility.Collapsed;
  public get IsVisibleLaunchIP(): Visibility {
    return this._IsVisibleLaunchIP;
  }
  public set IsVisibleLaunchIP(value: Visibility) {
    if (this._IsVisibleLaunchIP != value) {
      this._IsVisibleLaunchIP = value;
      //OnPropertyChanged("IsVisibleLaunchIP");
    }
  }
  private _HeightWeightIndText: string;
  public get HeightWeightIndText(): string {
    return this._HeightWeightIndText;
  }
  public set HeightWeightIndText(value: string) {
    this._HeightWeightIndText = value;
    //OnPropertyChanged("HeightWeightIndText");
  }
  _IsCheckedTmpSave: boolean = false;
  public get CanDoTmpSave(): boolean {
    return this._IsCheckedTmpSave;
  }
  public set CanDoTmpSave(value: boolean) {
    if (this._IsCheckedTmpSave != value) {
      this._IsCheckedTmpSave = value;
      //OnPropertyChanged("CanDoTmpSave");
    }
  }
  private _ChkTmpSaveText: string;
  public get ChkTmpSaveText(): string {
    return this._ChkTmpSaveText;
  }
  public set ChkTmpSaveText(value: string) {
    this._ChkTmpSaveText = value;
    //OnPropertyChanged("ChkTmpSaveText");
  }
  _IsVisibleTmpSave: Visibility = Visibility.Collapsed;
  public get IsVisibleTmpSave(): Visibility {
    return this._IsVisibleTmpSave;
  }
  public set IsVisibleTmpSave(value: Visibility) {
    if (this._IsVisibleTmpSave != value) {
      this._IsVisibleTmpSave = value;
      //OnPropertyChanged("IsVisibleTmpSave");
    }
  }
  public get EncLblDetails(): string {
    return this.m;
  }
  public set EncLblDetails(value: string) {
    if (this.m != value) {
      this.m = value;
      //OnPropertyChanged("EncLblDetails");
    }
  }
  public get ResolveGridNoRecordsText(): string {
    return this._resolveGridNoRecordsText;
  }
  public set ResolveGridNoRecordsText(value: string) {
    this._resolveGridNoRecordsText = value;
    //OnPropertyChanged("ResolveGridNoRecordsText");
  }
  _CanLaunchClerkPrescription: boolean = false;
  public get CanLaunchClerkPrescription(): boolean {
    return this._CanLaunchClerkPrescription;
  }
  public set CanLaunchClerkPrescription(value: boolean) {
    if (this._CanLaunchClerkPrescription != value) {
      this._CanLaunchClerkPrescription = value;
      //OnPropertyChanged("CanLaunchClerkPrescription");
    }
  }
  public get TeamMembersOID(): number[] {
    return this.teamMembersOID;
  }
  public set TeamMembersOID(value: number[]) {
    this.teamMembersOID = value;
  }
  public TeamOId: number = 0;
  public get PrescriptionRes(): ObservableCollection<IPPMAManagePrescSer.PrescriptionResponse> {
    return this.prescriptionRes;
  }
  public set PrescriptionRes(
    value: ObservableCollection<IPPMAManagePrescSer.PrescriptionResponse>
  ) {
    if (this.prescriptionRes != value) {
      this.prescriptionRes = value;
      //OnPropertyChanged("PrescriptionRes");
    }
  }
  private nTabIndex: number = 0;
  public get TabIndex(): number {
    return this.nTabIndex;
  }
  public set TabIndex(value: number) {
    this.nTabIndex = value;
  }
  private _isAdhocMCIClicked: boolean = false;
  public get IsAdhocMCIClicked(): boolean {
    return this._isAdhocMCIClicked;
  }
  public set IsAdhocMCIClicked(value: boolean) {
    this._isAdhocMCIClicked = value;
  }
  public sReviewPeriodAlertItems: string;
  public sTeamOIDs: string;
  public sTeamNames: string;
  public bIsReviewAlertShow: boolean = false;
  private _bIsFormularyChecked: boolean = false;
  public _bIsSearchCatalogueClicked: boolean = false;
  private sNonFormularyCheckedValue: string;
  public get IsFormularyChecked(): boolean {
    return this._bIsFormularyChecked;
  }
  public set IsFormularyChecked(value: boolean) {
    this._bIsFormularyChecked = value;
    if (value) {
      this.sNonFormularyCheckedValue = '1';
      if (this.TabIndex == 0) this.PopulateGrid(this.TabIndex);
    } else {
      this.sNonFormularyCheckedValue = '0';
      if (this.TabIndex == 0) this.PopulateGrid(this.TabIndex);
    }
  }
  public IsFinishClicked: boolean = false;
  public IsSuspendClicked: boolean = false;
  public IsReconcileMsgClicked: boolean = false;
  public IsReconcileMsgShowed: boolean = false;
  public IsReconcileMezLaunched: boolean = false;
  public IsDisCancelprintMsgShowed: boolean = false;
  public IsActiveItemExistsDuringLoad: boolean = false;
  private _IsFormularyCheckedAlternativeOption: boolean = false;
  public get IsFormularyCheckedAlternativeOption(): boolean {
    return this._IsFormularyCheckedAlternativeOption;
  }
  public set IsFormularyCheckedAlternativeOption(value: boolean) {
    this._IsFormularyCheckedAlternativeOption = value;
    if (value) {
      this.sNonFormularyCheckedValue = '1';
      if (this.TabIndex == 2) this.PopulateGrid(this.TabIndex);
    } else {
      this.sNonFormularyCheckedValue = '0';
      if (this.TabIndex == 2) this.PopulateGrid(this.TabIndex);
    }
  }
  private _bIsFormularyCheckedRelated: boolean = false;
  public get IsFormularyCheckedRelated(): boolean {
    return this._bIsFormularyCheckedRelated;
  }
  public set IsFormularyCheckedRelated(value: boolean) {
    this._bIsFormularyCheckedRelated = value;
    if (value) {
      this.sNonFormularyCheckedValue = '1';
      if (this.TabIndex == 1) this.PopulateGrid(this.TabIndex);
    } else {
      this.sNonFormularyCheckedValue = '0';
      if (this.TabIndex == 1) this.PopulateGrid(this.TabIndex);
    }
  }
  private bPackOptionsIsEnabled: boolean = false;
  public get PackOptionsIsEnabled(): boolean {
    return this.bPackOptionsIsEnabled;
  }
  public set PackOptionsIsEnabled(value: boolean) {
    this.bPackOptionsIsEnabled = value;
    //OnPropertyChanged("PackOptionsIsEnabled");
  }
  private bPrescribingOptionsIsEnabled: boolean = false;
  public get PrescribingOptionsIsEnabled(): boolean {
    return this.bPrescribingOptionsIsEnabled;
  }
  public set PrescribingOptionsIsEnabled(value: boolean) {
    this.bPrescribingOptionsIsEnabled = value;
    //OnPropertyChanged("PrescribingOptionsIsEnabled");
  }
  private bLinksIsEnabled: boolean = false;
  public get LinksIsEnabled(): boolean {
    return this.bLinksIsEnabled;
  }
  public set LinksIsEnabled(value: boolean) {
    this.bLinksIsEnabled = value;
    //OnPropertyChanged("LinksIsEnabled");
  }
  private _IsEnableCVSupplyInstruction: boolean = false;
  public get IsEnableCVSupplyInstruction(): boolean {
    return this._IsEnableCVSupplyInstruction;
  }
  public set IsEnableCVSupplyInstruction(value: boolean) {
    if (value != this._IsEnableCVSupplyInstruction) {
      this._IsEnableCVSupplyInstruction = value;
      //OnPropertyChanged("IsEnableCVSupplyInstruction");
    }
  }
  public _AddSupplyInstructionLinkText: string;
  public get AddSupplyInstructionLinkText(): string {
    return this._AddSupplyInstructionLinkText;
  }
  public set AddSupplyInstructionLinkText(value: string) {
    this._AddSupplyInstructionLinkText = value;
    //OnPropertyChanged("AddSupplyInstructionLinkText");
  }
  oMedAccessChild: MedAccessConstraintsChild;
  
  public GpConnectMedicationItem: GPConnectItemVM;
  public PopulateGrid(TabIndx: number): void {
    Busyindicator.SetStatusBusy('secondaryItem');
    let oDetails: string[] = !String.IsNullOrEmpty(this.SecondaryTabDetails)
      ? this.SecondaryTabDetails.Split('~')
      : null;
    switch (TabIndx) {
      case 0:
        if (this.PrescribedOption == null) {
          this.PrescribedOption = new MedicationOptionVM(this);
        }
        this.PrescribedOption.SetMedPrescribedOptionDetails(
          oDetails,
          this.sNonFormularyCheckedValue
        );
        break;
      case 1:
        if (this.RelatedOptions == null)
          this.RelatedOptions = new MedicationOptionVM(this);
        this.RelatedOptions.SetMedRelatedOptionODetails(
          oDetails,
          this.sNonFormularyCheckedValue
        );
        break;
      case 2:
        if (this.AlternateOptions == null)
          this.AlternateOptions = new MedicationOptionVM(this);
        this.AlternateOptions.SetODetails(
          oDetails,
          this.sNonFormularyCheckedValue
        );
        break;
    }
  }
  private _medAlreadyPrescribedOptionList: ObservableCollection<PrescriptionItemVM>;
  public get MedAlreadyPrescribedOptionList(): ObservableCollection<PrescriptionItemVM> {
    return this._medAlreadyPrescribedOptionList;
  }
  public set MedAlreadyPrescribedOptionList(
    value: ObservableCollection<PrescriptionItemVM>
  ) {
    if (this._medAlreadyPrescribedOptionList != value) {
      this._medAlreadyPrescribedOptionList = value;
      //super.OnPropertyChanged("MedAlreadyPrescribedOptionList");
    }
  }
  /*[System.Xml.Serialization.XmlIgnoreAttribute]*/
  public DrugItem: DrugItemInputData;
  private pselectedItem: PrescriptionItemVM;
  public get SelectedPrescribeItem(): PrescriptionItemVM {
    return this.pselectedItem;
  }
  public set SelectedPrescribeItem(value: PrescriptionItemVM) {
    this.pselectedItem = value;
  }
  private oBtnObsrvClick: RelayCommand;
  public get BtnObservationClick(): RelayCommand {
    if (this.oBtnObsrvClick == null) {
      this.oBtnObsrvClick = new RelayCommand((s,e) => {this.OnObservationClick() });
      //this.oBtnObsrvClick = new RelayCommand(this.OnObservationClick);
    }
    return this.oBtnObsrvClick;
  }
  private bPromptIsEnabled: boolean = false;
  public get PromptIsEnabled(): boolean {
    return this.bPromptIsEnabled;
  }
  public set PromptIsEnabled(value: boolean) {
    this.bPromptIsEnabled = value;
    //OnPropertyChanged("PromptIsEnabled");
  }
  private nTypeIndex: number = 0;
  public get TypeIndex(): number {
    return this.nTypeIndex;
  }
  public set TypeIndex(value: number) {
    this.nTypeIndex = value;
  }
  public AuthoriseStringEventCall(): void {
    if (this.AuthoriseStringEvent != null) this.AuthoriseStringEvent();
  }
  public OnObservationClick(): void {
    if (!this.bIsShowMessage) {
      this.bIsShowMessage = true;
      if (
        !UserPermissions.CanViewObservations &&
        !UserPermissions.CanViewResults
      ) {
        iMessageBox.Show(
          'LORENZO',
          'You do not have rights to view observation/results.',
          MessageBoxType.Information,
          MessageBoxButton.OK
        );
      } else {
        if (this.SelectedPrescribeItem != null) {
          if (
            this.SelectedPrescribeItem != null &&
            String.Compare(
              this.SelectedPrescribeItem.LorenzoID,
              CommonFlags.MClorenzoid,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            let oReq: PrescribableDefn.CReqMsgGetDataItem =
              new PrescribableDefn.CReqMsgGetDataItem();
            oReq.oContextInformation = Common.FillContext();
            oReq.IdentifyingOIDBC =
              this.SelectedPrescribeItem.FormViewerDetails.BasicDetails.IdentifyingOID;
            oReq.IdentifyingTypeBC =
              this.SelectedPrescribeItem.FormViewerDetails.BasicDetails.IdentifyingType;
            if (!String.IsNullOrEmpty(this.SelectedPrescribeItem.Itemlist))
              oReq.itemlistBC = this.SelectedPrescribeItem.Itemlist;
            else {
              oReq.PrescriptionitemoidBC =
                this.SelectedPrescribeItem.PrescriptionItemOID;
            }
            oReq.MCVersionNoBC = AppSessionInfo.AMCV;
            let serviceProxy: PrescribableDefn.IPPMAPrescribableDefnWSSoapClient =
              new PrescribableDefn.IPPMAPrescribableDefnWSSoapClient();
            serviceProxy.GetDataItemCompleted = (s, e) => {
              this.serviceProxy_GetDataItemCompleted(s, e);
            };
            serviceProxy.GetDataItemAsync(oReq);
          } else {
            let oReq: PrescribableDefn.CReqMsgGetDataItem =
              new PrescribableDefn.CReqMsgGetDataItem();
            oReq.oContextInformation = Common.FillContext();
            oReq.IdentifyingOIDBC =
              this.SelectedPrescribeItem.FormViewerDetails.BasicDetails.IdentifyingOID;
            oReq.IdentifyingTypeBC =
              this.SelectedPrescribeItem.FormViewerDetails.BasicDetails.IdentifyingType;
            oReq.MCVersionNoBC = AppSessionInfo.AMCV;
            let serviceProxy: PrescribableDefn.IPPMAPrescribableDefnWSSoapClient =
              new PrescribableDefn.IPPMAPrescribableDefnWSSoapClient();
            serviceProxy.GetDataItemCompleted = (s, e) => {
              this.serviceProxy_GetDataItemCompleted(s, e);
            };
            serviceProxy.GetDataItemAsync(oReq);
          }
        }
      }
    }
  }
  serviceProxy_GetDataItemCompleted(
    sender: Object,
    e: PrescribableDefn.GetDataItemCompletedEventArgs
  ): void {
    let dataItemCodes: StringBuilder = new StringBuilder();
    let RdataItemCodes: StringBuilder = new StringBuilder();
    let RequestItemCodes: StringBuilder = new StringBuilder();
    let oRes: PrescribableDefn.CResMsgGetDataItem = e.Result;
    let Identifyingname: string = String.Empty;
    if (
      this.SelectedPrescribeItem != null &&
      this.SelectedPrescribeItem.FormViewerDetails != null &&
      this.SelectedPrescribeItem.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(
        this.SelectedPrescribeItem.FormViewerDetails.BasicDetails
          .IdentifyingName
      )
    )
      Identifyingname =
        this.SelectedPrescribeItem.FormViewerDetails.BasicDetails.IdentifyingName.TrimStart(
          ' '
        );
    let oNoObservationandResultMsg: iMessageBox = new iMessageBox();
    oNoObservationandResultMsg.Title = CConstants.CodingSchemeName;
    oNoObservationandResultMsg.Message =
      CConstants.NOObservationandResult + Identifyingname;
    oNoObservationandResultMsg.IconType = MessageBoxType.Information;
    oNoObservationandResultMsg.MessageButton = MessageBoxButton.OK;
    if (
      oRes != null &&
      oRes.oObservationResult != null &&
      oRes.oObservationResult.Count > 0
    ) {
      let CanlaunchChart: boolean = false;
      oRes.oObservationResult.forEach((obsResItem) => {
        if (
          String.Compare(
            obsResItem.ItemType,
            'Observation',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          if (dataItemCodes.Length == 0) {
            dataItemCodes.Append(obsResItem.ItemCode);
            dataItemCodes.Append('~' + obsResItem.ItemName);
            dataItemCodes.Append('~' + obsResItem.Version);
            dataItemCodes.Append('~' + obsResItem.ItemOID);
            dataItemCodes.Append('~' + obsResItem.ItemType);
          } else {
            dataItemCodes.Append('^');
            dataItemCodes.Append(obsResItem.ItemCode);
            dataItemCodes.Append('~' + obsResItem.ItemName);
            dataItemCodes.Append('~' + obsResItem.Version);
            dataItemCodes.Append('~' + obsResItem.ItemOID);
            dataItemCodes.Append('~' + obsResItem.ItemType);
          }
        } else if (
          String.Compare(
            obsResItem.ItemType,
            'Result',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          if (RdataItemCodes.Length == 0) {
            RdataItemCodes.Append(obsResItem.ItemOID);
          } else {
            RdataItemCodes.Append('^');
            RdataItemCodes.Append(obsResItem.ItemOID);
          }
        } else {
          if (RequestItemCodes.Length == 0) {
            RequestItemCodes.Append(obsResItem.ItemOID);
            RequestItemCodes.Append('~' + obsResItem.ItemName);
            RequestItemCodes.Append('~' + obsResItem.Version);
            RequestItemCodes.Append('~' + obsResItem.ItemOID);
            RequestItemCodes.Append('~' + obsResItem.ItemType);
          } else {
            RequestItemCodes.Append('^');
            RequestItemCodes.Append(obsResItem.ItemOID);
            RequestItemCodes.Append('~' + obsResItem.ItemName);
            RequestItemCodes.Append('~' + obsResItem.Version);
            RequestItemCodes.Append('~' + obsResItem.ItemOID);
            RequestItemCodes.Append('~' + obsResItem.ItemType);
          }
        }
      });
      if (
        (RequestItemCodes != null && RequestItemCodes.Length > 0) ||
        (RdataItemCodes != null && RdataItemCodes.Length > 0) ||
        (dataItemCodes != null && dataItemCodes.Length > 0)
      )
        CanlaunchChart = true;
      if (CanlaunchChart) {
        let sprescriptionItemOID: number = 0;
        if (
          this.SelectedPrescribeItem.PrescriptionItemOID == 0 &&
          this.SelectedPrescribeItem.ActionCode == ActivityTypes.Amend
        ) {
          sprescriptionItemOID =
            this.SelectedPrescribeItem.SourcePrescriptionOid;
        } else
          sprescriptionItemOID = this.SelectedPrescribeItem.PrescriptionItemOID;
        let sArgs = String.Empty;
        let itemname: string = String.Empty;
        if (
          String.Compare(
            this.SelectedPrescribeItem.FormViewerDetails.BasicDetails
              .itemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          itemname =
            this.SelectedPrescribeItem.FormViewerDetails.BasicDetails
              .mCIItemDisplay;
        } else {
          itemname =
            this.SelectedPrescribeItem.FormViewerDetails.BasicDetails
              .IdentifyingName;
        }
        sArgs =
          '&PrescriptionItemOID=' +
          sprescriptionItemOID +
          '&IdentifyingOID=' +
          this.SelectedPrescribeItem.FormViewerDetails.BasicDetails
            .IdentifyingOID +
          '&IdentifyingType=' +
          this.SelectedPrescribeItem.FormViewerDetails.BasicDetails
            .IdentifyingType +
          '&MCVersionNo=' +
          this.SelectedPrescribeItem.FormViewerDetails.BasicDetails.MCVersion +
          '&PrescribedItem=' +
          itemname +
          '&PrescriptionType=' +
          PatientContext.PrescriptionType +
          '&Itemlist=' +
          this.SelectedPrescribeItem.Itemlist +
          '&Observation=' +
          dataItemCodes.ToString() +
          '&Result=' +
          RdataItemCodes.ToString() +
          '&Request=' +
          RequestItemCodes.ToString() +
          '&ISFULLSIZE=' +
          'true';
        this.LaunchWizard("MN_OBSERESULTCHAR_P2", sArgs,2); //Not Required for LHS. To be Re-Visited.
      } else {
        oNoObservationandResultMsg.Show();
        // oNoObservationandResultMsg.MessageBoxClose -= this.oNoObservationandResultMsg_MessageBoxClose;
        oNoObservationandResultMsg.MessageBoxClose = (s, e) => {
          this.oNoObservationandResultMsg_MessageBoxClose(s, e);
        };
        return;
      }
    } else {
      oNoObservationandResultMsg.Show();
      // oNoObservationandResultMsg.MessageBoxClose -= this.oNoObservationandResultMsg_MessageBoxClose;
      oNoObservationandResultMsg.MessageBoxClose = (s, e) => {
        this.oNoObservationandResultMsg_MessageBoxClose(s, e);
      };
      return;
    }
    this.bIsShowMessage = false;
  }
  oNoObservationandResultMsg_MessageBoxClose(
    sender: Object,
    e: MessageEventArgs
  ): void {
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      this.bIsShowMessage = false;
    }
  }
  private _noRecordsText: string = 'Loading...';
  public get NoRecordsText(): string {
    return this._noRecordsText;
  }
  public set NoRecordsText(value: string) {
    this._noRecordsText = value;
    this.ChangeDetection.emit();
    //OnPropertyChanged("NoRecordsText");
  }
  public get MedsClerked(): ObservableCollection<PrescriptionItemVM> {
    return this.a;
  }
  public set MedsClerked(value: ObservableCollection<PrescriptionItemVM>) {
    if (value != this.a) {
      //this.a = value;
      this.a.CopyFrom(value);
      this.ChangeDetection.emit();
      //OnPropertyChanged("MedsClerked");
    }
  }
  public get MedsOutPatient(): ObservableCollection<PrescriptionItemVM> {
    return this.b;
  }
  public set MedsOutPatient(value: ObservableCollection<PrescriptionItemVM>) {
    if (value != this.b) {
      //this.b = value;
      this.b.CopyFrom(value);
      this.ChangeDetection.emit();
      //OnPropertyChanged("MedsOutPatient");
    }
  }
  public get MedsLeave(): ObservableCollection<PrescriptionItemVM> {
    return this.c;
  }
  public set MedsLeave(value: ObservableCollection<PrescriptionItemVM>) {
    if (value != this.c) {
      //this.c = value;
      this.c.CopyFrom(value);
      this.ChangeDetection.emit();
      //OnPropertyChanged("MedsLeave");
    }
  }
  public get MedsDischarge(): ObservableCollection<PrescriptionItemVM> {
    return this.d;
  }
  public set MedsDischarge(value: ObservableCollection<PrescriptionItemVM>) {
    if (value != this.d) {
      //this.d = value;
      this.d.CopyFrom(value);
      //OnPropertyChanged("MedsDischarge");
      this.ChangeDetection.emit();
    }
  }
  public get MedsInPatient(): ObservableCollection<PrescriptionItemVM> {
    return this.h;
  }
  public set MedsInPatient(value: ObservableCollection<PrescriptionItemVM>) {
    if (ObjectHelper.ReferenceEquals(this.h, value) != true) {
      //this.h = value;
      this.h.CopyFrom(value);
      this.ChangeDetection.emit();
      //OnPropertyChanged("MedsInPatient");
    }
  }
  private _GetEncounterCount: number = 0;
  public get GetEncounterCount(): number {
    return this._GetEncounterCount;
  }
  public set GetEncounterCount(value: number) {
    this._GetEncounterCount = value;
    //OnPropertyChanged("_GetEncounterCount");
  }
  private _CurrentEncounterPageIndex: number = 0;
  public get CurrentEncounterPageIndex(): number {
    return this._CurrentEncounterPageIndex;
  }
  public set CurrentEncounterPageIndex(value: number) {
    this._CurrentEncounterPageIndex = value;
    this.PageNavigationText =
      Convert.ToString(this.CurrentEncounterPageIndex) +
      ' of ' +
      Convert.ToString(this.TotalEncounterPages);
    this.GetEncounters();
    //OnPropertyChanged("CurrentEncounterPageIndex");
  }
  private _TotalEncounterPages: number = 1;
  public get TotalEncounterPages(): number {
    return this._TotalEncounterPages;
  }
  public set TotalEncounterPages(value: number) {
    this._TotalEncounterPages = value;
    this.PageNavigationText =
      Convert.ToString(this.CurrentEncounterPageIndex) +
      ' of ' +
      Convert.ToString(this.TotalEncounterPages);
    //OnPropertyChanged("TotalEncounterPages");
  }
  private _PageNavigationText: string;
  public get PageNavigationText(): string {
    return this._PageNavigationText;
  }
  public set PageNavigationText(value: string) {
    this._PageNavigationText = value;
    //OnPropertyChanged("PageNavigationText");
  }
  private _MedsDeletedItemsResolve: ObservableCollection<number>;
  public get MedsDeletedItemsResolve(): ObservableCollection<number> {
    return this._MedsDeletedItemsResolve;
  }
  public set MedsDeletedItemsResolve(value: ObservableCollection<number>) {
    this._MedsDeletedItemsResolve = value;
  }
  public isReconcileserreq: boolean = false;
  public MedsResolvedLoaded: Function;
  public get MedsResolve(): ObservableCollection<PrescriptionItemVM> {
    return this.ab;
  }
  public set MedsResolve(value: ObservableCollection<PrescriptionItemVM>) {
    if (this.ab != value) {
      //this.ab = value;
      if(this.MedsResolvedLoaded) this.MedsResolvedLoaded(value.array.length);
      this.ab.CopyFrom(value);
      this.NotifyPropertyChanged("MedsResolve");
      this.ChangeDetection.emit();
      //OnPropertyChanged("MedsResolve");
    }
  }

  MedsResolveAddCompleted() {
    this.NotifyPropertyChanged("MedsResolve");
  }
  private NotifyPropertyChanged(prop: string) {
    let e:PropertyChangedEventArgs = { PropertyName: prop};
      if (this.PropertyChanged)
        this.PropertyChanged({},e);
  }
  private _represresolve: ObservableCollection<PrescriptionItemVM>;
  public get RepresResolve(): ObservableCollection<PrescriptionItemVM> {
    return this._represresolve;
  }
  public set RepresResolve(value: ObservableCollection<PrescriptionItemVM>) {
    if (this._represresolve != value) {
      this._represresolve = value;
      //OnPropertyChanged("RepresResolve");
    }
  }
  public get MedsReconcile(): ObservableCollection<PrescriptionItemVM> {
    return this.medsReconcile;
  }
  public set MedsReconcile(value: ObservableCollection<PrescriptionItemVM>) {
    if (this.medsReconcile != value) {
      this.medsReconcile.CopyFrom(value);
      //OnPropertyChanged("MedsReconcile");
    }
  }
  public oGrdCols: ObservableCollection<PrescriptionItemVM>;
  public get MedsCopyReconcile(): ObservableCollection<PrescriptionItemVM> {
    return this.medsCopyReconcile;
  }
  public set MedsCopyReconcile(
    value: ObservableCollection<PrescriptionItemVM>
  ) {
    if (this.medsCopyReconcile != value) {
      this.medsCopyReconcile = value;
      //OnPropertyChanged("MedsCopyReconcile");
    }
  }
  public get MedsReorder(): ObservableCollection<PrescriptionItemVM> {
    return this.medsReorder;
  }
  public set MedsReorder(value: ObservableCollection<PrescriptionItemVM>) {
    if (this.medsReorder != value) {
      this.medsReorder = value;
      //OnPropertyChanged("MedsReorder");
    }
  }
  public get MedsPrint(): ObservableCollection<PrescriptionItemVM> {
    return this.medsPrint;
  }
  public set MedsPrint(value: ObservableCollection<PrescriptionItemVM>) {
    if (this.medsPrint != value) {
      this.medsPrint = value;
      //OnPropertyChanged("MedsPrint");
    }
  }
  private _MedsDisCon: ObservableCollection<PrescriptionItemVM>;
  public get MedsDisCon(): ObservableCollection<PrescriptionItemVM> {
    return this._MedsDisCon;
  }
  public set MedsDisCon(value: ObservableCollection<PrescriptionItemVM>) {
    if (this._MedsDisCon != value) {
      this._MedsDisCon = value;
      //OnPropertyChanged("MedsDisCon");
    }
  }
  private _MedsDisCan: ObservableCollection<PrescriptionItemVM>;
  public get MedsDisCan(): ObservableCollection<PrescriptionItemVM> {
    return this._MedsDisCan;
  }
  public set MedsDisCan(value: ObservableCollection<PrescriptionItemVM>) {
    if (this._MedsDisCan != value) {
      this._MedsDisCan = value;
      //OnPropertyChanged("MedsDisCan");
    }
  }
  public get alreadyPrescribedItemOID(): number {
    return this._alreadyPrescribedItemOID;
  }
  public set alreadyPrescribedItemOID(value: number) {
    this._alreadyPrescribedItemOID = value;
  }
  private _isNoMatche: boolean = false;
  public get IsNoMatche(): boolean {
    return this._isNoMatche;
  }
  public set IsNoMatche(value: boolean) {
    this._isNoMatche = value;
    //OnPropertyChanged("IsNoMatche");
  }
  public get PrintDisInstruction(): string {
    return this.printDisInstruction;
  }
  public set PrintDisInstruction(value: string) {
    if (this.printDisInstruction != value) {
      this.printDisInstruction = value;
      //OnPropertyChanged("PrintDisInstruction");
    }
  }
  public get PrintDisInstComments(): string {
    return this.printDisInstComments;
  }
  public set PrintDisInstComments(value: string) {
    if (this.printDisInstComments != value) {
      this.printDisInstComments = value;
      //OnPropertyChanged("PrintDisInstComments");
    }
  }
  public get StationaryTYPOIDs(): string {
    return this.stationaryTYPOIDs;
  }
  public set StationaryTYPOIDs(value: string) {
    if (this.stationaryTYPOIDs != value) {
      this.stationaryTYPOIDs = value;
      //OnPropertyChanged("StationaryTYPOIDs");
    }
  }
  public get StationaryTYPNames(): string {
    return this.stationaryTYPNames;
  }
  public set StationaryTYPNames(value: string) {
    if (this.stationaryTYPNames != value) {
      this.stationaryTYPNames = value;
      //OnPropertyChanged("StationaryTYPNames");
    }
  }
  public get IsPrint(): boolean {
    return this.isPrint;
  }
  public set IsPrint(value: boolean) {
    if (this.isPrint != value) {
      this.isPrint = value;
      //OnPropertyChanged("IsPrint");
    }
  }
  public get IsConsolidatedPrint(): boolean {
    return this.isConsolidatedPrint;
  }
  public set IsConsolidatedPrint(value: boolean) {
    if (this.isConsolidatedPrint != value) {
      this.isConsolidatedPrint = value;
      //OnPropertyChanged("IsConsolidatedPrint");
    }
  }
  public get DiscIsPrint(): boolean {
    return this.DiscisPrint;
  }
  public set DiscIsPrint(value: boolean) {
    if (this.DiscisPrint != value) {
      this.DiscisPrint = value;
      //OnPropertyChanged("DiscIsPrint");
    }
  }
  public get DiscIsConsolidatedPrint(): boolean {
    return this.DiscisConsolidatedPrint;
  }
  public set DiscIsConsolidatedPrint(value: boolean) {
    if (this.DiscisConsolidatedPrint != value) {
      this.DiscisConsolidatedPrint = value;
      //OnPropertyChanged("DiscIsConsolidatedPrint");
    }
  }
  public get PrinterPolicy(): string {
    return this.printerPolicy;
  }
  public set PrinterPolicy(value: string) {
    if (this.printerPolicy != value) {
      this.printerPolicy = value;
      //OnPropertyChanged("PrinterPolicy");
    }
  }
  public get ConsolidatedPrinterPolicy(): string {
    return this.consolidatedPrinterPolicy;
  }
  public set ConsolidatedPrinterPolicy(value: string) {
    if (this.consolidatedPrinterPolicy != value) {
      this.consolidatedPrinterPolicy = value;
      //OnPropertyChanged("ConsolidatedPrinterPolicy");
    }
  }
  public get DiscPrinterPolicy(): string {
    return this.DiscprinterPolicy;
  }
  public set DiscPrinterPolicy(value: string) {
    if (this.DiscprinterPolicy != value) {
      this.DiscprinterPolicy = value;
      //OnPropertyChanged("DiscPrinterPolicy");
    }
  }
  public get DiscConsolidatedPrinterPolicy(): string {
    return this.DiscconsolidatedPrinterPolicy;
  }
  public set DiscConsolidatedPrinterPolicy(value: string) {
    if (this.DiscconsolidatedPrinterPolicy != value) {
      this.DiscconsolidatedPrinterPolicy = value;
      //OnPropertyChanged("DiscConsolidatedPrinterPolicy");
    }
  }
  public get Consolidatedtemplate(): string {
    return this.consolidatedtemplate;
  }
  public set Consolidatedtemplate(value: string) {
    if (this.consolidatedtemplate != value) {
      this.consolidatedtemplate = value;
      //OnPropertyChanged("Consolidatedtemplate");
    }
  }
  public get ConsolidatedtemplateName(): string {
    return this.consolidatedtemplateName;
  }
  public set ConsolidatedtemplateName(value: string) {
    if (this.consolidatedtemplateName != value) {
      this.consolidatedtemplateName = value;
      //OnPropertyChanged("ConsolidatedtemplateName");
    }
  }
  public get DiscConsolidatedtemplate(): string {
    return this.Discconsolidatedtemplate;
  }
  public set DiscConsolidatedtemplate(value: string) {
    if (this.Discconsolidatedtemplate != value) {
      this.Discconsolidatedtemplate = value;
      //OnPropertyChanged("DiscConsolidatedtemplate");
    }
  }
  public get DiscConsolidatedtemplateName(): string {
    return this.DiscconsolidatedtemplateName;
  }
  public set DiscConsolidatedtemplateName(value: string) {
    if (this.DiscconsolidatedtemplateName != value) {
      this.DiscconsolidatedtemplateName = value;
      //OnPropertyChanged("DiscConsolidatedtemplateName");
    }
  }
  public get QuickSelectVM(): MedQuickSelectVM {
    return this.quickSelectVM;
  }
  public set QuickSelectVM(value: MedQuickSelectVM) {
    if (this.quickSelectVM != value) {
      this.quickSelectVM = value;
      //OnPropertyChanged("QuickSelectVM");
    }
  }
  private AltOption: MedicationOptionVM;
  public get AlternateOptions(): MedicationOptionVM {
    return this.AltOption;
  }
  public set AlternateOptions(value: MedicationOptionVM) {
    if (this.AltOption != value) {
      this.AltOption = value;
      //OnPropertyChanged("AlternateOptions");
    }
  }
  ReltOption: MedicationOptionVM;
  public get RelatedOptions(): MedicationOptionVM {
    return this.ReltOption;
  }
  public set RelatedOptions(value: MedicationOptionVM) {
    if (this.ReltOption != value) {
      this.ReltOption = value;
      //OnPropertyChanged("RelatedOptions");
    }
  }
  PresdOption: MedicationOptionVM;
  public get PrescribedOption(): MedicationOptionVM {
    return this.PresdOption;
  }
  public set PrescribedOption(value: MedicationOptionVM) {
    if (this.PresdOption != value) {
      this.PresdOption = value;
      //OnPropertyChanged("PrescribedOption");
    }
  }
  drugPrescriptionOption: MedicationOptionVM;
  public get DrugPrescriptionOption(): MedicationOptionVM {
    return this.drugPrescriptionOption;
  }
  public set DrugPrescriptionOption(value: MedicationOptionVM) {
    if (this.drugPrescriptionOption != value) {
      this.drugPrescriptionOption = value;
      //OnPropertyChanged("DrugPrescriptionOption");
    }
  }
  drugMonograph: MedicationOptionVM;
  public get DrugMonograph(): MedicationOptionVM {
    return this.drugMonograph;
  }
  public set DrugMonograph(value: MedicationOptionVM) {
    if (this.drugMonograph != value) {
      this.drugMonograph = value;
      //OnPropertyChanged("DrugMonograph");
    }
  }
  packOptionItem: MedicationOptionVM;
  public get PackOptionItem(): MedicationOptionVM {
    return this.packOptionItem;
  }
  public set PackOptionItem(value: MedicationOptionVM) {
    if (this.packOptionItem != value) {
      this.packOptionItem = value;
      //OnPropertyChanged("PackOptionItem");
    }
  }
  constructor();
  constructor(sTaskOID?: string);
  constructor(sTaskOID?: string) {
    super(sTaskOID);
    switch (arguments.length) {
      case 0:
        this.EnableFauxTabs = true;
        this.GPConnectGridNoRecordsText = Resource.Medlistdetails.NoRecordsText;
        break;
      case 1:
        //super(sTaskOID);
        this.EnableFauxTabs = true;
        break;
    }
    this.OnInitComplete();
  }

  private SetResolveTabDisplayText(): void {
    switch (ContextInfo.MenuCode) {
      case 'MN_MEDCLR':
      case 'MN_MEDCLERKSL_P2':
        this.ResolveTabDisplayText = 'Clerked medications';
        break;
      case 'MN_MEDLEAVE_P2':
      case 'MN_MEDLEAVESL_P2':
        this.ResolveTabDisplayText = 'Leave medications';
        break;
      case 'MN_MEDDISCHARGE_P2':
      case 'MN_MEDDISCHRGESL_P2':
        this.ResolveTabDisplayText = 'Discharge prescription';
        break;
      case 'MN_MEDOUTPAT_P2':
      case 'MN_MEDOUTPATSL_P2':
        this.ResolveTabDisplayText = 'Outpatient prescription';
        break;
      case 'MN_MEDINPAT':
      case 'MN_MEDINPATSL_P2':
        this.ResolveTabDisplayText = 'Inpatient prescription';
        break;
      case 'MN_MEDADMINISTRAT_P2':
        this.ResolveTabDisplayText = 'Prescription for administration';
        break;
      case 'RECORDPGDSUPLY':
      case 'MN_RECORDPGDSUPLY_P2':
        if (!String.IsNullOrEmpty(PatientContext.EncounterCode)) {
          switch (PatientContext.EncounterCode) {
            case 'CC_INPAT': {
              this.ResolveTabDisplayText = 'Discharge prescription';
              break;
            }
            case 'CC_OUTPAT':
            case 'CC_CONT':
            case 'CC_ACCEM':
            case 'CC_WARDATT': {
              this.ResolveTabDisplayText = 'Outpatient prescription';
              break;
            }
          }
        }
        break;
      default:
        this.ResolveTabDisplayText = 'Medications';
        break;
    }
  }
  private SetTopRightCornerPanel(): void {
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      this.DischargeLeaveDateVisiblity = Visibility.Visible;
      this.MedicationClerkingSourceVisibility = Visibility.Collapsed;
      this.DischargeLeaveDateDisplayText = 'Expected date of discharge';
      MedicationPrescriptionHelper.GetDischargeDate(
        (o, e) => {
            this.PatientDischargeDate_GetDischargeDateCompleted(o, e);
          }
      );
      // MedicationPrescriptionHelper.GetDischargeDate(new EventHandler<ManagePrescSer.GetDischargeDateCompletedEventArgs>(this.PatientDischargeDate_GetDischargeDateCompleted));
    } else if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Leave,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      this.DischargeLeaveDateVisiblity = Visibility.Visible;
      this.MedicationClerkingSourceVisibility = Visibility.Collapsed;
      this.DischargeLeaveDateDisplayText = 'Expected date of patient leave';
      MedicationPrescriptionHelper.GetPatientLeaveByPatDet(
        (o, e) => {
            this.LeaveDate_GetPatientLeaveByPatDetCompleted(o, e);
          }
      );
      // MedicationPrescriptionHelper.GetPatientLeaveByPatDet(new EventHandler<QueryInpatient.GetPatientLeaveByPatDetCompletedEventArgs>(this.LeaveDate_GetPatientLeaveByPatDetCompleted));
    } else {
      this.DischargeLeaveDateVisiblity = Visibility.Collapsed;
      this.MedicationClerkingSourceVisibility = Visibility.Collapsed;
    }
  }
  PatientDischargeDate_GetDischargeDateCompleted(
    sender: Object,
    e: ManagePrescSer.GetDischargeDateCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000038;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:PatientDischargeDate_GetDischargeDateCompleted()';
    if (e.Error == null && e.Result != null) {
      try {
        this.DischargeDTTM = e.Result.DischargeDate;
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          DateTime.NotEquals(this.DischargeDTTM, DateTime.MinValue) &&
          this.DischargeDTTM.Year < DateTime.MaxValue.Year
        )
          this.DischargeLeaveDTTM = this.DischargeDTTM;
        this.sDischargeDTTM =
          DateTime.NotEquals(this.DischargeDTTM, DateTime.MinValue) &&
          this.DischargeDTTM.Year < DateTime.MaxValue.Year
            ? this.DischargeDTTM.ToString('dd-MMM-yyyy')
            : String.Empty;
        if (this.IsActivityConsiderationOpened) {
          this.SetActivityConsiderationDischargeDTTM();
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  LeaveDate_GetPatientLeaveByPatDetCompleted(
    sender: Object,
    e: GetPatientLeaveByPatDetCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000037;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:LeaveDate_GetPatientLeaveByPatDetCompleted()';
    if (e.Error == null) {
      try {
        let objRes: CResMsgGetPatientLeaveByPatDet = e.Result;
        if (objRes != null && objRes.oPatientLeave != null) {
          this.LeaveDTTM = objRes.oPatientLeave.ActualStartDttm;
          this.LeaveReturnDTTM = objRes.oPatientLeave.ExpectedReturnDttm;
          if (
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Leave,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          )
            this.DischargeLeaveDTTM = this.LeaveDTTM;
          this.sLeaveDTTM =
            DateTime.NotEquals(this.LeaveDTTM, DateTime.MinValue)
              ? this.LeaveDTTM.ToString('dd-MMM-yyyy')
              : String.Empty;
          if (this.IsActivityConsiderationOpened) {
            this.SetActivityConsiderationLeaveDTTM();
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private objMedclrksrce_GetMedClerkingSourceCompleted(
    sender: Object,
    e: GetMedClerkingSourceCompletedEventArgs
  ): void {
    if (e.Error != null || e.Result == null) return;
    let sMedClrkSrc: string = e.Result.sMedClrkSrc;
    let sClrkSrc: string[] = sMedClrkSrc.split(',');
    let nCnt: number = sClrkSrc.length;
    let oListItems: ObservableCollection<CListItem> = ObjectHelper.CreateType<
      ObservableCollection<CListItem>
    >(this.MedicationClerkingSource, ObservableCollection<CListItem>);
    if (oListItems != null) {
      for (let i: number = 0; i < nCnt; i++) {
        let SelectedItems = oListItems
          .Where((oItem) => oItem != null && oItem.Value.Equals(sClrkSrc[i]))
          .Select((oItem) => oItem);
        if (SelectedItems != null && SelectedItems.Count() > 0) {
          let oCItem: CListItem = SelectedItems.ElementAt(0);
          if (oCItem != null && oCItem.Value != CConstants.OtherFreeText) {
            oCItem.IsSelected = true;
          }
        }
      }
    }
    this.MedicationClerkingSource = null;
    setTimeout(()=>{
    this.MedicationClerkingSource = oListItems;
    },10);

  }
  private SetMedClerkingSrc(): void {
    let medClerkingSrc: ObservableCollection<CListItem> =
      new ObservableCollection<CListItem>();
    if (
      CommonDomainValues.MedicationClerking != null &&
      CommonDomainValues.MedicationClerking.Count > 0
    ) {
      let arrMedClrkSrc: string[] = null;
      let unencodedstring: string = null;
      if (
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        let objReq: CReqMsgGetMedClerkingSource =
          new CReqMsgGetMedClerkingSource();
        objReq.oContextInformation = Common.FillContext();
        objReq.oMedLstCrtBC = new MedicationListCriteria();
        objReq.oMedLstCrtBC.EncounterOID = PatientContext.EncounterOid;
        objReq.oMedLstCrtBC.PatientOID = PatientContext.PatientOID;
        objReq.oMedLstCrtBC.PrescriptionType = PatientContext.PrescriptionType;
        objReq.oMedLstCrtBC.McVersion = AppSessionInfo.AMCV;
        let objMedclrksrce: ManagePrescriptionWSSoapClient =
          new ManagePrescSer.ManagePrescriptionWSSoapClient();
        objMedclrksrce.GetMedClerkingSourceCompleted = (s, e) => {
          this.objMedclrksrce_GetMedClerkingSourceCompleted(s, e);
        };
        objMedclrksrce.GetMedClerkingSourceAsync(objReq);
      } else if (typeof this.WizardContext['CLRKSRC'] === 'string') {
        unencodedstring = HttpUtility.UrlDecode(this.WizardContext['CLRKSRC']);
        arrMedClrkSrc = unencodedstring.Split('~?#$', StringSplitOptions.None);
      }
      let sCCode: string = String.Empty;
      let sDescription: string = String.Empty;
      let bIsSelected: boolean = false;
      let Comments: string = '';
      let oCTerms: CValuesetTerm;
      for (
        let i: number = 0;
        i < CommonDomainValues.MedicationClerking.Count;
        i++
      ) {
        oCTerms = new CValuesetTerm();
        sCCode = CommonDomainValues.MedicationClerking[i].csCode;
        sDescription = CommonDomainValues.MedicationClerking[i].csDescription;
        bIsSelected = false;
        if (arrMedClrkSrc != null && arrMedClrkSrc.length > 0) {
          let SelectedMedClrkSrc = arrMedClrkSrc
            .Where(
              (ClrkSrc) =>
                String.Compare(
                  ClrkSrc,
                  sCCode,
                  StringComparison.OrdinalIgnoreCase
                ) == 0 ||
                String.Compare(
                  ClrkSrc,
                  sDescription,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
            )
            .Select((ClrkSrc) => ClrkSrc);
          bIsSelected =
            SelectedMedClrkSrc != null &&
            SelectedMedClrkSrc.Count() > 0 &&
            !String.IsNullOrEmpty(SelectedMedClrkSrc.First());
        }
        if (sDescription == 'Other') {
          let nArrMedClkrSrcCount: number = 0;
          if (arrMedClrkSrc != null) {
            if (arrMedClrkSrc.length > 0) {
              nArrMedClkrSrcCount = arrMedClrkSrc.length;
            }
          }
          for (let _i: number = nArrMedClkrSrcCount - 1; _i >= 0; _i--) {
            if (
              String.Compare(
                arrMedClrkSrc[_i],
                'Other',
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            ) {
              Comments = arrMedClrkSrc[_i + 1];
              break;
            }
          }
          medClerkingSrc.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              Tag: Comments,
              DisplayText: sDescription,
              Value: sCCode,
              IsSelected: bIsSelected,
            })
          );
        } else {
          medClerkingSrc.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: sDescription,
              Value: sCCode,
              IsSelected: bIsSelected,
            })
          );
        }
      }
    }
    this.MedicationClerkingSource = medClerkingSrc;
  }
  ModifiedPatientPrescription(): void {
    let IsAmendedPrescItemExists: boolean = false;
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.OutPatientPrescribeMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      if (this.MedsResolve != null) {
        IsAmendedPrescItemExists = this.MedsResolve.Any(
          (Item) => !Item.IsHold && !String.IsNullOrEmpty(Item.OperationMode)
        );
      }
    } else {
      if (this.MedsResolve != null) {
        IsAmendedPrescItemExists = this.MedsResolve.Any(
          (Item) =>
            !Item.IsHold &&
            String.Equals(Item.formViewerDetails.BasicDetails.Isprinted, 'Y') &&
            !String.IsNullOrEmpty(Item.OperationMode) &&
            String.Equals(Item.OperationMode, 'M') &&
            !String.IsNullOrEmpty(Item.DiscontinueCancelAction)
        );
      }
    }
    if (
      !this.IsDisCancelprintMsgShowed &&
      this.IsActiveItemExistsDuringLoad &&
      IsAmendedPrescItemExists
    ) {
      let oMsgBox: iMessageBox = new iMessageBox();
      this.IsDisCancelprintMsgShowed = true;
      oMsgBox.MessageBoxClose = (s, e) => {
        // ObjectHelper.stopFinishAndCancelEvent(false);
        this.oMsg_MessageBoxPromptClose(s, e);
      };
      oMsgBox.Title = 'LORENZO';
      oMsgBox.MessageButton = MessageBoxButton.OK;
      oMsgBox.IconType = MessageBoxType.Information;
      if (
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.OutPatientPrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClerkingPrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.LeavePrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.DischargePrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.InpatientPrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ForadminPrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        let sFormMessage: string = String.Empty;
        let sprestype: string = PrescriptionHelper.GetPrescriptionType(
          PatientContext.PrescriptionType
        );
        if (
          String.Equals(
            PatientContext.EncounterType,
            CConstants.InpatientEncounter,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          String.Equals(
            sprestype,
            PrescriptionTypes.Foradministration,
            StringComparison.InvariantCultureIgnoreCase
          )
        )
          sprestype = PrescriptionTypes.sInpatient;
        else if (
          !String.Equals(
            PatientContext.EncounterType,
            CConstants.InpatientEncounter,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          String.Equals(
            sprestype,
            PrescriptionTypes.sInpatient,
            StringComparison.InvariantCultureIgnoreCase
          )
        )
          sprestype = PrescriptionTypes.Foradministration;
        if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.OutPatientPrescribeMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.InpatientPrescribeMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          sFormMessage = String.Format(
            Resource.prescribedrugs.ModifiedOutPatientPrescription_Msg,
            sprestype
          );
        } else {
          sFormMessage = String.Format(
            Resource.prescribedrugs.ModifiedPatientPrescription_Msg,
            sprestype
          );
        }
        oMsgBox.Message = sFormMessage;
      }
      oMsgBox.Width = 475;
      oMsgBox.Height = 160;
      oMsgBox.Show();
      // ObjectHelper.stopFinishAndCancelEvent(true);
      //ObjectHelper.DoubleOpenWindowMode = true;
      ObjectHelper.stopScreenFreezeEvent(true);
    } else {
      this.CheckUserRightsAndPrescribe();
    }
  }
  public PrescribeDrugs(): void {
    this.profile.OnProfileLoaded = (s, e) => {
      this.profile_PrintLoaded(s, e);
    };
    this.profile.GetProfile<PrintConfigurationData>(
      'VW_MEDICONFIG',
      'PRINTCFG'
    );
    if (
      this.TypeIndex == 0 &&
      (String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) == 0) &&
      UserPermissions.CanPresWithAuth == false
    ) {
      this.AmendDisCancelExistIpatDis();
    }
    if (
      (String.Compare(
        this.CACode,
        CConstants.DischargePrescribeMenuCode,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 &&
        !this.IsFinish) ||
      ((String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenu,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenu,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0) &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0)
    ) {
      if (this.TypeIndex == 1) {
        this.InpatOrDischargeExistMsg('Dis');
      } else {
        this.GetNonReconciledItems();
      }
    } else {
      if (this.TypeIndex == 1) {
        this.InpatOrDischargeExistMsg('Inpat');
      } else {
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          (String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Inpatient,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 &&
            this.ReconcileforIP)
        ) {
          this.GetNonReconciledItems();
        } else if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.OutPatientPrescribeMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClerkingPrescribeMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.LeavePrescribeMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.DischargePrescribeMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.InpatientPrescribeMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ForadminPrescribeMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.ModifiedPatientPrescription();
        } else {
          if (this.CanLaunchForadminPrescription) {
            let sLockedUserName: string = String.Empty;
            let sMenuCode: string = !String.IsNullOrEmpty(
              this.WizardContext['MenuCode']
            )
              ? this.WizardContext['MenuCode']
              : String.Empty;
            let _LockedUserDetails: LockedUsersDetails;
            let bResult: boolean = MedicationCommonBB.IsLockedByAnotherUser(
              sMenuCode,
              true,
              (o) => {
                _LockedUserDetails = o;
              }
            );
            if (
              _LockedUserDetails != null &&
              !String.IsNullOrEmpty(_LockedUserDetails.ActivityLock)
            ) {
              sLockedUserName = _LockedUserDetails.ActivityLock;
              this.IPLockCheck = true;
              let oMsgBox: iMessageBox = new iMessageBox();
              oMsgBox.MessageBoxClose = (s, e) => {
                this.oMsgBox_LaunchPrescribeCareActivity_MessageBoxClose(s, e);
              };
              oMsgBox.Title = 'Information - Lorenzo';
              oMsgBox.Height = 160;
              oMsgBox.MessageButton = MessageBoxButton.OK;
              oMsgBox.IconType = MessageBoxType.Information;
              oMsgBox.Message = String.Format(
                Resource.MedicationForm.LockMsg_Prescribing,
                sLockedUserName
              );
              oMsgBox.Show();
            } else {
              this.ModifiedPatientPrescription();
            }
          } else {
            this.ModifiedPatientPrescription();
          }
        }
      }
    }
  }
  oMsgBox_LaunchPrescribeCareActivity_MessageBoxClose(
    sender: Object,
    e: MessageEventArgs
  ): void {
    this.ModifiedPatientPrescription();
  }
  MedicationCommonBB_ConceptCodesCompletedEvent(): void {
    if (!String.IsNullOrEmpty(this.WizardContext['EncStatus'])) {
      PatientContext.EncounterStatusCode = this.WizardContext['EncStatus'];
    } else if (ContextManager.Instance['EncounterStatusCode'] != null) {
      PatientContext.EncounterStatusCode =
        ContextManager.Instance['EncounterStatusCode'].ToString();
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
      PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      this.SetMedClerkingSrc();
      this.MedicationClerkingSourceVisibility = Visibility.Visible;
    }
    if (
      !String.IsNullOrEmpty(this.WizardContext['EncDefOID']) &&
      String.Compare(
        this.WizardContext['EncDefOID'],
        this.WizardContext['ENCID']
      ) == 0
    ) {
      this.SetEncounterDetails();
    } else {
      this.GetEncounters();
    }
  }
  SetEncounterDetails(): void {
    let sEncDetails: string = String.Empty;
    let sEnc: StringBuilder = new StringBuilder();
    sEnc.Append(
      CommonBB.GetText(
        PatientContext.EncounterType,
        MedicationCommonConceptCodeData.ConceptCodes
      )
    );
    sEnc.Append(' Encounter - Start date: ');
    sEnc.Append(this.WizardContext['EncSDate']);
    PatientContext.EncounterStartDate = Convert.ToDateTime(
      this.WizardContext['EncSDate']
    );
    if (!String.IsNullOrEmpty(this.WizardContext['EncSDateTime'])) {
      PatientContext.EncounterStartDateTime = Convert.ToDateTime(
        this.WizardContext['EncSDateTime']
      );
    }
    sEnc.Append(' - ');
    if (!String.IsNullOrEmpty(this.WizardContext['EncSpecName'])) {
      sEnc.Append(this.WizardContext['EncSpecName']);
      sEnc.Append(' - ');
    }
    if (!String.IsNullOrEmpty(this.WizardContext['EncCPName'])) {
      sEnc.Append(this.WizardContext['EncCPName']);
      sEnc.Append(' - ');
    }
    PatientContext.EncounterStatusCode = this.WizardContext['EncStatus'];
    sEnc.Append(
      CommonBB.GetText(
        this.WizardContext['EncStatus'],
        MedicationCommonConceptCodeData.ConceptCodes
      )
    );
    if (!String.IsNullOrEmpty(sEnc.ToString())) {
      this.EncLblDetails = sEncDetails = Convert.ToString(sEnc);
      if (
        String.Compare(this.WizardContext['MedCount'], 'True') == 0 ||
        String.Compare(
          this.AppContext.MenuCode,
          CConstants.ClinicallyVerifyMenuSL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.EncounterLabelDetails = sEncDetails;
      } else {
        this.EncounterLabelDetails = !String.IsNullOrEmpty(sEncDetails)
          ? sEncDetails + ': No medication items recorded for this encounter'
          : String.Empty;
      }
    }
  }
  private LaunchIPForAdmin(EncountersCall: boolean): void {
    if (
      PatientContext.IPPMADU_P2 &&
      UserPermissions.CanPrescribeDrugs &&
      String.IsNullOrEmpty(QueryStringInfo.MedclerkPrompt) &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      ProfileData.PrescribeMethodConfig != null &&
      ProfileData.PrescribeMethodConfig.EncounPresConfig != null
    ) {
      let lstEncounterPresConfigurations =
        ProfileData.PrescribeMethodConfig.EncounPresConfig.Where(
          (x) =>
            x.EncounterCode == PatientContext.EncounterType &&
            ((PatientContext.EncounterOid.ToString() == this.ViewEncounterOID &&
              x.PrescriptionCodes != PrescriptionTypes.Clerking) ||
              PatientContext.EncounterOid.ToString() != this.ViewEncounterOID)
        ).Select((x) => x);
      let ForAdminValidate: boolean = false;
      for(let i=0; i< lstEncounterPresConfigurations.Count(); i++){
        let oList: EncounterPresConfigurations = lstEncounterPresConfigurations[i];     
        if (
          String.Equals(
            oList.PrescriptionCodes,
            PrescriptionTypes.Foradministration,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          ForAdminValidate = true;
          break;
        }
      }
      if (
        ForAdminValidate &&
        String.Compare(
          this.WizardContext['MenuCode'],
          CConstants.ClinicallyVerifyMenuSL
        ) != 0 &&
        !String.Equals(PatientContext.EncounterType, CConstants.OutEnc)
      ) {
        if (
          String.Equals(
            this.WizardContext['EncStatus'],
            CConstants.EncStatusOpen,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          (this.EncounterGridObj != null &&
            String.Equals(
              this.EncounterGridObj.EncounterStatus,
              'Open',
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          this.IsVisibleLaunchIP = Visibility.Visible;
          if (MedicationCommonProfileData.PrescribeConfig == null) {
            let prfile: ProfileFactoryType = new ProfileFactoryType();
            prfile.OnProfileLoaded = (s, e) => {
              this.PrescribeConfig_OnProfileLoaded(s, e);
            };
            prfile.GetProfile<PrescribingConfigData>(
              'VW_MEDICONFIG',
              'PRESCONFIG'
            );
          } else {
            if (
              MedicationCommonProfileData.PrescribeConfig != null &&
              MedicationCommonProfileData.PrescribeConfig.LaunchInpatientPres
            ) {
              this.CanLaunchForadminPrescription = true;
            } else {
              this.CanLaunchForadminPrescription = false;
            }
          }
        } else {
          this.CanLaunchForadminPrescription = false;
          this.IsVisibleLaunchIP = Visibility.Collapsed;
        }
        if (
          QueryStringInfo.IsGPAutoSaveClerk &&
          this.CanLaunchForadminPrescription &&
          this.IsVisibleLaunchIP == Visibility.Visible
        ) {
          this.CanLaunchForadminPrescription = false;
        }
      } else {
        if (
          MedicationCommonProfileData.PrescribeConfig == null &&
          !EncountersCall
        ) {
          let prfile: ProfileFactoryType = new ProfileFactoryType();
          prfile.OnProfileLoaded = (s, e) => {
            this.PrescribeConfig_OnProfileLoaded1(s, e);
          };
          prfile.GetProfile<PrescribingConfigData>(
            'VW_MEDICONFIG',
            'PRESCONFIG'
          );
        }
      }
    } else {
      if (
        MedicationCommonProfileData.PrescribeConfig == null &&
        !EncountersCall
      ) {
        let prfile: ProfileFactoryType = new ProfileFactoryType();
        prfile.OnProfileLoaded = (s, e) => {
          this.PrescribeConfig_OnProfileLoaded1(s, e);
        };
        prfile.GetProfile<PrescribingConfigData>('VW_MEDICONFIG', 'PRESCONFIG');
      }
    }
    if (
      !EncountersCall &&
      PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
      MedicationCommonProfileData.PrescribeConfig != null &&
      !String.IsNullOrEmpty(
        MedicationCommonProfileData.PrescribeConfig.ClerkFormViewDefautCode
      )
    ) {
      if (
        String.Equals(
          MedicationCommonProfileData.PrescribeConfig.ClerkFormViewDefautCode,
          ClerkFormViewDefault.LaunchFormMandatory
        )
      ) {
        PatientContext.ClerkFormViewDefaultBehavior =
          ClerkFormViewDeftBehaviour.LaunchFormMandatory;
        PatientContext.PrescriptionType = PrescriptionTypes.ForAdministration;
      } else if (
        String.Equals(
          MedicationCommonProfileData.PrescribeConfig.ClerkFormViewDefautCode,
          ClerkFormViewDefault.LaunchFormNoMandatory
        )
      ) {
        PatientContext.ClerkFormViewDefaultBehavior =
          ClerkFormViewDeftBehaviour.LaunchFormNoMandatory;
      } else if (
        String.Equals(
          MedicationCommonProfileData.PrescribeConfig.ClerkFormViewDefautCode,
          ClerkFormViewDefault.DoNotLaunchForm
        )
      ) {
        PatientContext.ClerkFormViewDefaultBehavior =
          ClerkFormViewDeftBehaviour.DoNotLaunchForm;
      }
    }
    if (DateTime.GreaterThanOrEqualTo(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)) {
      this.HeightWeightIndText =
        Resource.TechValidate.Heightweightupdate_text +
        ' ' +
        PatientContext.PatientHeightDTTM.ToString(CConstants.DateHMFormat) +
        Resource.TechValidate.HtWtpleasereview;
    }
    if (DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)) {
      this.HeightWeightIndText =
        Resource.TechValidate.Heightweightupdate_text +
        ' ' +
        PatientContext.PatientWeightDTTM.ToString(CConstants.DateHMFormat) +
        Resource.TechValidate.HtWtpleasereview;
    }
  }
  PrescribeConfig_OnProfileLoaded1(sender: Object, Result: IProfileProp): void {
    if (Result != null) {
      if (Result.Profile instanceof PrescribingConfigData) {
        let PrescribeConfig1: PrescribingConfigData =
          ObjectHelper.CreateType<PrescribingConfigData>(
            Result.Profile,
            PrescribingConfigData
          );
        if (PrescribeConfig1 != null) {
          if (
            PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
            PrescribeConfig1 != null &&
            !String.IsNullOrEmpty(PrescribeConfig1.ClerkFormViewDefautCode)
          ) {
            if (
              String.Equals(
                PrescribeConfig1.ClerkFormViewDefautCode,
                ClerkFormViewDefault.LaunchFormMandatory
              )
            ) {
              PatientContext.ClerkFormViewDefaultBehavior =
                ClerkFormViewDeftBehaviour.LaunchFormMandatory;
              PatientContext.PrescriptionType =
                PrescriptionTypes.ForAdministration;
            } else if (
              String.Equals(
                PrescribeConfig1.ClerkFormViewDefautCode,
                ClerkFormViewDefault.LaunchFormNoMandatory
              )
            ) {
              PatientContext.ClerkFormViewDefaultBehavior =
                ClerkFormViewDeftBehaviour.LaunchFormNoMandatory;
            } else if (
              String.Equals(
                PrescribeConfig1.ClerkFormViewDefautCode,
                ClerkFormViewDefault.DoNotLaunchForm
              )
            ) {
              PatientContext.ClerkFormViewDefaultBehavior =
                ClerkFormViewDeftBehaviour.DoNotLaunchForm;
            }
          }
        }
      }
    }
  }
  PrescribeConfig_OnProfileLoaded(sender: Object, Result: IProfileProp): void {
    if (Result != null) {
      if (Result.Profile instanceof PrescribingConfigData) {
        MedicationCommonProfileData.PrescribeConfig =
          ObjectHelper.CreateType<PrescribingConfigData>(
            Result.Profile,
            PrescribingConfigData
          );
        if (MedicationCommonProfileData.PrescribeConfig != null) {
          if (MedicationCommonProfileData.PrescribeConfig.LaunchInpatientPres) {
            this.CanLaunchForadminPrescription = true;
          } else {
            this.CanLaunchForadminPrescription = false;
          }
          if (
            QueryStringInfo.IsGPAutoSaveClerk &&
            this.CanLaunchForadminPrescription &&
            this.IsVisibleLaunchIP == Visibility.Visible
          ) {
            this.CanLaunchForadminPrescription = false;
          }
          if (
            PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
            MedicationCommonProfileData.PrescribeConfig != null &&
            !String.IsNullOrEmpty(
              MedicationCommonProfileData.PrescribeConfig
                .ClerkFormViewDefautCode
            )
          ) {
            if (
              String.Equals(
                MedicationCommonProfileData.PrescribeConfig
                  .ClerkFormViewDefautCode,
                ClerkFormViewDefault.LaunchFormMandatory
              )
            ) {
              PatientContext.ClerkFormViewDefaultBehavior =
                ClerkFormViewDeftBehaviour.LaunchFormMandatory;
              PatientContext.PrescriptionType =
                PrescriptionTypes.ForAdministration;
            } else if (
              String.Equals(
                MedicationCommonProfileData.PrescribeConfig
                  .ClerkFormViewDefautCode,
                ClerkFormViewDefault.LaunchFormNoMandatory
              )
            ) {
              PatientContext.ClerkFormViewDefaultBehavior =
                ClerkFormViewDeftBehaviour.LaunchFormNoMandatory;
            } else if (
              String.Equals(
                MedicationCommonProfileData.PrescribeConfig
                  .ClerkFormViewDefautCode,
                ClerkFormViewDefault.DoNotLaunchForm
              )
            ) {
              PatientContext.ClerkFormViewDefaultBehavior =
                ClerkFormViewDeftBehaviour.DoNotLaunchForm;
            }
          }
        }
      }
    }
  }
  public Currentindexsetcomplete = new EventEmitter();
  private GetEncounters(): void {
    
  
    if (this.GetEncounterCount < 1) {
      PrescriptionHelper.GetEncounterGrid(
        (o, e) => {
          this.EncounterList_Completed(o, e);
          this.Currentindexsetcomplete.emit();
        },
        this.CurrentEncounterPageIndex
      );
      this.GetEncounterCount += 1;
    } else
      PrescriptionHelper.GetEncounterGrid(
        (o, e) => {
          this.EncounterList_Completed(o, e);
          this.Currentindexsetcomplete.emit();
        },
        this.CurrentEncounterPageIndex
      );
  }
  public GetStationaryType(): void {
    this.IsStationaryTypeLoaded = AsyncCallStatus.InProgress;
    let ObjReq: MedicationMgmtSer.CReqMsgGetStationaryItem =
      new MedicationMgmtSer.CReqMsgGetStationaryItem();
    ObjReq.oContextInformation = Common.FillContext();
    let Objservice: MedicationMgmtSer.MedicationMgmtWSSoapClient =
      new MedicationMgmtSer.MedicationMgmtWSSoapClient();
    Objservice.GetStationaryItemCompleted = (s, e) => {
      this.Objservice_GetStationaryItemCompleted(s, e);
    };
    Objservice.GetStationaryItemAsync(ObjReq);
  }
  private Objservice_GetStationaryItemCompleted(
    sender: Object,
    e: MedicationMgmtSer.GetStationaryItemCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000024;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:GetStationaryItemCompleted()';
    if (e.Error == null) {
      try {
        this.IsStationaryTypeLoaded = AsyncCallStatus.Complete;
        let ObjRes: MedicationMgmtSer.CResMsgGetStationaryItem = e.Result;
        if (
          ObjRes != null &&
          ObjRes.objStationaryItem != null &&
          ObjRes.objStationaryItem.Count > 0
        ) {
          let PatientContextPresType: string = PatientContext.PrescriptionType;
          if (
            PatientContext.ClerkFormViewDefaultBehavior ==
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ) {
            PatientContextPresType = PrescriptionTypes.Clerking;
          }
          let sPType: string = PrescriptionHelper.GetPrescriptionType(
            PatientContextPresType
          );
          let Encountercode: string = String.Empty;
          if (!String.IsNullOrEmpty(QueryStringInfo.MedclerkPrompt)) {
            if (
              String.Compare(
                PatientContext.EncounterCode,
                'Inpatient',
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              Encountercode = 'CC_INPAT';
            } else Encountercode = PatientContext.EncounterCode;
          } else {
            Encountercode = PatientContext.EncounterCode;
          }
          if (
            String.IsNullOrEmpty(Encountercode) &&
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            PatientContext.EncounterOid > 0
          ) {
            Encountercode = PatientContext.EncounterType;
          }
          let statType =
            ProfileData.PrescribeMethodConfig.EncounPresConfig.Where(
              (encTypeConfig) =>
                encTypeConfig.PrescriptionCodes == sPType &&
                encTypeConfig.EncounterCode == Encountercode
            ).Select((encTypeConfig) => encTypeConfig);
          if (statType.Count() > 0) {
            let oDefaultStat: EncounterPresConfigurations =
              statType.ElementAt(0);
            if (oDefaultStat != null) {
              let defaultStatType = ObjRes.objStationaryItem
                .Where(
                  (RstatType) =>
                    RstatType.StationaryCode ==
                    oDefaultStat.DefaultStationaryTypeCode
                )
                .Select((RstatType) => RstatType);
              //Not Required for LHS. To be Re-Visited.
              
                            if (defaultStatType != null && defaultStatType.Count() > 0) {
                                if (!String.IsNullOrEmpty(oDefaultStat.DefaultStationery) && defaultStatType.ElementAt(0) != null && defaultStatType.ElementAt(0).StationaryOID > 0 && !String.IsNullOrEmpty(defaultStatType.ElementAt(0).StationaryCode))
                                    this.DefaultStationaryType = ObjectHelper.CreateObject(new CListItem(), { DisplayText: oDefaultStat.DefaultStationery, Value: defaultStatType.ElementAt(0).StationaryOID.ToString(), Tag: defaultStatType.ElementAt(0).StationaryCode });
                            }
                            else {
                                let defaultStatTypeWithName = ObjRes.objStationaryItem.Where(RstatType => RstatType.StationaryName == oDefaultStat.DefaultStationery).Select(RstatType => RstatType);
                                if (defaultStatTypeWithName.Count() > 0) {
                                    if (!String.IsNullOrEmpty(oDefaultStat.DefaultStationery) && defaultStatTypeWithName.ElementAt(0) != null && defaultStatTypeWithName.ElementAt(0).StationaryOID > 0 && !String.IsNullOrEmpty(defaultStatTypeWithName.ElementAt(0).StationaryCode))
                                        this.DefaultStationaryType = ObjectHelper.CreateObject(new CListItem(), { DisplayText: oDefaultStat.DefaultStationery, Value: defaultStatTypeWithName.ElementAt(0).StationaryOID.ToString(), Tag: defaultStatTypeWithName.ElementAt(0).StationaryCode });
                                }
                            }
              if (!String.IsNullOrEmpty(oDefaultStat.StatinaryCodes)) {
                let arrStatTypes: string[] =
                  oDefaultStat.StatinaryCodes.Split(',');

                                if (arrStatTypes != null && arrStatTypes.length > 0) {

                  // let STypes = ObjRes.objStationaryItem.Join(arrStatTypes, RstatType => RstatType.StationaryName, presStatTypes => presStatTypes, (RstatType, presStatTypes) => new { RstatType, presStatTypes }).Select(RstatType => RstatType) as IEnumerable<MedicationMgmtSer.Stationary>;
                  let STypes = _.filter(ObjRes.objStationaryItem, function (o) {
                    return arrStatTypes.includes(o.StationaryName);
                  });
                                    if (STypes != null && STypes.Count() > 0) {
                                        this.StationaryTypes = new ObservableCollection<CListItem>();
                                        STypes.forEach((oStationary) => {
                                            if (oStationary != null && !String.IsNullOrEmpty(oStationary.StationaryName) && oStationary.StationaryOID > 0 && !String.IsNullOrEmpty(oStationary.StationaryCode))
                                                this.StationaryTypes.Add(ObjectHelper.CreateObject(new CListItem(), { DisplayText: oStationary.StationaryName, Value: oStationary.StationaryOID.ToString(), Tag: oStationary.StationaryCode + "~~" + oStationary.StationaryHOrgID }));
                                        });
                                    }
                }
              }
            }
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public GetContextInfoFromHtmlPage(): void {}
  public SubmitDrugs(): void {}
  public CanShownDIConsentPrmpt: boolean = false;
  public GPCDIConsentStatus: string = String.Empty;
  public LoadGpConnectItems(): void {
    if (this.MedsGPConnect == null || (this.MedsGPConnect && this.MedsGPConnect.Length == 0 )) {
      if (!this.GpConnectLoading)
      {
        this.GpConnectLoading = true;
        Busyindicator.SetStatusBusy('GpConnectList');
        PrescriptionHelper.GetGPConnectMedications(this, (s, e) => {
          this.GPConnect_GetGPConnectAdministrationCompleted(s, e);
        });
      }
    }
  }

  //Re-Visit Required.
  async PromptDIConsent() {
    if (ContextManager.Instance['GPCConsentStatus'] != null) {
      this.GPCDIConsentStatus =
        ContextManager.Instance['GPCConsentStatus'].ToString();
    }
    if (
      !this.CanShownDIConsentPrmpt &&
      !String.Equals(
        this.GPCDIConsentStatus,
        '1',
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      let _ErrorID: number = 800000102;
      let _ErrorSource: string =
        'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:PromptDIConsent()';
      try {
        let _obj: any = await HtmlPage.Window.InvokeAsync(
          'LaunchDIConsentPromptFromInGPCTAB',
          PatientContext.PatientOID
        );
        this.GPCDIConsentStatus = ObjectHelper.CreateType<string>(
          _obj.returnData,
          'string'
        );
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }

      this.CanShownDIConsentPrmpt =
        !String.IsNullOrEmpty(this.GPCDIConsentStatus) &&
          String.Equals(
            this.GPCDIConsentStatus,
            '1',
            StringComparison.InvariantCultureIgnoreCase
          )
          ? true
          : false;
    }
    if (String.Equals(this.GPCDIConsentStatus,'1',StringComparison.InvariantCultureIgnoreCase) && (this.MedsGPConnect == null || this.MedsGPConnect.Length == 0)) 
    {
    this.MedsGPConnect = new ObservableCollection<GPConnectItemVM>();
    this.MedsGPConnect = this.TempMedsGPConnect;
    this.GPConnectWarningText = this.TmpGPConnectWarningTextShort;
    this.GPConnectWarningTextShort = this.TmpGPConnectWarningTextShort;
    // this.TmpGPConnectWarningTextShort;
    this.GPConnectWarningTextDetail = this.TmpGPConnectWarningTextDetail;
    this.GPCStopCompTxtVisibility = Visibility.Visible;
    this.GPCStopCompTxtDisplay = true;
    }
    this.GpConnectLoading = false;

  }
  public BindResolveGrid(): void {
    Busyindicator.SetStatusBusy('Prescribe');
    if (
      MedicationCommonProfileData.MedLineDisplay == null ||
      MedicationCommonProfileData.MedViewConfig == null
    )
      return;
    this.ProfileDiscontinuedDrugFlag = 'X';
    // console.log('bindresolvegrid ...', this.ViewDiscontinuedDrugText);
    this.ViewDiscontinuedDrugText = 'Include cancelled items';
    console.log('bindresolvegrid...', this.ViewDiscontinuedDrugText);
    this.ViewDiscontinuedDrugtooltip = 'Select to include cancelled items';
    this.ViewCompletedDrugText = 'Include ALL completed / discontinued items';
    this.ViewCompletedDrugtooltip =
      'Select to include ALL completed / discontinued items';
    this.CheckBoxGroupStackWidth = '230';
    if (
      this.MedsResolve == null ||
      (this.MedsResolve && this.MedsResolve.Count == 0)
    ) {
      if (
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenu,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        PrescriptionHelper.GetPatientMedDisconItems(
          PatientContext.PrescriptionType,
          PatientContext.EncounterOid,
          this,
          (s, e) => {
            this.ResolveClVerify_GetPatientMedDisContItemsCompleted(s, e);
          }
        );
      } else {
        this.IsResolutionGirdLoading = true;
        PrescriptionHelper.GetPatientMedications(
          PatientContext.PrescriptionType,
          this.k,
          PatientContext.EncounterOid,
          this,
          (s, e) => {
            if (this.rteLoaded) {
            this.Resolve_GetPatientMedicationListCompleted(s, e);
            } else {
              this.refreshIntervalId = setInterval(() => {
                if (this.rteLoaded) {
                  clearInterval(this.refreshIntervalId);
                  this.Resolve_GetPatientMedicationListCompleted(s, e);
                }
              }, 100);
            }
          }
        );
      }
    } else {
      let oPresVM: ObservableCollection<PrescriptionItemVM> =
        new ObservableCollection<PrescriptionItemVM>();
      this.MedsResolve.forEach((oItem) => {
        // oItem.PrescribeThisItemEvent -= this.PrescribeExistingItem;
        oItem.PrescribeThisItemEvent = (s, e) => {
          this.PrescribeExistingItem(s, e);
        };
        oPresVM.Add(oItem);
      });
      this.MedsResolve = oPresVM;
      Busyindicator.SetStatusIdle('Prescribe');
    }
    this.GetPatientWeightBSA();
    this.IsEnableCVSupplyInstruction = true;
    this.AddSupplyInstructionLinkText =
      Resource.medauthorise.cmdSupplyInstruction_Text;
    this.IsTabSelectionChanged = this.IsSearchDisCanChecked;
    this.IsTabSelectionChanged = this.IsSearchDisCompletedChecked;
  }
  public GetPatientWeightBSA(): void {
    let sPatValueType: string = String.Empty;
    let oReturn: Object = HtmlPage.Window.Invoke(
      'GetDataItemRecordedDate',
      null
    );
    if (
      oReturn != null &&
      !String.IsNullOrEmpty(oReturn.ToString()) &&
      oReturn.ToString().length > 2
    ) {
      let arrValues: string[];
      let sWValue: string[];
      let sHValues: string[];
      let sWeight: string = String.Empty;
      let sHeight: string = String.Empty;
      arrValues = oReturn.ToString().Split(',');
      sWeight =
        arrValues.length > 4 && !String.IsNullOrEmpty(arrValues[3])
          ? arrValues[3].Trim()
          : String.Empty;
      sHeight =
        arrValues.length > 4 && !String.IsNullOrEmpty(arrValues[4])
          ? arrValues[4].Trim()
          : String.Empty;
      this.RecordEstWeightHeight(sHeight,sWeight,(o1)=>{sHeight=o1}, (o2)=>{sWeight=o2}, arrValues);
      if (
        !String.IsNullOrEmpty(sHeight) &&
        !String.IsNullOrEmpty(sWeight) &&
        !PatientContext.isEstimatedWeight &&
        !PatientContext.isEstimatedHeight
      ) {
        CommonBB.GetPatientBSA(
          PatientContext.PatientOID,
          PatientContext.Age,
          sHeight,
          sWeight
        );
      } else {
        PatientContext.BSA = String.Empty;
        PatientContext.BSAFormula = String.Empty;
      }
      if (!String.IsNullOrEmpty(sHeight)) {
        let sHeightRecordedOn: string = String.Empty;
        let sHeightRecordedOnWithTime: string = String.Empty;
        sPatValueType = 'Height';
        if (arrValues != null && arrValues.length > 1) {
          if (
            !String.IsNullOrEmpty(arrValues[1]) &&
            arrValues[1].Contains(':')
          ) {
            sHeightRecordedOn = arrValues[1].Split(':')[2];
            sHeightRecordedOn = sHeightRecordedOn.Trim().Substring(0, 11);
            sHeightRecordedOnWithTime =
              arrValues[1].Split(':')[2] + ':' + arrValues[1].Split(':')[3];
          }
        }
        PatientContext.PatientHeightRecordedOn = sHeightRecordedOn;
        PatientContext.PatientHeightDTTM = Convert.ToDateTime(
          sHeightRecordedOnWithTime
        );
        this.ParseWeightHeight(sHeight, sPatValueType);
      } else {
        PatientContext.PatientHEIGHT = String.Empty;
        PatientContext.PatientHeightRecordedOn = String.Empty;
      }
      if (!String.IsNullOrEmpty(sWeight)) {
        let sWeightRecordedOn: string = String.Empty;
        let sWeightRecordedOnWithTime: string = String.Empty;
        sPatValueType = 'Weight';
        if (arrValues != null && arrValues.length > 0) {
          if (
            !String.IsNullOrEmpty(arrValues[0]) &&
            arrValues[0].Contains(':')
          ) {
            sWeightRecordedOn = arrValues[0].Split(':')[2];
            sWeightRecordedOn = sWeightRecordedOn.Trim().Substring(0, 11);
            sWeightRecordedOnWithTime =
              arrValues[0].Split(':')[2] + ':' + arrValues[0].Split(':')[3];
          }
        }
        PatientContext.PatientWeightRecordedOn = sWeightRecordedOn;
        PatientContext.PatientWeightDTTM = Convert.ToDateTime(
          sWeightRecordedOnWithTime
        );
        this.ParseWeightHeight(sWeight, sPatValueType);
      } else {
        PatientContext.PatientWEIGHT = String.Empty;
        PatientContext.PatientWeightRecordedOn = String.Empty;
      }
      if (
        DateTime.GreaterThanOrEqualTo(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
      ) {
        this.HeightWeightIndText =
          Resource.TechValidate.Heightweightupdate_text +
          ' ' +
          PatientContext.PatientHeightDTTM.ToString(CConstants.DateHMFormat) +
          Resource.TechValidate.HtWtpleasereview;
      } else if (
        DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
      ) {
        this.HeightWeightIndText =
          Resource.TechValidate.Heightweightupdate_text +
          ' ' +
          PatientContext.PatientWeightDTTM.ToString(CConstants.DateHMFormat) +
          Resource.TechValidate.HtWtpleasereview;
      }
    }
  }
  private RemoveDisCanItems(cDisCan: string): void {
    let RemoveItems: IEnumerable<number> = null;
    let removedordersetgrpid: string = String.Empty;
    if (cDisCan == '5') {
      RemoveItems = this.MedsResolve.Where(
        (presItem) =>
          presItem.PrescriptionItemStatus ==
            PrescriptionItemStatusCodes.CANCELLED &&
          String.IsNullOrEmpty(presItem.OperationMode)
      ).Select((presItem) => this.MedsResolve.IndexOf(presItem));
    } else if (cDisCan == '6') {
      RemoveItems = this.MedsResolve.Where(
        (presItem) =>
          String.IsNullOrEmpty(presItem.OperationMode) &&
          (presItem.PrescriptionItemStatus ==
            PrescriptionItemStatusCodes.DISCONTINUED ||
            presItem.PrescriptionItemStatus ==
              PrescriptionItemStatusCodes.CANCELLED)
      ).Select((presItem) => this.MedsResolve.IndexOf(presItem));
    } else if (cDisCan == 'S') {
      RemoveItems = this.MedsResolve.Where(
        (presItem) =>
          String.IsNullOrEmpty(presItem.OperationMode) &&
          presItem.IsCompletedDisContItemFor72Hrs?.Equals('0') &&
          (String.Equals(
            presItem.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.COMPLETED,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
            String.Equals(
              presItem.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.DISCONTINUED,
              StringComparison.InvariantCultureIgnoreCase
            ))
      ).Select((presItem) => this.MedsResolve.IndexOf(presItem));
    } else if (cDisCan == 'V') {
      RemoveItems = this.MedsResolve.Where(
        (presItem) =>
          (presItem.PrescriptionItemStatus ==
            PrescriptionItemStatusCodes.CANCELLED ||
            presItem.PrescriptionItemStatus ==
              PrescriptionItemStatusCodes.COMPLETED ||
            presItem.PrescriptionItemStatus ==
              PrescriptionItemStatusCodes.DISCONTINUED) &&
          String.IsNullOrEmpty(presItem.OperationMode) &&
          presItem.IsCompletedDisContItemFor72Hrs?.Equals('0')
      ).Select((presItem) => this.MedsResolve.IndexOf(presItem));
    }
    if (RemoveItems != null && RemoveItems.Count() > 0) {
      let orderedIndex: IOrderedEnumerable<number> =
        RemoveItems.OrderByDescending((x) => x);
        orderedIndex.forEach((RemoveIdx) => {
            if (this.MedsResolve[RemoveIdx] != null && !String.IsNullOrEmpty(this.MedsResolve[RemoveIdx].OrderSetGroupID)) {
                removedordersetgrpid = this.MedsResolve[RemoveIdx].OrderSetGroupID;
            }
            this.MedsResolve.RemoveAt(RemoveIdx);
            if (!String.IsNullOrEmpty(removedordersetgrpid)) {
                let cancelledorderset = this.MedsResolve.Where(x => x.OrderSetGroupID == removedordersetgrpid).Select(s => s).ToList();
                if (cancelledorderset != null && cancelledorderset.Count == 1 && cancelledorderset.ElementAt(0).IsOrderSetHeader) {
                    this.MedsResolve.Remove(cancelledorderset.ElementAt(0));
                }
                let lastitem = this.MedsResolve.Where(x => x.OrderSetGroupID == removedordersetgrpid).Select(s => s).LastOrDefault();
                if (lastitem != null) {
                    let index: number = this.MedsResolve.IndexOf(lastitem);
                    if (this.MedsResolve != null && this.MedsResolve.Count > 0 && (index == this.MedsResolve.Count - 1)) {
                        // lastitem.IsOrderSetLastItem = true;
                    }
                    else {
                        if (this.MedsResolve != null && this.MedsResolve.Count > 0 && !(this.MedsResolve.ElementAt(index + 1).IsOrderSetHeader)) {
                            // lastitem.IsOrderSetLastItem = true;
                        }
                    }
                }
            }
        });
      let isexists: boolean = false;
      if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
        isexists = this.MedsResolve.Any(
          (j) =>
            (String.Equals(
              j.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                j.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.DISCONTINUED,
                StringComparison.InvariantCultureIgnoreCase
              )) &&
            j.IsCompletedDisContItemFor72Hrs?.Equals('1')
        );
      }
      if (
        (!isexists && cDisCan.Equals('S')) ||
        cDisCan.Equals('V') ||
        cDisCan.Equals('5')
      ) {
        this.Removeheader(cDisCan);
      }
    }
    Busyindicator.SetStatusIdle('unchecked');
    Busyindicator.SetStatusIdle('DISCOmunchecked');
    this.CompletedItemMsg('RHS', '');
  }
  public CompletedItemMsg(LRData: string, PType: string): void {
    if (String.Equals(LRData, 'RHS')) {
      let bCMPRHS: boolean = false;
      if (this.MedsResolve != null) {
        bCMPRHS = this.MedsResolve.Any(
          (i) =>
            (String.Equals(
              i.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED
            ) ||
              String.Equals(
                i.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.DISCONTINUED
              )) &&
            String.IsNullOrEmpty(i.OperationMode)
        );
      }
      if (bCMPRHS) {
        let grpheder: PrescriptionItemVM = new PrescriptionItemVM();
        if (this.MedsResolve != null) {
          grpheder = this.MedsResolve.Where(
            (x) => x.GroupHeaderName == CConstants.sCompDisc
          ).FirstOrDefault();
        }
        if (!this.IsDisCompletedChecked) {
          let oCurDTTM: DateTime =
            CommonBB.GetServerDateTime().DateTime.AddHours(-48);
          this.ViewDisComp72HRs =
            '(Medications completed/discontinued since ' +
            oCurDTTM.ToString('dd-MMM-yyyy HH:mm') +
            ' shown)';
          if (
            grpheder != null &&
            !String.IsNullOrEmpty(grpheder.GroupHeaderName)
          ) {
            let sDateshown: string =
              '(Since ' + oCurDTTM.ToString(CConstants.DateHMFormat) + ')';
            grpheder.PrescriptionItem =
              grpheder.GroupHeaderName + ' ' + sDateshown;
            grpheder.GroupHeaderName =
              grpheder.GroupHeaderName + ' ' + sDateshown;
            if (
              this.ReBindResolveGridEvent != null &&
              !String.Equals(
                grpheder.PrescriptionItem,
                grpheder.GroupHeaderName
              )
            ) {
              this.ReBindResolveGridEvent(false, grpheder, 0, 'HeaderUpdate');
            }
          }
        } else {
          this.ViewDisComp72HRs =
            '(ALL completed/discontinued Medications shown)';
          if (
            grpheder != null &&
            !String.IsNullOrEmpty(grpheder.GroupHeaderName)
          ) {
            if (
              this.ReBindResolveGridEvent != null &&
              !String.Equals(
                grpheder.PrescriptionItem,
                grpheder.GroupHeaderName
              )
            ) {
              grpheder.PrescriptionItem = grpheder.GroupHeaderName;
              this.ReBindResolveGridEvent(false, grpheder, 0, 'HeaderUpdate');
            }
          }
        }
      } else {
        this.ViewDisComp72HRs = '';
      }
    }
    if (String.Equals(LRData, 'LHS')) {
      let bCMPLHS: boolean = false;
      let grpheder: PrescriptionItemVM = new PrescriptionItemVM();
      if (String.Equals(PType, 'CC_FOR_ADMIN')) {
        bCMPLHS = this.MedsInPatient.Any(
          (i) =>
            (String.Equals(
              i.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED
            ) ||
              String.Equals(
                i.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.DISCONTINUED
              )) &&
            String.IsNullOrEmpty(i.OperationMode)
        );
        grpheder = this.MedsInPatient.Where(
          (x) => x.GroupHeaderName == CConstants.sCompDisc
        ).FirstOrDefault();
      } else if (String.Equals(PType, 'CC_DSCHRG')) {
        bCMPLHS = this.MedsDischarge.Any(
          (i) =>
            (String.Equals(
              i.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED
            ) ||
              String.Equals(
                i.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.DISCONTINUED
              )) &&
            String.IsNullOrEmpty(i.OperationMode)
        );
        grpheder = this.MedsDischarge.Where(
          (x) => x.GroupHeaderName == CConstants.sCompDisc
        ).FirstOrDefault();
      } else if (String.Equals(PType, 'CC_MED_TYP_OP')) {
        bCMPLHS = this.MedsOutPatient.Any(
          (i) =>
            (String.Equals(
              i.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED
            ) ||
              String.Equals(
                i.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.DISCONTINUED
              )) &&
            String.IsNullOrEmpty(i.OperationMode)
        );
        grpheder = this.MedsOutPatient.Where(
          (x) => x.GroupHeaderName == CConstants.sCompDisc
        ).FirstOrDefault();
      } else if (String.Equals(PType, 'CC_Patientleave')) {
        bCMPLHS = this.MedsLeave.Any(
          (i) =>
            (String.Equals(
              i.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED
            ) ||
              String.Equals(
                i.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.DISCONTINUED
              )) &&
            String.IsNullOrEmpty(i.OperationMode)
        );
        grpheder = this.MedsLeave.Where(
          (x) => x.GroupHeaderName == CConstants.sCompDisc
        ).FirstOrDefault();
      } else if (String.Equals(PType, 'CC_MEDCLERK1')) {
        bCMPLHS = this.MedsClerked.Any(
          (i) =>
            (String.Equals(
              i.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED
            ) ||
              String.Equals(
                i.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.DISCONTINUED
              )) &&
            String.IsNullOrEmpty(i.OperationMode)
        );
        grpheder = this.MedsClerked.Where(
          (x) => x.GroupHeaderName == CConstants.sCompDisc
        ).FirstOrDefault();
      }
      if (bCMPLHS) {
        if (!this.IsSearchDisCompletedChecked) {
          let oCurDTTM: DateTime =
            CommonBB.GetServerDateTime().DateTime.AddHours(-48);
          this.ViewDisComp72HRsLHS =
            '(Medications completed/discontinued since ' +
            oCurDTTM.ToString('dd-MMM-yyyy HH:mm') +
            ' shown)';
          if (
            grpheder != null &&
            !String.IsNullOrEmpty(grpheder.GroupHeaderName)
          ) {
            let sDateshown: string =
              '(Since ' + oCurDTTM.ToString(CConstants.DateHMFormat) + ')';
            grpheder.PrescriptionItem =
              grpheder.GroupHeaderName + ' ' + sDateshown;
              grpheder.GroupHeaderName =
              grpheder.GroupHeaderName + ' ' + sDateshown;
          }
        } else {
          this.ViewDisComp72HRsLHS =
            '(ALL completed/discontinued Medications shown)';
          if (
            grpheder != null &&
            !String.IsNullOrEmpty(grpheder.GroupHeaderName)
          ) {
            grpheder.PrescriptionItem = grpheder.GroupHeaderName;
          }
        }
      } else {
        this.ViewDisComp72HRsLHS = '';
      }
    }
  }
  private Removeheader(cDisCan: string): void {
    if (cDisCan == '5') {
      let RemoveHeader = this.MedsResolve.Where(
        (x) => x.GroupHeaderName == CConstants.sCancelled
      )
        .Select((s) => s)
        .ToList();
      if (
        RemoveHeader != null &&
        RemoveHeader.Count == 1 &&
        RemoveHeader.ElementAt(0).IsGroupHeader
      ) {
        this.MedsResolve.Remove(RemoveHeader.ElementAt(0));
        this.Addedheader.Remove(CConstants.sCancelled);
      }
    } else if (cDisCan == 'S') {
      let RemoveHeader = this.MedsResolve.Where(
        (x) => x.GroupHeaderName == CConstants.sCompDisc
      )
        .Select((s) => s)
        .ToList();
      if (
        RemoveHeader != null &&
        RemoveHeader.Count == 1 &&
        RemoveHeader.ElementAt(0).IsGroupHeader
      ) {
        this.MedsResolve.Remove(RemoveHeader.ElementAt(0));
        this.Addedheader.Remove(CConstants.sCompDisc);
      }
    } else if (cDisCan == 'V') {
      let RemoveHeader = this.MedsResolve.Where(
        (x) => x.GroupHeaderName == CConstants.sCancelled
      )
        .Select((s) => s)
        .ToList();
      if (
        RemoveHeader != null &&
        RemoveHeader.Count == 1 &&
        RemoveHeader.ElementAt(0).IsGroupHeader
      ) {
        this.MedsResolve.Remove(RemoveHeader.ElementAt(0));
        this.Addedheader.Remove(CConstants.sCancelled);
      }
      let RemoveHeader1 = this.MedsResolve.Where(
        (x) =>
          x.GroupHeaderName == CConstants.sCompDisc &&
          x.IsCompletedDisContItemFor72Hrs?.Equals('0')
      )
        .Select((s) => s)
        .ToList();
      if (
        RemoveHeader1 != null &&
        RemoveHeader1.Count == 1 &&
        RemoveHeader1.ElementAt(0).IsGroupHeader
      ) {
        this.MedsResolve.Remove(RemoveHeader1.ElementAt(0));
        this.Addedheader.Remove(CConstants.sCompDisc);
      }
    }
    if (this.Addedheader.Count == 0) {
      this.firstheader = true;
    }
  }
  private AppendDisCanItems(cDisCan: string): void {
    let PatientContextPresType: string = PatientContext.PrescriptionType;
    if (
      PatientContext.ClerkFormViewDefaultBehavior ==
      ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      PatientContextPresType = PrescriptionTypes.Clerking;
    }
    PrescriptionHelper.GetPatientMedications(
      PatientContextPresType,
      cDisCan,
      PatientContext.EncounterOid,
      this,
      (s, e) => {
        this.AppendResolve_GetPatientMedicationListCompleted(s, e);
      }
    );
  }
  private AppendResolve_GetPatientMedicationListCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetPatientMedicationListCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000025;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:ConceptCode_GetPatientMedicationListCompleted()';
    if (e.Error == null) {
      try {
        let objResList: IPPMAManagePrescSer.CResMsgGetPatientMedicationList =
          e.Result;
        let oResponse: ObservableCollection<IPPMAManagePrescSer.PrescriptionItemView> =
          objResList.oPrescriptionItemView;
        if (oResponse != null) {
          //Not Required for LHS. To be Re-Visited.
          //oResponse = new ObservableCollection<IPPMAManagePrescSer.PrescriptionItemView>(oResponse.Where(p => p.oPrescriptionItem.DisplaySequence > 998).OrderBy(x => x.oPrescriptionItem.DisplaySequence).ThenBy(y => y.oPrescriptionItem.IdentifyingName).ToList<IPPMAManagePrescSer.PrescriptionItemView>());
          let oORSHelper: OrderSetHelper = new OrderSetHelper();
          let lst72HrsItems2Remove: ObservableCollection<PrescriptionItemVM> =
            null;
          if (this.MedsResolve == null) {
            this.MedsResolve = new ObservableCollection<PrescriptionItemVM>();
          } else {
            lst72HrsItems2Remove = new ObservableCollection<PrescriptionItemVM>(
              this.MedsResolve.Where(
                (x) =>
                  String.IsNullOrEmpty(x.OperationMode) &&
                  x.IsCompletedDisContItemFor72Hrs?.Equals('1') &&
                  (String.Equals(
                    x.PrescriptionItemStatus,
                    PrescriptionItemStatusCodes.COMPLETED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) ||
                    String.Equals(
                      x.PrescriptionItemStatus,
                      PrescriptionItemStatusCodes.DISCONTINUED,
                      StringComparison.InvariantCultureIgnoreCase
                    ))
              )
            );
            if (
              lst72HrsItems2Remove != null &&
              lst72HrsItems2Remove.Count > 0
            ) {
              lst72HrsItems2Remove.forEach((pitem) => {
                this.MedsResolve.Remove(pitem);
              });
              this.RemoveDisCanItems(this.cDisCan);
            }
          }
          let oPresItem: ObservableCollection<PrescriptionItemVM> =
            new ObservableCollection<PrescriptionItemVM>();
          let lstPrescriptionItemVM: List<PrescriptionItemVM> =
            new List<PrescriptionItemVM>();
          if (this.cDisCan == 'V') {
            this.RemoveDisCanItems(this.cDisCan);
          }
          if (lst72HrsItems2Remove != null && lst72HrsItems2Remove.Count > 0) {
            lstPrescriptionItemVM.AddRange(lst72HrsItems2Remove);
          }
          oResponse.forEach((oItemView) => {
            // Revisit Required
            // if (oItemView instanceof IPPMAManagePrescSer.PrescriptionItemView) {
            let oItemVM: PrescriptionItemVM = new PrescriptionItemVM(this);
            oItemVM.FillPrescriptionItemVM(oItemView, true, false);
            if (
              !String.IsNullOrEmpty(oItemVM.PrescriptionItemStatus) &&
              (String.Equals(
                oItemVM.PrescriptionItemStatus,
                CConstants.COMPLETED,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
                String.Equals(
                  oItemVM.PrescriptionItemStatus,
                  CConstants.DISCONTINUED,
                  StringComparison.InvariantCultureIgnoreCase
                ))
            ) {
              oItemVM.isDiscontinueCompletedItem = true;
            }
            // oItemVM.PrescribeThisItemEvent -= this.PrescribeExistingItem;
            oItemVM.PrescribeThisItemEvent = (s, e) => {
              this.PrescribeExistingItem(s, e);
            };
            lstPrescriptionItemVM.Add(oItemVM);
            // }
          });
          if (
            lstPrescriptionItemVM != null &&
            lstPrescriptionItemVM.Count > 0
          ) {
            //Not Required for LHS. To be Re-Visited.
            //lstPrescriptionItemVM = (lstPrescriptionItemVM.Where(p => (String.Equals(p.PrescriptionItemStatus, CConstants.COMPLETED, StringComparison.InvariantCultureIgnoreCase) || String.Equals(p.PrescriptionItemStatus, CConstants.DISCONTINUED, StringComparison.InvariantCultureIgnoreCase)) && p.FormViewerDetails != null && p.FormViewerDetails.BasicDetails != null).OrderBy(g => g.FormViewerDetails.BasicDetails.IdentifyingName).Union(lstPrescriptionItemVM.Where(p => (String.Equals(p.PrescriptionItemStatus, CConstants.CANCELLED, StringComparison.InvariantCultureIgnoreCase) && p.FormViewerDetails != null && p.FormViewerDetails.BasicDetails != null)).OrderBy(g => g.FormViewerDetails.BasicDetails.IdentifyingName))).ToList();
            lstPrescriptionItemVM.forEach((oItemVM) => {
              if (
                !String.IsNullOrEmpty(
                  oItemVM.FormViewerDetails.BasicDetails.GroupHeaderName
                ) &&
                this.Addedheader != null &&
                this.Addedheader.Count > 0 &&
                !this.Addedheader.Contains(
                  oItemVM.FormViewerDetails.BasicDetails.GroupHeaderName
                )
              ) {
                this.MedsResolve.Add(
                  oORSHelper.GetGropingHeader(
                    oItemVM.FormViewerDetails.BasicDetails.GroupHeaderName,
                    oItemVM.PrescriptionOID,
                    oItemVM.PrescriptionType,
                    oItemVM.FormViewerDetails.BasicDetails
                      .Firstscheduledatetime,
                    this.firstheader
                  )
                );
                this.Addedheader.Add(
                  oItemVM.FormViewerDetails.BasicDetails.GroupHeaderName
                );
                this.firstheader = false;
              }
              this.MedsResolve.Add(oItemVM);
              if (this.MedsResolve.Count > 0) {
                this.MedsResolveAddCompleted();
              }
            });
          }
          if (
            objResList != null &&
            objResList.oViewData != null &&
            !String.IsNullOrEmpty(objResList.oViewData.CompletedStatus) &&
            (String.Compare(
              objResList.oViewData.CompletedStatus,
              CConstants.CompletedByPrescriber,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                objResList.oViewData.CompletedStatus,
                CConstants.CompletedByPharmacist,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0)
          ) {
            this.IsCompletedByPrescriberBoxChecked = true;
          }
          if (
            String.Compare(
              this.AppContext.MenuCode,
              CConstants.ClinicallyVerifyMenuSL,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          ) {
            this.PrescriptionStatusDisplayTextVisibility = Visibility.Visible;
          } else {
            this.PrescriptionStatusDisplayTextVisibility = Visibility.Collapsed;
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
    Busyindicator.SetStatusIdle('checked');
    Busyindicator.SetStatusIdle('DISCOmchecked');
    Busyindicator.SetStatusIdle('DISCOmunchecked');
    this.CompletedItemMsg('RHS', '');
  }
  private Resolve_GetPatientMedicationListCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetPatientMedicationListCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000036;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:GetPatientMedicationListCompleted()';
    if (e.Error == null) {
      try {
        let objResList: IPPMAManagePrescSer.CResMsgGetPatientMedicationList =
          e.Result;
        let oResponse: ObservableCollection<IPPMAManagePrescSer.PrescriptionItemView> =
          objResList.oPrescriptionItemView;
        if (oResponse != null) {
          let lstAddedSequenceGroup: List<number> = new List<number>();
          let oORSHelper: OrderSetHelper = new OrderSetHelper();
          let oPresItem: ObservableCollection<PrescriptionItemVM> =
            new ObservableCollection<PrescriptionItemVM>();
          this.oTempPrescDisCancelItemVM = new List<PrescriptionItemVM>();
          let cntControl: iLabel = null;
          let colWidth: number = Number.NaN;
          oResponse.forEach((oItemView) => {
            let ISAllowDisCancel: boolean = false;
            // Revisit Required
            // if (oItemView instanceof IPPMAManagePrescSer.PrescriptionItemView) {
            let oItmVM: PrescriptionItemVM = new PrescriptionItemVM(this);
            oItmVM.FillPrescriptionItemVM(oItemView, true, false);
            // oItmVM.PrescribeThisItemEvent -= this.PrescribeExistingItem;
            oItmVM.PrescribeThisItemEvent = (s, e) => {
              this.PrescribeExistingItem(s, e);
            };
            if (
              !String.IsNullOrEmpty(
                oItmVM.FormViewerDetails.BasicDetails.GroupHeaderName
              ) &&
              !this.Addedheader.Contains(
                oItmVM.FormViewerDetails.BasicDetails.GroupHeaderName
              )
            ) {
              ISAllowDisCancel =
                oItmVM.PrescriptionItemStatusCode.Equals(
                  CConstants.CANCELLED,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                ((oItmVM.PrescriptionItemStatusCode.Equals(
                  CConstants.DISCONTINUED,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                  oItmVM.PrescriptionItemStatusCode.Equals(
                    CConstants.COMPLETED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) ||
                  (!String.IsNullOrEmpty(oItmVM.PrescriptionItemStatus) &&
                    oItmVM.PrescriptionItemStatus.Equals(
                      CConstants.COMPLETED,
                      StringComparison.InvariantCultureIgnoreCase
                    ))) &&
                  oItmVM.IsCompletedDisContItemFor72Hrs?.Equals('0'))
                  ? true
                  : false;
              if (
                (ISAllowDisCancel &&
                  (this.IsDisCompletedChecked || this.IsDisCanChecked)) ||
                !ISAllowDisCancel
              ) {
                oPresItem.Add(
                  oORSHelper.GetGropingHeader(
                    oItmVM.FormViewerDetails.BasicDetails.GroupHeaderName,
                    oItmVM.PrescriptionOID,
                    oItmVM.PrescriptionType,
                    oItmVM.FormViewerDetails.BasicDetails.Firstscheduledatetime,
                    this.firstheader
                  )
                );
                this.Addedheader.Add(
                  oItmVM.FormViewerDetails.BasicDetails.GroupHeaderName
                );
                this.firstheader = false;
              }
            }
            if (
              !String.Equals(
                oItmVM.FormViewerDetails.BasicDetails.GroupHeaderName,
                CConstants.sawaitingauthHeader,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              oItmVM.FormViewerDetails.BasicDetails.InfusionDetails
                .GroupSequenceNo > 0 &&
              (lstAddedSequenceGroup.Count == 0 ||
                !lstAddedSequenceGroup.Contains(
                  oItmVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .GroupSequenceNo
                ))
            ) {
              if (
                oItmVM != null &&
                !oItmVM.PrescriptionItemStatusCode.Equals(
                  CConstants.CANCELLED,
                  StringComparison.OrdinalIgnoreCase
                ) &&
                !oItmVM.PrescriptionItemStatusCode.Equals(
                  CConstants.DISCONTINUED,
                  StringComparison.OrdinalIgnoreCase
                ) &&
                !oItmVM.PrescriptionItemStatusCode.Equals(
                  CConstants.COMPLETED,
                  StringComparison.OrdinalIgnoreCase
                )
              ) {
                let oGroupHeader: PrescriptionItemVM =
                  oORSHelper.GetGropingHeader(
                    String.Format(
                      Resource.Infusion.SequenceGroupHeader_Text,
                      oItmVM.FormViewerDetails.BasicDetails.InfusionDetails
                        .GroupSequenceNo
                    ),
                    0,
                    PatientContext.PrescriptionType,
                    DateTime.MinValue,
                    true
                  );
                oGroupHeader.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo =
                  oItmVM.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo;
                oPresItem.Add(oGroupHeader);
                lstAddedSequenceGroup.Add(
                  oItmVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .GroupSequenceNo
                );
              }
            }
            if (
              !String.Equals(
                oItmVM.FormViewerDetails.BasicDetails.GroupHeaderName,
                CConstants.sawaitingauthHeader,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              oItmVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
              oItmVM.FormViewerDetails.BasicDetails.SequenceInfo
                .GroupSequenceNo > 0 &&
              (lstAddedSequenceGroup.Count == 0 ||
                !lstAddedSequenceGroup.Contains(
                  oItmVM.FormViewerDetails.BasicDetails.SequenceInfo
                    .GroupSequenceNo
                ))
            ) {
              if (
                oItmVM != null &&
                !oItmVM.PrescriptionItemStatusCode.Equals(
                  CConstants.CANCELLED,
                  StringComparison.OrdinalIgnoreCase
                ) &&
                !oItmVM.PrescriptionItemStatusCode.Equals(
                  CConstants.DISCONTINUED,
                  StringComparison.OrdinalIgnoreCase
                ) &&
                !oItmVM.PrescriptionItemStatusCode.Equals(
                  CConstants.COMPLETED,
                  StringComparison.OrdinalIgnoreCase
                )
              ) {
                let oGroupHeader: PrescriptionItemVM =
                  oORSHelper.GetGropingHeader(
                    String.Format(
                      Resource.Infusion.SequenceGroupHeader_Text,
                      oItmVM.FormViewerDetails.BasicDetails.SequenceInfo
                        .GroupSequenceNo
                    ),
                    0,
                    PatientContext.PrescriptionType,
                    DateTime.MinValue,
                    true
                  );
                oGroupHeader.FormViewerDetails.BasicDetails.SequenceInfo =
                  new SequenceDetail();
                oGroupHeader.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo =
                  oItmVM.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo;
                oPresItem.Add(oGroupHeader);
                lstAddedSequenceGroup.Add(
                  oItmVM.FormViewerDetails.BasicDetails.SequenceInfo
                    .GroupSequenceNo
                );
              }
            }
            if (
              oItmVM != null &&
              (String.Equals(
                oItmVM.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.COMPLETED,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
                String.Equals(
                  oItmVM.PrescriptionItemStatus,
                  PrescriptionItemStatusCodes.DISCONTINUED,
                  StringComparison.InvariantCultureIgnoreCase
                ))
            ) {
              if (
                this.IsDisCompletedChecked ||
                oItmVM.IsCompletedDisContItemFor72Hrs?.Equals('1')
              ) {
                oPresItem.Add(oItmVM);
              } else {
                this.oTempPrescDisCancelItemVM.Add(oItmVM);
              }
            } else if (ISAllowDisCancel && !this.IsDisCanChecked) {
              if (
                oItmVM != null &&
                oItmVM.FormViewerDetails != null &&
                oItmVM.FormViewerDetails.BasicDetails != null &&
                oItmVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                oItmVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo > 0
              ) {
                if (!oItmVM.IsGroupHeader) {
                  cntControl = new iLabel();
                  let tbTextBlock: TextBlock = null;
                  cntControl = LineDisplayHelper.GetPrescriptionItem(
                    Common.GetPrescriptionLineItemVM(oItmVM),
                    colWidth,
                    '0',
                    (o) => {
                      tbTextBlock = o;
                    }
                  );
                  if (
                    tbTextBlock != null &&
                    !String.IsNullOrEmpty(tbTextBlock.Text)
                  ) {
                    oItmVM.MedLineDisplayText = tbTextBlock.Text;
                  }
                }
                this.oTempPrescDisCancelItemVM.Add(oItmVM);
              }
            } else {
              oPresItem.Add(oItmVM);
            }
            // }
          });
          if (
            this.oTempPrescDisCancelItemVM != null &&
            this.oTempPrescDisCancelItemVM.Count > 0
          ) {
            this.oTempPrescDisCancelItemVM = this.oTempPrescDisCancelItemVM
              .OrderBy(
                (i) =>
                  i.FormViewerDetails.BasicDetails.InfusionDetails
                    .GroupSequenceNo
              )
              .ThenBy(
                (j) =>
                  j.FormViewerDetails.BasicDetails.InfusionDetails
                    .ItemSequenceNo
              )
              .ToList();
          }
          this.MedsResolve = oPresItem;
          this.CompletedItemMsg('RHS', '');
          if (
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.OutPatientPrescribeMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClerkingPrescribeMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.LeavePrescribeMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.DischargePrescribeMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.InpatientPrescribeMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ForadminPrescribeMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (this.MedsResolve != null) {
              this.IsActiveItemExistsDuringLoad = this.MedsResolve.Any(
                (Item) =>
                  Item.PrescriptionOID > 0 &&
                  !String.Equals(
                    Item.PrescriptionItemStatus,
                    CConstants.DISCONTINUED,
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    Item.PrescriptionItemStatus,
                    CConstants.CANCELLED,
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    Item.PrescriptionItemStatus,
                    CConstants.AWAITINGAUTHORISE,
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    Item.PrescriptionItemStatus,
                    CConstants.ONHOLD,
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    Item.PrescriptionItemStatus,
                    CConstants.COMPLETED,
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  String.IsNullOrEmpty(Item.OperationMode) &&
                  !Item.IsOrderSetHeader
              );
            }
          }
          this.IsDispensingEnabled = this.MedsResolve.Count > 0;
          this.IsSupplyRequestInitiated = QueryStringInfo.EnableIsSupplyRequest;
          if (QueryStringInfo.SelPrescItemOID > 0) {
            let oSelPrescItem = this.MedsResolve.Where(
              (x) => x.PrescriptionItemOID == QueryStringInfo.SelPrescItemOID
            );
            if (oSelPrescItem != null && oSelPrescItem.Count() > 0) {
              Busyindicator.SetStatusBusy('PresChartAmend');
              let _tmpSelPrescItem: PrescriptionItemVM = oSelPrescItem.First();
              _tmpSelPrescItem.IsConflictClick = false;
              _tmpSelPrescItem.FormViewerClick(true);
            }
          }
          if (
            e.Result != null &&
            e.Result.oViewData != null &&
            e.Result.oViewData.AdhocMCILorenzoid != null
          ) {
            CommonFlags.MCidentifyingName =
              e.Result.oViewData.AdhocMCIdentifyingname;
            CommonFlags.MCidentifyingOID =
              e.Result.oViewData.AdhocMCIdentifyingoid;
            CommonFlags.MCidentifyingType = 'CATALOGUEITEM';
            CommonFlags.MCsubtype = CConstants.SUBTYPE;
            CommonFlags.MClorenzoid = e.Result.oViewData.AdhocMCILorenzoid;
          }
          if (
            e.Result != null &&
            e.Result.oViewData != null &&
            !String.IsNullOrEmpty(e.Result.oViewData.ReviewPeriodAlertItems) &&
            (String.IsNullOrEmpty(
              QueryStringInfo.IsLaunchformPreschartReview
            ) ||
              String.Compare(
                QueryStringInfo.IsLaunchformPreschartReview,
                'false',
                StringComparison.OrdinalIgnoreCase
              ) == 0)
          ) {
            this.sReviewPeriodAlertItems =
              e.Result.oViewData.ReviewPeriodAlertItems;
            if (
              !String.IsNullOrEmpty(e.Result.oViewData.ReviewPeriodAlertItems)
            ) {
              if (e.Result.oViewData.ReviewPeriodAlertItems.Contains(',*~')) {
                this.sReviewPeriodAlertItems = String.Join(
                  '\n -',
                  this.sReviewPeriodAlertItems
                    .Split(',*~', StringSplitOptions.None)
                );
                this.sReviewPeriodAlertItems =
                  '\n\n - ' + this.sReviewPeriodAlertItems;
              } else {
                this.sReviewPeriodAlertItems =
                  '\n\n - ' + e.Result.oViewData.ReviewPeriodAlertItems;
              }
            }
            if (
              PatientContext.IPPMADU_P2 &&
              (String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Inpatient,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
                String.Compare(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Foradministration,
                  StringComparison.OrdinalIgnoreCase
                ) == 0)
            ) {
              this.ShowReviewAfter();
            }
          }
          if (
            e.Result != null &&
            e.Result.oViewData != null &&
            !String.IsNullOrEmpty(e.Result.oViewData.TeamOIDs)
          ) {
            this.sTeamOIDs = e.Result.oViewData.TeamOIDs;
          }
          if (
            e.Result != null &&
            e.Result.oViewData != null &&
            !String.IsNullOrEmpty(e.Result.oViewData.TeamNames)
          ) {
            this.sTeamNames = e.Result.oViewData.TeamNames;
          }
          if (this.TeamBasedSearchDrugCatalogueCompleted != null) {
            this.TeamBasedSearchDrugCatalogueCompleted();
          }
        }
        if (
          String.Compare(
            this.AppContext.MenuCode,
            CConstants.ClinicallyVerifyMenuSL,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          this.PrescriptionStatusDisplayTextVisibility = Visibility.Visible;
          if (
            String.Compare(
              objResList.oViewData.CompletedStatus,
              CConstants.CompletedByPrescriber,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          ) {
            this.PrescriptionStatusDisplayText =
              'Discharge medications complete';
          } else if (
            String.Compare(
              objResList.oViewData.CompletedStatus,
              CConstants.InProgress,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          ) {
            this.PrescriptionStatusDisplayText =
              'Discharge medications in progress';
          } else if (
            String.Compare(
              objResList.oViewData.CompletedStatus,
              CConstants.CompletedByPharmacist,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          ) {
            this.PrescriptionStatusDisplayText =
              'Discharge medications complete and clinically verified';
          }
        } else {
          if (
            objResList.oViewData != null &&
            (String.Compare(
              objResList.oViewData.CompletedStatus,
              CConstants.CompletedByPrescriber,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                objResList.oViewData.CompletedStatus,
                CConstants.CompletedByPharmacist,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0)
          ) {
            if (
              PatientContext.PrescriptionType == PrescriptionTypes.Discharge
            ) {
              this.ColorCompletedByPrescriberVisible = '#B9FB72';
            } else {
              this.ColorCompletedByPrescriberVisible = '#FFE0EFF1';
            }
            this.IsCompletedByPrescriberBoxChecked = true;
          } else {
            this.IsCompletedByPrescriberBoxChecked = false;
            this.ColorCompletedByPrescriberVisible = '#FFE0EFF1';
          }
          this.PrescriptionStatusDisplayTextVisibility = Visibility.Collapsed;
        }
        this.OriginalLastInfusionGroupSequence =
          objResList != null && objResList.oViewData != null
            ? objResList.oViewData.MaxGrpSeqNo
            : 0;
        this.LastInfusionGroupSequenceNo =
          this.OriginalLastInfusionGroupSequence;
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
    if (
      this.MedsResolve == null ||
      (this.MedsResolve != null && this.MedsResolve.Count <= 0)
    ) {
      this.ResolveGridNoRecordsText = 'No records to show';
    }
    Busyindicator.SetStatusIdle('Prescribe');
    this.LaunchIPForAdmin(false);
    this.profile.OnProfileLoaded = (s, e) => {
      this.profile_PrintLoaded(s, e);
    };
    this.profile.GetProfile<PrintConfigurationData>(
      'VW_MEDICONFIG',
      'PRINTCFG'
    );
  }
  private ResolveClVerify_GetPatientMedDisContItemsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetPatientMedDisContItemsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000036;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:GetPatientMedicationListCompleted()';
    if (e.Error == null) {
      try {
        let objResList: IPPMAManagePrescSer.CResMsgGetPatientMedDisContItems =
          e.Result;
        let oResponse: ObservableCollection<IPPMAManagePrescSer.PrescriptionItemView> =
          objResList.oPrescriptionItemView;
        if (oResponse != null) {
          let oPresItem: ObservableCollection<PrescriptionItemVM> =
            new ObservableCollection<PrescriptionItemVM>();
          oResponse.forEach((oItemView) => {
            if (oItemView instanceof IPPMAManagePrescSer.PrescriptionItemView) {
              let oItemVM: PrescriptionItemVM = new PrescriptionItemVM();
              if (oItemView.oPrescriptionItem != null) {
                oItemVM.FormViewerDetails = new FormViewerVM();
                oItemVM.FormViewerDetails.PresItemDRCVM = new PresItemDRCVM();
                oItemVM.FormViewerDetails.BasicDetails = new BasicDetailsVM(
                  oItemVM
                );
                oItemVM.FormViewerDetails.BasicDetails.InfusionDetails =
                  new InfusionVM();
                if (oItemView.oPrescriptionItem != null)
                  oItemVM.PrescriptionOID =
                    oItemView.oPrescriptionItem.PrescriptionOID;
                if (
                  oItemView.oPrescriptionItem != null &&
                  !String.IsNullOrEmpty(oItemView.oPrescriptionItem.IsInfusion)
                )
                  oItemVM.FormViewerDetails.BasicDetails.Infusions = true;
                oItemVM.FormViewerDetails.BasicDetails.IdentifyingName =
                  oItemView.oPrescriptionItem.IdentifyingName;
                if (
                  oItemView.oPresItemBasicPropertiesView != null &&
                  oItemView.oPresItemBasicPropertiesView.FormViewParameters !=
                    null &&
                  oItemView.oPresItemBasicPropertiesView.FormViewParameters
                    .IntravenousInfusionData != null
                ) {
                  oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsInfusionAlertShown =
                    oItemView.oPresItemBasicPropertiesView.FormViewParameters.IntravenousInfusionData.IsAlertShown;
                }
                if (
                  String.Compare(
                    oItemView.oPrescriptionItem.PrescriptionItemStatus,
                    CConstants.DISCONTINUED,
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
                )
                  oItemVM.PrescriptionItemStatus = 'Discontinued';
                else if (
                  String.Compare(
                    oItemView.oPrescriptionItem.PrescriptionItemStatus,
                    CConstants.CANCELLED,
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
                )
                  oItemVM.PrescriptionItemStatus = 'Cancelled';
              }
              oPresItem.Add(oItemVM);
            }
          });
          this.MedsDisCon = oPresItem;
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
    this.IsResolutionGirdLoading = true;
    PrescriptionHelper.GetPatientMedications(
      PatientContext.PrescriptionType,
      this.k,
      PatientContext.EncounterOid,
      this,
      (s, e) => {
        if (this.rteLoaded) {
        this.Resolve_GetPatientMedicationListCompleted(s, e);
        } else {
          this.refreshIntervalId = setInterval(() => {
            if (this.rteLoaded) {
              clearInterval(this.refreshIntervalId);
              this.Resolve_GetPatientMedicationListCompleted(s, e);
            }
          }, 100);
        }
      }
    );
  }
  public FillPresItemPatientAddnDetail(): IPPMAManagePrescSer.PresItemPatientAddnDetail {
    let objPresItemPatientAddnDetail: IPPMAManagePrescSer.PresItemPatientAddnDetail =
      new IPPMAManagePrescSer.PresItemPatientAddnDetail();
    objPresItemPatientAddnDetail.CareActivityCode = this.CACode;
    objPresItemPatientAddnDetail.ACTONCode =
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ? PrescriptionTypes.Clerking
        : PatientContext.PrescriptionType;
    objPresItemPatientAddnDetail.EncounterOID = Convert.ToInt64(
      PatientContext.EncounterOid
    );
    objPresItemPatientAddnDetail.PatientOID = Convert.ToInt64(
      PatientContext.PatientOID
    );
    // revisit required : AppContext replaced with AppContextInfo
    objPresItemPatientAddnDetail.RecordedByUserOID = Convert.ToInt64(
      AppContextInfo.UserOID
    );
    objPresItemPatientAddnDetail.RecordedDTTM = CommonBB.GetServerDateTime();
    if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
      let oTemp: number[] = this.MedsResolve.Where(
        (C) =>
          C.FormViewerDetails != null &&
          C.FormViewerDetails.BasicDetails != null &&
          (C.FormViewerDetails.BasicDetails.IsDoseCalcExist ||
            C.IsDoseCalcPerformed) &&
          C.FormViewerDetails.BasicDetails.DoseCalcExist.Equals('2')
      )
        .Select((S) => S.PrescriptionItemOID)
        .ToArray();
      if (oTemp != null && oTemp.length > 0) {
        objPresItemPatientAddnDetail.PrescriptionItemOIDs = String.Join(
          ',',
          oTemp.Select((p) => p.ToString()).ToArray()
        );
      }
      this.MedsResolve.ForEach((oItemVM) => {
        if (
          oItemVM.PrescriptionItemOID == 0 &&
          oItemVM.IsDoseCalcPerformed &&
          oItemVM.DoseCalculationDetails != null &&
          oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist.Equals('2')
        ) {
          oItemVM.DoseCalculationDetails.CalculatedDTTM =
            objPresItemPatientAddnDetail.RecordedDTTM;
        }
      });
    }
    return objPresItemPatientAddnDetail;
  }

  public FillPatientPrescription(
    item:
      | IPPMAManagePrescSer.Medication
      | IPPMAManagePrescSer.PrescriptionItemDetails
  ): void {
    if (item instanceof IPPMAManagePrescSer.Medication) {
      this.FillPatientPrescription1(item);
    } else if (item instanceof IPPMAManagePrescSer.PrescriptionItemDetails) {
      this.FillPatientPrescription2(item);
    }
  }

  public FillPatientPrescription1(
    SubmitDrug: IPPMAManagePrescSer.Medication
  ): void {
    SubmitDrug.PatientPrescription = new IPPMAManagePrescSer.Prescription();
    SubmitDrug.PatientPrescription.PatientOID = Convert.ToInt64(
      PatientContext.PatientOID
    );
    SubmitDrug.PatientPrescription.EncounterOID = Convert.ToInt64(
      PatientContext.EncounterOid
    );
    SubmitDrug.PatientPrescription.HealthOrganisation =
      ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
        Name: AppContextInfo.OrganisationName,
        OID: Convert.ToInt64(AppContextInfo.OrganisationOID),
      });
    SubmitDrug.PatientPrescription.PrescriberRole = ObjectHelper.CreateObject(
      new IPPMAManagePrescSer.ObjectInfo(),
      {
        OID: Convert.ToInt64(AppContextInfo.JobRoleOID),
        Name: AppContextInfo.RoleProfileName,
      }
    );
    SubmitDrug.PatientPrescription.Specialty = ObjectHelper.CreateObject(
      new IPPMAManagePrescSer.ObjectInfo(),
      { OID: Convert.ToInt64(AppContextInfo.SpecialtyOID) }
    );
    if (
      PatientContext.ClerkFormViewDefaultBehavior ==
      ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      SubmitDrug.PatientPrescription.PrescriptionType =
        PrescriptionTypes.Clerking;
    } else {
      SubmitDrug.PatientPrescription.PrescriptionType =
        PatientContext.PrescriptionType;
    }
    if (
      this.IsPrint &&
      !String.IsNullOrEmpty(this.PrinterPolicy) &&
      String.Compare(this.WizardContext['MENUCODE'], 'MN_MEDCLERKSL_P2') != 0
    )
      SubmitDrug.PatientPrescription.PrintStatus = this.PrinterPolicy;
    else SubmitDrug.PatientPrescription.PrintStatus = 'N';
    SubmitDrug.PatientPrescription.PrescriberDetails =
      ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
        OID: ContextInfo.UserOID,
      });
    SubmitDrug.PatientPrescription.IsMergedPatient =
      PatientContext.PatientOID > 0 &&
      PatientContext.MergedPatientOID > 0 &&
      PatientContext.PatientOID != PatientContext.MergedPatientOID
        ? '1'
        : '0';
    if (
      SubmitDrug.PatientPrescription.IsMergedPatient == '0' &&
      (PatientContext.IsMergedPatient == '1' ||
        PatientContext.IsMergedPatient == '2')
    ) {
      SubmitDrug.PatientPrescription.IsMergedPatient = '1';
    }
    SubmitDrug.PatientPrescription.IsPGD =
      UserPermissions.PrescribeWithRestriction ? '1' : '0';
  }
  public FillPatientPrescription2(
    AuthoriseSubmitDrug: IPPMAManagePrescSer.PrescriptionItemDetails
  ): void {
    AuthoriseSubmitDrug.ActionPerformed.PerformedBy =
      new IPPMAManagePrescSer.ObjectInfo();
    AuthoriseSubmitDrug.ActionPerformed.PerformedBy.OID = Convert.ToInt64(
      AppContextInfo.UserOID
    );
    AuthoriseSubmitDrug.ActionPerformed.PerformedBy.Name = AppContextInfo.UserName;
    AuthoriseSubmitDrug.ActionPerformed.PerformedDTTM =
      CommonBB.GetServerDateTime();
    AuthoriseSubmitDrug.PrescriptionBasicData =
      new IPPMAManagePrescSer.Prescription();
    AuthoriseSubmitDrug.PrescriptionBasicData.PatientOID =
      PatientContext.PatientOID;
    AuthoriseSubmitDrug.PrescriptionBasicData.EncounterOID =
      PatientContext.EncounterOid;
    AuthoriseSubmitDrug.PrescriptionBasicData.HealthOrganisation =
      ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
        Name: AppContextInfo.OrganisationName,
        OID: Convert.ToInt64(AppContextInfo.OrganisationOID),
      });
    AuthoriseSubmitDrug.PrescriptionBasicData.PrescriberRole =
      ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
        OID: Convert.ToInt64(AppContextInfo.JobRoleOID),
        Name: AppContextInfo.RoleProfileName,
      });
    AuthoriseSubmitDrug.PrescriptionBasicData.Specialty =
      ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
        OID: Convert.ToInt64(AppContextInfo.SpecialtyOID),
      });
    AuthoriseSubmitDrug.PrescriptionBasicData.PrintStatus = 'N';
    AuthoriseSubmitDrug.PrescriptionBasicData.PrescriberDetails =
      ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
        OID: ContextInfo.UserOID,
      });
    AuthoriseSubmitDrug.PrescriptionBasicData.IsMergedPatient =
      PatientContext.PatientOID > 0 &&
      PatientContext.MergedPatientOID > 0 &&
      PatientContext.PatientOID != PatientContext.MergedPatientOID
        ? '1'
        : '0';
    if (
      AuthoriseSubmitDrug.PrescriptionBasicData.IsMergedPatient == '0' &&
      (PatientContext.IsMergedPatient == '1' ||
        PatientContext.IsMergedPatient == '2')
    ) {
      AuthoriseSubmitDrug.PrescriptionBasicData.IsMergedPatient = '1';
    }
  }
  FillDRCRequest(
    oItemVMMedDRCVMDetails: ObservableCollection<MedDRCVM>,
    MedDRCReason: CListItem,
    DRCComments: string,
    DRCAcknowledge: boolean,
    BehaviourType: string,
    IsRelaunchFormviewer: boolean,
    out1: (
      DRCConflict: ObservableCollection<IPPMAManagePrescSer.DRCConflict>
    ) => void
  ): void {
    let DRCConflict: ObservableCollection<IPPMAManagePrescSer.DRCConflict>;

    DRCConflict = new ObservableCollection<IPPMAManagePrescSer.DRCConflict>();
    oItemVMMedDRCVMDetails.forEach((oItemCMedDRCVM) => {
      let oDRCConflict: IPPMAManagePrescSer.DRCConflict =
        new IPPMAManagePrescSer.DRCConflict();
      if (IsRelaunchFormviewer) {
        if (!String.IsNullOrEmpty(oItemCMedDRCVM.DRCDefDoseType)) {
          oDRCConflict.DRCDefDoseTypeLorenzoID = oItemCMedDRCVM.DRCDefDoseType;
        }
        if (!String.IsNullOrEmpty(oItemCMedDRCVM.DRCDefDoseTypeCode)) {
          oDRCConflict.DRCDefDoseTypeCode = oItemCMedDRCVM.DRCDefDoseTypeCode;
        }
      } else if (!String.IsNullOrEmpty(oItemCMedDRCVM.DRCDefDoseTypeCode)) {
        oDRCConflict.DRCDefDoseTypeLorenzoID =
          oItemCMedDRCVM.DRCDefDoseTypeCode;
      }
      oDRCConflict.DRCMessage = oItemCMedDRCVM.DRCMessage;
      oDRCConflict.PatientWeight = oItemCMedDRCVM.PatientWeight;
      oDRCConflict.PatientBSA = oItemCMedDRCVM.PatientBSA;
      oDRCConflict.IsDRCPassed = oItemCMedDRCVM.DRCOutCome ? '1' : '0';
      if (
        oItemCMedDRCVM.DRCConflictDetail != null &&
        oItemCMedDRCVM.DRCConflictDetail.Count > 0
      ) {
        oDRCConflict.ConflictDetails =
          new ObservableCollection<IPPMAManagePrescSer.DRCConflictDetails>();
        oDRCConflict.ConflictDetails = this.FillDRCErrorDetails(
          oItemCMedDRCVM.DRCConflictDetail,
          MedDRCReason,
          DRCComments,
          DRCAcknowledge,
          BehaviourType
        );
      }
      if (!String.IsNullOrEmpty(oDRCConflict.DRCDefDoseTypeLorenzoID)) {
        DRCConflict.Add(oDRCConflict);
      }
    });

    out1(DRCConflict);
  }
  public GetResolvePrscriptionItemDetails(
    oItemVM: PrescriptionItemVM
  ): IPPMAManagePrescSer.PrescriptionItemDetails {
    let isAuthClinicalVerifyLaunched: boolean =
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenu,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenu,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0;
    let ServerDatetime = CommonBB.GetServerDateTime();
    let prsItem: IPPMAManagePrescSer.PrescriptionItemDetails =
      new IPPMAManagePrescSer.PrescriptionItemDetails();
    if (!oItemVM.bIsReprescribe && oItemVM.GpConnectMedicationItem != null) {
      prsItem.GPConnectMedication = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.GPConnectItem(),
        {
          GPConnectID: oItemVM.GpConnectMedicationItem.GPConnectID,
          MedicationItemDetail:
            oItemVM.GpConnectMedicationItem.MedicationItemDetail,
          LastIssued: oItemVM.GpConnectMedicationItem.LastIssued,
          ItemTypeCode: oItemVM.GpConnectMedicationItem.ItemTypeCode,
          ItemTypeDisplay: oItemVM.GpConnectMedicationItem.ItemTypeDisplay,
          Dosage:
            oItemVM.GpConnectMedicationItem.Dosage == null
              ? null
              : oItemVM.GpConnectMedicationItem.Dosage.Select((x) =>
                  ObjectHelper.CreateObject(
                    new IPPMAManagePrescSer.GPConnectAdminDosage(),
                    {
                      Text: x != null ? x.Text : String.Empty,
                      Instruction: x != null ? x.Instruction : String.Empty,
                    }
                  )
                ).ToArray(),
          MedicationCode: oItemVM.GpConnectMedicationItem.MedicationCode,
        }
      );
    } else {
      prsItem.GPConnectMedication = null;
    }
    prsItem.FormViewParameters =
      new IPPMAManagePrescSer.PrescriptionItemFormViewParameters();
    prsItem.BasicProperties =
      new IPPMAManagePrescSer.IPPPresItemBasicProperties();
    prsItem.AdditionalProperties =
      new IPPMAManagePrescSer.PresItemAdditionalProperties();
    prsItem.ActionPerformed = new IPPMAManagePrescSer.PrescriptionItemAction();
    prsItem.DrugSpecificProperties =
      new IPPMAManagePrescSer.PresItemDrugProperties();
    prsItem.FormViewParameters.IntravenousInfusionData =
      new IPPMAManagePrescSer.IntravenousInfusionDetails();
    prsItem.FormViewParameters.AdminDeviceData =
      new IPPMAManagePrescSer.AdminDeviceDetails();
    prsItem.FormViewParameters.IntravenousInfusionData.VolumeUOM =
      new IPPMAManagePrescSer.UOM();
    prsItem.FormViewParameters.IntravenousInfusionData.InfusionPeriodUOM =
      new IPPMAManagePrescSer.UOM();
    prsItem.FormViewParameters.IntravenousInfusionData.RateUOM =
      new IPPMAManagePrescSer.UOM();
    prsItem.FormViewParameters.AdminDeviceData.TopUpDoseUOM =
      new IPPMAManagePrescSer.UOM();
    prsItem.FormViewParameters.AdminDeviceData.LockOutPeriodUOM =
      new IPPMAManagePrescSer.UOM();
    prsItem.FormViewParameters.AdminDeviceData.MonitorPeriodUOM =
      new IPPMAManagePrescSer.UOM();
    prsItem.FormViewParameters.AdminDeviceData.BoosterDoseUOM =
      new IPPMAManagePrescSer.UOM();
    if (
      this.CanDoTmpSave &&
      oItemVM.ActionCode == ActivityTypes.Prescribe &&
      !String.IsNullOrEmpty(oItemVM.PrescriptionType) &&
      String.Equals(
        oItemVM.PrescriptionType,
        PrescriptionTypes.Inpatient,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.IsNullOrEmpty(oItemVM.OperationMode) &&
      String.Equals(
        oItemVM.OperationMode,
        'N',
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      oItemVM.GpConnectMedicationItem != null &&
      !String.IsNullOrEmpty(oItemVM.GpConnectMedicationItem.GPConnectID)
    ) {
      prsItem.IsAutoSaveGPConnectForClerking = true;
    } else {
      prsItem.IsAutoSaveGPConnectForClerking = false;
    }
    
    if (!String.IsNullOrEmpty(oItemVM.PrescriptionItemStatus) && !(oItemVM.PrescriptionItemStatus.Equals(CConstants.CANCELLED, StringComparison.OrdinalIgnoreCase) || oItemVM.PrescriptionItemStatus.Equals(CConstants.DISCONTINUED, StringComparison.OrdinalIgnoreCase) || oItemVM.PrescriptionItemStatus.Equals(CConstants.COMPLETED, StringComparison.OrdinalIgnoreCase)) && oItemVM.HistoryOfAmend != null) {
        //prsItem.AuditChanges = oItemVM.HistoryOfAmend.ToArray();
        let temp: ObservableCollection<IPPMAManagePrescSer.PresItemAuditHistory> = new ObservableCollection<IPPMAManagePrescSer.PresItemAuditHistory>();
        oItemVM.HistoryOfAmend.Where((x) => {
          if (x != null){
            temp.Add(x);
          }
        })
        prsItem.AuditChanges = temp;
    }
    
    prsItem.AuditChangeReasonCode =
      oItemVM.formViewerDetails != null &&
      oItemVM.formViewerDetails.BasicDetails != null &&
      oItemVM.formViewerDetails.BasicDetails.ReasonforModification != null
        ? oItemVM.formViewerDetails.BasicDetails.ReasonforModification.Value
        : null;
    prsItem.IsDoseCalcPerformedInAmend = oItemVM.IsDoseCalcPerformedInAmend;
    if (oItemVM.DoseCalculationDetails != null) {
      prsItem.DoseCalculation = new IPPMAManagePrescSer.DoseCalculatorDetails();
      prsItem.DoseCalculation.PatientHeight =
        oItemVM.DoseCalculationDetails.Height;
      prsItem.DoseCalculation.HeightUOM =
        oItemVM.DoseCalculationDetails.HeightUOM;
      prsItem.DoseCalculation.PatientWeight =
        oItemVM.DoseCalculationDetails.Weight;
      prsItem.DoseCalculation.WeightUOM =
        oItemVM.DoseCalculationDetails.WeightUOM;
      prsItem.DoseCalculation.UpdatePatientRecord = oItemVM
        .DoseCalculationDetails.UpdatePatientRecord
        ? '1'
        : '0';
      prsItem.DoseCalculation.IsDailyDose = String.Equals(
        oItemVM.DoseCalculationDetails.CalculationFor,
        CConstants.DailyDose
      )
        ? '1'
        : '0';
      prsItem.DoseCalculation.DoseCalcBasedOn =
        oItemVM.DoseCalculationDetails.DoseCalcBasedOn;
      prsItem.DoseCalculation.RequestDose = Convert.ToString(
        oItemVM.DoseCalculationDetails.RequestDose
      );
      prsItem.DoseCalculation.RequestDoseUOMOID =
        oItemVM.DoseCalculationDetails.ReqDoseUOMOID;
      prsItem.DoseCalculation.RequestDoseSecondUOM =
        oItemVM.DoseCalculationDetails.RequestDoseSecondUOM;
      prsItem.DoseCalculation.RequestDoseThirdUOMLzoID =
        oItemVM.DoseCalculationDetails.RequestDoseThirdUOMLzoID;
      prsItem.DoseCalculation.WeightOption =
        oItemVM.DoseCalculationDetails.WeightOption;
      prsItem.DoseCalculation.BSAFormula =
        oItemVM.DoseCalculationDetails.BSAFormula;
      prsItem.DoseCalculation.BSAValue = oItemVM.DoseCalculationDetails.BSA;
      if (
        String.Equals(
          oItemVM.DoseCalculationDetails.CalculationFor,
          CConstants.DailyDose
        )
      ) {
        prsItem.DoseCalculation.TotalDailyDose =
          oItemVM.DoseCalculationDetails.TotalDailyDose;
        prsItem.DoseCalculation.CalculatedDose = Convert.ToString(
          oItemVM.DoseCalculationDetails.CalculatedPerDose
        );
        if (oItemVM.DoseCalculationDetails.FrequencyOID > 0) {
          prsItem.DoseCalculation.FrequencyOID =
            oItemVM.DoseCalculationDetails.FrequencyOID;
        }
      } else {
        prsItem.DoseCalculation.TotalDailyDose =
          oItemVM.DoseCalculationDetails.CalculatedPerDose;
      }
      prsItem.DoseCalculation.OrderedPerDose = Convert.ToString(
        oItemVM.DoseCalculationDetails.OrderedAmount
      );
      prsItem.DoseCalculation.ABWWeight = Convert.ToString(
        oItemVM.DoseCalculationDetails.ABWWeight
      );
      prsItem.DoseCalculation.IBWWeight = Convert.ToString(
        oItemVM.DoseCalculationDetails.IBWWeight
      );
      prsItem.DoseCalculation.RecordedHightDTTM =
        oItemVM.DoseCalculationDetails.RecordedHeightDTTM;
      prsItem.DoseCalculation.RecordedWeightDTTM =
        oItemVM.DoseCalculationDetails.RecordedWeightDTTM;
      prsItem.DoseCalculation.IsHeightEstimated =
        oItemVM.DoseCalculationDetails.IsHeightEstimated;
      prsItem.DoseCalculation.IsWeightEstimated =
        oItemVM.DoseCalculationDetails.IsWeightEstimated;
      prsItem.DoseCalculation.CalculatedDTTM =
        oItemVM.DoseCalculationDetails.CalculatedDTTM;
      prsItem.DoseCalculation.OverrideReason =
        oItemVM.DoseCalculationDetails.OverrideReason;
    }
    let IsInfusionDrug: boolean = false;
    if (
      (PatientContext.IsINFUSIONON &&
        oItemVM.FormViewerDetails.BasicDetails.Route != null &&
        oItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
          '1',
          StringComparison.CurrentCultureIgnoreCase
        ) == 0) ||
      (!String.IsNullOrEmpty(oItemVM.ItemSubType) &&
        (oItemVM.ItemSubType.Equals(DrugItemSubTypeCode.MEDICAL_GAS) ||
          oItemVM.ItemSubType.Equals(DrugItemSubTypeCode.BLOOD_PRODUCT)))
    ) {
      IsInfusionDrug = true;
    } else if (
      PatientContext.IsINFUSIONON &&
      oItemVM.FormViewerDetails.BasicDetails.Route != null &&
      oItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
      oItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains('1')
    ) {
      IsInfusionDrug = true;
    } else if (
      PatientContext.IsINFUSIONON &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      oItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
      oItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked &&
      oItemVM.FormViewerDetails.BasicDetails.DefaultDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null
    ) {
      let SelMutiRoutes =
        oItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
          (SelRoutes) => SelRoutes.IsSelected
        ).Select((SelRoutes) => SelRoutes);
      if (SelMutiRoutes != null && SelMutiRoutes.Count() > 0) {
        IsInfusionDrug = !Common.IsNonInfusionMultiRoutes(
          oItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes
        );
      }
    }
    if (
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
    ) {
      if (
        (oItemVM.FormViewerDetails.BasicDetails.ReviewAfter != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.ReviewAfter
          ) &&
          String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.ReviewAfter,
            '-1.79769313486232E+308'
          ) != 0 &&
          String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.ReviewAfter,
            '-2147483648.0'
          ) != 0 &&
          Convert.ToDouble(
            oItemVM.FormViewerDetails.BasicDetails.ReviewAfter
          ) != Number.MinValue &&
          Convert.ToDouble(oItemVM.FormViewerDetails.BasicDetails.ReviewAfter) >
            0 &&
         DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.StartDTTM,
            DateTime.MinValue)) ||
        oItemVM.FormViewerDetails.BasicDetails.StopDate != null
      ) {
        if (
          oItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
          Visibility.Visible
        ) {
          prsItem.FormViewParameters.ReviewAfterDTTM =
            oItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
          prsItem.FormViewParameters.ReviewAfter =
            oItemVM.FormViewerDetails.BasicDetails.ReviewAfter;
          prsItem.FormViewParameters.IsReviewAlert =
            oItemVM.FormViewerDetails.BasicDetails.IsReviewAlert;
          prsItem.FormViewParameters.LastReviewedDTTM =
            oItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM;
          if (oItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM != null) {
            prsItem.FormViewParameters.ReviewAfterUOM =
              ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
                Code: oItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM
                  .Value,
                Name: oItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM
                  .DisplayText,
              });
          }
          if (
            oItemVM != null &&
            oItemVM.ActionCode == ActivityTypes.Amend &&
            oItemVM.FormViewerDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail != null &&
            oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail != null &&
            (oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail.ReviewOutcome == null ||
              (oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail
                .oReviewAfterDetail.ReviewOutcome != null &&
                String.IsNullOrEmpty(
                  oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail
                    .oReviewAfterDetail.ReviewOutcome.Code
                )))
          ) {
            prsItem.FormViewParameters.ReviewAfter =
              oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewPeriod;
            prsItem.FormViewParameters.ReviewAfterUOM =
              oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewAfterUOM;
          }
          if (DateTime.NotEquals(prsItem.FormViewParameters.ReviewAfterDTTM, DateTime.MinValue)) {
            prsItem.AdditionalProperties.ManageReviewDetail =
              new IPPMAManagePrescSer.ManageReviewPeriod();
            prsItem.AdditionalProperties.ManageReviewDetail.NewReviewAfter =
              prsItem.FormViewParameters.ReviewAfter;
            prsItem.AdditionalProperties.ManageReviewDetail.NewReviewAfterUOM =
              prsItem.FormViewParameters.ReviewAfterUOM;
            prsItem.AdditionalProperties.ManageReviewDetail.NewReviewRequestComments =
              oItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments;
            prsItem.AdditionalProperties.ManageReviewDetail.NewReviewAfterDTTM =
              prsItem.FormViewParameters.ReviewAfterDTTM;
            if (
              oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail !=
                null &&
              oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail
                .NewReviewType != null
            ) {
              prsItem.AdditionalProperties.ManageReviewDetail.NewReviewType =
                oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail.NewReviewType;
            } else {
              prsItem.AdditionalProperties.ManageReviewDetail.NewReviewType =
                new IPPMAManagePrescSer.ObjectInfo();
              prsItem.AdditionalProperties.ManageReviewDetail.NewReviewType.Code =
                CConstants.GenReview;
            }
          }
          if (
            oItemVM.OperationMode != 'N' &&
            oItemVM.ActionCode == ActivityTypes.Amend
          ) {
            prsItem.AdditionalProperties.ManageReviewDetail =
              oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail;
          }
        } else {
          prsItem.FormViewParameters.ReviewAfterDTTM = DateTime.MinValue;
          if (
            oItemVM != null &&
            oItemVM.FormViewerDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails
              .IsReviewAvailableBeforeSequence
          ) {
            prsItem.FormViewParameters.IsReviewAvailableBeforeSequence = true;
          }
          prsItem.FormViewParameters.ReviewAfter = String.Empty;
          prsItem.FormViewParameters.IsReviewAlert = false;
          prsItem.FormViewParameters.LastReviewedDTTM = DateTime.MinValue;
          oItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM = null;
        }
      }
    }
    if (
      IsInfusionDrug &&
      oItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null
    ) {
      prsItem.FormViewParameters.IntravenousInfusionData =
        new IPPMAManagePrescSer.IntravenousInfusionDetails();
      prsItem.FormViewParameters.AdminDeviceData =
        new IPPMAManagePrescSer.AdminDeviceDetails();
      prsItem.FormViewParameters.IntravenousInfusionData.VolumeUOM =
        new IPPMAManagePrescSer.UOM();
      prsItem.FormViewParameters.IntravenousInfusionData.InfusionPeriodUOM =
        new IPPMAManagePrescSer.UOM();
      prsItem.FormViewParameters.IntravenousInfusionData.RateUOM =
        new IPPMAManagePrescSer.UOM();
      prsItem.FormViewParameters.AdminDeviceData.TopUpDoseUOM =
        new IPPMAManagePrescSer.UOM();
      prsItem.FormViewParameters.AdminDeviceData.LockOutPeriodUOM =
        new IPPMAManagePrescSer.UOM();
      prsItem.FormViewParameters.AdminDeviceData.MonitorPeriodUOM =
        new IPPMAManagePrescSer.UOM();
      prsItem.FormViewParameters.AdminDeviceData.BoosterDoseUOM =
        new IPPMAManagePrescSer.UOM();
      if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking) {
        if (
          oItemVM.FormViewerDetails.BasicDetails.Route != null &&
          oItemVM.FormViewerDetails.BasicDetails.Route.Tag != null
        ) {
          if (
            oItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString() == '1'
          ) {
            prsItem.FormViewParameters.IntravenousInfusionData.IsInfusion =
              true;
          }
        }
      }
      if (
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .TargetLowerSatRange
        ) &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .TargetLowerSatRange,
          '0'
        ) != 0
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.TargetSaturationLower =
          Convert.ToInt32(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .TargetLowerSatRange
          );
      }
      if (
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .TargetUpperSatRange
        ) &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .TargetUpperSatRange,
          '0'
        ) != 0
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.TargetSaturationUpper =
          Convert.ToInt32(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .TargetUpperSatRange
          );
      }
      if (
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ConcentrationFreeText
        )
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.Concentration =
          Convert.ToInt32(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ConcentrationFreeText
          );
      } else {
        prsItem.FormViewParameters.IntravenousInfusionData.Concentration =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .Concentration != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Concentration
              .DisplayText
          )
            ? Convert.ToInt32(
                oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .Concentration.DisplayText
              )
            : 0;
      }
      if (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null) {
        prsItem.FormViewParameters.INFTYCODE =
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value;
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice !=
          null &&
        oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value !=
          'CC_IPPINFTYPPCA'
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.DeliveryDevice =
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .DeliveryDevice.DisplayText
          )
            ? oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .DeliveryDevice.DisplayText
            : String.Empty;
      } else if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .Medicalgasdelivery != null &&
        !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .Medicalgasdelivery.DisplayText) &&
        oItemVM.FormViewerDetails.BasicDetails.itemSubType != null &&
        String.Equals(
          oItemVM.FormViewerDetails.BasicDetails.itemSubType,
          CConstants.SUBTYPE_GAS,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.DeliveryDevice =
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .Medicalgasdelivery.DisplayText
          )
            ? oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .Medicalgasdelivery.DisplayText
            : String.Empty;
      } else {
        prsItem.FormViewParameters.IntravenousInfusionData.DeliveryDevice =
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .DeliveryDeviceFreetext
          )
            ? oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .DeliveryDeviceFreetext
            : String.Empty;
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .FluidSelectvalue != null &&
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue
          .Value != null &&
        IsInfusionDrug
      ) {
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext
          )
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.Fluid =
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
              OID: Convert.ToInt64(
                oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .FluidSelectvalue.Value
              ),
              Name: oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .FluidSelectvalue.DisplayText,
            });
          prsItem.FormViewParameters.IntravenousInfusionData.FluidIdentifyingOID =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
          prsItem.FormViewParameters.IntravenousInfusionData.FluidIdentifyingType =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingType;
        }
      }
      prsItem.FormViewParameters.IntravenousInfusionData.Volume =
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume;
      let lVolumeUOMOID: number = 0;
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM !=
          null &&
        Number.TryParse(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM
            .Value,
          (o) => {
            lVolumeUOMOID = o;
          }
        )
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.VolumeUOM.UOMId =
          lVolumeUOMOID;
        prsItem.FormViewParameters.IntravenousInfusionData.VolumeUOM.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM.DisplayText;
        prsItem.FormViewParameters.IntravenousInfusionData.VolumeUOM.UOMCode =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM
            .Tag != null
            ? oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM.Tag.ToString()
            : String.Empty;
      }
      prsItem.FormViewParameters.IntravenousInfusionData.InfusionPeriod =
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod
        )
          ? oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod.ToString()
          : String.Empty;
      let lInfPeriodUOMOID: number = 0;
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .InfusionPeriodUom != null &&
        Number.TryParse(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfusionPeriodUom.Value,
          (o) => {
            lInfPeriodUOMOID = o;
          }
        )
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.InfusionPeriodUOM.UOMId =
          lInfPeriodUOMOID;
        prsItem.FormViewParameters.IntravenousInfusionData.InfusionPeriodUOM.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.DisplayText;
        prsItem.FormViewParameters.IntravenousInfusionData.InfusionPeriodUOM.UOMCode =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfusionPeriodUom.Tag != null
            ? oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.Tag.ToString()
            : String.Empty;
      }
      prsItem.FormViewParameters.IntravenousInfusionData.IsEstimatedStopRecalculationRequired =
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsEstimatedStopRecalculationRequired;
      prsItem.FormViewParameters.IntravenousInfusionData.Rate =
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
      if (
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate
        )
      )
        prsItem.FormViewParameters.IntravenousInfusionData.UpperRate =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate;
      let lInfRateNumeratorUOMOID: number = 0;
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateNumeratorUom != null &&
        Number.TryParse(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom.Value,
          (o) => {
            lInfRateNumeratorUOMOID = o;
          }
        )
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.RateUOM.UOMId =
          lInfRateNumeratorUOMOID;
        prsItem.FormViewParameters.IntravenousInfusionData.RateUOM.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.DisplayText;
        prsItem.FormViewParameters.IntravenousInfusionData.RateUOM.UOMCode =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom.Tag != null
            ? oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom.Tag.ToString()
            : String.Empty;
      }
      let lInfRateDenominUOMOID: number = 0;
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .InfRateDinominatorUom != null &&
        Number.TryParse(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom.Value,
          (o) => {
            lInfRateDenominUOMOID = o;
          }
        )
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.RateDenominatorUOM =
          new IPPMAManagePrescSer.UOM();
        prsItem.FormViewParameters.IntravenousInfusionData.RateDenominatorUOM.UOMId =
          lInfRateDenominUOMOID;
        prsItem.FormViewParameters.IntravenousInfusionData.RateDenominatorUOM.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.DisplayText;
        prsItem.FormViewParameters.IntravenousInfusionData.RateDenominatorUOM.UOMCode =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom.Tag != null
            ? oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom.Tag.ToString()
            : String.Empty;
      }
      if (oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsBtnClicked) {
        if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .IsVolumeChecked != null
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.IsVolumeBasedInfusion =
            Convert.ToBoolean(
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .IsVolumeChecked
            )
              ? '1'
              : '0';
        } else {
          prsItem.FormViewParameters.IntravenousInfusionData.IsVolumeBasedInfusion =
            '0';
        }
      } else if (
        !oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsBtnClicked
      ) {
        if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
          String.Equals(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.DisplayText,
            InfusionVolume.ml
          ) &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
          ) &&
          !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.Dose)
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.IsVolumeBasedInfusion =
            '1';
        } else if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
          !String.Equals(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.DisplayText,
            InfusionVolume.ml
          ) &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
          ) &&
          !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.Dose)
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.IsVolumeBasedInfusion =
            '0';
        } else if (
          String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume
          ) &&
          !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.Dose)
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.IsVolumeBasedInfusion =
            '0';
        } else {
          prsItem.FormViewParameters.IntravenousInfusionData.IsVolumeBasedInfusion =
            '0';
        }
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .InfusionRateRndto != null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfusionRateRndto.Value
        )
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.RoundOffCode =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateRndto.Value;
      }
      if (
        !(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.INTERMITTENT
          ) == 0
        )
      ) {
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .LowConcentration
          )
        )
          prsItem.FormViewParameters.IntravenousInfusionData.LowConcentration =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration;
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .UpperConcentration
          )
        )
          prsItem.FormViewParameters.IntravenousInfusionData.UpperConcentration =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration;
        let lInfLowConcentrationUOMOID: number = 0;
        if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .LowConcentrationUOM != null &&
          Number.TryParse(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .LowConcentrationUOM.Value,
            (o) => {
              lInfLowConcentrationUOMOID = o;
            }
          )
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.LowConcentrationUOMOID =
            new IPPMAManagePrescSer.UOM();
          prsItem.FormViewParameters.IntravenousInfusionData.LowConcentrationUOMOID.UOMId =
            lInfLowConcentrationUOMOID;
          prsItem.FormViewParameters.IntravenousInfusionData.LowConcentrationUOMOID.UOMName =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM.DisplayText;
        }
        let lInfUpperConcentrationUOMOID: number = 0;
        if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .UpperConcentrationUOM != null &&
          Number.TryParse(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .UpperConcentrationUOM.Value,
            (o) => {
              lInfUpperConcentrationUOMOID = o;
            }
          )
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID =
            new IPPMAManagePrescSer.UOM();
          prsItem.FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID.UOMId =
            lInfUpperConcentrationUOMOID;
          prsItem.FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID.UOMName =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM.DisplayText;
        }
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        ) != 0 &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.FLUID
        ) != 0 &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT
        ) != 0
      ) {
        prsItem.FormViewParameters.AdminDeviceData.TopUpDose =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Bolus;
        let lBolusUOMOID: number = 0;
        if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM !=
            null &&
          Number.TryParse(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM
              .Value,
            (o) => {
              lBolusUOMOID = o;
            }
          )
        ) {
          prsItem.FormViewParameters.AdminDeviceData.TopUpDoseUOM.UOMId =
            lBolusUOMOID;
          prsItem.FormViewParameters.AdminDeviceData.TopUpDoseUOM.UOMName =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM.DisplayText;
        }
      }
      prsItem.FormViewParameters.AdminDeviceData.BoosterDose =
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose;
      let lBoosterUOMOID: number = 0;
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom !=
          null &&
        Number.TryParse(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom
            .Value,
          (o) => {
            lBoosterUOMOID = o;
          }
        )
      ) {
        prsItem.FormViewParameters.AdminDeviceData.BoosterDoseUOM.UOMId =
          lBoosterUOMOID;
        prsItem.FormViewParameters.AdminDeviceData.BoosterDoseUOM.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom.DisplayText;
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS
        ) != 0 &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        ) != 0 &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.FLUID
        ) != 0 &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT
        ) != 0
      ) {
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LockOutPeriod
          )
        ) {
          prsItem.FormViewParameters.AdminDeviceData.LockOutPeriod =
            Convert.ToInt64(
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .LockOutPeriod
            );
        }
        let lLockOutDurationUOMOid: number = 0;
        if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .LockoutDuration != null &&
          Number.TryParse(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .LockoutDuration.Value,
            (o2) => {
              lLockOutDurationUOMOid = o2;
            }
          )
        ) {
          prsItem.FormViewParameters.AdminDeviceData.LockOutPeriodUOM.UOMId =
            lLockOutDurationUOMOid;
          prsItem.FormViewParameters.AdminDeviceData.LockOutPeriodUOM.UOMName =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LockoutDuration.DisplayText;
        }
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS
        ) != 0 &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        ) != 0 &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.FLUID
        ) != 0 &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT
        ) != 0
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.MaxDose =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.MaxDose;
      }
      prsItem.FormViewParameters.IntravenousInfusionData.Lumen =
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Lumen;
      prsItem.FormViewParameters.IntravenousInfusionData.IsOnGoing = 'N';
      prsItem.FormViewParameters.AdminDeviceData.MonitorPeriod =
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod;
      let lMonitoringPeriodUOMOid: number = 0;
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .MonitoringPeriodUOM != null &&
        Number.TryParse(
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .MonitoringPeriodUOM.Value,
          (o) => {
            lMonitoringPeriodUOMOid = o;
          }
        )
      ) {
        prsItem.FormViewParameters.AdminDeviceData.MonitorPeriodUOM.UOMId =
          lMonitoringPeriodUOMOid;
        prsItem.FormViewParameters.AdminDeviceData.MonitorPeriodUOM.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM.DisplayText;
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .PrescriptionItemNumber > 0
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.InfusionSeqOrder =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo;
        prsItem.FormViewParameters.IntravenousInfusionData.InfusionGroupSequenceNo =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo;
        if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ParentPrescriptionItemOID == 0
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.FirstPrescItemOIDInSeq =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
          prsItem.FormViewParameters.IntravenousInfusionData.IsSequentialPrescribing =
            true;
        } else if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ParentPrescriptionItemOID > 0
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.ParentPrescriptionItemOID =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID;
          prsItem.FormViewParameters.IntravenousInfusionData.IsSequentialPrescribing =
            true;
        } else {
          prsItem.FormViewParameters.IntravenousInfusionData.ParentPrescriptionItemOID =
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID;
        }
        prsItem.FormViewParameters.IntravenousInfusionData.UparentPresitemOIDSeq =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisCanPntPresitemOIDChangedSeq;
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypeCode.INTERMITTENT
        ) == 0 &&
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .ChckSingleActionMedChart
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.IsBolusInfusion =
          '1';
      } else {
        prsItem.FormViewParameters.IntravenousInfusionData.IsBolusInfusion =
          '0';
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Humidification !=
          null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.itemSubType
        ) &&
        String.Equals(
          oItemVM.FormViewerDetails.BasicDetails.itemSubType,
          CConstants.SUBTYPE_GAS,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        prsItem.FormViewParameters.IntravenousInfusionData.HUMIDCode =
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Humidification.Value;
      }
      if (oItemVM.ActionCode == ActivityTypes.Amend) {
        if (oItemVM.IsInfInprogress) {
          prsItem.FormViewParameters.IntravenousInfusionData.IsInfusionInprogress =
            true;
        } else {
          prsItem.FormViewParameters.IntravenousInfusionData.IsInfusionInprogress =
            false;
        }
        if (
          oItemVM.FormViewerDetails != null &&
          oItemVM.FormViewerDetails.BasicDetails != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.itemSubType
          ) &&
          String.Equals(
            oItemVM.FormViewerDetails.BasicDetails.itemSubType,
            CConstants.SUBTYPE_GAS,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !oItemVM.FormViewerDetails.BasicDetails.AsRequired &&
          this.MedsResolve != null &&
          oItemVM.SourcePrescriptionOid > 0
        ) {
          let prevItem = this.MedsResolve.Where(
            (x) =>
              x.PrescriptionItemOID == oItemVM.SourcePrescriptionOid &&
              String.Equals(
                x.FormViewerDetails.BasicDetails.itemSubType,
                CConstants.SUBTYPE_GAS,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              (String.Equals(
                x.FormViewerDetails.BasicDetails.Direction,
                'CC_MEDDIRECTION',
                StringComparison.InvariantCultureIgnoreCase
              ) ||
                String.Equals(
                  x.FormViewerDetails.BasicDetails.Direction,
                  'As needed',
                  StringComparison.InvariantCultureIgnoreCase
                ))
          );
          if (prevItem != null && prevItem.Count() > 0) {
            prsItem.FormViewParameters.IntravenousInfusionData.IsInfusionStartDTTMReached =
              false;
          } else {
            prsItem.FormViewParameters.IntravenousInfusionData.IsInfusionStartDTTMReached =
              true;
          }
        } else if (oItemVM.IsDueNowSlot) {
          prsItem.FormViewParameters.IntravenousInfusionData.IsInfusionStartDTTMReached =
            true;
        } else {
          prsItem.FormViewParameters.IntravenousInfusionData.IsInfusionStartDTTMReached =
            false;
        }
        if (
          this.MedsResolve.Any(
            (x) =>
              !x.IsGroupHeader &&
              x.PrescriptionItemOID == oItemVM.SourcePrescriptionOid &&
              x.FormViewerDetails != null &&
              x.FormViewerDetails.BasicDetails != null &&
              x.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              !String.IsNullOrEmpty(
                x.FormViewerDetails.BasicDetails.InfusionType.Value
              ) &&
              String.Equals(
                x.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.INTERMITTENT,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              x.FormViewerDetails.BasicDetails.InfusionDetails
                .ChckSingleActionMedChart
          )
        ) {
          prsItem.FormViewParameters.IntravenousInfusionData.IsInfusionStartDTTMReached =
            false;
        }
        if (oItemVM.FormViewerDetails.BasicDetails.IsInfAmendStartDTTMBlank) {
          prsItem.FormViewParameters.IntravenousInfusionData.IsInfAmendStartDTTMBlank =
            true;
        } else {
          prsItem.FormViewParameters.IntravenousInfusionData.IsInfAmendStartDTTMBlank =
            false;
        }
      }
    }
    if (
      oItemVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
      oItemVM.FormViewerDetails.BasicDetails.SequenceInfo
        .PrescriptionItemNumber > 0
    ) {
      prsItem.FormViewParameters.SequenceData =
        new IPPMAManagePrescSer.SequenceDetails();
      prsItem.FormViewParameters.SequenceData.SequenceOrder =
        oItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo;
      prsItem.FormViewParameters.SequenceData.GroupSequenceNo =
        oItemVM.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo;
      if (
        oItemVM.FormViewerDetails.BasicDetails.SequenceInfo
          .ParentPrescriptionItemOID == 0
      ) {
        prsItem.FormViewParameters.SequenceData.FirstPrescItemOIDInSeq =
          oItemVM.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber;
        prsItem.FormViewParameters.SequenceData.IsSequentialPrescribing = true;
      } else if (
        oItemVM.FormViewerDetails.BasicDetails.SequenceInfo
          .ParentPrescriptionItemOID > 0
      ) {
        prsItem.FormViewParameters.SequenceData.ParentPrescriptionItemOID =
          oItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ParentPrescriptionItemOID;
        prsItem.FormViewParameters.SequenceData.IsSequentialPrescribing = true;
      } else {
        prsItem.FormViewParameters.SequenceData.ParentPrescriptionItemOID =
          oItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ParentPrescriptionItemOID;
      }
    }
    if (
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails != null
    ) {
      if (oItemVM.FormViewerDetails.BasicDetails.LegalCategory != null) {
        prsItem.BasicProperties.LegalCategory =
          new IPPMAManagePrescSer.ObjectInfo();
        prsItem.BasicProperties.LegalCategory.Name =
          oItemVM.FormViewerDetails.BasicDetails.LegalCategory;
        prsItem.BasicProperties.LegalCategory.Code =
          oItemVM.FormViewerDetails.BasicDetails.LegalCategory;
      }
      prsItem.BasicProperties.ExistsOnAdmission =
        oItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission == '3'
          ? '0'
          : oItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission;
    }
    if (
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails.Ordersets != null
    ) {
      prsItem.BasicProperties.OrderSet = new IPPMAManagePrescSer.ObjectInfo();
      prsItem.BasicProperties.OrderSet.Name =
        oItemVM.FormViewerDetails.BasicDetails.Ordersets.DisplayText;
      let orderssetoid: number = 0;
      Number.TryParse(
        oItemVM.FormViewerDetails.BasicDetails.Ordersets.Value,
        (o) => {
          orderssetoid = o;
        }
      );
      prsItem.BasicProperties.OrderSet.OID = orderssetoid;
      if (oItemVM.FormViewerDetails.BasicDetails.Ordersets.Tag != null)
        prsItem.BasicProperties.OrderSet.Code =
          oItemVM.FormViewerDetails.BasicDetails.Ordersets.Tag.ToString();
      else
        prsItem.BasicProperties.OrderSet.Code =
          oItemVM.FormViewerDetails.BasicDetails.OrdersetAssociationOID;
    }
    prsItem.UniqueID = oItemVM.UniqueRowID;
    prsItem.IdentifyingOID =
      oItemVM.FormViewerDetails.BasicDetails.IdentifyingOID;
    if (
      prsItem.IdentifyingOID == CommonFlags.MCidentifyingOID &&
      CommonFlags.MCidentifyingName != null &&
      !String.IsNullOrEmpty(CommonFlags.MCidentifyingName)
    ) {
      prsItem.IdentifyingName = CommonFlags.MCidentifyingName;
    } else if (
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.SIdentifyingoriginalname
      )
    ) {
      prsItem.IdentifyingName =
        oItemVM.FormViewerDetails.BasicDetails.SIdentifyingoriginalname;
    } else if (
      !String.IsNullOrEmpty(oItemVM.VMVPIdentifyingName) &&
      !String.IsNullOrEmpty(oItemVM.VMVPLorenzoID)
    ) {
      if (
        (oItemVM.ActionCode == ActivityTypes.Amend ||
          oItemVM.ActionCode == ActivityTypes.Reorder ||
          oItemVM.ActionCode == ActivityTypes.UnHold) &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.PrescribedBrandName
        )
      ) {
        prsItem.IdentifyingName =
          oItemVM.FormViewerDetails.BasicDetails.PrescribedBrandName;
      } else if (
        oItemVM.ActionCode == ActivityTypes.Prescribe &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.BrandName
        ) &&
        !String.Equals(
          oItemVM.FormViewerDetails.BasicDetails.BrandName,
          CConstants.SelectBrand
        )
      ) {
        prsItem.IdentifyingName =
          oItemVM.FormViewerDetails.BasicDetails.BrandName;
      }
      prsItem.VMVPLorenzoID = oItemVM.VMVPLorenzoID;
    } else {
      prsItem.IdentifyingName =
        oItemVM.FormViewerDetails.BasicDetails.IdentifyingName;
    }
    if (
      String.IsNullOrEmpty(prsItem.VMVPLorenzoID) &&
      !String.IsNullOrEmpty(oItemVM.ParentLorenzoID)
    )
      prsItem.VMVPLorenzoID = oItemVM.ParentLorenzoID;
    if (
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails.DrugProperties != null
    ) {
      prsItem.BasicProperties.DrugProperties =
        new ObservableCollection<IPPMAManagePrescSer.DrugProperty>();
      for (
        let i: number = 0;
        i < oItemVM.FormViewerDetails.BasicDetails.DrugProperties.Count;
        i++
      ) {
        let objDrugprop: IPPMAManagePrescSer.DrugProperty =
          new IPPMAManagePrescSer.DrugProperty();
        objDrugprop.DrugPropertyCode =
          oItemVM.FormViewerDetails.BasicDetails.DrugProperties[
            i
          ].DrugPropertyCode;
        objDrugprop.OccuranceCode =
          oItemVM.FormViewerDetails.BasicDetails.DrugProperties[i].VMChildCode;
        objDrugprop.HighRiskMsg =
          oItemVM.FormViewerDetails.BasicDetails.HighRiskMsg;
        objDrugprop.UniqueMCRowID =
          oItemVM.FormViewerDetails.BasicDetails.DrugProperties[
            i
          ].UniqueMCRowID;
        objDrugprop.PrescriptionMCidentifyingtype = String.Empty;
        if (
          String.Equals(
            objDrugprop.DrugPropertyCode,
            CConstants.DrugPropertyCNTRLDDRUG,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            ((String.Equals(
              oItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
              String.Equals(
                oItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
                CConstants.ACTUALMOIETY,
                StringComparison.CurrentCultureIgnoreCase
              )) &&
              String.Equals(
                objDrugprop.OccuranceCode,
                CConstants.AllChild_CC,
                StringComparison.CurrentCultureIgnoreCase
              )) ||
            (!String.Equals(
              oItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.CurrentCultureIgnoreCase
            ) &&
              !String.Equals(
                oItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
                CConstants.ACTUALMOIETY,
                StringComparison.CurrentCultureIgnoreCase
              ))
          ) {
            prsItem.IsControlledDrug = '1';
          }
        }
        prsItem.BasicProperties.DrugProperties.Add(objDrugprop);
      }
    }
    prsItem.IdentifyingType =
      oItemVM.FormViewerDetails.BasicDetails.IdentifyingType;
    prsItem.BasicProperties.ItemType = oItemVM.ItemMainType;
    prsItem.BasicProperties.OrderSetSeqId = oItemVM.OrderSetGroupID;
    prsItem.BasicProperties.IndicationOverrideReason =
      oItemVM.FormViewerDetails.BasicDetails.IndicationOverrideReason;
    if (oItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds == false)
      prsItem.IssIDSNewMeds = '0';
    else prsItem.IssIDSNewMeds = '1';
    prsItem.BasicProperties.ItemSubType = oItemVM.ItemSubType;
    prsItem.LorenzoID = oItemVM.LorenzoID;
    if (oItemVM.FormViewerDetails.BasicDetails.MCVersion == AppSessionInfo.AMCV)
      prsItem.MCVersionNo = String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.MCVersion
      )
        ? AppSessionInfo.AMCV
        : oItemVM.FormViewerDetails.BasicDetails.MCVersion;
    else prsItem.MCVersionNo = AppSessionInfo.AMCV;
    if (DateTime.NotEquals(oItemVM.LastModifiedAt, DateTime.MinValue))
      prsItem.BasicProperties.LastModifiedAt = oItemVM.LastModifiedAt;
    else prsItem.BasicProperties.LastModifiedAt = ServerDatetime;
    prsItem.PrescriptionBasicData = new IPPMAManagePrescSer.Prescription();
    prsItem.OID = oItemVM.PrescriptionItemOID;
    prsItem.PrescribableItemListOID =
      oItemVM.FormViewerDetails.BasicDetails.IdentifyingOID;
    prsItem.BasicProperties.ItemSubType = oItemVM.ItemSubType;
    prsItem.PrescriptionOID = oItemVM.PrescriptionOID;
    prsItem.AmendedCurrDTTM =
      oItemVM.FormViewerDetails.BasicDetails.AmendedCurrDTTM;
    prsItem.IsAmendedStopDTTMForAlternateDaysFreq =
      oItemVM.FormViewerDetails.BasicDetails.IsAmendedStopDTTMForAlternateDaysFreq;
    prsItem.NextSlotGenerateStartDTTM =
      oItemVM.FormViewerDetails.BasicDetails.NextSlotGenerateStartDTTM;
    prsItem.PrescribableItemListIdnOID =
      oItemVM.FormViewerDetails.BasicDetails.prescribableItemListIdnOID;
    prsItem.ReorderedFromclerkItemOID = oItemVM.AlreadyPrescribedItemOID;
    prsItem.PresItemDetailLzoID = oItemVM.FormViewerDetails.PresItemDetailLzoID;
    if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking) {
      if (oItemVM.FormViewerDetails.BasicDetails.Completedate) {
        prsItem.StartDTTM =
          oItemVM.FormViewerDetails.BasicDetails.CompleteStartDTTM;
        if (
          DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.CompleteStartDTTM,
          DateTime.MinValue)
        ) {
          prsItem.AdditionalProperties.DateCommenced = 'CC_COMPLETE';
        }
      } else {
        if (oItemVM.FormViewerDetails.BasicDetails.Year > 0) {
          let YearNo: number =
            oItemVM.FormViewerDetails.BasicDetails.Year > 0
              ? Convert.ToInt32(oItemVM.FormViewerDetails.BasicDetails.Year)
              : 1;
          prsItem.StartDTTM = new DateTime(YearNo, 1, 1);
          prsItem.AdditionalProperties.DateCommenced = 'CC_Year';
        }
        let MonthNo: number = 0;
        if (oItemVM.FormViewerDetails.BasicDetails.Month != null) {
          MonthNo = Convert.ToInt32(
            Enum.Parse(
              EnumVals,
              oItemVM.FormViewerDetails.BasicDetails.Month.Value,
              true
            )
          );
        }
        if (MonthNo != 0) {
          prsItem.StartDTTM = prsItem.StartDTTM.AddMonths(MonthNo - 1);
          prsItem.AdditionalProperties.DateCommenced = 'CC_Month';
        }
        prsItem.StartDTTM = prsItem.StartDTTM.ToUniversalTime();
      }
      if (
        oItemVM != null &&
        oItemVM.FormViewerDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
        DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.StartDTTM, DateTime.MinValue) &&
        oItemVM.ActionCode == ActivityTypes.Reorder &&
        DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime,
          DateTime.MinValue) &&
        (String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.VARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
          String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPED,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
          String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.OrdinalIgnoreCase
          ) == 0)
      ) {
        prsItem.StartDTTM =
          oItemVM.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
            oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime
          );
      }
      if (DateTime.Equals(prsItem.StartDTTM, DateTime.MinValue)) {
        if (
          oItemVM != null &&
          oItemVM.FormViewerDetails != null &&
          oItemVM.FormViewerDetails.BasicDetails != null &&
          oItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
          prsItem != null &&
          DateTime.Equals(prsItem.StartDTTM, DateTime.MinValue) &&
          (String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.VARIABLE,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0)
        ) {
          prsItem.StartDTTM = ServerDatetime.Date;
        } else {
          prsItem.StartDTTM = ServerDatetime;
        }
      }
    } else {
      if (
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration ||
        PatientContext.PrescriptionType == PrescriptionTypes.Leave ||
        PatientContext.PrescriptionType == PrescriptionTypes.Discharge ||
        PatientContext.PrescriptionType == PrescriptionTypes.Outpatient
      ) {
        if (
          DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime,
          DateTime.MinValue)
        ) {
          if (
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            !(
              PatientContext.ClerkFormViewDefaultBehavior ==
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
            ) &&
            oItemVM.FormViewerDetails.BasicDetails.SelectedFrequencyDetails !=
              null &&
            oItemVM.FormViewerDetails.BasicDetails.Frequency != null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.SelectedFrequencyDetails
                .UOM
            ) &&
            String.Equals(
              oItemVM.FormViewerDetails.BasicDetails.SelectedFrequencyDetails
                .UOM,
              'CC_IPONCENLY',
              StringComparison.OrdinalIgnoreCase
            )
          ) {
            prsItem.StartDTTM =
              oItemVM.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
                oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime
              );
            prsItem.StartDTTM = prsItem.StartDTTM.DateTime.AddHours(
              prsItem.StartDTTM.Hour
            ).AddMinutes(prsItem.StartDTTM.Minute);
          } else {
            prsItem.StartDTTM =
              oItemVM.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
                oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime
              );
          }
        } else {
          prsItem.StartDTTM = oItemVM.FormViewerDetails.BasicDetails.StartDTTM;
        }
      } else {
        if (
          IsInfusionDrug &&
          DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime,
            DateTime.MinValue)
        ) {
          prsItem.StartDTTM =
            oItemVM.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
              oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime
            );
        } else {
          prsItem.StartDTTM = oItemVM.FormViewerDetails.BasicDetails.StartDTTM;
        }
      }
    }
    if (
      PatientContext.ClerkFormViewDefaultBehavior ==
      ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      prsItem.AdditionalProperties.DateCommenced = 'CC_COMPLETE';
    }
    if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking) {
      if (
        DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue) &&
        oItemVM.FormViewerDetails.BasicDetails.StopDate != null &&
        ObjectHelper.HasValue(
          oItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime
        ) &&
        oItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value.ToString(
          'HH:mm'
        ) != '00:00'
      ) {
        prsItem.EndDTTM =
          oItemVM.FormViewerDetails.BasicDetails.StopDate.DateTime.AddTime(
            oItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime.Value
          );
      } else {
        prsItem.EndDTTM =
          DateTime.Equals(oItemVM.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)
            ? oItemVM.FormViewerDetails.BasicDetails.EndDTTM
            : oItemVM.FormViewerDetails.BasicDetails.StopDate;
      }
    } else {
      if (
        oItemVM.FormViewerDetails.BHasFormViewParams &&
        ((oItemVM.FormViewerDetails.BasicControls != null &&
          oItemVM.FormViewerDetails.BasicControls.Count() > 0 &&
          oItemVM.FormViewerDetails.BasicControls.Contains('CC_STOPDTTM')) ||
          (oItemVM.FormViewerDetails.AdditionalControls != null &&
            oItemVM.FormViewerDetails.AdditionalControls.Count() > 0 &&
            oItemVM.FormViewerDetails.AdditionalControls.Contains(
              'CC_STOPDTTM'
            )))
      ) {
        prsItem.EndDTTM =
          DateTime.Equals(oItemVM.FormViewerDetails.BasicDetails.StopDate, DateTime.MinValue)
            ? oItemVM.FormViewerDetails.BasicDetails.EndDTTM
            : oItemVM.FormViewerDetails.BasicDetails.StopDate;
      }
    }
    ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
      prsItem.BasicProperties,
      IPPMAManagePrescSer.IPPPresItemBasicProperties
    ).OrginalEndDTTM = oItemVM.FormViewerDetails.BasicDetails.OrginalEndDTTM;
    if (
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidPRPSTUSCode
      )
    ) {
      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
        prsItem.BasicProperties,
        IPPMAManagePrescSer.IPPPresItemBasicProperties
      ).PrepStatusCode =
        oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidPRPSTUSCode;
    }
    if (
      String.Compare(
        prsItem.IdentifyingType,
        CConstants.NONCATALOGUEITEM,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        prsItem.IdentifyingType,
        CConstants.Precatalog,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      if (oItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason != null)
        prsItem.AdditionalProperties.NonCatalogueReason =
          oItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason.Value;
      prsItem.AdditionalProperties.NonCatalogueOtherReason =
        oItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason;
    }
    let lRouteOID: number = 0;
    if (
      oItemVM.FormViewerDetails.BasicDetails.Route != null &&
      Number.TryParse(
        oItemVM.FormViewerDetails.BasicDetails.Route.Value,
        (o) => {
          lRouteOID = o;
        }
      )
    ) {
      prsItem.BasicProperties.Route = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          Name: oItemVM.FormViewerDetails.BasicDetails.Route.DisplayText,
          OID: lRouteOID,
        }
      );
      prsItem.BasicProperties.MultipleRouteType = 0;
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0 &&
      oItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
      oItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked
    ) {
      let infusionroutes: number = 0;
      let noninfusionroutes: number = 0;
      if (
        oItemVM != null &&
        oItemVM.FormViewerDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails.DefaultDetails != null &&
        oItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null
      ) {
        let selectedRoutes =
          oItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
            (MultipleRoutes) => MultipleRoutes.IsSelected
          ).Select((MultipleRoutes) => MultipleRoutes);
        if (selectedRoutes != null && selectedRoutes.Count() > 0) {
          prsItem.BasicProperties.MultipleRoutes =
            new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
          let objRoutes: IPPMAManagePrescSer.ObjectInfo = null;
          selectedRoutes.forEach((itm) => {
            objRoutes = new IPPMAManagePrescSer.ObjectInfo();
            objRoutes.OID = Number.Parse(itm.Value);
            prsItem.BasicProperties.MultipleRoutes.Add(objRoutes);
            if (itm.Tag != null && itm.Tag.ToString() == '0') {
              noninfusionroutes++;
            } else if (itm.Tag != null && itm.Tag.ToString() == '1') {
              infusionroutes++;
            }
          });
          if (selectedRoutes != null) {
            if (selectedRoutes.Count() == 1) {
              if (oItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked) {
                prsItem.BasicProperties.MultipleRouteType = 4;
              } else {
                prsItem.BasicProperties.MultipleRouteType = 0;
              }
            } else {
              if (selectedRoutes.Count() == noninfusionroutes) {
                prsItem.BasicProperties.MultipleRouteType = 1;
              } else if (selectedRoutes.Count() == infusionroutes) {
                prsItem.BasicProperties.MultipleRouteType = 2;
              } else {
                prsItem.BasicProperties.MultipleRouteType = 3;
              }
            }
          }
        }
      }
      if (prsItem.BasicProperties.MultipleRoutes == null) {
        prsItem.BasicProperties.MultipleRoutes =
          new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
        let objRoutes: IPPMAManagePrescSer.ObjectInfo = null;
        let strRoute: string[] = null;
        let strRouteTag: string[] = null;
        if (
          oItemVM.FormViewerDetails.BasicDetails.Route != null &&
          oItemVM.FormViewerDetails.BasicDetails.Route.Value != null &&
          oItemVM.FormViewerDetails.BasicDetails.Route.Value.Contains(',')
        ) {
          strRoute =
            oItemVM.FormViewerDetails.BasicDetails.Route.Value.Split(',');
          if (oItemVM.FormViewerDetails.BasicDetails.Route.Tag != null) {
            strRouteTag =
              oItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString().Split(
                ','
              );
          }
        }
        if (strRoute != null && strRoute.length > 0) {
          for (let i: number = 0; i < strRoute.length; i++) {
            objRoutes = new IPPMAManagePrescSer.ObjectInfo();
            objRoutes.OID = Number.Parse(strRoute[i]);
            prsItem.BasicProperties.MultipleRoutes.Add(objRoutes);
          }
        }
        if (
          prsItem.BasicProperties.MultipleRouteType == 0 &&
          strRouteTag != null &&
          strRouteTag.Count() > 0
        ) {
          let _InfCount: number = 0;
          let _NonInfCount: number = 0;
          _InfCount = strRouteTag.Where((s) => s.Equals('1')).Count();
          _NonInfCount = strRouteTag.Where((s) => s.Equals('0')).Count();
          if (strRouteTag.Count() == 1) {
            if (oItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked) {
              prsItem.BasicProperties.MultipleRouteType = 4;
            } else {
              prsItem.BasicProperties.MultipleRouteType = 0;
            }
          } else {
            if (strRouteTag.Count() == _NonInfCount) {
              prsItem.BasicProperties.MultipleRouteType = 1;
            } else if (strRouteTag.Count() == _InfCount) {
              prsItem.BasicProperties.MultipleRouteType = 2;
            } else {
              prsItem.BasicProperties.MultipleRouteType = 3;
            }
          }
        }
      }
      prsItem.isMultiRouteChecked =
        oItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute;
    }
    if (
      oItemVM.FormViewerDetails.BasicDetails.DRCDosetype != null &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.DRCDosetype.Value
      )
    ) {
      prsItem.BasicProperties.DRCdoseTypeLorenzoID =
        new IPPMAManagePrescSer.ObjectInfo();
      {
        prsItem.BasicProperties.DRCdoseTypeLorenzoID.Name =
          oItemVM.FormViewerDetails.BasicDetails.DRCDosetype.DisplayText;
        prsItem.BasicProperties.DRCdoseTypeLorenzoID.Code =
          oItemVM.FormViewerDetails.BasicDetails.DRCDosetype.Value;
      }
    }
    if (
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.PatientProblemCode
      )
    ) {
      let strProb: string[] =
        oItemVM.FormViewerDetails.BasicDetails.PatientProblemCode.Split('!');
      if (strProb.length > 0) {
        let strIndication: string[];
        prsItem.BasicProperties.PatientProblem =
          new ObservableCollection<IPPMAManagePrescSer.Indication>();
        for (let i: number = 0; i < strProb.length; i++) {
          strIndication = strProb[i].Split('#');
          prsItem.BasicProperties.PatientProblem.Add(
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.Indication(), {
              Code: strIndication[2],
              CodingschemeCode: CConstants.SNOMED_CT,
              Term: strIndication[1],
              Version: strIndication[4],
              Type: strIndication[0],
            })
          );
        }
      }
    }
    let lStatOID: number = 0;
    let sStationaryCode: string = String.Empty;
    if (
      oItemVM.FormViewerDetails.BasicDetails.PrintStationaryType != null &&
      Number.TryParse(
        oItemVM.FormViewerDetails.BasicDetails.PrintStationaryType.Value,
        (o) => {
          lStatOID = o;
        }
      ) &&
      !oItemVM.IsClinicallyVerifyEnable &&
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) != 0 &&
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) != 0 &&
      this.IsFinish
    ) {
      prsItem.AdditionalProperties.StationeryType = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          Name: oItemVM.FormViewerDetails.BasicDetails.PrintStationaryType
            .DisplayText,
          OID: lStatOID,
        }
      );
      this.sStatTypOIDs.Append(',' + lStatOID);
      this.sStatTypNames.Append(
        ',' +
          lStatOID +
          '^' +
          oItemVM.FormViewerDetails.BasicDetails.PrintStationaryType.DisplayText
      );
      if (
        oItemVM.FormViewerDetails.BasicDetails.PrintStationaryType.Tag != null
      ) {
        sStationaryCode =
          oItemVM.FormViewerDetails.BasicDetails.PrintStationaryType.Tag.ToString();
      }
    } else if (
      oItemVM.FormViewerDetails.BasicDetails.StationaryType != null &&
      Number.TryParse(
        oItemVM.FormViewerDetails.BasicDetails.StationaryType.Value,
        (o) => {
          lStatOID = o;
        }
      )
    ) {
      if (
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.StationaryType.DisplayText
        ) &&
        lStatOID > 0 &&
        oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag != null
      ) {
        prsItem.AdditionalProperties.StationeryType = ObjectHelper.CreateObject(
          new IPPMAManagePrescSer.ObjectInfo(),
          {
            Name: oItemVM.FormViewerDetails.BasicDetails.StationaryType
              .DisplayText,
            OID: lStatOID,
            Code: oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag.ToString(),
          }
        );
      }
      this.sStatTypOIDs.Append(',' + lStatOID);
      this.sStatTypNames.Append(
        ',' +
          lStatOID +
          '^' +
          oItemVM.FormViewerDetails.BasicDetails.StationaryType.DisplayText
      );
      if (oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag != null) {
        sStationaryCode =
          oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag.ToString();
      }
    }
    if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      if (!oItemVM.formViewerDetails.BasicDetails.IsClinicallyVerified)
        prsItem.PrescriptionItemStatus =
          PrescriptionHelper.GetPrescriptionItemStatus(
            lStatOID,
            sStationaryCode,
            oItemVM.FormViewerDetails.BasicDetails.IsAuthorise
          );
      else
        prsItem.PrescriptionItemStatus =
          PrescriptionItemStatusCodes.CLINICALLYVERIFIED;
    } else if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 &&
      oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
      oItemVM.OperationMode == 'UA'
    ) {
      prsItem.PrescriptionItemStatus =
        PrescriptionHelper.GetPrescriptionItemStatus(
          lStatOID,
          sStationaryCode,
          false
        );
    } else if (
      !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
      String.Equals(
        oItemVM.PrescriptionItemStatus,
        PrescriptionItemStatusCodes.CLINICALLYVERIFIED,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      oItemVM.OperationMode == 'UA'
    ) {
      prsItem.PrescriptionItemStatus =
        PrescriptionItemStatusCodes.CLINICALLYVERIFIED;
    } else {
      prsItem.PrescriptionItemStatus =
        PrescriptionHelper.GetPrescriptionItemStatus(
          lStatOID,
          sStationaryCode,
          oItemVM.FormViewerDetails.BasicDetails.IsAuthorise
        );
    }
    if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 &&
      oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
      oItemVM.OperationMode == 'UA'
    ) {
      prsItem.BasicProperties.IsAuthorised = true;
    }
    if (
      oItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource != null &&
      oItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.Count > 0
    ) {
      prsItem.AdditionalProperties.MedClerkSource =
        new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
      oItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.forEach(
        (MedClerkingSrc) => {
          if (
            MedClerkingSrc instanceof CListItem &&
            MedClerkingSrc.IsSelected &&
            !String.IsNullOrEmpty(MedClerkingSrc.Value)
          )
            if (MedClerkingSrc.Value == CConstants.OtherFreeText) {
              prsItem.AdditionalProperties.MedClerkSource.Add(
                ObjectHelper.CreateObject(
                  new IPPMAManagePrescSer.ObjectInfo(),
                  {
                    Code: MedClerkingSrc.Value,
                    Name: MedClerkingSrc.Tag.ToString(),
                  }
                )
              );
            } else {
              prsItem.AdditionalProperties.MedClerkSource.Add(
                ObjectHelper.CreateObject(
                  new IPPMAManagePrescSer.ObjectInfo(),
                  { Code: MedClerkingSrc.Value }
                )
              );
            }
        }
      );
    }
    if (
      oItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason != null &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason.Value
      )
    ) {
      prsItem.AdditionalProperties.MedClerkModifyReason =
        ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
          Code: oItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason
            .Value,
        });
    }
    let lFreqOID: number = 0;
    let IsFillFreq: boolean = false;
    if (
      IsInfusionDrug &&
      ((oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
        ) &&
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypeCode.INTERMITTENT
        ) != 0) ||
        (PatientContext.IsINFUSIONON &&
          oItemVM.FormViewerDetails.BasicDetails.InfusionType == null) ||
        (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          )))
    ) {
      IsFillFreq = true;
    }
    if (
      !IsFillFreq &&
      oItemVM.FormViewerDetails.BasicDetails.Frequency != null &&
      Number.TryParse(
        oItemVM.FormViewerDetails.BasicDetails.Frequency.Value,
        (o) => {
          lFreqOID = o;
        }
      )
    ) {
      prsItem.BasicProperties.FrequencyDetails =
        new IPPMAManagePrescSer.FrequencyDetails();
      prsItem.BasicProperties.FrequencyDetails.Frequency =
        ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
          Name: oItemVM.FormViewerDetails.BasicDetails.Frequency.DisplayText,
          OID: lFreqOID,
        });
    }
    let lDoseFormOID: number = 0;
    if (
      oItemVM.FormViewerDetails.BasicDetails.DosageForm != null &&
      Number.TryParse(
        oItemVM.FormViewerDetails.BasicDetails.DosageForm.Value,
        (o) => {
          lDoseFormOID = o;
        }
      ) &&
      ((oItemVM.FormViewerDetails.BasicDetails.InfusionType == null &&
        !oItemVM.FormViewerDetails.BasicDetails.IsInfContiniousFormLoaded) ||
        (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          )) ||
        (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          !String.IsNullOrEmpty(oItemVM.ItemSubType) &&
          String.Compare(
            oItemVM.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) == 0))
    ) {
      prsItem.BasicProperties.Form = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          Name: oItemVM.FormViewerDetails.BasicDetails.DosageForm.DisplayText,
          OID: lDoseFormOID,
        }
      );
    }
    let lDurVal: number = 0;
    if (
      !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.Duration) &&
      Number.TryParse(oItemVM.FormViewerDetails.BasicDetails.Duration, (o) => {
        lDurVal = o;
      })
    ) {
      prsItem.BasicProperties.Duration = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.MeasurableObject(),
        { Value: lDurVal }
      );
      if (
        oItemVM.FormViewerDetails.BasicDetails.DurationUOM != null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.DurationUOM.Value
        )
      ) {
        prsItem.BasicProperties.Duration.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.DurationUOM.Value;
      }
    }
    if (
      !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.Quantity)
    ) {
      prsItem.BasicProperties.Quantity = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.Quantity(),
        { QuantityValue: oItemVM.FormViewerDetails.BasicDetails.Quantity }
      );
      let lUOMOID: number = 0;
      if (
        oItemVM.FormViewerDetails.BasicDetails.QuantityUOM != null &&
        Number.TryParse(
          oItemVM.FormViewerDetails.BasicDetails.QuantityUOM.Value,
          (o) => {
            lUOMOID = o;
          }
        )
      ) {
        prsItem.BasicProperties.Quantity.QuantityUOMId = lUOMOID;
        prsItem.BasicProperties.Quantity.QuantityUOMName =
          oItemVM.FormViewerDetails.BasicDetails.QuantityUOM.DisplayText;
      }
    }
    let lSiteOID: number = 0;
    if (
      oItemVM.FormViewerDetails.BasicDetails.Site != null &&
      Number.TryParse(
        oItemVM.FormViewerDetails.BasicDetails.Site.Value,
        (o) => {
          lSiteOID = o;
        }
      )
    ) {
      prsItem.BasicProperties.Site = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          Name: oItemVM.FormViewerDetails.BasicDetails.Site.DisplayText,
          OID: lSiteOID,
        }
      );
    } else if (
      oItemVM.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.SiteFreeText)
    ) {
      prsItem.BasicProperties.Site = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        { Name: oItemVM.FormViewerDetails.BasicDetails.SiteFreeText }
      );
    }
    if (oItemVM.FormViewerDetails.BasicDetails.ExpiryDate != null) {
      prsItem.AdditionalProperties.ExpiryDate =
        oItemVM.FormViewerDetails.BasicDetails.ExpiryDate;
    }
    if (
      !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.BatchNumber)
    ) {
      prsItem.AdditionalProperties.BatchNumber =
        oItemVM.FormViewerDetails.BasicDetails.BatchNumber;
    }
    if (oItemVM.FormViewerDetails.BasicDetails.AsRequired) {
      prsItem.BasicProperties.Direction = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          Name: oItemVM.FormViewerDetails.BasicDetails.Direction,
          Code: 'CC_MEDDIRECTION',
        }
      );
    }
    if (
      !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.Direction) &&
      String.Equals(
        oItemVM.FormViewerDetails.BasicDetails.Direction,
        CConstants.AsNeeded,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      oItemVM.OperationMode != 'N' &&
      oItemVM.ActionCode == ActivityTypes.Amend
    ) {
      prsItem.BasicProperties.Direction = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          Name: oItemVM.FormViewerDetails.BasicDetails.Direction,
          Code: 'CC_MEDDIRECTION',
        }
      );
    }
    if (
      oItemVM.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.PRNInstructionFreeText
      )
    ) {
      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
        prsItem.BasicProperties,
        IPPMAManagePrescSer.IPPPresItemBasicProperties
      ).Instruction = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        { Name: oItemVM.FormViewerDetails.BasicDetails.PRNInstructionFreeText }
      );
    } else if (
      oItemVM.FormViewerDetails.BasicDetails.PRNInstruction != null &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.PRNInstruction.DisplayText
      )
    ) {
      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
        prsItem.BasicProperties,
        IPPMAManagePrescSer.IPPPresItemBasicProperties
      ).Instruction = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          Name: oItemVM.FormViewerDetails.BasicDetails.PRNInstruction
            .DisplayText,
        }
      );
    }
    if (
      oItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment !=
        null &&
      ObjectHelper.HasValue(
        oItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment
      )
    ) {
      prsItem.AdditionalProperties.IntervalBtwnInstallment =
        new IPPMAManagePrescSer.MeasurableObject();
      prsItem.AdditionalProperties.IntervalBtwnInstallment.Value =
        Convert.ToInt64(
          oItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment
            .Value
        );
      if (
        oItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM !=
          null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM
            .Value
        )
      )
        prsItem.AdditionalProperties.IntervalBtwnInstallment.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM.Value;
    }
    if (
      oItemVM.FormViewerDetails.BasicDetails.NoOfInstallments != null &&
      ObjectHelper.HasValue(
        oItemVM.FormViewerDetails.BasicDetails.NoOfInstallments
      )
    ) {
      prsItem.AdditionalProperties.NoOfInstallments = Convert.ToInt16(
        oItemVM.FormViewerDetails.BasicDetails.NoOfInstallments.Value
      );
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0 &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction
      ) &&
      oItemVM.FormViewerDetails.BasicDetails.AdminInstruction == null
    ) {
      oItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
        ObjectHelper.CreateObject(new CListItem(), {
          DisplayText: 'Other',
          Value: 'CC_Other',
        });
    }
    if (oItemVM.FormViewerDetails.BasicDetails.AdminInstruction != null) {
      let lAdminInsOID: number = 0;
      let sAdminInst: string = String.Empty;
      if (
        String.Compare(
          oItemVM.FormViewerDetails.BasicDetails.AdminInstruction.Value,
          'CC_Other'
        ) == 0
      ) {
        sAdminInst =
          oItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction;
      } else if (
        Number.TryParse(
          oItemVM.FormViewerDetails.BasicDetails.AdminInstruction.Value,
          (o) => {
            lAdminInsOID = o;
          }
        ) &&
        lAdminInsOID > 0
      ) {
        sAdminInst =
          oItemVM.FormViewerDetails.BasicDetails.AdminInstruction.DisplayText;
      }
      if (!String.IsNullOrEmpty(sAdminInst)) {
        prsItem.BasicProperties.AdminInstruction = ObjectHelper.CreateObject(
          new IPPMAManagePrescSer.ObjectInfo(),
          {
            OID: lAdminInsOID,
            Name: sAdminInst,
          }
        );
      }
    }
    let IAdminMethodOID: number = 0;
    if (
      oItemVM.FormViewerDetails.BasicDetails.AdminMethod != null &&
      Number.TryParse(
        oItemVM.FormViewerDetails.BasicDetails.AdminMethod.Value,
        (o) => {
          IAdminMethodOID = o;
        }
      )
    ) {
      prsItem.AdditionalProperties.AdminMethod = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          Name: oItemVM.FormViewerDetails.BasicDetails.AdminMethod.DisplayText,
          OID: IAdminMethodOID,
        }
      );
    }
    if (
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.SupplyInsVal
      ) &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.SupplyInsText
      )
    ) {
      let oSupplyInsVal: string[] =
        oItemVM.FormViewerDetails.BasicDetails.SupplyInsVal.Split(';');
      if (oSupplyInsVal != null && oSupplyInsVal.length > 0) {
        prsItem.BasicProperties.SupplyInstruction =
          new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
        for (let i: number = 0; i < oSupplyInsVal.length; i++) {
          if (!String.IsNullOrEmpty(oSupplyInsVal[i])) {
            prsItem.BasicProperties.SupplyInstruction.Add(
              ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
                Code: oSupplyInsVal[i],
              })
            );
          }
        }
      }
    }
    if (oItemVM != null && oItemVM.SelectedSupplyreq != null) {
      if (
        String.Compare(
          oItemVM.SelectedSupplyreq.Value,
          CConstants.Supplycode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        prsItem.BasicProperties.IsSupplyReq = '1';
      } else if (
        String.Compare(
          oItemVM.SelectedSupplyreq.Value,
          CConstants.DonotSupplycode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        prsItem.BasicProperties.IsSupplyReq = '2';
      } else if (
        String.Equals(
          oItemVM.SelectedSupplyreq.Value,
          CConstants.CancelSupplycode,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        prsItem.BasicProperties.IsSupplyReq = '3';
      } else {
        prsItem.BasicProperties.IsSupplyReq = '0';
      }
    } else {
      prsItem.BasicProperties.IsSupplyReq = '0';
    }
    if (
      oItemVM != null &&
      DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate, DateTime.MinValue)
    ) {
      prsItem.BasicProperties.NextSupplyDTTM =
        oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate;
    }
    if (
      DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate,
        oItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate) &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      )
    ) {
      prsItem.BasicProperties.isNextSupplyUpdate = true;
    } else {
      prsItem.BasicProperties.isNextSupplyUpdate = false;
    }
    prsItem.BasicProperties.LocOid = MedChartData.LocationOID;
    prsItem.BasicProperties.ServOid = MedChartData.ServiceOID;
    prsItem.BasicProperties.IsWardStk = false;
    prsItem.BasicProperties.RequisitionCACod = Resource.TechValidate.ReqCACode;
    prsItem.BasicProperties.EncOID = PatientContext.EncounterOid;
    prsItem.BasicProperties.IsMergePat =
      PatientContext.PatientOID > 0 &&
      PatientContext.MergedPatientOID > 0 &&
      PatientContext.PatientOID != PatientContext.MergedPatientOID
        ? '1'
        : '0';
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.OrdinalIgnoreCase
      )
    ) {
      if (
        prsItem.BasicProperties.IsMergePat == '0' &&
        (PatientContext.IsMergedPatient == '1' ||
          PatientContext.IsMergedPatient == '2')
      ) {
        prsItem.BasicProperties.IsMergePat = '1';
      }
    }
    if (oItemVM.FormViewerDetails.BasicDetails.InAmendSupplyinstrClear) {
      prsItem.BasicProperties.IsAmendSupplyInstrClear = true;
    } else {
      prsItem.BasicProperties.IsAmendSupplyInstrClear = false;
    }
    if (oItemVM.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0) {
      prsItem.BasicProperties.PrescriptionItemTechOID =
        oItemVM.FormViewerDetails.BasicDetails.TechPresItemTechOID;
    } else if (
      oItemVM.FormViewerDetails.TechValidateDetails != null &&
      oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems !=
        null &&
      oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count >
        0 &&
      oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[0] !=
        null &&
      oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[0]
        .PrescriptionItemTechOID > 0
    ) {
      prsItem.BasicProperties.PrescriptionItemTechOID =
        oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[0].PrescriptionItemTechOID;
    }
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode
      ) &&
      oItemVM.FormViewerDetails.BasicDetails.TecValOperationMode == null &&
      oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged
    ) {
      oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged = false;
      oItemVM.FormViewerDetails.BasicDetails.TecValOperationMode = 'M';
    }
    //R/f QC 235751 from 2.23
    if(oItemVM.PrescriptionItemOID == 0 && oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged == false)
    {
      if(oItemVM.ActionCode == ActivityTypes.Amend && oItemVM.FormViewerDetails.TechValidateDetails != null
        && oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems != null && oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0)
      {
        oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged = true;
      }
      else if((oItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction != null && oItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count > 0)
        || !String.IsNullOrEmpty(oItemVM.FormViewerDetails.BasicDetails.Supplycomments) || oItemVM.IsProdOptChange == 1
        || (oItemVM.SelectedSupplyreq != null && !String.Equals(oItemVM.SelectedSupplyreq.Value, Resource.TechValidate.Empty, StringComparison.InvariantCultureIgnoreCase)))
      {
        oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged = true;
      }
      else if(DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate, DateTime.MinValue) 
        && DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate, DateTime.MinValue) && DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate, oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate))
      {
        oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged = true;
      }
      else if(DateTime.Equals(oItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate, DateTime.MinValue) 
        && DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate, DateTime.MinValue) && DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate, oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate))
      {
        oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged = true;
      }
      else if(DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate, DateTime.MinValue) 
        && DateTime.Equals(oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate, DateTime.MinValue) && DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate, oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate))
      {
        oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged = true;
      }
    }
    if (oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged) {
      prsItem.BasicProperties.IsSupplyInstChanged = true;
    } else {
      prsItem.BasicProperties.IsSupplyInstChanged = false;
    }
    prsItem.BasicProperties.OperationMode =
      oItemVM.FormViewerDetails.BasicDetails.TecValOperationMode;
    if (
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.Supplycomments
      )
    ) {
      if (prsItem.BasicProperties.SupplyInstruction == null)
        prsItem.BasicProperties.SupplyInstruction =
          new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
      prsItem.BasicProperties.SupplyInstruction.Add(
        ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
          Code: CConstants.Supplycomments,
          Name: oItemVM.FormViewerDetails.BasicDetails.Supplycomments,
        })
      );
      prsItem.BasicProperties.OtherDispensingInstruction =
        oItemVM.FormViewerDetails.BasicDetails.Supplycomments;
      if (oItemVM.FormViewerDetails.TechValidateDetails == null) {
        oItemVM.FormViewerDetails.TechValidateDetails = new TechValidateVM();
      }
      if (
        oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems ==
        null
      ) {
        oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems =
          new ObservableCollection<PrescriptionItemVM>();
      }
      if (!oItemVM.bIsSupplyDispensingInstructionSet) {
        oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems.Add(
          oItemVM
        );
        oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.Supplycomments =
          oItemVM.FormViewerDetails.BasicDetails.Supplycomments;
      }
    }
    if (
      !String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) ||
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) &&
        oItemVM.FormViewerDetails.BHasFormViewParams)
    ) {
      if (
        oItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue != null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue.Value
        )
      ) {
        if(oItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue
          .Value=='0' && (oItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue.Tag !=null 
            && oItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue.Tag as IPPMAManagePrescSer.ObjectInfo))
          {
            prsItem.BasicProperties.TreatmentToCont = oItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue.Tag as IPPMAManagePrescSer.ObjectInfo;
          }
          else
          {
            prsItem.BasicProperties.TreatmentToCont = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                Code: oItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue
                  .Value,
              }
            );
          }
       
      }
    }
    if (
      PatientContext.ClerkFormViewDefaultBehavior ==
      ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      prsItem.PrescriptionBasicData.PrescriptionType =
        PrescriptionTypes.Clerking;
    } else {
      prsItem.PrescriptionBasicData.PrescriptionType =
        PatientContext.PrescriptionType;
    }
    prsItem.BasicProperties.Dose =
      new IPPMAManagePrescSer.PrescriptionItemDose();
    prsItem.BasicProperties.Dose.DoseType =
      new IPPMAManagePrescSer.ObjectInfo();
    if (
      oItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.DoseType.Value
      )
    ) {
      prsItem.BasicProperties.Dose.DoseType.Code =
        oItemVM.FormViewerDetails.BasicDetails.DoseType.Value;
      prsItem.BasicProperties.Dose.DoseType.Name =
        oItemVM.FormViewerDetails.BasicDetails.DoseType.DisplayText;
    } else {
      prsItem.BasicProperties.Dose.DoseType = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        { Code: DoseTypeCode.NORMAL, Name: 'Normal' }
      );
    }
    if (
      String.Compare(
        prsItem.BasicProperties.Dose.DoseType.Code,
        DoseTypeCode.STEPPED,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
      String.Compare(
        prsItem.BasicProperties.Dose.DoseType.Code,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
      String.Compare(
        prsItem.BasicProperties.Dose.DoseType.Code,
        DoseTypeCode.VARIABLE,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      prsItem.BasicProperties.Dose.DoseRegime =
        new ObservableCollection<IPPMAManagePrescSer.DoseRegime>();
      if (
        (PatientContext.IsINFUSIONON &&
          String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.itemSubType,
            DrugItemSubTypeCode.MEDICAL_GAS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0) ||
        (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          (String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.PCA,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.CONTINUOUS,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.FLUID,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0))
      ) {
        prsItem.BasicProperties.Dose.DoseRegime =
          oItemVM.FillDoseRegimeInfusionDetail(
            oItemVM.FormViewerDetails.BasicDetails
          );
      } else {
        prsItem.BasicProperties.Dose.DoseRegime = oItemVM.FillDoseRegime(
          oItemVM.FormViewerDetails.BasicDetails
        );
        if (
          prsItem.BasicProperties.Dose.DoseRegime != null && ( prsItem.EndDTTM == undefined ||
          DateTime.Equals(prsItem.EndDTTM, DateTime.MinValue))
        ) {
          let nDoseCnt: number = prsItem.BasicProperties.Dose.DoseRegime.Count;
          if (
            nDoseCnt > 0 &&
            prsItem.BasicProperties.Dose.DoseRegime[nDoseCnt - 1] != null &&
            prsItem.BasicProperties.Dose.DoseRegime[nDoseCnt - 1].Duration !=
              null &&
            prsItem.BasicProperties.Dose.DoseRegime[nDoseCnt - 1].Duration
              .Value > 0 &&
            (!String.IsNullOrEmpty(
              prsItem.BasicProperties.Dose.DoseRegime[nDoseCnt - 1].Duration
                .UOMName
            ) ||
              !String.IsNullOrEmpty(
                prsItem.BasicProperties.Dose.DoseRegime[nDoseCnt - 1].Duration
                  .UOMCode
              )) &&
           DateTime.NotEquals(prsItem.BasicProperties.Dose.DoseRegime[nDoseCnt - 1].EndDTTM,
              DateTime.MinValue)
          ) {
            prsItem.EndDTTM =
              prsItem.BasicProperties.Dose.DoseRegime[nDoseCnt - 1].EndDTTM;
          } else {
            prsItem.EndDTTM = DateTime.MinValue;
          }
        }
      }
    } else {
      if (oItemVM.oDoseRegime == null) {
        prsItem.BasicProperties.Dose.DoseRegime =
          new ObservableCollection<IPPMAManagePrescSer.DoseRegime>();
        if (
          (PatientContext.IsINFUSIONON &&
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.itemSubType,
              DrugItemSubTypeCode.MEDICAL_GAS,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0) ||
          (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
            (String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.PCA,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.SINGLEDOSEVOLUME,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.FLUID,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.CONTINUOUS,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0))
        ) {
          prsItem.BasicProperties.Dose.DoseRegime =
            oItemVM.FillDoseRegimeInfusionDetail(
              oItemVM.FormViewerDetails.BasicDetails
            );
        } else {
          prsItem.BasicProperties.Dose.DoseRegime = oItemVM.FillDoseRegime(
            oItemVM.FormViewerDetails.BasicDetails
          );
        }
      } else {
        if (
          (PatientContext.IsINFUSIONON &&
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.itemSubType,
              DrugItemSubTypeCode.MEDICAL_GAS,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0) ||
          (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
            (String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.PCA,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.SINGLEDOSEVOLUME,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.FLUID,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
                InfusionTypeCode.CONTINUOUS,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0))
        ) {
          prsItem.BasicProperties.Dose.DoseRegime =
            oItemVM.FillDoseRegimeInfusionDetail(
              oItemVM.FormViewerDetails.BasicDetails
            );
        } else {
          if (
            oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.INTERMITTENT,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            prsItem.BasicProperties.Dose.DoseRegime =
              oItemVM.FillDoseRegimeIntermntInfusionDetail(
                oItemVM.oDoseRegime,
                oItemVM.FormViewerDetails.BasicDetails
              );
          } else {
            prsItem.BasicProperties.Dose.DoseRegime = oItemVM.oDoseRegime;
          }
        }
      }
    }
    if (oItemVM.IsHold && oItemVM.PrescriptionItemStatus == CConstants.ONHOLD) {
      prsItem.BasicProperties.Statusflags =
        new IPPMAManagePrescSer.StatusFlags();
      prsItem.BasicProperties.Statusflags.IsHold = '1';
      if (
        oItemVM.ReasonForHold != null &&
        oItemVM.ReasonForHold.Count > 0 &&
        !String.IsNullOrEmpty(oItemVM.ReasonForHold[0].DisplayText)
      )
        prsItem.ActionPerformed.ReasonForModification =
          prsItem.ActionPerformed.HoldReason =
            oItemVM.ReasonForHold[0].DisplayText;
      prsItem.PrescriptionItemStatus = oItemVM.PrescriptionItemStatus;
    }
    let IsStrenthFreq: boolean = true;
    if (
      IsInfusionDrug &&
      ((oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
        )) ||
        (PatientContext.IsINFUSIONON &&
          oItemVM.FormViewerDetails.BasicDetails.InfusionType == null))
    ) {
      IsStrenthFreq = false;
    }
    if (
      PatientContext.IsINFUSIONON &&
      !String.IsNullOrEmpty(oItemVM.ItemSubType) &&
      oItemVM.ItemSubType.Equals(DrugItemSubTypeCode.MEDICAL_GAS)
    ) {
      IsStrenthFreq = true;
    }
    if (
      IsStrenthFreq &&
      oItemVM.FormViewerDetails.BasicDetails.Strength != null &&
      !String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.Strength.Value
      )
    ) {
      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
        prsItem.BasicProperties,
        IPPMAManagePrescSer.IPPPresItemBasicProperties
      ).StrengthText = oItemVM.FormViewerDetails.BasicDetails.Strength.Value;
    }
    if (
      (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration ||
        PatientContext.PrescriptionType == PrescriptionTypes.Inpatient) &&
      !(
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      )
    ) {
      if (
        oItemVM.IsReSupplyRequested ||
        oItemVM.IsSupplyRequested != oItemVM.IsOriginalSupplyRequested
      ) {
        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
          prsItem.BasicProperties,
          IPPMAManagePrescSer.IPPPresItemBasicProperties
        ).IsSupplyRequested = !oItemVM.IsSupplyRequested
          ? '0'
          : oItemVM.IsReSupplyRequested
          ? '2'
          : oItemVM.IsSupplyRequested
          ? '1'
          : '0';
        if (oItemVM.RequisitionCACode == 'MN_MED_VALIDATE_S_P2') {
          ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
            prsItem.BasicProperties,
            IPPMAManagePrescSer.IPPPresItemBasicProperties
          ).STKREQCode =
            ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
              prsItem.BasicProperties,
              IPPMAManagePrescSer.IPPPresItemBasicProperties
            ).RequisitionCACode = oItemVM.RequisitionCACode;
        } else {
          ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
            prsItem.BasicProperties,
            IPPMAManagePrescSer.IPPPresItemBasicProperties
          ).STKREQCode =
            ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
              prsItem.BasicProperties,
              IPPMAManagePrescSer.IPPPresItemBasicProperties
            ).RequisitionCACode = this.AppContext.MenuCode;
        }
        if (oItemVM.IsSupplyRequested || oItemVM.IsReSupplyRequested) {
          ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
            prsItem.BasicProperties,
            IPPMAManagePrescSer.IPPPresItemBasicProperties
          ).IsWardStock = oItemVM.IsWardStock;
          let JobRoleOID: Int64 = 0;
          Int64.TryParse(AppContextInfo.JobRoleOID, (o) => {
            JobRoleOID = o;
          });
          ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
            prsItem.BasicProperties,
            IPPMAManagePrescSer.IPPPresItemBasicProperties
          ).oRequisitionHistoryDetails = ObjectHelper.CreateObject(
            new IPPMAManagePrescSer.RequisitionHistoryDetails(),
            {
              ServiceOID: MedChartData.ServiceOID,
              LocationOID: MedChartData.LocationOID,
              RoleOID: JobRoleOID,
            }
          );
        }
      }
    } else {
      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
        prsItem.BasicProperties,
        IPPMAManagePrescSer.IPPPresItemBasicProperties
      ).IsWardStock = false;
      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
        prsItem.BasicProperties,
        IPPMAManagePrescSer.IPPPresItemBasicProperties
      ).IsSupplyRequested = '\0';
      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
        prsItem.BasicProperties,
        IPPMAManagePrescSer.IPPPresItemBasicProperties
      ).STKREQCode =
        ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
          prsItem.BasicProperties,
          IPPMAManagePrescSer.IPPPresItemBasicProperties
        ).RequisitionCACode = String.Empty;
    }
    if (oItemVM.FormViewerDetails.BasicDetails.EndorsementProperties != null) {
      let selectedEndorsProps =
        oItemVM.FormViewerDetails.BasicDetails.EndorsementProperties.Where(
          (EndorsProp) => EndorsProp.IsSelected
        ).Select((EndorsProp) => EndorsProp);
      if (selectedEndorsProps != null) {
        let nPropCnt: number = selectedEndorsProps.Count();
        for (let i: number = 0; i < nPropCnt; i++) {
          if (i == 0) {
            prsItem.AdditionalProperties.EndorsementProperties =
              new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
          }
          let EndorsProp: CListItem = selectedEndorsProps.ElementAt(i);
          if (EndorsProp == null) continue;
          prsItem.AdditionalProperties.EndorsementProperties.Add(
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
              Code: EndorsProp.Value,
            })
          );
        }
      }
    }
    if (oItemVM.FormViewerDetails.BasicDetails.InstalmentInstructions != null) {
      let selectedInstallInst =
        oItemVM.FormViewerDetails.BasicDetails.InstalmentInstructions.Where(
          (InstallInst) => InstallInst.IsSelected
        ).Select((InstallInst) => InstallInst);
      if (selectedInstallInst != null) {
        let nInstallInstCnt: number = selectedInstallInst.Count();
        for (let i: number = 0; i < nInstallInstCnt; i++) {
          if (i == 0) {
            prsItem.AdditionalProperties.InstalmentInstructions =
              new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
          }
          let InstallInst: CListItem = selectedInstallInst.ElementAt(i);
          if (InstallInst == null) continue;
          prsItem.AdditionalProperties.InstalmentInstructions.Add(
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
              Code: InstallInst.Value,
            })
          );
        }
      }
    }
    prsItem.AdditionalProperties.AdditionalComments =
      oItemVM.FormViewerDetails.BasicDetails.AdditionalComments;
    prsItem.LastModifiedAt = oItemVM.LastModifiedAt;
    if (
      oItemVM.NonFormularyReason != null &&
      !String.IsNullOrEmpty(oItemVM.NonFormularyReason.Value)
    ) {
      prsItem.AdditionalProperties.NonFormularyReason =
        oItemVM.NonFormularyReason.Value;
      if (String.Compare(oItemVM.NonFormularyReason.Value, 'CC_OTHERS') == 0) {
        prsItem.AdditionalProperties.NonFormularyReason =
          oItemVM.OtherNonFormularyReason;
      }
    }
    prsItem.IsNonformulary = oItemVM.IsNonformulary;
    let sActionPerformedCode: string = CAActivity.CA_PRESCRIBE;
    let sActionCode: string = String.Empty;
    switch (oItemVM.ActionCode) {
      case ActivityTypes.Prescribe:
        sActionPerformedCode = CAActivity.CA_PRESCRIBE;
        break;
      case ActivityTypes.Reorder:
        sActionPerformedCode = CAActivity.CA_REORDER;
        break;
      case ActivityTypes.Amend:
        sActionPerformedCode = CAActivity.CA_AMEND;
        break;
      case ActivityTypes.UnHold:
        sActionCode = CAActivity.CA_UNHOLD;
        break;
    }
    prsItem.ActionPerformedCode = sActionPerformedCode;
    prsItem.AdditionalProperties.StatusModifedDTTM = ServerDatetime;
    if (
      String.Compare(sActionPerformedCode, CAActivity.CA_AMEND) == 0 ||
      String.Compare(sActionPerformedCode, CAActivity.CA_REORDER) == 0 ||
      String.Compare(sActionPerformedCode, CAActivity.CA_UNHOLD) == 0
    ) {
      prsItem.ActionPerformed.ModifiedItemOID = oItemVM.SourcePrescriptionOid;
      if (
        oItemVM.FormViewerDetails.BasicDetails.ReasonforModification != null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.ReasonforModification.Value
        )
      ) {
        prsItem.ActionPerformed.ReasonForModification =
          oItemVM.FormViewerDetails.BasicDetails.ReasonforModification.Value;
        prsItem.ActionPerformed.ActionCode =
          oItemVM.FormViewerDetails.BasicDetails.ModificationAction;
      }
      prsItem.ActionPerformed.ModificationComments =
        oItemVM.FormViewerDetails.BasicDetails.ModificationComments;
    }
    if (
      String.Compare(sActionCode, CAActivity.CA_UNHOLD) == 0 ||
      (oItemVM.IsHold && oItemVM.PrescriptionItemStatus == CConstants.ONHOLD)
    ) {
      prsItem.ActionPerformed.ModifiedItemOID = oItemVM.SourcePrescriptionOid;
    }
    if (
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.TechValidateDetails != null
    ) {
      if (
        (oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems !=
          null &&
          oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems
            .Count > 0) ||
        (oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems !=
          null &&
          oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems
            .Count > 0 &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0] != null &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0].FormViewerDetails != null &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0].FormViewerDetails.BasicDetails != null)
      ) {
        if (
          oItemVM.ActionCode == ActivityTypes.Reorder &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems == null
        ) {
          oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems =
            new ObservableCollection<PrescriptionItemVM>();
          oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems.Add(
            oItemVM
          );
        }
        prsItem.TechValidateDetails =
          new ObservableCollection<IPPMAManagePrescSer.TechnicalValidationInfo>();
        let oTechInfo: IPPMAManagePrescSer.TechnicalValidationInfo =
          new IPPMAManagePrescSer.TechnicalValidationInfo();
        oTechInfo.TechValidatedItems =
          new ObservableCollection<IPPMAManagePrescSer.TechValidatedItem>();
        let oTechDetail: IPPMAManagePrescSer.TechValidatedItem =
          new IPPMAManagePrescSer.TechValidatedItem();
        if (
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems != null &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0] != null &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0].FormViewerDetails != null &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0].FormViewerDetails.BasicDetails != null
        ) {
          if (
            (oItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged ||
              (oItemVM.PresTechValidatedItemsChild != null &&
                oItemVM.PresTechValidatedItemsChild[0] != null &&
                oItemVM.PresTechValidatedItemsChild[0].FormViewerDetails !=
                  null &&
                oItemVM.PresTechValidatedItemsChild[0].FormViewerDetails
                  .BasicDetails.IsSupplyinstrChanged) ||
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].EditedGridID == 1) &&
            (oItemVM.FormViewerDetails.TechValidateDetails
              .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
              .IsDoseCombDefTech == '0' ||
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                .IsDoseCombDefTech == "")
          ) {
            if (
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                .SelectedsupplyInstruction != null &&
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Length >
                0
            ) {
              if (oTechDetail.SupplyInstruction == null) {
                oTechDetail.SupplyInstruction =
                  new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
              }
              for (
                let i: number = 0;
                i <
                oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Length;
                i++
              ) {
                oTechDetail.SupplyInstruction.Add(
                  ObjectHelper.CreateObject(
                    new IPPMAManagePrescSer.ObjectInfo(),
                    {
                      Code: oItemVM.FormViewerDetails.TechValidateDetails
                        .PresTechValidatedItems[0].FormViewerDetails
                        .BasicDetails.SelectedsupplyInstruction[i].Value,
                      Name: oItemVM.FormViewerDetails.TechValidateDetails
                        .PresTechValidatedItems[0].FormViewerDetails
                        .BasicDetails.SelectedsupplyInstruction[i].DisplayText,
                    }
                  )
                );
              }
            }
            if (
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                .TechValDispensingInst != null
            ) {
              oTechDetail.DispensingInstruction =
                new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.TechValDispensingInst.forEach(
                (objDispInfo) => {
                  oTechDetail.DispensingInstruction.Add(
                    ObjectHelper.CreateObject(
                      new IPPMAManagePrescSer.ObjectInfo(),
                      {
                        Code: objDispInfo.Value,
                        Name: objDispInfo.DisplayText,
                      }
                    )
                  );
                }
              );
            }
            if (
              !String.IsNullOrEmpty(
                oItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                  .Supplycomments
              )
            ) {
              if (oTechDetail.SupplyInstruction == null)
                oTechDetail.SupplyInstruction =
                  new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
              oTechDetail.SupplyInstruction.Add(
                ObjectHelper.CreateObject(
                  new IPPMAManagePrescSer.ObjectInfo(),
                  {
                    Code: CConstants.Supplycomments,
                    Name: oItemVM.FormViewerDetails.TechValidateDetails
                      .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                      .Supplycomments,
                  }
                )
              );
            }
            oTechDetail.OtherDispensingInstruction =
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.Supplycomments;
            oTechDetail.PrescriptionItemTechOID =
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.TechPresItemTechOID;
            if (oItemVM != null && oItemVM.SelectedSupplyreq != null) {
              if (
                String.Compare(
                  oItemVM.SelectedSupplyreq.Value,
                  CConstants.Supplycode,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0
              ) {
                oTechDetail.IsSupplyRequested = '1';
              } else if (
                String.Compare(
                  oItemVM.SelectedSupplyreq.Value,
                  CConstants.DonotSupplycode,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0
              ) {
                oTechDetail.IsSupplyRequested = '2';
              } else if (
                String.Equals(
                  oItemVM.SelectedSupplyreq.Value,
                  CConstants.CancelSupplycode,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ) {
                oTechDetail.IsSupplyRequested = '3';
              } else {
                oTechDetail.IsSupplyRequested = '0';
              }
            } else {
              oTechDetail.IsSupplyRequested = '0';
            }
            if (
              oItemVM != null &&
              DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate,
                DateTime.MinValue)
            ) {
              oTechDetail.NextSupplyDttm =
                oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate;
            }
            if (
              oItemVM.FormViewerDetails.BasicDetails.NextSupplyDate !=
                oItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              )
            ) {
              oTechDetail.isNextSupplyUpdate = true;
            } else {
              oTechDetail.isNextSupplyUpdate = false;
            }
            oTechDetail.LocationOid = MedChartData.LocationOID;
            oTechDetail.ServiceOid = MedChartData.ServiceOID;
            oTechDetail.ReqCACode = Resource.TechValidate.ReqCACode;
            oTechDetail.DrugItem = new IPPMAManagePrescSer.DrugItemBasicData();
            oTechDetail.DrugItem.IdentifyingName =
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.IdentifyingName;
            oTechDetail.DrugItem.IdentifyingType =
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.IdentifyingType;
            oTechDetail.DrugItem.IdentifyingOID =
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.IdentifyingOID;
            oTechDetail.DrugItem.PrescribableItemListOID =
              oItemVM.PrescribableItemOID;
            oTechDetail.DrugItem.MCVersionNo = AppSessionInfo.AMCV;
            if (oItemVM.PrescribableItemOID == 0) {
              oTechDetail.DrugItem.PrescribableItemListOID =
                oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PrescriptionItemOID;
            }
            oTechDetail.IsDoseCombinationsDefined = '0';
            if (oTechDetail.PrescriptionItemTechOID == 0)
              oTechDetail.OperationMode = 'N';
            else if (
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                .TecValOperationMode == 'M'
            )
              oTechDetail.OperationMode = 'M';
            else if (
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                .TecValOperationMode == 'D'
            )
              oTechDetail.OperationMode = 'D';
            oTechDetail.QuantityPerDose = String.Empty;
            oTechDetail.TotalQuantity = String.Empty;
            oTechDetail.QuantityPerDoseUOM =
              new IPPMAManagePrescSer.ObjectInfo();
            oTechDetail.QuantityPerDoseUOM.OID = 0;
            oTechDetail.TotalQuantityUOM = new IPPMAManagePrescSer.ObjectInfo();
            oTechDetail.TotalQuantityUOM.OID = 0;
            if (
              String.IsNullOrEmpty(
                oItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                  .TecValOperationMode
              ) &&
              (oItemVM.ActionCode == ActivityTypes.Amend ||
                oItemVM.ActionCode == ActivityTypes.Reorder ||
                oItemVM.ActionCode == ActivityTypes.Prescribe)
            ) {
              if (oTechDetail.PrescriptionItemTechOID == 0) {
                oTechDetail.OperationMode = 'N';
              } else if (oTechDetail.PrescriptionItemTechOID > 0) {
                oTechDetail.OperationMode = 'M';
              } else {
                oTechDetail.OperationMode =
                  oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.TecValOperationMode;
              }
              oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                true;
            } else
              oTechDetail.OperationMode =
                oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.TecValOperationMode;
            if (
              oTechDetail.OperationMode == null &&
              !String.IsNullOrEmpty(
                oItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                  .Supplycomments
              )
            ) {
              oTechDetail.OperationMode = 'N';
            }
            if (
              oItemVM.FormViewerDetails.BasicDetails.ReasonforModification !=
                null &&
              !String.IsNullOrEmpty(
                oItemVM.FormViewerDetails.BasicDetails.ReasonforModification
                  .Value
              ) &&
              oItemVM.ActionCode == ActivityTypes.Amend
            ) {
              oTechDetail.OperationMode = 'N';
              oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                true;
            } else if (
              oItemVM.OperationMode == 'N' &&
              (PatientContext.PrescriptionType == PrescriptionTypes.Discharge ||
                PatientContext.PrescriptionType == PrescriptionTypes.Leave ||
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.Outpatient) &&
              oItemVM.ActionCode == ActivityTypes.Amend
            ) {
              oTechDetail.OperationMode = 'N';
              oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                true;
            }
            if (
              String.Compare(
                oTechDetail.OperationMode,
                'M',
                StringComparison.InvariantCultureIgnoreCase
              ) == 0 &&
              oItemVM.ActionCode == ActivityTypes.Reorder
            )
              oTechDetail.OperationMode = 'N';
            if (
              String.Compare(
                oTechDetail.OperationMode,
                'M',
                StringComparison.InvariantCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                oTechDetail.OperationMode,
                'D',
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            )
              oTechDetail.PrescriptionItemTechOID =
                oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.TechPresItemTechOID;
            oTechInfo.Technicalvalidateupdate =
              oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate;
            oTechInfo.TechValidatedItems.Add(oTechDetail);
          }
        }
        oTechInfo.IsMergePatient =
          PatientContext.PatientOID > 0 &&
          PatientContext.MergedPatientOID > 0 &&
          PatientContext.PatientOID != PatientContext.MergedPatientOID
            ? '1'
            : '0';
        if (
          oTechInfo.IsMergePatient == '0' &&
          (PatientContext.IsMergedPatient == '1' ||
            PatientContext.IsMergedPatient == '2')
        ) {
          oTechInfo.IsMergePatient = '1';
        }
        if (isAuthClinicalVerifyLaunched) {
          oTechInfo.EncounterOID = PatientContext.EncounterOid;
          oTechInfo.PrescriptionItemOID = oItemVM.PrescriptionItemOID;
          oTechInfo.PrescriptionOID = oItemVM.PrescriptionOID;
        }
        if (
          oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems !=
          null
        ) {
          let nCount: number =
            oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems
              .Count;
          for (let i: number = 0; i < nCount; i++) {
            let oTechItem: CustomTechValidatedItem =
              oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ];
            //oItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.forEach((oTechItem) => {
            if (!oTechItem.bMultiCompChilds) {
              let objTech: IPPMAManagePrescSer.TechValidatedItem =
                new IPPMAManagePrescSer.TechValidatedItem();
              if (
                String.Compare(
                  oTechItem.OperationMode,
                  'D',
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0 &&
                oItemVM.ActionCode == ActivityTypes.Reorder
              )
                continue;
              if (String.IsNullOrEmpty(oTechItem.QuantityPerDose))
                objTech.QuantityPerDose = String.Empty;
              else objTech.QuantityPerDose = oTechItem.QuantityPerDose;
              objTech.QuantityPerDoseUOM = new IPPMAManagePrescSer.ObjectInfo();
              objTech.QuantityPerDoseUOM.OID = oTechItem.QuantityPerDoseUOM.OID;
              if (String.IsNullOrEmpty(oTechItem.TotalQuantity))
                objTech.TotalQuantity = String.Empty;
              else objTech.TotalQuantity = oTechItem.TotalQuantity;
              objTech.TotalQuantityUOM = new IPPMAManagePrescSer.ObjectInfo();
              objTech.TotalQuantityUOM.OID = oTechItem.TotalQuantityUOM.OID;
              if (
                oTechItem.SupplyInstruction != null &&
                oTechItem.SupplyInstruction.Count > 0
              ) {
                objTech.SupplyInstruction =
                  new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                oTechItem.SupplyInstruction.forEach((objSupInfo) => {
                  objTech.SupplyInstruction.Add(
                    ObjectHelper.CreateObject(
                      new IPPMAManagePrescSer.ObjectInfo(),
                      {
                        Code: objSupInfo.Code,
                        Name: objSupInfo.Name,
                      }
                    )
                  );
                });
              }
              if (!String.IsNullOrEmpty(oTechItem.SupComments)) {
                if (objTech.SupplyInstruction == null)
                  objTech.SupplyInstruction =
                    new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                objTech.SupplyInstruction.Add(
                  ObjectHelper.CreateObject(
                    new IPPMAManagePrescSer.ObjectInfo(),
                    {
                      Code: CConstants.Supplycomments,
                      Name: oTechItem.SupComments,
                    }
                  )
                );
              }
              if (
                oTechItem.DispensingInstruction != null &&
                oTechItem.DispensingInstruction.Count > 0
              ) {
                objTech.DispensingInstruction =
                  new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                oTechItem.DispensingInstruction.forEach((objDispInfo) => {
                  objTech.DispensingInstruction.Add(
                    ObjectHelper.CreateObject(
                      new IPPMAManagePrescSer.ObjectInfo(),
                      {
                        Code: objDispInfo.Code,
                        Name: objDispInfo.Name,
                      }
                    )
                  );
                });
              }
              if (!String.IsNullOrEmpty(oTechItem.OtherDispensingInstruction)) {
                objTech.OtherDispensingInstruction =
                  oTechItem.OtherDispensingInstruction;
              }
              objTech.IsDoseCombinationsDefined = '1';
              if (
                String.IsNullOrEmpty(oTechItem.OperationMode) &&
                (oItemVM.ActionCode == ActivityTypes.Amend ||
                  oItemVM.ActionCode == ActivityTypes.Reorder)
              ) {
                if (
                  String.Compare(
                    oTechItem.OperationMode,
                    'D',
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0
                )
                  objTech.OperationMode = 'D';
                else objTech.OperationMode = 'N';
                oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                  true;
                if (oTechItem.IsDoseCombinationsDefined == '0')
                  objTech.IsDoseCombinationsDefined = '0';
                else objTech.IsDoseCombinationsDefined = '1';
              } else {
                objTech.OperationMode = oTechItem.OperationMode;
              }
              if (
                ((oItemVM.FormViewerDetails.BasicDetails
                  .ReasonforModification != null &&
                  !String.IsNullOrEmpty(
                    oItemVM.FormViewerDetails.BasicDetails.ReasonforModification
                      .Value
                  )) ||
                  (oItemVM.OperationMode == 'N' &&
                    (PatientContext.PrescriptionType ==
                      PrescriptionTypes.Discharge ||
                      PatientContext.PrescriptionType ==
                        PrescriptionTypes.Leave ||
                      PatientContext.PrescriptionType ==
                        PrescriptionTypes.Outpatient))) &&
                oItemVM.ActionCode == ActivityTypes.Amend
              ) {
                if (
                  String.Compare(
                    oTechItem.OperationMode,
                    'D',
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0
                )
                  objTech.OperationMode = 'D';
                else objTech.OperationMode = 'N';
                oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                  true;
                if (oTechItem.IsDoseCombinationsDefined == '0')
                  objTech.IsDoseCombinationsDefined = '0';
                else objTech.IsDoseCombinationsDefined = '1';
              }
              if (
                String.Compare(
                  objTech.OperationMode,
                  'M',
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0 &&
                oItemVM.ActionCode == ActivityTypes.Reorder
              )
                objTech.OperationMode = 'N';
              if (
                String.Compare(
                  objTech.OperationMode,
                  'M',
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0 ||
                String.Compare(
                  objTech.OperationMode,
                  'D',
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0
              )
                objTech.PrescriptionItemTechOID =
                  oTechItem.PrescriptionItemTechOID;
              objTech.LocationOid = MedChartData.LocationOID;
              objTech.ServiceOid = MedChartData.ServiceOID;
              objTech.DrugItem = new IPPMAManagePrescSer.DrugItemBasicData();
              objTech.DrugItem.IdentifyingType =
                oTechItem.DrugItem.IdentifyingType;
              objTech.DrugItem.IdentifyingOID =
                oTechItem.DrugItem.IdentifyingOID;
              objTech.DrugItem.PrescribableItemListOID =
                oItemVM.PrescribableItemOID;
              objTech.DrugItem.MCVersionNo = AppSessionInfo.AMCV;
              if (oItemVM.PrescribableItemOID == 0) {
                objTech.DrugItem.PrescribableItemListOID =
                  oItemVM.PrescriptionItemOID;
              }
              oTechInfo.Technicalvalidateupdate =
                oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate;
              oTechInfo.TechValidatedItems.Add(objTech);
            }
            //});
          }
        }
        if (
          oItemVM.FormViewerDetails.TechValidateDetails
            .Technicalvalidateupdate == true ||
          (oItemVM.FormViewerDetails.TechValidateDetails != null &&
            oItemVM.FormViewerDetails.TechValidateDetails
              .PresTechValidatedItems != null &&
            oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems
              .Count > 0 &&
            oItemVM.FormViewerDetails.TechValidateDetails
              .PresTechValidatedItems[0] != null &&
            oItemVM.FormViewerDetails.TechValidateDetails
              .PresTechValidatedItems[0].FormViewerDetails != null &&
            oItemVM.FormViewerDetails.TechValidateDetails
              .PresTechValidatedItems[0].FormViewerDetails.BasicDetails !=
              null &&
            (!String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                .Supplycomments
            ) ||
              (oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                .SelectedsupplyInstruction != null &&
                oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count > 0) ||
              (oItemVM.SelectedSupplyreq != null &&
                oItemVM.SelectedSupplyreq.Value != null &&
                (oItemVM.SelectedSupplyreq.Value.Equals(
                  CConstants.Supplycode,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                  oItemVM.SelectedSupplyreq.Value.Equals(
                    CConstants.DonotSupplycode,
                    StringComparison.InvariantCultureIgnoreCase
                  ))) ||
              (oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                .NextSupplyDate != null &&
               DateTime.NotEquals(oItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                  .NextSupplyDate, DateTime.MinValue))))
        ) {
          prsItem.TechValidateDetails.Add(oTechInfo);
        }
        if (
          oItemVM != null &&
          oItemVM.FormViewerDetails != null &&
          oItemVM.FormViewerDetails.BasicDetails != null &&
          !String.Equals(
            oItemVM.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          oItemVM.PresTechValidatedItemsChild != null &&
          oItemVM.PresTechValidatedItemsChild.Count > 0 &&
          oItemVM.PresTechValidatedItemsChild.Count == 1 &&
          oItemVM.PresTechValidatedItemsChild[0].FormViewerDetails != null &&
          oItemVM.PresTechValidatedItemsChild[0].FormViewerDetails
            .BasicDetails != null &&
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .FluidSelectvalue != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .FluidSelectvalue.Value
          ) &&
          oItemVM.FormViewerDetails.TechValidateDetails != null &&
          (oItemVM.PresTechValidatedItemsChild[0].EditedGridID == 1 ||
            oItemVM.PresTechValidatedItemsChild[0].FormViewerDetails
              .BasicDetails.EditedGridID == 1)
        ) {
          let oTechFluidInfo: IPPMAManagePrescSer.TechnicalValidationInfo =
            new IPPMAManagePrescSer.TechnicalValidationInfo();
          oTechFluidInfo.TechValidatedItems =
            new ObservableCollection<IPPMAManagePrescSer.TechValidatedItem>();
          let oTechFluidDetail: IPPMAManagePrescSer.TechValidatedItem =
            new IPPMAManagePrescSer.TechValidatedItem();
          let childFluidItem: PrescriptionItemVM =
            oItemVM.PresTechValidatedItemsChild[0];
          if (
            childFluidItem.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction != null &&
            childFluidItem.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction.Count > 0
          ) {
            if (oTechFluidDetail.SupplyInstruction == null) {
              oTechFluidDetail.SupplyInstruction =
                new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
            }
            for (
              let i: number = 0;
              i <
              childFluidItem.FormViewerDetails.BasicDetails
                .SelectedsupplyInstruction.Count;
              i++
            ) {
              oTechFluidDetail.SupplyInstruction.Add(
                ObjectHelper.CreateObject(
                  new IPPMAManagePrescSer.ObjectInfo(),
                  {
                    Code: childFluidItem.FormViewerDetails.BasicDetails
                      .SelectedsupplyInstruction[i].Value,
                    Name: childFluidItem.FormViewerDetails.BasicDetails
                      .SelectedsupplyInstruction[i].DisplayText,
                  }
                )
              );
            }
          }
          if (
            childFluidItem.FormViewerDetails.BasicDetails
              .TechValDispensingInst != null
          ) {
            oTechFluidDetail.DispensingInstruction =
              new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
            childFluidItem.FormViewerDetails.BasicDetails.TechValDispensingInst.forEach(
              (objDispInfo) => {
                oTechFluidDetail.DispensingInstruction.Add(
                  ObjectHelper.CreateObject(
                    new IPPMAManagePrescSer.ObjectInfo(),
                    {
                      Code: objDispInfo.Value,
                      Name: objDispInfo.DisplayText,
                    }
                  )
                );
              }
            );
          }
          if (
            !String.IsNullOrEmpty(
              childFluidItem.FormViewerDetails.BasicDetails.Supplycomments
            )
          ) {
            if (oTechFluidDetail.SupplyInstruction == null)
              oTechFluidDetail.SupplyInstruction =
                new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
            oTechFluidDetail.SupplyInstruction.Add(
              ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
                Code: CConstants.Supplycomments,
                Name: childFluidItem.FormViewerDetails.BasicDetails
                  .Supplycomments,
              })
            );
          }
          if (
            DateTime.NotEquals(childFluidItem.FormViewerDetails.BasicDetails.NextSupplyDate,
            DateTime.MinValue)
          ) {
            oTechFluidDetail.NextSupplyDttm =
              childFluidItem.FormViewerDetails.BasicDetails.NextSupplyDate;
          }
          oTechFluidDetail.OtherDispensingInstruction =
            childFluidItem.FormViewerDetails.BasicDetails.Supplycomments;
          oTechFluidDetail.PrescriptionItemTechOID =
            childFluidItem.FormViewerDetails.BasicDetails.TechPresItemTechOID;
          oTechFluidDetail.FluidPrescribableItemListOID =
            childFluidItem.FluidPrescribableItemListOID;
          if (
            childFluidItem != null &&
            childFluidItem.SelectedSupplyreq != null
          ) {
            if (
              String.Compare(
                childFluidItem.SelectedSupplyreq.Value,
                CConstants.Supplycode,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            ) {
              oTechFluidDetail.IsSupplyRequested = '1';
            } else if (
              String.Compare(
                childFluidItem.SelectedSupplyreq.Value,
                CConstants.DonotSupplycode,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            ) {
              oTechFluidDetail.IsSupplyRequested = '2';
            } else if (
              String.Equals(
                childFluidItem.SelectedSupplyreq.Value,
                CConstants.CancelSupplycode,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              oTechFluidDetail.IsSupplyRequested = '3';
            } else {
              oTechFluidDetail.IsSupplyRequested = '0';
            }
          } else {
            oTechFluidDetail.IsSupplyRequested = '0';
          }
          oTechFluidDetail.LocationOid = MedChartData.LocationOID;
          oTechFluidDetail.ServiceOid = MedChartData.ServiceOID;
          oTechFluidDetail.ReqCACode = Resource.TechValidate.ReqCACode;
          oTechFluidDetail.DrugItem =
            new IPPMAManagePrescSer.DrugItemBasicData();
          oTechFluidDetail.DrugItem.IdentifyingName =
            childFluidItem.FormViewerDetails.BasicDetails.IdentifyingName;
          oTechFluidDetail.DrugItem.IdentifyingType =
            childFluidItem.FormViewerDetails.BasicDetails.IdentifyingType;
          oTechFluidDetail.DrugItem.IdentifyingOID =
            childFluidItem.FormViewerDetails.BasicDetails.IdentifyingOID;
          oTechFluidDetail.DrugItem.PrescribableItemListOID =
            childFluidItem.PrescribableItemOID;
          oTechFluidDetail.DrugItem.MCVersionNo = AppSessionInfo.AMCV;
          if (childFluidItem.PrescribableItemOID == 0) {
            oTechFluidDetail.DrugItem.PrescribableItemListOID =
              childFluidItem.PrescriptionItemOID;
          }
          oTechFluidDetail.IsDoseCombinationsDefined = '0';
          if (oTechFluidDetail.PrescriptionItemTechOID == 0)
            oTechFluidDetail.OperationMode = 'N';
          else if (
            childFluidItem.FormViewerDetails.BasicDetails.TecValOperationMode ==
            'M'
          )
            oTechFluidDetail.OperationMode = 'M';
          else if (
            childFluidItem.FormViewerDetails.BasicDetails.TecValOperationMode ==
            'D'
          )
            oTechFluidDetail.OperationMode = 'D';
          oTechFluidDetail.QuantityPerDose = String.Empty;
          oTechFluidDetail.TotalQuantity = String.Empty;
          oTechFluidDetail.QuantityPerDoseUOM =
            new IPPMAManagePrescSer.ObjectInfo();
          oTechFluidDetail.QuantityPerDoseUOM.OID = 0;
          oTechFluidDetail.TotalQuantityUOM =
            new IPPMAManagePrescSer.ObjectInfo();
          oTechFluidDetail.TotalQuantityUOM.OID = 0;
          if (
            String.IsNullOrEmpty(
              childFluidItem.FormViewerDetails.BasicDetails.TecValOperationMode
            ) &&
            (childFluidItem.ActionCode == ActivityTypes.Amend ||
              childFluidItem.ActionCode == ActivityTypes.Reorder ||
              childFluidItem.ActionCode == ActivityTypes.Prescribe)
          ) {
            if (oTechFluidDetail.PrescriptionItemTechOID == 0) {
              oTechFluidDetail.OperationMode = 'N';
            } else if (oTechFluidDetail.PrescriptionItemTechOID > 0) {
              oTechFluidDetail.OperationMode = 'M';
            } else {
              oTechFluidDetail.OperationMode =
                childFluidItem.FormViewerDetails.BasicDetails.TecValOperationMode;
            }
            childFluidItem.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
              true;
          } else
            oTechFluidDetail.OperationMode =
              childFluidItem.FormViewerDetails.BasicDetails.TecValOperationMode;
          if (
            oTechFluidDetail.OperationMode == null &&
            !String.IsNullOrEmpty(
              childFluidItem.FormViewerDetails.BasicDetails.Supplycomments
            )
          ) {
            oTechFluidDetail.OperationMode = 'N';
          }
          if (
            oTechFluidDetail.OperationMode == null &&
            DateTime.NotEquals(childFluidItem.FormViewerDetails.BasicDetails.NextSupplyDate,
              DateTime.MinValue)
          ) {
            oTechFluidDetail.OperationMode = 'N';
          }
          if (
            childFluidItem.FormViewerDetails.BasicDetails
              .ReasonforModification != null &&
            !String.IsNullOrEmpty(
              childFluidItem.FormViewerDetails.BasicDetails
                .ReasonforModification.Value
            ) &&
            childFluidItem.ActionCode == ActivityTypes.Amend
          ) {
            oTechFluidDetail.OperationMode = 'N';
            childFluidItem.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
              true;
          } else if (
            childFluidItem.OperationMode == 'N' &&
            (PatientContext.PrescriptionType == PrescriptionTypes.Discharge ||
              PatientContext.PrescriptionType == PrescriptionTypes.Leave ||
              PatientContext.PrescriptionType ==
                PrescriptionTypes.Outpatient) &&
            childFluidItem.ActionCode == ActivityTypes.Amend
          ) {
            oTechFluidDetail.OperationMode = 'N';
            childFluidItem.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
              true;
          }
          if (
            String.Compare(
              oTechFluidDetail.OperationMode,
              'M',
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 &&
            childFluidItem.ActionCode == ActivityTypes.Reorder
          )
            oTechFluidDetail.OperationMode = 'N';
          if (
            String.Compare(
              oTechFluidDetail.OperationMode,
              'M',
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              oTechFluidDetail.OperationMode,
              'D',
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          )
            oTechFluidDetail.PrescriptionItemTechOID =
              childFluidItem.FormViewerDetails.BasicDetails.TechPresItemTechOID;
          oTechFluidInfo.Technicalvalidateupdate =
            oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate;
          oTechFluidInfo.TechValidatedItems.Add(oTechFluidDetail);
          oTechFluidInfo.IsMergePatient =
            PatientContext.PatientOID > 0 &&
            PatientContext.MergedPatientOID > 0 &&
            PatientContext.PatientOID != PatientContext.MergedPatientOID
              ? '1'
              : '0';
          if (
            oTechFluidInfo.IsMergePatient == '0' &&
            (PatientContext.IsMergedPatient == '1' ||
              PatientContext.IsMergedPatient == '2')
          ) {
            oTechFluidInfo.IsMergePatient = '1';
          }
          if (isAuthClinicalVerifyLaunched) {
            oTechFluidInfo.EncounterOID = PatientContext.EncounterOid;
            oTechFluidInfo.PrescriptionItemOID = oItemVM.PrescriptionItemOID;
            oTechFluidInfo.PrescriptionOID = oItemVM.PrescriptionOID;
          }
          if (
            childFluidItem.FormViewerDetails.TechValidateDetails
              .TechValidatedItems != null
          ) {
            let TechValItemCnt: number =
              childFluidItem.FormViewerDetails.TechValidateDetails
                .TechValidatedItems.Count;
            for (let i: number = 0; i < TechValItemCnt; i++) {
              let oFluidProdItem: CustomTechValidatedItem =
                childFluidItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[i];
              //childFluidItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.forEach((oFluidProdItem) => {
              if (!oFluidProdItem.bMultiCompChilds) {
                let objTech: IPPMAManagePrescSer.TechValidatedItem =
                  new IPPMAManagePrescSer.TechValidatedItem();
                if (
                  String.Compare(
                    oFluidProdItem.OperationMode,
                    'D',
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0 &&
                  oItemVM.ActionCode == ActivityTypes.Reorder
                )
                  continue;
                if (String.IsNullOrEmpty(oFluidProdItem.QuantityPerDose))
                  objTech.QuantityPerDose = String.Empty;
                else objTech.QuantityPerDose = oFluidProdItem.QuantityPerDose;
                objTech.QuantityPerDoseUOM =
                  new IPPMAManagePrescSer.ObjectInfo();
                objTech.QuantityPerDoseUOM.OID =
                  oFluidProdItem.QuantityPerDoseUOM.OID;
                if (String.IsNullOrEmpty(oFluidProdItem.TotalQuantity))
                  objTech.TotalQuantity = String.Empty;
                else objTech.TotalQuantity = oFluidProdItem.TotalQuantity;
                objTech.TotalQuantityUOM = new IPPMAManagePrescSer.ObjectInfo();
                objTech.TotalQuantityUOM.OID =
                  oFluidProdItem.TotalQuantityUOM.OID;
                if (
                  oFluidProdItem.SupplyInstruction != null &&
                  oFluidProdItem.SupplyInstruction.Count > 0
                ) {
                  objTech.SupplyInstruction =
                    new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                  oFluidProdItem.SupplyInstruction.forEach((objSupInfo) => {
                    objTech.SupplyInstruction.Add(
                      ObjectHelper.CreateObject(
                        new IPPMAManagePrescSer.ObjectInfo(),
                        {
                          Code: objSupInfo.Code,
                          Name: objSupInfo.Name,
                        }
                      )
                    );
                  });
                }
                if (!String.IsNullOrEmpty(oFluidProdItem.SupComments)) {
                  if (objTech.SupplyInstruction == null)
                    objTech.SupplyInstruction =
                      new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                  objTech.SupplyInstruction.Add(
                    ObjectHelper.CreateObject(
                      new IPPMAManagePrescSer.ObjectInfo(),
                      {
                        Code: CConstants.Supplycomments,
                        Name: oFluidProdItem.SupComments,
                      }
                    )
                  );
                }
                if (
                  oFluidProdItem.DispensingInstruction != null &&
                  oFluidProdItem.DispensingInstruction.Count > 0
                ) {
                  objTech.DispensingInstruction =
                    new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                  oFluidProdItem.DispensingInstruction.forEach(
                    (objDispInfo) => {
                      objTech.DispensingInstruction.Add(
                        ObjectHelper.CreateObject(
                          new IPPMAManagePrescSer.ObjectInfo(),
                          {
                            Code: objDispInfo.Code,
                            Name: objDispInfo.Name,
                          }
                        )
                      );
                    }
                  );
                }
                if (
                  !String.IsNullOrEmpty(
                    oFluidProdItem.OtherDispensingInstruction
                  )
                ) {
                  objTech.OtherDispensingInstruction =
                    oFluidProdItem.OtherDispensingInstruction;
                }
                objTech.IsDoseCombinationsDefined = '1';
                if (objTech.ServiceOid == 0) {
                  objTech.ServiceOid = MedChartData.ServiceOID;
                }
                if (objTech.LocationOid == 0) {
                  objTech.LocationOid = MedChartData.LocationOID;
                }
                if (
                  String.IsNullOrEmpty(oFluidProdItem.OperationMode) &&
                  (oItemVM.ActionCode == ActivityTypes.Amend ||
                    oItemVM.ActionCode == ActivityTypes.Reorder)
                ) {
                  if (
                    String.Compare(
                      oFluidProdItem.OperationMode,
                      'D',
                      StringComparison.InvariantCultureIgnoreCase
                    ) == 0
                  )
                    objTech.OperationMode = 'D';
                  else objTech.OperationMode = 'N';
                  oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                    true;
                  if (oFluidProdItem.IsDoseCombinationsDefined == '0')
                    objTech.IsDoseCombinationsDefined = '0';
                  else objTech.IsDoseCombinationsDefined = '1';
                } else {
                  objTech.OperationMode = oFluidProdItem.OperationMode;
                }
                if (
                  ((oItemVM.FormViewerDetails.BasicDetails
                    .ReasonforModification != null &&
                    !String.IsNullOrEmpty(
                      oItemVM.FormViewerDetails.BasicDetails
                        .ReasonforModification.Value
                    )) ||
                    (oItemVM.OperationMode == 'N' &&
                      (PatientContext.PrescriptionType ==
                        PrescriptionTypes.Discharge ||
                        PatientContext.PrescriptionType ==
                          PrescriptionTypes.Leave ||
                        PatientContext.PrescriptionType ==
                          PrescriptionTypes.Outpatient))) &&
                  oItemVM.ActionCode == ActivityTypes.Amend
                ) {
                  if (
                    String.Compare(
                      oFluidProdItem.OperationMode,
                      'D',
                      StringComparison.InvariantCultureIgnoreCase
                    ) == 0
                  )
                    objTech.OperationMode = 'D';
                  else objTech.OperationMode = 'N';
                  oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                    true;
                  if (oFluidProdItem.IsDoseCombinationsDefined == '0')
                    objTech.IsDoseCombinationsDefined = '0';
                  else objTech.IsDoseCombinationsDefined = '1';
                }
                if (
                  String.Compare(
                    objTech.OperationMode,
                    'M',
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0 &&
                  oItemVM.ActionCode == ActivityTypes.Reorder
                )
                  objTech.OperationMode = 'N';
                if (
                  String.Compare(
                    objTech.OperationMode,
                    'M',
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0 ||
                  String.Compare(
                    objTech.OperationMode,
                    'D',
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0
                )
                  objTech.PrescriptionItemTechOID =
                    oFluidProdItem.PrescriptionItemTechOID;
                objTech.DrugItem = new IPPMAManagePrescSer.DrugItemBasicData();
                objTech.DrugItem.IdentifyingType =
                  oFluidProdItem.DrugItem.IdentifyingType;
                objTech.DrugItem.IdentifyingOID =
                  oFluidProdItem.DrugItem.IdentifyingOID;
                objTech.DrugItem.PrescribableItemListOID =
                  oItemVM.PrescribableItemOID;
                objTech.DrugItem.MCVersionNo = AppSessionInfo.AMCV;
                if (oItemVM.PrescribableItemOID == 0) {
                  objTech.DrugItem.PrescribableItemListOID =
                    oFluidProdItem.DrugItem.PrescribableItemListOID;
                }
                objTech.FluidPrescribableItemListOID =
                  childFluidItem.FluidPrescribableItemListOID;
                oTechFluidInfo.Technicalvalidateupdate =
                  oItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate;
                oTechFluidInfo.TechValidatedItems.Add(objTech);
              }
              //});
            }
          }
          if (
            oTechFluidInfo != null &&
            oTechFluidInfo.TechValidatedItems != null &&
            oTechFluidInfo.TechValidatedItems.Count > 0
          ) {
            prsItem.TechValidateDetails.Add(oTechFluidInfo);
          }
          if (
            (childFluidItem.FormViewerDetails != null &&
              childFluidItem.FormViewerDetails.BasicDetails != null &&
              childFluidItem.FormViewerDetails.BasicDetails
                .IsSupplyinstrChanged) ||
            (childFluidItem.FormViewerDetails.TechValidateDetails != null &&
              childFluidItem.FormViewerDetails.TechValidateDetails
                .TechValidatedItems != null &&
              childFluidItem.FormViewerDetails.TechValidateDetails
                .TechValidatedItems.Count > 0)
          ) {
            prsItem.BasicProperties.IsSupplyInstChanged = true;
          }
        }
      }
    }
    if (
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.ConflictDetails != null &&
      oItemVM.FormViewerDetails.ConflictDetails.Count > 0
    ) {
      prsItem.Warning =
        new ObservableCollection<IPPMAManagePrescSer.WarningDetails>();
      oItemVM.FormViewerDetails.ConflictDetails.forEach((oItemConflictsVM) => {
        let oWarning: IPPMAManagePrescSer.WarningDetails =
          new IPPMAManagePrescSer.WarningDetails();
        oWarning.WarningType = oItemConflictsVM.WarningType;
        let sWarMsg: string = oItemConflictsVM.WarningMessage;
        if (!String.IsNullOrEmpty(sWarMsg) && sWarMsg.Contains('~')) {
          sWarMsg = String.Join(String.Empty, sWarMsg.Split('~'));
        }
        oWarning.Code = oItemConflictsVM.ConflictCode;
        oWarning.ConflictType = oItemConflictsVM.ConflictType;
        oWarning.WarningMessage = sWarMsg;
        oWarning.WarningBehaviourType = oItemConflictsVM.WarningBehaviourType;
        oWarning.AcknowledgeStatus = oItemConflictsVM.AcknowledgeStatus
          ? 'Acknowledged'
          : 'UnAcknowledged';
        oWarning.PrescriberComments =
          oItemConflictsVM.PrescriberReason != null &&
          !String.IsNullOrEmpty(oItemConflictsVM.PrescriberReason.Value)
            ? oItemConflictsVM.PrescriberReason.DisplayText
            : String.Empty;
        oWarning.AuthroiserComments =
          oItemConflictsVM.AuthoriserReason != null &&
          !String.IsNullOrEmpty(oItemConflictsVM.AuthoriserReason.Value)
            ? oItemConflictsVM.AuthoriserReason.DisplayText
            : String.Empty;
        oWarning.ClinicallVeriferComments =
          oItemConflictsVM.ClinicalVerfierReason != null &&
          !String.IsNullOrEmpty(oItemConflictsVM.ClinicalVerfierReason.Value) &&
          !String.Equals(
            oItemConflictsVM.ClinicalVerfierReason.Value,
            CConstants.SelectReason,
            StringComparison.InvariantCultureIgnoreCase
          )
            ? oItemConflictsVM.ClinicalVerfierReason.DisplayText
            : String.Empty;
        oWarning.UniqueMCRowID = oItemConflictsVM.UniqueMCRowId;
        if (
          String.Equals(oItemConflictsVM.WarningType, 'Warning') &&
          !String.IsNullOrEmpty(oItemConflictsVM.WarningSubType) &&
          !String.Equals(
            oItemConflictsVM.WarningSubType,
            CConstants.sAbsolute
          ) &&
          !String.Equals(oItemConflictsVM.WarningSubType, CConstants.sGeneric)
        ) {
          oWarning.WarningSubType = oItemConflictsVM.WarningSubType;
        }
        prsItem.Warning.Add(oWarning);
      });
    }
    prsItem.DRCConflict = null;
    if (
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.PresItemDRCVM != null &&
      oItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
      oItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count > 0
    ) {
      prsItem.DRCConflict =
        new ObservableCollection<IPPMAManagePrescSer.DRCConflict>();
      let tmpDRCConflict: ObservableCollection<IPPMAManagePrescSer.DRCConflict> =
        new ObservableCollection<IPPMAManagePrescSer.DRCConflict>();
      this.FillDRCRequest(
        oItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM,
        oItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason,
        oItemVM.FormViewerDetails.PresItemDRCVM.DRCComments,
        oItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge,
        oItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType,
        false,
        (o) => {
          tmpDRCConflict = o;
        }
      );
      prsItem.DRCConflict = tmpDRCConflict;
    } else {
      if (
        String.Equals(
          oItemVM.OperationMode,
          'UA',
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        prsItem.DRCConflict =
          new ObservableCollection<IPPMAManagePrescSer.DRCConflict>();
        let oDRCConflict: IPPMAManagePrescSer.DRCConflict =
          new IPPMAManagePrescSer.DRCConflict();
        oDRCConflict.ConflictDetails =
          new ObservableCollection<IPPMAManagePrescSer.DRCConflictDetails>();
        let oDRCConflictDetail: IPPMAManagePrescSer.DRCConflictDetails =
          new IPPMAManagePrescSer.DRCConflictDetails();
        if (
          oItemVM != null &&
          oItemVM.FormViewerDetails != null &&
          oItemVM.FormViewerDetails.PresItemDRCVM != null
        ) {
          if (
            oItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason != null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value
            )
          ) {
            oDRCConflictDetail.AcknowledgeReason =
              oItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value;
          }
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.PresItemDRCVM.DRCComments
            )
          ) {
            oDRCConflictDetail.Comments =
              oItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
          }
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType
            )
          )
            oDRCConflictDetail.BehaviourType =
              oItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType;
          oDRCConflict.ConflictDetails.Add(oDRCConflictDetail);
        }
        if (!String.IsNullOrEmpty(oDRCConflictDetail.AcknowledgeReason)) {
          prsItem.DRCConflict.Add(oDRCConflict);
        }
      }
    }
    if (
      PatientContext.ClerkFormViewDefaultBehavior ==
      ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      prsItem.ClerkFormViewDefaultCode =
        PatientContext.ClerkFormViewDefaultBehavior.ToString();
    }
    if (
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.MulticomponentDetails != null &&
      oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo !=
        null &&
      oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count > 0
    ) {
      prsItem.MultiComponentDetails =
        new ObservableCollection<IPPMAManagePrescSer.IPPMCPresctiptionItem>();
      let nPresCount: number =
        oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count;
      for (let ncount: number = 0; ncount < nPresCount; ncount++) {
        let objMulti: IPPMAManagePrescSer.IPPMCPresctiptionItem =
          new IPPMAManagePrescSer.IPPMCPresctiptionItem();
        objMulti.ComponentName =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].ComponentName;
        objMulti.IdentifyingOID =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].IdentifyingOID;
        objMulti.IdentifyingType =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].IdentifyingType;
        objMulti.Quantity =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].Quantity;
        objMulti.QuantityUOM =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].QuantityUOM;
        objMulti.IsUpto =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].IsUpto;
        objMulti.IsNonFormulary =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].IsNonFormulary;
        objMulti.isEditable =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].isEditable;
        objMulti.isQtyEditable =
          oItemVM.formViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].isQtyEditable;
        objMulti.isQtyUOMEditable =
          oItemVM.formViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].isQtyUOMEditable;
        objMulti.IsDisableConflicts =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].IsDisableConflicts;
        objMulti.DisplayOrder =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].DisplayOrder;
        objMulti.PrescribableItemListOID =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].PrescribableItemListOID;
        objMulti.UniqueMCRowID =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].UniqueMCRowID;
        objMulti.ConflictsExist =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].ConflictsExist;
        objMulti.Nonformularyreason =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].Nonformularyreason;
        objMulti.OtherNonformularyreason =
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].OtherNonformularyreason;
        if (
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].MCUOMValue != null
        )
          objMulti.QuantityUOMOID = Convert.ToInt64(
            oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              ncount
            ].MCUOMValue.Value
          );
        else if (
          oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
            ncount
          ].QuantityUOMOID > 0
        )
          objMulti.QuantityUOMOID =
            oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              ncount
            ].QuantityUOMOID;
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              ncount
            ].VMVPLorenzoID
          )
        ) {
          objMulti.VMVPLorenzoID =
            oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
              ncount
            ].VMVPLorenzoID;
        }
        if (
          oItemVM.FormViewerDetails.TechValidateDetails != null &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems != null &&
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0] != null
        ) {
          if (
            oItemVM.FormViewerDetails.TechValidateDetails
              .PresTechValidatedItems[0].PresTechValidatedItemsChild != null &&
            oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild.Count >
              0
          ) {
            let oPrescItem: IPPMAManagePrescSer.TechnicalValidationInfo;
            for (
              let j: number = 0;
              j <
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild.Count;
              j++
            ) {
              if (
                oItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                  .UniqueMCRowId ==
                  oItemVM.FormViewerDetails.MulticomponentDetails
                    .oMCItemBasicInfo[ncount].UniqueMCRowID &&
                (!String.Equals(
                  oItemVM.FormViewerDetails.TechValidateDetails
                    .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                    .SelectedSupplyreq.Value,
                  Resource.TechValidate.Empty,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                  (oItemVM.FormViewerDetails.TechValidateDetails
                    .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                    .FormViewerDetails.BasicDetails.SelectedsupplyInstruction !=
                    null &&
                    oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild[
                      j
                    ].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count >
                      0) ||
                  !String.IsNullOrEmpty(
                    oItemVM.FormViewerDetails.TechValidateDetails
                      .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                      .FormViewerDetails.BasicDetails.Supplycomments
                  ) ||
                  oItemVM.FormViewerDetails.TechValidateDetails
                    .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                    .FormViewerDetails.BasicDetails.EditedGridID == 1 ||
                  DateTime.NotEquals(oItemVM.FormViewerDetails.TechValidateDetails
                    .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                    .NextSupplyDttm, DateTime.MinValue) ||
                  (oItemVM.FormViewerDetails.TechValidateDetails
                    .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                    .FormViewerDetails.TechValidateDetails != null &&
                    oItemVM.FormViewerDetails.TechValidateDetails
                      .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                      .FormViewerDetails.TechValidateDetails
                      .TechValidatedItems != null &&
                    oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild[
                      j
                    ].FormViewerDetails.TechValidateDetails.TechValidatedItems.Count >
                      0))
              ) {
                oPrescItem = new IPPMAManagePrescSer.TechnicalValidationInfo();
                if (
                  oItemVM.FormViewerDetails.TechValidateDetails
                    .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                    .FormViewerDetails.BasicDetails.TechValSupplyInst != null
                ) {
                  oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild[
                    j
                  ].FormViewerDetails.BasicDetails.IsDoseCombDefTech = '0';
                  oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild[
                    j
                  ].FormViewerDetails.BasicDetails.TecValOperationMode = 'N';
                }
                oPrescItem =
                  oItemVM.FormViewerDetails.TechValidateDetails.GetTechValidateChildItems(
                    oItemVM.FormViewerDetails.TechValidateDetails
                      .PresTechValidatedItems[0].PresTechValidatedItemsChild[j],
                    'MCIChild',
                    '',
                    null,
                    0,
                    objMulti.IdentifyingOID
                  );
                if (
                  oItemVM.FormViewerDetails.BasicDetails
                    .ReasonforModification != null &&
                  !String.IsNullOrEmpty(
                    oItemVM.FormViewerDetails.BasicDetails.ReasonforModification
                      .Value
                  ) &&
                  oItemVM.ActionCode == ActivityTypes.Amend
                ) {
                  if (
                    oPrescItem.TechValidatedItems != null &&
                    oPrescItem.TechValidatedItems[0] != null
                  ) {
                    if (
                      String.Compare(
                        oPrescItem.TechValidatedItems[0].OperationMode,
                        'D',
                        StringComparison.CurrentCultureIgnoreCase
                      ) == 0
                    )
                      oPrescItem.TechValidatedItems[0].OperationMode = 'D';
                    else oPrescItem.TechValidatedItems[0].OperationMode = 'N';
                  }
                }
                if (
                  oItemVM.FormViewerDetails.TechValidateDetails
                    .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                    .FormViewerDetails.TechValidateDetails != null
                ) {
                  oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    ncount
                  ].TechValidateDetails =
                    new ObservableCollection<IPPMAManagePrescSer.TechnicalValidationInfo>();
                  oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    ncount
                  ].TechValidateDetails.Add(oPrescItem);
                  objMulti.TechValidateDetails =
                    oItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                      ncount
                    ].TechValidateDetails;
                  break;
                }
              }
            }
            if (
              oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild.Any(
                (x) =>
                  (x.FormViewerDetails != null &&
                    x.FormViewerDetails.BasicDetails != null &&
                    x.FormViewerDetails.BasicDetails.IsSupplyinstrChanged) ||
                  (x.FormViewerDetails.TechValidateDetails != null &&
                    x.FormViewerDetails.TechValidateDetails
                      .TechValidatedItems != null &&
                    x.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count >
                      0)
              )
            ) {
              prsItem.BasicProperties.IsChildSupplyInstChanged = true;
            } else {
              prsItem.BasicProperties.IsChildSupplyInstChanged = false;
            }
          }
        }
        prsItem.MultiComponentDetails.Add(objMulti);
      }
    } else if (
      oItemVM.FormViewerDetails.BasicDetails.ReasonforModification != null &&
      String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.ReasonforModification.Value
      ) &&
      oItemVM.ActionCode == ActivityTypes.Amend &&
      String.Equals(
        oItemVM.ItemSubType,
        CConstants.SUBTYPE,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      if (
        oItemVM.FormViewerDetails.TechValidateDetails != null &&
        oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems !=
          null &&
        oItemVM.FormViewerDetails.TechValidateDetails
          .PresTechValidatedItems[0] != null
      ) {
        if (
          oItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0].PresTechValidatedItemsChild != null &&
          oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild.Count >
            0
        ) {
          let oPrescItem: IPPMAManagePrescSer.TechnicalValidationInfo;
          let idOID: number = 0;
          for (
            let j: number = 0;
            j <
            oItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild.Count;
            j++
          ) {
            oPrescItem = new IPPMAManagePrescSer.TechnicalValidationInfo();
            if (
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                .FormViewerDetails.BasicDetails.IdentifyingOID > 0
            )
              idOID =
                oItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                  .FormViewerDetails.BasicDetails.IdentifyingOID;
            else idOID = 0;
            if (
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                .EditedGridID == 1 ||
              oItemVM.FormViewerDetails.TechValidateDetails
                .PresTechValidatedItems[0].PresTechValidatedItemsChild[j]
                .FormViewerDetails.BasicDetails.EditedGridID == 1
            ) {
              oPrescItem =
                oItemVM.FormViewerDetails.TechValidateDetails.GetTechValidateChildItems(
                  oItemVM.FormViewerDetails.TechValidateDetails
                    .PresTechValidatedItems[0].PresTechValidatedItemsChild[j],
                  'MCIChild',
                  'ND',
                  prsItem.TechValidateDetails,
                  j,
                  idOID
                );
              prsItem.TechValidateDetails.Add(oPrescItem);
            }
          }
        }
      }
    }
    if (isAuthClinicalVerifyLaunched) {
      this.FillPatientPrescription(prsItem);
      if (oItemVM.OnBehalfOf != null) {
        prsItem.ActionPerformed.VerifyOnBehalf =
          new IPPMAManagePrescSer.OnBehalfInfo();
        prsItem.ActionPerformed.VerifyOnBehalf.NotifyFlag = CConstants.cONE;
        prsItem.ActionPerformed.VerifyOnBehalf.OnBehalfOfUser =
          new IPPMAManagePrescSer.ObjectInfo();
        prsItem.ActionPerformed.VerifyOnBehalf.OnBehalfOfUser.OID =
          String.IsNullOrEmpty(oItemVM.OnBehalfOf.Value)
            ? 0
            : Convert.ToInt64(oItemVM.OnBehalfOf.Value);
        if (oItemVM.OnBehalfOfReason != null)
          prsItem.ActionPerformed.VerifyOnBehalf.OnBehalfOfUserReason =
            String.IsNullOrEmpty(oItemVM.OnBehalfOfReason.Value)
              ? String.Empty
              : oItemVM.OnBehalfOfReason.Value;
        if (oItemVM.CommunicationMode != null)
          prsItem.ActionPerformed.VerifyOnBehalf.CommunicationMode =
            String.IsNullOrEmpty(oItemVM.CommunicationMode.Value)
              ? String.Empty
              : oItemVM.CommunicationMode.Value;
      } else {
        prsItem.ActionPerformed.VerifyOnBehalf =
          new IPPMAManagePrescSer.OnBehalfInfo();
        prsItem.ActionPerformed.VerifyOnBehalf.NotifyFlag = CConstants.cZERO;
      }
      prsItem.IdentifyingOID =
        oItemVM.FormViewerDetails.BasicDetails.IdentifyingOID;
      prsItem.PrescriptionBasicData.PrescriptionType = oItemVM.PrescriptionType;
      prsItem.PrescriptionItemNumber = oItemVM.PrescriptionItemNumber;
      prsItem.PrescriptionNumber = oItemVM.PrescriptionNumber;
      prsItem.StatusModifedDTTM = ServerDatetime;
      if (oItemVM.PrescriberDetails != null) {
        prsItem.PrescriberDetails = ObjectHelper.CreateObject(
          new IPPMAManagePrescSer.ObjectInfo(),
          {
            Code: AppContextInfo.RoleProfileName,
            LastModifiedAt: oItemVM.PrescriberDetails.LastModifiedAt,
            Name: oItemVM.PrescriberDetails.Name,
            OID: oItemVM.PrescriberDetails.OID,
            OperationMode: oItemVM.PrescriberDetails.OperationMode,
            RoleProfileOID: oItemVM.PrescriberDetails.RoleProfileOID,
          }
        );
      }
    } else if (
      prsItem != null &&
      prsItem.ActionPerformed != null &&
      oItemVM != null &&
      oItemVM.FormViewerDetails != null &&
      oItemVM.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(oItemVM.OperationMode) &&
      String.Equals(
        oItemVM.OperationMode,
        'UA',
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      prsItem.ActionPerformed.Comments = String.IsNullOrEmpty(
        oItemVM.FormViewerDetails.BasicDetails.VerificationComments
      )
        ? String.Empty
        : oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
    }
    if (
      oItemVM.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled &&
      oItemVM.FormViewerDetails.BasicDetails.RecordAdmin != null
    ) {
      prsItem.AdminDetails =
        new IPPMAManagePrescSer.PrescriptionItemAdminDetails();
      prsItem.AdminDetails.DoseAdministeredUOM = new IPPMAManagePrescSer.UOM();
      if (
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Dose
        )
      )
        prsItem.AdminDetails.DoseAdministeredUOM.UOMName =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Dose;
      if (
        oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM !=
        null
      ) {
        prsItem.AdminDetails.DoseAdministeredUOM.UOMId = Convert.ToInt64(
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM
            .Value
        );
        if (
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM
            .Tag != null
        )
          prsItem.AdminDetails.DoseAdministeredUOM.UOMCode =
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.SelectedDoseUoM.Tag.ToString();
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Route != null &&
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Route.Value
        )
      ) {
        prsItem.AdminDetails.RouteOID = Convert.ToInt64(
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Route.Value
        );
      }
      if (oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Dose != null)
        prsItem.AdminDetails.DoseAdministered =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Dose;
      if (
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.BatchNo
        )
      )
        prsItem.AdminDetails.BatchNumber =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.BatchNo;
      if (
        DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.ExpiryDate,
        DateTime.MinValue)
      )
        prsItem.AdminDetails.ExpiryDate =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.ExpiryDate;
      if (
        oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.WitnessBy != null &&
        Convert.ToInt64(
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.WitnessByOID
        ) > 0
      ) {
        prsItem.AdminDetails.WitnessedBy = ObjectHelper.CreateObject(
          new IPPMAManagePrescSer.ObjectInfo(),
          {
            OID: Convert.ToInt64(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.WitnessByOID
            ),
            Code: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.WitnessBy,
          }
        );
      }
      if (
        oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
          .IsNoWitnessAvialable != null
      )
        prsItem.AdminDetails.IsNoWitnessAvailable =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.IsNoWitnessAvialable;
      if (
        DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate,
          DateTime.MinValue) &&
        DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime,
          DateTime.MinValue)
      ) {
        prsItem.AdminDetails.AdministredDate =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate.DateTime.AddTime(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime
          );
        prsItem.AdminDetails.SlotScheduleDate =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate.DateTime.AddTime(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.SlotScheduleTime
          );
      } else
        prsItem.AdminDetails.AdministredDate =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate;
      prsItem.AdminDetails.IsDuringHomeLeave =
        oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.IsDuringHomeLeave;
      if (
        oItemVM.PrescriberDetails != null &&
        oItemVM.PrescriberDetails.OID > 0
      ) {
        prsItem.AdminDetails.AdministeredBy = ObjectHelper.CreateObject(
          new IPPMAManagePrescSer.ObjectInfo(),
          {
            OID: oItemVM.PrescriberDetails.OID,
            Code: oItemVM.PrescriberDetails.Code,
          }
        );
      }
      if (
        !String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdminComments
        )
      ) {
        prsItem.AdminDetails.Comments =
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdminComments;
      }
      if (
        (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          (String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypesCode.FLUID,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0)) ||
        (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.PCA,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0) ||
        (oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.INTERMITTENT,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0) ||
        (!String.IsNullOrEmpty(
          oItemVM.FormViewerDetails.BasicDetails.itemSubType
        ) &&
          (String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.itemSubType,
            'CC_MEDGAS',
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.itemSubType,
              '',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0))
      ) {
        let InfTypeItemSubTypeCode: string = String.Empty;
        if (
          oItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          )
        ) {
          InfTypeItemSubTypeCode =
            oItemVM.FormViewerDetails.BasicDetails.InfusionType.Value;
        } else if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.itemSubType
          ) &&
          (String.Compare(
            oItemVM.FormViewerDetails.BasicDetails.itemSubType,
            'CC_MEDGAS',
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
            String.Compare(
              oItemVM.FormViewerDetails.BasicDetails.itemSubType,
              '',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0)
        ) {
          InfTypeItemSubTypeCode =
            oItemVM.FormViewerDetails.BasicDetails.itemSubType;
        }
        if (
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin != null &&
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Route != null &&
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Route.Tag !=
            null &&
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Route.Tag.ToString() ==
            '0' &&
          String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.itemSubType
          )
        ) {
          InfTypeItemSubTypeCode = String.Empty;
        }
        prsItem.AdminDetails.InfuationType = InfTypeItemSubTypeCode;
        prsItem.AdminDetails.MedicationAction = 'CC_BEGUN';
        prsItem.AdminDetails.BagSequence = 1;
        if (
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDevice !=
            null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDevice
              .DisplayText
          )
        ) {
          prsItem.AdminDetails.DeliveryDevice =
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDevice.DisplayText;
        } else if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .DeliveryDeviceText
          )
        ) {
          prsItem.AdminDetails.DeliveryDevice =
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DeliveryDeviceText;
        }
        if (
          String.Compare(
            InfTypeItemSubTypeCode,
            InfusionTypesCode.CONTINUOUS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            InfTypeItemSubTypeCode,
            InfusionTypesCode.SINGLEDOSEVOLUME,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            InfTypeItemSubTypeCode,
            InfusionTypesCode.FLUID,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            InfTypeItemSubTypeCode,
            InfusionTypesCode.PCA,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            InfTypeItemSubTypeCode,
            InfusionTypesCode.INTERMITTENT,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .isBolusIntermittent
          )
            prsItem.AdminDetails.isInfusionBolusIntermittent = true;
          else prsItem.AdminDetails.isInfusionBolusIntermittent = false;
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.BagVolume
            )
          ) {
            prsItem.AdminDetails.BagVolume =
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.BagVolume;
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.BagVolumeUOM !=
              null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.BagVolumeUOM
                .Value
            )
          ) {
            prsItem.AdminDetails.BagVolumeUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                OID: Convert.ToInt64(
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .BagVolumeUOM.Value
                ),
                Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .BagVolumeUOM.DisplayText,
                Code: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.BagVolumeUOM.Tag.ToString(),
              }
            );
          }
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .InfusionPeriod
            )
          ) {
            prsItem.AdminDetails.InfusionPeriod =
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod;
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionPeriodUom != null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .InfusionPeriodUom.Value
            )
          ) {
            prsItem.AdminDetails.InfusionPeriodUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                OID: Convert.ToInt64(
                  oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .InfusionPeriodUom.Value
                ),
                Name: oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriodUom.DisplayText,
                Code: oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom.Tag.ToString(),
              }
            );
          }
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
            )
          ) {
            prsItem.AdminDetails.InfusionRate =
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate;
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateNumeratorUom != null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateNumeratorUom.Value
            )
          ) {
            prsItem.AdminDetails.InfusionRateUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                OID: Convert.ToInt64(
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateNumeratorUom.Value
                ),
                Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .InfRateNumeratorUom.DisplayText,
                Code:
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateNumeratorUom.Tag != null
                    ? oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfRateNumeratorUom.Tag.ToString()
                    : '',
              }
            );
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .InfRateDinominatorUom != null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                .InfRateDinominatorUom.Value
            )
          ) {
            prsItem.AdminDetails.InfusionRatePerUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                OID: Convert.ToInt64(
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .InfRateDinominatorUom.Value
                ),
                Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .InfRateDinominatorUom.DisplayText,
                Code: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfRateDinominatorUom.Tag.ToString(),
              }
            );
          }
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DripRate
            )
          ) {
            prsItem.AdminDetails.DripRate =
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DripRate;
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DripRateUOM !=
              null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DripRateUOM
                .Value
            )
          ) {
            prsItem.AdminDetails.DripRateUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                OID: Convert.ToInt64(
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DripRateUOM
                    .Value
                ),
                Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .DripRateUOM.DisplayText,
              }
            );
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DripRateDenUOM !=
              null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.DripRateDenUOM
                .Value
            )
          ) {
            prsItem.AdminDetails.DripRatePerUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                OID: Convert.ToInt64(
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .DripRateDenUOM.Value
                ),
                Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .DripRateDenUOM.DisplayText,
              }
            );
          }
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Lumen
            )
          ) {
            prsItem.AdminDetails.Lumen =
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Lumen;
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Site != null &&
            Number.TryParse(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Site.Value,
              (o) => {
                lSiteOID = o;
              }
            )
          ) {
            prsItem.AdminDetails.Site = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Site
                  .DisplayText,
                OID: lSiteOID,
              }
            );
          }
        }
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .ConcentrationStrength
          )
        ) {
          prsItem.AdminDetails.ConcentrationStrength =
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationStrength;
        }
        if (
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
            .ConcentrationStrengthUOM != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .ConcentrationStrengthUOM.Value
          )
        ) {
          prsItem.AdminDetails.ConcentrationStrengthUOM =
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
              OID: Convert.ToInt64(
                oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .ConcentrationStrengthUOM.Value
              ),
              Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                .ConcentrationStrengthUOM.DisplayText,
            });
        }
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .ConcentrationVolume
          )
        ) {
          prsItem.AdminDetails.ConcentrationVolume =
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.ConcentrationVolume;
        }
        if (
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
            .ConcentrationVolumeUOM != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .ConcentrationVolumeUOM.Value
          )
        ) {
          prsItem.AdminDetails.ConcentrationVolumeUOM =
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
              OID: Convert.ToInt64(
                oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .ConcentrationVolumeUOM.Value
              ),
              Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                .ConcentrationVolumeUOM.DisplayText,
            });
        }
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .InfusionPeriodMedAdmin
          )
        ) {
          let nInfusionPeriodMedAdmin: number = 0;
          Number.TryParse(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .InfusionPeriodMedAdmin,
            (o) => {
              nInfusionPeriodMedAdmin = o;
            }
          );
          prsItem.AdminDetails.InfusionPeriodforMedAdmin =
            nInfusionPeriodMedAdmin;
        }
        if (
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
            .InfusionPeriodMedAdminUOM != null &&
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .InfusionPeriodMedAdminUOM.Value
          )
        ) {
          prsItem.AdminDetails.InfusionPeriodUOMforMedAdmin =
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
              OID: Convert.ToInt64(
                oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .InfusionPeriodMedAdminUOM.Value
              ),
              Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                .InfusionPeriodMedAdminUOM.DisplayText,
            });
        }
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose
          )
        ) {
          prsItem.AdminDetails.InfusionDose =
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose;
        }
        if (
          !String.IsNullOrEmpty(
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose
          ) &&
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
            .InfusionDoseNumeratorUOMID > 0 &&
          oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
            .InfusionDoseDenominatorUOMID > 0
        ) {
          let aInfDose: string[] =
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfusionDose.Split(
              '/'
            );
          if (aInfDose.length > 1) {
            prsItem.AdminDetails.InfusionDoseUOMNumerator =
              ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
                OID: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .InfusionDoseNumeratorUOMID,
                Name: aInfDose[0],
              });
            prsItem.AdminDetails.InfusionDoseUOMDenominator =
              ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
                OID: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .InfusionDoseDenominatorUOMID,
                Name: aInfDose[1],
              });
          }
        }
        if (
          String.Equals(
            InfTypeItemSubTypeCode,
            CConstants.SUBTYPE_GAS,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Humidification !=
            null
          ) {
            prsItem.AdminDetails.HumidCode =
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Humidification.Value;
          }
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate
            )
          ) {
            prsItem.AdminDetails.InfusionRate =
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.InfusionRate;
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateNumUom !=
              null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateNumUom
                .Value
            )
          ) {
            prsItem.AdminDetails.InfusionRateUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                OID: Convert.ToInt64(
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .FlowrateNumUom.Value
                ),
                Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .FlowrateNumUom.DisplayText,
                Code:
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .FlowrateNumUom.Tag != null
                    ? oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateNumUom.Tag.ToString()
                    : '',
              }
            );
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateDenUom !=
              null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateDenUom
                .Value
            )
          ) {
            prsItem.AdminDetails.InfusionRatePerUOM = ObjectHelper.CreateObject(
              new IPPMAManagePrescSer.ObjectInfo(),
              {
                OID: Convert.ToInt64(
                  oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .FlowrateDenUom.Value
                ),
                Name: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                  .FlowrateDenUom.DisplayText,
                Code: oItemVM.FormViewerDetails.BasicDetails.RecordAdmin.FlowrateDenUom.Tag.ToString(),
              }
            );
          }
        }
      }
    }
    prsItem.DrugSpecificProperties.IsParacetamolIngredient =
      ObjectHelper.HasValue(oItemVM.IsParacetamolIngredient)
        ? oItemVM.IsParacetamolIngredient.Value
        : false;
    if (
      oItemVM.ActionCode == ActivityTypes.Amend &&
      DateTime.NotEquals(oItemVM.FormViewerDetails.BasicDetails.RecordedadminDTTM,
        DateTime.MinValue)
    ) {
      prsItem.Recordadmindatetime =
        oItemVM.FormViewerDetails.BasicDetails.RecordedadminDTTM;
    }
    if (prsItem.BasicProperties != null) {
      prsItem.BasicProperties.IsAlreadyClinicallyVerified =
        oItemVM.IsAlreadyClinicallyVerified;
    }
    return prsItem;
  }
  private FillDRCErrorDetails(
    oDRCConflictDetail: ObservableCollection<DRCConflictDetail>,
    DRCReason: CListItem,
    DRCComments: string,
    IsAckDRCConflict: boolean,
    BehaviourTypeCode: string
  ): ObservableCollection<IPPMAManagePrescSer.DRCConflictDetails> {
    let DRCErrorDetails: ObservableCollection<IPPMAManagePrescSer.DRCConflictDetails> =
      new ObservableCollection<IPPMAManagePrescSer.DRCConflictDetails>();
    oDRCConflictDetail.forEach((objDRCConflictDetail) => {
      let objDRCConflictDetails: IPPMAManagePrescSer.DRCConflictDetails =
        new IPPMAManagePrescSer.DRCConflictDetails();
      if (!String.IsNullOrEmpty(objDRCConflictDetail.ERRORCode))
        objDRCConflictDetails.ErrorCode = objDRCConflictDetail.ERRORCode;
      if (!String.IsNullOrEmpty(objDRCConflictDetail.ErrorMessage))
        objDRCConflictDetails.ErrorMessage = objDRCConflictDetail.ErrorMessage;
      if (DRCReason != null && !String.IsNullOrEmpty(DRCReason.Value))
        objDRCConflictDetails.AcknowledgeReason = DRCReason.Value;
      if (!String.IsNullOrEmpty(DRCComments)) {
        objDRCConflictDetails.Comments = DRCComments;
      }
      if (!String.IsNullOrEmpty(BehaviourTypeCode)) {
        objDRCConflictDetails.BehaviourType = BehaviourTypeCode;
      }
      objDRCConflictDetails.IsChecked = IsAckDRCConflict ? '1' : '0';
      if (!String.IsNullOrEmpty(objDRCConflictDetails.ErrorCode))
        DRCErrorDetails.Add(objDRCConflictDetails);
    });
    return DRCErrorDetails;
  }
  public objServiceProxy_SubmitClerkMedDrugsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.SubmitClerkMedDrugsCompletedEventArgs
  ): void {
    let oTmpClerk: IPPMAManagePrescSer.SubmitClerkMedDrugsCompletedEventArgs =
      ObjectHelper.CreateType<IPPMAManagePrescSer.SubmitClerkMedDrugsCompletedEventArgs>(
        e,
        IPPMAManagePrescSer.SubmitClerkMedDrugsCompletedEventArgs
      );
    if (oTmpClerk != null) {
      let oCResMsgSubmitDrugs: IPPMAManagePrescSer.CResMsgSubmitDrugs =
        new IPPMAManagePrescSer.CResMsgSubmitDrugs();
      oCResMsgSubmitDrugs.objPrescResponse = oTmpClerk.Result?.objPrescResponse;
      oCResMsgSubmitDrugs.oContextInformation =
        oTmpClerk.Result.oContextInformation;
      let tmpObj: Object[] = new Array(1);
      tmpObj[0] = oCResMsgSubmitDrugs;
      //Not Required for LHS. To be Re-Visited.
      
            let oTemp: IPPMAManagePrescSer.SubmitDrugsCompletedEventArgs = new IPPMAManagePrescSer.SubmitDrugsCompletedEventArgs();
            oTemp.Result = oCResMsgSubmitDrugs;
            oTemp.Error = oTmpClerk.Error;
            this.objServiceProxy_SubmitDrugsCompleted(this, oTemp);
            
    }
  }
  public async objServiceProxy_SubmitDrugsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.SubmitDrugsCompletedEventArgs
  ): Promise<void> {
    this.bFinalClose = false;
    this.sPrescriptionItemOIDsPrn = String.Empty;
    let sPrescriptionOID: string = String.Empty;
    let sPrescriptionItemOID: string = String.Empty;
    let _SetDIConsentStatus: boolean = false;
    
    //R/f DF PAN 215
    this.SubmitDrugsDone = true;

    let _ErrorID: number = 80000001;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:SubmitDrugsCompleted()';
    if (e.Error == null) {
      try {
        let oRes: IPPMAManagePrescSer.CResMsgSubmitDrugs = e.Result;
        this.WizardContext['EncounterOID'] =
          PatientContext.EncounterOid.ToString();
        this.WizardContext['EncounterValueTypeCode'] =
          PatientContext.EncounterType;
        this.SetWizardContextDataForRecAllergy();
        if (
          oRes != null &&
          oRes.oContextInformation != null &&
          oRes.oContextInformation.Errors != null &&
          oRes.oContextInformation.Errors.Count > 0 &&
          oRes.oContextInformation.Errors[0] != null
        ) {
          let oMsgBox: iMessageBox = new iMessageBox();
          oMsgBox.MessageBoxClose = (s, e) => {
            this.oMsgBox_MessageBoxClose(s, e);
          };
          oMsgBox.Title = 'Error - Lorenzo';
          oMsgBox.MessageButton = MessageBoxButton.OK;
          oMsgBox.IconType = MessageBoxType.Critical;
          if (oRes.oContextInformation.Errors[0].ErrorID == 900025) {
            oMsgBox.Message = Resource.MedicationErrors._900025_Msg;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 123451) {
            oMsgBox.Height = 170;
            oMsgBox.Width = 350;
            oMsgBox.Message = Resource.MedicationErrors._123451_Msg;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 123452) {
            oMsgBox.Height = 170;
            oMsgBox.Width = 350;
            oMsgBox.Message =
              Resource.MedicationErrors.CancelledEncounter1_Msg +
              Environment.NewLine +
              Resource.MedicationErrors.CancelledEncounter2_Msg;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 65001) {
            oMsgBox.Height = 140;
            oMsgBox.Width = 350;
            oMsgBox.Message = MedicationErrors.IDConfig_NO_ID_CONFIG_EXITS;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 65002) {
            oMsgBox.Height = 140;
            oMsgBox.Width = 350;
            oMsgBox.Message = MedicationErrors.IDConfig_NO_ACTIVE_ID_EXITS;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 65003) {
            oMsgBox.Height = 140;
            oMsgBox.Width = 350;
            oMsgBox.Message = MedicationErrors.IDConfig_ERROR_IN_ID_GENERATION;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 65004) {
            oMsgBox.Height = 140;
            oMsgBox.Width = 350;
            oMsgBox.Message =
              MedicationErrors.IDConfig_ID_GENERATION_OVERFLOWED;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 65011) {
            oMsgBox.Height = 140;
            oMsgBox.Width = 350;
            oMsgBox.Message = MedicationErrors.IDConfig_NO_CONFIG_FOUND;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 310015) {
            oMsgBox.Message = MedicationErrors.DaysOfWeeks_NotExist_Msg;
          } else if (oRes.oContextInformation.Errors[0].ErrorID == 30902020) {
            oMsgBox.Message = '** System Error ** \r\n ** Prescription not saved ** \r\n ** RE-PRESCRIBE **';
          }
          else if(oRes.oContextInformation.Errors[0].ErrorID == 221)
          {

               let oMsgBox1: iMessageBox = new iMessageBox();
              oMsgBox1.MessageBoxClose = (s, e) => {
                this.oMsgBox1_MessageBoxClose(s, e);
              };
            oMsgBox1.Title = 'Error - Lorenzo';
            oMsgBox1.MessageButton = MessageBoxButton.OK;
            oMsgBox1.IconType = MessageBoxType.Critical;
            this.SubmitDrugsDone = false;
            let sErrorInfo  =oRes.oContextInformation.Errors[0].Context.ToString() ;
            var sErrortext =sErrorInfo.Value;
            let parsedObject = JSON.parse(sErrortext);
          let nUniqueRowID = parsedObject.string;
            let oDoseMissingPresItems: PrescriptionItemVM =
            this.MedsResolve.Where(
              (item) =>
                !String.IsNullOrEmpty(item.UniqueRowID) && item.UniqueRowID == nUniqueRowID
            ).FirstOrDefault((item) => item) as PrescriptionItemVM;
            if(oDoseMissingPresItems !=null)
            {
              this.RowAfftedon221 = this.MedsResolve.IndexOf(oDoseMissingPresItems);
              oMsgBox1.Message =  "There is a problem with " + oDoseMissingPresItems.FormViewerDetails.BasicDetails.IdentifyingName + ". Please select and remove it, then save the other prescribed drugs, and then re-prescribe " + oDoseMissingPresItems.FormViewerDetails.BasicDetails.IdentifyingName + " in a new session.";
            }           
            oMsgBox1.Show();

          }
           else if (oRes.oContextInformation.Errors[0].ErrorID == -1) {
            //PAN 215 RR DF fix
            this.SubmitDrugsDone = false;
            if (this.SubmitDrugsRetryCount == 3)
            {
              this.SubmitDrugsDone = true;
              oMsgBox.Message = '** System Error ** \r\n ** Prescription not saved ** \r\n ** RE-PRESCRIBE **';
            }
            else
            {
              this.SubmitDrugs();
            }
          }
          else {
            this.SubmitDrugsDone = true;
            oMsgBox.Message = oRes.oContextInformation.Errors[0].Message;
          }
          if(this.SubmitDrugsDone)
          {
            oMsgBox.Show();
            ObjectHelper.stopScreenFreezeEvent(true);

          }
        } else {
          if (
            oRes != null &&
            oRes.objPrescResponse != null &&
            oRes.objPrescResponse.Count > 0 &&
            oRes.objPrescResponse[0] != null
          ) {
            let nPresCount: number = oRes.objPrescResponse.Count;
            for (let k: number = 0; k < nPresCount; k++) {
              sPrescriptionOID =
                oRes.objPrescResponse[k].PrescriptionOID.ToString();
              if (
                oRes.objPrescResponse[k].PresItemResponse != null &&
                oRes.objPrescResponse[k].PresItemResponse.Count > 0
              ) {
                let nPresItmCount: number =
                  oRes.objPrescResponse[k].PresItemResponse.Count;
                for (let j: number = 0; j < nPresItmCount; j++) {
                  if (
                    String.Compare(
                      oRes.objPrescResponse[k].PresItemResponse[j].Status,
                      CConstants.ONHOLD
                    ) != 0 &&
                    String.Compare(
                      oRes.objPrescResponse[k].PresItemResponse[j].Status,
                      CConstants.AWAITINGAUTHORISE
                    ) != 0
                  ) {
                    let sTempPresItm: string =
                      oRes.objPrescResponse[k].PresItemResponse[
                        j
                      ].PrescriptionItemOID.ToString();
                    this.sPrescriptionItemOIDsPrn += String.IsNullOrEmpty(
                      this.sPrescriptionItemOIDsPrn
                    )
                      ? sTempPresItm
                      : ',' + sTempPresItm;
                  }
                }
              }
            }
            if (oRes.objPrescResponse[0].PrescriptionOID != 0) {
              this.WizardContext['DIS_SUM'] =
                oRes.objPrescResponse[0].PrescriptionOID.ToString();
            } else {
              this.WizardContext['DIS_SUM'] = this.sPresOIDDisSum.ToString();
            }
            let oResolveUtility: csResolveUtility = new csResolveUtility();
            let sTypeExist: string;
            if (PatientContext.PrescriptionType == PrescriptionTypes.Discharge)
              await oResolveUtility.DischargeSummary(
                (o) => {
                  sTypeExist = o;
                },
                PatientContext.EncounterOid.ToString(),
                PatientContext.PatientOID.ToString()
              );
            else sTypeExist = 'false';
            this.WizardContext['TypeExist'] = sTypeExist;
            this.PrescriptionRes = oRes.objPrescResponse;
            if (
              String.IsNullOrEmpty(this.sPrescriptionItemOIDsPrn) &&
              PatientContext.PrescriptionType == PrescriptionTypes.Inpatient
            ) {
              super.OnFinishNow();
            } else {
              this.DocTemplatesPolicyType(sPrescriptionOID);
            }
            this.FlagSubmitCheck = true;
            this.bFinalClose = true;
            this.WizardContext['IsDoneDisCancel'] = 'True';
            this.WizardContext['EncounterOID'] =
              PatientContext.EncounterOid.ToString();
            this.WizardContext['EncounterValueTypeCode'] =
              PatientContext.EncounterType;
            this.WizardContext['PrescriptionID'] =
              this.sPrescriptionItemOIDsPrn;
          } else {
            this.WizardContext['DIS_SUM'] = String.Empty;
            this.FinishCA();
          }
        }
        if(this.SubmitDrugsDone)
        {
          if (this.CanLaunchForadminPrescription) {
            this.WizardContext['CanLaunchForadminPrescription'] = 'true';
            _SetDIConsentStatus = true;
          } else if (
            this.IsVisibleLaunchIP == Visibility.Visible &&
            PatientContext.PrescriptionType == PrescriptionTypes.Clerking
          ) {
            this.WizardContext['CanLaunchForadminPrescription'] = 'false';
          }
          if (this.IPLockCheck) {
            this.WizardContext['IPLockCheck'] = 'true';
          } else {
            this.WizardContext['IPLockCheck'] = 'false';
          }
          if (this.IsPatientHTWTUpdated) {
            this.WizardContext['IsPatientHTWTUpdated'] = '1';
          } else {
            this.WizardContext['IsPatientHTWTUpdated'] = '0';
          }
          if (this.CanLaunchClerkPrescription) {
            this.WizardContext['CanLaunchClerkingPrescription'] = 'true';
            _SetDIConsentStatus = true;
          } else {
            this.WizardContext['CanLaunchClerkingPrescription'] = 'false';
          }
          if (
            this.CanShownDIConsentPrmpt &&
            (_SetDIConsentStatus ||
              (ContextManager.Instance['sOrgMenucode'] != null &&
                (String.Equals(
                  ContextManager.Instance['sOrgMenucode'].ToString(),
                  CConstants.InpatientPrescribeMenuCode,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                  String.Equals(
                    ContextManager.Instance['sOrgMenucode'].ToString(),
                    CConstants.ForadminPrescribeMenuCode,
                    StringComparison.InvariantCultureIgnoreCase
                  ) ||
                  String.Equals(
                    ContextManager.Instance['sOrgMenucode'].ToString(),
                    PrescriptionTypes.ForAdministration,
                    StringComparison.InvariantCultureIgnoreCase
                  ))))
          ) {
            this.WizardContext['CanShownDIConPrmptInGPCTAB'] = 'true';
          } else {
            this.WizardContext['CanShownDIConPrmptInGPCTAB'] = 'false';
          }
          this.ContextPrep();
        } 
        } catch (ex: any) {
          this.SubmitDrugsDone = true;
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      this.SubmitDrugsDone = true;
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private LaunchPrescribeCareActivity(
    EncounterOid: string,
    EncounterType: string
  ): void {
    if (String.IsNullOrEmpty(QueryStringInfo.IsClinicalNote)) {
      let sMenuCode: string = String.Empty;
      let lockduration: number = MedicationConstants.CConstants.LockDuration;
      if (
        String.Compare(EncounterType, 'CC_INPAT') == 0 ||
        String.Compare(EncounterType, 'Inpatient') == 0
      ) {
        sMenuCode = 'MN_MEDINPATSL_P2';
      } else {
        sMenuCode = 'MN_MEDADMINISTRAT_P2';
      }
      let sQuery: string = '&MENUCODE=' + sMenuCode;
      sQuery += '&ENCID=' + EncounterOid;
      sQuery += '&ENCTYPE=' + EncounterType;
      sQuery += '&LaunchingCACode=' + CConstants.Clerking;
      let _LockedUserDetails: LockedUsersDetails;
      if (
        MedicationCommonBB.IsLockedByAnotherUser(sMenuCode, true, (o) => {
          _LockedUserDetails = o;
        })
      ) {
        let oMsgBox: iMessageBox = new iMessageBox();
        oMsgBox.MessageBoxClose = (s, e) => {
          this.oMsgBox_MessageBoxClose(s, e);
        };
        oMsgBox.Title = 'Information - Lorenzo';
        oMsgBox.Height = 160;
        oMsgBox.MessageButton = MessageBoxButton.OK;
        oMsgBox.IconType = MessageBoxType.Information;
        oMsgBox.Message = String.Format(
          Resource.MedicationForm.LockMsg,
          _LockedUserDetails.LockedUserName
        );
        oMsgBox.Show();
      } else {
        let sResult: string = ObjectHelper.CreateType<string>(
          HtmlPage.Window.Invoke(
            'CreatePessimisticLock',
            !String.IsNullOrEmpty(_LockedUserDetails.MedChartOID)
              ? Number.Parse(_LockedUserDetails.MedChartOID)
              : PatientContext.EncounterOid,
            _LockedUserDetails.LockKeyOfGivenMenuCode,
            lockduration
          ),
          'string'
        );
        //LaunchWizard(sMenuCode, sQuery); //Not Required for LHS. To be Re-Visited.
      }
    }
  }
  public CNSWizardContextSet(
    queryString: string,
    out1: (PrescDet: string) => void
  ): void {
    let PrescDet: string;

    PrescDet = String.Empty;
    let querySegments: string[] = queryString.Split('&');
    querySegments.forEach((segment) => {
      let parts: string[] = segment.Split('=');
      if (parts.length > 0) {
        let key: string = parts[0].Trim('?', ' ');
        let val: string = parts[1].Trim();
        this.WizardContext[key] = val;
        if (key == 'CNSMENUCODE') PrescDet = val;
      }
    });

    out1(PrescDet);
  }
  public async FinishCA() {
    this.IsFinishClicked = false;
    if (this.IsFinish) {
      let oReturn;
      //Not Required for LHS. To be Re-Visited.
      /*if (this.MaxNoOfPrescCounter == CConstants.MaxNoOfPrescriptions) {
                App.IgnoreCache();
            }*/
      
      Busyindicator.SetStatusIdle('FINISH');
      if (String.IsNullOrEmpty(QueryStringInfo.MedclerkPrompt))
        if (
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) != 0
        )
       
      oReturn = await PrescriptionHelper.PrintPrescription(this.WizardContext);

      QueryStringInfo.MedclerkPrompt = String.Empty;
      super.OnFinish(oReturn);
    } else if (this.IsFinishNow) {
      //Not Required for LHS. To be Re-Visited.
      /*
            if (this.MaxNoOfPrescCounter == CConstants.MaxNoOfPrescriptions) {
                App.IgnoreCache();
            }
            */
      
      if (String.IsNullOrEmpty(QueryStringInfo.MedclerkPrompt))
        if (
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) != 0
        )
          PrescriptionHelper.PrintPrescription(this.WizardContext);
      QueryStringInfo.MedclerkPrompt = String.Empty;
      super.OnFinishNow();
    }
  }
  submitPrint(): void {
    let sPrescriptionDetails: string = String.Empty;
    let sPrescriptionNVC: string = String.Empty;
    let sALTLOCAL: string = String.Empty;
    let PatientContextPresType: string = String.Empty;
    PatientContextPresType = PatientContext.PrescriptionType;
    if (this.PrinterPolicy == null || this.ConsolidatedPrinterPolicy == null) {
      this.IsPrint = false;
      this.IsConsolidatedPrint = false;
      this.Consolidatedtemplate = String.Empty;
      this.ConsolidatedtemplateName = String.Empty;
      this.DiscIsPrint = false;
      this.DiscIsConsolidatedPrint = false;
      this.DiscConsolidatedtemplate = String.Empty;
      this.DiscConsolidatedtemplateName = String.Empty;
      this.PrinterPolicy = String.Empty;
      this.ConsolidatedPrinterPolicy = String.Empty;
      this.DiscPrinterPolicy = String.Empty;
      this.DiscConsolidatedPrinterPolicy = String.Empty;
      if (
        ProfileData.PrintConfig != null &&
        (this.PrinterPolicy == null || this.ConsolidatedPrinterPolicy == null)
      ) {
        if (
          PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          PatientContextPresType = PrescriptionTypes.Clerking;
        }
        let ActivityName: string = this.GetActivityName(this.CACode);
        for (
          let i: number = 0;
          i < ProfileData.PrintConfig.ActivityConfigData.Count;
          i++
        ) {
          if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              ActivityName
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              PatientContextPresType
            ) == 0 &&
            String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.IsPrint = true;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.PrinterPolicy = 'BOTH';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            )
              this.PrinterPolicy = 'MAIN';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.PrinterPolicy = 'ALT';
            else this.PrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              ActivityName
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              PatientContextPresType
            ) == 0 &&
            !String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.IsConsolidatedPrint = true;
            if (
              !String.IsNullOrEmpty(
                ProfileData.PrintConfig.ActivityConfigData[i]
                  .SummaryStationeryForConsolidatedPrintValue
              ) &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue.Contains('~')
            ) {
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue =
                ProfileData.PrintConfig.ActivityConfigData[
                  i
                ].SummaryStationeryForConsolidatedPrintValue.Replace('~', '#');
            }
            this.Consolidatedtemplate =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue;
            this.ConsolidatedtemplateName =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrint;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'BOTH';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'MAIN';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'ALT';
            } else this.ConsolidatedPrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              'Discontinue/Cancel'
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              PatientContextPresType
            ) == 0 &&
            String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.DiscIsPrint = true;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.DiscPrinterPolicy = 'BOTH';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            )
              this.DiscPrinterPolicy = 'MAIN';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.DiscPrinterPolicy = 'ALT';
            else this.DiscPrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              'Discontinue/Cancel'
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              PatientContextPresType
            ) == 0 &&
            !String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            if (
              !String.IsNullOrEmpty(
                ProfileData.PrintConfig.ActivityConfigData[i]
                  .SummaryStationeryForConsolidatedPrintValue
              ) &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue.Contains('~')
            ) {
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue =
                ProfileData.PrintConfig.ActivityConfigData[
                  i
                ].SummaryStationeryForConsolidatedPrintValue.Replace('~', '#');
            }
            this.DiscIsConsolidatedPrint = true;
            this.DiscConsolidatedtemplate =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue;
            this.DiscConsolidatedtemplateName =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrint;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'BOTH';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'MAIN';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'ALT';
            } else this.DiscConsolidatedPrinterPolicy = 'NO';
          }
        }
      }
    }
    let nochange: boolean = false;
    let Issubmit: boolean = false;
    if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
      nochange = this.MedsResolve.All((Item) =>
        String.IsNullOrEmpty(Item.OperationMode)
      );
      for (let i: number = 0; i < this.MedsResolve.Count; i++) {
        if (!String.IsNullOrEmpty(this.MedsResolve[i].OperationMode)) {
          Issubmit = !(
            String.Equals(this.MedsResolve[i].OperationMode, 'M') &&
            !String.IsNullOrEmpty(this.MedsResolve[i].DiscontinueCancelAction)
          );
          break;
        }
      }
    }
    if (!Issubmit && !nochange) {
      this.IsPrint = this.DiscIsPrint;
      this.IsConsolidatedPrint = this.DiscIsConsolidatedPrint;
      this.Consolidatedtemplate = this.DiscConsolidatedtemplate;
      this.ConsolidatedtemplateName = this.DiscConsolidatedtemplateName;
      this.ConsolidatedPrinterPolicy = this.DiscConsolidatedPrinterPolicy;
      this.PrinterPolicy = this.DiscPrinterPolicy;
    }
    let objPrintWizContext ="";
    if ((this.IsPrint || this.IsConsolidatedPrint))
      {
        let wizardcontextStr;


        Object.keys(this.WizardContext).forEach((key,i)=>{

          if(key != 'objWizardContext'){
            wizardcontextStr = wizardcontextStr + '&' + key + '=' + this.WizardContext[key];

            if(i== Object.keys(this.WizardContext).length - 1)

            wizardcontextStr = wizardcontextStr + '&';

          }

        });
        objPrintWizContext =wizardcontextStr;
      }
    if (
      (this.IsPrint || this.IsConsolidatedPrint) &&
      !String.IsNullOrEmpty(this.WizardContext['MENUCODE'])
    ) {

      let oPrintUtility: PrintUtility = new PrintUtility();
     // let objWizContext: Object = ObjectHelper.CreateType<Object>( this.WizardContext, Object);
      oPrintUtility.Print(
        this.PrescriptionRes,
        this.PrinterPolicy,
        objPrintWizContext,//objWizContext,
        this.Consolidatedtemplate,
        this.ConsolidatedtemplateName,
        PatientContextPresType,
        this.IsPrint,
        this.IsConsolidatedPrint,
        this.ConsolidatedPrinterPolicy,
        (o1) => {
          sPrescriptionDetails = o1;
        },
        (o2) => {
          sALTLOCAL = o2;
        }
      );
    } else if (
      this.IsPrint &&
      !String.IsNullOrEmpty(this.WizardContext['MENUCODE']) &&
      !String.IsNullOrEmpty(this.WizardContext['IsClnicalNote']) &&
      this.WizardContext['IsClnicalNote'] == 'Yes'
    ) {
      let oPrintUtility: PrintUtility = new PrintUtility();
      //let objWizContext: Object = ObjectHelper.CreateType<Object>(  this.WizardContext, Object);
      oPrintUtility.CNSPrint(
        this.PrescriptionRes,
        this.PrinterPolicy,
        objPrintWizContext,
        (o1) => {
          sPrescriptionNVC = o1;
        },
        (o2) => {
          sALTLOCAL = o2;
        }
      );
      if (sPrescriptionNVC != String.Empty) {
        let PrescDet: string = String.Empty;
        this.CNSWizardContextSet(sPrescriptionNVC.ToString(), (o) => {
          PrescDet = o;
        });
        sPrescriptionDetails = PrescDet;
        this.WizardContext['SLPRINT'] = 'yes';
      }
    } else if (
      this.IsPrint &&
      !String.IsNullOrEmpty(this.WizardContext['MENUCODE']) &&
      !String.IsNullOrEmpty(this.WizardContext['IsClnicalNote']) &&
      this.WizardContext['IsClnicalNote'] == 'Yes' &&
      String.Compare(this.WizardContext['MENUCODE'], 'MN_MEDCLERKSL_P2') == 0 &&
      this.IsFinish
    ) {
      let oPrintUtility: PrintUtility = new PrintUtility();
      let objWizContext: Object = ObjectHelper.CreateType<Object>(this.WizardContext, Object);
      oPrintUtility.CNSPrint(
        this.PrescriptionRes,
        this.PrinterPolicy,
        objPrintWizContext,
        (o1) => {
          sPrescriptionNVC = o1;
        },
        (o2) => {
          sALTLOCAL = o2;
        }
      );
      if (sPrescriptionNVC != String.Empty) {
        let PrescDet: string = String.Empty;
        this.CNSWizardContextSet(sPrescriptionNVC.ToString(), (o) => {
          PrescDet = o;
        });
        sPrescriptionDetails = PrescDet;
        this.WizardContext['SLPRINT'] = 'yes';
      }
    }
    this.WizardContext['StatWithPrntPlcy'] = this.StatWithPrntPlcy.ToString();
    this.WizardContext['PrescriptionDetails'] = sPrescriptionDetails;
    if (this.IsPrint) {
      this.WizardContext['IsSubmitPrint'] = this.IsPrint.ToString();
      this.WizardContext['PrinterPolicy'] = this.PrinterPolicy;
    } else if (this.IsConsolidatedPrint) {
      this.WizardContext['IsSubmitPrint'] = this.IsConsolidatedPrint.ToString();
      this.WizardContext['PrinterPolicy'] = this.ConsolidatedPrinterPolicy;
    }
    this.WizardContext['IPPALTLOCAL'] = sALTLOCAL;
  }
  VerifyPrint(): void {
    let sPrescriptionDetails: string = String.Empty;
    let sPrintedPrescOIDs: string = String.Empty;
    let sTemplatemethodname: string = String.Empty;
    let sCrctPATIENTOID: string = String.Empty;
    let sALTLOCAL: string = String.Empty;
    let ActivityName: string = this.GetActivityName(this.CACode);
    let ContextPresType: string = PatientContext.PrescriptionType;
    if (this.PrinterPolicy == null) {
      if (
        ProfileData.PrintConfig != null &&
        (this.PrinterPolicy == null || this.ConsolidatedPrinterPolicy == null)
      ) {
        this.IsPrint = false;
        this.IsConsolidatedPrint = false;
        this.Consolidatedtemplate = String.Empty;
        this.ConsolidatedtemplateName = String.Empty;
        this.DiscIsPrint = false;
        this.DiscIsConsolidatedPrint = false;
        this.DiscConsolidatedtemplate = String.Empty;
        this.DiscConsolidatedtemplateName = String.Empty;
        this.PrinterPolicy = String.Empty;
        this.ConsolidatedPrinterPolicy = String.Empty;
        this.DiscPrinterPolicy = String.Empty;
        this.DiscConsolidatedPrinterPolicy = String.Empty;
        if (
          PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          ContextPresType = PrescriptionTypes.Clerking;
        }
        for (
          let i: number = 0;
          i < ProfileData.PrintConfig.ActivityConfigData.Count;
          i++
        ) {
          if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              ActivityName
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              ContextPresType
            ) == 0 &&
            String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.IsPrint = true;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.PrinterPolicy = 'BOTH';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            )
              this.PrinterPolicy = 'MAIN';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.PrinterPolicy = 'ALT';
            else this.PrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              ActivityName
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              ContextPresType
            ) == 0 &&
            !String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.IsConsolidatedPrint = true;
            this.Consolidatedtemplate =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue;
            this.ConsolidatedtemplateName =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrint;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'BOTH';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'MAIN';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'ALT';
            } else this.ConsolidatedPrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              'Discontinue/Cancel'
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              ContextPresType
            ) == 0 &&
            String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.DiscIsPrint = true;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.DiscPrinterPolicy = 'BOTH';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            )
              this.DiscPrinterPolicy = 'MAIN';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.DiscPrinterPolicy = 'ALT';
            else this.DiscPrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              'Discontinue/Cancel'
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              ContextPresType
            ) == 0 &&
            !String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            if (
              !String.IsNullOrEmpty(
                ProfileData.PrintConfig.ActivityConfigData[i]
                  .SummaryStationeryForConsolidatedPrintValue
              ) &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue.Contains('~')
            ) {
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue =
                ProfileData.PrintConfig.ActivityConfigData[
                  i
                ].SummaryStationeryForConsolidatedPrintValue.Replace('~', '#');
            }
            this.DiscIsConsolidatedPrint = true;
            this.DiscConsolidatedtemplate =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue;
            this.DiscConsolidatedtemplateName =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrint;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'BOTH';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'MAIN';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'ALT';
            } else this.DiscConsolidatedPrinterPolicy = 'NO';
          }
        }
      }
    }
    let nochange: boolean = false;
    let Issubmit: boolean = false;
    if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
      nochange = this.MedsResolve.All((Item) =>
        String.IsNullOrEmpty(Item.OperationMode)
      );
      for (let i: number = 0; i < this.MedsResolve.Count; i++) {
        if (!String.IsNullOrEmpty(this.MedsResolve[i].OperationMode)) {
          Issubmit = !(
            String.Equals(this.MedsResolve[i].OperationMode, 'M') &&
            !String.IsNullOrEmpty(this.MedsResolve[i].DiscontinueCancelAction)
          );
          break;
        }
      }
    }
    if (!Issubmit && !nochange) {
      this.IsPrint = this.DiscIsPrint;
      this.IsConsolidatedPrint = this.DiscIsConsolidatedPrint;
      this.Consolidatedtemplate = this.DiscConsolidatedtemplate;
      this.ConsolidatedtemplateName = this.DiscConsolidatedtemplateName;
      this.ConsolidatedPrinterPolicy = this.DiscConsolidatedPrinterPolicy;
      this.PrinterPolicy = this.DiscPrinterPolicy;
    }
    if (
      (this.IsPrint || this.IsConsolidatedPrint) &&
      ((!String.IsNullOrEmpty(this.WizardContext['MenuCode']) &&
        String.Compare(this.WizardContext['MenuCode'], 'MN_MEDCLERKSL_P2') !=
          0) ||
        (!String.IsNullOrEmpty(this.WizardContext['MENUCODE']) &&
          String.Compare(this.WizardContext['MENUCODE'], 'MN_MEDCLERKSL_P2') !=
            0))
    ) {
      if (
        String.IsNullOrEmpty(this.WizardContext['MenuCode']) &&
        !String.IsNullOrEmpty(this.WizardContext['MENUCODE'])
      ) {
        this.WizardContext['MenuCode'] = this.WizardContext['MENUCODE'];
      }       
      let oPrintUtility: PrintUtility = new PrintUtility();
      //let objWizContext: Object = ObjectHelper.CreateType<Object>(this.WizardContext,Object);
      let objWizContext='';
      Object.keys(this.WizardContext).forEach((key,i)=>{
        if(key != 'objWizardContext'){
          objWizContext = objWizContext + '&' + key + '=' + this.WizardContext[key];

          if(i== Object.keys(this.WizardContext).length - 1)

          objWizContext = objWizContext + '&';

        }
      });     
      oPrintUtility.ClinicallyPrint(
        this.sPresOIDPrn,
        ContextPresType,
        ActivityName,
        this.PrinterPolicy,
        objWizContext,
        PatientContext.PatientOID.ToString(),
        this.Consolidatedtemplate,
        this.ConsolidatedtemplateName,
        this.IsPrint,
        this.IsConsolidatedPrint,
        this.ConsolidatedPrinterPolicy,
        (o1) => {
          sPrescriptionDetails = o1;
        },
        (o2) => {
          sPrintedPrescOIDs = o2;
        },
        (o3) => {
          sTemplatemethodname = o3;
        },
        (o4) => {
          sCrctPATIENTOID = o4;
        },
        (o5) => {
          sALTLOCAL = o5;
        }
      );
    }
    this.WizardContext['PrintData'] = sPrescriptionDetails;
    this.WizardContext['PrintedPrescOIDs'] = sPrintedPrescOIDs;
    if (this.IsPrint) {
      this.WizardContext['IsSubmitPrint'] = this.IsPrint.ToString();
      this.WizardContext['IsClinVerPrint'] = this.IsPrint.ToString();
      this.WizardContext['PrinterPolicy'] = this.PrinterPolicy;
    } else if (this.IsConsolidatedPrint) {
      this.WizardContext['IsSubmitPrint'] = this.IsConsolidatedPrint.ToString();
      this.WizardContext['IsClinVerPrint'] =
        this.IsConsolidatedPrint.ToString();
      this.WizardContext['PrinterPolicy'] = this.ConsolidatedPrinterPolicy;
    }
    this.WizardContext['TemplateMethodName'] = sTemplatemethodname;
    this.WizardContext['CrctPATIENTOID'] = sCrctPATIENTOID;
    this.WizardContext['IPPALTLOCAL'] = sALTLOCAL;
    let nMErge: number = PatientContext.MergedPatientOID;
    if (
      this.WizardContext['CrctPATIENTOID'] != this.WizardContext['PATIENTOID']
    ) {
      this.WizardContext['PATIENTOID'] = sCrctPATIENTOID;
    }
  }
  oServiceProxy_GetDocTemplatesPolicyTypeCompleted(
    sender: Object,
    e: GetDocTemplatesPolicyTypeCompletedEventArgs
  ): void {
    let ClosedStat: StringBuilder = new StringBuilder();
    let IdentifyingName: StringBuilder = new StringBuilder();
    let ClosedStats = '';
    let IdentifyingNames = '';
    if (e.Error == null) {
      let objRes: CResMsgGetDocTemplatesPolicyType = e.Result;
      if (
        objRes != null &&
        objRes.DocTemplates != null &&
        objRes.DocTemplates.Count > 0
      ) {
        let nDocCnt: number = objRes.DocTemplates.Count;
        for (let i: number = 0; i < nDocCnt; i++) {
          if (objRes.DocTemplates[i] != null) {
            if (
              !String.IsNullOrEmpty(objRes.DocTemplates[i].PrinterPolicyType) &&
              String.Compare(
                objRes.DocTemplates[i].PrinterPolicyType,
                'CLOSE'
              ) != 0 &&
              String.Compare(objRes.DocTemplates[i].PrinterPolicyType, 'C') != 0
            ) {
              if (
                !String.IsNullOrEmpty(
                  objRes.DocTemplates[i].PrinterPolicyType
                ) &&
                String.Compare(
                  objRes.DocTemplates[i].PrinterPolicyType,
                  'NONE'
                ) != 0
              ) {
                if (this.StatWithPrntPlcy.Length > 0) {
                  this.StatWithPrntPlcy.Append(',');
                  this.StatWithPrntPlcy.Append(
                    objRes.DocTemplates[i].DocTemplateOID.ToString()
                  );
                  this.StatWithPrntPlcy.Append('^');
                  this.StatWithPrntPlcy.Append(
                    objRes.DocTemplates[i].PrinterPolicyType
                  );
                } else {
                  this.StatWithPrntPlcy.Append(
                    objRes.DocTemplates[i].DocTemplateOID.ToString()
                  );
                  this.StatWithPrntPlcy.Append('^');
                  this.StatWithPrntPlcy.Append(
                    objRes.DocTemplates[i].PrinterPolicyType
                  );
                }
              } else {
                if (this.StatWithOutPrntPlcy.Length > 0) {
                  this.StatWithOutPrntPlcy.Append(',');
                  this.StatWithOutPrntPlcy.Append(
                    objRes.DocTemplates[i].DocTemplateOID.ToString()
                  );
                } else {
                  this.StatWithOutPrntPlcy.Append(
                    objRes.DocTemplates[i].DocTemplateOID.ToString()
                  );
                }
              }
            } else if (
              !String.IsNullOrEmpty(objRes.DocTemplates[i].DocTemplateName)
            ) {
              if (!this.FlagSubmitCheck) {
                if (ClosedStat.Length > 0) {
                  ClosedStat.Append(', ');
                  ClosedStat.Append(
                    objRes.DocTemplates[i].DocTemplateName.ToString()
                  );
                } else {
                  ClosedStat.Append(
                    objRes.DocTemplates[i].DocTemplateName.ToString()
                  );
                }
                ClosedStats = ClosedStat.ToString();
                if (
                  !String.IsNullOrEmpty(objRes.DocTemplates[i].IdentifyingName)
                ) {
                  if (IdentifyingName.Length > 0) {
                    IdentifyingName.Append(', ');
                    IdentifyingName.Append(
                      objRes.DocTemplates[i].IdentifyingName.ToString()
                    );
                  } else
                    IdentifyingName.Append(
                      objRes.DocTemplates[i].IdentifyingName.ToString()
                    );
                  IdentifyingNames = IdentifyingName.ToString();
                }
                if (
                  !String.IsNullOrEmpty(ClosedStats) &&
                  ClosedStats.length > 0 &&
                  !String.IsNullOrEmpty(IdentifyingNames) &&
                  IdentifyingNames.length > 0
                ) {
                  this.bFinalClose = false;
                  let sMessage =
                    'The Stationery type ' +
                    ClosedStats +
                    ' associated to the Prescription items ' +
                    IdentifyingNames +
                    ' is inactive. Please contact the System administrator';
                  let oMsgBox: iMessageBox = new iMessageBox();
                  oMsgBox.MessageBoxClose = (s, e) => {
                    this.oMsgBox_MessageBoxClose(s, e);
                  };
                  oMsgBox.Message = sMessage;
                  oMsgBox.Title = 'LORENZO';
                  oMsgBox.MessageButton = MessageBoxButton.OK;
                  oMsgBox.IconType = MessageBoxType.Information;
                  oMsgBox.Show();
                }
              }
            }
          }
        }
      }
      let StationaryName = '';
      if (
        this.StatWithOutPrntPlcy != null &&
        this.StatWithOutPrntPlcy.Length > 0 &&
        !String.IsNullOrEmpty(this.StationaryTYPOIDs)
      ) {
        let StatWithOutPrntPlcyOID: string[] =
          this.StatWithOutPrntPlcy.ToString().Split(',');
        let sStatinaryOIDs: string[] = this.StationaryTYPOIDs.Split(',');
        let nStatcnt = StatWithOutPrntPlcyOID.length;
        for (let i = 0; i < nStatcnt; i++) {
          if (!String.IsNullOrEmpty(this.StationaryTYPNames)) {
            let tempStatType = this.StationaryTYPNames.Split(',');
            let nTempStatCnt = tempStatType.length;
            for (let j = 0; j < nTempStatCnt; j++) {
              if (!String.IsNullOrEmpty(tempStatType[j])) {
                let temp1 = tempStatType[j].Split('^');
                if (StatWithOutPrntPlcyOID[i] == temp1[0]) {
                  if (!String.IsNullOrEmpty(temp1[1])) {
                    if (StationaryName.length == 0) StationaryName = temp1[1];
                    else StationaryName += ',' + temp1[1];
                    break;
                  }
                }
              }
            }
          }
        }
        if (
          !String.IsNullOrEmpty(StationaryName) &&
          StationaryName.length > 0
        ) {
          this.bFinalClose = false;
          let sMessage =
            'No printer policy configured for the following stationery template(s):' +
            '\n' +
            StationaryName +
            '\n' +
            'Please contact the system administrator.';
          let oMsgBox: iMessageBox = new iMessageBox();
          oMsgBox.MessageBoxClose = (s, e) => {
            this.oMsgBox_MessageBoxClose(s, e);
          };
          oMsgBox.Message = sMessage;
          oMsgBox.Title = 'LORENZO';
          oMsgBox.MessageButton = MessageBoxButton.OK;
          oMsgBox.IconType = MessageBoxType.Information;
          oMsgBox.Show();
          ObjectHelper.stopScreenFreezeEvent(true);
        }
      }
    }
    if (
      String.Equals(
        this.WizardContext['LaunchingCACode'],
        CConstants.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      let sResult: string = String.Empty;
      let sMenuCode: string = !String.IsNullOrEmpty(
        this.WizardContext['MenuCode']
      )
        ? this.WizardContext['MenuCode']
        : String.Empty;
      let keycode: string = String.Empty;
      let RequestLockedOID: string = String.Empty;
      let lockduration: number = MedicationConstants.CConstants.LockDuration;
      let _LockedUserDetails: LockedUsersDetails;
      let bResult: boolean = MedicationCommonBB.IsLockedByAnotherUser(
        sMenuCode,
        true,
        (o) => {
          _LockedUserDetails = o;
        }
      );
      if (
        _LockedUserDetails != null &&
        !String.IsNullOrEmpty(_LockedUserDetails.MedChartOID)
      ) {
        RequestLockedOID = _LockedUserDetails.MedChartOID;
      } else {
        RequestLockedOID = PatientContext.EncounterOid.ToString();
      }
      keycode =
        _LockedUserDetails != null &&
        !String.IsNullOrEmpty(_LockedUserDetails.ActivityLock)
          ? _LockedUserDetails.ActivityLock
          : String.Empty;
      sResult = ObjectHelper.CreateType<string>(
        HtmlPage.Window.Invoke(
          'DeactivatePessimisticLock',
          RequestLockedOID,
          keycode,
          lockduration
        ),
        'string'
      );
    }
    if (this.bFinalClose) {
      if (this.FlagSubmitCheck && !this.CanLaunchForadminPrescription) {
        this.submitPrint();
      } else {
        this.VerifyPrint();
      }
      this.FinishCA();
    }
  }
  private SetWizardContextforPrint(): void {
    let sPrescriptionDetails: string = String.Empty;
    if (this.StatWithPrntPlcy != null) {
      let tempStatWithPrntPlcy: string = this.StatWithPrntPlcy.ToString();
      if (!String.IsNullOrEmpty(tempStatWithPrntPlcy) && this.IsPrint) {
        let StatWithPrntPlcy: string[] = tempStatWithPrntPlcy.Split(',');
        if (StatWithPrntPlcy != null && StatWithPrntPlcy.length > 0) {
          let nStatWithPlcyCnt: number = StatWithPrntPlcy.length;
          for (let indx: number = 0; indx < nStatWithPlcyCnt; indx++) {
            let StatWithPlcyOID: number = 0;
            let sTempStatWithPlcy: string[] = StatWithPrntPlcy[indx].Split('^');
            if (
              !String.IsNullOrEmpty(sTempStatWithPlcy[0]) &&
              !String.IsNullOrEmpty(sTempStatWithPlcy[1])
            )
              StatWithPlcyOID = Convert.ToInt64(sTempStatWithPlcy[0]);
            let sTempPresDetails: string = null;
            if (this.PrescriptionRes != null) {
              let nPresCount: number = this.PrescriptionRes.Count;
              for (let i: number = 0; i < nPresCount; i++) {
                let sStationaryType: string = null;
                let lStationaryTypeOID: number = 0;
                let sPrescriptionOID: string =
                  this.PrescriptionRes[i].PrescriptionOID.ToString();
                let sPresItemOID: string = null;
                let sCDPresItemOID: string = null;
                if (this.PrescriptionRes[i].StationeryType != null) {
                  let sTempStatType: string =
                    this.PrescriptionRes[i].StationeryType.Code;
                  sStationaryType = sTempStatType;
                  lStationaryTypeOID =
                    this.PrescriptionRes[i].StationeryType.OID;
                }
                if (StatWithPlcyOID == lStationaryTypeOID) {
                  if (this.PrescriptionRes[i].PresItemResponse != null) {
                    let nPresItmCount: number =
                      this.PrescriptionRes[i].PresItemResponse.Count();
                    for (let j: number = 0; j < nPresItmCount; j++) {
                      let sTempPresItm: string =
                        this.PrescriptionRes[i].PresItemResponse[
                          j
                        ].PrescriptionItemOID.ToString();
                      if (
                        this.PrescriptionRes[i].PresItemResponse[j]
                          .IsControlledDrug == '1'
                      ) {
                        if (String.IsNullOrEmpty(sCDPresItemOID)) {
                          sCDPresItemOID = sTempPresItm;
                        } else sCDPresItemOID += ',' + sTempPresItm;
                      } else {
                        if (String.IsNullOrEmpty(sPresItemOID)) {
                          sPresItemOID = sTempPresItm;
                        } else sPresItemOID += ',' + sTempPresItm;
                      }
                    }
                    if (!String.IsNullOrEmpty(this.PrinterPolicy)) {
                      if (String.Compare(this.PrinterPolicy, 'MAIN') == 0) {
                        if (
                          !String.IsNullOrEmpty(sPresItemOID) &&
                          !String.IsNullOrEmpty(sCDPresItemOID)
                        )
                          sTempPresDetails =
                            'MAIN' +
                            '~' +
                            sStationaryType +
                            '~' +
                            sPresItemOID +
                            ',' +
                            sCDPresItemOID;
                        else if (
                          !String.IsNullOrEmpty(sPresItemOID) &&
                          String.IsNullOrEmpty(sCDPresItemOID)
                        )
                          sTempPresDetails =
                            'MAIN' + '~' + sStationaryType + '~' + sPresItemOID;
                        else if (
                          String.IsNullOrEmpty(sPresItemOID) &&
                          !String.IsNullOrEmpty(sCDPresItemOID)
                        )
                          sTempPresDetails =
                            'MAIN' +
                            '~' +
                            sStationaryType +
                            '~' +
                            sCDPresItemOID;
                        if (!String.IsNullOrEmpty(sTempPresDetails)) {
                          if (String.IsNullOrEmpty(sPrescriptionDetails))
                            sPrescriptionDetails = sTempPresDetails;
                          else sPrescriptionDetails += '^' + sTempPresDetails;
                        }
                      } else if (
                        String.Compare(this.PrinterPolicy, 'ALT') == 0
                      ) {
                        if (!String.IsNullOrEmpty(sCDPresItemOID))
                          sTempPresDetails =
                            'ALT' +
                            '~' +
                            sStationaryType +
                            '~' +
                            sCDPresItemOID;
                        if (!String.IsNullOrEmpty(sTempPresDetails)) {
                          if (String.IsNullOrEmpty(sPrescriptionDetails))
                            sPrescriptionDetails = sTempPresDetails;
                          else sPrescriptionDetails += '^' + sTempPresDetails;
                        }
                      } else if (
                        String.Compare(this.PrinterPolicy, 'BOTH') == 0
                      ) {
                        if (!String.IsNullOrEmpty(sPresItemOID))
                          sTempPresDetails =
                            'MAINB' +
                            '~' +
                            sStationaryType +
                            '~' +
                            sPresItemOID;
                        if (!String.IsNullOrEmpty(sCDPresItemOID)) {
                          if (!String.IsNullOrEmpty(sTempPresDetails))
                            sTempPresDetails +=
                              '^' +
                              'ALT' +
                              '~' +
                              sStationaryType +
                              '~' +
                              sCDPresItemOID;
                          else
                            sTempPresDetails =
                              'ALT' +
                              '~' +
                              sStationaryType +
                              '~' +
                              sCDPresItemOID;
                        }
                        if (String.IsNullOrEmpty(sPrescriptionDetails))
                          sPrescriptionDetails = sTempPresDetails;
                        else sPrescriptionDetails += '^' + sTempPresDetails;
                      }
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
    this.WizardContext['StatWithPrntPlcy'] = this.StatWithPrntPlcy.ToString();
    this.WizardContext['PrescriptionDetails'] = sPrescriptionDetails;
    this.WizardContext['IsSubmitPrint'] = this.IsPrint.ToString();
    this.WizardContext['PrinterPolicy'] = this.PrinterPolicy;
    this.WizardContext['EncounterOID'] = PatientContext.EncounterOid.ToString();
    this.WizardContext['EncounterValueTypeCode'] = PatientContext.EncounterType;
  }
  oMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    this.FinishCA();
  }

  oMsgBox1_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    Busyindicator.SetStatusIdle('FINISH');
    this.IsFinishClicked = false;
   this.ActionOn221_ResolveGrid.emit();
  }
  
  public SetWIZContextInormation(Action: string): void {
    let sQryStr: string = String.Empty;
    if (ContextManager.Instance.NameExists('WZContextInfo')) {
      sQryStr = ContextManager.Instance['WZContextInfo'].ToString();
      sQryStr += 'EncounterOID=' + PatientContext.EncounterOid.ToString() + '&';
    }
    sQryStr += 'WIZ_Status=' + Action;
    ContextManager.Instance.SetContext('WZContextInfo', sQryStr);
    this.WizardContext['WIZ_Status'] = Action;
    this.WizardContext['WFPATIENTOID'] = PatientContext.PatientOID.ToString();
    this.WizardContext['EncounterOID'] = PatientContext.EncounterOid.ToString();
  }
  public FillActivityConsideration(): void {
 
        let bACNodeItmClickable: boolean = true;
        if (this.ActivityConsideration != null) {
          AppLoadService.activityConsiderationArrowClick.subscribe(val=>{
            if (val) {
              this.ActivityConsideration_OnPopupOpen({},{});
            }
          });
          AppLoadService.nodeClick.subscribe(val=>{
            if (val||bACNodeItmClickable) {
              this.ActivityConsideration_OnNodeItemClick({});
            }
          });
            // this.ActivityConsideration.OnPopupOpen = (s, e) => { this.ActivityConsideration_OnPopupOpen(s, e); };
            if (String.Equals(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode, StringComparison.InvariantCultureIgnoreCase)) {
                bACNodeItmClickable = false;
            }
            // if (bACNodeItmClickable) {
            //     this.ActivityConsideration.OnNodeItemClick = (s, e) => { this.ActivityConsideration_OnNodeItemClick(s); };
            // }
            // CommonBB.PatientBSADataCompletedEvent -= this.CommonBB_PatientBSADataCompletedEvent;
            CommonBB.PatientBSADataCompletedEvent = (s, e) => { this.CommonBB_PatientBSADataCompletedEvent(s, e); };
            this.ActivityConsideration.ActivityConsiderationCaption = "Prescribing considerations";
            this.ActivityConsideration.Visibility = Visibility.Visible;
            this.ActivityConsideration.AddSection("SectionConsideration", "Considerations", String.Empty, Resource.prescribedrugs.SectionConsideration_Tooltip);
            this.ActivityConsideration.AddSection("SectionAllergy", "Allergies/ADRs", String.Empty, Resource.prescribedrugs.SectionAllergy_Tooltip);
            this.ActivityConsideration.AddSection("SectionProblem", "Problems", String.Empty, Resource.prescribedrugs.SectionProblems_Tooltip);
            console.log('ActivityConsideration',this.ActivityConsideration);
            AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
        }
        
  }

    ActivityConsideration_OnPopupOpen(sender: Object, e: EventArgs): void {
      CommonBB.PatientBSADataCompletedEvent = (s, e) => { this.CommonBB_PatientBSADataCompletedEvent(s, e); };
        this.IsActivityConsiderationOpened = true;
        let sImageList: string = String.Empty;
        let oReturn: Object = HtmlPage.Window.Invoke("GetDataItemRecordedDate", null);
        this.UpdateActivityConsideration(false, oReturn);
        this.ActivityConsideration.AddNode("SectionConsideration", "DischargeDTTM", "Expected date of discharge:", String.Empty, String.Empty, false, false, "Expected date of discharge", String.Empty);
        this.ActivityConsideration.AddNode("SectionConsideration", "LeaveDTTM", "Expected date of patient leave:", String.Empty, String.Empty, false, false, "Expected date of patient leave", String.Empty);
        if (this.ActivityConsideration?.lstSection[2]?.Nodes.Count == 0) {
            if (!String.IsNullOrEmpty(WebServiceURLMedicationCommonBB.ManageProblemWS)) {
                // MedicationPrescriptionHelper.GetProblemByCriteria((o,e)=>((sender: any, e: GetProblemByCriteriaCompletedEventArgs)=>{this.probproxy_GetProblemByCriteriaCompleted(o,e)}))
                MedicationPrescriptionHelper.GetProblemByCriteria((o,e)=>{
                  this.probproxy_GetProblemByCriteriaCompleted(o,e)
                });
                // MedicationPrescriptionHelper.GetProblemByCriteria(new EventHandler<ManageProblem.GetProblemByCriteriaCompletedEventArgs>(this.probproxy_GetProblemByCriteriaCompleted));
            }
        }
        if (this.ActivityConsideration?.lstSection[1]?.Nodes.Count == 0) {
            if (!String.IsNullOrEmpty(WebServiceURLMedicationCommonBB.ManageAllergyWS)) {
                // MedicationPrescriptionHelper.GetPatientAllergies((o,e)=>((sender: any, e: GetPatientAllergiesCompletedEventArgs)=>{this.allergyproxy_GetPatientAllergiesCompleted(o,e)}))
                MedicationPrescriptionHelper.GetPatientAllergies((o,e)=>{
                  this.allergyproxy_GetPatientAllergiesCompleted(o,e)
                })
                // MedicationPrescriptionHelper.GetPatientAllergies(new EventHandler<ManageAllergy.GetPatientAllergiesCompletedEventArgs>(this.allergyproxy_GetPatientAllergiesCompleted));
            }
        }
        if (this.ActivityConsideration != null) {
            if (String.IsNullOrEmpty(this.sDischargeDTTM)) {
                // MedicationPrescriptionHelper.GetDischargeDate((o,e)=>((sender: any, e: ManagePrescSer.GetDischargeDateCompletedEventArgs)=>{this.PatientDischargeDate_GetDischargeDateCompleted(o,e)}))
                // MedicationPrescriptionHelper.GetDischargeDate(new EventHandler<ManagePrescSer.GetDischargeDateCompletedEventArgs>(this.PatientDischargeDate_GetDischargeDateCompleted));
                MedicationPrescriptionHelper.GetDischargeDate((o,e)=>{this.PatientDischargeDate_GetDischargeDateCompleted(o,e)})
              }
            else {
                this.SetActivityConsiderationDischargeDTTM();
            }
            if (String.IsNullOrEmpty(this.sLeaveDTTM)) {
                // MedicationPrescriptionHelper.GetPatientLeaveByPatDet((o,e)=>((sender: any, e: GetPatientLeaveByPatDetCompletedEventArgs)=>{this.LeaveDate_GetPatientLeaveByPatDetCompleted(o,e)}))
                MedicationPrescriptionHelper.GetPatientLeaveByPatDet((o,e)=>{this.LeaveDate_GetPatientLeaveByPatDetCompleted(o,e)});
                // MedicationPrescriptionHelper.GetPatientLeaveByPatDet(new EventHandler<QueryInpatient.GetPatientLeaveByPatDetCompletedEventArgs>(this.LeaveDate_GetPatientLeaveByPatDetCompleted));
            }
            else {
                this.SetActivityConsiderationLeaveDTTM();
            }
        }
        AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
    }
    
  SetActivityConsiderationDischargeDTTM(): void {

    this.ActivityConsideration.UpdateNode("SectionConsideration", "DischargeDTTM", "Expected date of discharge:", this.sDischargeDTTM, String.Empty, false, false, "Expected date of discharge", this.sDischargeDTTM);
    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
  }
  SetActivityConsiderationLeaveDTTM(): void {

    this.ActivityConsideration.UpdateNode("SectionConsideration", "LeaveDTTM", "Expected date of patient leave:", this.sLeaveDTTM, String.Empty, false, false, "Expected date of patient leave", this.sLeaveDTTM);
    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
  }
  public UpdateActivityConsideration(
    IsDoseCalc: boolean,
    oReturn: Object
  ): void {
    let sHName: string = 'Height:';
    let sWName: string = 'Weight:';
    let sGestationAge: string = 'Gestational age:';
    let sHValue: string = 'NOT RECORDED';
    let sWValue: string = 'NOT RECORDED';
    let sGestationAgeValue: string = 'NOT RECORDED';
    let sHeight: string;
    let sWeight: string;
    let sGestation: string;
    let sGestationreq: string = String.Empty;
    let sPatValueType: string = String.Empty;
    if (oReturn != null && oReturn.ToString().length > 0) {
      let arrValues: string[];
      if (IsDoseCalc) {
        arrValues = oReturn.ToString().Split(',');
        if (arrValues.length > 0 && !String.IsNullOrEmpty(arrValues[0])) {
          sWValue = arrValues[0].Replace('  ', ' ');
        }
        if (arrValues.length > 1 && !String.IsNullOrEmpty(arrValues[1])) {
          sHValue = arrValues[1].Replace('  ', ' ');
        }
        if (arrValues.length > 2 && !String.IsNullOrEmpty(arrValues[2])) {
          sGestationAgeValue = arrValues[2].Replace('  ', ' ');
        }
        sWValue = sWValue.Replace(':Recorded', ': Recorded');
        sHValue = sHValue.Replace(':Recorded', ': Recorded');
        sGestationAgeValue = sGestationAgeValue.Replace(
          ':Recorded',
          ': Recorded'
        );
        sWeight =
          arrValues.length > 3 && !String.IsNullOrEmpty(arrValues[3])
            ? arrValues[3].Trim()
            : String.Empty;
        sHeight =
          arrValues.length > 4 && !String.IsNullOrEmpty(arrValues[4])
            ? arrValues[4].Trim()
            : String.Empty;
        sGestation =
          arrValues.length > 5 && !String.IsNullOrEmpty(arrValues[5])
            ? arrValues[5].Trim()
            : String.Empty;
        this.RecordEstWeightHeight(sHeight,sWeight,(o1)=>{sHeight=o1}, (o2)=>{sWeight=o2}, arrValues);
        
        this.ActivityConsideration.UpdateNode("SectionConsideration", sWName, sWName, sWValue, String.Empty, false, true, "Patient Weight", Resource.prescribedrugs.PatientWeight_Tooltip + sWValue);
        this.ActivityConsideration.UpdateNode("SectionConsideration", sHName, sHName, sHValue, String.Empty, false, true, "Patient Height", Resource.prescribedrugs.PatientHeight_Tooltip + sHValue);
        AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
        MedicationCommonBB.GetPatientAgeGenderDetails();
        if (ContextManager.Instance.NameExists('Sgestationreq')) {
          if (ContextManager.Instance['Sgestationreq'] != null) {
            sGestationreq = ContextManager.Instance['Sgestationreq'].ToString();
          }
        }
      
                if (sGestationreq == "1") {
                    this.ActivityConsideration.UpdateNode("SectionConsideration", sGestationAge, sGestationAge, sGestationAgeValue, String.Empty, false, true, "Gestational age", sGestationAgeValue);
                    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                  }
      } else {
        arrValues = oReturn.ToString().Split(',');
        if (arrValues.length > 0 && !String.IsNullOrEmpty(arrValues[0])) {
          sWValue = arrValues[0].Replace('  ', ' ');
        }
        if (arrValues.length > 1 && !String.IsNullOrEmpty(arrValues[1])) {
          sHValue = arrValues[1].Replace('  ', ' ');
        }
        if (arrValues.length > 2 && !String.IsNullOrEmpty(arrValues[2])) {
          sGestationAgeValue = arrValues[2].Replace('  ', ' ');
        }
        sWValue = sWValue.Replace(':Recorded', ': Recorded');
        sHValue = sHValue.Replace(':Recorded', ': Recorded');
        sGestationAgeValue = sGestationAgeValue.Replace(
          ':Recorded',
          ': Recorded'
        );
        sWeight =
          arrValues.length > 3 && !String.IsNullOrEmpty(arrValues[3])
            ? arrValues[3].Trim()
            : String.Empty;
        sHeight =
          arrValues.length > 4 && !String.IsNullOrEmpty(arrValues[4])
            ? arrValues[4].Trim()
            : String.Empty;
        sGestation =
          arrValues.length > 5 && !String.IsNullOrEmpty(arrValues[5])
            ? arrValues[5].Trim()
            : String.Empty;
        this.RecordEstWeightHeight(sHeight,sWeight,(o1)=>{sHeight=o1}, (o2)=>{sWeight=o2}, arrValues);

                if (this.ActivityConsideration.lstSection != null && this.ActivityConsideration.lstSection[0].Nodes != null && this.ActivityConsideration.lstSection[0].Nodes.Count == 0) {
                    this.ActivityConsideration.AddNode("SectionConsideration", sWName, sWName, sWValue, String.Empty, false, true, "Patient Weight", Resource.prescribedrugs.PatientWeight_Tooltip + sWValue);
                    this.ActivityConsideration.AddNode("SectionConsideration", sHName, sHName, sHValue, String.Empty, false, true, "Patient Height", Resource.prescribedrugs.PatientHeight_Tooltip + sHValue);
                    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                  }
                else {
                    this.ActivityConsideration.UpdateNode("SectionConsideration", sWName, sWName, sWValue, String.Empty, false, true, "Patient Weight", Resource.prescribedrugs.PatientWeight_Tooltip + sWValue);
                    this.ActivityConsideration.UpdateNode("SectionConsideration", sHName, sHName, sHValue, String.Empty, false, true, "Patient Weight", Resource.prescribedrugs.PatientWeight_Tooltip + sWValue);
                    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                  }
                
        MedicationCommonBB.GetPatientAgeGenderDetails();
        if (ContextManager.Instance.NameExists('Sgestationreq')) {
          if (ContextManager.Instance['Sgestationreq'] != null) {
            sGestationreq = ContextManager.Instance['Sgestationreq'].ToString();
          }
        }
      
                if (sGestationreq == "1") {
                    this.ActivityConsideration.AddNode("SectionConsideration", sGestationAge, sGestationAge, sGestationAgeValue, String.Empty, false, true, "Gestational age", sGestationAgeValue);
                    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                  }
                
      }
      if (!String.IsNullOrEmpty(sHeight)) {
        let sHeightRecordedOn: string = String.Empty;
        let sHeightRecordedOnWithTime: string = String.Empty;
        sPatValueType = 'Height';
        if (arrValues != null && arrValues.length > 1) {
          if (
            !String.IsNullOrEmpty(arrValues[1]) &&
            arrValues[1].Contains(':')
          ) {
            sHeightRecordedOn = arrValues[1].Split(':')[2];
            sHeightRecordedOn = sHeightRecordedOn.Trim().Substring(0, 11);
            sHeightRecordedOnWithTime =
              arrValues[1].Split(':')[2] + ':' + arrValues[1].Split(':')[3];
          }
        }
        PatientContext.PatientHeightRecordedOn = sHeightRecordedOn;
        PatientContext.PatientHeightDTTM = Convert.ToDateTime(
          sHeightRecordedOnWithTime
        );
        this.ParseWeightHeight(sHeight, sPatValueType);
      } else {
        PatientContext.PatientHEIGHT = String.Empty;
        PatientContext.PatientHeightRecordedOn = String.Empty;
      }
      if (!String.IsNullOrEmpty(sWeight)) {
        let sWeightRecordedOn: string = String.Empty;
        let sWeightRecordedOnWithTime: string = String.Empty;
        sPatValueType = 'Weight';
        if (arrValues != null && arrValues.length > 0) {
          if (
            !String.IsNullOrEmpty(arrValues[0]) &&
            arrValues[0].Contains(':')
          ) {
            sWeightRecordedOn = arrValues[0].Split(':')[2];
            sWeightRecordedOn = sWeightRecordedOn.Trim().Substring(0, 11);
            sWeightRecordedOnWithTime =
              arrValues[0].Split(':')[2] + ':' + arrValues[0].Split(':')[3];
          }
        }
        PatientContext.PatientWeightRecordedOn = sWeightRecordedOn;
        PatientContext.PatientWeightDTTM = Convert.ToDateTime(
          sWeightRecordedOnWithTime
        );
        this.ParseWeightHeight(sWeight, sPatValueType);
      } else {
        PatientContext.PatientWEIGHT = String.Empty;
        PatientContext.PatientWeightRecordedOn = String.Empty;
      }
      this.ActivityConsideration.AddNode("SectionConsideration", "BSA", "BSA:", String.Empty, String.Empty, false, false, "BSA", String.Empty);
      AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
      if (
        (!String.IsNullOrEmpty(sHeight) &&
          !String.IsNullOrEmpty(sWeight) &&
          !PatientContext.isEstimatedHeight &&
          !PatientContext.isEstimatedWeight) ||
        (!String.IsNullOrEmpty(sWeight) && !PatientContext.isEstimatedWeight)
      ) {
        CommonBB.GetPatientBSA(
          PatientContext.PatientOID,
          PatientContext.Age,
          sHeight,
          sWeight
        );
      } else {
        PatientContext.BSA = String.Empty;
        PatientContext.BSAFormula = String.Empty;
        this.ActivityConsideration.UpdateNode("SectionConsideration", "BSA", "BSA:", String.Empty, String.Empty, false, false, "BSA", String.Empty);
        AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
      }
      if (
        PatientContext.PatientHeightDTTM >= PatientContext.PatientWeightDTTM
      ) {
        this.HeightWeightIndText =
          Resource.TechValidate.Heightweightupdate_text +
          ' ' +
          PatientContext.PatientHeightDTTM.ToString(CConstants.DateHMFormat) +
          Resource.TechValidate.HtWtpleasereview;
      } else if (
        DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
      ) {
        this.HeightWeightIndText =
          Resource.TechValidate.Heightweightupdate_text +
          ' ' +
          PatientContext.PatientWeightDTTM.ToString(CConstants.DateHMFormat) +
          Resource.TechValidate.HtWtpleasereview;
      }
    }
  }
  public RecordEstWeightHeight(
    sHgt : string,
    sWgt: string,
    out1: (sHeight: string) => void,
    out2: (sWeight: string) => void,
    arrValues: string[]
  ): void {
    let sHeight: string = sHgt;
    let sWeight: string = sWgt;
    if (arrValues.length > 0 && !String.IsNullOrEmpty(arrValues[0])) {
      if (arrValues[0].Contains('Estimated')) {
        PatientContext.isEstimatedWeight = true;
        let estArrValue: string = arrValues[0].Split(':')[0];
        let estsWArrValues: string[] = estArrValue.Split(' ');
        sWeight = (estsWArrValues[0] + ' ' + estsWArrValues[1]).Trim();
      } else {
        PatientContext.isEstimatedWeight = false;
      }
    }
    if (
      arrValues.length > 0 &&
      arrValues.length > 1 &&
      !String.IsNullOrEmpty(arrValues[1])
    ) {
      if (arrValues[1].Contains('Estimated')) {
        PatientContext.isEstimatedHeight = true;
        let estHArrValue: string = arrValues[1].Split(':')[0];
        let estHArrValues: string[] = estHArrValue.Split(' ');
        sHeight = (estHArrValues[0] + ' ' + estHArrValues[1]).Trim();
      } else {
        PatientContext.isEstimatedHeight = false;
      }
    }
    out1(sHeight);
    out2(sWeight);
  }
  public ParseWeightHeight(sPatVal: string, sPatValueType: string): void {
    if (!String.IsNullOrEmpty(sPatVal)) {
      let PValue: string[] = sPatVal.Split(' ');
      if (sPatVal != null && sPatVal.length > 1) {
        let PW: string = PValue[0];
        let PatWeightHeight: number = 0;
        Number.TryParse(PW, (o) => {
          PatWeightHeight = o;
        });
        if (sPatVal.length >= 2) {
          let sPWHUOM: string = PValue[1];
          if (
            !String.IsNullOrEmpty(sPatValueType) &&
            String.Equals(
              sPatValueType,
              'Weight',
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (
              !String.IsNullOrEmpty(sPWHUOM) &&
              String.Compare(
                sPWHUOM,
                'g',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
              PatWeightHeight > 0
            ) {
              let CalcPatWT: number = PatWeightHeight / 1000;
              if (CalcPatWT > 0)
                PatientContext.PatientWEIGHT = CalcPatWT.ToString();
            } else {
              PatientContext.PatientWEIGHT = PValue[0];
            }
          } else if (
            !String.IsNullOrEmpty(sPatValueType) &&
            String.Equals(
              sPatValueType,
              'Height',
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (
              !String.IsNullOrEmpty(sPWHUOM) &&
              String.Compare(
                sPWHUOM,
                'cm',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
              PatWeightHeight > 0
            ) {
              let CalcPatHT: number = PatWeightHeight / 100;
              if (CalcPatHT > 0)
                PatientContext.PatientHEIGHT = CalcPatHT.ToString();
            } else {
              PatientContext.PatientHEIGHT = PValue[0];
            }
          }
        } else {
          if (
            !String.IsNullOrEmpty(sPatValueType) &&
            String.Equals(
              sPatValueType,
              'Weight',
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            PatientContext.PatientWEIGHT = PValue[0];
          } else if (
            !String.IsNullOrEmpty(sPatValueType) &&
            String.Equals(
              sPatValueType,
              'Height',
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            PatientContext.PatientHEIGHT = PValue[0];
          }
        }
      }
    } else {
      PatientContext.PatientWEIGHT = String.Empty;
      PatientContext.BSA = String.Empty;
      PatientContext.BSAFormula = String.Empty;
      PatientContext.PatientWeightRecordedOn = String.Empty;
      PatientContext.PatientHEIGHT = String.Empty;
    }
    sPatValueType = String.Empty;
  }
  private BSAFormula: string;
  private BSAValue: string;
  CommonBB_PatientBSADataCompletedEvent(Formula: string, BSA: string): void {
    if (!String.IsNullOrEmpty(BSA)) {
      this.BSAValue = BSA;
      this.BSAFormula = Formula;
      if (CommonDomainValues.BSAFormula != null) {
        let sBSAFormulaDisplay: string = this.BSAFormula;
        let sDisplay: string;
        let BSADisplayText = CommonDomainValues.BSAFormula.Where(
          (CCBSA) =>
            String.Compare(
              CCBSA.csCode,
              this.BSAFormula,
              StringComparison.OrdinalIgnoreCase
            ) == 0
        ).Select((CCBSA) => CCBSA.csDescription);
        if (BSADisplayText != null && BSADisplayText.Count() > 0) {
          sBSAFormulaDisplay = BSADisplayText.ElementAt(0);
        }
        PatientContext.BSAFormulaCode = Formula;
        PatientContext.BSAFormula = sBSAFormulaDisplay;
        sDisplay = this.BSAValue + ' m^2 (' + sBSAFormulaDisplay + ')';
        this.ActivityConsideration.UpdateNode("SectionConsideration", "BSA", "BSA:", sDisplay, String.Empty, false, false, "BSA", Resource.prescribedrugs.PatientBSA_Tooltip + sDisplay);
        AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
      }
    }
  }
  public callReBindResolveGridEvent(
    OperationMode: string,
    objItemVM: PrescriptionItemVM,
    Index: number = 0
  ): void {
    if (
      this.ReBindResolveGridEvent != null &&
      ((!String.IsNullOrEmpty(OperationMode) &&
        (String.Equals(
          OperationMode,
          'DRCU',
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            OperationMode,
            'CU',
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            OperationMode,
            'UA',
            StringComparison.InvariantCultureIgnoreCase
          ))) ||
        String.IsNullOrEmpty(OperationMode))
    ) {
      this.ReBindResolveGridEvent(true, objItemVM, Index);
    }
  }
  allergyproxy_GetPatientAllergiesCompleted(
    sender: Object,
    e: GetPatientAllergiesCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000027;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, IPPMABaseVM.allergyproxy_GetPatientAllergiesCompleted()';
    if (e.Error == null) {
      try {
        let AllergyRes: CResMsgGetPatientAllergies = e.Result;
      
                if (AllergyRes instanceof CResMsgGetPatientAllergies && AllergyRes.oPatientAllergyDet != null) {
                    for (let i: number = 0; i < AllergyRes.oPatientAllergyDet.Length; i++) {
                        if (i >= 10) {
                            this.ActivityConsideration.AddNode("SectionAllergy", String.Empty, Resource.prescribedrugs.More_Allergies_Exist, String.Empty, String.Empty, false, false, Resource.prescribedrugs.sectionallergyif_Tooltip, Resource.prescribedrugs.sectionallergyif_Tooltip);
                            AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                            break;
                        }
                        else {
                            this.ActivityConsideration.AddNode("SectionAllergy", AllergyRes.oPatientAllergyDet[i].AllergyID, AllergyRes.oPatientAllergyDet[i].Allergen, String.Empty, String.Empty, false, false, AllergyRes.oPatientAllergyDet[i].Allergen, Resource.prescribedrugs.sectionallergyielse_Tooltip);
                            AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                        }
                    }
                }
                else {
                    this.ActivityConsideration.AddNode("SectionAllergy", String.Empty, "None recorded", String.Empty, String.Empty, false, false, Resource.prescribedrugs.Sectionallergyelse1_Tooltip, Resource.prescribedrugs.sectionallergyelse2_Tooltip);
                    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                }
                
        for (
          let vSectionCntr: number = 0;
          vSectionCntr < this.ActivityConsideration.lstSection.Count;
          vSectionCntr++
        ) {
          if (
            String.Compare(
              this.ActivityConsideration.lstSection[vSectionCntr].SectionKey,
              'SectionAllergy'
            ) == 0
          ) {
            for (
              let vLoop: number = 0;
              vLoop <
              this.ActivityConsideration.lstSection[vSectionCntr].Nodes.Count;
              vLoop++
            )
              this.ActivityConsideration.lstSection[vSectionCntr].Nodes[
                vLoop
              ].NodeWidth = 300;
              AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
            break;
          }
        }
      } catch (ex: any) {
        Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
    //Not Required for LHS. To be Re-Visited.
    /*
        if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.OrdinalIgnoreCase) != 0)
            ActivityConsideration.lstSection[0].Nodes[4].NodeWidth = 175;
        */
  }
  probproxy_GetProblemByCriteriaCompleted(
    sender: Object,
    e: GetProblemByCriteriaCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000023;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IppmabaseVM, Method:probproxy_GetProblemByCriteriaCompleted()';
    if (e.Error == null) {
      try {
        let oProbRes: CResMsgGetProblemByCriteria = e.Result;
        
                if (oProbRes instanceof CResMsgGetProblemByCriteria && oProbRes.oProblemView != null) {
                    for (let i: number = 0; i < oProbRes.oProblemView.Count; i++) {
                        if (i >= 5) {
                            this.ActivityConsideration.AddNode("SectionProblem", String.Empty, Resource.prescribedrugs.More_Problem_Exist, String.Empty, String.Empty, false, false, Resource.prescribedrugs.sectionallergyif_Tooltip, Resource.prescribedrugs.sectionallergyif_Tooltip);
                            AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                            break;
                        }
                        else {
                            this.ActivityConsideration.AddNode("SectionProblem", oProbRes.oProblemView[i].ProblemOID, oProbRes.oProblemView[i].ProblemName, String.Empty, String.Empty, false, false, oProbRes.oProblemView[i].ProblemName, Resource.prescribedrugs.Sectionproblemielse_Tooltip);
                            AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                        }
                    }
                }
                else {
                    this.ActivityConsideration.AddNode("SectionProblem", String.Empty, "None recorded", String.Empty, String.Empty, false, false, Resource.prescribedrugs.Sectionproblemielse_Tooltip, Resource.prescribedrugs.sectionallergyelse2_Tooltip);
                    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
                }
                
        for (
          let vSectionCntr: number = 0;
          vSectionCntr < this.ActivityConsideration.lstSection.Count;
          vSectionCntr++
        ) {
          if (
            String.Compare(
              this.ActivityConsideration.lstSection[vSectionCntr].SectionKey,
              'SectionProblem'
            ) == 0
          ) {
            for (
              let vLoop: number = 0;
              vLoop <
              this.ActivityConsideration.lstSection[vSectionCntr].Nodes.Count();
              vLoop++
            )
              this.ActivityConsideration.lstSection[vSectionCntr].Nodes[
                vLoop
              ].NodeWidth = 300;
              AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
            break;
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public RefreshDCAlertIcon(_IsRebindResolveGrid: boolean): void {
    let HeightWeightRecordedDTTM: DateTime = DateTime.MinValue;
    if (DateTime.GreaterThanOrEqualTo(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)) {
      this.HeightWeightIndText =
        Resource.TechValidate.Heightweightupdate_text +
        ' ' +
        PatientContext.PatientHeightDTTM.ToString(CConstants.DateHMFormat) +
        Resource.TechValidate.HtWtpleasereview;
      HeightWeightRecordedDTTM = PatientContext.PatientHeightDTTM;
    } else if (
      DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
    ) {
      this.HeightWeightIndText =
        Resource.TechValidate.Heightweightupdate_text +
        ' ' +
        PatientContext.PatientWeightDTTM.ToString(CConstants.DateHMFormat) +
        Resource.TechValidate.HtWtpleasereview;
      HeightWeightRecordedDTTM = PatientContext.PatientWeightDTTM;
    }
    let IsRebindResolveGrd: boolean = false;
    let ItemsToUpdate: PrescriptionItemVM[] = [];
    this.IsPatientHTWTUpdated = true;
    if (
      this.MedsResolve != null &&
      this.MedsResolve.Count > 0 &&
      MedicationCommonProfileData.PrescribeConfig != null &&
      MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
    ) {
      this.MedsResolve.ForEach((oItemVM) => {
        if (
          oItemVM.PrescriptionItemOID == 0 &&
          oItemVM.IsDoseCalcPerformed &&
          oItemVM.DoseCalculationDetails != null
        ) {
          if (
            oItemVM.DoseCalculationDetails.CalculatedDTTM <
              HeightWeightRecordedDTTM &&
            !Common.IsClosedEncounter()
          ) {
            oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
            IsRebindResolveGrd = true;
            ItemsToUpdate.push(oItemVM);
          } else {
            oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
          }
        } else if (
          oItemVM.PrescriptionItemOID > 0 &&
          !String.IsNullOrEmpty(oItemVM.PrescriptionItemStatusCode) &&
          (String.Equals(
            oItemVM.PrescriptionItemStatus,
            CConstants.SUBMITTED,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
            String.Equals(
              oItemVM.PrescriptionItemStatus,
              CConstants.AUTOVERIFIED,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              oItemVM.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              oItemVM.PrescriptionItemStatus,
              CConstants.CLINICALLYVERIFIED,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          if (
            oItemVM.IsDoseCalcPerformed ||
            oItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist
          ) {
            if (
              oItemVM.FormViewerDetails.BasicDetails.DCCalDTTM <
                HeightWeightRecordedDTTM &&
              !Common.IsClosedEncounter()
            ) {
              oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
              IsRebindResolveGrd = true;
              ItemsToUpdate.push(oItemVM);
            } else {
              oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
            }
          }
        }
      });
    }
    if (IsRebindResolveGrd) {
      if (_IsRebindResolveGrid && this.ReBindResolveGridEvent != null) {
        ItemsToUpdate.forEach((item)=>{
          this.ReBindResolveGridEvent(false, item);
        })  
      }
      if (this.IsVisibleHWIndicator == Visibility.Collapsed) {
        this.IsVisibleHWIndicator = Visibility.Visible;
      }
    } else {
      if (this.IsVisibleHWIndicator == Visibility.Visible) {
        this.IsVisibleHWIndicator = Visibility.Collapsed;
      }
    }
  }
  //Not Required for LHS. To be Re-Visited.
  //ActivityConsideration_OnNodeItemClick(objRLNode: ACNode): void {
    async ActivityConsideration_OnNodeItemClick(objRLNode: any) {
    let sHName: string = 'Height:';
    let sWName: string = 'Weight:';
    let sGestationAge: string = 'Gestational age:';
    let sGestationAgeValue: string = 'NOT RECORDED';
    let sHValue: string = 'NOT RECORDED';
    let sWValue: string = 'NOT RECORDED';
    let sWeight: string = String.Empty;
    let sHeight: string = String.Empty;
    let sGestation: string = String.Empty;
    let sGestationreq: string = String.Empty;
    let sIsClinicalnote: string = !String.IsNullOrEmpty(
      QueryStringInfo.IsClinicalNote
    )
      ? QueryStringInfo.IsClinicalNote
      : String.Empty;
    let sPatValueType: string = String.Empty;
    let oReturn = await HtmlPage.Window.InvokeAsync(
      'ActivityConsideration',
      sIsClinicalnote,
      PatientContext.PatientOID
    );
    if (oReturn != null && oReturn.length > 0) {
      let arrValues: string[] = oReturn.ToString().Split(',');
      if (arrValues.length > 0 && !String.IsNullOrEmpty(arrValues[0])) {
        sWValue = arrValues[0].Replace('  ', ' ');
      }
      if (arrValues.length > 1 && !String.IsNullOrEmpty(arrValues[1])) {
        sHValue = arrValues[1].Replace('  ', ' ');
      }
      if (arrValues.length > 2 && !String.IsNullOrEmpty(arrValues[2])) {
        sGestationAgeValue = arrValues[2].Replace('  ', ' ');
      }
      sWeight =
        arrValues.length > 3 && !String.IsNullOrEmpty(arrValues[3])
          ? arrValues[3].Trim()
          : String.Empty;
      sHeight =
        arrValues.length > 4 && !String.IsNullOrEmpty(arrValues[4])
          ? arrValues[4].Trim()
          : String.Empty;
      sGestation =
        arrValues.length > 5 && !String.IsNullOrEmpty(arrValues[5])
          ? arrValues[5].Trim()
          : String.Empty;
      this.RecordEstWeightHeight(sHeight,sWeight,(o1)=>{sHeight=o1}, (o2)=>{sWeight=o2}, arrValues);
      if (!String.IsNullOrEmpty(sHeight)) {
        let sHeightRecordedOn: string = String.Empty;
        let sHeightRecordedOnWithTime: string = String.Empty;
        sPatValueType = 'Height';
        if (arrValues != null && arrValues.length > 1) {
          if (
            !String.IsNullOrEmpty(arrValues[1]) &&
            arrValues[1].Contains(':')
          ) {
            sHeightRecordedOn = arrValues[1].Split(':')[2];
            sHeightRecordedOn = sHeightRecordedOn.Trim().Substring(0, 11);
            sHeightRecordedOnWithTime =
              arrValues[1].Split(':')[2] + ':' + arrValues[1].Split(':')[3];
          }
        }
        PatientContext.PatientHeightRecordedOn = sHeightRecordedOn;
        PatientContext.PatientHeightDTTM = Convert.ToDateTime(
          sHeightRecordedOnWithTime
        );
        this.ParseWeightHeight(sHeight, sPatValueType);
      } else {
        PatientContext.PatientHEIGHT = String.Empty;
        PatientContext.PatientHeightRecordedOn = String.Empty;
      }
      if (!String.IsNullOrEmpty(sWeight)) {
        let sWeightRecordedOn: string = String.Empty;
        let sWeightRecordedOnWithTime: string = String.Empty;
        sPatValueType = 'Weight';
        if (arrValues != null && arrValues.length > 0) {
          if (
            !String.IsNullOrEmpty(arrValues[0]) &&
            arrValues[0].Contains(':')
          ) {
            sWeightRecordedOn = arrValues[0].Split(':')[2];
            sWeightRecordedOn = sWeightRecordedOn.Trim().Substring(0, 11);
            sWeightRecordedOnWithTime =
              arrValues[0].Split(':')[2] + ':' + arrValues[0].Split(':')[3];
          }
        }
        PatientContext.PatientWeightRecordedOn = sWeightRecordedOn;
        PatientContext.PatientWeightDTTM = Convert.ToDateTime(
          sWeightRecordedOnWithTime
        );
        this.ParseWeightHeight(sWeight, sPatValueType);
      } else {
        PatientContext.PatientWEIGHT = String.Empty;
        PatientContext.PatientWeightRecordedOn = String.Empty;
      }
      this.RefreshDCAlertIcon(true);
    }
  
    this.ActivityConsideration.UpdateNode("SectionConsideration", sWName, sWName, sWValue, String.Empty, false, true, "Patient Weight", Resource.prescribedrugs.PatientWeight_Tooltip + sWValue);
    this.ActivityConsideration.UpdateNode("SectionConsideration", sHName, sHName, sHValue, String.Empty, false, true, "Patient Height", Resource.prescribedrugs.PatientHeight_Tooltip + sHValue);
    AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
    MedicationCommonBB.GetPatientAgeGenderDetails();
    if (ContextManager.Instance.NameExists('Sgestationreq')) {
      if (ContextManager.Instance['Sgestationreq'] != null) {
        sGestationreq = ContextManager.Instance['Sgestationreq'].ToString();
      }
    }
 
        if (sGestationreq == "1") {
            this.ActivityConsideration.UpdateNode("SectionConsideration", sGestationAge, sGestationAge, sGestationAgeValue, String.Empty, false, true, "Gestational age", sGestationAgeValue);
            AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
        }
    if (
      (!String.IsNullOrEmpty(sHeight) &&
        !String.IsNullOrEmpty(sWeight) &&
        !PatientContext.isEstimatedHeight &&
        !PatientContext.isEstimatedWeight) ||
      (!String.IsNullOrEmpty(sWeight) && !PatientContext.isEstimatedWeight)
    ) {
      CommonBB.GetPatientBSA(
        PatientContext.PatientOID,
        PatientContext.Age,
        sHeight,
        sWeight
      );
    } else {
      PatientContext.BSA = String.Empty;
      PatientContext.BSAFormula = String.Empty;
      this.ActivityConsideration.UpdateNode("SectionConsideration", "BSA", "BSA:", String.Empty, String.Empty, false, false, "BSA", String.Empty);
      AppLoadService.activityConsiderationEVT.next(this.ActivityConsideration);
    }
  }
  public UpdateConflicts(LastRemoveIndex: number, sType: string): void {
    if (
      (String.Compare(
        ContextInfo.MenuCode,
        'MN_MEDCLERKSL_P2',
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          'MN_MEDCLR',
          StringComparison.OrdinalIgnoreCase
        ) == 0) &&
      ProfileData.MedConflictConfig != null &&
      ProfileData.MedConflictConfig.DisplayConflicts != '1'
    ) {
      if (this.ReBindResolveGridEvent != null)
        this.ReBindResolveGridEvent(false, null);
      return;
    }
    this.ActivityCode = ActivityTypes.UpdateWarning;
    if (
      String.Compare(
        sType,
        'UNHOLD',
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.MedsResolve[LastRemoveIndex].GenerateConflictsForInpatient(
        this.MedsResolve
      );
      this.MedsResolve[LastRemoveIndex].WarningsGenerationCompleted = (s,e) => {
        this.objNewItemVM_WarningsGenerationCompleted();
      };
    } else if (
      String.Compare(
        sType,
        'HOLD',
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      if (this.ReBindResolveGridEvent != null)
        this.ReBindResolveGridEvent(false, null);
    } else {
      let updatePresItems: IEnumerable<PrescriptionItemVM> =
        this.MedsResolve.Where(
          (item) =>
            !String.IsNullOrEmpty(item.OperationMode) &&
            String.Compare(
              item.OperationMode,
              'N',
              StringComparison.OrdinalIgnoreCase
            ) == 0
        ).Select((item) => item);
      if (updatePresItems != null && updatePresItems.Count() > 0) {
        updatePresItems.forEach((oItemVM) => {
          let nCurItemIdx: number = this.MedsResolve.IndexOf(oItemVM);
          if (nCurItemIdx < LastRemoveIndex) {
            if (
              !oItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'F'
              ) &&
              !oItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'S'
              )
            ) {
              oItemVM.GetWarningsForCurrentItem(
                this.GetCurrentMedictationDetails(nCurItemIdx, '')
              );
              oItemVM.WarningsGenerationCompleted = (s,e) => {
                this.objNewItemVM_WarningsGenerationCompleted();
              };
            }
          } else if (nCurItemIdx == LastRemoveIndex) {
            if (this.ReBindResolveGridEvent != null)
              this.ReBindResolveGridEvent(false, oItemVM);
          } else return;
        });
      }
    }
  }
  public RegenerateConflictsForBrand(oItemBrandVM: PrescriptionItemVM): void {
    oItemBrandVM.GenerateConflictsForInpatient(this.MedsResolve);
  }
  public RegenerateConflictsFluidItemEvent(
    oItemBrandVM: PrescriptionItemVM
  ): void {
    oItemBrandVM.GenerateConflictsForInpatient(this.MedsResolve);
  }
  public GetCurrentMedictationDetails(
    CurrentItemIndex: number,
    sType: string
  ): ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria> {
    let objAddedMed: ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria> =
      null;
    if (this.MedsResolve != null) {
      let nTotalCount: number = this.MedsResolve.Count;
      objAddedMed =
        new ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria>();
      if (
        String.Compare(
          sType,
          'UNHOLD',
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        for (let i: number = 0; i < nTotalCount; i++) {
          let oVM: PrescriptionItemVM = this.MedsResolve[i];
          if (
            (CurrentItemIndex == -1 &&
              this.ActivityCode == ActivityTypes.Amend &&
              this.MedsResolve[i].PrescriptionItemOID ==
                this.objProcessingItemVM.PrescriptionItemOID) ||
            CurrentItemIndex == i
          ) {
            continue;
          }
          if (
            oVM.FormViewerDetails.BasicDetails.Ordersets != null &&
            !String.IsNullOrEmpty(
              oVM.FormViewerDetails.BasicDetails.Ordersets.Value
            )
          ) {
            if (
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .Ordersets != null &&
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .Ordersets.Value
              )
            ) {
              if (
                !this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .Ordersets.IsSelected &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .Ordersets.Value ==
                  oVM.FormViewerDetails.BasicDetails.Ordersets.Value
              ) {
                continue;
              }
            }
          }
          objAddedMed = IPPMABaseVM.CurrentMedObject(objAddedMed, oVM);
        }
      } else {
        for (let i: number = CurrentItemIndex + 1; i < nTotalCount; i++) {
          let oVM: PrescriptionItemVM = this.MedsResolve[i];
          if (
            CurrentItemIndex == -1 &&
            (this.ActivityCode == ActivityTypes.Amend ||
              this.ActivityCode == ActivityTypes.Prescribe) &&
            this.objProcessingItemVM != null &&
            this.MedsResolve[i].PrescriptionItemOID ==
              this.objProcessingItemVM.PrescriptionItemOID
          ) {
            continue;
          }
          if (
            oVM.FormViewerDetails.BasicDetails.Ordersets != null &&
            !String.IsNullOrEmpty(
              oVM.FormViewerDetails.BasicDetails.Ordersets.Value
            )
          ) {
            if (
              this.MedsResolve[CurrentItemIndex] != null &&
              this.MedsResolve[CurrentItemIndex].FormViewerDetails != null &&
              this.MedsResolve[CurrentItemIndex].FormViewerDetails
                .BasicDetails != null &&
              this.MedsResolve[CurrentItemIndex].FormViewerDetails.BasicDetails
                .Ordersets != null &&
              !String.IsNullOrEmpty(
                this.MedsResolve[CurrentItemIndex].FormViewerDetails
                  .BasicDetails.Ordersets.Value
              ) &&
              !this.MedsResolve[CurrentItemIndex].FormViewerDetails.BasicDetails
                .Ordersets.IsSelected &&
              this.MedsResolve[CurrentItemIndex].FormViewerDetails.BasicDetails
                .Ordersets.Value ==
                oVM.FormViewerDetails.BasicDetails.Ordersets.Value &&
              oVM.PrescriptionItemOID == 0
            ) {
              continue;
            }
          }
          objAddedMed = IPPMABaseVM.CurrentMedObject(objAddedMed, oVM);
        }
      }
    }
    return objAddedMed;
  }
  public static CurrentMedObject(
    objAddedMed: ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria>,
    oVM: PrescriptionItemVM
  ): ObservableCollection<IPPMAManagePrescSer.DecisionSupportBasicCriteria> {
    if (
      oVM.FormViewerDetails.BasicDetails.IdentifyingOID != null &&
      oVM.FormViewerDetails.BasicDetails.IdentifyingOID > 0 &&
      !String.IsNullOrEmpty(oVM.LorenzoID) &&
      oVM.FormViewerDetails.BasicDetails.IdentifyingName != null &&
      oVM.FormViewerDetails.BasicDetails.IdentifyingName.length > 0 &&
      oVM.PrescriptionItemStatus != PrescriptionItemStatusCodes.CANCELLED &&
      oVM.PrescriptionItemStatus != PrescriptionItemStatusCodes.DISCONTINUED &&
      oVM.PrescriptionItemStatus != PrescriptionItemStatusCodes.ONHOLD &&
      oVM.PrescriptionItemStatus !=
        PrescriptionItemStatusCodes.AWAITINGAUTHORISE &&
      oVM.PrescriptionItemStatus != PrescriptionItemStatusCodes.COMPLETED
    ) {
      let dsCurrItem: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
        new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
      dsCurrItem.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
      if (
        String.Compare(
          oVM.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        dsCurrItem.DrugItem.IdentifyingName = CommonFlags.MCidentifyingName;
      } else
        dsCurrItem.DrugItem.IdentifyingName =
          oVM.FormViewerDetails.BasicDetails.IdentifyingName;
      dsCurrItem.DrugItem.IdentifyingOID =
        oVM.FormViewerDetails.BasicDetails.IdentifyingOID;
      dsCurrItem.DrugItem.IdentifyingType =
        oVM.FormViewerDetails.BasicDetails.IdentifyingType;
      dsCurrItem.DrugItem.ItemType = oVM.ItemMainType;
      dsCurrItem.DrugItem.ITMSUBTYP = oVM.ItemSubType;
      dsCurrItem.DrugItem.LorenzoID = oVM.LorenzoID;
      dsCurrItem.StartDate = oVM.FormViewerDetails.BasicDetails.StartDTTM;
      dsCurrItem.EndDate = oVM.FormViewerDetails.BasicDetails.EndDTTM;
      dsCurrItem.RowID = Convert.ToString(oVM.UniqueRowID);
      dsCurrItem.PrescriptionType = oVM.PrescriptionType;
      dsCurrItem.PrescriptionDTTM = oVM.PrescriptionDTTM;
      if (
        oVM.PrescriptionDTTM != null &&
        DateTime.NotEquals(oVM.PrescriptionDTTM.Date, DateTime.MinValue.Date)
      ) {
        dsCurrItem.DrugItem.PrescriptionItemId =
          oVM.PrescriptionItemOID.ToString();
        dsCurrItem.DrugItem.ConflictUniqueId = 'CC_PCPRES';
      } else {
        dsCurrItem.DrugItem.ConflictUniqueId = 'CC_UNIQUEID';
      }
      if (
        String.Compare(
          oVM.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0
      ) {
        objAddedMed.Add(dsCurrItem);
      }
      if (
        String.Compare(
          oVM.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        oVM.PrescriptionDTTM != null &&
        DateTime.NotEquals(oVM.PrescriptionDTTM.Date, DateTime.MinValue.Date)
      ) {
        if (!String.IsNullOrEmpty(oVM.MCChilditem)) {
          let sMCitem: string = oVM.MCChilditem;
          let sMCitemSerialize: string[] = sMCitem.Split('^');
          if (sMCitemSerialize != null && sMCitemSerialize.length > 0) {
            let sProblemDetails: StringBuilder = new StringBuilder();
            let sProblemName: StringBuilder = new StringBuilder();
            for (let i: number = 0; i <= sMCitemSerialize.length - 1; i++) {
              let dsCurrItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
                new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
              dsCurrItems.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
              let stmp: string[] = sMCitemSerialize[i].Split('~');
              let lnIdentifyingOID: number = 0;
              Number.TryParse(stmp[0], (o) => {
                lnIdentifyingOID = o;
              });
              dsCurrItems.DrugItem.IdentifyingOID = lnIdentifyingOID;
              dsCurrItems.DrugItem.IdentifyingType = stmp[1];
              dsCurrItems.DrugItem.IdentifyingName = stmp[2];
              if (stmp.length > 3) dsCurrItems.DrugItem.LorenzoID = stmp[3];
              dsCurrItems.PrescriptionType = oVM.PrescriptionType;
              dsCurrItems.PrescriptionDTTM = oVM.PrescriptionDTTM;
              dsCurrItems.DrugItem.PrescriptionItemId =
                oVM.PrescriptionItemOID.ToString();
              dsCurrItems.DrugItem.ITMSUBTYP = oVM.ItemSubType;
              dsCurrItems.DrugItem.ConflictUniqueId = 'CC_PCPRES';
              dsCurrItems.DrugItem.NonCatItemReason =
                CommonFlags.MCidentifyingName;
              objAddedMed.Add(dsCurrItems);
            }
          }
        }
      } else if (
        String.Compare(
          oVM.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        if (
          oVM.FormViewerDetails.MulticomponentDetails != null &&
          oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo != null
        ) {
          if (
            oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count >
            0
          ) {
            for (
              let ncount: number = 0;
              ncount <
              oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
                .Count;
              ncount++
            ) {
              let dsCurrItems: IPPMAManagePrescSer.DecisionSupportBasicCriteria =
                new IPPMAManagePrescSer.DecisionSupportBasicCriteria();
              dsCurrItems.DrugItem = new IPPMAManagePrescSer.DrugBasicData();
              dsCurrItems.DrugItem.IdentifyingOID =
                oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  ncount
                ].IdentifyingOID;
              dsCurrItems.DrugItem.IdentifyingType =
                oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  ncount
                ].IdentifyingType;
              dsCurrItems.DrugItem.LorenzoID =
                oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  ncount
                ].LorenzoID;
              dsCurrItems.DrugItem.IdentifyingName =
                oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  ncount
                ].ComponentName;
              dsCurrItems.DrugItem.ConflictUniqueId = 'CC_UNIQUEID';
              dsCurrItems.DrugItem.ITMSUBTYP = oVM.ItemSubType;
              dsCurrItems.DrugItem.PrescribableItemListOID =
                oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  ncount
                ].PrescribableItemListOID;
              dsCurrItems.DrugItem.UniqueMCRowID =
                oVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                  ncount
                ].UniqueMCRowID;
              dsCurrItems.DrugItem.NonCatItemReason =
                CommonFlags.MCidentifyingName;
              objAddedMed.Add(dsCurrItems);
            }
          }
        }
      }
    }
    return objAddedMed;
  }
  IsFrameworkLoadingInProgress: boolean = false;
  public override OnInitialize(): void {
    this.IsFrameworkLoadingInProgress = true;
    super.OnInitialize();
  }
  public override OnInitComplete(): void {
    if (
      String.Compare(this.AppContext.CACode, 'MED_CA_AUTHORISE_SL_P2') == 0 ||
      String.Compare(this.AppContext.CACode, 'MED_CA_CLN_VRFY_SL_P2') == 0
    )
      ContextManager.Instance['PatientID'] = String.Empty;
    this.GetContextInfoFromHtmlPage();
    super.OnInitComplete();
    if (
      !String.IsNullOrEmpty(QueryStringInfo.CDCFormCode) ||
      !String.IsNullOrEmpty(QueryStringInfo.MedclerkPrompt) ||
      !String.IsNullOrEmpty(this.WizardContext['CDCFormCode'])
    ) {
      this.IsButtonSuspendVisible = Visibility.Collapsed;
      this.IsButtonNextVisible = Visibility.Collapsed;
      this.IsRoadMapVisible = Visibility.Collapsed;
      this.IsButtonFinishNowVisible = Visibility.Collapsed;
      this.IsButtonFinishVisible = Visibility.Visible;
    }
    if (String.Compare(this.AppContext.CACode, 'MED_CA_AUTHORISE_SL_P2') == 0) {
      ContextInfo.MenuCode = 'MN_MED_AUTHORI_SL_P2';
    } else {
      ContextInfo.MenuCode = this.AppContext.CACode;
    }
    if (this.WizardContext['IsLaunched'] != null)
      this.WizardContext['RECALGYCTXT'] = this.WizardContext['IsLaunched'];
    if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode
      ) != 0 &&
      String.Compare(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode) != 0
    ) {
      PatientContext.PrescriptionType =
        MedicationCommonBB.GetPrescriptionTypeCode(ContextInfo.MenuCode);
      PatientContext.ClerkFormViewDefaultBehavior =
        ClerkFormViewDeftBehaviour.DoNotLaunchForm;
    } else {
      PatientContext.ClerkFormViewDefaultBehavior =
        ClerkFormViewDeftBehaviour.DoNotLaunchForm;
    }
    this.SetResolveTabDisplayText();
    if (!(this.AppContext.CACode == 'MED_CA_AUTHORISE_SL_P2')) {
      this.SetTopRightCornerPanel();
    }
    this.GetProfileData();
    this.GetPermissionsDetails();
    this.rteLoaded = false;
    ProcessRTE.GetHierarchicalValuesByDomains(
      CConstants.CodingSchemeName,
      CConstants.Version,
      CConstants.FilterType,
      ContextInfo.Culture,
      'MEDPITSTC,IPPMAPRCTYP,MEDICATIONSITE,MedAdMhd,MEDDRSN,MEDCLERKING,MEDSUPPLYIN,MEDDOSEFRM,MEDTRTCONTINUE,ENTYP,ENSTATUS,MEDDOSE,MEDDBSAFR,MEDCLRSOR,INFUSIONTYPE,NFREASON,HUMIDIFICATION,RM_UNIT_MEASURE,DRCERRORCODE,OVRDREASON,TITRDSINST,MEDURGENCY,MASLOTSTATUSCODE,MedCLMSDispenseStat,REQDOSE,MEDDRNDOFF,DSOVRACKWRSN,MEDDCALBON,MEDDCALFOR,DEFWEIGHTTYPE,MEDSUPPLYSTATUS,MRSN,EXPMONTHS,MEDENPRP,INSTALINS,DISPINS,WARSN,MEDINSTLINTVDUR,BHVTY,CNFTY,SUBAG,SUBCI,SUBDP,MEDSVRTY,SUBINT,INFROUNDTO,DRCACKWRSN,',
      (e, r) => {
        this.OnRTEResult(e);
      }
    );
  }
  OnRTEViewResult(args: RTEEventargs): void {
    if (String.IsNullOrEmpty(args.Request) || args.Result == null) return;
    if (
      String.Equals(
        args.Request,
        'MEDTRTCONTINUE,MEDDRSN,DISPINS,MEDSUPPLYIN,MEDSUPPLYSTATUS',
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      if (args.Result instanceof Dictionary) {
        if (MedicationCommonConceptCodeData.ViewConceptCodes == null)
          MedicationCommonConceptCodeData.ViewConceptCodes =
            new ObservableCollection<CValuesetTerm>();
        let objResult: Dictionary<string, List<CListItem>> = <
          Dictionary<string, List<CListItem>>
        >args.Result;
        objResult.forEach((objDomainDetail) => {
          switch (objDomainDetail.Key.ToUpper()) {
            case 'MEDTRTCONTINUE':
            case 'MEDDRSN':
            case 'DISPINS':
            case 'MEDSUPPLYIN':
            case 'MEDSUPPLYSTATUS':
              objDomainDetail.Value.forEach((oCListItem) => {
                MedicationCommonConceptCodeData.ViewConceptCodes.Add(
                  ObjectHelper.CreateObject(new CValuesetTerm(), {
                    csCode: oCListItem.Value,
                    csDescription: oCListItem.DisplayText,
                  })
                );
              });
              break;
          }
        });
      }
    }
  }
  OnRTEResult(args: RTEEventargs): void {
    let ViewDomainCodes: string = String.Empty;
    if (String.IsNullOrEmpty(args.Request) || args.Result == null) {
      ViewDomainCodes =
        ValueDomain.TreatmentToContinue +
        ',' +
        ValueDomain.Duration +
        ',' +
        ValueDomain.DispensingInstruction +
        ',' +
        ValueDomain.SupplyInstruction +
        ',' +
        ValueDomain.Supplystatus;
      ProcessRTE.GetValuesByDomainCodes(ViewDomainCodes, (s, e) => {
        this.OnRTEViewResult(s);
        this.rteLoaded = true;
      });
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient
        ) == 0
      ) {
        this.SupplyRequestVisibility = Visibility.Visible;
      }
      return;
    }
    if (
      String.Compare(
        args.Request,
        'MEDPITSTC,IPPMAPRCTYP,MEDICATIONSITE,MedAdMhd,MEDDRSN,MEDCLERKING,MEDSUPPLYIN,MEDDOSEFRM,MEDTRTCONTINUE,ENTYP,ENSTATUS,MEDDOSE,MEDDBSAFR,MEDCLRSOR,INFUSIONTYPE,NFREASON,HUMIDIFICATION,RM_UNIT_MEASURE,DRCERRORCODE,OVRDREASON,TITRDSINST,MEDURGENCY,MASLOTSTATUSCODE,MedCLMSDispenseStat,REQDOSE,MEDDRNDOFF,DSOVRACKWRSN,MEDDCALBON,MEDDCALFOR,DEFWEIGHTTYPE,MEDSUPPLYSTATUS,MRSN,EXPMONTHS,MEDENPRP,INSTALINS,DISPINS,WARSN,MEDINSTLINTVDUR,BHVTY,CNFTY,SUBAG,SUBCI,SUBDP,MEDSVRTY,SUBINT,INFROUNDTO,DRCACKWRSN,'
      ) == 0
    ) {
      if (args.Result instanceof Dictionary) {
        MedicationCommonConceptCodeData.ConceptCodes =
          new ObservableCollection<CValuesetTerm>();
        let objResult: Dictionary<string, List<CListItem>> = <
          Dictionary<string, List<CListItem>>
        >args.Result;
        objResult.forEach((objDomainDetail) => {
          switch (objDomainDetail.Key) {
            case 'MEDPITSTC':
            case 'IPPMAPRCTYP':
            case 'MEDICATIONSITE':
            case 'MedAdMhd':
            case 'MEDDRSN':
            case 'MEDSUPPLYIN':
            case 'MEDDOSEFRM':
            case 'MEDTRTCONTINUE':
            case 'ENTYP':
            case 'ENSTATUS':
            case 'MEDDBSAFR':
            case 'MEDCLRSOR':
            case 'MEDDCALBON':
            case 'MEDDCALFOR':
            case 'DEFWEIGHTTYPE':
              objDomainDetail.Value.forEach((oCListItem) => {
                MedicationCommonConceptCodeData.ConceptCodes.Add(
                  ObjectHelper.CreateObject(new CValuesetTerm(), {
                    csCode: oCListItem.Value,
                    csDescription: oCListItem.DisplayText,
                  })
                );
              });
              console.log(
                'MedicationCommonConceptCodeData.ConceptCodes',
                MedicationCommonConceptCodeData.ConceptCodes
              );
              if (String.Compare(objDomainDetail.Key, 'MEDDBSAFR') == 0) {
                CommonDomainValues.BSAFormula =
                  new ObservableCollection<CValuesetTerm>();
                objDomainDetail.Value.forEach((oCListItem) => {
                  CommonDomainValues.BSAFormula.Add(
                    ObjectHelper.CreateObject(new CValuesetTerm(), {
                      csCode: oCListItem.Value,
                      csDescription: oCListItem.DisplayText,
                    })
                  );
                });
              } else if (
                String.Compare(objDomainDetail.Key, 'MEDCLRSOR') == 0
              ) {
                CommonDomainValues.MedicationClerking =
                  new ObservableCollection<CValuesetTerm>();
                objDomainDetail.Value.forEach((oCListItem) => {
                  CommonDomainValues.MedicationClerking.Add(
                    ObjectHelper.CreateObject(new CValuesetTerm(), {
                      csCode: oCListItem.Value,
                      csDescription: oCListItem.DisplayText,
                    })
                  );
                });
              }
              break;
            case 'MASLOTSTATUSCODE':
              MedicationCommonConceptCodeData.MedAdminSlotStatus =
                new ObservableCollection<CValuesetTerm>();
              objDomainDetail.Value.forEach((oCListItem) => {
                MedicationCommonConceptCodeData.MedAdminSlotStatus.Add(
                  ObjectHelper.CreateObject(new CValuesetTerm(), {
                    csCode: oCListItem.Value,
                    csDescription: oCListItem.DisplayText,
                  })
                );
              });
              break;
            case 'MEDDOSE':
              MedDoseTypeConceptCodeData.ConceptCodes = new Dictionary<
                string,
                string
              >();
              objDomainDetail.Value.forEach((oCListItem) => {
                MedDoseTypeConceptCodeData.ConceptCodes.Add(
                  oCListItem.Value,
                  oCListItem.DisplayText
                );
              });
              break;
            case 'INFUSIONTYPE':
              InfusionTypeConceptCodeData.ConceptCodes =
                new ObservableCollection<CValuesetTerm>();
              objDomainDetail.Value.forEach((oCListItem) => {
                InfusionTypeConceptCodeData.ConceptCodes.Add(
                  ObjectHelper.CreateObject(new CValuesetTerm(), {
                    csCode: oCListItem.Value,
                    csDescription: oCListItem.DisplayText,
                  })
                );
              });
              break;
            case 'NFREASON':
              ConceptCodeData.NFREASON =
                new ObservableCollection<CValuesetTerm>();
              (objDomainDetail.Value as List<CListItem>).forEach(
                (oCListItem) => {
                  ConceptCodeData.NFREASON.Add(
                    ObjectHelper.CreateObject(new CValuesetTerm(), {
                      csCode: oCListItem.Value,
                      csDescription: oCListItem.DisplayText,
                    })
                  );
                }
              );
              break;
            case 'HUMIDIFICATION':
              InfHumdificationConceptCodeData.ConceptCodes =
                new ObservableCollection<CListItem>();
              (objDomainDetail.Value as List<CListItem>).forEach(
                (oCListItem) => {
                  InfHumdificationConceptCodeData.ConceptCodes.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: oCListItem.Value,
                      DisplayText: oCListItem.DisplayText,
                    })
                  );
                }
              );
              break;
            case 'RM_UNIT_MEASURE':
              ConceptCodeData.RM_UNIT_MEASURE =
                new ObservableCollection<CValuesetTerm>();
              (objDomainDetail.Value as List<CListItem>).forEach(
                (oCListItem) => {
                  ConceptCodeData.RM_UNIT_MEASURE.Add(
                    ObjectHelper.CreateObject(new CValuesetTerm(), {
                      csCode: oCListItem.Value,
                      csDescription: oCListItem.DisplayText,
                    })
                  );
                }
              );
              break;
            case 'DRCERRORCODE':
              DRCErrorCodeConceptCodeData.ConceptCodes =
                new ObservableCollection<CListItem>();
              (objDomainDetail.Value as List<CListItem>).forEach(
                (oCListItem) => {
                  DRCErrorCodeConceptCodeData.ConceptCodes.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: oCListItem.Value,
                      DisplayText: oCListItem.DisplayText,
                    })
                  );
                }
              );
              break;
            case 'OVRDREASON':
              IndicationOverrideReason.ConceptCodes =
                new ObservableCollection<CListItem>();
              (objDomainDetail.Value as List<CListItem>).forEach(
                (oCListItem) => {
                  IndicationOverrideReason.ConceptCodes.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: oCListItem.Value,
                      DisplayText: oCListItem.DisplayText,
                    })
                  );
                }
              );
              break;
            case 'TITRDSINST':
              TitratedDoseInstructions.ConceptCodes =
                new ObservableCollection<CListItem>();
              (objDomainDetail.Value as List<CListItem>).forEach(
                (oCListItem) => {
                  TitratedDoseInstructions.ConceptCodes.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: oCListItem.Value,
                      DisplayText: oCListItem.DisplayText,
                    })
                  );
                }
              );
              break;
            case ValueDomain.MEDURGENCY:
              RequestUrgency.ConceptCodes = new Dictionary<string, string>();
              (objDomainDetail.Value as List<CListItem>).forEach(
                (oCListItem) => {
                  RequestUrgency.ConceptCodes.Add(
                    oCListItem.Value,
                    oCListItem.DisplayText
                  );
                }
              );
              break;
            case 'MedCLMSDispenseStat':
              DispenseStatusListConceptCodeData.ConceptCodes =
                new ObservableCollection<CValuesetTerm>();
              objDomainDetail.Value.forEach((oCListItem) => {
                DispenseStatusListConceptCodeData.ConceptCodes.Add(
                  ObjectHelper.CreateObject(new CValuesetTerm(), {
                    csCode: oCListItem.Value,
                    csDescription: oCListItem.DisplayText,
                  })
                );
              });
              break;
            case 'REQDOSE':
              DCReqDoseSecondUOMConceptCodes.ConceptCodes =
                new ObservableCollection<CValuesetTerm>();
              objDomainDetail.Value.forEach((oCListItem) => {
                DCReqDoseSecondUOMConceptCodes.ConceptCodes.Add(
                  ObjectHelper.CreateObject(new CValuesetTerm(), {
                    csCode: oCListItem.Value,
                    csDescription: oCListItem.DisplayText,
                  })
                );
              });
              break;
            case 'DSOVRACKWRSN':
              DCOverridereasonConceptCodes.ConceptCodes =
                new ObservableCollection<CValuesetTerm>();
              objDomainDetail.Value.forEach((oCListItem) => {
                DCOverridereasonConceptCodes.ConceptCodes.Add(
                  ObjectHelper.CreateObject(new CValuesetTerm(), {
                    csCode: oCListItem.Value,
                    csDescription: oCListItem.DisplayText,
                  })
                );
              });
              break;
            case ValueDomain.Supplystatus:
            case 'MedSupplystatus': {
              if (DomainValuesForTechValidate.SupplyRequest == null) {
                DomainValuesForTechValidate.SupplyRequest =
                  new ObservableCollection<CListItem>();
                DomainValuesForTechValidate.SupplyRequest.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: '<Select>',
                    Value: Resource.TechValidate.Empty,
                  })
                );
                (objDomainDetail.Value as List<CListItem>).forEach(
                  (oCListItem) => {
                    DomainValuesForTechValidate.SupplyRequest.Add(
                      ObjectHelper.CreateObject(new CListItem(), {
                        Value: oCListItem.Value,
                        DisplayText: oCListItem.DisplayText,
                      })
                    );
                  }
                );
              }
              break;
            }
          }
        });
      }
      ViewDomainCodes =
        ValueDomain.TreatmentToContinue +
        ',' +
        ValueDomain.Duration +
        ',' +
        ValueDomain.DispensingInstruction +
        ',' +
        ValueDomain.SupplyInstruction +
        ',' +
        ValueDomain.Supplystatus;
      ProcessRTE.GetValuesByDomainCodes(ViewDomainCodes, (s, e) => {
        this.OnRTEViewResult(s);
        this.rteLoaded = true;
      });
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient
        ) == 0
      ) {
        this.SupplyRequestVisibility = Visibility.Visible;
      }
      this.MedicationCommonBB_ConceptCodesCompletedEvent();
    } else if (String.Compare(args.Request, ValueDomain.ConflictsReason) == 0) {
      this.FormViewerReason = new ObservableCollection<CListItem>();
      (args.Result as List<CListItem>).forEach((oCListItem) => {
        this.FormViewerReason.Add(oCListItem);
      });
      this.objNewItemVM.FormViewerDetails.AuthoriseReason =
        this.FormViewerReason;
      this.objNewItemVM.FormViewerDetails.ClinicalVerifyReason =
        this.FormViewerReason;
      this.objNewItemVM.FormViewerDetails.ConflictsReason =
        this.FormViewerReason;
    } else if (String.Compare(args.Request, ValueDomain.ReconcileReason) == 0) {
      this.oLstItemReconcileCombo = new ObservableCollection<CListItem>();
      (args.Result as List<CListItem>).forEach((oCListItem) => {
        this.oLstItemReconcileCombo.Add(oCListItem);
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Inpatient,
            StringComparison.CurrentCultureIgnoreCase
          ) != 0 &&
          oCListItem.Value == 'CC_WTHOLDUNTLDSCHRG'
        ) {
          this.oLstItemReconcileCombo.Remove(oCListItem);
        }
      });
      let RemoveItems: IEnumerable<number> = null;
      RemoveItems = this.oLstItemReconcileCombo
        .Where(
          (Cancelreason) =>
            Cancelreason.Value == 'CC_PRESINERR' ||
            Cancelreason.Value == 'CC_MEDENTEREDINERROR'
        )
        .Select((Cancelreason) =>
          this.oLstItemReconcileCombo.IndexOf(Cancelreason)
        );
      if (RemoveItems != null && RemoveItems.Count() > 0) {
        let orderedIndex: IOrderedEnumerable<number> =
          RemoveItems.OrderByDescending((x) => x);      
                orderedIndex.forEach((RemoveIdx) => {
                    this.oLstItemReconcileCombo.RemoveAt(RemoveIdx);
                });
                
      }
      this.GetNonReconciledDrugItems();
    }
    this.GetDomainvalues();
  }
  public GetDomainvalues(): void {
    ProcessRTE.GetAllReferenceCodesByDomain(
      ValueDomain.Duration,
      ValueSet.RVPeriodUOM,
      (s, e) => {
        this.OnRTEResultReviewAfter(s);
      }
    );
  }
  OnRTEResultReviewAfter(args: RTEEventargs): void {
    if (String.IsNullOrEmpty(args.Request) || args.Result == null) return;
    if (
      String.Equals(
        args.Request,
        ValueDomain.Duration + ',' + ValueSet.RVPeriodUOM
      )
    ) {
      if (args.Result instanceof Dictionary) {
        let objResult: Dictionary<string, List<CListItem>> = <
          Dictionary<string, List<CListItem>>
        >args.Result;
        objResult.forEach((objDomainDetail) => {
          if (String.Equals(objDomainDetail.Key, ValueDomain.Duration)) {
            if (
              ReviewAfterUOMList.ConceptCodes == null ||
              (ReviewAfterUOMList.ConceptCodes != null &&
                ReviewAfterUOMList.ConceptCodes.Count == 0)
            ) {
              ReviewAfterUOMList.ConceptCodes =
                new ObservableCollection<CListItem>();
              (objDomainDetail.Value as List<CListItem>).forEach(
                (oCListItem) => {
                  ReviewAfterUOMList.ConceptCodes.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: oCListItem.Value,
                      DisplayText: oCListItem.DisplayText,
                    })
                  );
                }
              );
            }
            return;
          }
        });
      }
    }
  }
  public GetPermissionsDetails(): void {
    if (!String.IsNullOrEmpty(CPremission.sPremission)) {
      let arrPresmission: string[] = CPremission.sPremission.Split(',');
      let _TmpPermissionCount: number = arrPresmission.Count();
      if (_TmpPermissionCount > 0) {
        UserPermissions.CanReorder =
          String.Compare(arrPresmission[0], '1') == 0;
        UserPermissions.CanHoldUnhold =
          String.Compare(arrPresmission[1], '1') == 0;
        UserPermissions.CanAddFavourites =
          String.Compare(arrPresmission[2], '1') == 0;
        UserPermissions.Cancanceldiscontinuedrugs =
          String.Compare(arrPresmission[3], '1') == 0;
        UserPermissions.CancanceldiscontinuedOwnrugs =
          String.Compare(arrPresmission[4], '1') == 0;
        UserPermissions.CanAuthorise =
          String.Compare(arrPresmission[5], '1') == 0;
        UserPermissions.PrescribeWithRestriction =
          String.Compare(arrPresmission[6], '1') == 0;
        UserPermissions.CanPresWithAuth = false;
        UserPermissions.CanAmend = String.Compare(arrPresmission[8], '1') == 0;
        UserPermissions.CanViewObservations = String.Equals(
          arrPresmission[10],
          '1',
          StringComparison.OrdinalIgnoreCase
        );
        UserPermissions.CanViewResults = String.Equals(
          arrPresmission[11],
          '1',
          StringComparison.OrdinalIgnoreCase
        );
        UserPermissions.CanEnableMedChart =
          String.Compare(arrPresmission[12], '1') == 0;
        if (_TmpPermissionCount > 13) {
          UserPermissions.CanViewFBChart =
            String.Compare(arrPresmission[13], '1') == 0;
        }
        if (_TmpPermissionCount > 14) {
          UserPermissions.CanPrescribeDrugs = String.Equals(
            arrPresmission[arrPresmission.length - 1],
            '1',
            StringComparison.OrdinalIgnoreCase
          );
        }
      }
    } else {
      let arrResourceNames: string[] = [
        'MED_BUT_REODR_P2',
        'MED_BUT_HLD_P2',
        'MED_BUT_FAV_P2',
        'MED_BUT_DISCONDRG_P2',
        'MED_BUT_DISCON_OW_P2',
        'PM_AUTH_DRG_P2',
        'MED_BUT_AMEND_P2',
      ];
      SLSecurityAccess.CheckAccess('CA', arrResourceNames, (s, e) => {
        this.MyHandler(s, e);
      });
      UserPermissions.PrescribeWithRestriction =
        PrescriptionHelper.CheckPermission(
          'PM_PRESC_RESTICT',
          'Can prescribe with restriction'
        );
      UserPermissions.CanPresWithAuth = false;
      UserPermissions.CanAccessSealLock = PrescriptionHelper.CheckPermission(
        'CAN_ACCESS_SEAL_LOCK',
        'Can access sealed information by breaking the seal'
      );
      UserPermissions.CanEnableMedChart = PrescriptionHelper.CheckPermission(
        'PM_Can_View_MedChart',
        'Can view medication chart'
      );
    }
  }
  Sequentialvalid: boolean = true;
  IsNexBtnClicked: boolean = false;
  IsCallFromMoveNext: boolean = false;
  public override OnValidate(action: WizardAction): boolean {
    if (this.IsFrameworkLoadingInProgress && action == WizardAction.Next) {
      this.IsFrameworkLoadingInProgress = false;
      return true;
    }
    let bValidated: boolean = true;
    if (this.MedsResolve != null) {
      let itemsMandatory: IEnumerable<string> = this.MedsResolve.Where(
        (oItems) =>
          (String.Compare(
            oItems.OperationMode,
            'N',
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            oItems.OperationMode == null) &&
          (oItems.TrafficSymbol == ConflictIcons.Red ||
            oItems.TrafficIconResolve == ConflictIcons.Red) &&
          !String.Equals(
            oItems.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.COMPLETED,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            oItems.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.DISCONTINUED,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            oItems.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.CANCELLED,
            StringComparison.InvariantCultureIgnoreCase
          )
      ).Select(
        (oItems) => oItems.FormViewerDetails.BasicDetails.IdentifyingName
      );
      let itemsHoldMandatory: IEnumerable<string> = this.MedsResolve.Where(
        (oItems) =>
          String.Compare(
            oItems.OperationMode,
            'N',
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          (oItems.TrafficSymbol == ConflictIcons.Red ||
            oItems.TrafficIconResolve == ConflictIcons.Red) &&
          oItems.PrescriptionItemStatus == PrescriptionItemStatusCodes.ONHOLD
      ).Select(
        (oItems) => oItems.FormViewerDetails.BasicDetails.IdentifyingName
      );
      let itemsUnHoldMandatory: IEnumerable<string> = this.MedsResolve.Where(
        (oItems) =>
          (String.Compare(
            oItems.OperationMode,
            'N',
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            String.Compare(
              oItems.OperationMode,
              'U',
              StringComparison.OrdinalIgnoreCase
            ) == 0) &&
          (oItems.TrafficSymbol == ConflictIcons.Red ||
            oItems.TrafficIconResolve == ConflictIcons.Red) &&
          oItems.PrescriptionItemStatusCode ==
            PrescriptionItemStatusCodes.ONHOLD &&
          oItems.IsHold == false
      ).Select(
        (oItems) => oItems.FormViewerDetails.BasicDetails.IdentifyingName
      );
      let AAitemsMandatory: IEnumerable<string> = this.MedsResolve.Where(
        (oItems) =>
          (oItems.TrafficSymbol == ConflictIcons.Red ||
            oItems.TrafficIconResolve == ConflictIcons.Red) &&
          (String.IsNullOrEmpty(oItems.PrescriptionItemStatus) ||
            String.Equals(
              oItems.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            )) &&
          !oItems.IsFormViewerDisable
      ).Select(
        (oItems) => oItems.FormViewerDetails.BasicDetails.IdentifyingName
      );
      if (
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        AAitemsMandatory != null &&
        AAitemsMandatory.Count() > 0
      ) {
        bValidated = false;
        let oMessage: iMessageBox = new iMessageBox();
        oMessage.Title = 'Lorenzo';
        oMessage.Message =
          'There are medications awaiting authorisation that have mandated conflicts to process please open and action';
        oMessage.MessageButton = MessageBoxButton.OK;
        oMessage.IconType = MessageBoxType.Information;
        oMessage.Height = Number.NaN;
        oMessage.Show();
      } else if (
        (itemsMandatory != null &&
          itemsMandatory.Count() > 0 &&
          itemsHoldMandatory.Count() <= 0) ||
        (itemsUnHoldMandatory != null && itemsUnHoldMandatory.Count() > 0)
      ) {
        if (
          !this.AAConflict &&
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          bValidated = false;
          this.AAConflict = true;
          let oMessage: iMessageBox = new iMessageBox();
          oMessage.Title = 'Lorenzo';
          oMessage.Message =
            'There are one or more Allergy or Health Issue related conflicts for the patients prescribed medications. Please open Inpatient/For Administration prescribing to process';
          oMessage.MessageButton = MessageBoxButton.OK;
          oMessage.IconType = MessageBoxType.Information;
          oMessage.Height = Number.NaN;
          oMessage.Show();
        } else if (
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          bValidated = false;
          let oMessage: iMessageBox = new iMessageBox();
          oMessage.Title = 'Lorenzo';
          oMessage.Message = String.Format(
            Resource.MedicationForm.Finish_ValidateMsg,
            String.Join(', ', itemsMandatory.ToArray())
          );
          oMessage.MessageButton = MessageBoxButton.OK;
          oMessage.IconType = MessageBoxType.Information;
          oMessage.Height = Number.NaN;
          oMessage.Show();
        }
      }
    }
    if (bValidated && action == WizardAction.Next) {
      if (
        !this.IsCallFromMoveNext &&
        (this.CACode == 'MN_MEDDISCHRGESL_P2' ||
          this.CACode == 'MN_MEDINPATSL_P2')
      ) {
        this.IsNexBtnClicked = true;
        this.GetNonReconciledItems();
        return false;
      } else {
        this.ActionValue = 'N';
      }
    } else if (action == WizardAction.Finish) {
    }
    return bValidated;
  }
  //to be reviewed by PF added for validation check for all CA Finish 13-09
  public  OnValidateAsync(action?: WizardAction): Observable<boolean>{
    return new Observable((subscriber) => {
      if (this.IsFrameworkLoadingInProgress && action == WizardAction.Next) {
        this.IsFrameworkLoadingInProgress = false;
        subscriber.next(true);
        subscriber.complete();
      }
      let bValidated: boolean = true;
      if (this.MedsResolve != null) {
        let itemsMandatory: IEnumerable<string> = this.MedsResolve.Where(
          (oItems) =>
            (String.Compare(
              oItems.OperationMode,
              'N',
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
              oItems.OperationMode == null) &&
            (oItems.TrafficSymbol == ConflictIcons.Red ||
              oItems.TrafficIconResolve == ConflictIcons.Red) &&
            !String.Equals(
              oItems.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !String.Equals(
              oItems.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.DISCONTINUED,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !String.Equals(
              oItems.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.CANCELLED,
              StringComparison.InvariantCultureIgnoreCase
            )
        ).Select(
          (oItems) => oItems.FormViewerDetails.BasicDetails.IdentifyingName
        );
        let itemsHoldMandatory: IEnumerable<string> = this.MedsResolve.Where(
          (oItems) =>
            String.Compare(
              oItems.OperationMode,
              'N',
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            (oItems.TrafficSymbol == ConflictIcons.Red ||
              oItems.TrafficIconResolve == ConflictIcons.Red) &&
            oItems.PrescriptionItemStatus == PrescriptionItemStatusCodes.ONHOLD
        ).Select(
          (oItems) => oItems.FormViewerDetails.BasicDetails.IdentifyingName
        );
        let itemsUnHoldMandatory: IEnumerable<string> = this.MedsResolve.Where(
          (oItems) =>
            (String.Compare(
              oItems.OperationMode,
              'N',
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
              String.Compare(
                oItems.OperationMode,
                'U',
                StringComparison.OrdinalIgnoreCase
              ) == 0) &&
            (oItems.TrafficSymbol == ConflictIcons.Red ||
              oItems.TrafficIconResolve == ConflictIcons.Red) &&
            oItems.PrescriptionItemStatusCode ==
              PrescriptionItemStatusCodes.ONHOLD &&
            oItems.IsHold == false
        ).Select(
          (oItems) => oItems.FormViewerDetails.BasicDetails.IdentifyingName
        );
        let AAitemsMandatory: IEnumerable<string> = this.MedsResolve.Where(
          (oItems) =>
            (oItems.TrafficSymbol == ConflictIcons.Red ||
              oItems.TrafficIconResolve == ConflictIcons.Red) &&
            (String.IsNullOrEmpty(oItems.PrescriptionItemStatus) ||
              String.Equals(
                oItems.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
                StringComparison.InvariantCultureIgnoreCase
              )) &&
            !oItems.IsFormViewerDisable
        ).Select(
          (oItems) => oItems.FormViewerDetails.BasicDetails.IdentifyingName
        );
        if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          AAitemsMandatory != null &&
          AAitemsMandatory.Count() > 0
        ) {
          bValidated = false;
          let oMessage: iMessageBox = new iMessageBox();
          oMessage.Title = 'Lorenzo';
          oMessage.Message =
            'There are medications awaiting authorisation that have mandated conflicts to process please open and action';
          oMessage.MessageButton = MessageBoxButton.OK;
          oMessage.IconType = MessageBoxType.Information;
          oMessage.Height = Number.NaN;
          oMessage.Show();
        } else if (
          (itemsMandatory != null &&
            itemsMandatory.Count() > 0 &&
            itemsHoldMandatory.Count() <= 0) ||
          (itemsUnHoldMandatory != null && itemsUnHoldMandatory.Count() > 0)
        ) {
          if (
            !this.AAConflict &&
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            Busyindicator.SetStatusIdle('FINISH');
            bValidated = false;
            this.AAConflict = true;
            let oMessage: iMessageBox = new iMessageBox();
            oMessage.Title = 'Lorenzo';
            oMessage.Message =
              'There are one or more Allergy or Health Issue related conflicts for the patients prescribed medications. Please open Inpatient/For Administration prescribing to process';
            oMessage.MessageButton = MessageBoxButton.OK;
            oMessage.IconType = MessageBoxType.Information;
            oMessage.Height = Number.NaN;
            oMessage.Show();
          } else if (
            !String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            bValidated = false;
            let oMessage: iMessageBox = new iMessageBox();
            oMessage.Title = 'Lorenzo';
            oMessage.Message = String.Format(
              Resource.MedicationForm.Finish_ValidateMsg,
              String.Join(', ', itemsMandatory.ToArray())
            );
            oMessage.MessageButton = MessageBoxButton.OK;
            oMessage.IconType = MessageBoxType.Information;
            oMessage.Height = Number.NaN;
            // oMessage.MessageBoxClose  = (s,e) => { ObjectHelper.stopFinishAndCancelEvent(false); } ;
            oMessage.Show();
            // ObjectHelper.stopFinishAndCancelEvent(true);
            ObjectHelper.stopScreenFreezeEvent(true);
          }
        }
      }
      if (bValidated && action == WizardAction.Next) {
        if (
          !this.IsCallFromMoveNext &&
          (this.CACode == 'MN_MEDDISCHRGESL_P2' ||
            this.CACode == 'MN_MEDINPATSL_P2')
        ) {
          this.IsNexBtnClicked = true;
          this.GetNonReconciledItems();
            subscriber.next(false);
            subscriber.complete();
        } else {
          this.ActionValue = 'N';
        }
      } else if (action == WizardAction.Finish) {
     }
       subscriber.next(bValidated);
       subscriber.complete();
    });
    } 

  oMessage_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      this.Sequentialvalid = false;
    }
  }
  public override OnNext(): void {
    this.IsNexBtnClicked = false;
    this.IsReconNextPrev = true;
    super.OnNext();
  }
  public override OnPrevious(): void {
    super.OnPrevious();
    this.ActionValue = 'P';
    this.IsCallFromMoveNext = false;
  }
  public override OnFinish(): void {
    //Not Required for LHS. To be Re-Visited.
    //AppSession.SetString("SUB_WIZ", this.AppContext.MenuCode);
    super.OnFinish();
  }
  public override OnFinishNow(): void {
    super.OnFinishNow();
  }
  public override OnCancel(): void {
    if (
      String.Equals(
        this.WizardContext['LaunchingCACode'],
        CConstants.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      let sResult: string = String.Empty;
      let sMenuCode: string = !String.IsNullOrEmpty(
        this.WizardContext['MenuCode']
      )
        ? this.WizardContext['MenuCode']
        : String.Empty;
      let keycode: string = String.Empty;
      let lockduration: number = MedicationConstants.CConstants.LockDuration;
      let _LockedUserDetails: LockedUsersDetails;
      let bResult: boolean = MedicationCommonBB.IsLockedByAnotherUser(
        sMenuCode,
        true,
        (o) => {
          _LockedUserDetails = o;
        }
      );
      let RequestLockedOID: string = String.Empty;
      if (
        _LockedUserDetails != null &&
        !String.IsNullOrEmpty(_LockedUserDetails.MedChartOID)
      ) {
        RequestLockedOID = _LockedUserDetails.MedChartOID;
      } else {
        RequestLockedOID = PatientContext.EncounterOid.ToString();
      }
      keycode =
        _LockedUserDetails != null &&
        !String.IsNullOrEmpty(_LockedUserDetails.ActivityLock)
          ? _LockedUserDetails.ActivityLock
          : String.Empty;
      sResult = ObjectHelper.CreateType<string>(
        HtmlPage.Window.Invoke(
          'DeactivatePessimisticLock',
          RequestLockedOID,
          keycode,
          lockduration
        ),
        'string'
      );
    }
    this.SetWizardContextDataForRecAllergy();
    super.OnCancel();
  }
  private SetWizardContextDataForRecAllergy(): void {
    if (MedChartData.IsAllergyRecorded) {
      // this.WizardContext['RecAllergy'] = Convert.ToString(
      //   MedChartData.IsAllergyRecorded
      // );
      this.WizardContext['RecAllergy'] = 'True';
      MedChartData.IsAllergyRecorded = false;
    }
  }
  public override OnReassign(): void {
    super.OnReassign();
  }
  public override OnSuspend(): void {
    this.SetWIZContextInormation('SUSPEND');
    super.OnSuspend();
  }
  private _mtIsSearch: boolean = false;
  public get IsSearchDisCanChecked(): boolean {
    return this._mtIsSearch;
  }
  public set IsSearchDisCanChecked(value: boolean) {
    if (this._mtIsSearch != value) {
      this._mtIsSearch = value;
      //OnPropertyChanged("IsSearchDisCanChecked");
      this.IsTabSelectionChanged = this._mtIsSearch;
    }
  }
  private _mtIsSearchDisComplete: boolean = false;
  public get IsSearchDisCompletedChecked(): boolean {
    return this._mtIsSearchDisComplete;
  }
  public set IsSearchDisCompletedChecked(value: boolean) {
    if (this._mtIsSearchDisComplete != value) {
      this._mtIsSearchDisComplete = value;
      //OnPropertyChanged("IsSearchDisCompletedChecked");
      this.IsTabSelectionChanged = this._mtIsSearchDisComplete;
      this.select.next('check/uncheck');
      let obj ={
        event:value,
        counter: 0
      }
      if(value){
        Busyindicator.SetStatusBusy1("colourchange")
      }
      this.colorChange.next(obj);
    }
  }
  private _mtSrPrType: string;
  public get SearchPresType(): string {
    return this._mtSrPrType;
  }
  public set SearchPresType(value: string) {
    if (this._mtSrPrType != value) {
      this._mtSrPrType = value;
      //OnPropertyChanged("SearchPresType");
    }
  }
  private _mtDefPresType: string;
  public get DefSearchPresType(): string {
    return this._mtDefPresType;
  }
  public set DefSearchPresType(value: string) {
    if (this._mtDefPresType != value) {
      this._mtDefPresType = value;
      //OnPropertyChanged("DefSearchPresType");
      this.SearchPresType = this._mtDefPresType;
      this.BindTabsGrid();
    }
  }
  private _mtPrSearchDisFlag: string;
  public get ProfileSearchDiscontinuedDrugFlag(): string {
    return this._mtPrSearchDisFlag;
  }
  public set ProfileSearchDiscontinuedDrugFlag(value: string) {
    this._mtPrSearchDisFlag = value;
    //OnPropertyChanged("ProfileSearchDiscontinuedDrugFlag");
    this.BindTabsGrid();
  }
  private _mtTabSelChng: boolean = false;
  public get IsTabSelectionChanged(): boolean {
    return this._mtTabSelChng;
  }
  public set IsTabSelectionChanged(value: boolean) {
    this._mtTabSelChng = value;
    this.IsSearchDisCanCompleted();
  }
  public IsSearchDisCanCompleted(): void {
    // Busyindicator.SetStatusBusy('listviewchecked');
    if (!this.IsSearchDisCanChecked && this.IsSearchDisCompletedChecked) {
      this.ProfileSearchDiscontinuedDrugFlag = '7';
    }
    if (this.IsSearchDisCanChecked && !this.IsSearchDisCompletedChecked) {
      this.ProfileSearchDiscontinuedDrugFlag = '1';
    }
    if (this.IsSearchDisCanChecked && this.IsSearchDisCompletedChecked) {
      this.ProfileSearchDiscontinuedDrugFlag = '2';
    }
    if (!this.IsSearchDisCanChecked && !this.IsSearchDisCompletedChecked) {
      this.ProfileSearchDiscontinuedDrugFlag = 'X';
    }
  }
  //Revisit required, in silverlight there is no new instantiation.
  private _mtEncGrid: ObservableCollection<EncounterVM> = new ObservableCollection<EncounterVM>();
  public get EncounterGrid(): ObservableCollection<EncounterVM> {
    return this._mtEncGrid;
  }
  public set EncounterGrid(value: ObservableCollection<EncounterVM>) {
    if (this._mtEncGrid != value) {
      //this._mtEncGrid = value;
      this._mtEncGrid.CopyFrom(value);
      //OnPropertyChanged("EncounterGrid");
    }
  }
  private _mtEncGridObj: EncounterVM;
  public get EncounterGridObj(): EncounterVM {
    return this._mtEncGridObj;
  }
  public set EncounterGridObj(value: EncounterVM) {
    if (this._mtEncGridObj != value) {
      this._mtEncGridObj = value;
      //OnPropertyChanged("EncounterGridObj");
      if (this._mtEncGridObj != null) {
        Common.LHSEncounterType = this.GridSelEncounterType =
          this._mtEncGridObj.EncounterType;
        Common.LHSEncounterOID = this._mtEncGridObj.EncounterID;
      }
      if (String.IsNullOrEmpty(this.EncounterLabelDetails)) {
        this.SetEncounterLabel();
      }
    }
  }
  private _mtEnclblDet: string;
  public get EncounterLabelDetails(): string {
    return this._mtEnclblDet;
  }
  public set EncounterLabelDetails(value: string) {
    this._mtEnclblDet = value;
    //OnPropertyChanged("EncounterLabelDetails");
  }
  private _mtEncLHSColor: string = 'Black';
  public get EncounterLHSColorSet(): string {
    return this._mtEncLHSColor;
  }
  public set EncounterLHSColorSet(value: string) {
    this._mtEncLHSColor = value;
    //OnPropertyChanged("EncounterLHSColorSet");
  }
  private _mtMedExst: boolean = false;
  public get MedicationExist(): boolean {
    return this._mtMedExst;
  }
  public set MedicationExist(value: boolean) {
    this._mtMedExst = value;
    //OnPropertyChanged("MedicationExist");
  }
  private _mtGrdSelEncTyp: string;
  public get GridSelEncounterType(): string {
    return this._mtGrdSelEncTyp;
  }
  public set GridSelEncounterType(value: string) {
    this._mtGrdSelEncTyp = value;
    //OnPropertyChanged("GridSelEncounterType");
  }
  private _mtAllPrsTyp: string;
  public get AllPresTypes(): string {
    return this._mtAllPrsTyp;
  }
  public set AllPresTypes(value: string) {
    this._mtAllPrsTyp = value;
    //OnPropertyChanged("AllPresTypes");
    if (this.EncounterGridObj != null)
      PrescriptionHelper.GetMedicationCount(
        Convert.ToInt64(this.EncounterGridObj.EncounterID),
        this.AllPresTypes,
        (s, e) => {
          this.PatientCount_Completed(s, e);
        }
      );
    else if (
      String.Compare(
        this.WizardContext['EncDefOID'],
        this.WizardContext['ENCID']
      ) != 0
    )
      PrescriptionHelper.GetMedicationCount(
        Convert.ToInt64(PatientContext.EncounterOid),
        this.AllPresTypes,
        (s, e) => {
          this.PatientCount_Completed(s, e);
        }
      );
  }
  private _mtEncTyp: string;
  public get ViewEncounterType(): string {
    return this._mtEncTyp;
  }
  public set ViewEncounterType(value: string) {
    this._mtEncTyp = value;
    //OnPropertyChanged("ViewEncounterType");
  }
  private _mtEncOID: string;
  public get ViewEncounterOID(): string {
    return this._mtEncOID;
  }
  public set ViewEncounterOID(value: string) {
    this._mtEncOID = value;
    //OnPropertyChanged("ViewEncounterOID");
  }
  private BindTabsGrid(): void {
    if (
      String.IsNullOrEmpty(this.SearchPresType) ||
      this.SearchPresType.Equals(
        CConstants.TABGPCONNECT,
        StringComparison.OrdinalIgnoreCase
      )
    ) {
      Busyindicator.SetStatusIdle('listviewchecked');
      return;
    }
    if (this.EncounterGridObj != null)
      PrescriptionHelper.GetPatientMedications(
        this.SearchPresType,
        this.ProfileSearchDiscontinuedDrugFlag,
        Convert.ToInt64(this.EncounterGridObj.EncounterID),
        this,
        (s, e) => {
          if (this.rteLoaded) {
            this.ListView_GetPatientMedicationListCompleted(s, e);
          } else {
            if (this.refreshIntervalId1) clearInterval(this.refreshIntervalId1);
            this.refreshIntervalId1 = setInterval(() => {
              if (this.rteLoaded) {
                clearInterval(this.refreshIntervalId1);
                this.ListView_GetPatientMedicationListCompleted(s, e);
              }
            }, 100);
          }
        }
      );
    else if (MedicationCommonProfileData.MedViewConfig != null)
      PrescriptionHelper.GetPatientMedications(
        this.SearchPresType,
        this.ProfileSearchDiscontinuedDrugFlag,
        Convert.ToInt64(PatientContext.EncounterOid),
        this,
        (s, e) => {
          if (this.rteLoaded) {
            this.ListView_GetPatientMedicationListCompleted(s, e);
          } else {
            if (this.refreshIntervalId1) clearInterval(this.refreshIntervalId1);
            this.refreshIntervalId1 = setInterval(() => {
              if (this.rteLoaded) {
                clearInterval(this.refreshIntervalId1);
                this.ListView_GetPatientMedicationListCompleted(s, e);
              }
            }, 100);
          }
        }
      );
  }
  async GPConnect_GetGPConnectAdministrationCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetGPConnectAdministrationCompletedEventArgs
  ) {
    Busyindicator.SetStatusIdle('GpConnectList');
    let acuteHeader: string = 'ACUTE';
    let repeatType: string = 'REPEAT';
    let otherType: string = '';
    this.TempMedsGPConnect = new ObservableCollection<GPConnectItemVM>();
    let li: List<GPConnectItemVM> = new List<GPConnectItemVM>();
    if (e.Result != null && e.Result.objMedication != null) {
      if (
        e.Result.objMedication.ErrorFound &&
        !String.IsNullOrEmpty(e.Result.objMedication.ErrorMessage)
      ) {
        this.GPConnectGridNoRecordsText = e.Result.objMedication.ErrorMessage;
      }
      this.GPConnectWarningText = String.Empty;
      if (
        (e.Result.objMedication.WarningCodes != null &&
          e.Result.objMedication.WarningCodes.Count > 0) ||
        !String.IsNullOrEmpty(e.Result.objMedication.WarningNote)
      ) {
        let sShortText: string = String.Empty,
          sLongText = String.Empty;
        if (
          e.Result.objMedication.WarningCodes != null &&
          e.Result.objMedication.WarningCodes.Count > 0
        ) {
          sShortText = sLongText =
            'Information may not be complete for the following reasons: ' +
            String.Join(', ', e.Result.objMedication.WarningCodes.ToArray());
        }
        if (!String.IsNullOrEmpty(e.Result.objMedication.WarningNote)) {
          if (!String.IsNullOrEmpty(sShortText)) {
            sShortText += Environment.NewLine;
            sLongText += Environment.NewLine;
          }
          sShortText +=
            'NOTE: ' +
            e.Result.objMedication.WarningNote.Replace('\r\n', ' ').Replace(
              '\n',
              ' '
            );
          sLongText += 'NOTE: ' + e.Result.objMedication.WarningNote;
        }
        this.TmpGPConnectWarningTextShort = sShortText;
        this.TmpGPConnectWarningTextDetail = sLongText;
      } else {
        this.GPConnectWarningText =
          this.TmpGPConnectWarningTextShort =
          this.TmpGPConnectWarningTextDetail =
            null;
      }
      for (
        let i: number = 0;
        i < e.Result.objMedication.Administrations.Length;
        i++
      ) {
        let item: GPConnectItemVM = ObjectHelper.CreateObject(
          new GPConnectItemVM(),
          {
            GPConnectID:
              e.Result.objMedication.Administrations[i].GPConnectUniqueId,
            AllIdentifiers:
              e.Result.objMedication.Administrations[i].AllIdentifiers == null
                ? new GpConnectIdentifier()
                : e.Result.objMedication.Administrations[
                    i
                  ].AllIdentifiers.Select((x) =>
                    ObjectHelper.CreateObject(new GpConnectIdentifier(), {
                      IdentifierSystem: x.IdentifierSystem,
                      IdentifierValue: x.IdentifierValue,
                    })
                  ).ToArray(),
            MedicationItemDetail:
              e.Result.objMedication.Administrations[i].MedicationItemDetail,
            IsClerked: e.Result.objMedication.Administrations[i].IsClerked,
            LastIssued: e.Result.objMedication.Administrations[i].LastIssued,
            Quantity: e.Result.objMedication.Administrations[i].Quantity,
            MedicationCode:
              e.Result.objMedication.Administrations[i].MedicationCode,
            ItemTypeCode:
              e.Result.objMedication.Administrations[i].ItemTypeCode,
            ItemTypeDisplay:
              e.Result.objMedication.Administrations[i].ItemTypeDisplay,
            Dosage: e.Result.objMedication.Administrations[i].Dosages.Select(
              (x) =>
                ObjectHelper.CreateObject(new GPConnectAdminDosage(), {
                  Text: x.Text,
                  Instruction: x.Instruction,
                })
            ).ToArray(),
            StatusDisplay:
              e.Result.objMedication.Administrations[i].StatusDisplay,
          }
        );
        if (String.IsNullOrEmpty(item.ItemTypeCode)) {
          item.GroupName = otherType;
        } else if (
          item.ItemTypeCode.StartsWith(
            'acute',
            StringComparison.OrdinalIgnoreCase
          ) || item.ItemTypeCode.StartsWith(
            'delayed',
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          item.GroupName = acuteHeader;
        } else if (
          item.ItemTypeCode.StartsWith(
            'repeat',
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          item.GroupName = repeatType;
        } else {
          item.GroupName = otherType;
        }
        li.Add(item);
      }
      li = li
        .OrderBy((x) => x.GroupName)
        .ThenByDescending((x) => x.LastIssued)
        .ThenBy((x) => (x.StatusDisplay == GPcStatus.Active ? 1 : 2))
        .OrderBy((x) => x.GroupName).ToList();
      if (li.Count > 0 && !String.IsNullOrEmpty(li[0].GroupName))
        this.TempMedsGPConnect.Add(
          ObjectHelper.CreateObject(new GPConnectItemVM(), {
            IsGroupheader: true,
            GroupName: li[0].GroupName,
            MedicationItemDetail: li[0].GroupName,
            AllIdentifiers: li[0].AllIdentifiers,
            IsClerked: true,
          })
        );
      for (let i: number = 0; i < li.Count; i++) {
        if (i > 0 && li[i - 1].GroupName != li[i].GroupName) {
          this.TempMedsGPConnect.Add(
            ObjectHelper.CreateObject(new GPConnectItemVM(), {
              IsGroupheader: true,
              GroupName: li[i].GroupName,
              MedicationItemDetail: li[i].GroupName,
              AllIdentifiers: li[i].AllIdentifiers,
              IsClerked: true,
            })
          );
        }
        this.TempMedsGPConnect.Add(li[i]);
      }
    }
    if (this.TempMedsGPConnect != null && this.TempMedsGPConnect.Count > 0) {
      await this.PromptDIConsent();
    }
  }
  ListView_GetPatientMedicationListCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetPatientMedicationListCompletedEventArgs
  ): void {
    if (e.Error != null) return;
    let objResList: IPPMAManagePrescSer.CResMsgGetPatientMedicationList =
      e.Result;
    if (
      e.Result != null &&
      e.Result.oViewData != null &&
      !String.IsNullOrEmpty(e.Result.oViewData.ClinicalEncouterOIDCollection)
    ) {
      if (
        this.EncounterGridObj == null ||
        (this.EncounterGridObj != null &&
          String.Equals(
            this.EncounterGridObj.EncounterID,
            PatientContext.EncounterOid.ToString()
          ))
      ) {
        this.ClinicalEncounterOID =
          e.Result.oViewData.ClinicalEncouterOIDCollection;
      }
    }
    let _IsClosedEncounterForMedListGrid: boolean = false;
    if (
      this.EncounterGridObj != null &&
      !String.IsNullOrEmpty(this.EncounterGridObj.EncounterID)
    ) {
      if (
        PatientContext.EncounterOid > 0 &&
        PatientContext.EncounterOid.ToString() ==
          this.EncounterGridObj.EncounterID
      ) {
        _IsClosedEncounterForMedListGrid = Common.IsClosedEncounter();
      } else if (
        !String.IsNullOrEmpty(this.EncounterGridObj.EncounterStatus) &&
        String.Equals(
          this.EncounterGridObj.EncounterStatus,
          'Closed',
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        _IsClosedEncounterForMedListGrid = true;
      }
    } else {
      _IsClosedEncounterForMedListGrid = Common.IsClosedEncounter();
    }
    let lstReorderDrugs: List<number>;
    if (
      !(
        objResList instanceof
        IPPMAManagePrescSer.CResMsgGetPatientMedicationList
      )
    )
      return;
    this.ViewDisComp72HRsLHS = String.Empty;
    switch (this.SearchPresType) {
      case 'CC_MEDCLERK1':
        lstReorderDrugs = new List<number>();
        if (this.MedsClerked != null) {
          lstReorderDrugs = this.MedsClerked.Where(
            (x) => !x.IsReoderIconEnable && x.PrescriptionItemOID > 0
          )
            .Select((s) => s.PrescriptionItemOID)
            .ToList();
        }
        if (
          lstReorderDrugs != null &&
          lstReorderDrugs.Count > 0 &&
          objResList.oPrescriptionItemView != null &&
          objResList.oPrescriptionItemView.Count > 0
        ) {
          let count: number = lstReorderDrugs.Count;
          for (let i: number = 0; i < count; i++) {
            objResList.oPrescriptionItemView.ForEach((Reinsert) => {
              if (Reinsert.oPrescriptionItem.OID == lstReorderDrugs[i]) {
                Reinsert.oPrescriptionItem.IsReoderIconEnable = '1';
              }
            });
          }
        }
        this.MedsClerked = PrescriptionHelper.FillPrescriptionItemVM(
          objResList.oPrescriptionItemView,
          _IsClosedEncounterForMedListGrid
        );
        if (this.MedsClerked == null || this.MedsClerked.Count <= 0)
          this.NoRecordsText = 'No records to show';
        else this.CompletedItemMsg('LHS', 'CC_MEDCLERK1');
        break;
      case 'CC_Patientleave':
        lstReorderDrugs = new List<number>();
        if (this.MedsLeave != null) {
          lstReorderDrugs = this.MedsLeave.Where(
            (x) => !x.IsReoderIconEnable && x.PrescriptionItemOID > 0
          )
            .Select((s) => s.PrescriptionItemOID)
            .ToList();
        }
        if (
          lstReorderDrugs != null &&
          lstReorderDrugs.Count > 0 &&
          objResList.oPrescriptionItemView != null &&
          objResList.oPrescriptionItemView.Count > 0
        ) {
          let count: number = lstReorderDrugs.Count;
          for (let i: number = 0; i < count; i++) {
            objResList.oPrescriptionItemView.ForEach((Reinsert) => {
              if (Reinsert.oPrescriptionItem.OID == lstReorderDrugs[i]) {
                Reinsert.oPrescriptionItem.IsReoderIconEnable = '1';
              }
            });
          }
        }
        this.MedsLeave = PrescriptionHelper.FillPrescriptionItemVM(
          objResList.oPrescriptionItemView,
          _IsClosedEncounterForMedListGrid
        );
        if (this.MedsLeave == null || this.MedsLeave.Count <= 0)
          this.NoRecordsText = 'No records to show';
        else this.CompletedItemMsg('LHS', 'CC_Patientleave');
        break;
      case 'CC_DSCHRG':
        lstReorderDrugs = new List<number>();
        if (this.MedsDischarge != null) {
          lstReorderDrugs = this.MedsDischarge.Where(
            (x) => !x.IsReoderIconEnable && x.PrescriptionItemOID > 0
          )
            .Select((s) => s.PrescriptionItemOID)
            .ToList();
        }
        if (
          lstReorderDrugs != null &&
          lstReorderDrugs.Count > 0 &&
          objResList.oPrescriptionItemView != null &&
          objResList.oPrescriptionItemView.Count > 0
        ) {
          let count: number = lstReorderDrugs.Count;
          for (let i: number = 0; i < count; i++) {
            objResList.oPrescriptionItemView.ForEach((Reinsert) => {
              if (Reinsert.oPrescriptionItem.OID == lstReorderDrugs[i]) {
                Reinsert.oPrescriptionItem.IsReoderIconEnable = '1';
              }
            });
          }
        }
        this.MedsDischarge = PrescriptionHelper.FillPrescriptionItemVM(
          objResList.oPrescriptionItemView,
          _IsClosedEncounterForMedListGrid
        );
        if (this.MedsDischarge == null || this.MedsDischarge.Count <= 0)
          this.NoRecordsText = 'No records to show';
        else this.CompletedItemMsg('LHS', 'CC_DSCHRG');
        break;
      case 'CC_MED_TYP_OP':
        lstReorderDrugs = new List<number>();
        if (this.MedsOutPatient != null) {
          lstReorderDrugs = this.MedsOutPatient.Where(
            (x) => !x.IsReoderIconEnable && x.PrescriptionItemOID > 0
          )
            .Select((s) => s.PrescriptionItemOID)
            .ToList();
        }
        if (
          lstReorderDrugs != null &&
          lstReorderDrugs.Count > 0 &&
          objResList.oPrescriptionItemView != null &&
          objResList.oPrescriptionItemView.Count > 0
        ) {
          let count: number = lstReorderDrugs.Count;
          for (let i: number = 0; i < count; i++) {
            objResList.oPrescriptionItemView.ForEach((Reinsert) => {
              if (Reinsert.oPrescriptionItem.OID == lstReorderDrugs[i]) {
                Reinsert.oPrescriptionItem.IsReoderIconEnable = '1';
              }
            });
          }
        }
        this.MedsOutPatient = PrescriptionHelper.FillPrescriptionItemVM(
          objResList.oPrescriptionItemView,
          _IsClosedEncounterForMedListGrid
        );
        if (this.MedsOutPatient == null || this.MedsOutPatient.Count <= 0)
          this.NoRecordsText = 'No records to show';
        else this.CompletedItemMsg('LHS', 'CC_MED_TYP_OP');
        break;
      case 'CC_FOR_ADMIN':
      case 'CC_FRADMINSTN':
        lstReorderDrugs = new List<number>();
        if (this.MedsInPatient != null) {
          lstReorderDrugs = this.MedsInPatient.Where(
            (x) => !x.IsReoderIconEnable && x.PrescriptionItemOID > 0
          )
            .Select((s) => s.PrescriptionItemOID)
            .ToList();
        }
        if (
          lstReorderDrugs != null &&
          lstReorderDrugs.Count > 0 &&
          objResList.oPrescriptionItemView != null &&
          objResList.oPrescriptionItemView.Count > 0
        ) {
          let count: number = lstReorderDrugs.Count;
          for (let i: number = 0; i < count; i++) {
            objResList.oPrescriptionItemView.ForEach((Reinsert) => {
              if (Reinsert.oPrescriptionItem.OID == lstReorderDrugs[i]) {
                Reinsert.oPrescriptionItem.IsReoderIconEnable = '1';
              }
            });
          }
        }
        this.MedsInPatient = PrescriptionHelper.FillPrescriptionItemVM(
          objResList.oPrescriptionItemView,
          _IsClosedEncounterForMedListGrid
        );

        // Revisit Required
        // let aggregateService: AggregateService = InjectorInstance.get<AggregateService>(AggregateService);
        // aggregateService.pData = this.MedsInPatient;

        console.log('ippmabasevm MedsInPatient', this.MedsInPatient);
        if (this.MedsInPatient == null || this.MedsInPatient.Count <= 0)
          this.NoRecordsText = 'No records to show';
        else this.CompletedItemMsg('LHS', 'CC_FOR_ADMIN');
        break;
    }
    let lstPrescribedItems: ObservableCollection<PrescriptionItemVM> =
      this.MedsResolve;
    if (lstPrescribedItems != null && lstPrescribedItems.Count > 0) {
      lstPrescribedItems.forEach((oItemVM) => {
        oItemVM.DisCanitemRecorderIconenable(oItemVM);
      });
    }
    if (this.MedsDisCan != null && this.MedsDisCan.Count > 0) {
      this.MedsDisCan.forEach((oItemVM) => {
        oItemVM.IsItemDisOrCan = true;
        oItemVM.DisCanitemRecorderIconenable(oItemVM);
      });
    }
    Busyindicator.SetStatusIdle('listviewchecked');
  }
  public ChangeDetection = new EventEmitter();
  private oPrescItemInputData: IPPMAManagePrescSer.PrescriptionItemInputData;
  private oDrugInputData: DrugItemInputData;
  public objProcessingItemVM: PrescriptionItemVM;
  public objNewItemVM: PrescriptionItemVM;
  public objMCItemVM: PrescriptionItemVM;
  public objSTATItemVM: PrescriptionItemVM;
  public ActivityCode: ActivityTypes;
  public CurrentActivityCode: ActivityTypes;
  private oDrugMCIData: IPPMAManagePrescSer.DrugItemBasicData;
  //public delegate void PrescribeNewItemDelegate(bool IsChildWindowClosed);
  public PrescribeNewItemEvent: Function;
  //public delegate void PrescriptionItemAdded(bool IsItemAdded);
  public PrescriptionItemAddedEvent: Function;
  public PrescribeNewItem(PrescribeInputData?: DrugItemInputData): void;
  public PrescribeNewItem(
    PrescribeInputData?: DrugItemInputData,
    PrescribeInput?: PrescriptionItemVM
  ): void;
  public PrescribeNewItem(
    PrescribeInputData?: DrugItemInputData,
    PrescribeInput?: PrescriptionItemVM
  ): void {
    let sOID: string;
    let sType: string;
    let sName: string;
    let sIsFormulary: string;
    let sPresType: string;
    let sFormularyNote: string = String.Empty;
    switch (arguments.length) {
      case 1:
        if (String.IsNullOrEmpty(PrescribeInputData.IdentifyingName)) {
          return;
        }

        this.ActivityCode = ActivityTypes.Prescribe;
        this.oDrugInputData = PrescribeInputData;
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          (this.cFollowUpOrStat == 'F' || this.cFollowUpOrStat == 'S')
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.MulticomponentDetails != null &&
            String.Compare(
              this.objNewItemVM.ItemSubType,
              CConstants.SUBTYPE,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 &&
            this.objNewItemVM.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count > 0
          ) {
            this.objMCItemVM = new PrescriptionItemVM();
            this.objMCItemVM.FormViewerDetails = new FormViewerVM();
            this.objMCItemVM.FormViewerDetails.PresItemDRCVM =
              new PresItemDRCVM();
            this.objMCItemVM.FormViewerDetails.MulticomponentDetails =
              new MulticomponentVM();
            this.objMCItemVM.FormViewerDetails.MulticomponentDetails =
              this.objNewItemVM.FormViewerDetails.MulticomponentDetails;
            this.objMCItemVM.FormViewerDetails.BasicDetails =
              new BasicDetailsVM(this.objMCItemVM);
            this.objMCItemVM.FormViewerDetails.BasicDetails.DosageForm =
              this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm;
          }
          if (this.cFollowUpOrStat == 'S') {
            this.objSTATItemVM = new PrescriptionItemVM();
            this.objSTATItemVM.FormViewerDetails = new FormViewerVM();
            this.objSTATItemVM.FormViewerDetails.PresItemDRCVM =
              new PresItemDRCVM();
            this.objSTATItemVM.FormViewerDetails.BasicDetails =
              new BasicDetailsVM(this.objSTATItemVM);
            let _IsSTATDoseOfSV: boolean = false;
            if (
              this.objNewItemVM != null &&
              this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
              (this.objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
                this.objNewItemVM.ActionCode == ActivityTypes.Reorder ||
                this.objNewItemVM.ActionCode == ActivityTypes.Amend) &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
              ) &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              _IsSTATDoseOfSV = true;
            }
            this.objSTATItemVM.FormViewerDetails.BasicDetails.Route =
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute =
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked =
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.DosageForm =
              this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm;
            if (_IsSTATDoseOfSV) {
              this.objSTATItemVM.FormViewerDetails.BasicDetails.Dose =
                this.FirstDoseStepped;
              this.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOM =
                this.FirstSTATDoseUom;
            } else {
              this.objSTATItemVM.FormViewerDetails.BasicDetails.Dose =
                this.objNewItemVM.FormViewerDetails.BasicDetails.Dose;
              this.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOM =
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM;
            }
            this.objSTATItemVM.FormViewerDetails.BasicDetails.Strength =
              this.objNewItemVM.FormViewerDetails.BasicDetails.Strength;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.AdminMethod =
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod;
            if (_IsSTATDoseOfSV) {
              this.objSTATItemVM.FormViewerDetails.BasicDetails.DoseType =
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: DoseTypeCode.NORMAL,
                  IsSelected: true,
                  DisplayText: CConstants.sNormalDisplaytext,
                });
            } else {
              this.objSTATItemVM.FormViewerDetails.BasicDetails.DoseType =
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType;
            }
            this.objSTATItemVM.FormViewerDetails.BasicDetails.UpperDose =
              this.objNewItemVM.FormViewerDetails.BasicDetails.UpperDose;
            if (
              this.objSTATItemVM.FormViewerDetails.BasicDetails
                .IsMultiRouteChecked
            ) {
              this.objSTATItemVM.FormViewerDetails.BasicDetails.IsenableDosage =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableDosage;
              this.objSTATItemVM.FormViewerDetails.BasicDetails.IsDosageFormMandatory =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsDosageFormMandatory;
            }
            this.objSTATItemVM.FormViewerDetails.BasicDetails.IsWardStock =
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsWardStock;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.Site =
              this.objNewItemVM.FormViewerDetails.BasicDetails.Site;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
              this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.ProblemIndication =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ProblemIndication;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.PatientProblemCode =
              this.objNewItemVM.FormViewerDetails.BasicDetails.PatientProblemCode;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.ProblemIndicationTerm =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ProblemIndicationTerm;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.OriginalSupplyInstructionText =
              this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalSupplyInstructionText;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.SupplyInsVal =
              this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsVal;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.SupplyInsText =
              this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsText;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.PrimaryInd =
              this.objNewItemVM.FormViewerDetails.BasicDetails.PrimaryInd;
            this.objSTATItemVM.PrescriberDetails =
              new IPPMAManagePrescSer.ObjectInfo();
            this.objSTATItemVM.PrescriberDetails.Name =
              this.objNewItemVM.PrescriberDetails.Name;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.StationaryType =
              this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.DefaultDetails =
              new FormViewerDefaultsVM();
            this.objSTATItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes;
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
                .MultiRoutes != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
                .MultiRoutes.Count > 0
            ) {
              this.objSTATItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes =
                this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes;
            }
            this.objSTATItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoute2 = this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoute2;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason =
              this.objNewItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason =
              this.objNewItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.DoseUOMTypeCode =
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOMTypeCode;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionType =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails =
              new InfusionVM(this.objSTATItemVM.FormViewerDetails.BasicDetails);
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdose;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Lumen =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Lumen;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriodUom;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Rate =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateDinominatorUom;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfRateNumeratorUom;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidVolume;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ChckSingleActionMedChart;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentrationUOM;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentrationUOM;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidList =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidList;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidSelectvalue;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidLorenzoID;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.VolumeUOM;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidFreetext;
            if (
              this.objSTATItemVM.FormViewerDetails.BasicDetails
                .ParentUniqueIDofSTAT == 0
            ) {
              this.objSTATItemVM.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT =
                this.lUniqueRowIDForStatOrFollowup;
            }
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
                .DRCDoseTypes != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
                .DRCDoseTypes.Count > 0
            ) {
              this.objSTATItemVM.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
                true;
              this.objSTATItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
                this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.DRCDoseTypes.Where(
                  (c) =>
                    String.Equals(
                      c.Value,
                      DRCDoseTypes.Systemdefined,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                )
                  .Select((s) => s)
                  .FirstOrDefault();
              this.objSTATItemVM.formViewerDetails.BasicDetails.ToSkipDRCDoseTypeSectionChange =
                false;
            }
            this.IsFollowUpSTATDRCDoseType = true;
            this.objSTATItemVM.VMVPLorenzoID = this.objNewItemVM.VMVPLorenzoID;
            this.objSTATItemVM.VMVPIdentifyingName =
              this.objNewItemVM.VMVPIdentifyingName;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.OriginalIdentifyingName =
              this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalIdentifyingName;
            this.objSTATItemVM.FormViewerDetails.BasicDetails.BrandName =
              this.objNewItemVM.FormViewerDetails.BasicDetails.BrandName;
          }
          if (this.cFollowUpOrStat == 'F') {
            this.objNewItemVM.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT =
              this.lUniqueRowIDForStatOrFollowup;
          }
        }
        this.objNewItemVM = null;
        sOID = PrescribeInputData.IdentifyingOID.ToString();
        sType = PrescribeInputData.IdentifyingType;
        sName =
          this.sitemname =
          this.sPrescriptionItemName =
            PrescribeInputData.IdentifyingName;
        this.IsFormularyDrug = PrescribeInputData.IsFormulary;
        if(PrescribeInputData.IsFormulary)
         sIsFormulary = PrescribeInputData.IsFormulary.ToString();
        sPresType = PatientContext.PrescriptionType;
        sFormularyNote = PrescribeInputData.FormularyNote;
        this.bIsReplacement = PrescribeInputData.bIsReplacement;
        if (
          PrescribeInputData.RouteOID != 0 ||
          PrescribeInputData.DosageFormID != 0
        ) {
          this.IsRouteFormDefault = true;
        } else {
          this.IsRouteFormDefault = false;
        }
        this.CheckalreadyPrescribeddrug(
          PrescribeInputData.IdentifyingOID,
          sType
        );
        break;
      case 2:
        if (
          String.IsNullOrEmpty(
            PrescribeInput.FormViewerDetails.BasicDetails.IdentifyingName
          )
        ) {
          return;
        }
        this.ActivityCode = ActivityTypes.Prescribe;
        this.objNewItemVM = PrescribeInput;
        this.objNewItemVM.FormViewerDetails.BasicDetails.isFormViewDataLoaded =
          true;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InitializationAdminTimes();
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.AsRequired ==
              true &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.IsAdminTimesEnabled =
              false;
          }
          if (
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Duration
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM.Value
            )
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
              ) &&
              DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
                DateTime.MinValue)
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.StopDTTM =
                this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate;
            }
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMedsFromDOS =
              true;
          }
        }
        this.oDrugInputData = PrescribeInputData;
        // let sOID: string, sType, sName, sIsFormulary, sPresType;
        // let sFormularyNote: string = String.Empty;
        this.ActivityCode = ActivityTypes.Prescribe;
        sOID =
          PrescribeInput.FormViewerDetails.BasicDetails.IdentifyingOID.ToString();
        sType = PrescribeInput.FormViewerDetails.BasicDetails.IdentifyingType;
        sName =
          this.sitemname =
          this.sPrescriptionItemName =
            PrescribeInput.FormViewerDetails.BasicDetails.IdentifyingName;
        sFormularyNote = PrescribeInput.FormularyNote;
        let bIsFormulary: boolean = (this.IsFormularyDrug =
          PrescribeInputData.IsFormulary);
        sIsFormulary = bIsFormulary.ToString();
        sPresType = PatientContext.PrescriptionType;
        PrescribeInput.IsGPConnectItem =
          this.GpConnectMedicationItem != null &&
          !String.IsNullOrEmpty(this.GpConnectMedicationItem.GPConnectID);
        PrescribeInput.GpConnectMedicationItem = this.GpConnectMedicationItem;
        if (
          PrescribeInput.IsGPConnectItem &&
          PrescriptionTypes.ForAdministration.Equals(
            PatientContext.PrescriptionType,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          PrescribeInput.FormViewerDetails.BasicDetails.IsOnadmission = true;
        }
        if (
          PrescribeInput.FormViewerDetails.BasicDetails.Route != null ||
          PrescribeInput.FormViewerDetails.BasicDetails.DosageForm != null
        ) {
          this.IsRouteFormDefault = true;
        } else {
          this.IsRouteFormDefault = false;
        }
        this.CheckalreadyPrescribeddrug(
          PrescribeInput.FormViewerDetails.BasicDetails.IdentifyingOID,
          sType
        );
        break;
    }
  }
  public PrescribeNonCatalogueItem(
    PrescribeInputData: DrugItemInputData
  ): void {
    this.oDrugInputData = PrescribeInputData;
    this.objNewItemVM = null;
    let oMsgBox: iMessageBox = new iMessageBox();
    oMsgBox.Title = 'LORENZO';
    oMsgBox.Message =
      'No medication conflict checks or supporting information is available for this item. If you would like to proceed enter item name and reason.';
    oMsgBox.MessageButton = MessageBoxButton.OKCancel;
    oMsgBox.IconType = MessageBoxType.Exclamation;
    oMsgBox.Width = 350;
    oMsgBox.Height = 150;
    oMsgBox.MessageBoxClose = (s, e) => {
      this.PrescribeNonCatalogueItem_MessageBoxClose(s, e);
    };
    oMsgBox.Show();
  }
  PrescribeNonCatalogueItem_MessageBoxClose(
    sender: Object,
    e: MessageEventArgs
  ): void {
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      this.ActivityCode = ActivityTypes.Prescribe;
      if (
        ProfileData.AdditionalPrescConfig == null ||
        MedicationCommonProfileData.SlotCharacteristicsConfig == null
      ) {
        Common.GetProfileConfigData((s, e) => {
          this.oProfileFactory_OnProfileListLoadedForTypeIn(s, e);
        });
      } else {
        this.GetResolveDrugDetails();
        this.GpConnectMedicationItem = this.SelectedGPConnectItem;
        this.SelectedGPConnectItem = null;
      }
    } else if (e.MessageBoxResult == MessageBoxResult.Cancel) {
      this.IsTypeInDrug = false;
    }
  }
  public LaunchAccessConstraint(
    sOID: string,
    sType: string,
    sName: string,
    sFormulayNote: string,
    NonFormularyReason: CListItem,
    sOtherNonFormularyReason: string,
    oParent: ChildWindow,
    oIndicationdtl: Indicationdtl,
    IsAuthorise: boolean
  ): void {
    let _IsGPCBannerLoad: boolean = false;
    this.oMedAccessChild = new MedAccessConstraintsChild();
    this.oMedAccessChild.constructorImpl(this);
    if (
      IsAuthorise &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) &&
      PatientContext.ClerkFormViewDefaultBehavior !=
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      sName += CConstants.sAuthoriseText;
    }
    let oAccessConstVM: MedAccessConstraintsVM = new MedAccessConstraintsVM(
      this
    );
    oAccessConstVM.DrugOid = sOID;
    oAccessConstVM.DrugName = sName;
    oAccessConstVM.DrugType = sType;
    oAccessConstVM.FormularyNote = sFormulayNote;
    oAccessConstVM.NonFormularyReason = NonFormularyReason;
    oAccessConstVM.OtherNonFormularyReason = sOtherNonFormularyReason;
    oAccessConstVM.IsAccessConstr = oIndicationdtl.IsAccessConstriant;
    oAccessConstVM.IsIndicationRequired = oIndicationdtl.IsIndicationRequired;
    oAccessConstVM.IsDataproviderType = oIndicationdtl.SourceDataProviderType;
    oAccessConstVM.IsFormulary = oIndicationdtl.IsFormulary;
    //Revisit required - newly added
    oAccessConstVM.IsVisibleOverrideIndication = (String.Equals(oAccessConstVM.IsAccessConstr, "0", StringComparison.CurrentCultureIgnoreCase) && String.Equals(oAccessConstVM.IsIndicationRequired, "1", StringComparison.CurrentCultureIgnoreCase)) ? Visibility.Visible : Visibility.Collapsed;
    if (this.GpConnectMedicationItem != null) {
      _IsGPCBannerLoad = true;
      oAccessConstVM.GpConnectMedicationItem = this.GpConnectMedicationItem;
    } else {
      _IsGPCBannerLoad = false;
      oAccessConstVM.GpConnectMedicationItem = null;
    }
    this.oMedAccessChild.DataContext = oAccessConstVM;
    this.sIsAccessContraint = oIndicationdtl.IsAccessConstriant;
    this.sIsIndicationRequired = oIndicationdtl.IsIndicationRequired;
    this.oDrugInputData = new DrugItemInputData();
    this.oDrugInputData.IdentifyingName = sName;
    this.oDrugInputData.IdentifyingOID = Convert.ToInt64(sOID);
    this.oDrugInputData.IdentifyingType = sType;
    this.oDrugInputData.IsAccessContraint = '0';
    this.oDrugInputData.IsPrescribeByBrand = oIndicationdtl.IsPrescribeByBrand;
    this.oDrugInputData.MCVersionNo = AppSessionInfo.AMCV;
    this.oDrugInputData.FavouritesDetailOID = 0;
    this.oDrugInputData.ItemType = oIndicationdtl.ItemType;
    this.oDrugInputData.IsFormulary = oIndicationdtl.IsFormulary;
    this.oDrugInputData.LorenzoID = oIndicationdtl.LorenzoID;
    this.oDrugInputData.ITMSUBTYP = oIndicationdtl.ITMSUBTYP;
    this.oDrugInputData.IsIndicationRequired = '0';
    let sWindowTitle: string = sName + ' - LORENZO -- Webpage Dialog';
    this.oMedAccessChild.medAccessconstraintParent = oParent;
    this.oMedAccessChild.IPPMABaseVMData = this; 
    let _Height: number = 0;
    if (
      String.Equals(
        oIndicationdtl.IsAccessConstriant,
        '0',
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      String.Equals(
        oIndicationdtl.IsIndicationRequired,
        '1',
        StringComparison.CurrentCultureIgnoreCase
      )
    ) {
      //To be Re-Visited for Height - With/Without GP Banner
      _Height = _IsGPCBannerLoad ? 685 : 680;
      
      AppActivity.OpenWindow(sWindowTitle, this.oMedAccessChild, (s,e)=>{this.oMedAccessChild_Closed(s);}, "", false, _Height, 840, false, WindowButtonType.Close, null, undefined, undefined, undefined, 'secondardDialog');
    } else {
      _Height = _IsGPCBannerLoad ? 600 : 620;
      AppActivity.OpenWindow(sWindowTitle, this.oMedAccessChild, (s,e)=>{this.oMedAccessChild_Closed(s);}, "", false, _Height, 840, false, WindowButtonType.Close, null, undefined, undefined, undefined, 'secondardDialog');
    }
  }
  public MCINewItem(PrescribeInputData: DrugItemInputData): void {
    let sOID: string, sType, sName, sPresType;
    let sFormularyNote: string = String.Empty;
    this.ActivityCode = ActivityTypes.Prescribe;
    this.oDrugInputData = PrescribeInputData;
    this.objNewItemVM = null;
    sOID = PrescribeInputData.IdentifyingOID.ToString();
    sType = PrescribeInputData.IdentifyingType;
    sName = PrescribeInputData.IdentifyingName;
    PrescribeInputData.IsFormulary = true;
    sPresType = PatientContext.PrescriptionType;
    sFormularyNote = PrescribeInputData.FormularyNote;
    this.bIsReplacement = PrescribeInputData.bIsReplacement;
    this.MCIlink_click = true;
    this.CheckForNonFormulary(PrescribeInputData.IsFormulary, sName);
  }
  
    oMedAccessChild_Closed(args: AppDialogEventargs): void {
        if (args != null && args.Result == AppDialogResult.Ok) {
            this.oDrugInputData = this.oMedAccessChild.objDrugItemInputData;
        }
        else if (args != null && args.Result == AppDialogResult.Close || args.Result == AppDialogResult.Cancel) {          
            if (args != null && args.Content != null && args.Content.Component != null) {
                let oMedAccessConst: MedAccessConstraintsChild = ObjectHelper.CreateType<MedAccessConstraintsChild>(args.Content.Component, MedAccessConstraintsChild);
                let oMedAccessConstVM : MedAccessConstraintsVM = ObjectHelper.CreateType<MedAccessConstraintsVM>(oMedAccessConst.oMedAccessConst, MedAccessConstraintsVM);
                if (oMedAccessConst != null && String.Equals(this.sIsAccessContraint, "0", StringComparison.CurrentCultureIgnoreCase) && String.Equals(this.sIsIndicationRequired, "1", StringComparison.CurrentCultureIgnoreCase)) {
                    if (args.Result == AppDialogResult.Close && oMedAccessConstVM.IsChkOverrideIndication && (oMedAccessConstVM.IndicationOverrideReasonValue == null || String.IsNullOrEmpty(oMedAccessConstVM.IndicationOverrideReasonValue.Value))) {                                            
                        let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                            Title: "LORENZO",
                            Message: CConstants.ErrMsgOverrideIndicationRsn,
                            MessageButton: MessageBoxButton.OK,
                            IconType: MessageBoxType.Exclamation
                        });
                        iMsgBox.Show();
                    }
                    else if (args.Result == AppDialogResult.Close && oMedAccessConstVM.IsChkOverrideIndication && (oMedAccessConstVM.IndicationOverrideReasonValue != null && !String.IsNullOrEmpty(oMedAccessConstVM.IndicationOverrideReasonValue.Value))) {
                        this.oDrugInputData.IndicationOverrideReson = oMedAccessConstVM.IndicationOverrideReasonValue.Value;
                        Busyindicator.SetStatusBusy("IndicationFormViewer");
                        this.PrescribeNewItem(this.oDrugInputData);
                        this.PrescribeNewItemEvent(true);
                    }
                    else {
                        this.oDrugInputData = null;
                        Busyindicator.SetStatusIdle("IndicationFormViewer");
                      //  this.oMedAccessChild.appDialog.DialogResult = false;
                      args.AppChildWindow.DialogResult = true;
                    }
                }
                else {
                    this.oDrugInputData = null;
                    //this.oMedAccessChild.appDialog.DialogResult = false;
                  args.AppChildWindow.DialogResult = true;
                }
            }
        }
        Busyindicator.SetStatusIdle("PrescribeProductOption");
        Busyindicator.SetStatusIdle("FormViewer");
        Busyindicator.SetStatusIdle("Favourites");
        Busyindicator.SetStatusIdle("IndicationreqForm");
        Busyindicator.SetStatusIdle("FormViewerClick");
        Busyindicator.SetStatusIdle("FormViewer");
        Busyindicator.SetStatusIdle("Orderset");
        this.nonformokclick = false;
    }
        
  public PrescribeExistingItem(
    ExistingPrescriptionItemVM: PrescriptionItemVM,
    ActivityTypeCode: ActivityTypes
  ): void {
    if (
      String.Compare(
        ActivityTypeCode.ToString(),
        ActivityTypes.Amend.ToString()
      ) != 0
    ) {
      if (
        String.Compare(
          ActivityTypeCode.ToString(),
          ActivityTypes.Reorder.ToString()
        ) != 0
      )
        Busyindicator.SetStatusBusy('FormViewer');
      this.isReconcileserreq = true;
    }
    if (ExistingPrescriptionItemVM != null) {
      ExistingPrescriptionItemVM.OmittedPresOIDs = null;
      if (
        !String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        ActivityTypeCode == ActivityTypes.Amend &&
        ExistingPrescriptionItemVM.PrescriptionItemOID > 0 &&
        ExistingPrescriptionItemVM.PrescriptionItemStatus !=
          CConstants.COMPLETED &&
        ExistingPrescriptionItemVM.PrescriptionItemStatus !=
          CConstants.DISCONTINUED &&
        ExistingPrescriptionItemVM.PrescriptionItemStatus !=
          CConstants.CANCELLED &&
        ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.Ordersets !=
          null &&
        !String.IsNullOrEmpty(
          ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.Ordersets
            .Value
        ) &&
        ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
          .SequenceInfo != null &&
        ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.SequenceInfo
          .GroupSequenceNo > 0 &&
        ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.SequenceInfo
          .ItemSequenceNo > 0
      ) {
        ExistingPrescriptionItemVM.GetOmittedItemsList(
          ExistingPrescriptionItemVM.PrescriptionItemOID.ToString()
        );
      }
    }
    if (
      ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.IsFormViewClick
    ) {
      this.isReconcileserreq = false;
      if (
        (String.Equals(
          ActivityTypeCode.ToString(),
          ActivityTypes.Prescribe.ToString(),
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            ActivityTypeCode.ToString(),
            ActivityTypes.Reorder.ToString(),
            StringComparison.InvariantCultureIgnoreCase
          )) &&
        ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
          .MultiDoseDetails != null &&
        ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
          .MultiDoseDetails.Count > 0
      ) {
        let oScheduleDetailsSteppedVM: ScheduleDetailsSteppedVM =
          new ScheduleDetailsSteppedVM();
        let nCount: number =
          ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
            .MultiDoseDetails.Count;
        for (let i: number = 0; i < nCount; i++) {
          if (
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
              .MultiDoseDetails[i] != null &&
            (ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
              .MultiDoseDetails[i].IsDaywiseView ||
              (ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                .MultiDoseDetails[i].DurationUOM != null &&
                !String.IsNullOrEmpty(
                  ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails[i].DurationUOM.Value
                ) &&
                ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                  .MultiDoseDetails[i].Duration > 0 &&
                Common.IsDurationIsOneDayOrLesser(
                  ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails[i].StartDTTM,
                  ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails[i].EndDTTM,
                  ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails[i].DurationUOM.Value,
                  ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails[i].Duration
                ))) &&
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
              .MultiDoseDetails[i].ScheduleDetailsData != null &&
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
              i
            ].ScheduleDetailsData.Count > 0
          ) {
            oScheduleDetailsSteppedVM.IsDaywiseView =
              ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].IsDaywiseView;
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
              i
            ].LstOriginalDoseValues =
              oScheduleDetailsSteppedVM.FetchDoseValuesFromExistChangingDose(
                ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                  .MultiDoseDetails[i].ScheduleDetailsData
              );
          }
        }
      }
    }
    if (ActivityTypeCode == ActivityTypes.Amend) {
      ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.IsFluidAuthorise =
        false;
    }
    if (
      !ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.IsAuthorise &&
      ActivityTypeCode == ActivityTypes.Amend &&
      ExistingPrescriptionItemVM.PrescriptionItemStatus == null
    ) {
      ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.IsMCICtrlAuthorise =
        true;
    }
    if (ActivityTypeCode == ActivityTypes.Amend && !UserPermissions.CanAmend) {
      let objMsg: iMessageBox = new iMessageBox();
      objMsg.MessageButton = MessageBoxButton.OK;
      objMsg.Title = 'LORENZO';
      objMsg.Message = 'You do not have rights to amend this drug';
      objMsg.Show();
      Busyindicator.SetStatusIdle('FormViewerClick');
      Busyindicator.SetStatusIdle('FormViewer');
      return;
    }
    if (ActivityTypeCode == ActivityTypes.ConflictUpdate) {
      ActivityTypeCode = ActivityTypes.Amend;
    }
    if (
      ActivityTypeCode == ActivityTypes.Amend &&
      UserPermissions.PrescribeWithRestriction == true
    )
      return;
    this.objProcessingItemVM = ExistingPrescriptionItemVM;
    if (
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.ActionCode == ActivityTypes.ConflictUpdate &&
      String.Compare(
        this.objProcessingItemVM.OperationMode,
        'CU',
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.objProcessingItemVM.ActionCode = ActivityTypes.Prescribe;
      this.objProcessingItemVM.OperationMode = String.Empty;
    }
    this.ActivityCode = ActivityTypeCode;
    if (
      ActivityTypeCode == ActivityTypes.Amend &&
      !String.Equals(
        this.objProcessingItemVM.OperationMode,
        'N',
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) &&
      PatientContext.ClerkFormViewDefaultBehavior !=
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      ExistingPrescriptionItemVM.formViewerDetails.BasicDetails.IndentifyingDrugName =
        null;
      ExistingPrescriptionItemVM.formViewerDetails.BasicDetails.IndentifyingDrugName =
        ExistingPrescriptionItemVM.formViewerDetails.BasicDetails
          .IdentifyingName + CConstants.sAuthoriseText;
    }
    if (
      ActivityTypeCode == ActivityTypes.Amend &&
      String.Equals(
        this.objProcessingItemVM.OperationMode,
        'N',
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) &&
      PatientContext.ClerkFormViewDefaultBehavior !=
        ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      ExistingPrescriptionItemVM.formViewerDetails.BasicDetails.IndentifyingDrugName =
        null;
      ExistingPrescriptionItemVM.formViewerDetails.BasicDetails.IndentifyingDrugName =
        ExistingPrescriptionItemVM.formViewerDetails.BasicDetails
          .IdentifyingName + CConstants.sAuthoriseText;
    }
    if (
      !ExistingPrescriptionItemVM.formViewerDetails.BasicDetails.IsAuthorise
    ) {
      ExistingPrescriptionItemVM.formViewerDetails.BasicDetails.IndentifyingDrugName =
        ExistingPrescriptionItemVM.formViewerDetails.BasicDetails.IdentifyingName;
      ExistingPrescriptionItemVM.AmendModeDisableTV = false;
    }
    if (this.objProcessingItemVM.IsFormViewDataLoaded) {
      this.objNewItemVM = this.objProcessingItemVM;
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null
      ) {
        if (
          this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
          !String.Equals(
            this.objProcessingItemVM.OperationMode,
            'N',
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.objNewItemVM.bIsSupplyDispensingInstructionSet = false;
        }
        let oMultipleRoute: CListItem = new CListItem();
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
          )
        ) {
          oMultipleRoute = ObjectHelper.CreateObject(new CListItem(), {
            Value: this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value,
            DisplayText:
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route
                .DisplayText,
            Tag: this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag,
          });
        }
        let oRoute: CListItem =
          this.objNewItemVM.FormViewerDetails.BasicDetails.GetComboValue(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route,
            ObjectHelper.CreateType<ObservableCollection<CListItem>>(
              this.objNewItemVM.oDefaultRoute,
              ObservableCollection<CListItem>
            )
          );
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails !=
          null
        ) {

        let oMoreText =  this.objNewItemVM.oDefaultRoute.Where(x=>x.Value=="CC_More").FirstOrDefault();
        if(oMoreText !=null && oMoreText.DisplayText === "")
        {
          this.objNewItemVM.oDefaultRoute.Remove(oMoreText);
          this.objNewItemVM.oDefaultRoute.Add(ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: "More",
            Value: "CC_More"
        }));
        }
          if (
            PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
              CConstants.SUBTYPE
            ) == 0
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route == null
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
                ObjectHelper.CreateType<ObservableCollection<CListItem>>(
                  this.objNewItemVM.oDefaultRoute,
                  ObservableCollection<CListItem>
                );
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route = oRoute;
            }
          } else if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsAllowMultiRoute &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsMultiRouteChecked &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .MultiRoutes != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .MultiRoutes.Count > 0
          ) {
            let selectedRoutes: string[] =
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null
                ? this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value.Split(
                    ','
                  )
                : null;
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes.forEach(
              (MultiRoute) => {
                if (selectedRoutes != null && selectedRoutes.length > 0) {
                  selectedRoutes.forEach((item) => {
                    if (item == MultiRoute.Value && !MultiRoute.IsSelected) {
                      MultiRoute.IsSelected = true;
                    }
                  });
                }
              }
            );
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .IsClearlstAmendedFlds &&
              (this.objNewItemVM.ActionCode == ActivityTypes.Amend ||
                this.objNewItemVM.ActionCode == ActivityTypes.Reorder ||
                this.objNewItemVM.ActionCode == ActivityTypes.Prescribe)
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsLoadingDataForAmend =
                true;
            } else {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsLoadingDataForAmend =
                false;
            }
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MultiRoutes;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteVisible =
              Visibility.Visible;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteDropDownVisible =
              Visibility.Visible;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsRouteVisible =
              Visibility.Collapsed;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsRouteComboVisible =
              Visibility.Collapsed;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteComboVisible =
              Visibility.Collapsed;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsLoadingDataForAmend =
              false;
          } else {
            if (
              String.Equals(
                this.objProcessingItemVM.OperationMode,
                'N',
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              oRoute != null &&
              (this.objNewItemVM.ActionCode == ActivityTypes.Amend ||
                this.objNewItemVM.ActionCode == ActivityTypes.Prescribe)
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.bIsForAmendLaunchNewItem =
                true;
            }
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
              ObjectHelper.CreateType<ObservableCollection<CListItem>>(
                this.objNewItemVM.oDefaultRoute,
                ObservableCollection<CListItem>
              );
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route = oRoute;
          }
          this.objNewItemVM.FormViewerDetails.BasicDetails.FreqDefItemSource =
            true;
          let oFreq: CListItem =
            this.objNewItemVM.FormViewerDetails.BasicDetails.GetComboValue(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency,
              ObjectHelper.CreateType<ObservableCollection<CListItem>>(
                this.objNewItemVM.oDefaultFreq,
                ObservableCollection<CListItem>
              )
            );
          let _selectedFrequencyDetail: IPPMAManagePrescSer.IPPFrequency =
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedFrequencyDetails;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.TITRATED,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys =
              ObjectHelper.CreateType<ObservableCollection<CListItem>>(
                this.objNewItemVM.oDefaultNFreq,
                ObservableCollection<CListItem>
              );
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Frequencys =
              ObjectHelper.CreateType<ObservableCollection<CListItem>>(
                this.objNewItemVM.oDefaultFreq,
                ObservableCollection<CListItem>
              );
          }
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.NonPRNFrequencies =
            ObjectHelper.CreateType<ObservableCollection<CListItem>>(
              this.objNewItemVM.oDefaultNFreq,
              ObservableCollection<CListItem>
            );
          this.objNewItemVM.FormViewerDetails.BasicDetails.FreqDefItemSource =
            true;
          this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency = oFreq;
          this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedFrequencyDetails =
            _selectedFrequencyDetail;
          if (
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.Tag !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency
              .Tag instanceof Array &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null
          ) {
            let st: string[] = ObjectHelper.CreateType<string[]>(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.Tag,
              'string[]'
            );
            if (
              st != null &&
              st.length > 0 &&
              st
                .Where((s) => String.Equals(s, 'CC_MEDDRSN2'))
                .Select((s) => s)
                .ToList().Count > 0
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.DaysOfWeekVisibility =
                Visibility.Visible;
            }
          }
          this.objNewItemVM.FormViewerDetails.BasicDetails.FreqDefItemSource =
            false;
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.MasterFrequencys =
            ObjectHelper.CreateType<ObservableCollection<CListItem>>(
              this.objNewItemVM.oDefaultMFreq,
              ObservableCollection<CListItem>
            );
        }
        if (
          DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM,
          DateTime.MinValue)
        ) {
          if (
            DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails
              .StartPrescriptionTime.Date,
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.Date)
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDateOnLaunch =
              this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime;
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDateOnLaunch =
              this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
          }
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDateOnLaunch =
            DateTime.MinValue;
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag =
          true;
        if (
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM != null &&
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.CareTaker.Memento !=
            null &&
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.CareTaker.Memento
            .Count > 0
        )
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.CareTaker.Memento.Clear();
        this.objNewItemVM.FormViewerDetails.PresItemDRCVM.CareTaker.Memento.Add(
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.Clone
        );
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.CareTaker.Memento !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.CareTaker.Memento
            .Count > 0
        )
          this.objNewItemVM.FormViewerDetails.BasicDetails.CareTaker.Memento.Clear();
        this.objNewItemVM.FormViewerDetails.BasicDetails.CareTaker.Memento.Add(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Clone
        );
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.CareTaker
            .Memento != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.CareTaker
            .Memento.Count > 0
        )
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.CareTaker.Memento.Clear();
        this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.CareTaker.Memento.Add(
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Clone
        );
        if (
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .CareTaker.Memento.Count > 0
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CareTaker.Memento.Clear();
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CareTaker.Memento.Add(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .Clone
          );
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .CareTaker.Memento.Count > 0
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.CareTaker.Memento.Clear();
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.CareTaker.Memento.Add(
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.Clone
          );
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .AdministrationScheduleTimes != null
          ) {
            for (
              let i: number = 0;
              i <
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                .AdministrationScheduleTimes.Count;
              i++
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                  .AdministrationScheduleTimes[i].CareTaker.Memento != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[
                  i
                ].CareTaker.Memento.Count > 0
              )
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[
                  i
                ].CareTaker.Memento.Clear();
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[
                i
              ].CareTaker.Memento.Add(
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                  .AdministrationScheduleTimes[i].Clone
              );
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.CheckAndSortScheduleTime();
            }
          }
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsMultiRouteChecked &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
            .MultiRoutes != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
            .MultiRoutes.Count > 0 &&
          oMultipleRoute != null &&
          !String.IsNullOrEmpty(oMultipleRoute.Value)
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsClearlstAmendedFlds &&
            (this.objNewItemVM.ActionCode == ActivityTypes.Amend ||
              this.objNewItemVM.ActionCode == ActivityTypes.Reorder ||
              this.objNewItemVM.ActionCode == ActivityTypes.Prescribe)
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsLoadingDataForAmend =
              true;
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsLoadingDataForAmend =
              false;
          }
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultipleRouteValues =
            true;
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route =
            ObjectHelper.CreateObject(new CListItem(), {
              Value: oMultipleRoute.Value,
              DisplayText: oMultipleRoute.DisplayText,
              Tag: oMultipleRoute.Tag,
            });
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsLoadingDataForAmend =
            false;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .ConditionalDosingDetails != null
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ConditionalDosingDetails.CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ConditionalDosingDetails.CareTaker.Memento.Count > 0
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.CareTaker.Memento.Clear();
          this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.CareTaker.Memento.Add(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ConditionalDosingDetails.Clone
          );
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ConditionalDosingDetails.DoseDetails != null
          ) {
            for (
              let i: number = 0;
              i <
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ConditionalDosingDetails.DoseDetails.Count;
              i++
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .ConditionalDosingDetails.DoseDetails[i].CareTaker.Memento !=
                  null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails[
                  i
                ].CareTaker.Memento.Count > 0
              )
                this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails[
                  i
                ].CareTaker.Memento.Clear();
              this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails[
                i
              ].CareTaker.Memento.Add(
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .ConditionalDosingDetails.DoseDetails[i].Clone
              );
            }
          }
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails !=
          null
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .CareTaker.Memento.Count > 0
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.CareTaker.Memento.Clear();
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.CareTaker.Memento.Add(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .Clone
          );
        }
        if (this.objNewItemVM.DoseCalculationDetails != null) {
          if (
            this.objNewItemVM.DoseCalculationDetails.CareTaker.Memento !=
              null &&
            this.objNewItemVM.DoseCalculationDetails.CareTaker.Memento.Count > 0
          )
            this.objNewItemVM.DoseCalculationDetails.CareTaker.Memento.Clear();
          this.objNewItemVM.DoseCalculationDetails.CareTaker.Memento.Add(
            this.objNewItemVM.DoseCalculationDetails.Clone
          );
          this.oDoseCalculationForClone =
            this.objNewItemVM.DoseCalculationDetails;
        }
        if (this.objNewItemVM.oDoseCalcDefault != null) {
          this.oDoseCalcDefaultForClone = this.objNewItemVM.oDoseCalcDefault;
        } else {
          this.oDoseCalcDefaultForClone = null;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
          null
        ) {
          let iTotalCount: number =
            this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails
              .Count;
          this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalMultiDoseDetails =
            new ObservableCollection<MultipleDoseDetail>();
          for (let i: number = 0; i < iTotalCount; i++) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.CloneSelectedDoseDetail(
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ]
            );
            this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalMultiDoseDetails.Add(
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ]
            );
          }
        }
      }
      this.SupplyStatusBackup =
        this.objNewItemVM != null && this.objNewItemVM.SelectedSupplyreq != null
          ? this.objNewItemVM.SelectedSupplyreq.Value
          : String.Empty;
      this.TrafficSymbolBkup = this.objNewItemVM.TvTrafficSymbol;
      if (
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.TechValidateDetails != null
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.CareTaker
            .Memento != null &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.CareTaker
            .Memento.Count > 0
        )
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.CareTaker.Memento.Clear();
        this.objNewItemVM.FormViewerDetails.TechValidateDetails.CareTaker.Memento.Add(
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.Clone
        );
        this.ProdOptExisting(this.objNewItemVM);
      }
      if (
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.ConflictDetails != null
      ) {
        this.oConflictsVM = new ObservableCollection<ConflictsVM>();
        for (
          let i: number = 0;
          i <
          ExistingPrescriptionItemVM.FormViewerDetails.ConflictDetails.Count;
          i++
        ) {
          if (
            this.ActivityCode == ActivityTypes.Amend &&
            String.IsNullOrEmpty(this.objNewItemVM.OperationMode)
          )
            this.GetConflictsDetails(
              this.objNewItemVM.FormViewerDetails.ConflictDetails[i]
            );
          let oeachConflictsVM: ConflictsVM = new ConflictsVM();
          //Not Required for LHS. To be Re-Visited.
          oeachConflictsVM = CommonClo.Clone(this.objNewItemVM.FormViewerDetails.ConflictDetails[i]);
          this.oConflictsVM.Add(oeachConflictsVM);
        }
      }
      if (
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.MulticomponentDetails != null
      ) {
        this.oMulticomponentVM = new MulticomponentVM();
        //Not Required for LHS. To be Re-Visited.
        this.oMulticomponentVM = CommonClo.Clone(this.objNewItemVM.FormViewerDetails.MulticomponentDetails);
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails
            .SelectedPrescItem != null &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails
            .SelectedPrescItem.PresTechValidatedItemsChild != null &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails
            .SelectedPrescItem.PresTechValidatedItemsChild.Count > 0
        ) {
          let nCount: number =
            this.objNewItemVM.FormViewerDetails.TechValidateDetails
              .SelectedPrescItem.PresTechValidatedItemsChild.Count;
          for (let i: number = 0; i < nCount; i++) {
            if (
              this.oMulticomponentVM != null &&
              this.oMulticomponentVM.oMCItemBasicInfo != null &&
              this.oMulticomponentVM.oMCItemBasicInfo.Count > 0
            ) {
              for (
                let j: number = 0;
                j < this.oMulticomponentVM.oMCItemBasicInfo.Count;
                j++
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.TechValidateDetails
                    .SelectedPrescItem.PresTechValidatedItemsChild[i]
                    .FormViewerDetails.BasicDetails.IdentifyingOID ==
                  this.oMulticomponentVM.oMCItemBasicInfo[j].IdentifyingOID
                ) {
                  this.oMulticomponentVM.oMCItemBasicInfo[j].OperationMode =
                    this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
                      i
                    ].FormViewerDetails.BasicDetails.TecValOperationMode;
                }
              }
            }
          }
        }
      }
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails !=
        null
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
            .CareTaker.Memento != null
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
              .CareTaker.Memento.Count > 0
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.CareTaker.Memento.Clear();
          }
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.CareTaker.Memento.Add(
            this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
              .Clone
          );
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
            .GrdTitrated != null
        ) {
          let nRowCount: number =
            this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
              .GrdTitrated.Count;
          for (let i: number = 0; i < nRowCount; i++) {
            let oTitratedScheduledDtl: TitratedScheduleDetails =
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .TitratedDoseDetails.GrdTitrated[i];
            if (
              oTitratedScheduledDtl != null &&
              oTitratedScheduledDtl.CareTaker.Memento != null
            ) {
              if (oTitratedScheduledDtl.CareTaker.Memento.Count > 0) {
                oTitratedScheduledDtl.CareTaker.Memento.Clear();
              }
              oTitratedScheduledDtl.CareTaker.Memento.Add(
                oTitratedScheduledDtl.Clone
              );
            }
          }
        }
      }
      this.objNewItemVM.FormViewerDetails.BasicDetails.AmendOrginalStartDTTM =
        this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
      if (
        (this.objNewItemVM.PrescriptionItemStatus == CConstants.DISCONTINUED ||
          this.objNewItemVM.PrescriptionItemStatus == CConstants.CANCELLED ||
          this.objNewItemVM.DiscontinueCancelAction != null) &&
        !String.IsNullOrEmpty(this.objNewItemVM.OperationMode)
      ) {
        this.objNewItemVM.IsFormViewerDisable = true;
        this.objNewItemVM.ActionCode = ActivityTypes.Amend;
      }
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        !this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist &&
        String.Compare(
          this.objNewItemVM.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        (this.objNewItemVM.ActionCode == ActivityTypes.Amend ||
          this.objNewItemVM.ActionCode == ActivityTypes.Reorder ||
          this.objNewItemVM.ActionCode == ActivityTypes.Prescribe) &&
        PatientContext.PrescriptionType == PrescriptionTypes.Clerking
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCIProduct = true;
      }
      this.IsTechValMandatory = this.objNewItemVM.IsTechValidateMandatory;
      this.GetDeactiveFlag();
    } else {
      if (
        ExistingPrescriptionItemVM.DrugVersionMatch.Equals('0') &&
        String.Compare(
          ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
            .IdentifyingType,
          CConstants.Precatalog
        ) != 0
      ) {
        let sMessage: string = String.Empty;
        if (
          String.Compare(
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
              .itemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          if (
            !String.IsNullOrEmpty(
              ExistingPrescriptionItemVM.MCIMatchVersionItems
            )
          ) {
            if (ActivityTypeCode == ActivityTypes.Reorder)
              sMessage =
                'The component(s) of multiple component item' +
                ExistingPrescriptionItemVM.MCIMatchVersionItems +
                ' is not available as part of current version. Please reselect another medication item to proceed';
            else
              sMessage =
                'The component(s) of multiple component item' +
                ExistingPrescriptionItemVM.MCIMatchVersionItems +
                ' is not available as part of current version. Please reselect another from medication search list.';
          } else {
            if (ActivityTypeCode == ActivityTypes.Reorder)
              sMessage =
                'The  Multiple component item ' +
                ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                  .MCIIdentifyingName +
                ' is not available as part of current version. Please reselect another medication item to proceed';
            else
              sMessage =
                'The  Multiple component item ' +
                ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                  .MCIIdentifyingName +
                ' is not available as part of current version. Please reselect another from medication search list.';
          }
        } else {
          sMessage =
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
              .IdentifyingName +
            ' is not available as part of current version. Please reselect another from medication search list';
        }
        iMessageBox.Show(
          'Lorenzo',
          sMessage,
          MessageBoxType.Information,
          MessageBoxButton.OK
        );
        Busyindicator.SetStatusIdle('FormViewer');
        Busyindicator.SetStatusIdle('Reorder');
        Busyindicator.SetStatusIdle('FormViewerClick');
        return;
      } else {
        let objFormulary: ManagePrescSer.ConstituentItem =
          new ManagePrescSer.ConstituentItem();
        if (ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails != null) {
          objFormulary.PresItemType = ExistingPrescriptionItemVM.ItemMainType;
          objFormulary.PrescriptionItemID =
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingOID.ToString();
          objFormulary.Name =
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingName;
          objFormulary.Type =
            ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.IdentifyingType;
          objFormulary.LorenzoID = ExistingPrescriptionItemVM.LorenzoID;
          objFormulary.IsPrescribeByBrand =
            ExistingPrescriptionItemVM.IsPrescribeByBrand;
          objFormulary.IsFormulary =
            ExistingPrescriptionItemVM.IsNonformulary.Equals('1') ? '0' : '1';
          objFormulary.ItemSubType = ExistingPrescriptionItemVM.ItemSubType;
        }
        let oResUtil: ReplacementDrugVM = new ReplacementDrugVM();
        if (
          ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
            '0'
          ) &&
          String.Compare(
            SLQueryCollection.GetQueryStringValue('MenuCode'),
            'MN_MED_AUTHORI_SL_P2'
          ) != 0 &&
          String.Compare(
            ExistingPrescriptionItemVM.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          let obj: iMessageBox = new iMessageBox();
          let sMCItem: string[] = null;
          if (
            !String.IsNullOrEmpty(ExistingPrescriptionItemVM.MCIDEActiveItems)
          )
            sMCItem = ExistingPrescriptionItemVM.MCIDEActiveItems.Split('\n');
          if (
            !String.IsNullOrEmpty(
              ExistingPrescriptionItemVM.MCIDEActiveItems
            ) &&
            sMCItem.length > 0 &&
            !String.IsNullOrEmpty(sMCItem[0])
          ) {
            if (ActivityTypeCode == ActivityTypes.Reorder)
              obj.Message = String.Format(
                'The component(s) of multiple component item  ' +
                  ExistingPrescriptionItemVM.MCIDEActiveItems +
                  CConstants.MCI_DeactReorder,
                ExistingPrescriptionItemVM.MCIDEActiveItems
              );
            else
              obj.Message = String.Format(
                'The component(s) of multiple component item  ' +
                  ExistingPrescriptionItemVM.MCIDEActiveItems +
                  CConstants.MCI_Deactivate,
                ExistingPrescriptionItemVM.MCIDEActiveItems
              );
              obj.MessageButton = MessageBoxButton.OK; 
            obj.Show();
          } else {
            if (ActivityTypeCode == ActivityTypes.Reorder) {
              obj.Message = String.Format(
                'The medication item(s) ' +
                  ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                    .IdentifyingName +
                  ' ' +
                  CConstants.MCI_DeactReorder,
                ExistingPrescriptionItemVM.MCIDEActiveItems
              );
              Busyindicator.SetStatusIdle('Reorder');
            } else
              obj.Message = String.Format(
                'The medication item(s) ' +
                  ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails
                    .IdentifyingName +
                  ' ' +
                  CConstants.MCI_Deactivate,
                ExistingPrescriptionItemVM.MCIDEActiveItems
              );
              obj.MessageButton = MessageBoxButton.OK; 
              // obj.Closed  = (s,e) => { ObjectHelper.stopFinishAndCancelEvent(false) } ;
            obj.Show();
            // ObjectHelper.stopFinishAndCancelEvent(true);
          }
          Busyindicator.SetStatusIdle('FormViewer');
          Busyindicator.SetStatusIdle('Reorder');
          Busyindicator.SetStatusIdle('FormViewerClick');
          return;
        } else if (
          ExistingPrescriptionItemVM.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.Equals(
            '0'
          ) &&
          String.Compare(
            SLQueryCollection.GetQueryStringValue('MenuCode'),
            'MN_MED_AUTHORI_SL_P2'
          ) != 0 &&
          String.Compare(
            ExistingPrescriptionItemVM.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          oResUtil.GetReplacementDrugs(objFormulary, this);
        } else {
          oResUtil.NONReplacement(objFormulary, this);
        }
      }
    }
  }
  private GetConflictsDetails(oConflictsVM: ConflictsVM): void {
    if (oConflictsVM != null) {
      oConflictsVM.EnableAcknowledgementDetails = true;
      oConflictsVM.SetActionMandatory();
      if (oConflictsVM.ReasonMandatory) {
        oConflictsVM.PrescriberReason = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: 'Select reason',
            Value: 'Select reason*',
          }
        );
      } else {
        oConflictsVM.PrescriberReason = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: 'Select reason',
            Value: 'Select reason',
          }
        );
      }
      if (oConflictsVM.ReasonMandatory) {
        oConflictsVM.AuthoriserReason = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: 'Select reason',
            Value: 'Select reason*',
          }
        );
      } else {
        oConflictsVM.AuthoriserReason = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: 'Select reason',
            Value: 'Select reason',
          }
        );
      }
      if (oConflictsVM.ReasonMandatory) {
        oConflictsVM.ClinicalVerfierReason = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: 'Select reason',
            Value: 'Select reason*',
          }
        );
      } else {
        oConflictsVM.ClinicalVerfierReason = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: 'Select reason',
            Value: 'Select reason',
          }
        );
      }
    }
  }
  IsFormularyDrug: boolean = false;
  sPrescriptionItemName: string = String.Empty;
  GetAdditionalPrescribingConfigData(): void {
    this.profile.OnProfileLoaded = (s, e) => {
      this.AddPrescribingConfigData_OnProfileLoaded(s, e);
    };
    this.profile.GetProfile<AddPrescribingConfigData>(
      'VW_MEDICONFIG',
      'ADDPRESCRIBINGCONFIG'
    );
  }
  private AddPrescribingConfigData_OnProfileLoaded(
    sender: Object,
    Result: IProfileProp
  ): void {
    if (Result == null) return;
    if (Result.Profile instanceof AddPrescribingConfigData) {
      ProfileData.AdditionalPrescConfig =
        ObjectHelper.CreateType<AddPrescribingConfigData>(
          Result.Profile,
          AddPrescribingConfigData
        );
      if (
        ProfileData.AdditionalPrescConfig != null &&
        ProfileData.AdditionalPrescConfig.PrescribeofMCI
      )
        this.bEnableADHOCMCI = true;
      else this.bEnableADHOCMCI = false;
      this.GetDrugDetails(this.IsFormularyDrug, this.sPrescriptionItemName);
    }
  }
  ProfileFillMethod(Result: List<ProfileContext>): void {
    if (Result != null) {
      Result.forEach((oProfileContext) => {
        if (
          oProfileContext.ContextCode == 'VW_MEDICONFIG' &&
          oProfileContext.ProfileItemKey == 'PRESCONFIG'
        ) {
          if (oProfileContext.ProfileData instanceof PrescribingConfigData) {
            MedicationCommonProfileData.PrescribeConfig =
              ObjectHelper.CreateType<PrescribingConfigData>(
                oProfileContext.ProfileData,
                PrescribingConfigData
              );
          }
        } else if (
          oProfileContext.ContextCode == 'VW_MEDICONFIG' &&
          oProfileContext.ProfileItemKey == 'MEDSCHEDULECONFIG'
        ) {
          if (oProfileContext.ProfileData instanceof ScheduleConfig) {
            ProfileData.ScheduleConfig =
              ObjectHelper.CreateType<ScheduleConfig>(
                oProfileContext.ProfileData,
                ScheduleConfig
              );
          }
        } else if (
          oProfileContext.ContextCode == 'MA_ADMINSETTING' &&
          oProfileContext.ProfileItemKey == 'MACLINICALINCFRMCFG'
        ) {
          if (oProfileContext.ProfileData instanceof CClinicalIncidentConfig) {
            ProfileData.ClinicalIncidentConfig =
              ObjectHelper.CreateType<CClinicalIncidentConfig>(
                oProfileContext.ProfileData,
                CClinicalIncidentConfig
              );
          }
        } else if (
          oProfileContext.ContextCode == 'MA_ADMINSETTING' &&
          oProfileContext.ProfileItemKey == 'MASLOTCHARCONFIG'
        ) {
          if (
            oProfileContext.ProfileData instanceof CSlotCharacteristicsConfig
          ) {
            MedicationCommonProfileData.SlotCharacteristicsConfig =
              ObjectHelper.CreateType<CSlotCharacteristicsConfig>(
                oProfileContext.ProfileData,
                CSlotCharacteristicsConfig
              );
            if (MedicationCommonProfileData.SlotCharacteristicsConfig != null) {
              if (
                MedicationCommonProfileData.SlotCharacteristicsConfig
                  .DuenessThreshold > 0
              ) {
                MedChartData.DuenessThreshold = CommonBB.ConvertHourstoMinutes(
                  MedicationCommonProfileData.SlotCharacteristicsConfig
                    .DuenessThreshold
                );
              }
            }
          }
        } else if (
          oProfileContext.ContextCode == 'MA_ADMINSETTING' &&
          oProfileContext.ProfileItemKey == 'MACHARTDISPLAYCONFIG'
        ) {
          if (oProfileContext.ProfileData instanceof CChartDisplayConfig) {
            ProfileData.ChartDisplayConfig =
              ObjectHelper.CreateType<CChartDisplayConfig>(
                oProfileContext.ProfileData,
                CChartDisplayConfig
              );
            if (ProfileData.ChartDisplayConfig != null) {
              if (
                !String.IsNullOrEmpty(
                  ProfileData.ChartDisplayConfig.AsRequiredSlotsColor
                )
              ) {
                MedChartData.AsRequiredSlotsColor = CommonBB.ToColor(
                  ProfileData.ChartDisplayConfig.AsRequiredSlotsColor
                );
              }
              if (
                !String.IsNullOrEmpty(
                  ProfileData.ChartDisplayConfig.DueSlotsColor
                )
              ) {
                MedChartData.DueSlotsColor = CommonBB.ToColor(
                  ProfileData.ChartDisplayConfig.DueSlotsColor
                );
              }
              if (
                !String.IsNullOrEmpty(
                  ProfileData.ChartDisplayConfig.OmittedSlotsColor
                )
              ) {
                MedChartData.OmittedSlotsColor = CommonBB.ToColor(
                  ProfileData.ChartDisplayConfig.OmittedSlotsColor
                );
              }
              if (
                !String.IsNullOrEmpty(
                  ProfileData.ChartDisplayConfig.OverDueSlotsColor
                )
              ) {
                MedChartData.OverDueSlotsColor = CommonBB.ToColor(
                  ProfileData.ChartDisplayConfig.OverDueSlotsColor
                );
              }
              if (
                !String.IsNullOrEmpty(
                  ProfileData.ChartDisplayConfig.TodayOutlineColor
                )
              ) {
                MedChartData.TodayOutlineColor = CommonBB.ToColor(
                  ProfileData.ChartDisplayConfig.TodayOutlineColor
                );
              }
            }
          }
        } else if (
          oProfileContext.ContextCode == 'VW_MEDICONFIG' &&
          oProfileContext.ProfileItemKey == 'ADDPRESCRIBINGCONFIG'
        ) {
          if (oProfileContext.ProfileData instanceof AddPrescribingConfigData) {
            ProfileData.AdditionalPrescConfig =
              ObjectHelper.CreateType<AddPrescribingConfigData>(
                oProfileContext.ProfileData,
                AddPrescribingConfigData
              );
            if (
              ProfileData.AdditionalPrescConfig != null &&
              ProfileData.AdditionalPrescConfig.PrescribeofMCI
            ) {
              this.bEnableADHOCMCI = true;
            } else {
              this.bEnableADHOCMCI = false;
            }
          }
        } else if (
          String.Compare(oProfileContext.ContextCode, 'VW_MEDICONFIG') == 0 &&
          String.Compare(oProfileContext.ProfileItemKey, 'DRUGDISPCONFIG') == 0
        ) {
          if (oProfileContext.ProfileData instanceof MedDrugDisplayConfigData) {
            ProfileData.MedDrugDisplayConfig =
              ObjectHelper.CreateType<MedDrugDisplayConfigData>(
                oProfileContext.ProfileData,
                MedDrugDisplayConfigData
              );
          }
        } else if (
          String.Compare(oProfileContext.ContextCode, 'VW_MEDICONFIG') == 0 &&
          String.Compare(oProfileContext.ProfileItemKey, 'MEDSEARCHCONFIG') == 0
        ) {
          if (
            oProfileContext.ProfileData instanceof MedicationSearchConfigData
          ) {
            ProfileData.MedSearchConfig =
              ObjectHelper.CreateType<MedicationSearchConfigData>(
                oProfileContext.ProfileData,
                MedicationSearchConfigData
              );
          }
        }
      });
    }
  }
  oProfileFactory_OnProfileListLoaded(
    sender: Object,
    Result: List<ProfileContext>
  ): void {
    if (Result != null) {
      this.ProfileFillMethod(Result);
      this.GetDrugDetails(this.IsFormularyDrug, this.sPrescriptionItemName);
    }
  }
  oProfileFactory_OnProfileListLoadedForTypeIn(
    sender: Object,
    Result: List<ProfileContext>
  ): void {
    if (Result != null) {
      this.ProfileFillMethod(Result);
      this.GetResolveDrugDetails();
    }
  }
  oProfileFactory_OnProfileReconcileLoaded(
    sender: Object,
    Result: List<ProfileContext>
  ): void {
    if (Result != null) {
      this.ProfileFillMethod(Result);
      this.ReconcileLaunch();
    }
  }
  public CheckForNonFormulary(
    IsFormulary: boolean,
    PrescriptionItemName: string,
    IsInActiveItem?: boolean
  ): void {
    if (typeof IsInActiveItem == 'boolean') {
      this.CheckForNonFormulary3(
        IsFormulary,
        PrescriptionItemName,
        <boolean>IsInActiveItem
      );
    } else {
      this.CheckForNonFormulary2(IsFormulary, PrescriptionItemName);
    }
  }
  private CheckForNonFormulary2(
    IsFormulary: boolean,
    PrescriptionItemName: string
  ): void {
    this.IsFormularyDrug = IsFormulary;
    this.sPrescriptionItemName = PrescriptionItemName;
    if (
      ProfileData.AdditionalPrescConfig == null ||
      ProfileData.MedDrugDisplayConfig == null ||
      ProfileData.MedSearchConfig == null
    ) {
      Common.GetProfileConfigData((s,e) => {this.oProfileFactory_OnProfileListLoaded(s,e);});      
    } else {
      this.GetDrugDetails(IsFormulary, PrescriptionItemName);
    }
  }
  public CheckalreadyPrescribeddrug(
    identifyingoid: number,
    identifyingtype: string
  ): void {
    if (
      (String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory) &&
      this.ActivityCode != ActivityTypes.Amend
    ) {
      let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      objServiceProxy.GetPatientMedicationListCompleted = (s, e) => {
        this.objService_GetProcessingOptionsCompleted(s, e);
      };
      let objReqList: IPPMAManagePrescSer.CReqMsgGetPatientMedicationList =
        new IPPMAManagePrescSer.CReqMsgGetPatientMedicationList();
      objReqList.oMedicationListCriteriaBC =
        new IPPMAManagePrescSer.MedicationListCriteria();
      objReqList.oMedicationListCriteriaBC.PatientOID =
        PatientContext.PatientOID;
      if (
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        objReqList.oMedicationListCriteriaBC.CAPresType =
          PrescriptionTypes.Clerking;
      } else {
        objReqList.oMedicationListCriteriaBC.CAPresType =
          PatientContext.PrescriptionType;
      }
      let ReorderItemOIDs: string = String.Empty;
      if (
        this.MedsResolve != null &&
        PatientContext.PrescriptionType == PrescriptionTypes.Clerking
      ) {
        this.MedsResolve.forEach((item) => {
          if (item.SourcePrescriptionOid > 0) {
            ReorderItemOIDs =
              ReorderItemOIDs + ',' + item.SourcePrescriptionOid;
          }
        });
      }
      objReqList.oMedicationListCriteriaBC.IsDefaultRouteForm =
        this.IsRouteFormDefault;
      objReqList.oMedicationListCriteriaBC.AlreadyReorderdOID = ReorderItemOIDs;
      objReqList.oMedicationListCriteriaBC.McVersion = AppSessionInfo.AMCV;
      objReqList.oMedicationListCriteriaBC.EncounterOID =
        PatientContext.EncounterOid;
      objReqList.oMedicationListCriteriaBC.Identifyingoid = identifyingoid;
      objReqList.oMedicationListCriteriaBC.Identifyingtype = identifyingtype;
      objReqList.oMedicationListCriteriaBC.AlreadyPrescribedItem = '1';
      objReqList.oMedicationListCriteriaBC.sMenuCode = !String.IsNullOrEmpty(
        SLQueryCollection.GetQueryStringValue('MenuCode')
      )
        ? SLQueryCollection.GetQueryStringValue('MenuCode')
        : String.Empty;
      if (
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        objReqList.oMedicationListCriteriaBC.PrescriptionType =
          PrescriptionTypes.Clerking;
      } else {
        objReqList.oMedicationListCriteriaBC.PrescriptionType =
          PatientContext.PrescriptionType;
      }
      objReqList.oMedicationListCriteriaBC.ProfileDiscontinuedDrugFlag = '0';
      if (this.HitCount == 0) {
        let sImageList: string;
        objReqList.oMedicationListCriteriaBC.SealRecordList =
          MedicationPrescriptionHelper.GetSealDrugs(
            CConstants.PatConf_Pres,
            (o) => {
              sImageList = o;
            }
          );
        objReqList.oMedicationListCriteriaBC.SealImageList = sImageList;
        this.IppSealRecordList =
          objReqList.oMedicationListCriteriaBC.SealRecordList;
        this.IppSealImageList =
          objReqList.oMedicationListCriteriaBC.SealImageList;
        this.HitCount += 1;
      } else {
        objReqList.oMedicationListCriteriaBC.SealRecordList =
          this.IppSealRecordList;
        objReqList.oMedicationListCriteriaBC.SealImageList =
          this.IppSealImageList;
      }
      objReqList.oContextInformation = Common.FillContext();
      objServiceProxy.GetPatientMedicationListAsync(objReqList);
    } else {
      this.CheckForNonFormulary(
        this.IsFormularyDrug,
        this.sPrescriptionItemName
      );
    }
  }
  objService_GetProcessingOptionsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetPatientMedicationListCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000018;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:MedicationOptionVM, Method:objService_GetProcessingOptionsCompleted()';
    if (e.Error == null) {
      try {
        let objResList: IPPMAManagePrescSer.CResMsgGetPatientMedicationList =
          e.Result;
        let oResponse: ObservableCollection<IPPMAManagePrescSer.PrescriptionItemView> =
          objResList.oPrescriptionItemView;
        let oPresItem: ObservableCollection<PrescriptionItemVM> =
          new ObservableCollection<PrescriptionItemVM>();
        this.alreadyPrescribedItemOID = 0;
        if (
          this.ActivityCode == ActivityTypes.Reorder &&
          this.objProcessingItemVM != null
        )
          this.objProcessingItemVM.AlreadyPrescribedItemOID = 0;
        this.MedAlreadyPrescribedOptionList =
          new ObservableCollection<PrescriptionItemVM>();
        if (
          oResponse != null &&
          oResponse.Count > 0 &&
          (this.oDrugInputData == null ||
            (this.oDrugInputData != null &&
              (String.IsNullOrEmpty(this.oDrugInputData.IsIndicationRequired) ||
                String.Equals(this.oDrugInputData.IsIndicationRequired, '0'))))
        ) {
          if (oResponse.Count > 1) {
            oResponse.forEach((oItemView) => {
              if (
                oItemView instanceof IPPMAManagePrescSer.PrescriptionItemView
              ) {
                let oItemVM: PrescriptionItemVM = new PrescriptionItemVM(this);
                oItemVM.FillPrescriptionItemVM(oItemView, true, false);
                // oItemVM.PrescribeThisItemEvent -= this.PrescribeExistingItem;
                oItemVM.PrescribeThisItemEvent = (s, e) => {
                  this.PrescribeExistingItem(s, e);
                };
                oPresItem.Add(oItemVM);
              }
            });
            this.MedAlreadyPrescribedOptionList = oPresItem;
          }
          if (oResponse.Count == 1) {
            this.alreadyPrescribedItemOID = oResponse[0].PrescriptionItemOID;
            if (this.alreadyPrescribedItemOID > 0) {
              if (
                this.objNewItemVM != null &&
                this.objNewItemVM.ActionCode == ActivityTypes.Reorder
              ) {
                this.objNewItemVM = null;
              }
              if (
                this.objNewItemVM != null &&
                this.ActivityCode != ActivityTypes.Reorder
              )
                this.objNewItemVM.AlreadyPrescribedItemOID =
                  this.alreadyPrescribedItemOID;
              if (this.ActivityCode == ActivityTypes.Reorder) {
                this.objNewItemVM = new PrescriptionItemVM(this);
                if (
                  this.ActivityCode == ActivityTypes.Reorder &&
                  this.objProcessingItemVM != null &&
                  this.objProcessingItemVM.EncounterOID != 0 &&
                  PatientContext.EncounterOid != 0 &&
                  this.objProcessingItemVM.EncounterOID !=
                    PatientContext.EncounterOid
                ) {
                  this.alreadyPrescribedItemOID = 0;
                }
                if (
                  this.objNewItemVM.ParentbaseVM != null &&
                  this.objNewItemVM.ParentbaseVM.MedsInPatient != null &&    this.objNewItemVM.ParentbaseVM.MedsInPatient.Length > 0
                ) {
                  let res = this.objNewItemVM.ParentbaseVM.MedsInPatient.Where(
                    (item) =>
                      item.ReorderItemOID != 0 &&
                      item.ReorderItemOID == this.alreadyPrescribedItemOID &&
                      item.PrescriptionType == PrescriptionTypes.Inpatient
                  ).Select((item) => item);
                  if (res != null && res.Count() == 0) {
                    this.alreadyPrescribedItemOID = 0;
                  }
                }
                this.objNewItemVM.AlreadyPrescribedItemOID =
                  this.alreadyPrescribedItemOID;
              }
              this.CheckForNonFormulary(
                this.IsFormularyDrug,
                this.sPrescriptionItemName
              );
            }
          } else if (this.MedAlreadyPrescribedOptionList.Count > 1) {
            let sWindowTitle: string = String.Empty;
            this.sitemname = this.sPrescriptionItemName;
            //Not Required for LHS. To be Re-Visited.
            /*
                        this.objMedalready = new MedAlreadyPrescribedoption(this);
                        this.objMedalready.DataContext = this;
                        if (String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) == 0 || PatientContext.ClerkFormViewDefaultBehavior == ClerkFormViewDeftBehaviour.LaunchFormMandatory) {
                            if (String.Compare(this.MedAlreadyPrescribedOptionList[0].PrescriptionType, PrescriptionTypes.Discharge, StringComparison.InvariantCultureIgnoreCase) == 0) {
                                this.objMedalready.lblPrescribe.Text = String.Format(CConstants.PrescribedOPtionList, CConstants.sDischargeOverride);
                                this.objMedalready.chckNoMatch.Visibility = Visibility.Collapsed;
                                sWindowTitle = String.Format(CConstants.sPrescribedOptWindowTitle, CConstants.sDischargePrescription);
                            }
                        }
                        else {
                            this.objMedalready.lblPrescribe.Text = String.Format(CConstants.PrescribedOptionListOverride, CConstants.lblClercked, CConstants.sDischargeOverride);
                            this.objMedalready.chckNoMatch.Text = String.Format(CConstants.lblNoMatch_txt, CConstants.lblClercked);
                            sWindowTitle = String.Format(CConstants.sPrescribedOptWindowTitle, CConstants.sClerking);
                        }
                        AppActivity.OpenWindow(sWindowTitle, this.objMedalready,(s,e) =>{this.oMedOPtion_Closed(s);}, "", false, 410, 610, false, WindowButtonType.Ok, null);
                        */
          }
        } else {
          this.CheckForNonFormulary(
            this.IsFormularyDrug,
            this.sPrescriptionItemName
          );
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public CheckalreadyPrescOnBrandselect(
    identifyingoid: number,
    identifyingtype: string
  ): void {
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      objServiceProxy.GetPatientMedicationListCompleted = (s, e) => {
        this.objService_GetProcessingOptsCompltdForSelectBrand(s, e);
      };
      let objReqList: IPPMAManagePrescSer.CReqMsgGetPatientMedicationList =
        new IPPMAManagePrescSer.CReqMsgGetPatientMedicationList();
      objReqList.oMedicationListCriteriaBC =
        new IPPMAManagePrescSer.MedicationListCriteria();
      objReqList.oMedicationListCriteriaBC.PatientOID =
        PatientContext.PatientOID;
      if (
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        objReqList.oMedicationListCriteriaBC.CAPresType =
          PrescriptionTypes.Clerking;
      } else {
        objReqList.oMedicationListCriteriaBC.CAPresType =
          PatientContext.PrescriptionType;
      }
      let ReorderItemOIDs: string = String.Empty;
      if (
        this.MedsResolve != null &&
        PatientContext.PrescriptionType == PrescriptionTypes.Clerking
      ) {
        this.MedsResolve.forEach((item) => {
          if (item.SourcePrescriptionOid > 0) {
            ReorderItemOIDs =
              ReorderItemOIDs + ',' + item.SourcePrescriptionOid;
          }
        });
      }
      objReqList.oMedicationListCriteriaBC.IsDefaultRouteForm =
        this.IsRouteFormDefault;
      objReqList.oMedicationListCriteriaBC.AlreadyReorderdOID = ReorderItemOIDs;
      objReqList.oMedicationListCriteriaBC.McVersion = AppSessionInfo.AMCV;
      objReqList.oMedicationListCriteriaBC.EncounterOID =
        PatientContext.EncounterOid;
      objReqList.oMedicationListCriteriaBC.Identifyingoid = identifyingoid;
      objReqList.oMedicationListCriteriaBC.Identifyingtype = identifyingtype;
      objReqList.oMedicationListCriteriaBC.AlreadyPrescribedItem = '1';
      objReqList.oMedicationListCriteriaBC.sMenuCode = !String.IsNullOrEmpty(
        SLQueryCollection.GetQueryStringValue('MenuCode')
      )
        ? SLQueryCollection.GetQueryStringValue('MenuCode')
        : String.Empty;
      if (
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        objReqList.oMedicationListCriteriaBC.PrescriptionType =
          PrescriptionTypes.Clerking;
      } else {
        objReqList.oMedicationListCriteriaBC.PrescriptionType =
          PatientContext.PrescriptionType;
      }
      objReqList.oMedicationListCriteriaBC.ProfileDiscontinuedDrugFlag = '0';
      if (this.HitCount == 0) {
        let sImageList: string;
        objReqList.oMedicationListCriteriaBC.SealRecordList =
          MedicationPrescriptionHelper.GetSealDrugs(
            CConstants.PatConf_Pres,
            (o) => {
              sImageList = o;
            }
          );
        objReqList.oMedicationListCriteriaBC.SealImageList = sImageList;
        this.IppSealRecordList =
          objReqList.oMedicationListCriteriaBC.SealRecordList;
        this.IppSealImageList =
          objReqList.oMedicationListCriteriaBC.SealImageList;
        this.HitCount += 1;
      } else {
        objReqList.oMedicationListCriteriaBC.SealRecordList =
          this.IppSealRecordList;
        objReqList.oMedicationListCriteriaBC.SealImageList =
          this.IppSealImageList;
      }
      objReqList.oContextInformation = Common.FillContext();
      objServiceProxy.GetPatientMedicationListAsync(objReqList);
    }
  }
  objService_GetProcessingOptsCompltdForSelectBrand(
    sender: Object,
    e: IPPMAManagePrescSer.GetPatientMedicationListCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000018;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:MedicationOptionVM, Method:objService_GetProcessingOptsCompltdForSelectBrand()';
    if (e.Error == null) {
      try {
        let objResList: IPPMAManagePrescSer.CResMsgGetPatientMedicationList =
          e.Result;
        let oResponse: ObservableCollection<IPPMAManagePrescSer.PrescriptionItemView> =
          objResList.oPrescriptionItemView;
        let oPresItem: ObservableCollection<PrescriptionItemVM> =
          new ObservableCollection<PrescriptionItemVM>();
        this.alreadyPrescribedItemOID = 0;
        if (this.objNewItemVM != null)
          this.objNewItemVM.AlreadyPrescribedItemOID = 0;
        this.MedAlreadyPrescribedOptionList =
          new ObservableCollection<PrescriptionItemVM>();
        if (
          oResponse != null &&
          oResponse.Count > 0 &&
          (this.oDrugInputData == null ||
            (this.oDrugInputData != null &&
              (String.IsNullOrEmpty(this.oDrugInputData.IsIndicationRequired) ||
                String.Equals(this.oDrugInputData.IsIndicationRequired, '0'))))
        ) {
          if (
            oResponse.Count == 1 &&
            this.Activitycode != ActivityTypes.Reorder &&
            this.objNewItemVM != null &&
            this.objNewItemVM.ActionCode != ActivityTypes.Reorder
          ) {
            this.alreadyPrescribedItemOID = oResponse[0].PrescriptionItemOID;
            if (this.alreadyPrescribedItemOID > 0) {
              if (this.objNewItemVM != null)
                this.objNewItemVM.AlreadyPrescribedItemOID =
                  this.alreadyPrescribedItemOID;
            }
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public NoMatchAlert(): void {
    let oMsg: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
      Title: Resource.prescribedrugs.Title,
      Message: Resource.prescribedrugs.NoMatchAlert,
      MessageButton: MessageBoxButton.OK,
      IconType: MessageBoxType.Information,
    });
    oMsg.MessageBoxClose = (s, e) => {
      this.oMsg_MessageBoxClose_validation(s, e);
    };
    oMsg.Show();
  }
  oMsg_MessageBoxClose_validation(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.OK)
      this.cbMedAlreadyPresOK = false;
    //this.objMedalready.chckNoMatch.Focus(); //Not Required for LHS. To be Re-Visited.
  }
  //Not Required for LHS. To be Re-Visited.
  /*
    oMedOPtion_Closed(args: AppDialogEventargs): void {
        if (args.Result == AppDialogResult.Ok) {
            if (this.objMedalready != null && this.objMedalready.grdPrescribe != null && this.objMedalready.grdPrescribe.SelectedCells != null && this.objMedalready.grdPrescribe.SelectedCells.Count() == 1) {
                this.alreadyPrescribedItemOID = (<PrescriptionItemVM>(this.objMedalready.grdPrescribe.SelectedItem)).PrescriptionItemOID;
            }
            if (this.objMedalready.chckNoMatch.IsChecked == true || this.objMedalready.grdPrescribe.SelectedItems.Count() == 1) {
                if (this.objNewItemVM != null && (this.objNewItemVM.ActionCode == ActivityTypes.Reorder)) {
                    this.objNewItemVM = null;
                }
                if (this.objMedalready != null && this.objMedalready.grdPrescribe != null && this.objMedalready.grdPrescribe.SelectedCells != null && this.objMedalready.grdPrescribe.SelectedCells.Count() == 1) {
                    if (this.objNewItemVM != null)
                        this.objNewItemVM.AlreadyPrescribedItemOID = this.alreadyPrescribedItemOID;
                }
                if (this.ActivityCode == ActivityTypes.Reorder) {
                    this.objNewItemVM = new PrescriptionItemVM(this);
                    if (this.objMedalready != null && this.objMedalready.grdPrescribe != null && this.objMedalready.grdPrescribe.SelectedCells != null && this.objMedalready.grdPrescribe.SelectedCells.Count() == 1) {
                        this.objNewItemVM.AlreadyPrescribedItemOID = this.alreadyPrescribedItemOID;
                    }
                }
                this.oChildWindow = args.AppChildWindow;
                this.oChildWindow.DialogResult = false;
                this.CheckForNonFormulary(this.IsFormularyDrug, this.sPrescriptionItemName);
                if (this.objMedalready != null && this.objMedalready.chckNoMatch != null && this.objMedalready.chckNoMatch.IsChecked == true) {
                    this.IsNoMatche = true;
                    if (this.objNewItemVM != null) {
                        this.objNewItemVM.IsNoMatches = true;
                    }
                }
            }
            else if (!this.cbMedAlreadyPresOK) {
                this.cbMedAlreadyPresOK = true;
                this.NoMatchAlert();
            }
        }
        else {
            this.objMedalready = null;
            this.oChildWindow = args.AppChildWindow;
            this.oChildWindow.DialogResult = true;
            Busyindicator.SetStatusIdle("FormViewer");
            Busyindicator.SetStatusIdle("PrescribeProductOption");
            Busyindicator.SetStatusIdle("Favourites");
            Busyindicator.SetStatusIdle("IndicationreqForm");
            Busyindicator.SetStatusIdle("FormViewerClick");
            Busyindicator.SetStatusIdle("Reorder");
        }
    }
    */
  SlotCharacteristicsConfig_OnProfileLoaded(
    sender: Object,
    Result: IProfileProp
  ): void {
    if (Result != null) {
      if (Result.Profile instanceof CSlotCharacteristicsConfig) {
        MedicationCommonProfileData.SlotCharacteristicsConfig =
          ObjectHelper.CreateType<CSlotCharacteristicsConfig>(
            Result.Profile,
            CSlotCharacteristicsConfig
          );
      }
      if (
        MedicationCommonProfileData.SlotCharacteristicsConfig instanceof
          CSlotCharacteristicsConfig &&
        MedicationCommonProfileData.SlotCharacteristicsConfig != null
      ) {
        if (
          MedicationCommonProfileData.SlotCharacteristicsConfig
            .DuenessThreshold > 0
        ) {
          MedChartData.DuenessThreshold = Common.ConvertHourstoMinutes(
            MedicationCommonProfileData.SlotCharacteristicsConfig
              .DuenessThreshold
          );
        }
      }
    }
  }
  ChartDisplayConfig_OnProfileLoaded(
    sender: Object,
    Result: IProfileProp
  ): void {
    if (Result != null) {
      if (Result.Profile instanceof CChartDisplayConfig) {
        MedicationCommonProfileData.ChartDisplayConfig =
          ObjectHelper.CreateType<CChartDisplayConfig>(
            Result.Profile,
            CChartDisplayConfig
          );
      }
      if (MedicationCommonProfileData.ChartDisplayConfig != null) {
        if (
          !String.IsNullOrEmpty(
            MedicationCommonProfileData.ChartDisplayConfig.AsRequiredSlotsColor
          )
        ) {
          MedChartData.AsRequiredSlotsColor = CommonBB.ToColor(
            MedicationCommonProfileData.ChartDisplayConfig.AsRequiredSlotsColor
          );
        }
        if (
          !String.IsNullOrEmpty(
            MedicationCommonProfileData.ChartDisplayConfig.DueSlotsColor
          )
        ) {
          MedChartData.DueSlotsColor = CommonBB.ToColor(
            MedicationCommonProfileData.ChartDisplayConfig.DueSlotsColor
          );
        }
        if (
          !String.IsNullOrEmpty(
            MedicationCommonProfileData.ChartDisplayConfig.OmittedSlotsColor
          )
        ) {
          MedChartData.OmittedSlotsColor = CommonBB.ToColor(
            MedicationCommonProfileData.ChartDisplayConfig.OmittedSlotsColor
          );
        }
        if (
          !String.IsNullOrEmpty(
            MedicationCommonProfileData.ChartDisplayConfig.OverDueSlotsColor
          )
        ) {
          MedChartData.OverDueSlotsColor = CommonBB.ToColor(
            MedicationCommonProfileData.ChartDisplayConfig.OverDueSlotsColor
          );
        }
        if (
          !String.IsNullOrEmpty(
            MedicationCommonProfileData.ChartDisplayConfig.TodayOutlineColor
          )
        ) {
          MedChartData.TodayOutlineColor = CommonBB.ToColor(
            MedicationCommonProfileData.ChartDisplayConfig.TodayOutlineColor
          );
        }
      }
    }
  }
  private GetDrugDetails(
    IsFormulary: boolean,
    PrescriptionItemName: string
  ): void {
    let bReprescribe: boolean = false;
    this._IsFormulary = IsFormulary;
    this._PresItemName = PrescriptionItemName;
    FormviewerCommonData.ServerDateTime = CommonBB.GetServerDateTime();
    if (
      ProfileData.MedConflictConfig == null &&
      this.IsConflictConfigLoaded == AsyncCallStatus.YetToTrigger
    ) {
      this.GetConflictConfig();
    }
    if (
      this._IsSlotCharConfigLoaded &&
      MedicationCommonProfileData.SlotCharacteristicsConfig == null &&
      (String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Inpatient,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0)
    ) {
      MedicationCommonBB.GetSlotCharacteristicsConfig((s, e) => {
        this.SlotCharacteristicsConfig_OnProfileLoaded(s, e);
      });
    }
    this._IsSlotCharConfigLoaded = true;
    if (MedicationCommonProfileData.ChartDisplayConfig == null) {
      MedicationCommonBB.GetChartDisplayConfigProfileData((s, e) => {
        this.ChartDisplayConfig_OnProfileLoaded(s, e);
      });
    }
    if (
      this.DefaultStationaryType == null &&
      this.IsStationaryTypeLoaded == AsyncCallStatus.YetToTrigger
    ) {
      this.GetStationaryType();
    }
    if (
      ProfileData.MedConflictConfig != null &&
      this._IsSlotCharConfigLoaded &&
      this.IsStationaryTypeLoaded == AsyncCallStatus.Complete
    ) {
      if (
        this.objRePresItmCollection != null &&
        this.objRePresItmCollection.Count > 0
      ) {
        bReprescribe = true;
      }

      
            if (ProfileData.AdditionalPrescConfig.FormularyMandatory && !IsFormulary && this.ActivityCode != ActivityTypes.Amend && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) != 0 && (this.oDrugInputData == null || ((this.oDrugInputData != null && (String.IsNullOrEmpty(this.oDrugInputData.IsAccessContraint) || String.Equals(this.oDrugInputData.IsAccessContraint, "0"))) && (this.oDrugInputData != null && (String.IsNullOrEmpty(this.oDrugInputData.IsIndicationRequired) || String.Equals(this.oDrugInputData.IsIndicationRequired, "0"))))) && !bReprescribe) {
                //this.omedNonFormulary = new medNonFormulary(ObjectHelper.CreateObject(new NonFormularyVM(true), { ItemName: PrescriptionItemName }));
                // ObjectHelper.stopFinishAndCancelEvent(true);
                this.omedNonFormulary = new medNonFormulary();
                this.omedNonFormulary.constructorImpl(ObjectHelper.CreateObject(new NonFormularyVM(true), { ItemName: PrescriptionItemName }));
                AppActivity.OpenWindow("Non formulary item ", this.omedNonFormulary,(s,e) => {this.objNF_Closed(s);}, "Non formulary item", false, 255, 433, false, WindowButtonType.OkCancel, null);
            }
            else {
                if (this.ActivityCode == ActivityTypes.Prescribe) {
                    if (this.oDrugInputData != null && (this.oDrugInputData.IsAccessContraint == "1" || String.Equals(this.oDrugInputData.IsIndicationRequired, "1", StringComparison.CurrentCultureIgnoreCase))) {
                        let sOID: string = this.oDrugInputData.IdentifyingOID.ToString();
                        let sType: string = this.oDrugInputData.IdentifyingType;
                        let sName: string = this.oDrugInputData.IdentifyingName;
                        let sIsFormulary: string = this.oDrugInputData.IsFormulary.ToString();
                        let sFormularyNote: string = this.oDrugInputData.FormularyNote;
                        this.oIndicationdtl = new Indicationdtl();
                        this.oIndicationdtl.IsAccessConstriant = this.oDrugInputData.IsAccessContraint;
                        this.oIndicationdtl.IsIndicationRequired = this.oDrugInputData.IsIndicationRequired;
                        this.oIndicationdtl.IsPrescribeByBrand = this.oDrugInputData.IsPrescribeByBrand;
                        this.oIndicationdtl.ItemType = this.oDrugInputData.ItemType;
                        this.oIndicationdtl.IsFormulary = this.oDrugInputData.IsFormulary;
                        this.oIndicationdtl.LorenzoID = this.oDrugInputData.LorenzoID;
                        this.oIndicationdtl.ITMSUBTYP = this.oDrugInputData.ITMSUBTYP;
                        this.oIndicationdtl.SourceDataProviderType = this.oDrugInputData.SourceDataProviderType;
                        this.LaunchAccessConstraint(sOID, sType, sName, sFormularyNote, null, null, null, this.oIndicationdtl, this.oDrugInputData.IsAuthorise);
                    }
                    else {
                        this.GetResolveDrugDetails();
                    }
                }
                else {
                    this.GetPresItemDetails();
                }
            }
            
    }
  }
  private GetConflictConfig(): void {
    if (WebServiceURL.IPPMAManagePrescriptionWS != null) {
      this.IsConflictConfigLoaded = AsyncCallStatus.InProgress;
      let objService: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      let objReqConfig: IPPMAManagePrescSer.CReqMsgGetMedicationConfilictConfig =
        new IPPMAManagePrescSer.CReqMsgGetMedicationConfilictConfig();
      objReqConfig.IsMainAppConflictsBC = '1';
      objReqConfig.oContextInformation = Common.FillContext();
      objService.GetMedicationConfilictConfigCompleted = (s, e) => {
        this.ConflictsConfig_Completed(s, e);
      };
      objService.GetMedicationConfilictConfigAsync(objReqConfig);
    }
  }
  private ConflictsConfig_Completed(
    sender: Object,
    e: IPPMAManagePrescSer.GetMedicationConfilictConfigCompletedEventArgs
  ): void {
    if (e.Error != null) {
      let _ErrorID: number = 80000038;
      let _ErrorSource: string =
        'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:ConflictsConfig_Completed()';
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    } else {
      let objResConfig: IPPMAManagePrescSer.CResMsgGetMedicationConfilictConfig =
        e.Result;
      if (objResConfig != null) {
        ProfileData.MedConflictConfig = e.Result.oMedicationConflictConfig;
      }
      this.IsConflictConfigLoaded = AsyncCallStatus.Complete;
    }
  }
  public DeactivatePessimisticLock(
    OIDs: IPPMAManagePrescSer.ArrayOfLong,
    Code: string,
    nLockDur: number
  ): void {
    let sHasRights: string;
    OIDs.forEach((lnOID) => {
      sHasRights = ObjectHelper.CreateType<string>(
        HtmlPage.Window.Invoke(
          'DeactivatePessimisticLock',
          lnOID,
          Code,
          nLockDur
        ),
        'string'
      );
    });
  }
  private CheckForNonFormulary3(
    IsFormulary: boolean,
    PrescriptionItemName: string,
    IsInActiveItem: boolean
  ): void {
    this.IsFormularyDrug = IsFormulary;
    this.sPrescriptionItemName = PrescriptionItemName;
    if (this.objProcessingItemVM != null) {
      if (!this.objProcessingItemVM.IsFormViewerDisable) {
        this.objProcessingItemVM.IsFormViewerDisable = IsInActiveItem;
      }
      let IsClinicalEncounterCollection: boolean = false;
      if (
        !String.IsNullOrEmpty(this.ClinicalEncounterOID) &&
        this.ClinicalEncounterOID.Contains(
          this.objProcessingItemVM.EncounterOID.ToString()
        )
      ) {
        IsClinicalEncounterCollection = true;
      }
      if (
        this.objProcessingItemVM.EncounterOID != PatientContext.EncounterOid ||
        (this.objProcessingItemVM.EncounterOID == PatientContext.EncounterOid &&
          String.Compare(
            PrescriptionTypes.Outpatient,
            this.objProcessingItemVM.PrescriptionType,
            StringComparison.OrdinalIgnoreCase
          ) == 0) ||
        (this.objProcessingItemVM.EncounterOID == PatientContext.EncounterOid &&
          String.Compare(
            PrescriptionTypes.Leave,
            this.objProcessingItemVM.PrescriptionType,
            StringComparison.OrdinalIgnoreCase
          ) == 0) ||
        (this.objProcessingItemVM.EncounterOID == PatientContext.EncounterOid &&
          String.Compare(
            PrescriptionTypes.Inpatient,
            this.objProcessingItemVM.PrescriptionType,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          (String.Compare(
            PrescriptionTypes.Clerking,
            this.objProcessingItemVM.ParentSourcePrescriptionType,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            String.Equals(
              PrescriptionTypes.Discharge,
              this.objProcessingItemVM.ParentSourcePrescriptionType,
              StringComparison.InvariantCultureIgnoreCase
            ))) ||
        (this.objProcessingItemVM.EncounterOID == PatientContext.EncounterOid &&
          String.Compare(
            PrescriptionTypes.Inpatient,
            this.objProcessingItemVM.PrescriptionType,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          String.IsNullOrEmpty(
            this.objProcessingItemVM.ParentPrescriptionitemstatus
          ))
      ) {
        if (
          (this.objProcessingItemVM.EncounterOID ==
            PatientContext.EncounterOid &&
            String.Compare(
              PrescriptionTypes.Inpatient,
              this.objProcessingItemVM.PrescriptionType,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            String.Compare(
              PrescriptionTypes.Clerking,
              this.objProcessingItemVM.ParentSourcePrescriptionType,
              StringComparison.OrdinalIgnoreCase
            ) == 0) ||
          (this.objProcessingItemVM.EncounterOID ==
            PatientContext.EncounterOid &&
            String.Compare(
              PrescriptionTypes.Inpatient,
              this.objProcessingItemVM.PrescriptionType,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            String.IsNullOrEmpty(
              this.objProcessingItemVM.ParentPrescriptionitemstatus
            ))
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason =
            null;
        }
        if (
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.Route !=
            null ||
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DosageForm !=
            null
        ) {
          this.IsRouteFormDefault = true;
        } else {
          this.IsRouteFormDefault = false;
        }
        this.CheckalreadyPrescribeddrug(
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .IdentifyingOID,
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .IdentifyingType
        );
      } else {
        if (
          this.ActivityCode == ActivityTypes.Reorder &&
          this.objProcessingItemVM != null
        )
          this.objProcessingItemVM.AlreadyPrescribedItemOID = 0;
        this.CheckForNonFormulary(IsFormulary, PrescriptionItemName);
      }
    } else {
      this.CheckForNonFormulary(IsFormulary, PrescriptionItemName);
    }
  }
  private GetResolveDrugDetails(): void {
    if (
      ProfileData.MedConflictConfig == null &&
      this.IsConflictConfigLoaded == AsyncCallStatus.YetToTrigger
    ) {
      this.GetConflictConfig();
    }
    if (this.objNewItemVM == null) {
      this.objNewItemVM = new PrescriptionItemVM(this);
      if (this.IsOtherClick) {
        this.objNewItemVM.IsOtherClick = true;
        this.IsOtherClick = false;
      }
      if (this.oDrugInputData != null)
        this.objNewItemVM.GetResolveDefault(this.oDrugInputData, (s, e) => {
          this.GetResolveDefaultCompleted(s, e);
        });
      this.objNewItemVM.AlreadyPrescribedItemOID =
        this.alreadyPrescribedItemOID;
      this.objNewItemVM.IsNoMatches = this.IsNoMatche;
      this.IsNoMatche = false;
    } else {
      if (
        this.oDrugInputData != null &&
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
          )
        ) {
          this.objNewItemVM.GetResolveDetails(
            this.oDrugInputData.IdentifyingOID,
            this.oDrugInputData.IdentifyingType,
            AppSessionInfo.AMCV,
            '\0',
            this.oDrugInputData.PrescribableItemDetailOID,
            this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
          );
        } else {
          this.objNewItemVM.GetResolveDetails(
            this.oDrugInputData.IdentifyingOID,
            this.oDrugInputData.IdentifyingType,
            AppSessionInfo.AMCV,
            '\0',
            this.oDrugInputData.PrescribableItemDetailOID,
            String.Empty
          );
        }
      }
      this.objNewItemVM.AlreadyPrescribedItemOID =
        this.alreadyPrescribedItemOID;
      this.objNewItemVM.OperationMode = 'N';
      this.objNewItemVM.FillPresItemDetailsEvent = (s,e) => {
        this.objFillPresItemDetailsDelegate_completed();
      };
      this.IsNoMatche = false;
    }
  }
  GetResolveDefaultCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetResolveDefaultCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000029;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:GetResolveDefaultCompleted()';
    if (e.Error == null) {
      try {
        let objResResolve: IPPMAManagePrescSer.CResMsgGetResolveDefault =
          e.Result;
        if (objResResolve != null) {
          if (
            objResResolve.oPrescriptionItemDetails != null &&
            objResResolve.oPrescriptionItemDetails.Count > 0
          ) {
            objResResolve.oPrescriptionItemDetails[0].IdentifyingOID =
              this.oDrugInputData.IdentifyingOID;
            objResResolve.oPrescriptionItemDetails[0].IdentifyingType =
              this.oDrugInputData.IdentifyingType;
            if (objResResolve.oPrescriptionItemDetails[0].MCVersionNo == null)
              objResResolve.oPrescriptionItemDetails[0].MCVersionNo =
                this.oDrugInputData.MCVersionNo;
            if (
              objResResolve.oPrescriptionItemDetails[0].IdentifyingName == null
            )
              objResResolve.oPrescriptionItemDetails[0].IdentifyingName =
                this.oDrugInputData.IdentifyingName;
            if (objResResolve.oPrescriptionItemDetails[0].ItemType == null)
              objResResolve.oPrescriptionItemDetails[0].ItemType =
                this.oDrugInputData.ItemType;
            if (objResResolve.oPrescriptionItemDetails[0].ITMSUBTYP == null)
              objResResolve.oPrescriptionItemDetails[0].ITMSUBTYP =
                this.oDrugInputData.ITMSUBTYP;
            if (objResResolve.oPrescriptionItemDetails[0].LorenzoID == null)
              objResResolve.oPrescriptionItemDetails[0].LorenzoID =
                this.oDrugInputData.LorenzoID;
            if (
              String.IsNullOrEmpty(
                objResResolve.oPrescriptionItemDetails[0].FormularyNote
              ) &&
              !String.IsNullOrEmpty(this.oDrugInputData.FormularyNote)
            ) {
              objResResolve.oPrescriptionItemDetails[0].FormularyNote =
                this.oDrugInputData.FormularyNote.Replace(
                  'Formulary note - ',
                  ''
                );
            }
            if (this.alreadyPrescribedItemOID > 0)
              objResResolve.oPrescriptionItemDetails[0].ReorderedFromclerkItemOID =
                this.alreadyPrescribedItemOID;
            if (
              objResResolve.oPrescriptionItemDetails[0].BasicProperties !=
                null &&
              objResResolve.oPrescriptionItemDetails[0].BasicProperties.Route !=
                null &&
              objResResolve.oPrescriptionItemDetails[0].BasicProperties.Route
                .OID > 0
            )
              objResResolve.oPrescriptionItemDetails[0].BasicProperties.Route.Name =
                objResResolve.oPrescriptionItemDetails[0].BasicProperties.Route.OID.ToString() +
                CConstants.MULTIROUTE_ROUTE +
                objResResolve.oPrescriptionItemDetails[0].BasicProperties.Route
                  .Name;
            let ddStartDTTM: DateTime = DateTime.MinValue;
            let ddFirstAdmnSchTime: DateTime = DateTime.MinValue;
            let ddPrevfirstscheduledatetime: DateTime = DateTime.MinValue;
            if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
              let oItemVM: PrescriptionItemVM = this.MedsResolve.ElementAt(0);
              if (oItemVM != null) {
                ddStartDTTM = oItemVM.FormViewerDetails.BasicDetails.StartDTTM;
                ddFirstAdmnSchTime =
                  oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime;
                if (oItemVM.FormViewerDetails.BasicDetails.AdminTimes != null) {
                  let _freqDetails: IPPMAManagePrescSer.CResMsgGetAdministrationTimes =
                    oItemVM.FormViewerDetails.BasicDetails.AdminTimes
                      .FreqDetails;
                  let FrequrncyType: string =
                    _freqDetails != null && _freqDetails.oFrequency != null
                      ? _freqDetails.oFrequency.Type
                      : String.Empty;
                  if (String.Compare(FrequrncyType, 'CC_PERIOD') == 0) {
                    if (
                      oItemVM.FormViewerDetails.BasicDetails.AdminTimes
                        .IsFixedTime
                    ) {
                      if (
                        oItemVM.FormViewerDetails.BasicDetails.AdminTimes
                          .AdministrationScheduleTimes != null
                      ) {
                        let AdmnTimesOrdered =
                          oItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Where(
                            (oAdmnTime) =>
                              oAdmnTime.ScheduleDTTM.TimeOfDay >=
                              ddFirstAdmnSchTime.TimeOfDay
                          )
                            .OrderBy(
                              (oAdmnTime) => oAdmnTime.ScheduleDTTM.TimeOfDay
                            )
                            .Select((oAdmnTime) => oAdmnTime);
                        if (
                          AdmnTimesOrdered != null &&
                          AdmnTimesOrdered.Count() > 0
                        ) {
                          ddFirstAdmnSchTime = new DateTime(
                            ddStartDTTM.Date.AddMinutes(
                              AdmnTimesOrdered.First().ScheduleDTTM.TimeOfDay
                                .TotalMinutes
                            ).Ticks,
                            DateTimeKind.Local
                          );
                        }
                      }
                    } else if (
                      oItemVM.FormViewerDetails.BasicDetails.AdminTimes
                        .IsDrugroundTime
                    ) {
                      let AdmnTimesOrdered =
                        oItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Where(
                          (oAdmnTime) =>
                            oAdmnTime.DrugroundDTTM.TimeOfDay >=
                            ddFirstAdmnSchTime.TimeOfDay
                        )
                          .OrderBy(
                            (oAdmnTime) => oAdmnTime.DrugroundDTTM.TimeOfDay
                          )
                          .Select((oAdmnTime) => oAdmnTime);
                      if (
                        AdmnTimesOrdered != null &&
                        AdmnTimesOrdered.Count() > 0
                      ) {
                        ddFirstAdmnSchTime = new DateTime(
                          ddStartDTTM.Date.AddMinutes(
                            AdmnTimesOrdered.First().DrugroundDTTM.TimeOfDay
                              .TotalMinutes
                          ).Ticks,
                          DateTimeKind.Local
                        );
                      }
                    }
                  }
                }
              }
              ddPrevfirstscheduledatetime =
                oItemVM.FormViewerDetails.BasicDetails.Firstscheduledatetime;
            }
            if (
              this.oDrugInputData != null &&
              !String.IsNullOrEmpty(this.oDrugInputData.IndicationOverrideReson)
            ) {
              objResResolve.oPrescriptionItemDetails[0].IndicationOverrideReson =
                this.oDrugInputData.IndicationOverrideReson;
            }
            this.objNewItemVM.FillAllDetails(
              objResResolve.oPrescriptionItemDetails[0],
              ddStartDTTM,
              ddFirstAdmnSchTime,
              ddPrevfirstscheduledatetime,
              this.sStatPrevVMVPIdentifyingName,
              this.sStatPrevVMVPLorenzoID,
              this.cFollowUpOrStat,
              this.IsrecordadmindoneforSTAT,
              true
            );
            this.objNewItemVM.OperationMode = 'N';
            this.objNewItemVM.FillPresItemDetailsEvent = (s,e) => {
              this.objFillPresItemDetailsDelegate_completed();
            };
            if (
              this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.formViewerDetails.BasicDetails != null &&
              this.OrdersetStat != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .FollowUpStatLaunch != '\0'
            ) {
              this.objNewItemVM.formViewerDetails.BasicDetails.Ordersets =
                new CListItem();
              this.objNewItemVM.formViewerDetails.BasicDetails.Ordersets =
                this.OrdersetStat;
              this.objNewItemVM.formViewerDetails.BasicDetails.IsOrderSetIconVisible =
                Visibility.Visible;
              this.OrdersetStat = null;
            }
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public isDeactivatedAttributesExists(): boolean {
    let isInfDrug: boolean = false;
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.formViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
        '1'
      ) == 0 &&
      (String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
      ) ||
        (!String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
        ) &&
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
            'CC_MEDGAS'
          ) != 0))
    ) {
      isInfDrug = true;
    }
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      ((this.objNewItemVM.FormViewerDetails.BasicDetails
        .DeactivatedRouteCollection != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails
          .DeactivatedRouteCollection.Count > 0) ||
        (this.objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedFormList !=
          null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedFormList
              .Value
          )) ||
        (this.objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedSiteList !=
          null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedSiteList
              .Value
          )) ||
        (this.objNewItemVM.FormViewerDetails.BasicDetails
          .DeactivatedQuantityList != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .DeactivatedQuantityList.Value
          )) ||
        (this.objNewItemVM.FormViewerDetails.BasicDetails
          .DeactivatedDoseUOMList != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .DeactivatedDoseUOMList.Value
          )) ||
        (this.objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedStrength !=
          null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DeactivatedStrength
              .Value
          )) ||
        (isInfDrug &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .DeactivatedRateNumUOMList != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .DeactivatedRateNumUOMList.Value
          ) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .DeactivatedRateNumUOMList.DisplayText != 'ml') ||
        (isInfDrug &&
          this.objNewItemVM.CanshowBoosterMessage() &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .DeactivatedBoosterUOMList != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .DeactivatedBoosterUOMList.Value
          )) ||
        (isInfDrug &&
          this.objNewItemVM.IsPCA() &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .DeactivatedBolusUOMList != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .DeactivatedBolusUOMList.Value
          )))
    )
      return false;
    else if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist
    ) {
      return false;
    } else return true;
  }
  public IsMandatoryAndDeactAttri(): boolean {
    if (this.IsMandatoryValuesFilled()) {
      if (!this.isDeactivatedAttributesExists()) return false;
      else return true;
    } else return false;
  }
  public IntermittentdminTimesValidation(): boolean {
    let strDoseType: string =
      this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null
        ? this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
        : String.Empty;
    if (
      PatientContext.IsINFUSIONON &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Infusions &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
        .AdministrationScheduleTimes != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
        .AdministrationScheduleTimes.Count >= 1 &&
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) == 0 &&
      (String.Compare(
        strDoseType,
        DoseTypeCode.NORMAL,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
        String.Compare(
          strDoseType,
          DoseTypeCode.DOSAGERANGE,
          StringComparison.OrdinalIgnoreCase
        ) == 0) &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.INTERMITTENT,
        StringComparison.OrdinalIgnoreCase
      ) == 0 &&
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      let sSlotTimeMode: string = String.Empty;
      let errorMsgFound: boolean = false;
      let AdminSchORDrugRndTimes: List<DateTime> = new List<DateTime>();
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
          .AdministrationScheduleTimes != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
          .AdministrationScheduleTimes.Count > 0
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
            .IsFixedTime
        )
          sSlotTimeMode = 'F';
        else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
            .IsDrugroundTime
        )
          sSlotTimeMode = 'D';
        if (
          !String.IsNullOrEmpty(sSlotTimeMode) &&
          String.Compare(sSlotTimeMode, 'F') == 0
        ) {
          let AdminscheduleTimes =
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Select(
              (s) => s
            )
              .OrderBy((o) => o.ScheduleDTTM)
              .ToList();
          AdminSchORDrugRndTimes = AdminscheduleTimes.Select(
            (s) => s.ScheduleDTTM
          ).ToList();
        } else {
          AdminSchORDrugRndTimes =
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Select(
              (s) => s.DrugroundDTTM
            ).ToList();
        }
        if (
          AdminSchORDrugRndTimes != null &&
          AdminSchORDrugRndTimes.Count > 0
        ) {
          let nCount: number = AdminSchORDrugRndTimes.Count;
          let dtprevScheduleDTTM: DateTime = DateTime.MinValue;
          let dtlatestSchedulDTTM: DateTime = DateTime.MinValue;
          let dtCurrentTime: DateTime = CommonBB.GetServerDateTime();
          let dtpTemprevScheduleDTTM: DateTime = DateTime.MinValue;
          if (nCount > 1) {
            for (let i: number = 0; i < nCount; i++) {
              let Currentts: TimeSpan = new TimeSpan(
                dtCurrentTime.Hour,
                dtCurrentTime.Minute,
                dtCurrentTime.Second
              );
              let dtScheduleDTTM: DateTime = AdminSchORDrugRndTimes[i];
              let ts: TimeSpan = new TimeSpan(
                dtScheduleDTTM.Hour,
                dtScheduleDTTM.Minute,
                dtScheduleDTTM.Second
              );
              if (ts < Currentts) {
                AdminSchORDrugRndTimes[i] = dtScheduleDTTM.AddDays(1);
              }
            }
            let TempAdminSchORDrugRndTimes: IEnumerable<DateTime> =
              AdminSchORDrugRndTimes.OrderBy((x) => x.Date).Select((x) => x);
            if (TempAdminSchORDrugRndTimes != null) {
              let nTempCount: number = TempAdminSchORDrugRndTimes.Count();
              if (nTempCount > 0) {
                TempAdminSchORDrugRndTimes.forEach((Tempdt) => {
                  dtprevScheduleDTTM = Tempdt;
                  let ts: TimeSpan = new TimeSpan(
                    dtprevScheduleDTTM.Hour,
                    dtprevScheduleDTTM.Minute,
                    dtprevScheduleDTTM.Second
                  );
                  if (
                    DateTime.NotEquals(dtlatestSchedulDTTM, DateTime.MinValue) &&
                    DateTime.NotEquals(dtprevScheduleDTTM, dtlatestSchedulDTTM)
                  ) {
                    errorMsgFound = Common.IsWrongAdminTime(
                      dtprevScheduleDTTM,
                      dtlatestSchedulDTTM
                    );
                    if (errorMsgFound) return;
                  }
                  dtlatestSchedulDTTM = dtprevScheduleDTTM;
                });
              }
            }
          }
        }
      }
      if (errorMsgFound) {
        if (sSlotTimeMode == 'F' || sSlotTimeMode == 'D') {
          return false;
        }
      }
    }
    return true;
  }
  public IsMandatoryValuesFilled(): boolean {
    if (this.objNewItemVM.FormViewerDetails.BHasFormViewParams) {
      return (
        this.objNewItemVM.CheckDynamicFormMandatoryDynamicForm(null) &&
        this.IsTVMandatoryAndFilled(this.objNewItemVM) &&
        this.IsDOWMandatoryAndFilled(this.objNewItemVM)
      );
    } else {
      let IsOrderSetMedication: boolean = false;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
        ) &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.DisplayText
        ) &&
        !String.Equals(
          PrescriptionTypes.Clerking,
          PatientContext.PrescriptionType,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        IsOrderSetMedication = true;
      }
      if (
        IsOrderSetMedication &&
        this.objNewItemVM.ActionCode == ActivityTypes.Prescribe &&
        this.objNewItemVM.IsDoseCalcVisible == Visibility.Visible &&
        this.objNewItemVM.IsDoseCalcEnabled &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.ISAlwaysuseDosecalc &&
        MedicationCommonProfileData.PrescribeConfig != null &&
        MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
      ) {
        return false;
      }
      if (
        this.objNewItemVM.ActionCode == ActivityTypes.Prescribe &&
        IsOrderSetMedication &&
        this.objNewItemVM.formViewerDetails.BasicDetails
          .IsDoNotOpenFVForOrderSet != null &&
        ObjectHelper.HasValue(
          this.objNewItemVM.formViewerDetails.BasicDetails
            .IsDoNotOpenFVForOrderSet
        )
      ) {
        if (
          !this.objNewItemVM.formViewerDetails.BasicDetails
            .IsDoNotOpenFVForOrderSet.Value
        ) {
          return false;
        } else {
          if (!this.IntermittentdminTimesValidation()) {
            return false;
          }
          let IsMedicalGas: boolean = false;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
            ) &&
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
              'CC_MEDGAS'
            ) == 0
          ) {
            IsMedicalGas = true;
          }
          if (
            !IsMedicalGas &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsAllowMultiRoute &&
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            if (
              this.objNewItemVM.ActionCode == ActivityTypes.Prescribe &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .IsMultiRouteCheckedforAmend
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked =
                true;
            }
          }
        }
      }
      if (
        this.objNewItemVM.formViewerDetails.BasicDetails
          .IsDoNotOpenFVForOrderSet == null &&
        String.Compare(
          PrescriptionTypes.ForAdministration,
          PatientContext.PrescriptionType,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        String.Compare(
          this.objNewItemVM.ActionCode.ToString(),
          CAActivity.CA_UNHOLD,
          StringComparison.OrdinalIgnoreCase
        ) != 0 &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType == null &&
        (!PatientContext.IsINFUSIONON ||
          this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType !=
            CConstants.SUBTYPE_GAS)
      ) {
        return false;
      }
      if (
        String.Compare(
          PrescriptionTypes.ForAdministration,
          PatientContext.PrescriptionType,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        String.Compare(
          this.objNewItemVM.ActionCode.ToString(),
          CAActivity.CA_UNHOLD,
          StringComparison.OrdinalIgnoreCase
        ) != 0 &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType ==
          null ||
          (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
            null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
              .Value == InfusionTypesCode.INTERMITTENT)) &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType !=
          CConstants.SUBTYPE_GAS &&
        this.objNewItemVM.formViewerDetails.BasicDetails.IsDaysOfWeekMandatory
      ) {
        return false;
      }
      if (
        String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Quantity
        ) &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOM != null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOM.Value
        )
      ) {
        return false;
      } else if (
        String.Compare(
          PrescriptionTypes.ForAdministration,
          PatientContext.PrescriptionType,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        String.Compare(
          this.objNewItemVM.ActionCode.ToString(),
          CAActivity.CA_UNHOLD,
          StringComparison.OrdinalIgnoreCase
        ) != 0 &&
        PatientContext.IsINFUSIONON &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.INTERMITTENT &&
        (this.objNewItemVM.formViewerDetails.BasicDetails
          .IsDoNotOpenFVForOrderSet == null ||
          (this.objNewItemVM.formViewerDetails.BasicDetails
            .IsDoNotOpenFVForOrderSet != null &&
            ObjectHelper.HasValue(
              this.objNewItemVM.formViewerDetails.BasicDetails
                .IsDoNotOpenFVForOrderSet
            ) &&
            !this.objNewItemVM.formViewerDetails.BasicDetails
              .IsDoNotOpenFVForOrderSet.Value))
      ) {
        return false;
      } else if (
        String.Compare(
          PrescriptionTypes.ForAdministration,
          PatientContext.PrescriptionType,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        String.Compare(
          this.objNewItemVM.ActionCode.ToString(),
          CAActivity.CA_UNHOLD,
          StringComparison.OrdinalIgnoreCase
        ) != 0 &&
        PatientContext.IsINFUSIONON &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        ((this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
          null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value !=
            null) ||
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
            CConstants.SUBTYPE_GAS
          )) &&
        this.objNewItemVM.bIsReprescribe
      ) {
        return false;
      } else if (
        String.Compare(
          PrescriptionTypes.ForAdministration,
          PatientContext.PrescriptionType,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        !this.objNewItemVM.ReviewAfterMandatory()
      ) {
        return false;
      } else if (
        (String.Compare(
          this.objNewItemVM.ItemMainType,
          'CC_DRUG',
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType !=
            CConstants.SUBTYPE_GAS) ||
        (String.IsNullOrEmpty(this.objNewItemVM.ItemMainType) &&
          (String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.NONCATALOGUEITEM,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.Precatalog,
              StringComparison.OrdinalIgnoreCase
            ) == 0))
      ) {
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Clerking,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist
          ) {
            return false;
          } else {
            return (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .MedicationClerkingSource != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .MedicationClerkingSource.Count > 0 &&
              this.IsTVMandatoryAndFilled(this.objNewItemVM) &&
              this.IsDOWMandatoryAndFilled(this.objNewItemVM)
            );
          }
        } else {
          let IsSubsequentSeqItem: boolean = false;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .GroupSequenceNo > 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .ItemSequenceNo == 0
          ) {
            IsSubsequentSeqItem = true;
          }
          if (
            !IsSubsequentSeqItem &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.Year <=
              CConstants.DateTimeMinYear
          ) {
            return false;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist
          ) {
            return false;
          }
          if (
            this.DefaultStationaryType == null &&
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsEnableStationeryType &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsEnableStationeryType &&
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Inpatient,
              StringComparison.OrdinalIgnoreCase
            ) != 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType ==
              null
          ) {
            return false;
          }
          if (
            this.DefaultStationaryType == null &&
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsEnableStationeryType &&
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Inpatient,
              StringComparison.OrdinalIgnoreCase
            ) != 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType
                .DisplayText
            ) &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType
                .Value
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType
              .Tag != null
          ) {
            return false;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route == null ||
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
            )
          ) {
            return false;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .isProductMandatory &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .isProductVisible == Visibility.Visible &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SelProdName,
              CConstants.Selectproduct
            )
          ) {
            return false;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsBrandMandatory ==
              Visibility.Visible &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.BrandName,
              CConstants.SelectBrand
            )
          ) {
            return false;
          }
          let _IsInfusionMeds: boolean = false;
          if (
            this.objNewItemVM.ActionCode == ActivityTypes.Prescribe &&
            PatientContext.IsINFUSIONON &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
            )
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value.Contains(
                ','
              ) &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value
              )
            ) {
              _IsInfusionMeds = true;
            } else if (
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
                '1'
              )
            ) {
              _IsInfusionMeds = true;
            }
          }
          if (
            _IsInfusionMeds &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .isFluidMandatory &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .isFluidVisible == Visibility.Visible &&
            (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .FluidSelectvalue == null ||
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .FluidSelectvalue.Value
              ))
          ) {
            return false;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType == null ||
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'Normal',
                Value: DoseTypeCode.NORMAL,
              });
          }
          let sDoseType: string =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value;
          if (
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsDoseMandatory
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IsDoseVisible == Visibility.Visible
              ) {
                if (
                  String.Compare(
                    sDoseType,
                    DoseTypeCode.NORMAL,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0 ||
                  String.Compare(
                    sDoseType,
                    DoseTypeCode.DOSAGERANGE,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                ) {
                  let ldose: number = 0;
                  Number.TryParse(
                    this.objNewItemVM.FormViewerDetails.BasicDetails.Dose,
                    (o) => {
                      ldose = o;
                    }
                  );
                  let lUdose: number = 0;
                  Number.TryParse(
                    this.objNewItemVM.FormViewerDetails.BasicDetails.UpperDose,
                    (o) => {
                      lUdose = o;
                    }
                  );
                  if (
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionType != null &&
                    String.Compare(
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .InfusionType.Value,
                      InfusionTypesCode.INTERMITTENT,
                      StringComparison.CurrentCultureIgnoreCase
                    ) == 0
                  ) {
                    if (
                      String.Compare(
                        sDoseType,
                        DoseTypeCode.NORMAL,
                        StringComparison.OrdinalIgnoreCase
                      ) == 0 &&
                      ldose <= 0
                    )
                      return false;
                    else if (
                      String.Compare(
                        sDoseType,
                        DoseTypeCode.DOSAGERANGE,
                        StringComparison.OrdinalIgnoreCase
                      ) == 0 &&
                      (ldose <= 0 || lUdose <= 0)
                    )
                      return false;
                    if (
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .DoseUOM == null ||
                      String.IsNullOrEmpty(
                        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM
                          .Value
                      )
                    )
                      return false;
                  } else if (
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionType == null
                  ) {
                    if (
                      String.Compare(
                        sDoseType,
                        DoseTypeCode.NORMAL,
                        StringComparison.OrdinalIgnoreCase
                      ) == 0 &&
                      ldose <= 0
                    )
                      return false;
                    else if (
                      String.Compare(
                        sDoseType,
                        DoseTypeCode.DOSAGERANGE,
                        StringComparison.OrdinalIgnoreCase
                      ) == 0 &&
                      (ldose <= 0 || lUdose <= 0)
                    )
                      return false;
                    if (
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .DoseUOM == null ||
                      String.IsNullOrEmpty(
                        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM
                          .Value
                      )
                    )
                      return false;
                  }
                }
              } else if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IsAdminMethodVisible == Visibility.Visible
              ) {
                let IsAvailAdminMethod: boolean =
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .AdminMethod != null &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod
                      .Value
                  )
                    ? true
                    : false;
                if (!IsAvailAdminMethod) {
                  if (
                    String.Compare(
                      sDoseType,
                      DoseTypeCode.NORMAL,
                      StringComparison.OrdinalIgnoreCase
                    ) == 0 ||
                    String.Compare(
                      sDoseType,
                      DoseTypeCode.DOSAGERANGE,
                      StringComparison.OrdinalIgnoreCase
                    ) == 0
                  ) {
                    if (
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .InfusionType != null &&
                      String.Compare(
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .InfusionType.Value,
                        InfusionTypesCode.INTERMITTENT,
                        StringComparison.CurrentCultureIgnoreCase
                      ) == 0
                    ) {
                      if (
                        String.Compare(
                          sDoseType,
                          DoseTypeCode.NORMAL,
                          StringComparison.OrdinalIgnoreCase
                        ) == 0 &&
                        !IsAvailAdminMethod
                      )
                        return false;
                      else if (
                        String.Compare(
                          sDoseType,
                          DoseTypeCode.DOSAGERANGE,
                          StringComparison.OrdinalIgnoreCase
                        ) == 0 &&
                        !IsAvailAdminMethod
                      )
                        return false;
                    } else if (
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .InfusionType == null
                    ) {
                      if (
                        String.Compare(
                          sDoseType,
                          DoseTypeCode.NORMAL,
                          StringComparison.OrdinalIgnoreCase
                        ) == 0 &&
                        !IsAvailAdminMethod
                      )
                        return false;
                      else if (
                        String.Compare(
                          sDoseType,
                          DoseTypeCode.DOSAGERANGE,
                          StringComparison.OrdinalIgnoreCase
                        ) == 0 &&
                        !IsAvailAdminMethod
                      )
                        return false;
                    }
                  }
                }
              }
            } else if (
              String.Compare(
                sDoseType,
                DoseTypeCode.STEPPED,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
              String.Compare(
                sDoseType,
                DoseTypeCode.VARIABLE,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
              String.Compare(
                sDoseType,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                  null &&
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.PCA,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails == null ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails.Count == 0
                )
                  return false;
              } else if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType ==
                null
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails == null ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails.Count == 0
                )
                  return false;
              }
            } else if (
              String.Compare(
                sDoseType,
                DoseTypeCode.CONDITIONAL,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                  null &&
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.PCA,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ConditionalDosingDetails == null ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ConditionalDosingDetails.DoseDetails == null ||
                  (this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ConditionalDosingDetails.DoseDetails.Count == 0 &&
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .IsConditionalExists)
                )
                  return false;
              } else if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType ==
                null
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ConditionalDosingDetails == null ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ConditionalDosingDetails.DoseDetails == null ||
                  (this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ConditionalDosingDetails.DoseDetails.Count == 0 &&
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .IsConditionalExists)
                )
                  return false;
              }
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                  null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value != null &&
                (String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.CONTINUOUS,
                  StringComparison.OrdinalIgnoreCase
                ) == 0 ||
                  String.Compare(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionType.Value,
                    InfusionTypesCode.SINGLEDOSEVOLUME,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0 ||
                  String.Compare(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionType.Value,
                    InfusionTypesCode.FLUID,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .IsMandatoryMonitoringPeriod &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfMonitoringperiodVisi == Visibility.Visible &&
                (this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails.MonitoringPeriod == null ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.MonitoringPeriodUOM == null)
              ) {
                return false;
              }
            }
            if (
              (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value != null &&
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.CONTINUOUS,
                  StringComparison.OrdinalIgnoreCase
                ) != 0 &&
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.FLUID,
                  StringComparison.OrdinalIgnoreCase
                ) != 0 &&
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME,
                  StringComparison.OrdinalIgnoreCase
                ) != 0) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType ==
                null
            ) {
              if (
                String.Compare(
                  sDoseType,
                  DoseTypeCode.NORMAL,
                  StringComparison.OrdinalIgnoreCase
                ) == 0 ||
                String.Compare(
                  sDoseType,
                  DoseTypeCode.DOSAGERANGE,
                  StringComparison.OrdinalIgnoreCase
                ) == 0 ||
                String.Compare(
                  sDoseType,
                  DoseTypeCode.CONDITIONAL,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .IsMandatoryFrequency &&
                  (this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency ==
                    null ||
                    String.IsNullOrEmpty(
                      this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency
                        .DisplayText
                    ))
                )
                  return false;
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .IsPRNInstructionMandatory &&
                  (this.objNewItemVM.FormViewerDetails.BasicDetails
                    .PRNInstruction == null ||
                    String.IsNullOrEmpty(
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .PRNInstruction.DisplayText
                    ))
                )
                  return false;
              }
            }
            if (
              PatientContext.IsINFUSIONON &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value != null
            ) {
              if (
                String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME,
                  StringComparison.OrdinalIgnoreCase
                ) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IsDoseMandatory &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableDose &&
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Dose
                )
              ) {
                return false;
              }
              if (
                (String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.FLUID,
                  StringComparison.OrdinalIgnoreCase
                ) ||
                  String.Equals(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionType.Value,
                    InfusionTypesCode.SINGLEDOSEVOLUME,
                    StringComparison.OrdinalIgnoreCase
                  )) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .IsVolumeMandatory &&
                (String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.FluidVolume
                ) ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.VolumeUOM == null)
              ) {
                return false;
              }
              if (
                String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.CONTINUOUS,
                  StringComparison.OrdinalIgnoreCase
                ) &&
                this.objNewItemVM.formViewerDetails.BasicDetails
                  .InfusionDetails != null &&
                this.objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails
                  .IsConcentrationVisible == Visibility.Visible &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .IsConcentrationMandatory &&
                (String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.LowConcentration
                ) ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.LowConcentrationUOM == null ||
                  String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionDetails.UpperConcentration
                  ) ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.UpperConcentrationUOM == null)
              ) {
                return false;
              }
            }
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableDosage ==
                true &&
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.OrdinalIgnoreCase
              ) != 0
            )
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsDosageFormMandatory =
                true;
            if (
              PatientContext.IsINFUSIONON &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag !=
                null &&
              String.Compare(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
                '1'
              ) == 0 &&
              (String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
              ) ||
                this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType !=
                  CConstants.SUBTYPE) &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType !=
                CConstants.SUBTYPE_GAS
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsDosageFormMandatory =
                false;
            }
            let _IsMultipleRouteAvailable: boolean = false;
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
              ) &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value.Contains(
                ','
              )
            ) {
              _IsMultipleRouteAvailable = true;
            }
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType ==
                null ||
              (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value != null &&
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.CONTINUOUS,
                  StringComparison.OrdinalIgnoreCase
                ) != 0 &&
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME,
                  StringComparison.OrdinalIgnoreCase
                ) != 0 &&
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.FLUID,
                  StringComparison.OrdinalIgnoreCase
                ) != 0)
            ) {
              if (
                !_IsMultipleRouteAvailable &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IsDosageFormMandatory &&
                (this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm ==
                  null ||
                  String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm
                      .DisplayText
                  ))
              )
                return false;
            }
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .IsStrengthMandatory &&
              (this.objNewItemVM.FormViewerDetails.BasicDetails.Strength ==
                null ||
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Strength
                    .DisplayText
                ))
            ) {
              return false;
            }
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .IsSiteMandatory &&
              (this.objNewItemVM.FormViewerDetails.BasicDetails.Site == null ||
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Site
                    .DisplayText
                ))
            )
              return false;
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .IsQuantityEnabled &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .IsQuantityMandatory &&
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Quantity
              )
            )
              return false;
            if (this.objNewItemVM.IsEmptyDose) return false;
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .IsDoseMandatory &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .IsAdminMethodVisible == Visibility.Visible &&
              (this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod ==
                null ||
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod
                    .DisplayText
                ))
            ) {
              return false;
            }
          }
          if (
            !PatientContext.IsINFUSIONON ||
            (PatientContext.IsINFUSIONON &&
              this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value == InfusionTypesCode.INTERMITTENT) ||
            (this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType ==
                null)
          )
            if (
              String.Compare(
                PrescriptionTypes.ForAdministration,
                PatientContext.PrescriptionType,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              if (
                !this.objNewItemVM.FormViewerDetails.BasicDetails.AsRequired
              ) {
                if (
                  (this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                    .AdministrationScheduleTimes == null ||
                    this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                      .AdministrationScheduleTimes.Count == 0) &&
                  (this.objNewItemVM.formViewerDetails.BasicDetails
                    .IsDoNotOpenFVForOrderSet == null ||
                    (this.objNewItemVM.formViewerDetails.BasicDetails
                      .IsDoNotOpenFVForOrderSet != null &&
                      ObjectHelper.HasValue(
                        this.objNewItemVM.formViewerDetails.BasicDetails
                          .IsDoNotOpenFVForOrderSet
                      ) &&
                      !this.objNewItemVM.formViewerDetails.BasicDetails
                        .IsDoNotOpenFVForOrderSet.Value))
                ) {
                  return false;
                } else if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails != null &&
                  String.Compare(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedFrequencyDetails.Type,
                    'CC_PERIOD'
                  ) == 0 &&
                  String.Compare(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedFrequencyDetails.UOM,
                    'CC_IPONCENLY'
                  ) != 0 &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                    .IsFixedTime
                ) {
                  let nCount: number =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                      .AdministrationScheduleTimes.Count;
                  let nZeroCnt: number = 0;
                  for (let i: number = 0; i < nCount; i++) {
                    if (
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM
                        .TimeOfDay.TotalMinutes <= 0
                    )
                      nZeroCnt++;
                    if (nZeroCnt > 1) break;
                  }
                  if (nZeroCnt > 1) return false;
                }
              }
            }
          let isSteppedDose: boolean =
            String.Compare(
              sDoseType,
              DoseTypeCode.STEPPED,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              sDoseType,
              DoseTypeCode.VARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              sDoseType,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0;
          if (
            this.ActivityCode == ActivityTypes.Prescribe &&
            !String.IsNullOrEmpty(this.objNewItemVM.OperationMode) &&
            String.Compare(
              this.objNewItemVM.OperationMode,
              'N',
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            (this.ValidateSteppedDoseForBlankDose(isSteppedDose) == false ||
              this.ValidateSteppedDoseForBlankDuration(isSteppedDose) == false)
          ) {
            return false;
          }
          if (
            this.ActivityCode == ActivityTypes.Prescribe &&
            !String.IsNullOrEmpty(this.objNewItemVM.OperationMode) &&
            String.Compare(
              this.objNewItemVM.OperationMode,
              'N',
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            this.ValidateSteppedDoseForFreq(isSteppedDose)
          ) {
            return false;
          }
          if (
            PatientContext.IsINFUSIONON &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag !=
              null &&
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
              '1'
            ) == 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType ==
              null
          ) {
            return false;
          }
          if (
            ((PatientContext.IsINFUSIONON &&
              this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value == null) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType ==
                null ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value ==
                null ||
              this.objNewItemVM.IsTechValidateMandatory) &&
            (this.objNewItemVM.formViewerDetails.BasicDetails
              .IsDoNotOpenFVForOrderSet == null ||
              (this.objNewItemVM.formViewerDetails.BasicDetails
                .IsDoNotOpenFVForOrderSet != null &&
                ObjectHelper.HasValue(
                  this.objNewItemVM.formViewerDetails.BasicDetails
                    .IsDoNotOpenFVForOrderSet
                ) &&
                !this.objNewItemVM.formViewerDetails.BasicDetails
                  .IsDoNotOpenFVForOrderSet.Value))
          ) {
            return false;
          }
          if (
            String.Compare(
              sDoseType,
              DoseTypeCode.CONDITIONAL,
              StringComparison.OrdinalIgnoreCase
            ) != 0 &&
            String.Compare(
              sDoseType,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) != 0 &&
            String.Compare(
              sDoseType,
              DoseTypeCode.STEPPED,
              StringComparison.OrdinalIgnoreCase
            ) != 0 &&
            String.Compare(
              sDoseType,
              DoseTypeCode.VARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) != 0
          ) {
            if (
              PatientContext.IsINFUSIONON &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              (String.Compare(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.CONTINUOUS,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME,
                  StringComparison.OrdinalIgnoreCase
                ) == 0 ||
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.FLUID,
                  StringComparison.OrdinalIgnoreCase
                ) == 0) &&
              (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .Rate == null ||
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.Rate
                ) ||
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfRateNumeratorUom == null ||
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfRateDinominatorUom == null)
            ) {
              return false;
            } else if (
              PatientContext.IsINFUSIONON &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              !this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .ChckSingleActionMedChart &&
              String.Compare(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.INTERMITTENT,
                StringComparison.OrdinalIgnoreCase
              ) == 0 &&
              (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .InfusionPeriod == null ||
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionPeriodUom == null) &&
              (this.objNewItemVM.formViewerDetails.BasicDetails
                .IsDoNotOpenFVForOrderSet == null ||
                (this.objNewItemVM.formViewerDetails.BasicDetails
                  .IsDoNotOpenFVForOrderSet != null &&
                  ObjectHelper.HasValue(
                    this.objNewItemVM.formViewerDetails.BasicDetails
                      .IsDoNotOpenFVForOrderSet
                  ) &&
                  !this.objNewItemVM.formViewerDetails.BasicDetails
                    .IsDoNotOpenFVForOrderSet.Value))
            ) {
              return false;
            }
          }
          if (
            PatientContext.IsINFUSIONON &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
              .Value != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.PCA,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            (String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .Bolus
            ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .BolusUOM == null ||
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .BolusUOM.DisplayText
              ) ||
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .LockOutPeriod
              ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .LockoutDuration == null ||
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .LockoutDuration.DisplayText
              ) ||
              ((this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .DeliveryDevice == null ||
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.DeliveryDevice.DisplayText
                )) &&
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.DeliveryDeviceFreetext
                )))
          ) {
            return false;
          }
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .IsConcentrationMandatory == true &&
            (String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .LowConcentration
            ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .LowConcentrationUOM == null ||
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .UpperConcentration
              ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .UpperConcentrationUOM == null)
          ) {
            return false;
          }
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsDaysOfWeekMandatory &&
            !String.Equals(
              PrescriptionTypes.ForAdministration,
              PatientContext.PrescriptionType,
              StringComparison.OrdinalIgnoreCase
            ) &&
            !String.Equals(
              PrescriptionTypes.Clerking,
              PatientContext.PrescriptionType,
              StringComparison.OrdinalIgnoreCase
            ) &&
            !String.Equals(
              sDoseType,
              DoseTypeCode.STEPPED,
              StringComparison.OrdinalIgnoreCase
            ) &&
            !String.Equals(
              sDoseType,
              DoseTypeCode.VARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) &&
            !String.Equals(
              sDoseType,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.OrdinalIgnoreCase
            )
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .DaysOfWeekVisibility == Visibility.Visible &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.DrugFreqUOMCode
              ) &&
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .DrugFreqUOMCode,
                'CC_MEDDRSN2',
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              let nDayCnt: number = 0;
              if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsMon)
                nDayCnt++;
              if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsTue)
                nDayCnt++;
              if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsWed)
                nDayCnt++;
              if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsThu)
                nDayCnt++;
              if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsFri)
                nDayCnt++;
              if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsSat)
                nDayCnt++;
              if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsSun)
                nDayCnt++;
              if (
                nDayCnt <
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .FrequencyLowEvent
              ) {
                return false;
              }
            }
          }
          return (
            this.IsTVMandatoryAndFilled(this.objNewItemVM) &&
            this.IsDOWMandatoryAndFilled(this.objNewItemVM)
          );
        }
      } else if (
        (String.Compare(
          this.objNewItemVM.ItemMainType,
          'CC_DRUG',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
          String.Compare(
            this.objNewItemVM.ItemMainType,
            CConstants.Formulary_Appliance,
            StringComparison.OrdinalIgnoreCase
          ) == 0) &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType ==
          CConstants.SUBTYPE_GAS
      ) {
        if (
          PatientContext.IsINFUSIONON &&
          (this.objNewItemVM.FormViewerDetails.BasicDetails.Route == null ||
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
            ))
        ) {
          return false;
        }
        let IsMedOxygen: boolean = false;
        if (
          PatientContext.IsINFUSIONON &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
          ) &&
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
            CConstants.SUBTYPE_GAS
          )
        ) {
          IsMedOxygen = true;
        }
        if (
          !IsMedOxygen &&
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsDaysOfWeekMandatory &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.Value
          ) &&
          !String.Equals(
            PrescriptionTypes.ForAdministration,
            PatientContext.PrescriptionType,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .DaysOfWeekVisibility == Visibility.Visible
          ) {
            let nDayCnt: number = 0;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsMon)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsTue)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsWed)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsThu)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsFri)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsSat)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsSun)
              nDayCnt++;
            if (
              nDayCnt <
              this.objNewItemVM.FormViewerDetails.BasicDetails.FrequencyLowEvent
            ) {
              return false;
            }
          }
        }
        if (
          !PatientContext.IsINFUSIONON &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableFrequency &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsMandatoryFrequency &&
          (this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency == null ||
            (this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency !=
              null &&
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency
                  .DisplayText
              )))
        ) {
          return false;
        }
        if (
          PatientContext.IsINFUSIONON &&
          (String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .TargetLowerSatRange
          ) ||
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .TargetUpperSatRange
            ))
        ) {
          return false;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsPRNInstructionMandatory &&
          (this.objNewItemVM.FormViewerDetails.BasicDetails.PRNInstruction ==
            null ||
            (this.objNewItemVM.FormViewerDetails.BasicDetails.PRNInstruction !=
              null &&
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.PRNInstruction
                  .DisplayText
              )))
        ) {
          return false;
        }
        return (
          this.IsTVMandatoryAndFilled(this.objNewItemVM) &&
          this.IsDOWMandatoryAndFilled(this.objNewItemVM)
        );
      } else if (
        String.Compare(
          this.objNewItemVM.ItemMainType,
          CConstants.Formulary_Appliance,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        this.objNewItemVM.IsControlledDrug == '0'
      ) {
        let IsMedOxygen: boolean = false;
        if (
          PatientContext.IsINFUSIONON &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
          ) &&
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
            CConstants.SUBTYPE_GAS
          )
        ) {
          IsMedOxygen = true;
        }
        if (
          !IsMedOxygen &&
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsDaysOfWeekMandatory &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.Value
          ) &&
          !String.Equals(
            PrescriptionTypes.ForAdministration,
            PatientContext.PrescriptionType,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .DaysOfWeekVisibility == Visibility.Visible
          ) {
            let nDayCnt: number = 0;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsMon)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsTue)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsWed)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsThu)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsFri)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsSat)
              nDayCnt++;
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsSun)
              nDayCnt++;
            if (
              nDayCnt <
              this.objNewItemVM.FormViewerDetails.BasicDetails.FrequencyLowEvent
            ) {
              return false;
            }
          }
        }
        if (
          this.DefaultStationaryType == null &&
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsEnableStationeryType &&
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Inpatient,
            StringComparison.OrdinalIgnoreCase
          ) != 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType ==
            null
        ) {
          return false;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsQuantityEnabled &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsQuantityMandatory &&
          String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Quantity
          )
        ) {
          return false;
        } else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableFrequency &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsMandatoryFrequency &&
          (this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency == null ||
            (this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency !=
              null &&
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency
                  .DisplayText
              )))
        ) {
          return false;
        }
        return (
          this.IsTVMandatoryAndFilled(this.objNewItemVM) &&
          this.IsDOWMandatoryAndFilled(this.objNewItemVM)
        );
      } else {
        return (
          this.IsTVMandatoryAndFilled(this.objNewItemVM) &&
          this.IsDOWMandatoryAndFilled(this.objNewItemVM)
        );
      }
    }
  }
  private IsTVMandatoryAndFilled(objNewItemVM: PrescriptionItemVM): boolean {
    let isReqdButNotFilled: boolean =
      objNewItemVM != null &&
      objNewItemVM.FormViewerDetails != null &&
      objNewItemVM.IsTechValidateMandatory &&
      (objNewItemVM.FormViewerDetails.TechValidateDetails == null ||
        (objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
          (objNewItemVM.FormViewerDetails.TechValidateDetails
            .TechValidatedItems == null ||
            objNewItemVM.FormViewerDetails.TechValidateDetails
              .TechValidatedItems.Count == 0)));
    return !isReqdButNotFilled;
  }
  private IsDOWMandatoryAndFilled(objNewItemVM: PrescriptionItemVM): boolean {
    if (
      objNewItemVM != null &&
      objNewItemVM.FormViewerDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null &&
      objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
        .DaysOfWeekVisibility == Visibility.Visible &&
      objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
        .IsDaysOfWeekMandatory
    ) {
      return (
        objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.IsSun ||
        objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.IsMon ||
        objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.IsTue ||
        objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.IsWed ||
        objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.IsThu ||
        objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.IsFri ||
        objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.IsSat
      );
    }
    return true;
  }
  
  
    objNF_Closed(args: AppDialogEventargs): void {
        this.oAppDialogWindow = args.AppChildWindow;
        this.omedNonFormulary = args.Content && args.Content.Component ? args.Content.Component as medNonFormulary : this.omedNonFormulary;
        if (args.Result == AppDialogResult.Ok) {
          // ObjectHelper.stopFinishAndCancelEvent(false);
            if (this.nonformokclick == false) {
                if (this.omedNonFormulary.OKButtonClick()) {
                    this.nonformokclick = true;
                    let sOID: string = String.Empty;
                    let sType: string = String.Empty;
                    let sName: string = String.Empty;
                    let sFormularyNote: string = String.Empty;
                    let IsAuthorise: boolean = false;
                    let NonFormularyReason: CListItem = ObjectHelper.CreateType<CListItem>(this.omedNonFormulary.cboReason.SelectedItem, CListItem);
                    let sOtherNonFormularyReason: string = String.Empty;
                    if (NonFormularyReason != null && String.Compare(NonFormularyReason.Value, "CC_OTHERS") == 0) {
                        sOtherNonFormularyReason = this.omedNonFormulary.txtOtherReason.Text;
                    }
                    if (this.oDrugInputData != null) {
                        sOID = this.oDrugInputData.IdentifyingOID.ToString();
                        sType = this.oDrugInputData.IdentifyingType;
                        sName = this.oDrugInputData.IdentifyingName;
                        sFormularyNote = this.oDrugInputData.FormularyNote;
                        IsAuthorise = this.oDrugInputData.IsAuthorise;
                    }
                    if (((String.Compare(sType, "CATALOGUEITEM", StringComparison.OrdinalIgnoreCase) == 0) || (String.Compare(sType, "VIRTUALPRODUCT", StringComparison.OrdinalIgnoreCase) == 0)) && (this.oDrugInputData != null && this.oDrugInputData.IsAccessContraint == "1" || this.oDrugInputData.IsIndicationRequired == "1")) {
                        this.oIndicationdtl = new Indicationdtl();
                        this.oIndicationdtl.IsAccessConstriant = this.oDrugInputData.IsAccessContraint;
                        this.oIndicationdtl.IsIndicationRequired = this.oDrugInputData.IsIndicationRequired;
                        this.oIndicationdtl.IsPrescribeByBrand = this.oDrugInputData.IsPrescribeByBrand;
                        this.oIndicationdtl.ItemType = this.oDrugInputData.ItemType;
                        this.oIndicationdtl.IsFormulary = this.oDrugInputData.IsFormulary;
                        this.oIndicationdtl.LorenzoID = this.oDrugInputData.LorenzoID;
                        this.oIndicationdtl.ITMSUBTYP = this.oDrugInputData.ITMSUBTYP;
                        this.oIndicationdtl.SourceDataProviderType = this.oDrugInputData.SourceDataProviderType;
                        this.LaunchAccessConstraint(sOID, sType, sName, sFormularyNote, NonFormularyReason, sOtherNonFormularyReason, null, this.oIndicationdtl, IsAuthorise);
                    }
                    else {
                        if (this.ActivityCode == ActivityTypes.Prescribe) {
                            this.GetResolveDrugDetails();
                        }
                        else {
                            if (this.objProcessingItemVM != null && this.objProcessingItemVM.IsFormViewDataLoaded) {
                                this.objNewItemVM = this.objProcessingItemVM;
                                this.GetDeactiveFlag();
                            }
                            else {
                                this.GetPresItemDetails();
                            }
                        }
                        this.objNewItemVM.NonFormularyReason = NonFormularyReason;
                        this.objNewItemVM.OtherNonFormularyReason = sOtherNonFormularyReason;
                    }
                    //this.oAppDialogWindow.dupDialogRef.close();
                    this.oAppDialogWindow.DialogRef.close();                            
                    if(this.oSecChild!= null && this.oSecChild.dupDialogRef != null)
                      this.oSecChild.dupDialogRef.close(); 
                    if(this.oSecChild!= null && this.oSecChild.objChild != null && this.oSecChild.objChild.dupDialogRef != null)            
                      this.oSecChild.objChild.dupDialogRef.close();
                }
            }
        }
        else if (args.Result == AppDialogResult.Cancel) {
            this.oPrescItemInputData = null;
            this.omedNonFormulary.CancelButtonClick();
        }
    }
    
  private ConflictCloning(): void {}
  private GetPresItemDetails(): void {
    this.oPrescItemInputData =
      new IPPMAManagePrescSer.PrescriptionItemInputData();
    if (this.objProcessingItemVM != null) {
      this.oPrescItemInputData.OID =
        this.objProcessingItemVM.PrescriptionItemOID;
      if (
        this.objProcessingItemVM.PrescriptionItemStatus == CConstants.COMPLETED
      ) {
        this.oPrescItemInputData.PrescriptionItemStatus = String.Empty;
      } else {
        this.oPrescItemInputData.PrescriptionItemStatus =
          this.objProcessingItemVM.PrescriptionItemStatus;
      }
      this.oPrescItemInputData.ActiveMCVersion = AppSessionInfo.AMCV;
      if (
        !String.IsNullOrEmpty(
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .OriginalMCVersion
        ) &&
        !String.Equals(
          this.oPrescItemInputData.MCVesrionNo,
          AppSessionInfo.AMCV,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.oPrescItemInputData.MCVesrionNo =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.OriginalMCVersion;
      } else {
        this.oPrescItemInputData.MCVesrionNo =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.MCVersion;
      }
      this.oPrescItemInputData.IsPresItemStatusComplete = '0';
      if (
        this.ActivityCode == ActivityTypes.Reorder &&
        (this.objProcessingItemVM.IsReoderIconEnable ||
          this.objProcessingItemVM.bIsReprescribe)
      ) {
        this.oPrescItemInputData.Activity = 'REORDER';
        if (
          !this.objProcessingItemVM.bIsReprescribe &&
          this.objProcessingItemVM.FormViewerDetails != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseType !=
            null &&
          !String.IsNullOrEmpty(
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseType
              .DisplayText
          ) &&
          String.Equals(
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseType
              .DisplayText,
            'Stepped/Variable',
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.IsNullOrEmpty(
            this.objProcessingItemVM.PrescriptionItemStatusCode
          ) &&
          String.Equals(
            this.objProcessingItemVM.PrescriptionItemStatusCode,
            CConstants.COMPLETED,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          (String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Leave,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Outpatient,
              StringComparison.CurrentCultureIgnoreCase
            ))
        ) {
          this.oPrescItemInputData.IsPresItemStatusComplete = '1';
        }
      }
      if (
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        this.oPrescItemInputData.ClerkformViewerDefltCode =
          ClerkFormViewDeftBehaviour.LaunchFormMandatory.ToString();
      }
      if (
        MedicationCommonProfileData.PrescribeConfig != null &&
        !String.IsNullOrEmpty(
          MedicationCommonProfileData.PrescribeConfig.ClerkFormViewDefautCode
        ) &&
        String.Equals(
          MedicationCommonProfileData.PrescribeConfig.ClerkFormViewDefautCode,
          ClerkFormViewDefault.LaunchFormMandatory
        ) &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
        PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
      ) {
        this.oPrescItemInputData.ClerkformViewerDefltCode =
          ClerkFormViewDeftBehaviour.LaunchFormMandatory.ToString();
      }
    }
    if (
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.PrescriptionType == PrescriptionTypes.Clerking &&
      this.ActivityCode == ActivityTypes.Reorder
    ) {
      this.GetDrugBasicSnomedcodeInfo(
        this.ActivityCode,
        this.objProcessingItemVM.PrescriptionItemOID
      );
    }
    let sMenuCode: string = this.AppContext.MenuCode;
    this.objNewItemVM = new PrescriptionItemVM(this);
    this.objNewItemVM.GpConnectMedicationItem =
      this.objProcessingItemVM.GpConnectMedicationItem;
    this.objNewItemVM.DbOsValues = this.objProcessingItemVM.DbOsValues;
    this.objNewItemVM.IsNoMatches = this.IsNoMatche;
    this.IsNoMatche = false;
    if (
      this.objProcessingItemVM != null &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.ActivityCode == ActivityTypes.Reorder
    ) {
      this.objNewItemVM.bIsReprescribe =
        this.objProcessingItemVM.bIsReprescribe;
    }
    this.oPrescItemInputData.CACode = sMenuCode;
    this.oPrescItemInputData.EncounterOID = PatientContext.EncounterOid;
    this.objNewItemVM.AlreadyPrescribedItemOID = this.alreadyPrescribedItemOID;
    if (this.objProcessingItemVM != null) {
      this.objNewItemVM.ParentPrescriptionitemstatus =
        this.objProcessingItemVM.ParentPrescriptionitemstatus;
      this.objNewItemVM.IsOrderSetLastItem =
        this.objProcessingItemVM.IsOrderSetLastItem;
    }
    if (this.ActivityCode == ActivityTypes.Amend) {
      if (
        this.objProcessingItemVM != null &&
        this.objProcessingItemVM.IsDueNowSlot
      ) {
        this.objNewItemVM.IsDueNowSlot = true;
      }
      if (
        this.objProcessingItemVM != null &&
        this.objProcessingItemVM.IsInfInprogress
      ) {
        this.objNewItemVM.IsInfInprogress = true;
      }
      if (
        this.objProcessingItemVM != null &&
        this.objProcessingItemVM.IsUnHoldAction
      ) {
        this.objNewItemVM.IsUnHoldAction = true;
        this.objNewItemVM.IsUnholddrug = true;
      }
    }
    if (
      this.ActivityCode == ActivityTypes.Reorder &&
      MedicationCommonProfileData.PrescribeConfig == null
    ) {
      this.PrescribingConfig = new ProfileFactoryType();
      this.PrescribingConfig.OnProfileLoaded = (s, e) => {
        this.PrescribingConfig_OnProfileLoaded(s, e);
      };
      this.PrescribingConfig.GetProfile<PrescribingConfigData>(
        'VW_MEDICONFIG',
        'PRESCONFIG'
      );
    }
    if (
      this.ActivityCode == ActivityTypes.Reorder &&
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.IsDosCalciReOrderShowFormviewerRequired
    ) {
      this.objNewItemVM.IsDosCalciReOrderShowFormviewerRequired =
        this.objProcessingItemVM.IsDosCalciReOrderShowFormviewerRequired;
    }
    this.objNewItemVM.GetPrescriptionDetails(
      this.oPrescItemInputData,
      (s, e) => {
        this.Service_GetPrescriptionDetailsCompleted(s, e);
      }
    );
  }
  Service_GetPrescriptionDetailsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetIPPPrescriptionDetailsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000030;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:IPPMABaseVM.GetPrescriptionDetailsCompleted()';
    if (e.Error == null) {
      try {
        let oResResolve: IPPMAManagePrescSer.CResMsgGetIPPPrescriptionDetails =
          e.Result;
        if (this.ActivityCode != ActivityTypes.Reorder) {
          Common.UpdateOldValues(this.objProcessingItemVM, oResResolve);
        }
        Common.UpdateOldOsValues(this.objProcessingItemVM);
        if (
          oResResolve instanceof
            IPPMAManagePrescSer.CResMsgGetIPPPrescriptionDetails &&
          oResResolve.oPrescriptionItemDetails != null &&
          oResResolve.oPrescriptionItemDetails.Count > 0
        ) {
          if (
            this.ActivityCode == ActivityTypes.Amend &&
            oResResolve.oPrescriptionItemDetails[0].GPConnectMedication !=
              null &&
            !String.IsNullOrEmpty(
              oResResolve.oPrescriptionItemDetails[0].GPConnectMedication
                .GPConnectID
            )
          ) {
            this.objProcessingItemVM.GpConnectMedicationItem =
              ObjectHelper.CreateObject(new GPConnectItemVM(), {
                GPConnectID:
                  oResResolve.oPrescriptionItemDetails[0].GPConnectMedication
                    .GPConnectID,
                MedicationCode:
                  oResResolve.oPrescriptionItemDetails[0].GPConnectMedication
                    .MedicationCode,
                MedicationItemDetail:
                  oResResolve.oPrescriptionItemDetails[0].GPConnectMedication
                    .MedicationItemDetail,
                Dosage:
                  oResResolve.oPrescriptionItemDetails[0].GPConnectMedication
                    .Dosage == null
                    ? null
                    : oResResolve.oPrescriptionItemDetails[0].GPConnectMedication.Dosage.Select(
                        (x) =>
                          ObjectHelper.CreateObject(
                            new GPConnectAdminDosage(),
                            {
                              Text: x != null ? x.Text : String.Empty,
                              Instruction:
                                x != null ? x.Instruction : String.Empty,
                            }
                          )
                      ).ToArray(),
              });
            this.objNewItemVM.IsGPConnectItem = true;
            this.objNewItemVM.GpConnectMedicationItem =
              this.objProcessingItemVM.GpConnectMedicationItem;
          }
          if (
            this.ActivityCode == ActivityTypes.Reorder &&
            !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
            !String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.CurrentCultureIgnoreCase
            ) &&
            oResResolve.oPrescriptionItemDetails[0].BasicProperties != null &&
            oResResolve.oPrescriptionItemDetails[0].BasicProperties.Duration !=
              null &&
            String.Equals(
              oResResolve.oPrescriptionItemDetails[0].BasicProperties.Duration
                .UOMCode,
              'CC_DOSES',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            oResResolve.oPrescriptionItemDetails[0].EndDTTM = DateTime.MinValue;
          }
          if (this.objProcessingItemVM != null) {
            if (oResResolve.oPrescriptionItemDetails[0].IdentifyingOID == 0)
              oResResolve.oPrescriptionItemDetails[0].IdentifyingOID =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IdentifyingOID;
            if (
              String.IsNullOrEmpty(
                oResResolve.oPrescriptionItemDetails[0].IdentifyingType
              )
            )
              oResResolve.oPrescriptionItemDetails[0].IdentifyingType =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IdentifyingType;
            if (
              String.IsNullOrEmpty(
                oResResolve.oPrescriptionItemDetails[0].IdentifyingName
              )
            )
              oResResolve.oPrescriptionItemDetails[0].IdentifyingName =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IdentifyingName;
            if (
              String.IsNullOrEmpty(
                oResResolve.oPrescriptionItemDetails[0].PrescriptionNumber
              )
            )
              oResResolve.oPrescriptionItemDetails[0].PrescriptionNumber =
                this.objProcessingItemVM.PrescriptionNumber;
            if (
              String.IsNullOrEmpty(
                oResResolve.oPrescriptionItemDetails[0].ItemType
              )
            )
              oResResolve.oPrescriptionItemDetails[0].ItemType =
                this.objProcessingItemVM.ItemMainType;
            oResResolve.oPrescriptionItemDetails[0].Recordadmindatetime =
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.RecordedadminDTTM;
            oResResolve.oPrescriptionItemDetails[0].ReorderedFromclerkItemOID =
              this.objProcessingItemVM.AlreadyPrescribedItemOID;
            if (this.ActivityCode == ActivityTypes.Reorder) {
              if (
                ((!String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
                  String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.Clerking,
                    StringComparison.CurrentCultureIgnoreCase
                  )) ||
                  String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.Discharge,
                    StringComparison.CurrentCultureIgnoreCase
                  ) ||
                  String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.Leave,
                    StringComparison.CurrentCultureIgnoreCase
                  ) ||
                  String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.Outpatient,
                    StringComparison.CurrentCultureIgnoreCase
                  ) ||
                  (String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.ForAdministration,
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                    PatientContext.ClerkFormViewDefaultBehavior ==
                      ClerkFormViewDeftBehaviour.LaunchFormMandatory)) &&
                oResResolve.oPrescriptionItemDetails[0].GPConnectMedication !=
                  null &&
                !String.IsNullOrEmpty(
                  oResResolve.oPrescriptionItemDetails[0].GPConnectMedication
                    .GPConnectID
                )
              ) {
                this.objProcessingItemVM.GpConnectMedicationItem =
                  ObjectHelper.CreateObject(new GPConnectItemVM(), {
                    GPConnectID:
                      oResResolve.oPrescriptionItemDetails[0]
                        .GPConnectMedication.GPConnectID,
                    MedicationItemDetail:
                      oResResolve.oPrescriptionItemDetails[0]
                        .GPConnectMedication.MedicationItemDetail,
                    MedicationCode:
                      oResResolve.oPrescriptionItemDetails[0]
                        .GPConnectMedication.MedicationCode,
                    Dosage:
                      oResResolve.oPrescriptionItemDetails[0]
                        .GPConnectMedication.Dosage == null
                        ? null
                        : oResResolve.oPrescriptionItemDetails[0].GPConnectMedication.Dosage.Select(
                            (x) =>
                              ObjectHelper.CreateObject(
                                new GPConnectAdminDosage(),
                                {
                                  Text: x != null ? x.Text : String.Empty,
                                  Instruction:
                                    x != null ? x.Instruction : String.Empty,
                                }
                              )
                          ).ToArray(),
                  });
                this.objNewItemVM.IsGPConnectItem = true;
                this.objNewItemVM.GpConnectMedicationItem =
                  this.objProcessingItemVM.GpConnectMedicationItem;
              }
              oResResolve.oPrescriptionItemDetails[0].IssIDSNewMeds = '0';
              if (
                oResResolve.oPrescriptionItemDetails[0].PrescriptionBasicData !=
                null
              )
                oResResolve.oPrescriptionItemDetails[0].PrescriptionBasicData.EncounterOID =
                  this.objProcessingItemVM.EncounterOID;
            } else {
              if (
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .IsIDSNewmeds == true
              )
                oResResolve.oPrescriptionItemDetails[0].IssIDSNewMeds = '1';
              else oResResolve.oPrescriptionItemDetails[0].IssIDSNewMeds = '0';
              if (
                oResResolve.oPrescriptionItemDetails[0].PrescriptionBasicData !=
                  null &&
                this.objProcessingItemVM.SourceEncounter > 0
              )
                oResResolve.oPrescriptionItemDetails[0].PrescriptionBasicData.EncounterOID =
                  this.objProcessingItemVM.SourceEncounter;
              else if (
                oResResolve.oPrescriptionItemDetails[0].PrescriptionBasicData !=
                null
              )
                oResResolve.oPrescriptionItemDetails[0].PrescriptionBasicData.EncounterOID =
                  this.objProcessingItemVM.EncounterOID;
            }
            if (
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .IsExistsOnAdmission != '3'
            ) {
              oResResolve.oPrescriptionItemDetails[0].BasicProperties.ExistsOnAdmission =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission;
            }
            if (this.ActivityCode != ActivityTypes.Reorder) {
              this.objNewItemVM.SelectedSupplyreq =
                this.objProcessingItemVM.SelectedSupplyreq;
            }
            this.objNewItemVM.IsProdOptChange =
              this.objProcessingItemVM.IsProdOptChange;
            if (this.ActivityCode == ActivityTypes.Amend) {
              this.objNewItemVM.PrescriptionItemStatus =
                this.objProcessingItemVM.PrescriptionItemStatus;
            }
            if (this.ActivityCode == ActivityTypes.Amend) {
              if (
                this.objProcessingItemVM != null &&
                this.objProcessingItemVM.FormViewerDetails != null &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                  null &&
                this.objNewItemVM != null &&
                this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV;
              }
            }
            if (
              String.IsNullOrEmpty(
                oResResolve.oPrescriptionItemDetails[0].ITMSUBTYP
              )
            )
              oResResolve.oPrescriptionItemDetails[0].ITMSUBTYP =
                this.objProcessingItemVM.ItemSubType;
            if (
              String.IsNullOrEmpty(
                oResResolve.oPrescriptionItemDetails[0].MCIItemDisplay
              )
            )
              oResResolve.oPrescriptionItemDetails[0].MCIItemDisplay =
                this.objProcessingItemVM.MCIItemDisplay;
            this.objNewItemVM.ParentReorderType =
              this.objProcessingItemVM.ParentReorderType;
            if (
              String.IsNullOrEmpty(
                oResResolve.oPrescriptionItemDetails[0].PrescriptionItemStatus
              ) &&
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.PrescriptionItemStatus
              )
            ) {
              if (
                (String.Compare(
                  this.objProcessingItemVM.PrescriptionItemStatus,
                  PrescriptionItemStatusCodes.DISCONTINUED,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 &&
                  this.ActivityCode != ActivityTypes.Reorder) ||
                String.Compare(
                  this.objProcessingItemVM.PrescriptionItemStatus,
                  PrescriptionItemStatusCodes.CANCELLED,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 ||
                (String.Compare(
                  this.objProcessingItemVM.PrescriptionItemStatus,
                  PrescriptionItemStatusCodes.COMPLETED,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 &&
                  this.ActivityCode != ActivityTypes.Reorder) ||
                (String.Compare(
                  this.objProcessingItemVM.PrescriptionItemStatus,
                  PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 &&
                  (String.Compare(
                    ContextInfo.MenuCode,
                    CConstants.ClinicallyVerifyMenuCode,
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0 ||
                    String.Compare(
                      ContextInfo.MenuCode,
                      CConstants.ClinicallyVerifyMenu,
                      StringComparison.InvariantCultureIgnoreCase
                    ) == 0)) ||
                String.Compare(
                  this.objProcessingItemVM.PrescriptionItemStatus,
                  PrescriptionItemStatusCodes.ONHOLD,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 ||
                (this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null &&
                  String.Compare(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.ToString(),
                    '0',
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0 &&
                  String.Compare(
                    this.objProcessingItemVM.DrugVersionMatch.ToString(),
                    '1',
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0)
              )
                this.objNewItemVM.IsFormViewerDisable = true;
            }
            if (
              !PatientContext.IsINFUSIONON &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionType != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.Infused !=
                null &&
              (!String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .InfusionType.Value
              ) ||
                (String.Compare(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .Infused,
                  '1',
                  StringComparison.OrdinalIgnoreCase
                ) == 0 &&
                  !String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .itemSubType
                  ) &&
                  (String.Compare(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .itemSubType,
                    CConstants.SUBTYPE_GAS,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0 ||
                    String.Compare(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .itemSubType,
                      CConstants.SUBTYPE_BLOOD,
                      StringComparison.OrdinalIgnoreCase
                    ) == 0)))
            ) {
              this.objNewItemVM.IsFormViewerDisable = true;
            }
            if (
              oResResolve.oPrescriptionItemDetails[0].BasicProperties != null &&
              oResResolve.oPrescriptionItemDetails[0].BasicProperties
                .Statusflags != null &&
              oResResolve.oPrescriptionItemDetails[0].BasicProperties
                .Statusflags.IsHold == '1' &&
              this.objProcessingItemVM.IsHold
            )
              this.objNewItemVM.IsFormViewerDisable = true;
            if (this.objProcessingItemVM.IsFormViewerDisable)
              this.objNewItemVM.IsFormViewerDisable = true;
            if (this.ActivityCode == ActivityTypes.ConflictUpdate) {
              this.objNewItemVM.ActionCode = ActivityTypes.Amend;
              if (this.objProcessingItemVM.IsDueNowSlot) {
                this.objNewItemVM.IsDueNowSlot = true;
              }
              if (this.objProcessingItemVM.IsInfInprogress) {
                this.objNewItemVM.IsInfInprogress = true;
              }
              if (this.objProcessingItemVM.IsUnHoldAction) {
                this.objNewItemVM.IsUnHoldAction = true;
              }
            } else {
              this.objNewItemVM.ActionCode = this.ActivityCode;
            }
            let ddStartDTTM: DateTime = DateTime.MinValue;
            let ddFirstAdmnSchTime: DateTime = DateTime.MinValue;
            if (this.MedsResolve.Count > 0) {
              let oItemVM: PrescriptionItemVM = this.MedsResolve.ElementAt(0);
              if (oItemVM != null) {
                ddStartDTTM = oItemVM.FormViewerDetails.BasicDetails.StartDTTM;
                ddFirstAdmnSchTime =
                  oItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime;
                if (oItemVM.FormViewerDetails.BasicDetails.AdminTimes != null) {
                  let _freqDetails: IPPMAManagePrescSer.CResMsgGetAdministrationTimes =
                    oItemVM.FormViewerDetails.BasicDetails.AdminTimes
                      .FreqDetails;
                  let FrequrncyType: string =
                    _freqDetails != null && _freqDetails.oFrequency != null
                      ? _freqDetails.oFrequency.Type
                      : String.Empty;
                  if (String.Compare(FrequrncyType, 'CC_PERIOD') == 0) {
                    if (
                      oItemVM.FormViewerDetails.BasicDetails.AdminTimes
                        .IsFixedTime
                    ) {
                      if (
                        oItemVM.FormViewerDetails.BasicDetails.AdminTimes
                          .AdministrationScheduleTimes != null
                      ) {
                        let AdmnTimesOrdered =
                          oItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Where(
                            (oAdmnTime) =>
                              oAdmnTime.ScheduleDTTM.TimeOfDay >=
                              ddFirstAdmnSchTime.TimeOfDay
                          )
                            .OrderBy(
                              (oAdmnTime) => oAdmnTime.ScheduleDTTM.TimeOfDay
                            )
                            .Select((oAdmnTime) => oAdmnTime);
                        //let AdmnTimesOrdered = oItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Where(oAdmnTime =>oAdmnTime.ScheduleDTTM.TimeOfDay>=ddFirstAdmnSchTime.TimeOfDayorderbyoAdmnTime.ScheduleDTTM.TimeOfDay).Select(oAdmnTime => oAdmnTime);
                        if (
                          AdmnTimesOrdered != null &&
                          AdmnTimesOrdered.Count() > 0
                        ) {
                          ddFirstAdmnSchTime = new DateTime(
                            ddStartDTTM.DateTime.AddMinutes(
                              AdmnTimesOrdered.First().ScheduleDTTM.TimeOfDay
                                .TotalMinutes
                            ).Ticks,
                            DateTimeKind.Local
                          );
                        }
                      }
                    } else if (
                      oItemVM.FormViewerDetails.BasicDetails.AdminTimes
                        .IsDrugroundTime
                    ) {
                      let AdmnTimesOrdered =
                        oItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Where(
                          (oAdmnTime) =>
                            oAdmnTime.DrugroundDTTM.TimeOfDay >=
                            ddFirstAdmnSchTime.TimeOfDay
                        )
                          .OrderBy(
                            (oAdmnTime) => oAdmnTime.DrugroundDTTM.TimeOfDay
                          )
                          .Select((oAdmnTime) => oAdmnTime);
                      if (
                        AdmnTimesOrdered != null &&
                        AdmnTimesOrdered.Count() > 0
                      ) {
                        ddFirstAdmnSchTime = new DateTime(
                          ddStartDTTM.DateTime.AddMinutes(
                            AdmnTimesOrdered.First().DrugroundDTTM.TimeOfDay
                              .TotalMinutes
                          ).Ticks,
                          DateTimeKind.Local
                        );
                      }
                    }
                  }
                }
              }
            }
            if (
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
            ) {
              if (
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .AdminMethod != null &&
                !String.IsNullOrEmpty(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .AdminMethod.DisplayText
                )
              ) {
                oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.AdminMethod.Name =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminMethod.DisplayText;
              }
              if (this.objNewItemVM.FormViewerDetails == null) {
                this.objNewItemVM.FormViewerDetails = new FormViewerVM();
              }
              if (this.objNewItemVM.FormViewerDetails.PresItemDRCVM == null) {
                this.objNewItemVM.FormViewerDetails.PresItemDRCVM =
                  new PresItemDRCVM();
              }
              if (this.objNewItemVM.FormViewerDetails.BasicDetails == null) {
                this.objNewItemVM.FormViewerDetails.BasicDetails =
                  new BasicDetailsVM(this.objNewItemVM);
              }
              if (
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.OmitComments
                ) &&
                !String.IsNullOrEmpty(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .OmitComments
                )
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsinDefiniteOmit =
                  true;
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsinDefiniteOmit =
                  false;
              }
              if (
                this.ActivityCode == ActivityTypes.Amend &&
                DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .NextSupplyDate, DateTime.MinValue)
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.NextSupplyDate;
                this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.NextSupplyDate;
              }
              if (
                this.ActivityCode == ActivityTypes.Amend &&
                !String.IsNullOrEmpty(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .SupplyInsVal
                ) &&
                !String.IsNullOrEmpty(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .SupplyInsText
                )
              ) {
                oResResolve.oPrescriptionItemDetails[0].BasicProperties.SupplyInstruction =
                  null;
                this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsText =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsText;
                this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsVal =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsVal;
                let supplyinstval: string[] =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsVal.Split(
                    ';'
                  );
                let supplyinsttext: string[] =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsText.Split(
                    ';'
                  );
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction == null
                )
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                    new ObservableCollection<CListItem>();
                for (let i: number = 0; i < supplyinstval.length; i++) {
                  if (
                    this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                      (c) => c.Value == supplyinstval[i]
                    ).Count() == 0
                  ) {
                    this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Add(
                      ObjectHelper.CreateObject(new CListItem(), {
                        Value: supplyinstval[i],
                        DisplayText: !String.IsNullOrEmpty(supplyinsttext[i])
                          ? supplyinsttext[i]
                          : String.Empty,
                      })
                    );
                  }
                }
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction.Count > 0
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalsupplyInstruction =
                    new ObservableCollection<CListItem>();
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.forEach(
                    (instr) => {
                      if (
                        this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalsupplyInstruction.Where(
                          (x) => x.Value == instr.Value
                        ).Count() == 0
                      ) {
                        this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalsupplyInstruction.Add(
                          instr
                        );
                      }
                    }
                  );
                }
              }
              if (
                this.ActivityCode == ActivityTypes.Amend &&
                !String.IsNullOrEmpty(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .TechSupplyInstrItemLevel
                )
              ) {
                oResResolve.oPrescriptionItemDetails[0].BasicProperties.SupplyInstruction =
                  null;
                let supplyinstrcomm: string[] =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel.Split(
                    '~~',
                    StringSplitOptions.None
                  );
                let supplyinstval: string[] = null;
                if (supplyinstrcomm != null && supplyinstrcomm.length > 1) {
                  if (
                    supplyinstrcomm[0] != '' &&
                    !String.IsNullOrEmpty(supplyinstrcomm[0])
                  ) {
                    supplyinstval = supplyinstrcomm[0].Split(';');
                  }
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments =
                    supplyinstrcomm[1];
                  this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalSupplyComments =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments;
                } else {
                  supplyinstval =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel.Split(
                      ';'
                    );
                }
                let sDisplayTxt: string = String.Empty;
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction == null
                )
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                    new ObservableCollection<CListItem>();
                if (supplyinstval != null) {
                  for (let i: number = 0; i < supplyinstval.length; i++) {
                    if (
                      !String.Equals(
                        supplyinstval[i],
                        CConstants.Supplycomments,
                        StringComparison.InvariantCultureIgnoreCase
                      )
                    ) {
                      if (
                        MedicationCommonConceptCodeData.ViewConceptCodes !=
                          null &&
                        MedicationCommonConceptCodeData.ViewConceptCodes.Count >
                          0
                      ) {
                        sDisplayTxt =
                          MedicationCommonConceptCodeData.ViewConceptCodes.Where(
                            (c) =>
                              !String.IsNullOrEmpty(c.csCode) &&
                              String.Equals(c.csCode, supplyinstval[i])
                          )
                            .Select((s) => s.csDescription)
                            .FirstOrDefault();
                        if (
                          !String.IsNullOrEmpty(supplyinstval[i]) &&
                          supplyinstval[i] != '' &&
                          this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                            (c) => c.Value == supplyinstval[i]
                          ).Count() == 0
                        ) {
                          this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Add(
                            ObjectHelper.CreateObject(new CListItem(), {
                              Value: supplyinstval[i],
                              DisplayText: !String.IsNullOrEmpty(sDisplayTxt)
                                ? sDisplayTxt
                                : String.Empty,
                            })
                          );
                        }
                      }
                    }
                  }
                }
              }
              if (
                this.ActivityCode == ActivityTypes.Amend &&
                !String.IsNullOrEmpty(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .FluidSupplyInstrText
                )
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.FluidSupplyInstrText =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.FluidSupplyInstrText;
              }
              if (
                this.ActivityCode == ActivityTypes.Amend &&
                DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .FluidNextSupplyDate, DateTime.MinValue)
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.FluidNextSupplyDate =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.FluidNextSupplyDate;
              }
              if (
                this.objNewItemVM != null &&
                this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction.Count > 0
              ) {
                let oSupplyInstTxt: string = String.Empty;
                let oSupplyInstVal: string = String.Empty;
                this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                  new ObservableCollection<CListItem>(
                    this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                  );
                this.objNewItemVM.FormViewerDetails.BasicDetails.TechValiadteSupplyInstWithConactSemiColon(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction,
                  (o1) => {
                    oSupplyInstTxt = o1;
                  },
                  (o2) => {
                    oSupplyInstVal = o2;
                  }
                );
                this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsVal =
                  oSupplyInstVal;
                if (
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  )
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsTextWithComments =
                    oSupplyInstTxt +
                    Environment.NewLine +
                    'Comments:' +
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments;
                }
                this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsText =
                  oSupplyInstTxt;
              } else if (
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .Supplycomments
                )
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsTextWithComments =
                  'Comments:' +
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .Supplycomments;
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsTextWithComments =
                  Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
              }
              if (this.objProcessingItemVM.bIsSupplyDispensingInstructionSet) {
                this.objNewItemVM.bIsSupplyDispensingInstructionSet =
                  this.objProcessingItemVM.bIsSupplyDispensingInstructionSet;
                if (
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction != null
                ) {
                  let oListItem: CListItem;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                    new ObservableCollection<CListItem>();
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.forEach(
                    (oSupplyInstruction) => {
                      if (oSupplyInstruction.IsSelected) {
                        oListItem = ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: oSupplyInstruction.DisplayText,
                          Value: oSupplyInstruction.Value,
                          IsSelected: true,
                        });
                        this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Add(
                          oListItem
                        );
                      }
                    }
                  );
                }
                this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.Supplycomments;
                this.objNewItemVM.SelectedSupplyreq =
                  this.objProcessingItemVM.SelectedSupplyreq;
                if (
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .DispensingInstruction != null
                ) {
                  let oListItem: CListItem;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DispensingInstruction =
                    new ObservableCollection<CListItem>();
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.DispensingInstruction.forEach(
                    (oDispens) => {
                      if (oDispens.IsSelected) {
                        oListItem = ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: oDispens.DisplayText,
                          Value: oDispens.Value,
                          IsSelected: true,
                        });
                        if (
                          String.Compare(
                            oDispens.Value,
                            'CC_OTHER',
                            StringComparison.InvariantCultureIgnoreCase
                          ) == 0
                        )
                          oListItem.Tag = oDispens.Tag;
                        this.objNewItemVM.FormViewerDetails.BasicDetails.DispensingInstruction.Add(
                          oListItem
                        );
                      }
                    }
                  );
                }
              }
              this.objNewItemVM.IsSupplyRecordedViaCV =
                this.objProcessingItemVM.IsSupplyRecordedViaCV;
            }
            if (
              oResResolve.oPrescriptionItemDetails[0] != null &&
              oResResolve.oPrescriptionItemDetails[0].ActionPerformed != null &&
              oResResolve.oPrescriptionItemDetails[0].ActionPerformed
                .Comments != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .VerificationComments == null
            ) {
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.VerificationComments =
                oResResolve.oPrescriptionItemDetails[0].ActionPerformed.Comments;
            }
            if (
              oResResolve != null &&
              oResResolve.oPrescriptionItemDetails[0] != null &&
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .Supplycomments
              )
            ) {
              oResResolve.oPrescriptionItemDetails[0].Supplycomments =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Supplycomments;
            }
            if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails !=
                null &&
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
                .TechValidatedItems != null &&
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
                .TechValidatedItems.Count > 0
            ) {
              if (
                this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
                  (x) =>
                    x.IsDoseCombinationsDefined == '1' &&
                    (x.FluidPrescribableItemListOID == null || x.FluidPrescribableItemListOID == 0)
                ).Count() > 0 &&
                oResResolve.oPrescriptionItemDetails[0].TechValidateDetails !=
                  null &&
                oResResolve.oPrescriptionItemDetails[0]
                  .TechValidateDetails[0] != null
              ) {
                let dosecomb =
                  oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems.Where(
                    (x) =>
                      x.IsDoseCombinationsDefined == '1' &&
                      (x.FluidPrescribableItemListOID == null || x.FluidPrescribableItemListOID == 0)
                  ).ToList();
                dosecomb.forEach((item) => {
                  oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems.Remove(
                    item
                  );
                });
                let noofdosecomb: number =
                  this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
                    .TechValidatedItems.Count;
                for (let i: number = 0; i < noofdosecomb; i++) {
                  if (
                    this.objProcessingItemVM.FormViewerDetails
                      .TechValidateDetails.TechValidatedItems[i]
                      .IsDoseCombinationsDefined == '1'
                  ) {
                    if (
                      oResResolve.oPrescriptionItemDetails[0]
                        .TechValidateDetails[0].TechValidatedItems == null
                    )
                      oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems =
                        new ObservableCollection<IPPMAManagePrescSer.TechValidatedItem>();
                    let TVProd: IPPMAManagePrescSer.TechValidatedItem =
                      new IPPMAManagePrescSer.TechValidatedItem();
                    TVProd.QuantityPerDose =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].QuantityPerDose;
                    TVProd.QuantityPerDoseUOM =
                      new IPPMAManagePrescSer.ObjectInfo();
                    TVProd.QuantityPerDoseUOM.OID =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].QuantityPerDoseUOM.OID;
                    TVProd.QuantityPerDoseUOM.Name =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].QuantityPerDoseUOM.Name;
                    TVProd.TotalQuantity =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].TotalQuantity;
                    TVProd.TotalQuantityUOM =
                      new IPPMAManagePrescSer.ObjectInfo();
                    TVProd.TotalQuantityUOM.OID =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].TotalQuantityUOM.OID;
                    TVProd.TotalQuantityUOM.Name =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].TotalQuantityUOM.Name;
                    TVProd.FluidPrescribableItemListOID =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].FluidPrescribableItemListOID;
                    TVProd.PrescriptionItemTechOID =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].PrescriptionItemTechOID;
                    TVProd.OperationMode =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].OperationMode;
                    TVProd.IsDoseCombinationsDefined =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].IsDoseCombinationsDefined;
                    TVProd.SupplyComments =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].SupComments;
                    TVProd.SupplyInstruction =
                      new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                    for (
                      let j: number = 0;
                      j <
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].SupplyInstruction.Count;
                      j++
                    ) {
                      let supcode: IPPMAManagePrescSer.ObjectInfo =
                        new IPPMAManagePrescSer.ObjectInfo();
                      supcode.Code =
                        this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                          i
                        ].SupplyInstruction[j].Code;
                      TVProd.SupplyInstruction.Add(supcode);
                    }
                    TVProd.DrugItem =
                      new IPPMAManagePrescSer.DrugItemBasicData();
                    TVProd.DrugItem.IdentifyingOID =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].DrugItem.IdentifyingOID;
                    TVProd.DrugItem.IdentifyingName =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].DrugItem.IdentifyingName;
                    TVProd.DrugItem.IdentifyingType =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].DrugItem.IdentifyingType;
                    TVProd.DrugItem.PrescribableItemListOID =
                      this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                        i
                      ].DrugItem.PrescribableItemListOID;
                    oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems.Add(
                      TVProd
                    );
                  }
                }
              }
            } else if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails !=
                null &&
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
                .TechValidatedItems != null &&
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
                .TechValidatedItems.Count == 0 &&
              oResResolve != null &&
              oResResolve.oPrescriptionItemDetails[0].TechValidateDetails !=
                null &&
              oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0] !=
                null &&
              oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0]
                .TechValidatedItems != null
            ) {
              let dosecomb =
                oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems.Where(
                  (x) =>
                    x.IsDoseCombinationsDefined == '1' &&
                    (x.FluidPrescribableItemListOID == null || x.FluidPrescribableItemListOID == 0)
		    ).ToList();
              dosecomb.forEach((item) => {
                oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems.Remove(
                  item
                );
              });
            }
            if (this.ActivityCode == ActivityTypes.Amend) {
              let _PresItemStatusNotActive: boolean = false;
              if (
                this.objNewItemVM.PrescriptionItemStatus ==
                  CConstants.DISCONTINUED ||
                this.objNewItemVM.PrescriptionItemStatus ==
                  CConstants.CANCELLED ||
                this.objNewItemVM.DiscontinueCancelAction != null
              ) {
                _PresItemStatusNotActive = true;
              }
              if (
                !_PresItemStatusNotActive &&
                (this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                  .IsAmendDRCRegenarated ||
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                    .IsAmendDRCDataLoaded)
              ) {
                if (
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                    .MedDRCVM != null &&
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                    .MedDRCVM.Count > 0
                ) {
                  let oDRCConflict: ObservableCollection<IPPMAManagePrescSer.DRCConflict> =
                    new ObservableCollection<IPPMAManagePrescSer.DRCConflict>();
                  this.FillDRCRequest(
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                      .MedDRCVM,
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                      .MedDRCReason,
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                      .DRCComments,
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                      .DRCAcknowledge,
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                      .BehaviourType,
                    true,
                    (o) => {
                      oDRCConflict = o;
                    }
                  );
                  oResResolve.oPrescriptionItemDetails[0].DRCConflict =
                    oDRCConflict;
                }
                oResResolve.oPrescriptionItemDetails[0].OnlyDRCConflictsUpdate =
                  true;
                oResResolve.oPrescriptionItemDetails[0].IsAmendDRCRegenarated =
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated;
                oResResolve.oPrescriptionItemDetails[0].IsAmendDRCDataLoaded =
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded;
                oResResolve.oPrescriptionItemDetails[0].IsDRCReasonMandatory =
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory;
                oResResolve.oPrescriptionItemDetails[0].IsDRCAcklgdeMandatory =
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory;
                oResResolve.oPrescriptionItemDetails[0].IsChangedDRCDoseTypeForAmend =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend;
                if (
                  !String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                      .BehaviourType
                  )
                ) {
                  oResResolve.oPrescriptionItemDetails[0].DRCBehaviourType =
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType;
                } else {
                  oResResolve.oPrescriptionItemDetails[0].DRCBehaviourType =
                    String.Empty;
                }
                if (
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties
                    .DRCdoseTypeLorenzoID != null &&
                  !String.IsNullOrEmpty(
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties
                      .DRCdoseTypeLorenzoID.Code
                  )
                ) {
                  oResResolve.oPrescriptionItemDetails[0].OriginalDRCDoseTypeCode =
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.DRCdoseTypeLorenzoID.Code;
                } else {
                  oResResolve.oPrescriptionItemDetails[0].OriginalDRCDoseTypeCode =
                    String.Empty;
                }
                if (
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .DRCDosetype != null
                ) {
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.DRCdoseTypeLorenzoID =
                    ObjectHelper.CreateObject(
                      new IPPMAManagePrescSer.ObjectInfo(),
                      {
                        Code: this.objProcessingItemVM.FormViewerDetails
                          .BasicDetails.DRCDosetype.Value,
                        Name: this.objProcessingItemVM.FormViewerDetails
                          .BasicDetails.DRCDosetype.DisplayText,
                      }
                    );
                } else {
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.DRCdoseTypeLorenzoID =
                    new IPPMAManagePrescSer.ObjectInfo();
                }
              }
              if (this.objProcessingItemVM.OperationMode == 'UA') {
                if (
                  PatientContext.PrescriptionType ==
                    PrescriptionTypes.ForAdministration &&
                  this.objProcessingItemVM != null &&
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null
                ) {
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ReviewAfter != null &&
                    !String.IsNullOrEmpty(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ReviewAfter
                    ) &&
                    String.Compare(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ReviewAfter,
                      '-1.79769313486232E+308'
                    ) != 0 &&
                    String.Compare(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ReviewAfter,
                      '-2147483648.0'
                    ) != 0 &&
                    Convert.ToDouble(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ReviewAfter
                    ) != Number.MinValue &&
                    Convert.ToDouble(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ReviewAfter
                    ) > 0
                  ) {
                    let objService: IPPMAManagePrescSer.IPPPresItemBasicProperties =
                      ObjectHelper.CreateType<IPPMAManagePrescSer.IPPPresItemBasicProperties>(
                        oResResolve.oPrescriptionItemDetails[0].BasicProperties,
                        IPPMAManagePrescSer.IPPPresItemBasicProperties
                      );
                    objService.ReviewAfter =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfter;
                    objService.ReviewAfterUOM =
                      new IPPMAManagePrescSer.ObjectInfo();
                    if (
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ReviewafterUOM != null
                    ) {
                      objService.ReviewAfterUOM.Code =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM.Value;
                      objService.ReviewAfterUOM.OperationMode = 'UA';
                      objService.ReviewAfterUOM.Name =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM.DisplayText;
                    }
                    if (
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .IsReviewAlert
                    ) {
                      objService.IsReviewAlertShown = '1';
                    } else {
                      objService.IsReviewAlertShown = '0';
                    }
                  }
                }
                if (
                  !String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .PatientProblemCode
                  )
                ) {
                  let sProcode: string[] =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.PatientProblemCode.Split(
                      '!'
                    );
                  let sProblemDetails: StringBuilder = new StringBuilder();
                  if (sProcode != null && sProcode.length > 0) {
                    let nPrbCnt: number = sProcode.length;
                    for (let nCnt: number = 0; nCnt < nPrbCnt; nCnt++) {
                      let Sproblem: string[] = sProcode[nCnt].Split('#');
                      if (Sproblem != null && Sproblem.length > 0) {
                        if (sProblemDetails.Length > 0)
                          sProblemDetails.Append(
                            '~' +
                              Sproblem[1] +
                              '$' +
                              Sproblem[6] +
                              '$' +
                              Sproblem[2] +
                              '$' +
                              Sproblem[0]
                          );
                        else
                          sProblemDetails.Append(
                            Sproblem[1] +
                              '$' +
                              Sproblem[6] +
                              '$' +
                              Sproblem[2] +
                              '$' +
                              Sproblem[0]
                          );
                      }
                    }
                  }
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.PatientProblem =
                    new ObservableCollection<IPPMAManagePrescSer.Indication>();
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.PatientProblem.Add(
                    ObjectHelper.CreateObject(
                      new IPPMAManagePrescSer.Indication(),
                      { Code: sProblemDetails.ToString() }
                    )
                  );
                }
                if (
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null
                ) {
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.OtherAdminInstruction =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction;
                  oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.AdditionalComments =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdditionalComments;
                  this.objNewItemVM.OperationMode =
                    this.objProcessingItemVM.OperationMode;
                  if (
                    this.objProcessingItemVM != null &&
                    this.objProcessingItemVM.FormViewerDetails != null &&
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                      null &&
                    this.objNewItemVM != null &&
                    this.objNewItemVM.FormViewerDetails != null &&
                    this.objNewItemVM.FormViewerDetails.BasicDetails != null
                  ) {
                    this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableOnbehalfOf =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsenableOnbehalfOf;
                  }
                  if (
                    this.objProcessingItemVM != null &&
                    this.objProcessingItemVM.OnBehalfOf != null
                  ) {
                    this.objNewItemVM.OnBehalfOf = ObjectHelper.CreateObject(
                      new CListItem(),
                      {
                        DisplayText:
                          this.objProcessingItemVM.OnBehalfOf.DisplayText,
                        Value: this.objProcessingItemVM.OnBehalfOf.Value,
                      }
                    );
                    if (this.objProcessingItemVM.OnBehalfOfReason != null) {
                      this.objNewItemVM.OnBehalfOfReason =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText:
                            this.objProcessingItemVM.OnBehalfOfReason
                              .DisplayText,
                          Value:
                            this.objProcessingItemVM.OnBehalfOfReason.Value,
                        });
                    }
                    if (this.objProcessingItemVM.CommunicationMode != null) {
                      this.objNewItemVM.CommunicationMode =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText:
                            this.objProcessingItemVM.CommunicationMode
                              .DisplayText,
                          Value:
                            this.objProcessingItemVM.CommunicationMode.Value,
                        });
                    }
                  }
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .AdminInstruction != null
                  ) {
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.AdminInstruction =
                      ObjectHelper.CreateObject(
                        new IPPMAManagePrescSer.ObjectInfo(),
                        {
                          OID: Convert.ToInt64(
                            this.objProcessingItemVM.FormViewerDetails
                              .BasicDetails.AdminInstruction.Value
                          ),
                          Name: this.objProcessingItemVM.FormViewerDetails
                            .BasicDetails.AdminInstruction.DisplayText,
                        }
                      );
                  } else {
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.AdminInstruction =
                      null;
                  }
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .NONCatalogueReason != null
                  ) {
                    oResResolve.oPrescriptionItemDetails[0].NonCatItemReason =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason.Value;
                    oResResolve.oPrescriptionItemDetails[0].NonCatalogueOtherComments =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason;
                  }
                  if (
                    String.IsNullOrEmpty(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .SupplyInsVal
                    ) &&
                    String.IsNullOrEmpty(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .TechsupplyInstText
                    ) &&
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .TechValSupplyInst == null
                  ) {
                    if (
                      oResResolve != null &&
                      oResResolve.oPrescriptionItemDetails != null &&
                      oResResolve.oPrescriptionItemDetails.Count > 0 &&
                      oResResolve.oPrescriptionItemDetails[0] != null &&
                      oResResolve.oPrescriptionItemDetails[0]
                        .TechValidateDetails != null &&
                      oResResolve.oPrescriptionItemDetails[0].TechValidateDetails.Count >
                        0 &&
                      oResResolve.oPrescriptionItemDetails[0]
                        .TechValidateDetails[0] != null &&
                      oResResolve.oPrescriptionItemDetails[0]
                        .TechValidateDetails[0].TechValidatedItems != null &&
                      oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems.Count >
                        0 &&
                      oResResolve.oPrescriptionItemDetails[0]
                        .TechValidateDetails[0].TechValidatedItems[0] != null
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].BasicProperties.SupplyInstruction =
                        null;
                      oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems[0].SupplyInstruction =
                        null;
                    }
                  } else {
                    if (
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .SelectedsupplyInstruction != null &&
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .SelectedsupplyInstruction.Count > 0
                    ) {
                      let supplylist: ObservableCollection<IPPMAManagePrescSer.ObjectInfo> =
                        new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                      let OObjectInfo: IPPMAManagePrescSer.ObjectInfo;
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.forEach(
                        (item) => {
                          OObjectInfo = new IPPMAManagePrescSer.ObjectInfo();
                          OObjectInfo.Code = item.Value;
                          supplylist.Add(OObjectInfo);
                        }
                      );
                      if (
                        oResResolve.oPrescriptionItemDetails != null &&
                        oResResolve.oPrescriptionItemDetails.Count > 0 &&
                        oResResolve.oPrescriptionItemDetails[0] != null &&
                        oResResolve.oPrescriptionItemDetails[0]
                          .TechValidateDetails != null &&
                        oResResolve.oPrescriptionItemDetails[0].TechValidateDetails.Count >
                          0 &&
                        oResResolve.oPrescriptionItemDetails[0]
                          .TechValidateDetails[0] != null &&
                        oResResolve.oPrescriptionItemDetails[0]
                          .TechValidateDetails[0].TechValidatedItems != null &&
                        oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems.Count >
                          0 &&
                        oResResolve.oPrescriptionItemDetails[0]
                          .TechValidateDetails[0].TechValidatedItems[0] != null
                      ) {
                        oResResolve.oPrescriptionItemDetails[0].TechValidateDetails[0].TechValidatedItems[0].SupplyInstruction =
                          supplylist;
                      }
                    }
                  }
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .IntervalBetweenInstallment != null &&
                    ObjectHelper.HasValue(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .IntervalBetweenInstallment
                    )
                  ) {
                    oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.IntervalBtwnInstallment =
                      new IPPMAManagePrescSer.MeasurableObject();
                    oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.IntervalBtwnInstallment.Value =
                      Convert.ToInt64(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .IntervalBetweenInstallment.Value
                      );
                    if (
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .IntervalBetweenInstallmentUOM != null &&
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .IntervalBetweenInstallmentUOM.Value
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.IntervalBtwnInstallment.UOMName =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM.DisplayText;
                      oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.IntervalBtwnInstallment.UOMOID =
                        Convert.ToInt64(
                          this.objProcessingItemVM.FormViewerDetails
                            .BasicDetails.IntervalBetweenInstallmentUOM.Value
                        );
                    }
                  }
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .NoOfInstallments != null &&
                    ObjectHelper.HasValue(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .NoOfInstallments
                    )
                  ) {
                    oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.NoOfInstallments =
                      Convert.ToInt16(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .NoOfInstallments.Value
                      );
                  }
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .EndorsementProperties != null
                  ) {
                    let selectedEndorsProps =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.EndorsementProperties.Where(
                        (EndorsProp) => EndorsProp.IsSelected
                      ).Select((EndorsProp) => EndorsProp);
                    if (selectedEndorsProps != null) {
                      let nPropCnt: number = selectedEndorsProps.Count();
                      for (let i: number = 0; i < nPropCnt; i++) {
                        if (i == 0) {
                          oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.EndorsementProperties =
                            new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                        }
                        let EndorsProp: CListItem =
                          selectedEndorsProps.ElementAt(i);
                        if (EndorsProp == null) continue;
                        oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.EndorsementProperties.Add(
                          ObjectHelper.CreateObject(
                            new IPPMAManagePrescSer.ObjectInfo(),
                            { Code: EndorsProp.Value }
                          )
                        );
                      }
                    }
                  }
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .InstalmentInstructions != null
                  ) {
                    let selectedInstallInst =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.InstalmentInstructions.Where(
                        (InstallInst) => InstallInst.IsSelected
                      ).Select((InstallInst) => InstallInst);
                    if (selectedInstallInst != null) {
                      let nInstallInstCnt: number = selectedInstallInst.Count();
                      for (let i: number = 0; i < nInstallInstCnt; i++) {
                        if (i == 0) {
                          oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.InstalmentInstructions =
                            new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                        }
                        let InstallInst: CListItem =
                          selectedInstallInst.ElementAt(i);
                        if (InstallInst == null) continue;
                        oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.InstalmentInstructions.Add(
                          ObjectHelper.CreateObject(
                            new IPPMAManagePrescSer.ObjectInfo(),
                            { Code: InstallInst.Value }
                          )
                        );
                      }
                    }
                  }
                  let lDurVal: number = 0;
                  if (
                    !String.IsNullOrEmpty(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .Duration
                    ) &&
                    Number.TryParse(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .Duration,
                      (o) => {
                        lDurVal = o;
                      }
                    )
                  ) {
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.Duration =
                      ObjectHelper.CreateObject(
                        new IPPMAManagePrescSer.MeasurableObject(),
                        { Value: lDurVal }
                      );
                  }
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .DurationUOM != null &&
                    !String.IsNullOrEmpty(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .DurationUOM.Value
                    )
                  ) {
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.Duration.UOMName =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.DurationUOM.DisplayText;
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.Duration.UOMCode =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.DurationUOM.Value;
                    if (
                      oResResolve != null &&
                      oResResolve.oPrescriptionItemDetails[0] != null &&
                      oResResolve.oPrescriptionItemDetails[0]
                        .FormViewParameters != null &&
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters
                        .IntravenousInfusionData != null &&
                      oResResolve.oPrescriptionItemDetails[0].BasicProperties !=
                        null &&
                      oResResolve.oPrescriptionItemDetails[0].BasicProperties
                        .Duration != null &&
                      oResResolve.oPrescriptionItemDetails[0].BasicProperties
                        .Duration.Value > 0 &&
                      oResResolve.oPrescriptionItemDetails[0].BasicProperties
                        .Duration.UOMName != null &&
                      (String.Equals(
                        oResResolve.oPrescriptionItemDetails[0]
                          .FormViewParameters.INFTYCODE,
                        InfusionTypesCode.CONTINUOUS,
                        StringComparison.OrdinalIgnoreCase
                      ) ||
                        String.Equals(
                          oResResolve.oPrescriptionItemDetails[0]
                            .FormViewParameters.INFTYCODE,
                          InfusionTypesCode.SINGLEDOSEVOLUME,
                          StringComparison.OrdinalIgnoreCase
                        ) ||
                        String.Equals(
                          oResResolve.oPrescriptionItemDetails[0]
                            .FormViewParameters.INFTYCODE,
                          InfusionTypesCode.FLUID,
                          StringComparison.OrdinalIgnoreCase
                        ) ||
                        String.Equals(
                          oResResolve.oPrescriptionItemDetails[0]
                            .FormViewParameters.INFTYCODE,
                          InfusionTypesCode.PCA,
                          StringComparison.OrdinalIgnoreCase
                        ))
                    ) {
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOnGoing =
                        'N';
                    }
                  }
                  if (
                    !String.IsNullOrEmpty(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .Quantity
                    )
                  ) {
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.Quantity =
                      ObjectHelper.CreateObject(
                        new IPPMAManagePrescSer.Quantity(),
                        {
                          QuantityValue:
                            this.objProcessingItemVM.FormViewerDetails
                              .BasicDetails.Quantity,
                        }
                      );
                    let lUOMOID: number = 0;
                    if (
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .QuantityUOM != null &&
                      Number.TryParse(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .QuantityUOM.Value,
                        (o) => {
                          lUOMOID = o;
                        }
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].BasicProperties.Quantity.QuantityUOMId =
                        lUOMOID;
                      oResResolve.oPrescriptionItemDetails[0].BasicProperties.Quantity.QuantityUOMName =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.QuantityUOM.DisplayText;
                    }
                  } else if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ReasonforModification != null &&
                    !String.IsNullOrEmpty(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ReasonforModification.Value
                    )
                  ) {
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.Quantity =
                      ObjectHelper.CreateObject(
                        new IPPMAManagePrescSer.Quantity(),
                        { QuantityValue: String.Empty }
                      );
                    this.objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOM =
                      null;
                    this.objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOMName =
                      String.Empty;
                    this.objNewItemVM.FormViewerDetails.BasicDetails.Quantity =
                      String.Empty;
                  }
                  if (
                    this.ActivityCode == ActivityTypes.Amend &&
                    this.objProcessingItemVM.IsDoseCalcPerformedInAmend
                  ) {
                    if (
                      this.objProcessingItemVM.DoseCalculationDetails != null &&
                      DateTime.NotEquals(this.objProcessingItemVM.DoseCalculationDetails
                        .CalculatedDTTM, DateTime.MinValue)
                    ) {
                      this.objNewItemVM.DoseCalculationDetails =
                        this.objProcessingItemVM.DoseCalculationDetails;
                      this.objNewItemVM.IsDoseCalcPerformed = true;
                    } else if (
                      DateTime.NotEquals(oResResolve.oPrescriptionItemDetails[0].DoseCalculation
                        .CalculatedDTTM, DateTime.MinValue)
                    ) {
                      this.objNewItemVM.DoseCalculationDetails = null;
                      oResResolve.oPrescriptionItemDetails[0].DoseCalculation =
                        null;
                    }
                  }
                  if (
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .InfusionDetails != null
                  ) {
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.Rate
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.Rate =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
                    }
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.UpperRate
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.UpperRate =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperRate;
                    }
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.LowConcentration
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.LowConcentration =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.LowConcentration;
                    }
                    if (
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .InfusionDetails.LowConcentrationUOM != null &&
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.LowConcentrationUOM.Value
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.LowConcentrationUOMOID =
                        ObjectHelper.CreateObject(
                          new IPPMAManagePrescSer.UOM(),
                          {
                            UOMName:
                              this.objProcessingItemVM.FormViewerDetails
                                .BasicDetails.InfusionDetails
                                .LowConcentrationUOM.DisplayText,
                            UOMId: Convert.ToInt64(
                              this.objProcessingItemVM.FormViewerDetails
                                .BasicDetails.InfusionDetails
                                .LowConcentrationUOM.Value
                            ),
                          }
                        );
                    } else {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.LowConcentrationUOMOID =
                        null;
                    }
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.UpperConcentration
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.UpperConcentration =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.UpperConcentration;
                    }
                    if (
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .InfusionDetails.UpperConcentrationUOM != null &&
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.UpperConcentrationUOM.Value
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID =
                        ObjectHelper.CreateObject(
                          new IPPMAManagePrescSer.UOM(),
                          {
                            UOMName:
                              this.objProcessingItemVM.FormViewerDetails
                                .BasicDetails.InfusionDetails
                                .UpperConcentrationUOM.DisplayText,
                            UOMId: Convert.ToInt64(
                              this.objProcessingItemVM.FormViewerDetails
                                .BasicDetails.InfusionDetails
                                .UpperConcentrationUOM.Value
                            ),
                          }
                        );
                    } else {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.UpperConcentrationUOMOID =
                        null;
                    }
                    oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.IsSequentialPrescribing =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem;
                    oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.InfusionSeqOrder =
                      Convert.ToInt32(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.ItemSequenceNo
                      );
                    if (
                      this.ActivityCode == ActivityTypes.Amend &&
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .InfusionDetails.PrescriptionItemNumber > 0
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.ParentPrescriptionItemOID =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
                    }
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.InfusionPeriod
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.InfusionPeriod =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionPeriod;
                    } else {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.InfusionPeriod =
                        String.Empty;
                    }
                    if (
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .InfusionDetails.InfusionPeriodUom != null &&
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.InfusionPeriodUom.Value
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.InfusionPeriodUOM =
                        ObjectHelper.CreateObject(
                          new IPPMAManagePrescSer.UOM(),
                          {
                            UOMName:
                              this.objProcessingItemVM.FormViewerDetails
                                .BasicDetails.InfusionDetails.InfusionPeriodUom
                                .DisplayText,
                            UOMId: Convert.ToInt64(
                              this.objProcessingItemVM.FormViewerDetails
                                .BasicDetails.InfusionDetails.InfusionPeriodUom
                                .Value
                            ),
                          }
                        );
                    } else {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.InfusionPeriodUOM =
                        null;
                    }
                    oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.IsOnGoing =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOnGoing;
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.MaxDose
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.MaxDose =
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.MaxDose;
                    }
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.TargetLowerSatRange
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.TargetSaturationLower =
                        Convert.ToInt32(
                          this.objProcessingItemVM.FormViewerDetails
                            .BasicDetails.InfusionDetails.TargetLowerSatRange
                        );
                    }
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.TargetUpperSatRange
                      )
                    ) {
                      oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.TargetSaturationUpper =
                        Convert.ToInt32(
                          this.objProcessingItemVM.FormViewerDetails
                            .BasicDetails.InfusionDetails.TargetUpperSatRange
                        );
                    }
                    if (
                      !String.IsNullOrEmpty(
                        this.objProcessingItemVM.ItemSubType
                      ) &&
                      String.Compare(
                        this.objProcessingItemVM.ItemSubType,
                        CConstants.SUBTYPE_GAS,
                        StringComparison.CurrentCultureIgnoreCase
                      ) == 0
                    ) {
                      if (
                        !String.IsNullOrEmpty(
                          this.objProcessingItemVM.FormViewerDetails
                            .BasicDetails.InfusionDetails.Rate
                        )
                      ) {
                        oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.Rate =
                          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Rate;
                      }
                      if (
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.InfRateNumeratorUom != null &&
                        !String.IsNullOrEmpty(
                          this.objProcessingItemVM.FormViewerDetails
                            .BasicDetails.InfusionDetails.InfRateNumeratorUom
                            .Value
                        )
                      ) {
                        oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.RateUOM =
                          ObjectHelper.CreateObject(
                            new IPPMAManagePrescSer.UOM(),
                            {
                              UOMId: Convert.ToInt64(
                                this.objProcessingItemVM.FormViewerDetails
                                  .BasicDetails.InfusionDetails
                                  .InfRateNumeratorUom.Value
                              ),
                              UOMName:
                                this.objProcessingItemVM.FormViewerDetails
                                  .BasicDetails.InfusionDetails
                                  .InfRateNumeratorUom.DisplayText,
                            }
                          );
                      }
                      if (
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.InfRateDinominatorUom != null &&
                        !String.IsNullOrEmpty(
                          this.objProcessingItemVM.FormViewerDetails
                            .BasicDetails.InfusionDetails.InfRateDinominatorUom
                            .Value
                        )
                      ) {
                        oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.RateDenominatorUOM =
                          ObjectHelper.CreateObject(
                            new IPPMAManagePrescSer.UOM(),
                            {
                              UOMId: Convert.ToInt64(
                                this.objProcessingItemVM.FormViewerDetails
                                  .BasicDetails.InfusionDetails
                                  .InfRateDinominatorUom.Value
                              ),
                              UOMName:
                                this.objProcessingItemVM.FormViewerDetails
                                  .BasicDetails.InfusionDetails
                                  .InfRateDinominatorUom.DisplayText,
                            }
                          );
                      }
                      if (
                        !String.IsNullOrEmpty(
                          this.objProcessingItemVM.FormViewerDetails
                            .BasicDetails.InfusionDetails.DeliveryDeviceFreetext
                        )
                      ) {
                        oResResolve.oPrescriptionItemDetails[0].FormViewParameters.IntravenousInfusionData.DeliveryDevice =
                          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext;
                      }
                    }
                  }
                }
                if (
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .MedClerkModifyReason != null &&
                  !String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .MedClerkModifyReason.Value
                  ) &&
                  oResResolve != null &&
                  oResResolve.oPrescriptionItemDetails != null &&
                  oResResolve.oPrescriptionItemDetails.Count > 0 &&
                  oResResolve.oPrescriptionItemDetails[0] != null &&
                  oResResolve.oPrescriptionItemDetails[0]
                    .AdditionalProperties != null
                ) {
                  oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.MedClerkModifyReason =
                    ObjectHelper.CreateObject(
                      new IPPMAManagePrescSer.ObjectInfo(),
                      {
                        Code: this.objProcessingItemVM.FormViewerDetails
                          .BasicDetails.MedClerkModifyReason.Value,
                      }
                    );
                }
                if (
                  oResResolve != null &&
                  oResResolve.oPrescriptionItemDetails[0] != null &&
                  this.objProcessingItemVM != null &&
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null
                ) {
                  oResResolve.oPrescriptionItemDetails[0].Supplycomments =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.Supplycomments;
                }
                if (
                  oResResolve != null &&
                  oResResolve.oPrescriptionItemDetails[0] != null &&
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties !=
                    null &&
                  this.objProcessingItemVM != null &&
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null
                ) {
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.RHSSupplyInstrIconTooltip =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.RHSSupplyInstrIconTooltip;
                }
                if (
                  this.objProcessingItemVM != null &&
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails
                    .TechValidateDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
                    .SelectedPrescItem != null &&
                  this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
                    .SelectedPrescItem.PresTechValidatedItemsChild != null &&
                  this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
                    .SelectedPrescItem.PresTechValidatedItemsChild.Count > 0
                ) {
                  let nCount: number =
                    this.objProcessingItemVM.FormViewerDetails
                      .TechValidateDetails.SelectedPrescItem
                      .PresTechValidatedItemsChild.Count;
                  for (let i: number = 0; i < nCount; i++) {
                    if (
                      oResResolve != null &&
                      oResResolve.oPrescriptionItemDetails[0] != null &&
                      oResResolve.oPrescriptionItemDetails[0]
                        .MultiComponentDetails != null &&
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails.Count>
                        0
                    ) {
                      for (
                        let j: number = 0;
                        j <
                        oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails.Count;
                        j++
                      ) {
                        if (
                          this.objProcessingItemVM.FormViewerDetails
                            .TechValidateDetails.SelectedPrescItem
                            .PresTechValidatedItemsChild[i].FormViewerDetails
                            .BasicDetails.IdentifyingOID ==
                          oResResolve.oPrescriptionItemDetails[0]
                            .MultiComponentDetails[j].IdentifyingOID
                        ) {
                          oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                            j
                          ].SupplyComments =
                            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
                              i
                            ].FormViewerDetails.BasicDetails.Supplycomments;
                          oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                            j
                          ].OperationMode =
                            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
                              i
                            ].FormViewerDetails.BasicDetails.TecValOperationMode;
                          if (
                            this.objProcessingItemVM.FormViewerDetails
                              .TechValidateDetails.SelectedPrescItem
                              .PresTechValidatedItemsChild[i].FormViewerDetails
                              .BasicDetails.SelectedsupplyInstruction != null &&
                            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
                              i
                            ].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count >
                              0
                          ) {
                            oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                              j
                            ].SupplyInstruction =
                              new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
                              i
                            ].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.forEach(
                              (instr) => {
                                oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                                  j
                                ].SupplyInstruction.Add(
                                  ObjectHelper.CreateObject(
                                    new IPPMAManagePrescSer.ObjectInfo(),
                                    {
                                      Code: instr.Value,
                                      Name: instr.DisplayText,
                                    }
                                  )
                                );
                              }
                            );
                          } else if (
                            this.objProcessingItemVM.FormViewerDetails
                              .TechValidateDetails.SelectedPrescItem
                              .PresTechValidatedItemsChild[i].FormViewerDetails
                              .BasicDetails.SelectedsupplyInstruction == null ||
                            (this.objProcessingItemVM.FormViewerDetails
                              .TechValidateDetails.SelectedPrescItem
                              .PresTechValidatedItemsChild[i].FormViewerDetails
                              .BasicDetails.SelectedsupplyInstruction != null &&
                              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
                                i
                              ].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count ==
                                0)
                          ) {
                            oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                              j
                            ].SupplyInstruction = null;
                          }
                        }
                      }
                    }
                  }
                }
                if (
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .MedicationClerkingSource != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .MedicationClerkingSource.Count > 0
                ) {
                  oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.MedClerkSource =
                    new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
                  let SelectedMedClerkItems: ObservableCollection<CListItem> =
                    new ObservableCollection<CListItem>(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.Where(
                        (c) => c.IsSelected
                      ).Select((s) => s)
                    );
                  if (
                    SelectedMedClerkItems != null &&
                    SelectedMedClerkItems.Count > 0
                  ) {
                    SelectedMedClerkItems.forEach((ClSelectedMedClerk) => {
                      if (
                        ClSelectedMedClerk.Value == CConstants.OtherFreeText
                      ) {
                        oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.MedClerkSource.Add(
                          ObjectHelper.CreateObject(
                            new IPPMAManagePrescSer.ObjectInfo(),
                            { Code: ClSelectedMedClerk.Value }
                          )
                        );
                        oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.OtherComments =
                          ClSelectedMedClerk.Tag.ToString();
                      } else {
                        oResResolve.oPrescriptionItemDetails[0].AdditionalProperties.MedClerkSource.Add(
                          ObjectHelper.CreateObject(
                            new IPPMAManagePrescSer.ObjectInfo(),
                            { Code: ClSelectedMedClerk.Value }
                          )
                        );
                      }
                    });
                  }
                }
              }
            }
            if (
              oResResolve.oPresItemSourceProcDetail != null &&
              !String.IsNullOrEmpty(
                oResResolve.oPresItemSourceProcDetail.PresItemDetailLzoID
              )
            ) {
              oResResolve.oPrescriptionItemDetails[0].IsAccessContraint = '1';
              oResResolve.oPrescriptionItemDetails[0].PresItemDetailLzoID =
                oResResolve.oPresItemSourceProcDetail.PresItemDetailLzoID;
            }
            let sOrdersetOID: number = 0;
            if (
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .Ordersets != null &&
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .Ordersets.Value
              )
            ) {
              sOrdersetOID = Convert.ToInt64(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .Ordersets.Value
              );
            }
            this.objNewItemVM.FillAllDetails(
              oResResolve.oPrescriptionItemDetails[0],
              ddStartDTTM,
              ddFirstAdmnSchTime,
              DateTime.MinValue,
              String.Empty,
              String.Empty,
              '\0',
              false,
              true,
              sOrdersetOID
            );
            if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionType != null &&
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .InfusionType.Value
              ) &&
              !this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionType.Value.Equals(
                InfusionTypeCode.INTERMITTENT
              )
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails == null
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails =
                  new InfusionVM(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                  );
              }
              if (this.ActivityCode != ActivityTypes.Reorder) {
                if (
                  String.Equals(
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    CConstants.CANCELLED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails != null
                ) {
                  this.objNewItemVM.PrescriptionItemStatus =
                    this.objProcessingItemVM.PrescriptionItemStatus;
                }
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo;
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo;
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID;
                if (
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.SelectedSequenceName != null
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SelectedSequenceName =
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value:
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.SelectedSequenceName.Value,
                      DisplayText:
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.SelectedSequenceName.DisplayText,
                      Tag: this.objProcessingItemVM.FormViewerDetails
                        .BasicDetails.InfusionDetails.SelectedSequenceName.Tag,
                    });
                }
                if (
                  this.objProcessingItemVM != null &&
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionType != null &&
                  !String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .InfusionType.Value
                  ) &&
                  (String.Equals(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .InfusionType.Value,
                    InfusionTypesCode.CONTINUOUS,
                    StringComparison.InvariantCultureIgnoreCase
                  ) ||
                    String.Equals(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .InfusionType.Value,
                      InfusionTypesCode.SINGLEDOSEVOLUME,
                      StringComparison.InvariantCultureIgnoreCase
                    ) ||
                    String.Equals(
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .InfusionType.Value,
                      InfusionTypesCode.FLUID,
                      StringComparison.InvariantCultureIgnoreCase
                    )) &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.ItemSequenceNo > 0
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi;
                }
                if (
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.SelectedSequenceName != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.SelectedPrecedingInfusionItem != null
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SelectedPrecedingInfusionItem =
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value:
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.SelectedPrecedingInfusionItem.Value,
                      DisplayText:
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.SelectedPrecedingInfusionItem
                          .DisplayText,
                      Tag: this.objProcessingItemVM.FormViewerDetails
                        .BasicDetails.InfusionDetails
                        .SelectedPrecedingInfusionItem.Tag,
                    });
                }
                this.objNewItemVM.SequentialActionPerfromCodeAEITS =
                  this.objProcessingItemVM.SequentialActionPerfromCodeAEITS;
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsLastItem =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsLastItem;
              }
              this.objNewItemVM.OperationMode =
                this.objProcessingItemVM.OperationMode;
              if (
                this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
                this.objProcessingItemVM != null &&
                this.objProcessingItemVM.FormViewerDetails != null &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                  null &&
                this.objNewItemVM != null &&
                this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo > 0 &&
                !String.IsNullOrEmpty(this.objNewItemVM.OperationMode)
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.StartDTTM;
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime;
              }
            } else if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .SequenceInfo != null
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo ==
                null
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo =
                  new SequenceDetail();
              }
              if (this.ActivityCode != ActivityTypes.Reorder) {
                if (
                  String.Equals(
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    CConstants.CANCELLED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .SequenceInfo != null
                ) {
                  this.objNewItemVM.PrescriptionItemStatus =
                    this.objProcessingItemVM.PrescriptionItemStatus;
                }
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo;
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo;
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber;
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ParentPrescriptionItemOID =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ParentPrescriptionItemOID;
                if (
                  this.objProcessingItemVM != null &&
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .SequenceInfo != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .SequenceInfo.ItemSequenceNo > 0
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentiallinkvisi =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentiallinkvisi;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentialStartDTTMUpdated =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentialStartDTTMUpdated;
                }
                this.objNewItemVM.SequentialActionPerfromCodeAEITS =
                  this.objProcessingItemVM.SequentialActionPerfromCodeAEITS;
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsLastItem =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsLastItem;
              }
              this.objNewItemVM.OperationMode =
                this.objProcessingItemVM.OperationMode;
              if (
                this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
                this.objProcessingItemVM != null &&
                this.objProcessingItemVM.FormViewerDetails != null &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                  null &&
                this.objNewItemVM != null &&
                this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
                  null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                  .GroupSequenceNo > 0 &&
                !String.IsNullOrEmpty(this.objNewItemVM.OperationMode)
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.StartDTTM;
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime;
              }
            }
            if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
              this.objNewItemVM != null &&
              this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails != null
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InProgSchDTTM =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.InProgSchDTTM;
            }
            if (
              !String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) &&
              !String.Equals(this.objProcessingItemVM.OperationMode, 'M')
            ) {
              if (
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .ReasonforModification != null
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReasonforModification;
              }
              if (
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .ModificationComments != null
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationComments =
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.ModificationComments;
              }
            }
            if (
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .OtherAdminiInstruction != null
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction;
            }
            if (
              PatientContext.PrescriptionType !=
                PrescriptionTypes.ForAdministration &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .OtherAdminiInstruction
              ) &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .AdminInstruction == null
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Other',
                  Value: 'CC_Other',
                });
            }
            this.objNewItemVM.LorenzoID = this.objProcessingItemVM.LorenzoID;
            this.objNewItemVM.ItemSubType =
              this.objProcessingItemVM.ItemSubType;
            this.objNewItemVM.IsConflictClick =
              this.objProcessingItemVM.IsConflictClick;
            if (
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .Ordersets != null &&
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .Ordersets.Value
              )
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Ordersets;
              if (
                oResResolve.oPrescriptionItemDetails[0].BasicProperties
                  .OrderSet != null &&
                !String.IsNullOrEmpty(
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties
                    .OrderSet.Code
                )
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Tag =
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.OrderSet.Code;
              }
              this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.StartDTTM;
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsOrderSetIconVisible =
                Visibility.Visible;
            }
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .GroupSequenceNo > 0
            ) {
              if (
                oResResolve.oPrescriptionItemDetails[0].BasicProperties
                  .TopMostAmendedPrescriptionItemOID > 0
              ) {
                this.objNewItemVM.TopMostAmendedPrescriptionItemOID =
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.TopMostAmendedPrescriptionItemOID;
              }
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsAnyItemAdministeredInSeqGroup =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsAnyItemAdministeredInSeqGroup;
              if (
                (this.objNewItemVM.TopMostAmendedPrescriptionItemOID > 0 &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.ParentPrescriptionItemOID ==
                    this.objNewItemVM.TopMostAmendedPrescriptionItemOID) ||
                (this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails.ItemSequenceNo == 1 &&
                  !String.Equals(
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    CConstants.COMPLETED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    CConstants.DISCONTINUED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    CConstants.CANCELLED,
                    StringComparison.InvariantCultureIgnoreCase
                  ))
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableStartdtSeq =
                  true;
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableStartdtSeq =
                  false;
              }
            }
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
                null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                .GroupSequenceNo > 0
            ) {
              if (
                oResResolve.oPrescriptionItemDetails[0].BasicProperties
                  .TopMostAmendedPrescriptionItemOID > 0
              ) {
                this.objNewItemVM.TopMostAmendedPrescriptionItemOID =
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties.TopMostAmendedPrescriptionItemOID;
              }
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsAnyItemAdministeredInSeqGroup =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsAnyItemAdministeredInSeqGroup;
              if (
                (this.objNewItemVM.TopMostAmendedPrescriptionItemOID > 0 &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .SequenceInfo.ParentPrescriptionItemOID ==
                    this.objNewItemVM.TopMostAmendedPrescriptionItemOID) ||
                (this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                  .ItemSequenceNo == 1 &&
                  !String.Equals(
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    CConstants.COMPLETED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    CConstants.DISCONTINUED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    CConstants.CANCELLED,
                    StringComparison.InvariantCultureIgnoreCase
                  ))
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableStartdate =
                  true;
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableStartTime =
                  true;
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableStartdate =
                  false;
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableStartTime =
                  false;
              }
            }
            if (this.objProcessingItemVM.OperationMode == 'U')
              this.objNewItemVM.IsFormViewerDisable =
                this.objProcessingItemVM.IsFormViewerDisable;
            else if (
              String.Compare(
                this.objProcessingItemVM.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.COMPLETED,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
              this.ActivityCode == ActivityTypes.Reorder
            ) {
              this.objNewItemVM.PrescriptionItemStatus = String.Empty;
              this.objNewItemVM.IsFormViewerDisable = false;
            }
            if (
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails !=
                null &&
              this.ActivityCode == ActivityTypes.Amend
            )
              this.objNewItemVM.FormViewerDetails.TechValidateDetails =
                this.objProcessingItemVM.FormViewerDetails.TechValidateDetails;
            if (this.ActivityCode == ActivityTypes.Amend) {
              if (
                (String.Compare(
                  ContextInfo.MenuCode,
                  CConstants.ClinicallyVerifyMenuCode,
                  StringComparison.InvariantCultureIgnoreCase
                ) != 0 ||
                  String.Compare(
                    ContextInfo.MenuCode,
                    CConstants.ClinicallyVerifyMenu,
                    StringComparison.InvariantCultureIgnoreCase
                  ) != 0) &&
                (String.Compare(
                  ContextInfo.MenuCode,
                  CConstants.AuthoriseMenuCode,
                  StringComparison.InvariantCultureIgnoreCase
                ) != 0 ||
                  String.Compare(
                    ContextInfo.MenuCode,
                    CConstants.AuthoriseMenu,
                    StringComparison.InvariantCultureIgnoreCase
                  ) != 0)
              ) {
                this.objNewItemVM.IsResolveGrid =
                  this.objProcessingItemVM.IsResolveGrid;
                this.objNewItemVM.HIIsAcknowledged =
                  this.objProcessingItemVM.HIIsAcknowledged;
                this.objNewItemVM.HIWarningBehaviourType =
                  this.objProcessingItemVM.HIWarningBehaviourType;
              }
              if (
                String.Compare(
                  ContextInfo.MenuCode,
                  CConstants.ClinicallyVerifyMenuCode,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0 ||
                String.Compare(
                  ContextInfo.MenuCode,
                  CConstants.ClinicallyVerifyMenu,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0
              ) {
                this.objNewItemVM.bFormViewerLoadOnCVUnCheck =
                  this.objProcessingItemVM.bFormViewerLoadOnCVUnCheck;
                this.objNewItemVM.bCVIntialLoad =
                  this.objProcessingItemVM.bCVIntialLoad;
                if (
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails !=
                    null &&
                  this.objNewItemVM.FormViewerDetails != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails != null
                )
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified;
                this.objNewItemVM.PrescriptionItemStatus =
                  this.objProcessingItemVM.PrescriptionItemStatus;
                if (
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.ConflictDetails !=
                    null &&
                  String.Compare(
                    PrescriptionItemStatusCodes.SUBMITTED,
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0
                ) {
                  this.oConflictsVM = new ObservableCollection<ConflictsVM>();
                  let oeachConflictsVM: ConflictsVM = new ConflictsVM();
                  if (
                    this.objNewItemVM.FormViewerDetails.ConflictDetails != null
                  ) {
                    for (
                      let i: number = 0;
                      i <
                      this.objNewItemVM.FormViewerDetails.ConflictDetails.Count;
                      i++
                    ) {
                      //Not Required for LHS. To be Re-Visited.
                      oeachConflictsVM = CommonClo.Clone(this.objNewItemVM.FormViewerDetails.ConflictDetails[i]);
                      this.oConflictsVM.Add(oeachConflictsVM);
                    }
                  }
                }
              } else if (
                String.Compare(
                  ContextInfo.MenuCode,
                  CConstants.AuthoriseMenuCode,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0 ||
                String.Compare(
                  ContextInfo.MenuCode,
                  CConstants.AuthoriseMenu,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0
              ) {
                this.objNewItemVM.PrescriptionItemStatus =
                  this.objProcessingItemVM.PrescriptionItemStatus;
                if (
                  this.objProcessingItemVM.FormViewerDetails != null &&
                  this.objProcessingItemVM.FormViewerDetails.ConflictDetails !=
                    null &&
                  String.Compare(
                    PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
                    this.objProcessingItemVM.PrescriptionItemStatus,
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0
                ) {
                  this.oConflictsVM = new ObservableCollection<ConflictsVM>();
                  let oeachConflictsVM: ConflictsVM = new ConflictsVM();
                  if (
                    this.objNewItemVM.FormViewerDetails.ConflictDetails != null
                  ) {
                    for (
                      let i: number = 0;
                      i <
                      this.objNewItemVM.FormViewerDetails.ConflictDetails.Count;
                      i++
                    ) {
                      //Not Required for LHS. To be Re-Visited.
                      oeachConflictsVM = CommonClo.Clone(this.objNewItemVM.FormViewerDetails.ConflictDetails[i]);
                      this.oConflictsVM.Add(oeachConflictsVM);
                    }
                  }
                }
              }
            }
            if (
              this.ActivityCode == ActivityTypes.Amend ||
              this.ActivityCode == ActivityTypes.Reorder
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.MulticomponentDetails ==
                null
              )
                this.objNewItemVM.FormViewerDetails.MulticomponentDetails =
                  new MulticomponentVM();
              if (
                this.objNewItemVM.FormViewerDetails.dupMulticomponentDetails ==
                null
              )
                this.objNewItemVM.FormViewerDetails.dupMulticomponentDetails =
                  new MulticomponentVM();
              this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo =
                new ObservableCollection<MulticomponentChildVM>();
              this.objNewItemVM.FormViewerDetails.dupMulticomponentDetails.oMCItemBasicInfo =
                new ObservableCollection<MulticomponentChildVM>();
              let Menucode: string = String.Empty;
              let sTip: StringBuilder = new StringBuilder();
              let smulti: string = String.Empty;
              let UniqueID: Random = new Random();
              if (
                this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null
              )
                this.objNewItemVM.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM =
                  new ObservableCollection<CListItem>();
              if (
                oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails !=
                null
              ) {
                let sTooltip: string[] = null;
                let sMCTooltips: string[] = null;
                let MCtooltip: string = String.Empty;
                let nLength: number = 0;
                if (
                  !String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .MCIItemDrugprop
                  )
                ) {
                  sTooltip =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.MCIItemDrugprop.Split(
                      '^'
                    );
                  nLength = sTooltip.length;
                }
                for (
                  let ncount: number = 0;
                  ncount <
                  oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails.Count;
                  ncount++
                ) {
                  let objMulti: MulticomponentChildVM =
                    new MulticomponentChildVM();
                  if (
                    !String.IsNullOrEmpty(
                      oResResolve.oPrescriptionItemDetails[0]
                        .MultiComponentDetails[ncount].VMVPLorenzoID
                    )
                  ) {
                    objMulti.MCIBrandName =
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                        ncount
                      ].ComponentName;
                    objMulti.ComponentName =
                      oResResolve.oPrescriptionItemDetails[0]
                        .MultiComponentDetails[ncount].VMVPMCIdentifyingName +
                      ' - ' +
                      oResResolve.oPrescriptionItemDetails[0]
                        .MultiComponentDetails[ncount].ComponentName;
                    objMulti.VMVPLorenzoID =
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                        ncount
                      ].VMVPLorenzoID;
                  } else {
                    objMulti.ComponentName =
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                        ncount
                      ].ComponentName;
                  }
                  objMulti.PresItemTechOID =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].CompIdentifyingOID;
                  objMulti.IdentifyingType =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].IdentifyingType;
                  objMulti.PrescriptionItemOID =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].PrescriptionItemOID;
                  objMulti.Quantity =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].Quantity;
                  objMulti.QuantityUOM =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].QuantityUOM;
                  objMulti.IdentifyingOID =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].IdentifyingOID;
                  objMulti.isEditable =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].isEditable;
                  objMulti.isQtyEditable =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].isQtyEditable;
                  objMulti.isQtyUOMEditable =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].isQtyUOMEditable;
                  objMulti.IsDisableConflicts =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].IsDisableConflicts;
                  objMulti.IsUpto =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].IsUpto;
                  objMulti.IsNonFormulary =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].IsNonFormulary;
                  objMulti.QuantityUOMOID =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].QuantityUOMOID;
                  objMulti.VMVPLorenzoID =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].VMVPLorenzoID;
                  objMulti.IsMCAuthorize =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].IsMCAuthorize;
                  if (
                    !String.IsNullOrEmpty(
                      oResResolve.oPrescriptionItemDetails[0]
                        .MultiComponentDetails[ncount].MCDoseUOMDeActivated
                    )
                  ) {
                    let tempDeactQuantityUOMColl: CListItem = new CListItem();
                    tempDeactQuantityUOMColl =
                      MedicationCommonBB.ReturnDeactivatedList(
                        oResResolve.oPrescriptionItemDetails[0]
                          .MultiComponentDetails[ncount].MCDoseUOMDeActivated
                      );
                    this.objNewItemVM.FormViewerDetails.BasicDetails.MCDeactivatedDoseUOM.Add(
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: tempDeactQuantityUOMColl.DisplayText,
                        Value: tempDeactQuantityUOMColl.Value,
                        Tag: objMulti.ComponentName,
                      })
                    );
                  }
                  objMulti.PrescribableItemListOID =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].PrescribableItemListOID;
                  objMulti.LorenzoID =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].LorenzoID;
                  objMulti.DisplayOrder =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].DisplayOrder;
                  objMulti.UniqueMCRowID = UniqueID.Next();
                  objMulti.QuantityUomcol =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].QuantityUomcol;
                  objMulti.MCUOMValue = new CListItem();
                  let sUomlist: StringBuilder = new StringBuilder();
                  let sProblemName: StringBuilder = new StringBuilder();
                  objMulti.MCUOMCombo = new ObservableCollection<CListItem>();
                  if (
                    objMulti.QuantityUomcol != null &&
                    !String.IsNullOrEmpty(objMulti.QuantityUomcol)
                  ) {
                    let sQUOMlist: string[] =
                      objMulti.QuantityUomcol.Split('|');
                    if (sQUOMlist != null && sQUOMlist.length > 0) {
                      for (let i: number = 0; i <= sQUOMlist.length - 1; i++) {
                        let stmp: string[] = sQUOMlist[i].Split('~');
                        objMulti.MCUOMCombo.Add(
                          ObjectHelper.CreateObject(new CListItem(), {
                            DisplayText: stmp[1],
                            Value: stmp[0],
                          })
                        );
                      }
                    }
                  }
                  if (objMulti.QuantityUOM != null) {
                    objMulti.MCUOMValue = ObjectHelper.CreateObject(
                      new CListItem(),
                      {
                        DisplayText: objMulti.QuantityUOM,
                        Value: objMulti.QuantityUOMOID.ToString(),
                      }
                    );
                    if (
                      objMulti.MCUOMCombo.Where(
                        (o) =>
                          o != null &&
                          String.Compare(o.Value, objMulti.MCUOMValue.Value) ==
                            0
                      ).Count() == 0
                    ) {
                      objMulti.MCUOMCombo.Add(
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: objMulti.QuantityUOM,
                          Value: objMulti.QuantityUOMOID.ToString(),
                        })
                      );
                    }
                  }
                  objMulti.MCUomName = objMulti.MCUOMValue.DisplayText;
                  objMulti.MCUOMCombo.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: 'More',
                      Value: 'CC_More',
                    })
                  );
                  objMulti.Nonformularyreason =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].Nonformularyreason;
                  objMulti.OtherNonformularyreason =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].OtherNonformularyreason;
                  objMulti.OID =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].OID;
                  objMulti.IsWardStock =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].IsWardStock;
                  objMulti.IsSupplyRequested =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].IsSupplyRequested;
                  objMulti.RequisitionCACode =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].RequisitionCACode;
                  objMulti.OperationMode =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].OperationMode;
                  if (
                    !String.Equals(
                      this.ActivityCode.ToString(),
                      CAActivity.CA_REORDER,
                      StringComparison.InvariantCultureIgnoreCase
                    ) ||
                    (String.Equals(
                      this.ActivityCode.ToString(),
                      CAActivity.CA_REORDER,
                      StringComparison.InvariantCultureIgnoreCase
                    ) &&
                      (String.Equals(
                        PatientContext.PrescriptionType,
                        PrescriptionTypes.Clerking,
                        StringComparison.OrdinalIgnoreCase
                      ) ||
                        String.Equals(
                          PatientContext.PrescriptionType,
                          CConstants.ClerkingPrescribeMenuCode,
                          StringComparison.OrdinalIgnoreCase
                        ) ||
                        String.Equals(
                          PatientContext.PrescriptionType,
                          PrescriptionTypes.ForAdministration,
                          StringComparison.OrdinalIgnoreCase
                        ) ||
                        String.Equals(
                          PatientContext.PrescriptionType,
                          CConstants.ForadminPrescribeMenuCode,
                          StringComparison.OrdinalIgnoreCase
                        )))
                  ) {
                    if (
                      oResResolve.oPrescriptionItemDetails[0]
                        .MultiComponentDetails[ncount].SupplyInstruction !=
                        null &&
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                        ncount
                      ].SupplyInstruction.Count > 0
                    ) {
                      objMulti.SupplyInstruction =
                        oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                          ncount
                        ].SupplyInstruction;
                    }
                    objMulti.SupplyComments =
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                        ncount
                      ].SupplyComments;
                    objMulti.NextSupplyDTTM =
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                        ncount
                      ].NextSupplyDTTM;
                  }
                  if (
                    oResResolve.oPrescriptionItemDetails[0]
                      .MultiComponentDetails[ncount].DispensingInstruction !=
                      null &&
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].DispensingInstruction.Count() > 0
                  ) {
                    objMulti.DispensingInstruction =
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                        ncount
                      ].DispensingInstruction;
                  }
                  if (
                    !String.IsNullOrEmpty(
                      oResResolve.oPrescriptionItemDetails[0]
                        .MultiComponentDetails[ncount]
                        .OtherDispensingInstruction
                    )
                  )
                    objMulti.OtherDispensingInstruction =
                      oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                        ncount
                      ].OtherDispensingInstruction;
                  if (
                    String.IsNullOrEmpty(
                      this.objProcessingItemVM.MCIItemDisplay
                    )
                  ) {
                    if (objMulti.IsUpto == true) {
                      smulti =
                        objMulti.ComponentName +
                        ' upto ' +
                        objMulti.Quantity +
                        ' ' +
                        objMulti.QuantityUOM;
                    } else {
                      smulti =
                        objMulti.ComponentName +
                        '  ' +
                        objMulti.Quantity +
                        ' ' +
                        objMulti.QuantityUOM;
                    }
                    sTip.Append(smulti);
                    sTip.Append(Environment.NewLine);
                  }
                  objMulti.ConflictsExist =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].ConflictsExist;
                  if (objMulti.ConflictsExist == 'Y') {
                    objMulti.SealImage = '2';
                  }
                  objMulti.Compoentsdrugprop =
                    oResResolve.oPrescriptionItemDetails[0].MultiComponentDetails[
                      ncount
                    ].DrugProperties;
                  objMulti.ActionCode = this.ActivityCode.ToString();
                  this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Add(
                    objMulti
                  );
                }
                this.objNewItemVM.IsConflictDisabled =
                  this.objNewItemVM.FormViewerDetails.MulticomponentDetails
                    .oMCItemBasicInfo.Count > 0 &&
                  this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.All(
                    (x) => x.IsDisableConflicts
                  );
              }
              if (
                String.IsNullOrEmpty(this.objNewItemVM.MCIItemDisplay) &&
                sTip != null
              ) {
                this.objNewItemVM.MCIItemDisplay =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.mCIItemDisplay =
                    sTip.ToString();
              }
              this.objNewItemVM.GetMcchilditemDisplay();
            }
            if (this.ActivityCode == ActivityTypes.Amend) {
              if (
                this.objProcessingItemVM != null &&
                this.objProcessingItemVM.formViewerDetails != null &&
                this.objProcessingItemVM.formViewerDetails.BasicDetails !=
                  null &&
                this.objProcessingItemVM.formViewerDetails.BasicDetails
                  .DoseType != null &&
                (String.Equals(
                  this.objProcessingItemVM.formViewerDetails.BasicDetails
                    .DoseType.Value,
                  DoseTypeCode.TITRATED,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                  String.Equals(
                    this.objProcessingItemVM.formViewerDetails.BasicDetails
                      .DoseType.Value,
                    CConstants.sTitratedDisplaytext,
                    StringComparison.InvariantCultureIgnoreCase
                  ))
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .TitratedDoseDetails == null
                )
                  this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails =
                    new TitratedDoseVM();
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .DupTitratedDoseVM == null
                )
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DupTitratedDoseVM =
                    new TitratedDoseVM();
                this.objNewItemVM.FormViewerDetails.BasicDetails.DupTitratedDoseVM.GrdTitrated =
                  new ObservableCollection<TitratedScheduleDetails>();
                if (
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties !=
                    null &&
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties
                    .FrequencyDetails != null &&
                  oResResolve.oPrescriptionItemDetails[0].BasicProperties
                    .FrequencyDetails.Frequency != null
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.Frequencytext =
                    oResResolve.oPrescriptionItemDetails[0].BasicProperties.FrequencyDetails.Frequency.Name;
                }
                if (
                  oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo !=
                  null
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseInstruction =
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value:
                        oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo
                          .TitratedAdminInstruction,
                    });
                  this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseAdtnlComments =
                    oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitratedComments;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated =
                    new ObservableCollection<TitratedScheduleDetails>();
                  let bIsNotHavingAdminTime: boolean =
                    oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo
                      .IsHavingAdminTime == CConstants.sIsHavingtimeZero;
                  if (
                    oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo
                      .TitrateScheduledinfo != null &&
                    oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Count >
                      0
                  ) {
                    let oDistinctDates =
                      oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.OrderBy(
                        (x) => x.ScheduleDTTM.Date
                      )
                        .GroupBy((date) =>
                          date.ScheduleDTTM.ToShortDateString()
                        )
                        .Select((g) => g.First().ScheduleDTTM.Date)
                        .ToList();
                    let oDistinctTimes =
                      oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.OrderBy(
                        (x) => x.ScheduleDTTM.ToShortTimeString()
                      )
                        .GroupBy((date) =>
                          date.ScheduleDTTM.ToShortTimeString()
                        )
                        .Select((g) => g.First().ScheduleDTTM.TimeOfDay)
                        .ToList();
                    this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated =
                      new ObservableCollection<TitratedScheduleDetails>();
                    let iRecord: number = 0;
                    oDistinctTimes.forEach((record) => {
                      let oT: TitratedScheduleDetails =
                        new TitratedScheduleDetails();
                      let iDate: number = 0;
                      oT.ScheduledDate = new Array(oDistinctDates.Count);
                      oT.ScheduleDoseValue = new Array(oDistinctDates.Count);
                      oDistinctDates.forEach((daterecord) => {
                        oT.ScheduledDate[iDate] = daterecord;
                        oT.ScheduleDTTM = daterecord;
                        oT.ScheduleTime = record.ToString('HH:mm');
                        if (bIsNotHavingAdminTime)
                          oT.ScheduleTime = CConstants.sDose + (iRecord + 1);
                        let i1 =
                          oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Where(
                            (x) =>
                            DateTime.Equals(x.ScheduleDTTM.Date , daterecord) &&
                            DateTime.Equals(x.ScheduleDTTM.TimeOfDay , record)
                          )
                            .Select((i) => {
                              return {
                                TitratedDose: i.TitratedDose,
                                TitratedDoseUOM: i.TitratedDoseUOM,
                              };
                            })
                            .FirstOrDefault();
                        if (i1 != null)
                          oT.ScheduleDoseValue[iDate] = i1.TitratedDose;
                        oT.ScheduleDoseUOM =
                          ' ' +
                          oResResolve.oPrescriptionItemDetails[0]
                            .TitratedDoseinfo.ScheduleDoseUOM;
                        iDate++;
                      });
                      this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.GrdTitrated.Add(
                        oT
                      );
                      iRecord++;
                    });
                    if (
                      String.Equals(
                        PatientContext.PrescriptionType,
                        PrescriptionTypes.Clerking,
                        StringComparison.CurrentCultureIgnoreCase
                      )
                    ) {
                      this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.Stardate =
                        oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Select(
                          (s) => s.ScheduleDTTM
                        ).LastOrDefault();
                    } else {
                      this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.Stardate =
                        oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Select(
                          (s) => s.ScheduleDTTM
                        ).FirstOrDefault();
                    }
                  }
                }
              }
            }
            if (
              this.ActivityCode == ActivityTypes.Reorder &&
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.formViewerDetails != null &&
              this.objProcessingItemVM.formViewerDetails.BasicDetails != null &&
              this.objProcessingItemVM.formViewerDetails.BasicDetails
                .DoseType != null &&
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.formViewerDetails.BasicDetails.DoseType
                  .Value
              ) &&
              (String.Equals(
                this.objProcessingItemVM.formViewerDetails.BasicDetails.DoseType
                  .Value,
                DoseTypeCode.TITRATED,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
                String.Equals(
                  this.objProcessingItemVM.formViewerDetails.BasicDetails
                    .DoseType.Value,
                  CConstants.sTitratedDisplaytext,
                  StringComparison.InvariantCultureIgnoreCase
                )) &&
              oResResolve != null &&
              oResResolve.oPrescriptionItemDetails != null &&
              oResResolve.oPrescriptionItemDetails.Count > 0 &&
              oResResolve.oPrescriptionItemDetails[0] != null &&
              oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo != null
            ) {
              if (
                !String.IsNullOrEmpty(
                  oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo
                    .TitratedAdminInstruction
                )
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsCheckPerviousTitratedDoseDetails =
                  true;
              } else if (
                !String.IsNullOrEmpty(
                  oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo
                    .TitratedComments
                )
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsCheckPerviousTitratedDoseDetails =
                  true;
              } else if (
                oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo
                  .TitrateScheduledinfo != null &&
                oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Count >
                  0
              ) {
                let oTitratedDose =
                  oResResolve.oPrescriptionItemDetails[0].TitratedDoseinfo.TitrateScheduledinfo.Where(
                    (c) =>
                      !String.IsNullOrEmpty(c.TitratedDose) &&
                      !String.Equals(c.TitratedDose, CConstants.TBD)
                  )
                    .Select((s) => s.TitratedDose)
                    .FirstOrDefault();
                if (!String.IsNullOrEmpty(oTitratedDose)) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsCheckPerviousTitratedDoseDetails =
                    true;
                }
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsCheckPerviousTitratedDoseDetails =
                  false;
              }
            }
            if (
              this.ActivityCode == ActivityTypes.Amend ||
              (this.ActivityCode == ActivityTypes.Reorder &&
                oResResolve.oPresItemSourceProcDetail != null &&
                !String.IsNullOrEmpty(
                  oResResolve.oPresItemSourceProcDetail.IndicationOverrideReson
                ))
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IndicationOverrideReason =
                oResResolve.oPresItemSourceProcDetail.IndicationOverrideReson;
            }
            if (
              (this.ActivityCode == ActivityTypes.Amend ||
                (this.objNewItemVM.IsDoseCalcVisible == Visibility.Visible &&
                  this.ActivityCode == ActivityTypes.Reorder &&
                  !this.objProcessingItemVM.bIsReprescribe)) &&
              oResResolve.oPrescriptionItemDetails != null &&
              oResResolve.oPrescriptionItemDetails[0] != null &&
              oResResolve.oPrescriptionItemDetails[0].DoseCalculation != null
            ) {
              if (
                this.objProcessingItemVM.DoseCalculationDetails != null &&
                  DateTime.NotEquals(this.objProcessingItemVM.DoseCalculationDetails
                    .CalculatedDTTM, DateTime.MinValue)
              ) {
                this.objNewItemVM.DoseCalculationDetails =
                  this.objProcessingItemVM.DoseCalculationDetails;
                this.objNewItemVM.IsDoseCalcPerformed = true;
              } else if (
                DateTime.NotEquals(oResResolve.oPrescriptionItemDetails[0].DoseCalculation
                  .CalculatedDTTM, DateTime.MinValue)
              ) {
                this.objNewItemVM.DoseCalculationDetails =
                  this.FillDoseCalcDetail(
                    oResResolve.oPrescriptionItemDetails[0].DoseCalculation
                  );
                this.objNewItemVM.IsDoseCalcPerformed = true;
              }
            }
            if (
              oResResolve.oPresItemSourceProcDetail != null &&
              !String.IsNullOrEmpty(
                oResResolve.oPresItemSourceProcDetail.IsAccessContraint
              ) &&
              !String.IsNullOrEmpty(
                oResResolve.oPresItemSourceProcDetail.SourceDataProviderType
              ) &&
              String.Equals(
                oResResolve.oPresItemSourceProcDetail.IsAccessContraint,
                '1',
                StringComparison.CurrentCultureIgnoreCase
              ) &&
              String.Equals(
                oResResolve.oPresItemSourceProcDetail.SourceDataProviderType,
                CConstants.SourceDataProvider,
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              let oProcDetail: PrescriptionItemVM = new PrescriptionItemVM(
                this
              );
              oResResolve.oPresItemSourceProcDetail.IsAccessContraint = '1';
              oProcDetail.GetPresItemDetails(
                oResResolve.oPresItemSourceProcDetail
              );
              oProcDetail.ActionCode = ActivityTypes.Amend;
              oProcDetail.FillPresItemProcDetail();
              this.objNewItemVM.FormViewerDetails.BasicDetails.AccessContraintControls =
                new List<string>(
                  oProcDetail.FormViewerDetails.BasicDetails.AccessContraintControls
                );
              oProcDetail = null;
            }
            this.objNewItemVM.FillPresItemDetailsEvent = (s, e) => {
              this.objFillPresItemDetailsDelegate_completed();
            };
          }
          if (
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.OrdersetSequence !=
              null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible =
              Visibility.Collapsed;
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
              Visibility.Collapsed;
          }
        } else {
          Busyindicator.SetStatusIdle('FormViewer');
          Busyindicator.SetStatusIdle('FormViewerClick');
          Busyindicator.SetStatusIdle('Reorder');
          Busyindicator.SetStatusIdle('FormViewer');
          Busyindicator.SetStatusIdle('Orderset');
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private FillDoseCalcDetail(
    oResDoseCalcDet: IPPMAManagePrescSer.DoseCalculatorDetails
  ): DoseCalculation {
    let objDoseCalc: DoseCalculation = null;
    if (oResDoseCalcDet != null) {
      objDoseCalc = new DoseCalculation();
      objDoseCalc.Height = oResDoseCalcDet.PatientHeight;
      objDoseCalc.HeightUOM = oResDoseCalcDet.HeightUOM;
      objDoseCalc.Weight = oResDoseCalcDet.PatientWeight;
      objDoseCalc.WeightUOM = oResDoseCalcDet.WeightUOM;
      if (DateTime.NotEquals(oResDoseCalcDet.RecordedHightDTTM, DateTime.MinValue)) {
        objDoseCalc.RecordedHeightDTTM = oResDoseCalcDet.RecordedHightDTTM;
      }
      if (DateTime.NotEquals(oResDoseCalcDet.RecordedWeightDTTM, DateTime.MinValue)) {
        objDoseCalc.RecordedWeightDTTM = oResDoseCalcDet.RecordedWeightDTTM;
      }
      objDoseCalc.CalculatedDTTM = oResDoseCalcDet.CalculatedDTTM;
      objDoseCalc.IsWeightEstimated = oResDoseCalcDet.IsWeightEstimated;
      objDoseCalc.IsHeightEstimated = oResDoseCalcDet.IsHeightEstimated;
      if (oResDoseCalcDet.IsDailyDose.Equals('1')) {
        objDoseCalc.CalculationFor = CConstants.DailyDose;
        objDoseCalc.TotalDailyDose = oResDoseCalcDet.TotalDailyDose;
        objDoseCalc.CalculatedPerDose = oResDoseCalcDet.CalculatedDose;
      } else {
        objDoseCalc.CalculationFor = CConstants.PerDose;
        objDoseCalc.CalculatedPerDose = oResDoseCalcDet.TotalDailyDose;
      }
      objDoseCalc.RequestDose = Convert.ToString(oResDoseCalcDet.RequestDose);
      if (oResDoseCalcDet.RequestDoseUOMOID > 0)
        objDoseCalc.ReqDoseUOMOID = oResDoseCalcDet.RequestDoseUOMOID;
      if (!String.IsNullOrEmpty(oResDoseCalcDet.RequestDoseSecondUOM))
        objDoseCalc.RequestDoseSecondUOM = oResDoseCalcDet.RequestDoseSecondUOM;
      if (!String.IsNullOrEmpty(oResDoseCalcDet.RequestDoseThirdUOMLzoID))
        objDoseCalc.RequestDoseThirdUOMLzoID =
          oResDoseCalcDet.RequestDoseThirdUOMLzoID;
      objDoseCalc.DoseCalcBasedOn = oResDoseCalcDet.DoseCalcBasedOn;
      if (objDoseCalc.DoseCalcBasedOn.Equals(CommConstants.BSACode)) {
        if (!String.IsNullOrEmpty(oResDoseCalcDet.BSAFormula))
          objDoseCalc.BSAFormula = oResDoseCalcDet.BSAFormula;
        objDoseCalc.BSA = oResDoseCalcDet.BSAValue;
      } else {
        objDoseCalc.WeightOption = oResDoseCalcDet.WeightOption;
        objDoseCalc.BSA = String.Empty;
        objDoseCalc.BSAFormula = String.Empty;
        if (!String.IsNullOrEmpty(oResDoseCalcDet.IBWWeight)) {
          objDoseCalc.IBWWeight = Convert.ToDouble(oResDoseCalcDet.IBWWeight);
        }
        if (!String.IsNullOrEmpty(oResDoseCalcDet.ABWWeight)) {
          objDoseCalc.ABWWeight = Convert.ToDouble(oResDoseCalcDet.ABWWeight);
        }
      }
      objDoseCalc.OrderedAmount = oResDoseCalcDet.OrderedPerDose;
      if (!String.IsNullOrEmpty(oResDoseCalcDet.OverrideReason))
        objDoseCalc.OverrideReason = oResDoseCalcDet.OverrideReason;
      if (oResDoseCalcDet.FrequencyOID > 0) {
        objDoseCalc.FrequencyOID = oResDoseCalcDet.FrequencyOID;
      }
    }
    return objDoseCalc;
  }
  objFillPresItemDetailsDelegate_completed(): void {
    this.cFollowUpOrStat = '\0';
    this.IsrecordadmindoneforSTAT = false;
       // Once CACode woking removed below code
       if (this.AppContext.MenuCode === 'MN_MED_VERIFY_SL_P2') {
        ContextInfo.MenuCode = 'MED_CA_CLN_VRFY_SL_P2';
      }
    if (
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails != null
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys =
        new ObservableCollection<CListItem>();
      let stattypes: List<string> = new List<string>();
      let DupStationaryType: List<string> = new List<string>();
      if (this.StationaryTypes != null && this.StationaryTypes.Count > 0) {
        let nCnt: number = this.StationaryTypes.Count;
        for (let i: number = 0; i < nCnt; i++) {
          if (
            !String.IsNullOrEmpty(this.StationaryTypes[i].DisplayText) &&
            !String.IsNullOrEmpty(this.StationaryTypes[i].Value) &&
            this.StationaryTypes[i].Tag != null
          ) {
            if (stattypes.Contains(this.StationaryTypes[i].DisplayText)) {
              DupStationaryType.Add(this.StationaryTypes[i].DisplayText);
            } else {
              stattypes.Add(this.StationaryTypes[i].DisplayText);
            }
          }
        }
        for (let i: number = 0; i < nCnt; i++) {
          if (
            this.StationaryTypes[i].Tag != null &&
            !String.IsNullOrEmpty(this.StationaryTypes[i].Tag.ToString())
          ) {
            let chkOrg: string = this.StationaryTypes[i].Tag.ToString();
            let arrTag: string[] = Regex.Split(chkOrg, '~~');
            if (
              DupStationaryType.Contains(this.StationaryTypes[i].DisplayText)
            ) {
              if (
                arrTag.length > 1 &&
                AppContextInfo.OrganisationOID != arrTag[1].ToString()
              )
                this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.StationaryTypes[i].DisplayText +
                      '(' +
                      arrTag[0].ToString() +
                      ')',
                    Value: this.StationaryTypes[i].Value,
                    Tag: this.StationaryTypes[i].Tag,
                  })
                );
              else
                this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: this.StationaryTypes[i].DisplayText,
                    Value: this.StationaryTypes[i].Value,
                    Tag: this.StationaryTypes[i].Tag,
                  })
                );
            } else
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: this.StationaryTypes[i].DisplayText,
                  Value: this.StationaryTypes[i].Value,
                  Tag: this.StationaryTypes[i].Tag,
                })
              );
          }
        }
      }
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType == null ||
      this.ActivityCode == ActivityTypes.Reorder
    ) {
      if (
        this.DefaultStationaryType != null &&
        !String.IsNullOrEmpty(this.DefaultStationaryType.DisplayText) &&
        !String.IsNullOrEmpty(this.DefaultStationaryType.Value) &&
        this.DefaultStationaryType.Tag != null
      )
        this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: this.DefaultStationaryType.DisplayText,
            Value: this.DefaultStationaryType.Value,
            Tag: this.DefaultStationaryType.Tag,
          });
      else if (this.DefaultStationaryType == null)
        this.objNewItemVM.formViewerDetails.BasicDetails.StationaryType = null;
      else if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
          .Stationarys != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
          .Stationarys.Count > 0 &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
          .Stationarys.Count == 1
      ) {
        let DefStationary: CListItem =
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys.FirstOrDefault();
        if (
          DefStationary != null &&
          !String.IsNullOrEmpty(DefStationary.DisplayText) &&
          !String.IsNullOrEmpty(DefStationary.Value) &&
          DefStationary.Tag != null
        )
          this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: DefStationary.DisplayText,
              Value: DefStationary.Value,
              Tag: DefStationary.Tag,
            });
      }
    } else {
      this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType =
        this.objNewItemVM.FormViewerDetails.BasicDetails.GetComboValue(
          this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType,
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
            .Stationarys
        );
    }
    this.objNewItemVM.CheckForTechValidateMandatory();
    if (
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.FormViewerDetails != null &&
      this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
      !String.IsNullOrEmpty(
        this.objProcessingItemVM.FormViewerDetails.BasicDetails
          .VerificationComments
      )
    )
      this.objNewItemVM.FormViewerDetails.BasicDetails.VerificationComments =
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.VerificationComments;
    if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsVisibleClinicallyverify =
        Visibility.Visible;
      if (
        (this.ActivityCode == ActivityTypes.Prescribe &&
          this.objProcessingItemVM == null) ||
        this.ActivityCode == ActivityTypes.Reorder ||
        (this.objProcessingItemVM != null &&
          (this.objProcessingItemVM.OperationMode == 'N' ||
            (this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
              String.Compare(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReplaceDrugActiveStatus.ToString(),
                '0',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
              String.Compare(
                this.objProcessingItemVM.DrugVersionMatch.ToString(),
                '1',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0)))
      ) {
        if (
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          this.objNewItemVM.IsClinicallyVerifyEnable =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
              true;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
            false;
        } else
          this.objNewItemVM.IsClinicallyVerifyEnable =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
              false;
      } else {
        if (this.objProcessingItemVM != null) {
          let isSubmittedForVerify: boolean =
            String.Equals(
              this.objProcessingItemVM.PrescriptionItemStatus,
              CConstants.SUBMITTED,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              this.objProcessingItemVM.PrescriptionItemStatus,
              CConstants.CLINICALLYVERIFIED,
              StringComparison.CurrentCultureIgnoreCase
            );
          if (!isSubmittedForVerify) {
          }
          if (
            this.objProcessingItemVM.OperationMode == 'UA' &&
            this.ActivityCode == ActivityTypes.Amend &&
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
            !this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .IsenableRSNFORMOD
          )
            this.objNewItemVM.IsClinicallyVerifyEnable =
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
                this.objProcessingItemVM.IsClinicallyVerifyEnable;
          else
            this.objNewItemVM.IsClinicallyVerifyEnable =
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
                isSubmittedForVerify;
        }
      }
      if (
        (this.ActivityCode == ActivityTypes.Prescribe &&
          this.objProcessingItemVM == null) ||
        this.ActivityCode == ActivityTypes.Reorder ||
        (this.objProcessingItemVM != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .IsClinicallyVerified == true)
      ) {
        if (
          (this.objNewItemVM != null &&
            ((this.objNewItemVM.OperationMode == 'N' &&
              this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails != null) ||
              this.ActivityCode == ActivityTypes.Reorder)) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (this.ActivityCode != ActivityTypes.Amend) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
              false;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
              true;
            this.objNewItemVM.IsClinicallyVerifyEnable = true;
            this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = false;
          }
        } else {
          if (
            !String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
              true;
            this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = false;
          }
        }
      } else {
        if (
          this.objNewItemVM.OperationMode == 'N' ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (this.ActivityCode != ActivityTypes.Amend) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
              false;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
              true;
            this.objNewItemVM.IsClinicallyVerifyEnable = true;
            this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = false;
          }
          if (
            !String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
              true;
            this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = false;
          }
        } else {
          if (
            !String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode
            )
          ) {
            if (
              String.Compare(
                this.objNewItemVM.DrugFrequencyUOMCode,
                'CC_IPONCENLY',
                StringComparison.InvariantCultureIgnoreCase
              ) == 0 &&
              String.Compare(
                this.objNewItemVM.PrescriptionItemStatus,
                CConstants.COMPLETED,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0 &&
              String.Compare(
                this.objNewItemVM.PrescriptionItemStatusCode,
                CConstants.CLINICALLYVERIFIED,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
                true;
              this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = false;
            } else {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
                false;
              this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = true;
            }
          }
        }
      }
    } else if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsVisibleClinicallyverify =
        Visibility.Visible;
      if (
        String.Compare(
          this.objProcessingItemVM.PrescriptionItemStatus,
          CConstants.AWAITINGAUTHORISE,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        if (this.objProcessingItemVM.OperationMode == 'N')
          this.objNewItemVM.IsClinicallyVerifyEnable =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
              false;
        else {
          if (
            !String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (
              this.objProcessingItemVM.OperationMode == 'UA' &&
              this.ActivityCode == ActivityTypes.Amend &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
              !this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .IsenableRSNFORMOD
            )
              this.objNewItemVM.IsClinicallyVerifyEnable =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
                  this.objProcessingItemVM.IsClinicallyVerifyEnable;
            else if (
              this.objProcessingItemVM.OperationMode == 'UA' &&
              this.ActivityCode == ActivityTypes.Amend
            )
              this.objNewItemVM.IsClinicallyVerifyEnable =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
                  this.objProcessingItemVM.IsClinicallyVerifyEnable;
            else
              this.objNewItemVM.IsClinicallyVerifyEnable =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
                  true;
          }
        }
      } else {
        if (
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode
          )
        )
          this.objNewItemVM.IsClinicallyVerifyEnable =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
              false;
      }
      if (
        !String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode
        )
      ) {
        if (
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .IsClinicallyVerified == true
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
            true;
          this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = false;
        } else {
          if (this.objNewItemVM.OperationMode == 'N') {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
              true;
            this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = false;
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
              false;
            this.objNewItemVM.IsClinicallyVerifyCommentsMandatory = false;
          }
        }
      }
    } else {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsVisibleClinicallyverify =
        Visibility.Collapsed;
    }
    if (
      this.ActivityCode == ActivityTypes.Prescribe ||
      this.ActivityCode == ActivityTypes.Reorder
    ) {
      if (MedicationCommonProfileData.PrescribeConfig == null) {
        this.PrescribingConfigPre = new ProfileFactoryType();
        this.PrescribingConfigPre.OnProfileLoaded = (s, e) => {
          this.PrescribingConfig_OnProfileLoaded(s, e);
        };
        this.PrescribingConfigPre.GetProfile<PrescribingConfigData>(
          'VW_MEDICONFIG',
          'PRESCONFIG'
        );
      } else {
        this.SetDefaultDate();
      }
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        if (
          this.GpConnectMedicationItem != null &&
          !String.IsNullOrEmpty(this.GpConnectMedicationItem.GPConnectID) &&
          this.MedicationClerkingSource != null &&
          this.MedicationClerkingSource.Count > 0
        ) {
          let oMedClerkSource: CListItem;
          let nMedClerkSource: number = this.MedicationClerkingSource.Count;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .MedicationClerkingSource == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource =
              new ObservableCollection<CListItem>();
          }
          for (let i: number = 0; i < nMedClerkSource; i++) {
            oMedClerkSource = new CListItem();
            //Not Required for LHS. To be Re-Visited.
            oMedClerkSource = CommonClo.Clone(this.MedicationClerkingSource[i]);
            if (
              !this.MedicationClerkingSource[i].IsSelected &&
              String.Equals(
                this.MedicationClerkingSource[i].Value,
                'CC_MEDGPRECORDSELEC',
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              oMedClerkSource.IsSelected = true;
            }
            this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.Add(
              oMedClerkSource
            );
          }
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource =
            this.MedicationClerkingSource;
        }
      }
      this.objNewItemVM.PrescriberDetails = ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.ObjectInfo(),
        {
          OID: AppContextInfo.UserOID,
          Name: AppContextInfo.UserName,
          Code: AppContextInfo.RoleProfileName,
        }
      );
      if (this.ActivityCode == ActivityTypes.Reorder) {
        let sEncStatus: string = String.Empty;
        if (this.EncounterGridObj != null)
          sEncStatus = this.EncounterGridObj.EncounterStatus;
        else
          sEncStatus = CommonBB.GetText(
            this.WizardContext['EncStatus'],
            MedicationCommonConceptCodeData.ConceptCodes
          );
        if (
          String.Compare(
            sEncStatus,
            'Closed',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason =
            null;
        }
      }
    } else {
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        if (this.MedicationClerkingSource != null) {
          let ItemClerkingSrc: ObservableCollection<CListItem> =
            new ObservableCollection<CListItem>();
          let Comments: Object = null;
          let bHasClkSrc: boolean =
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .MedicationClerkingSource != null;
          this.MedicationClerkingSource.forEach((ClerkingSrc) => {
            let bIsSelected: boolean = false;
            if (bHasClkSrc && !bIsSelected) {
              let seletedMedClrkSrc =
                this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.Where(
                  (clerkSrc) => clerkSrc.Value == ClerkingSrc.Value
                ).Select((clerkSrc) => clerkSrc);
              bIsSelected =
                seletedMedClrkSrc != null && seletedMedClrkSrc.Count() > 0;
            }
            if (
              bHasClkSrc &&
              ClerkingSrc != null &&
              !String.IsNullOrEmpty(ClerkingSrc.Value) &&
              String.Equals(
                ClerkingSrc.Value,
                CConstants.OtherFreeText,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              let Check =
                this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.Where(
                  (x) => x.Value == CConstants.OtherFreeText
                ).FirstOrDefault();
              if (Check != null && Check.Tag != null) {
                Comments = Check.Tag;
              }
            }
            if (ClerkingSrc.Value == CConstants.OtherFreeText) {
              if (Comments != null) {
                ItemClerkingSrc.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    Tag: Comments,
                    Value: ClerkingSrc.Value,
                    DisplayText: ClerkingSrc.DisplayText,
                    IsSelected: bIsSelected,
                  })
                );
              } else {
                ItemClerkingSrc.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    Value: ClerkingSrc.Value,
                    DisplayText: ClerkingSrc.DisplayText,
                    IsSelected: bIsSelected,
                  })
                );
              }
            } else {
              ItemClerkingSrc.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: ClerkingSrc.Value,
                  DisplayText: ClerkingSrc.DisplayText,
                  IsSelected: bIsSelected,
                })
              );
            }
          });
          if (this.objNewItemVM.FormViewerDetails.BasicDetails != null) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource =
              ItemClerkingSrc;
          }
        }
      }
    }
    this.objNewItemVM.FormViewerDetails.BasicDetails.DischargeLeaveDate =
      this.DischargeLeaveDTTM;
    if (this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType == null) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType =
        ObjectHelper.CreateObject(new CListItem(), {
          Value: DoseTypeCode.NORMAL,
          DisplayText: 'Normal',
        });
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      if (
        String.Compare(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DateCommenced,
          'CC_Month'
        ) == 0 ||
        String.Compare(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DateCommenced,
          'CC_Year'
        ) == 0
      ) {
       // this.objNewItemVM.FormViewerDetails.BasicDetails.CompleteStartDTTM =
         // DateTime.MinValue;
        this.objNewItemVM.FormViewerDetails.BasicDetails.Year = Convert.ToInt16(
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.Year
        );
        if (
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DateCommenced,
            'CC_Month'
          ) == 0
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .Month == null
          )
            ProcessRTE.GetValuesByDomainCode(ValueDomain.Month, (s, e) => {
              this.OnRTEMonthResult(s);
            });
        } else if (
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DateCommenced,
            'CC_Year',
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.Partialdate = true;
        }
      } else if (
        String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DateCommenced,
          'CC_COMPLETE',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        if (
          DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM,
          DateTime.MinValue)
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.Completedate = true;
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.CompleteStartDTTM =
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
      }
    } else {
      if (
        this.objProcessingItemVM != null &&
        String.Equals(this.objProcessingItemVM.OperationMode, 'UA') &&
        this.ActivityCode == ActivityTypes.Amend &&
        this.objProcessingItemVM.FormViewerDetails != null &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
        DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopDate,
          DateTime.MinValue)
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopDate;
        this.objNewItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime;
      } else if (
        this.objProcessingItemVM != null &&
        String.Equals(this.objProcessingItemVM.OperationMode, 'UA') &&
        this.ActivityCode == ActivityTypes.Amend &&
        this.objProcessingItemVM.FormViewerDetails != null &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
        DateTime.Equals(this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopDate,
          DateTime.MinValue)
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate =
          DateTime.MinValue;
        this.objNewItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime =
          DateTime.MinValue;
      }
    }
    if (String.IsNullOrEmpty(this.objNewItemVM.LorenzoID)) {
      this.objNewItemVM.LorenzoID = String.Empty;
      if (
        this.ActivityCode == ActivityTypes.Prescribe &&
        !String.IsNullOrEmpty(this.oDrugInputData.LorenzoID)
      ) {
        this.objNewItemVM.LorenzoID = this.oDrugInputData.LorenzoID;
      }
    }
    if (
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.NONCATALOGUEITEM,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.Precatalog,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      this.objNewItemVM.ActionCode = this.ActivityCode;
      this.objNewItemVM.IsFormViewDataLoaded = true;
      this.GetDeactiveFlag();
    } else {
      let lnRouteOID: number = 0;
      let lnDosageFormOID: number = 0;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
          'S'
        ) &&
        this.objSTATItemVM != null &&
        this.objSTATItemVM.FormViewerDetails != null &&
        this.objSTATItemVM.FormViewerDetails.BasicDetails != null &&
        (this.objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
          this.objNewItemVM.ActionCode == ActivityTypes.Reorder)
      ) {
        if (
          this.objSTATItemVM.FormViewerDetails.BasicDetails.Route != null &&
          !String.IsNullOrEmpty(
            this.objSTATItemVM.FormViewerDetails.BasicDetails.Route.Value
          )
        ) {
          if (
            !this.objSTATItemVM.FormViewerDetails.BasicDetails.Route.Value.Contains(
              ','
            )
          ) {
            Number.TryParse(
              this.objSTATItemVM.FormViewerDetails.BasicDetails.Route.Value,
              (o) => {
                lnRouteOID = o;
              }
            );
          } else if (
            this.objSTATItemVM.FormViewerDetails.BasicDetails.Route.Tag !=
              null &&
            this.objSTATItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains(
              '1'
            )
          ) {
            lnRouteOID = -1;
          } else {
            lnRouteOID = -2;
          }
        }
        if (
          this.objSTATItemVM.FormViewerDetails.BasicDetails.DosageForm !=
            null &&
          !String.IsNullOrEmpty(
            this.objSTATItemVM.FormViewerDetails.BasicDetails.DosageForm.Value
          )
        ) {
          Number.TryParse(
            this.objSTATItemVM.FormViewerDetails.BasicDetails.DosageForm.Value,
            (o) => {
              lnDosageFormOID = o;
            }
          );
        }
      }
      if (this.objNewItemVM.FormViewerDetails.BasicDetails != null) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.GetFormViewControls(
          '1',
          (s, e) => {
            this.objServiceProxy_GetFormViewControlsCompleted(s, e);
          },
          'FL',
          lnRouteOID,
          lnDosageFormOID
        );
      }
    }
    if (
      this.ActivityCode == ActivityTypes.Amend &&
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.FormViewerDetails != null &&
      this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
      this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem =
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem;
    }
    if (
      this.ActivityCode == ActivityTypes.Amend &&
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      if (
        this.objProcessingItemVM != null &&
        this.objProcessingItemVM.FormViewerDetails != null &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
          DateTime.MinValue) &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails
          .ManageReviewDetail != null &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails
          .ManageReviewDetail.oReviewAfterDetail != null &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails
          .ManageReviewDetail.oReviewAfterDetail.ReviewOutcome != null &&
        !String.IsNullOrEmpty(
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .ManageReviewDetail.oReviewAfterDetail.ReviewOutcome.Code
        )
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
          false;

        if (
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcome.Code.Equals(
            CommConstants.Schedulefurtherreview
          ) ||
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcome.Code.Equals(
            CommConstants.Reinstatemedication
          )
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter =
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfter;
          if (
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter
            )
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM =
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsReviewAfterModifiedInAmend =
            true;
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
          true;
        let IsDST: boolean, IsAmbiguous, IsInvalid;
        if (
          DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .ReviewAfterDTTM, DateTime.MinValue)
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDateTime =
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM.ConvertToUser(
              (o1) => {
                IsDST = o1;
              },
              (o2) => {
                IsAmbiguous = o2;
              },
              (o3) => {
                IsInvalid = o3;
              }
            ).ToDateTimeString(IsDST, IsAmbiguous, CConstants.DateHMFormat);
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
            Visibility.Visible;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDateTime =
            String.Empty;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
            Visibility.Collapsed;
        }
        if (this.objNewItemVM.PrescribableItemOID > 0) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterIconVisible =
            Visibility.Visible;
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail;
        this.objNewItemVM.CheckReviewAfterManadatory();
      } else if (
        DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
          DateTime.MinValue) &&
        DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails
          .ReviewAfterDTTM, DateTime.MinValue)
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
          false;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfter;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
          true;
        let IsDST: boolean, IsAmbiguous, IsInvalid;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDateTime =
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM.ConvertToUser(
            (o1) => {
              IsDST = o1;
            },
            (o2) => {
              IsAmbiguous = o2;
            },
            (o3) => {
              IsInvalid = o3;
            }
          ).ToDateTimeString(IsDST, IsAmbiguous, CConstants.DateHMFormat);
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
          Visibility.Visible;
      }
    }
    this.objNewItemVM.FormViewerDetails.BasicDetails.IsChangeFromDurationOrStartDTTM = false;
  }
  OnRTEMonthResult(args: RTEEventargs): void {
    if (String.IsNullOrEmpty(args.Request) || args.Result == null) return;
    if (
      String.Compare(
        args.Request,
        ValueDomain.Month,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Month =
        new ObservableCollection<CListItem>();
      (args.Result as List<CListItem>).forEach((oCListItem) => {
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Month.Add(
          oCListItem
        );
      });
    }
    this.objNewItemVM.FormViewerDetails.BasicDetails.Month =
      this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Month[
        this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.Month - 1
      ];
    this.objNewItemVM.FormViewerDetails.BasicDetails.Partialdate = true;
  }
  public SetDefaultDate(): void {
    let dtNow: DateTime = (FormviewerCommonData.ServerDateTime =
      CommonBB.GetServerDateTime());
    let ORSStartDate: DateTime = DateTime.MinValue;
    let bReOrderFromInpat: boolean = false;
    let bReOrderFromInpatForNonSteppedVar: boolean = false;
    let bSteppedWithDurationReOrder: boolean = false;
    let _IsSteppedOrVariableDose: boolean = false;
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
        (String.Compare(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.VARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPED,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.OrdinalIgnoreCase
          ) == 0)
      ) {
        _IsSteppedOrVariableDose = true;
      }
      if (
        (String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge,
          StringComparison.OrdinalIgnoreCase
        ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Leave,
            StringComparison.OrdinalIgnoreCase
          )) &&
        String.Equals(
          this.objNewItemVM.SourcePrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.OrdinalIgnoreCase
        ) &&
        this.objNewItemVM.ActionCode == ActivityTypes.Reorder
      ) {
        bReOrderFromInpat = true;
      }
      let bIsTitrated: boolean = false;
      if (
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .DischargeDoseTypeForTitrated,
          DoseTypeCode.TITRATED,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        bIsTitrated = true;
      }
      let bIsSeqPresc: boolean = false;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .CurrentSequentialOrder > 0
      ) {
        bIsSeqPresc = true;
      }
      if (
        bReOrderFromInpat &&
        bIsTitrated &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        (!String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Duration
        ) ||
          DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.EndDTTM,
            DateTime.MinValue)) &&
        !_IsSteppedOrVariableDose
      ) {
        bReOrderFromInpatForNonSteppedVar = true;
        this.objNewItemVM.IsSkipStartDateValidation =
          bReOrderFromInpatForNonSteppedVar;
      }
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
        ) &&
        DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM,
          DateTime.MinValue)
      ) {
        ORSStartDate =
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
      }
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.OrdinalIgnoreCase
        ) != 0
      ) {
        if (_IsSteppedOrVariableDose) {
          bSteppedWithDurationReOrder = bReOrderFromInpat
            ? true
            : this.VerifySteppedDoseWithDuration();
          this.objNewItemVM.IsSkipStartDateValidation =
            bSteppedWithDurationReOrder;
        }
        if (DateTime.NotEquals(PatientContext.EncounterStartDate, DateTime.MinValue)) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.RangeStartDTTM =
            PatientContext.EncounterStartDate.Date;
          this.objNewItemVM.FormViewerDetails.BasicDetails.RangeEndDTTM =
            PatientContext.EncounterStartDate.AddYears(50);
        }
        if (DateTime.GreaterThan(PatientContext.EncounterStartDate.Date, dtNow)) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
            _IsSteppedOrVariableDose
              ? PatientContext.EncounterStartDate.Date
              : PatientContext.EncounterStartDate.Date;
        } else {
          if (
            (!bReOrderFromInpat || bIsTitrated || bIsSeqPresc) &&
            !bReOrderFromInpatForNonSteppedVar &&
            !bSteppedWithDurationReOrder &&
            !this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsDTTMSetViaORSMezzanine
          ) {
            if (this.objNewItemVM.ActionCode == ActivityTypes.Prescribe) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                _IsSteppedOrVariableDose &&
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Clerking,
                  StringComparison.CurrentCultureIgnoreCase
                )
                  ? dtNow.Date
                  : dtNow;
            } else if (!_IsSteppedOrVariableDose) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                dtNow;
            }
          }
        }
        if (_IsSteppedOrVariableDose) {
          if (
            !String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
              this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
              this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.Date;
          }
        } else {
          if (
            !bReOrderFromInpatForNonSteppedVar &&
            (!bReOrderFromInpat || bIsTitrated || bIsSeqPresc) &&
            !this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsDTTMSetViaORSMezzanine
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
              dtNow.AddTicks(-(dtNow.Ticks % TimeSpan.TicksPerMinute));
        }
        if (bReOrderFromInpatForNonSteppedVar)
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
        let _IsReorderAndSVDoseType: boolean =
          _IsSteppedOrVariableDose &&
          this.objNewItemVM != null &&
          !this.objNewItemVM.bIsReprescribe &&
          this.objNewItemVM.ActionCode == ActivityTypes.Reorder;
        if (
          (!bReOrderFromInpat || bIsTitrated || bIsSeqPresc) &&
          !_IsReorderAndSVDoseType &&
          MedicationCommonProfileData.PrescribeConfig.IncludeEventDates
        ) {
          if (
            (String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Discharge,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Leave,
                StringComparison.OrdinalIgnoreCase
              ) == 0) &&
            this.DischargeLeaveDTTM.Year != 9999 &&
            DateTime.GreaterThanOrEqualTo(this.DischargeLeaveDTTM, dtNow.Date)
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
              this.DischargeLeaveDTTM;
            //RR SV DisExpDTTM
            if (_IsSteppedOrVariableDose && this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails != null
                 && this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && this.ActivityCode == ActivityTypes.Prescribe)
                {
                    this.objNewItemVM.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged = false;
                    this.objNewItemVM.FormViewerDetails.BasicDetails.UpdateSteppedDoseAdminTimes(false,true);
                }
          }
          if (
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Leave,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            this.LeaveReturnDTTM.Year != 9999 &&
            DateTime.GreaterThanOrEqualTo(this.LeaveReturnDTTM, dtNow.Date)
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.EndDTTM =
              this.LeaveReturnDTTM;
            this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate =
              this.LeaveReturnDTTM;
            //RR SV DisExpDTTM
            if (_IsSteppedOrVariableDose && this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails != null
              && this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0 && this.ActivityCode == ActivityTypes.Prescribe)
             {
                 this.objNewItemVM.FormViewerDetails.BasicDetails.IsSteppedDoseStartDTTMChanged = false;
                 this.objNewItemVM.FormViewerDetails.BasicDetails.UpdateSteppedDoseAdminTimes(false,true);
             }
          }
        }
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.ActionCode != ActivityTypes.Reorder &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
          ) &&
          DateTime.NotEquals(ORSStartDate, DateTime.MinValue) &&
          !this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsDTTMSetViaORSMezzanine
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
            DateTime.MinValue;
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
            ORSStartDate;
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
            ORSStartDate;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE
          ) == 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
            null &&
          this.objNewItemVM.ActionCode != ActivityTypes.Reorder
        ) {
          let nCnt: number =
            this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails
              .Count;
          for (let i: number = 0; i < nCnt; i++) {
            if (i == 0) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].StartDTTM =
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
            } else {
              if (
                !this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MultiDoseDetails[i].IsStartFromNextDay
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                  i
                ].StartDTTM =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                    i - 1
                  ].EndDTTM.AddMinutes(1);
              }
            }
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].Duration <= 0 ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].DurationUOM == null ||
              String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MultiDoseDetails[i].DurationUOM.Value
              )
            ) {
              break;
            }
            let DurationValue: number =
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].Duration;
            let DurationUOM: string =
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].DurationUOM.Value;
            let StartDate: DateTime =
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].StartDTTM;
            let EndDate: DateTime = DateTime.MinValue;
            if (StartDate.Year > CConstants.DateTimeMinYear) {
              switch (DurationUOM) {
                case 'CC_MINUTES':
                  EndDate = StartDate.AddMinutes(DurationValue);
                  break;
                case 'CC_HOURS':
                  EndDate = StartDate.AddHours(DurationValue);
                  break;
                case 'CC_MEDDRSN1':
                  let StartDTTM: DateTime = DateTime.MinValue;
                  let StopDTTM: DateTime = DateTime.MinValue;
                  MCommonBB.CalculateEndDTTMForDaysDuration(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .MultiDoseDetails[i].AdminTimesData,
                    StartDate,
                    DateTime.MinValue,
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .MultiDoseDetails[i].IsfixedTime,
                    Convert.ToInt32(DurationValue),
                    (o1) => {
                      StartDTTM = o1;
                    },
                    (o2) => {
                      StopDTTM = o2;
                    }
                  );
                  EndDate = StopDTTM;
                  break;
                case 'CC_MEDDRSN2':
                  EndDate = StartDate.AddDays(7 * DurationValue);
                  break;
                case 'CC_MEDRSN3':
                  EndDate = StartDate.AddDays(28 * DurationValue);
                  break;
                case 'CC_MEDRSN4':
                  EndDate = StartDate.AddDays(365 * DurationValue);
                  break;
                case 'CC_DOSES':
                  EndDate = PrescriptionHelper.EndDTTMforDurationDose(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .MultiDoseDetails[i],
                    null
                  );
                  break;
              }
            } else {
              EndDate = StartDate;
            }
            if (
              !String.IsNullOrEmpty(DurationUOM) &&
              !String.Equals(DurationUOM, 'CC_MEDDRSN1')
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].EndDTTM =
                !String.IsNullOrEmpty(DurationUOM) &&
                String.Equals(DurationUOM, 'CC_DOSES')
                  ? EndDate
                  : DateTime.NotEquals(EndDate, DateTime.MinValue)
                  ? EndDate.AddMinutes(-1)
                  : EndDate;
            } else {
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ].EndDTTM = EndDate;
            }
          }
        }
        if (this.objNewItemVM.ActionCode == ActivityTypes.Reorder)
          this.objNewItemVM.FormViewerDetails.BasicDetails.DateCommenced =
            String.Empty;
      }
    }
  }
  public VerifySteppedDoseWithDuration(): boolean {
    let bSteppedDoseWithDuration: boolean = false;
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
      String.Equals(
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE
      ) &&
      this.objNewItemVM.ActionCode == ActivityTypes.Reorder &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Count >
        0 &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.OrdinalIgnoreCase
      ) &&
      String.Equals(
        this.objNewItemVM.SourcePrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      )
    ) {
      let sDuration: string = String.Empty;
      sDuration =
        this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Sum(
          (x) => x.Duration
        ).ToString();
      if (!String.IsNullOrEmpty(sDuration) && !String.Equals(sDuration, '0'))
        bSteppedDoseWithDuration = true;
    }
    return bSteppedDoseWithDuration;
  }
  PrescribingConfig_OnProfileLoaded(
    sender: Object,
    Result: IProfileProp
  ): void {
    if (Result != null) {
      MedicationCommonProfileData.PrescribeConfig =
        ObjectHelper.CreateType<PrescribingConfigData>(
          Result.Profile,
          PrescribingConfigData
        );
      if (MedicationCommonProfileData.PrescribeConfig != null)
        this.SetDefaultDate();
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.ActionCode == ActivityTypes.Reorder &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedFrequencyDetails != null &&
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedFrequencyDetails.Type,
            'CC_INTERVAL'
          ) == 0 &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          !String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedFrequencyDetails.UOM,
            'CC_IPONCENLY',
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          if (
            !this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsClearlstAmendedFlds &&
            this.objNewItemVM.ActionCode == ActivityTypes.Reorder
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
              DateTime.MinValue;
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
              DateTime.MinValue;
          }
        }
      }
    }
  }
  public SetMandatory_Form_Strenght_ctrls(
    manctrls: boolean[],
    basicctrls: string[]
  ): void {
    let nBasicLen: number = basicctrls.length;
    for (let i: number = 0; i < nBasicLen && nBasicLen > 0; i++) {
      if (manctrls[i] == true) {
        switch (basicctrls[i]) {
          case 'CC_FORM':
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsDosageFormMandatory =
              true;
            break;
          case 'CC_STRENGTH':
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsStrengthMandatory =
              true;
            break;
          case 'CC_QUANTITY':
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsQuantityMandatory =
              true;
            break;
          case 'CC_SUPLYINSTR':
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMandatorySupplyInstr =
              true;
            break;
        }
      }
    }
  }
  objServiceProxy_GetFormViewControlsCompleted(
    sender: Object,
    e: GetFormViewControlsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000031;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM,Method:GetFormViewControlsCompleted()';
    if (e.Error == null && e.Result != null) {
      try {
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null
        ) {
          this.objNewItemVM.FormViewerDetails.FillFormViewerDetails(
            e.Result,
            true
          );
          if (
            !this.objNewItemVM.IsFormViewerDisable &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            e.Result.oFormViewControls != null
          ) {
            if (this.objNewItemVM.isAdhocitem) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsWardStock =
                false;
            } else if (
              !this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'S'
              ) &&
              (e.Result.oFormViewControls.IsFLorTCorRF.Equals('FL') ||
                e.Result.oFormViewControls.IsFLorTCorRF.Equals('RF'))
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsWardStock =
                e.Result.oFormViewControls.IsWardStock;
            }
            if (e.Result.oFormViewControls.IsFLorTCorRF.Equals('TC')) {
              if (
                e.Result.oFormViewControls.IsWardStockForMCI != null &&
                e.Result.oFormViewControls.IsWardStockForMCI.Count > 0 &&
                e.Result.oFormViewControls.IsWardStockForMCI.Count ==
                  this.objNewItemVM.FormViewerDetails.MulticomponentDetails
                    .oMCItemBasicInfo.Count
              ) {
                for (
                  let i: number = 0;
                  i < e.Result.oFormViewControls.IsWardStockForMCI.Count;
                  i++
                ) {
                  this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                    i
                  ].IsWardStock = String.Equals(
                    e.Result.oFormViewControls.IsWardStockForMCI[i],
                    'true',
                    StringComparison.InvariantCultureIgnoreCase
                  )
                    ? true
                    : false;
                }
              }
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails != null
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsWardStockFluid =
                  e.Result.oFormViewControls.IsWardStockFluid;
              }
            }
          }
          if (
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.MandatoryControls != null &&
            this.objNewItemVM.FormViewerDetails.BasicControls != null
          ) {
            this.SetMandatory_Form_Strenght_ctrls(
              this.objNewItemVM.FormViewerDetails.MandatoryControls,
              this.objNewItemVM.FormViewerDetails.BasicControls
            );
          }
        }
        this.objNewItemVM.ActionCode = this.ActivityCode;
        this.objNewItemVM.IsFormViewDataLoaded = true;
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsDTTMSetViaORSMezzanine &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsDTTMSetViaORSMezzanine =
            false;
        }
        if (
          ((String.Equals(
            this.objNewItemVM.ItemMainType,
            CConstants.Formulary_Appliance,
            StringComparison.OrdinalIgnoreCase
          ) ||
            String.Equals(
              this.objNewItemVM.ItemSubType,
              CConstants.SUBTYPE_GAS
            )) &&
            this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableDose &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
            ) &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.NORMAL,
              StringComparison.OrdinalIgnoreCase
            )) ||
          (!(
            String.Equals(
              this.objNewItemVM.ItemMainType,
              CConstants.Formulary_Appliance,
              StringComparison.OrdinalIgnoreCase
            ) ||
            String.Equals(this.objNewItemVM.ItemSubType, CConstants.SUBTYPE_GAS)
          ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableDose &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
            ) &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.NORMAL,
              StringComparison.OrdinalIgnoreCase
            ))
        )
          this.objNewItemVM.IsDoseCalcEnabled = true;
        else this.objNewItemVM.IsDoseCalcEnabled = false;
        if (
          this.ActivityCode == ActivityTypes.Amend &&
          this.objProcessingItemVM != null &&
          this.objProcessingItemVM.FormViewerDetails != null &&
          (String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) ||
            String.Compare(
              this.objProcessingItemVM.OperationMode,
              'U',
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              this.objProcessingItemVM.OperationMode,
              'UA',
              StringComparison.OrdinalIgnoreCase
            ) == 0)
        ) {
          	setTimeout(() => {
	          if (
	            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails !=
	            null
	          )
	            this.objNewItemVM.FormViewerDetails.TechValidateDetails =
	              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails;
	          if (
	            this.objProcessingItemVM.FormViewerDetails.ConflictDetails != null
	          )
	            this.objNewItemVM.FormViewerDetails.ConflictDetails =
	              this.objProcessingItemVM.FormViewerDetails.ConflictDetails;
	          this.GetDeactiveFlag();
	        }, 1);
        } else {
          this.CheckWarnings();
          this.objNewItemVM.WarningsCompletedEvent = (s, e) => {
            this.objNewItemVM_WarningsCompletedEvent(s);
          };
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  ValidateSteppedDoseForBlankDose(isSteppedDose: boolean): boolean {
    let isValidationSuccess: boolean = true;
    if (isSteppedDose) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
        null
      ) {
        let lstMultipleDoseDetail =
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(
            (oItem) =>
              oItem.LowerDose <= 0 &&
              !oItem.IsDaywiseView &&
              String.Compare(
                oItem.HyperlinkText,
                'Changing dose',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0
          );
        if (
          lstMultipleDoseDetail != null &&
          lstMultipleDoseDetail.Count() > 0
        ) {
          isValidationSuccess = false;
        }
      }
    }
    return isValidationSuccess;
  }
  ValidateSteppedDoseForBlankDuration(isSteppedDose: boolean): boolean {
    let isValidationSuccess: boolean = true;
    if (isSteppedDose) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
        null
      ) {
        let lstMultipleDoseDetail =
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Where(
            (oItem) =>
              oItem.Duration <= 0 &&
              oItem.DurationUOM != null &&
              !String.IsNullOrEmpty(oItem.DurationUOM.Value)
          );
        if (
          lstMultipleDoseDetail != null &&
          lstMultipleDoseDetail.Count() > 0
        ) {
          isValidationSuccess = false;
        }
      }
    }
    return isValidationSuccess;
  }
  private ValidateSteppedDoseForFreq(isSteppedDose: boolean): boolean {
    let isValidationSuccess: boolean = false;
    if (isSteppedDose) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
        null
      ) {
        let ncount: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails
            .Count;
        for (let i: number = 0; i < ncount; i++) {
          let oAdminTimeVM =
            this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[i]
              .oAdminTimesVM;
          if (
            oAdminTimeVM != null &&
            oAdminTimeVM.FreqDetails != null &&
            oAdminTimeVM.FreqDetails.oFrequency != null &&
            !String.IsNullOrEmpty(oAdminTimeVM.FreqDetails.oFrequency.Type)
          ) {
            if (
              !String.IsNullOrEmpty(oAdminTimeVM.FreqDetails.oFrequency.Type) &&
              !String.IsNullOrEmpty(oAdminTimeVM.FreqDetails.oFrequency.UOM) &&
              String.Equals(
                oAdminTimeVM.FreqDetails.oFrequency.UOM,
                'CC_MEDDRSN2'
              )
            ) {
              if (this.IsCheckDaysOfWeek(oAdminTimeVM.FreqDetails.oFrequency)) {
                isValidationSuccess = true;
                break;
              }
            }
          } else {
            isValidationSuccess = true;
            break;
          }
        }
      }
    }
    return isValidationSuccess;
  }
  private IsCheckDaysOfWeek(
    oFrequency: IPPMAManagePrescSer.IPPFrequency
  ): boolean {
    let nCheckedCount: number = 0;
    if (oFrequency.IsSunday) {
      nCheckedCount++;
    }
    if (oFrequency.IsMonday) {
      nCheckedCount++;
    }
    if (oFrequency.IsTuesday) {
      nCheckedCount++;
    }
    if (oFrequency.IsWednesday) {
      nCheckedCount++;
    }
    if (oFrequency.IsThursday) {
      nCheckedCount++;
    }
    if (oFrequency.IsFriday) {
      nCheckedCount++;
    }
    if (oFrequency.IsSaturday) {
      nCheckedCount++;
    }
    if (nCheckedCount < oFrequency.LowEvent) {
      return true;
    }
    return false;
  }
  objNewItemVM_WarningsCompletedEvent(IsGenerated: boolean): void {
    if (this.objNewItemVM.CurrentActivityCode == ActivityTypes.UnHold) {
      this.objNewItemVM = this.SelectedPrescribeItem;
    }
    this.objNewItemVM.CurrentActivityCode = ActivityTypes.None;
    if (
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.isConflictsgenerated =
        true;
    }
    {
      this.objNewItemVM.EprescribingruleEvent();
    }
    if (!IsGenerated) this.objNewItemVM_WarningsGenerationCompleted();
  }
  FormViewerReason: ObservableCollection<CListItem>;
  public GetDeactiveFlag(): void {
    let lnPresItemOID: number = 0;
    if (
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.PrescriptionItemStatus !=
        CConstants.DISCONTINUED &&
      this.objProcessingItemVM.PrescriptionItemStatus != CConstants.CANCELLED &&
      this.objProcessingItemVM.DiscontinueCancelAction == null
    ) {
      if (this.objProcessingItemVM.ActionCode == ActivityTypes.Reorder)
        lnPresItemOID = this.objProcessingItemVM.SourcePrescriptionOid;
      else lnPresItemOID = this.objProcessingItemVM.PrescriptionItemOID;
    }
    if (lnPresItemOID > 0) {
      let objServiceProxy: ManagePrescSer.ManagePrescriptionWSSoapClient =
        new ManagePrescSer.ManagePrescriptionWSSoapClient();
      let objRequest: CReqMsgGetDeactivateAttributes =
        new CReqMsgGetDeactivateAttributes();
      objRequest.lnPrescriptionItemOIDBC = lnPresItemOID;
      objRequest.smcVersionNoBC = AppSessionInfo.AMCV;
      objRequest.oContextInformation = Common.FillContext();
      objServiceProxy.GetDeactivateAttributesCompleted = (s, e) => {
        this.objServiceProxy_GetDeactivateAttributesCompleted(s, e);
      };
      objServiceProxy.GetDeactivateAttributesAsync(objRequest);
    } else {
      if (
        (this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails ==
            null) ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsFluidConflictGen != '2'
      ) {
        
       
                 if (PatientContext.IsTurnONDRC && (((this.objNewItemVM.ePrescribeSource == PrescribeSource.DOS && this.ActivityCode == ActivityTypes.Prescribe) || this.ActivityCode == ActivityTypes.Reorder) || (this.IsFollowUpSTATDRCDoseType && (this.ActivityCode == ActivityTypes.Prescribe || this.ActivityCode.toString() == ActivityTypes.Reorder.toString()
                   ))) && !this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge && this.objNewItemVM.CanPerformDRC(this.objNewItemVM)) 
                {
                    this.IsFollowUpSTATDRCDoseType = false;
                    this.objNewItemVM.PerformDRC(this.objNewItemVM);
                    this.ShowFormViewer();
                }
                else {
                  setTimeout(() => {                    
                    this.ShowFormViewer();
                  }, 0);
                }
                
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsFluidConflictGen ='2';
      }
    }
  }
  objServiceProxy_GetDeactivateAttributesCompleted(
    sender: Object,
    e: GetDeactivateAttributesCompletedEventArgs
  ): void {
    if (e.Error != null) return;
    let objResponse: CResMsgGetDeactivateAttributes = e.Result;
    if (objResponse != null && objResponse.IsDeactivate != null) {
      this.objProcessingItemVM.IsDeactivate = objResponse.IsDeactivate;
      if (this.objNewItemVM != null)
        this.objNewItemVM.IsDeactivate = objResponse.IsDeactivate;
    }
    if (objResponse != null) {
      this.objProcessingItemVM.IsProhibitedRoute =
        objResponse.IsProhibitedRoute;
      if (this.objNewItemVM != null)
        this.objNewItemVM.IsProhibitedRoute = objResponse.IsProhibitedRoute;
    }
    if (
      this.objNewItemVM.ParentbaseVM != null &&
      !this.objNewItemVM.IsAddedToResolveGrid &&
      this.objNewItemVM.ParentbaseVM.IsMandatoryValuesFilled() &&
      this.objNewItemVM.ActionCode == ActivityTypes.Reorder
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
        ) &&
        (String.Compare(
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypeCode.CONTINUOUS,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.SINGLEDOSEVOLUME,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.FLUID,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0) &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .SequentialItemOrder > 0 &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .PrescriptionItemNumber > 0 &&
        !this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge &&
        this.objNewItemVM.CanPerformDRC(this.objNewItemVM)
      ) {
        this.objNewItemVM.bDRCConflictGeToAddtoResolve = true;
        this.objNewItemVM.PerformDRC(this.objNewItemVM);
      } else if (
        !this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge &&
        this.objNewItemVM.CanPerformDRC(this.objNewItemVM)
      ) {
        this.objNewItemVM.PerformDRC(this.objNewItemVM);
        this.ShowFormViewer();
      } else if (
        this.ActivityCode == ActivityTypes.Reorder &&
        !String.Equals(
          PrescriptionTypes.ForAdministration,
          PatientContext.PrescriptionType,
          StringComparison.CurrentCultureIgnoreCase
        ) &&
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
        ) &&
        String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.TITRATED,
          StringComparison.CurrentCultureIgnoreCase
        ) &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType
        ) &&
        (String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
          CConstants.NONCATALOGUEITEM,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
            CConstants.Precatalog,
            StringComparison.CurrentCultureIgnoreCase
          ))
      ) {
        this.ShowFormViewer();
      } else {
        if (
          this.ToCheckForZeroChangingDoseTime(
            this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails
          ) ||
          (this.objNewItemVM.IsDoseCalcVisible == Visibility.Visible &&
            this.objNewItemVM.IsDoseCalcEnabled &&
            (this.objNewItemVM.FormViewerDetails.BasicDetails
              .ISAlwaysuseDosecalc ||
              this.objNewItemVM.IsDosCalciReOrderShowFormviewerRequired))
        ) {
          this.ShowFormViewer();
        } else {
          this.AddToResolveGrid();
          this.AddtoResolutionGriddone = true;
        }
      }
    } else {
      if (this.objNewItemVM.ActionCode == ActivityTypes.Reorder) {
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
            null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
          ) &&
          (String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypeCode.CONTINUOUS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.FLUID,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder > 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .PrescriptionItemNumber > 0 &&
          !this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge &&
          this.objNewItemVM.CanPerformDRC(this.objNewItemVM)
        ) {
          this.objNewItemVM.PerformDRC(this.objNewItemVM);
        } else if (
          !this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge &&
          this.objNewItemVM.CanPerformDRC(this.objNewItemVM) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstDRCAmendedFlds !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstDRCAmendedFlds
            .Count > 0
        ) {
          this.LaunchDRCorShowFV(this.objNewItemVM);
        }
      }
      this.ShowFormViewer();
    }
  }
  public IsFormViewerClosed: boolean = true;
  public ShowFormViewer(): void {
    CommonFlags.bDiscontinueCancelClicked = false;
    Busyindicator.SetStatusIdle('CreateMCILink');
    this.nonformokclick = false;
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.PrescriptionItemOID != 0 &&
      this.objProcessingItemVM != null &&
      !this.objProcessingItemVM.IsAllowedToPerform
    ) {
      let oMsgBox: iMessageBox = new iMessageBox();
      oMsgBox.Title = 'Information - Lorenzo';
      oMsgBox.Height = 140;
      oMsgBox.Width = 350;
      oMsgBox.MessageButton = MessageBoxButton.OK;
      oMsgBox.IconType = MessageBoxType.Information;
      oMsgBox.Message = Resource.prescribedrugs.IsAmendAllowed;
      oMsgBox.Show();
      Busyindicator.SetStatusIdle('FormViewerClick');
      Busyindicator.SetStatusIdle('FormViewer');
      return;
    }
    if (
      this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
      !String.IsNullOrEmpty(this.objNewItemVM.PrescriptionItemStatus) &&
      String.Equals(
        PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
        this.objNewItemVM.PrescriptionItemStatus,
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      ((this.objNewItemVM.PrescriberDetails != null &&
        AppContextInfo.UserOID !=
          Convert.ToString(this.objNewItemVM.PrescriberDetails.OID) &&
        !String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        )) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenu,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      let objMsg: iMessageBox = new iMessageBox();
      objMsg.MessageButton = MessageBoxButton.OK;
      objMsg.Title = 'LORENZO';
      objMsg.Message =
        'You do not have the rights to amend a medication that is awaiting authorisation';
      objMsg.Show();
      Busyindicator.SetStatusIdle('FormViewerClick');
      Busyindicator.SetStatusIdle('FormViewer');
      return;
    }
    if (
      this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
      this.objNewItemVM.PrescriberDetails != null &&
      AppContextInfo.UserOID !=
        Convert.ToString(this.objNewItemVM.PrescriberDetails.OID) &&
      !String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      ((!String.IsNullOrEmpty(this.objNewItemVM.PrescriptionItemStatus) &&
        String.Equals(
          PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
          this.objNewItemVM.PrescriptionItemStatus,
          StringComparison.CurrentCultureIgnoreCase
        )) ||
        !UserPermissions.CanAmend)
    ) {
      let objMsg: iMessageBox = new iMessageBox();
      objMsg.MessageButton = MessageBoxButton.OK;
      objMsg.Title = 'LORENZO';
      objMsg.Message = 'You do not have rights to amend this drug';
      objMsg.Show();
      Busyindicator.SetStatusIdle('FormViewerClick');
      Busyindicator.SetStatusIdle('FormViewer');
      return;
    }
    if (!this.IsFormViewerClosed) return;
    if (MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc) {
      this.objNewItemVM.IsDoseCalcVisible = Visibility.Visible;
    } else {
      this.objNewItemVM.IsDoseCalcVisible = Visibility.Collapsed;
    }
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      this.objNewItemVM.IsDoseCalcInfo = false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsFilledDoseRegime =
        false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsShowFormviwer = true;
      if (
        PatientContext.IsINFUSIONON &&
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.OrdinalIgnoreCase
        ) &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
        ) &&
        String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
          CConstants.SUBTYPE_GAS,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.isStationeryTypeMandatory =
          false;
      }
      if (
        this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
        this.objNewItemVM.FormViewerDetails.BasicControls != null &&
        this.objNewItemVM.FormViewerDetails.BasicControls.Contains(
          'CC_ADMININSTR'
        )
      ) {
        if (
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstVisibility =
            Visibility.Visible;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsAdminInsVisible =
            Visibility.Visible;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction !=
              null &&
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction
                .Value,
              'CC_Other'
            ) == 0
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstVisibility =
              Visibility.Visible;
          }
        }
      }
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod != null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod.Value
        ) &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsDoseVisible ==
          Visibility.Visible &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
          Visibility.Collapsed &&
        this.objNewItemVM.ActionCode != ActivityTypes.Amend &&
        (!this.objNewItemVM.FormViewerDetails.BHasFormViewParams ||
          (this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
            this.objNewItemVM.FormViewerDetails.BasicControls != null &&
            this.objNewItemVM.FormViewerDetails.BasicControls.Contains(
              CConstants.CONST_DOSE
            )))
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.oOriginalValues.AdminMethod =
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod;
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod = null;
      }
      if (this.objNewItemVM.PrescriptionItemOID == 0) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds =
          false;
      }
    }
    this.IsFormViewerClosed = false;
    if (
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.CurrentCultureIgnoreCase
      ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Leave,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge,
          StringComparison.CurrentCultureIgnoreCase
        )) &&
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .SelectedFrequencyDetails != null &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails
          .SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) == 0 &&
      (this.objNewItemVM.ActionCode == ActivityTypes.Amend ||
        this.objNewItemVM.ActionCode == ActivityTypes.Reorder ||
        this.objNewItemVM.ActionCode == ActivityTypes.Prescribe)
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableDuration = false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableStopDate = false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableAsrequired =
        false;
      if (this.objNewItemVM.FormViewerDetails.BasicDetails.AsRequired)
        this.objNewItemVM.FormViewerDetails.BasicDetails.AsRequired = false;
    }
    if (
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.objNewItemVM.PrescriptionItemOID > 0 &&
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.OmittedPresOIDs != null
    ) {
      if (this.objNewItemVM.OmittedPresOIDs == null) {
        this.objNewItemVM.OmittedPresOIDs = new ObservableCollection<number>();
      }
      this.objNewItemVM.OmittedPresOIDs =
        this.objProcessingItemVM.OmittedPresOIDs;
    }

        var _ReAssignMedformViewerInstance = (s,e) => {
          if (s != null && e != null){
          this.objFormViewer = s;          
          this.objFormViewer.objfrmFVFooter = e;
          }
        }

        this.objFormViewer = new medFormViewer();
        this.objFormViewer.constructorImpl(this.objNewItemVM, this.MedsResolve);        
        this.objFormViewer.objfrmFVFooter = new frmFVFooter();
        this.objFormViewer.objfrmFVFooter.DataContext = this.objFormViewer.DataContext;
        this.objNewItemVM.RegenerateConflictsForBrandEvent = (s, e) => { this.RegenerateConflictsForBrand(s); };
        this.objNewItemVM.RegenerateConflictsFluidItemEvent = (s, e) => { this.RegenerateConflictsFluidItemEvent(s); };
        this.objNewItemVM.bFormViwerOpened = true;
        // ObjectHelper.stopFinishAndCancelEvent(true);
        if(!document.getElementById("Medform")){
        let dialogWindowHeight = (700/window.devicePixelRatio);
        AppActivity.OpenWindow("LORENZO--Webpage Dialog", this.objFormViewer, (s,e) => {this.FormViewer_Closed(s);}, 
        "Form viewer", true, dialogWindowHeight, 1000, false, WindowButtonType.OkCancel, this.objFormViewer.objfrmFVFooter, null, null, _ReAssignMedformViewerInstance);
        }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .IsAdministeredinAdvance &&
      this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
      DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.LastAdministeredDTTM,
        DateTime.MinValue) &&
      !String.Equals(
        this.objNewItemVM.PrescriptionItemStatus,
        CConstants.DISCONTINUED,
        StringComparison.OrdinalIgnoreCase
      ) &&
      !String.Equals(
        this.objNewItemVM.PrescriptionItemStatus,
        CConstants.COMPLETED,
        StringComparison.OrdinalIgnoreCase
      ) &&
      !String.Equals(
        this.objNewItemVM.PrescriptionItemStatus,
        CConstants.CANCELLED,
        StringComparison.OrdinalIgnoreCase
      )
    ) {
      this.objNewItemVM.DisplayAdvanceAdminWarningMessage();
    }
    if (this.PrescribeNewItemEvent != null) {
      this.PrescribeNewItemEvent(false);
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .IsConflictExistSealInfo ||
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsConflictExistSealLock
    ) {
      if (
        !this.objNewItemVM.FormViewerDetails.BasicDetails
          .IsConflictExistSealInfo
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.ConflictExistSealInfoVisible =
          Visibility.Collapsed;
      }
      let objMsg: iMessageBox = new iMessageBox();
      objMsg.MessageButton = MessageBoxButton.OK;
      objMsg.MessageBoxClose = (s, e) => {
        this.BreakSeal_MessageBoxClose(s, e);
      };
      objMsg.Title = 'LORENZO';
      objMsg.Message =
        'There are conflicts between this medication item and data that is currently sealed. To view the information please break the seal.';
      objMsg.Show();
    } else {
      this.objNewItemVM.FormViewerDetails.BasicDetails.ConflictExistSealInfoVisible =
        Visibility.Collapsed;
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM != null &&
        (this.objNewItemVM.ActionCode == ActivityTypes.Reorder ||
          this.objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
          this.objNewItemVM.ActionCode == ActivityTypes.Amend)
      ) {
         setTimeout(() => {
          //  31-10 settimeout added  for removing the delay of loading FV fields
          this.objNewItemVM.showDeactivatedFields(this.objNewItemVM);
        }, 0);
       // till here
      }
    }
    if (this.objNewItemVM != null && this.objNewItemVM.IsNoMatches) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds = true;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableNewMed = false;
      this.IsNoMatche = false;
      this.objNewItemVM.IsNoMatches = false;
    }
    this.objNewItemVM.FormViewerDetails.BasicDetails.DoseCalcEnableDisable();
    this.objNewItemVM.FormViewerDetails.BasicDetails.SetDCIconInFV();
  }
  private TitratedRouteFormPairMsg(): void {
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
        Visibility.Visible &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.TITRATED
      ) == 0 &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.DisplayText !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm.DisplayText !=
        null
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.RemoveTitratedDoseType(
        true
      );
      let oMsgBox: iMessageBox = new iMessageBox();
      oMsgBox.Title = 'Lorenzo';
      oMsgBox.MessageButton = MessageBoxButton.OK;
      oMsgBox.IconType = MessageBoxType.Critical;
      oMsgBox.Message =
        'The titrated dose type is not applicable for the selected route-form pair';
      oMsgBox.Show();
    }
  }
  BreakSeal_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    this.TitratedRouteFormPairMsg();
  }
  ItemDispensed_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    this.objNewItemVM.CurrentDispenseStatus = String.Empty;
    this.FormViewerClose(this.argsFormViewerClose);
  }
  FormViewerClose(args: AppDialogEventargs): void {        
        this.oAppDialogWindow = args.AppChildWindow;
        let IsobjNFMCClosed: boolean = false;
        let bDialogResult: boolean = false;
        this.IsFormViewerClosed = true;
        this.IsTypeInDrug = false;
        this.objNewItemVM.bFormViwerOpened = false;
        if (!this.objFormViewer.bRemoveStatus) {
            if (args.Result == AppDialogResult.Ok) {
                this.IsRebindResolveGrdForDC = false;
                this.objNewItemVM.FormViewerDetails.BasicDetails.isDoseadministeteredmsg = false;
                if (this.objFormViewer.IsValidationAsyncCallback) {
                    bDialogResult = true;
                }
                else if (this.objFormViewer.IsWitnessNonMandatory) {
                    bDialogResult = true;
                }
                else if (this.objFormViewer.OKButtonClick() == true) {
                    if (String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Outpatient, StringComparison.InvariantCultureIgnoreCase) && this.objNewItemVM != null && String.Equals(this.objNewItemVM.CurrentDispenseStatus, CConstants.MedDispenseIssued, StringComparison.InvariantCultureIgnoreCase) && this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds != null && this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Count > 0) {
                        let oMsgBox: iMessageBox = new iMessageBox();
                        oMsgBox.MessageButton = MessageBoxButton.OK;
                        oMsgBox.MessageBoxClose = (s, e) => { this.ItemDispensed_MessageBoxClose(s, e); };
                        oMsgBox.Message = Resource.MedicationForm.ItemDispensed_Message;
                        this.argsFormViewerClose = args;
                        oMsgBox.Width = 440;
                        oMsgBox.Show();
                        bDialogResult = null;
                    }
                    else {
                        this.objFormViewer.IsDRCCompleted = false;
                        let oQuery: IEnumerable<PrescriptionItemVM> = null;
                        if (this.objNewItemVM.AllergylaunchfromFORMVIEW != true) {
                            if (this.MedsResolve != null) {
                                oQuery = this.MedsResolve.Where(s => this.objNewItemVM.SourcePrescriptionOid == s.PrescriptionItemOID && ((this.objNewItemVM.FormViewerDetails.BasicDetails.ReasonforModification != null && String.Compare(this.objNewItemVM.FormViewerDetails.BasicDetails.ReasonforModification.Value, "CC_MEDALLADVRECTINTO", StringComparison.CurrentCultureIgnoreCase) == 0) || this.objNewItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason != null && String.Compare(this.objNewItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason.Value, "CC_MEDALLADVRECTINTO", StringComparison.CurrentCultureIgnoreCase) == 0)).Select(s => s);
                            }
                            if (this.MedsClerked != null && oQuery != null && oQuery.Count() == 0 && this.objNewItemVM.ActionCode == ActivityTypes.Reorder) {
                                oQuery = this.MedsClerked.Where(s => this.objNewItemVM.SourcePrescriptionOid == s.PrescriptionItemOID && (this.objNewItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason != null && String.Compare(this.objNewItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason.Value, "CC_MEDALLADVRECTINTO", StringComparison.CurrentCultureIgnoreCase) == 0)).Select(s => s);
                            }
                            if (oQuery != null && oQuery.Count() > 0) {
                                this.oGrdCols = new ObservableCollection<PrescriptionItemVM>(oQuery.AsEnumerable());
                                if (this.oGrdCols != null && this.oGrdCols.Count > 0) {
                                    this.LaunchRecordallergy((this.oGrdCols), false);
                                }
                            }
                        }
                        this.objNewItemVM.AllergylaunchfromFORMVIEW = false;
                        bDialogResult = true;
                    }
                    // ObjectHelper.stopFinishAndCancelEvent(false);
                }
                else {
                    this.objNewItemVM.bFormViwerOpened = true;
                    bDialogResult = null;
                }
                this.objNewItemVM.IsFormCancelled = false;
                this.objFormViewer.bMsgShown = false;
                this.objNewItemVM.bConflicttabloaded = false;
            }
            else if (args.Result == AppDialogResult.Cancel) {
                this.objNewItemVM.IsFormCancelled = false;
                this.objNewItemVM.bConflicttabloaded = false;
                this.objNewItemVM.isTechVldLod = false;
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist = false;
                this.nonformokclick = false;
                if (this.IsRebindResolveGrdForDC && this.ReBindResolveGridEvent != null) {
                    this.ReBindResolveGridEvent(false, null);
                }
                if (this.MedsResolve == null || (this.MedsResolve != null && this.MedsResolve.Count == 0)) {
                    this.IsVisibleHWIndicator = Visibility.Collapsed;
                }
                if (this.objNewItemVM.ActionCode == ActivityTypes.Reorder) {
                    this.SetDCIndicator();
                }
                Busyindicator.SetStatusIdle("FormViewerClick");
                Busyindicator.SetStatusIdle("FormViewerClick");
                Busyindicator.SetStatusIdle("Reorder");
                this.objFormViewer.Cancel_ButtonClick();
                Busyindicator.SetStatusIdle("SequentialReorder");
                Busyindicator.SetStatusIdle("Orderset");
                Busyindicator.SetStatusIdle("OrderSetPrescribe");
                Busyindicator.SetStatusIdle("FormViewer");
                Busyindicator.SetStatusIdle("PrescribeProductOption");
                Busyindicator.SetStatusIdle("IndicationFormViewer");
                Busyindicator.SetStatusIdle("TechValidate_Productoptions");
                Busyindicator.SetStatusIdle("FormViewerClick");
                Busyindicator.SetStatusIdle("FormViewer");
                Busyindicator.SetStatusIdle("Represribce");
                this.objNewItemVM.bFormViwerOpened = true;
                return
            }
            else if (args.Result == AppDialogResult.Close) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist = false;
                Busyindicator.SetStatusIdle("FormViewerClick");
                Busyindicator.SetStatusIdle("FormViewerClick");
                Busyindicator.SetStatusIdle("SequentialReorder");
                bDialogResult = false;
                this.objNewItemVM.IsFormCancelled = true;
                this.objNewItemVM.bConflicttabloaded = false;
                this.objNewItemVM.isTechVldLod = false;
                Busyindicator.SetStatusIdle("Reorder");
                Busyindicator.SetStatusIdle("Orderset");
                Busyindicator.SetStatusIdle("OrderSetPrescribe");
                Busyindicator.SetStatusIdle("FormViewer");
                Busyindicator.SetStatusIdle("IndicationFormViewer");
                Busyindicator.SetStatusIdle("FormViewerClick");
                Busyindicator.SetStatusIdle("FormViewer");
                Busyindicator.SetStatusIdle("Represribce");
                this.nonformokclick = false;
                // ObjectHelper.stopFinishAndCancelEvent(false);
            }            
            if (PatientContext.IsINFUSIONON && ObjectHelper.HasValue(bDialogResult) && args.Result == AppDialogResult.Ok) {
                if (this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SelectedSequenceName != null && !String.IsNullOrEmpty(this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SelectedSequenceName.Value)) {
                    CSequentialHelper.SetSeqPropertiesOnFormViewerClose(this.objNewItemVM, this.MedsResolve, this);
                }
                else if (this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails != null && (this.objNewItemVM.FormViewerDetails.BasicDetails.OrdersetSequence != null)) {
                    this.AssociateSequenceForOrderSet();
                }
                else if (this.objNewItemVM.ActionCode != ActivityTypes.Amend && this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo > 0) {
                    let UniqueGroupSequenceNo: number = this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo;
                    CSequentialHelper.ClearSeqProperties(this.objNewItemVM);
                    this.MedsResolve.Remove(this.objNewItemVM);
                    this.objNewItemVM.isNew = true;
                    this.MedsResolve.Insert(0, this.objNewItemVM);
                    CSequentialHelper.ReassignSequenceNoOnRemove(this.MedsResolve, UniqueGroupSequenceNo, eSequenceNoReassignType.ReassignWithinGroup, this);
                }
            }
        }
        if (!ObjectHelper.HasValue(bDialogResult))
            return;
        if (this.objFormViewer.oReturnValue != null)
            this.UpdateActivityConsideration(true, this.objFormViewer.oReturnValue);
        if (this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails != null)
            this.objNewItemVM.FormViewerDetails.BasicDetails.bDoseChange = false;
        if (this.PrescriptionItemAddedEvent != null) {
            let bEventvalue: boolean = bDialogResult;
            if (this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0) {
                bEventvalue = false;
            }
            this.PrescriptionItemAddedEvent(bEventvalue);
        }
        if (bDialogResult) {
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.PrintStationaryType == null)
                this.objNewItemVM.FormViewerDetails.BasicDetails.PrintStationaryType = this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType;
            if (String.Equals(this.objNewItemVM.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase) && !String.IsNullOrEmpty(this.objNewItemVM.NonFormularynames) && String.Compare(PatientContext.PrescriptionType, PrescriptionTypes.Clerking, StringComparison.InvariantCultureIgnoreCase) != 0 && !this.objNewItemVM.MCnonformularycheck) {
                if (String.Equals(this.objNewItemVM.ItemSubType, CConstants.SUBTYPE, StringComparison.OrdinalIgnoreCase)) {
                    //this.omedNonFormulary = new medNonFormulary(ObjectHelper.CreateObject(new NonFormularyVM(true), { ItemName: this.objNewItemVM.NonFormularynames, OtherReason: this.objNewItemVM.MCOtherNonFormularyReason }));
                    this.omedNonFormulary = new medNonFormulary();
                    this.omedNonFormulary.constructorImpl(ObjectHelper.CreateObject(new NonFormularyVM(true), { ItemName: this.objNewItemVM.NonFormularynames, OtherReason: this.objNewItemVM.MCOtherNonFormularyReason, ReasonForPrescribing: this.objNewItemVM.MCNonFormularyReason}));
                    // if (!String.IsNullOrEmpty(this.objNewItemVM.MCNonFormularyReason))
                    //     this.omedNonFormulary.cboReason.Text = this.objNewItemVM.MCNonFormularyReason;
                    // if (!String.IsNullOrEmpty(this.objNewItemVM.MCOtherNonFormularyReason))
                    //     this.omedNonFormulary.txtOtherReason.Text = this.objNewItemVM.MCOtherNonFormularyReason;
                var lblMCINameText = (s, e) => {
                  if(s != null ){
                      this.omedNonFormulary = s;
                      this.omedNonFormulary.afterViewInit_Func = () =>{
                        this.omedNonFormulary.lblitemNameText.Text = "Component name(s)";
                      }
                  }
                 }
                    IsobjNFMCClosed = true;
                    AppActivity.OpenWindow("Non formulary item ", this.omedNonFormulary, (s,e) =>{this.objNFMC_Closed(s);}, "Non formulary item", false, 255, 433, false, WindowButtonType.OkCancel, null,null,null,lblMCINameText);
                }
            }
            else {
	    	this.oAppDialogResultClick = args.Result;
                if (this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails != null && (this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM == null || (this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM != null && this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count == 0)) && this.objNewItemVM.CanPerformDRC(this.objNewItemVM)) {
                    this.objNewItemVM.bDRCConflictGeToAddtoResolve = true;
                    this.objNewItemVM.PerformDRC(this.objNewItemVM);
                }
                else {                    
                    this.AddToResolveGrid();
                }
                this.CallOrderSetSequence(this.orsseqcount);
                this.orsseqcount++;
                if (this.objRePresItmCollection != null && this.objRePresItmCollection.Count > 0) {
                    this.CallRePresSequence(this.represcseqcount);
                    this.represcseqcount++;
                }
                if (this.formViewerCloseEventhandler != null && this.objNewItemVM != null && !this.objNewItemVM.bDRCConflictGeToAddtoResolve)
                    this.formViewerCloseEventhandler(args.Result);
                Busyindicator.SetStatusIdle("OrderSetPrescribe");
                Busyindicator.SetStatusIdle("SequentialReorder");
                Busyindicator.SetStatusIdle("FormViewerClick");
                Busyindicator.SetStatusIdle("FormViewer");
                if(this.objNewItemVM != null)
                this.objNewItemVM.isTechVldLod = false;
                this.oAppDialogWindow.DialogResult = bDialogResult;
                let omedFormViewer: iAppDialogWindow = (ObjectHelper.CreateType<medFormViewer>(args.Content, medFormViewer));
                omedFormViewer.dupDialogRef.close();
                
            }
            if (this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.ForEach(oSVStep => {
                    if (oSVStep.LstOriginalDoseValues != null && oSVStep.LstOriginalDoseValues.Count > 0) {
                        oSVStep.LstOriginalDoseValues.Clear();
                    }
                });
            }
            {
                let omedFormViewer: iAppDialogWindow = (ObjectHelper.CreateType<medFormViewer>(args.Content, medFormViewer));
                if (omedFormViewer != null) {
                  //Revisit Required
                    //omedFormViewer.onDialogClose = null;
                    omedFormViewer.appDialog = null;
                }
            }
        }
        else {
            if (this.objFormViewer.bRemoveStatus == true) {
                this.RemoveFromResolveGrid();
                Busyindicator.SetStatusIdle("FormViewer");
                Busyindicator.SetStatusIdle("FormViewerClick");
                Busyindicator.SetStatusIdle("FormViewer");
                Busyindicator.SetStatusIdle("Orderset");
                ObjectHelper.stopFinishAndCancelEvent(false);
            }
            //Below is not required
            //if (this.objFormViewer != null) {
                //if (this.objFormViewer.dtpStartDate != null)
                    // this.objFormViewer.dtpStartDate.OnDateValueChanged -= this.objFormViewer.dtpStartDate_OnDateValueChanged;
                //if (this.objFormViewer.iTimeStartDateTime != null)
                    // this.objFormViewer.iTimeStartDateTime.ValueChanged -= this.objFormViewer.iTimeStartDateTime_ValueChanged;
            //}
            this.RestoreOldValues();
            this.objProcessingItemVM = null;
            this.objFormViewer = null;
            this.objNewItemVM.IsFormCancelled = false;
            this.objNewItemVM.isTechVldLod = false;
            if (this.formViewerCloseEventhandler != null)
                this.formViewerCloseEventhandler(args.Result);
            this.oAppDialogWindow.DialogResult = bDialogResult;
            let omedFormViewer: iAppDialogWindow = (ObjectHelper.CreateType<medFormViewer>(args.Content, medFormViewer));
            omedFormViewer.dupDialogRef.close();
            if (!(this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.IsFollowUpStat && this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat != '\0')) {
                this.objNewItemVM = null;
            }
            {
                let omedFormViewer: iAppDialogWindow = (ObjectHelper.CreateType<medFormViewer>(args.Content, medFormViewer));
                if (omedFormViewer != null) {
                  //Revisit Required
                    //omedFormViewer.onDialogClose = null;
                    omedFormViewer.appDialog = null;
                }
            }
        }
        if (this.IsAdhocMCIClicked)
            this.IsAdhocMCIClicked = false; 
        
  }
  argsFormViewerClose: AppDialogEventargs = null;
  public GetWitnessRequired(args: AppDialogEventargs): void {
    this.argsFormViewerClose = args;
    let objService: PrescribableDefn.IPPMAPrescribableDefnWSSoapClient =
      new PrescribableDefn.IPPMAPrescribableDefnWSSoapClient();
    objService.IsWitnessRequiredCompleted = (s, e) => {
      this.objService_IsWitnessReqdCompleted(s, e);
    };
    let objReq: PrescribableDefn.CReqMsgIsWitnessRequired =
      new PrescribableDefn.CReqMsgIsWitnessRequired();
    objReq.oContextInformation = CommonBB.FillContext();
    objReq.CriteriaBC = new PrescribableDefn.WitnessCriteria();
    objReq.CriteriaBC.ServicePoints =
      new ObservableCollection<PrescribableDefn.ObjectInfo>();
    objReq.CriteriaBC.ServicePoints.Add(
      ObjectHelper.CreateObject(new PrescribableDefn.ObjectInfo(), {
        OID: MedChartData.ServiceOID,
      })
    );
    objReq.CriteriaBC.Drugs =
      new ObservableCollection<PrescribableDefn.ObjectInfo>();
    objReq.CriteriaBC.Drugs.Add(
      ObjectHelper.CreateObject(new PrescribableDefn.ObjectInfo(), {
        Code:
          this.objNewItemVM != null
            ? this.objNewItemVM.LorenzoID
            : String.Empty,
      })
    );
    objReq.CriteriaBC.Roles =
      new ObservableCollection<PrescribableDefn.ObjectInfo>();
    objReq.CriteriaBC.Roles.Add(
      ObjectHelper.CreateObject(new PrescribableDefn.ObjectInfo(), {
        OID: Convert.ToInt64(AppContextInfo.JobRoleOID),
      })
    );
    objReq.CriteriaBC.Routes =
      new ObservableCollection<PrescribableDefn.ObjectInfo>();
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Route != null
    ) {
      objReq.CriteriaBC.Routes.Add(
        ObjectHelper.CreateObject(new PrescribableDefn.ObjectInfo(), {
          OID:
            this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .Route != null
              ? Number.Parse(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .Route.Value
                )
              : 0,
        })
      );
    }
    if (
      !String.IsNullOrEmpty(PatientContext.DOB) &&
      DateTime.LessThanOrEqualTo(Convert.ToDateTime(PatientContext.DOB), CommonBB.GetServerDateTime())
    )
      objReq.CriteriaBC.AgeFrom = Convert.ToInt16(PatientContext.Age);
    else objReq.CriteriaBC.AgeFrom = -1;
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      (String.Equals(
        this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
        CConstants.CATALOGUEITEM,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
          CConstants.ACTUALMOIETY,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
          (c) =>
            String.Equals(
              c.DrugPropertyCode,
              CConstants.DrugPropertyCNTRLDDRUG
            ) && String.Equals(c.VMChildCode, CConstants.AllChild_CC)
        ).ToList().Count > 0
      ) {
        objReq.CriteriaBC.IsControlledDrugIncluded = true;
      } else {
        objReq.CriteriaBC.IsControlledDrugIncluded = false;
      }
    } else {
      objReq.CriteriaBC.IsControlledDrugIncluded =
        this.objNewItemVM != null
          ? this.objNewItemVM.IsControlledDrug.Equals('1')
          : false;
    }
    objService.IsWitnessRequiredAsync(objReq);
  }
  objService_IsWitnessReqdCompleted(
    sender: Object,
    e: PrescribableDefn.IsWitnessRequiredCompletedEventArgs
  ): void {
    if (e.Result != null) {
      let objRes: PrescribableDefn.CResMsgIsWitnessRequired = e.Result;
      if (objRes != null && objRes.owitnessCriteriaresult != null) {
        if (objRes.owitnessCriteriaresult.Flag) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.bIsWitnessReqd =
            true;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.IsNoWitnessAvialable =
            this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.bIsWitnessReqd =
              false;
        }
        if (objRes.owitnessCriteriaresult.Isnowitnessoverride) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.ChkNoWitness =
            Visibility.Collapsed;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.ChkNoWitness =
            Visibility.Visible;
        }
      }
      this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.WitnessMandatory =
        this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.bIsWitnessReqd;
    }
    if (this.argsFormViewerClose != null)
      this.FormViewerClose(this.argsFormViewerClose);
  }
  FormViewer_Closed(args: AppDialogEventargs): void {
    //Revisit Required --- need to discuss with Siva regarding the common fix instead of each instance assignment on closed
    this.objFormViewer = args.Content && args.Content.Component ? args.Content.Component as medFormViewer : this.objFormViewer;
    if (  
      args.Result == AppDialogResult.Ok &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.objNewItemVM != null && this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .IsRecordAdminTabEnabled &&
      (this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin == null ||
        (this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin != null &&
          !this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
            .IsDuringHomeLeave))
    ) {
      this.GetHomeLeaveInfo(args);
    } else {
      this.FormViewerClose(args);
    }
  }
  

  public GetHomeLeaveInfo(args: AppDialogEventargs): void {
    this.argsFormViewerClose = args;
    let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    let objGetPatHomeLeave: IPPMAManagePrescSer.CReqMsgGetPatientHomeLeaveDetail =
      new IPPMAManagePrescSer.CReqMsgGetPatientHomeLeaveDetail();
    objGetPatHomeLeave.lnPatientOIDBC = PatientContext.PatientOID;
    objGetPatHomeLeave.lnEncounterOIDBC = PatientContext.EncounterOid;
    objGetPatHomeLeave.oContextInformation = Common.FillContext();
    objServiceProxy.GetPatientHomeLeaveDetailCompleted = (s, e) => {
      ObjectHelper.OpenWindowInst = false;
      this.objServiceProxy_GetPatientHomeLeaveDetailCompleted(s, e);
    };
    objServiceProxy.GetPatientHomeLeaveDetailAsync(objGetPatHomeLeave);
  }
  objServiceProxy_GetPatientHomeLeaveDetailCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetPatientHomeLeaveDetailCompletedEventArgs
  ): void {
    if (e != null && e.Result != null) {
      let objRes: IPPMAManagePrescSer.CResMsgGetPatientHomeLeaveDetail =
        e.Result;
      if (
        objRes != null &&
        objRes.oPatHomeLeaveInfo != null &&
        DateTime.NotEquals(objRes.oPatHomeLeaveInfo.StartDTTM, DateTime.MinValue)
      ) {
        let dtAdminStartDTTM: DateTime = DateTime.MinValue;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin ==
            null ||
          (this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin !=
            null &&
            !this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .IsLoaded)
        ) {
          dtAdminStartDTTM = CommonBB.GetServerDateTime();
        } else {
          dtAdminStartDTTM =
           DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .AdministeredDate, DateTime.MinValue)
              ? this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate.DateTime.AddTime(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                    .AdministeredTime
                )
              : DateTime.MinValue;
        }
        if (
          DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.DueNowScheduleDTTM,
          DateTime.MinValue)
        ) {
          dtAdminStartDTTM = dtAdminStartDTTM.DateTime.AddTime(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DueNowScheduleDTTM
          );
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin == null
        )
          this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin =
            new RecordAdminVM();
        let dtHomeLeaveStartDTTM: DateTime = objRes.oPatHomeLeaveInfo.StartDTTM;
        this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.HomeLeaveStartDTTM =
          dtHomeLeaveStartDTTM;
        if (
          (DateTime.GreaterThanOrEqualTo(dtAdminStartDTTM,
            dtHomeLeaveStartDTTM.AddMinutes(MedChartData.DuenessThreshold)) &&
            DateTime.LessThanOrEqualTo(dtAdminStartDTTM,
              dtHomeLeaveStartDTTM.AddMinutes(MedChartData.DuenessThreshold))) ||
          DateTime.GreaterThanOrEqualTo(dtAdminStartDTTM, dtHomeLeaveStartDTTM)
        ) {
          let oMsg: iMessageBox = new iMessageBox();
          oMsg.Title = 'LORENZO';
          oMsg.Message = Resource.MedicationForm.HomeLeave_Msg;
          oMsg.MessageButton = MessageBoxButton.YesNo;
          oMsg.IconType = MessageBoxType.Critical;
          oMsg.Show();
          oMsg.MessageBoxClose = (s, e) => {
            this.oMsgHomeLeave_MessageBoxClose(s, e);
          };
        } else {
          this.DoRecordAdminWitnessValidation();
        }
      } else {
        this.DoRecordAdminWitnessValidation();
      }
    } else {
      this.DoRecordAdminWitnessValidation();
    }
  }
  oMsgHomeLeave_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.Yes) {
      let IsWitnessCallRequired: boolean = false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.IsDuringHomeLeave =
        true;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails
          .IsRecordAdminTabEnabled &&
        (this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin == null ||
          (this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin !=
            null &&
            !this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .IsLoaded))
      ) {
        IsWitnessCallRequired = true;
        this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.oPrescriptionItemVM =
          this.objNewItemVM;
        this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin =
          this.objNewItemVM.FormViewerDetails.BasicDetails.FillRecordAdminDetails(
            false
          );
      }
      if (
        IsWitnessCallRequired &&
        !this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
          .WitnessMandatory
      ) {
        this.GetWitnessRequired(this.argsFormViewerClose);
      } else {
        if (this.argsFormViewerClose != null)
          this.FormViewerClose(this.argsFormViewerClose);
      }
    } else {
      this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.IsDuringHomeLeave =
        false;
      this.objNewItemVM.HomeLeaveSetFocus();
    }
  }
  DoRecordAdminWitnessValidation(): void {
    if (
      this.argsFormViewerClose.Result == AppDialogResult.Ok &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .IsRecordAdminTabEnabled &&
      (this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin == null ||
        (this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin != null &&
          !this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
            .IsLoaded))
    ) {
      if (this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin == null)
        this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin =
          new RecordAdminVM();
      if (
        !this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
          .WitnessMandatory
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.oPrescriptionItemVM =
          this.objNewItemVM;
        this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin =
          this.objNewItemVM.FormViewerDetails.BasicDetails.FillRecordAdminDetails(
            false
          );
        this.GetWitnessRequired(this.argsFormViewerClose);
      } else {
        if (this.argsFormViewerClose != null)
          this.FormViewerClose(this.argsFormViewerClose);
      }
    } else {
      this.FormViewerClose(this.argsFormViewerClose);
    }
  }
  public ContiniousSequential(): void {
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
      (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
        InfusionTypesCode.CONTINUOUS ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.SINGLEDOSEVOLUME ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.FLUID)
    ) {
      let UniqueID: Random = new Random();
      let PrescriptionItemNumber: number = 0;
      if (this.InfusionContinousSeq == null) {
        this.InfusionContinousSeq = new InfContinousSequentail();
      }
      let IschkseqPresitem: boolean =
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsChksequentialPresitem;
      if (IschkseqPresitem) {
        this.UncheckedSequential();
        if (
          this.InfusionContinousSeq.FirstPrescItemOIDInSeq == 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .PrescriptionItemNumber == 0
        ) {
          PrescriptionItemNumber = UniqueID.Next();
          this.InfusionContinousSeq.FirstPrescItemOIDInSeq =
            PrescriptionItemNumber;
          this.InfusionContinousSeq.SequentialItemOrder = 1;
          this.InfusionContinousSeq.IsFirstiteminseq = true;
        }
        if (this.objNewItemVM.ActionCode == ActivityTypes.Amend) {
          if (!this.objNewItemVM.IsUnHoldAction) {
            this.InfusionContinousSeq.IsPreviousationamend = true;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ParentPrescriptionItemOID != 0
          ) {
            this.InfusionContinousSeq.ParentPrescriptionOID =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID;
          }
        } else {
          this.InfusionContinousSeq.IsPreviousationamend = false;
        }
        if (
          !String.IsNullOrEmpty(this.objNewItemVM.OperationMode) &&
          this.objNewItemVM.OperationMode == 'N'
        ) {
          this.InfusionContinousSeq.IsPreviousationUpdate = true;
        } else {
          this.InfusionContinousSeq.IsPreviousationUpdate = false;
        }
        if (this.objNewItemVM.IsUnHoldAction) {
          this.InfusionContinousSeq.IsPreviousationUpdate = true;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .PrescriptionItemNumber > 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .IsAddSequentialPresitem == Visibility.Visible
        ) {
          this.InfusionContinousSeq.FirstPrescItemOIDInSeq =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
        }
        this.InfusionContinousSeq.PrescriptionItemNumber =
          this.InfusionContinousSeq.FirstPrescItemOIDInSeq > 0
            ? this.InfusionContinousSeq.FirstPrescItemOIDInSeq
            : this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber;
        let IsMultiInfusionRoutes: boolean = false;
        if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsMultiRouteChecked &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
            .Routes != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
            .Routes != null
        ) {
          IsMultiInfusionRoutes = Common.IsInfusionMultiRoutes(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .Routes
          );
          if (IsMultiInfusionRoutes) {
            let SelInfMultiRoutes =
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
                (SelInfRoutes) =>
                  SelInfRoutes.IsSelected &&
                  SelInfRoutes.Tag != null &&
                  String.Compare(
                    SelInfRoutes.Tag.ToString(),
                    '1',
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
              ).Select((SelInfRoutes) => SelInfRoutes);
            if (SelInfMultiRoutes != null && SelInfMultiRoutes.Count() > 0) {
              SelInfMultiRoutes.forEach((MRoutes) => {
                if (this.InfusionContinousSeq.SequentialMultiplsRoutes == null)
                  this.InfusionContinousSeq.SequentialMultiplsRoutes =
                    new ObservableCollection<CListItem>();
                this.InfusionContinousSeq.SequentialMultiplsRoutes.Add(MRoutes);
              });
            }
          }
        } else
          this.InfusionContinousSeq.SequentialRoute =
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route;
        this.InfusionContinousSeq.InfusionrateInseq = !this.InfusionContinousSeq
          .IsCurrentInfusionRateChange
          ? this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .Rate
          : this.InfusionContinousSeq.InfusionrateInseq;
        this.InfusionContinousSeq.InfusionratenumuomInseq = !this
          .InfusionContinousSeq.IsCurrentInfusionRateChange
          ? this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom
          : this.InfusionContinousSeq.InfusionratenumuomInseq;
        this.InfusionContinousSeq.InfusionratedenouomInseq = !this
          .InfusionContinousSeq.IsCurrentInfusionRateChange
          ? this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom
          : this.InfusionContinousSeq.InfusionratedenouomInseq;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .IsAddSequentialPresitem == Visibility.Visible
        ) {
          this.InfusionContinousSeq.IsSequentialPrescribing = true;
          this.InfusionContinousSeq.SequentialItemOrder =
            this.InfusionContinousSeq.SequentialItemOrder > 0
              ? this.InfusionContinousSeq.SequentialItemOrder
              : this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .TotalCountSeq;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .DeliveryDevice != null
        ) {
          this.InfusionContinousSeq.DeliveryDeviceInSeq =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDevice;
        } else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .DeliveryDeviceFreetext != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .DeliveryDeviceFreetext.length > 0
        ) {
          this.InfusionContinousSeq.DeliveryDeviceFreetext =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.DeliveryDeviceFreetext;
        }
        this.InfusionContinousSeq.Infusiontype =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .IsExistSubSequentialPresitem > 0
            ? this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .IsExistSubSequentialPresitem + 1
            : 1;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsShowRouteDiscrepency =
          false;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsChkNextSequencePrescribing =
          this.InfusionContinousSeq.IsSequentialPrescribing;
      } else if (this.objNewItemVM.ActionCode != ActivityTypes.Amend) {
        if (
          !IschkseqPresitem &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder == 1 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .TotalCountSeq == 1
        ) {
          this.InfusionContinousSeq = new InfContinousSequentail();
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData =
            new InfContinousSequentail();
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder = 0;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber = 0;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
            Visibility.Collapsed;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
            Visibility.Collapsed;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc =
            String.Empty;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder = 0;
        }
        this.InfusionContinousSeq.PrescriptionItemNumber =
          this.InfusionContinousSeq.FirstPrescItemOIDInSeq;
        this.InfusionContinousSeq.IsSequentialPrescribing = false;
        this.InfusionContinousSeq.FirstPrescItemOIDInSeq = 0;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem = 0;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder > 0
            ? this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder
            : this.InfusionContinousSeq.SequentialItemOrder;
      } else if (this.objNewItemVM.ActionCode == ActivityTypes.Amend) {
        if (
          !IschkseqPresitem &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .IsAddSequentialPresitem == Visibility.Visible
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder == 1 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .TotalCountSeq == 1
          ) {
            this.InfusionContinousSeq = new InfContinousSequentail();
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData =
              new InfContinousSequentail();
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder = 0;
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber = 0;
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Collapsed;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Collapsed;
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc =
              String.Empty;
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder = 0;
          }
          this.InfusionContinousSeq.PrescriptionItemNumber =
            this.InfusionContinousSeq.FirstPrescItemOIDInSeq;
          this.InfusionContinousSeq.IsSequentialPrescribing = false;
          this.InfusionContinousSeq.FirstPrescItemOIDInSeq = 0;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem = 0;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder > 0
              ? this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .SequentialItemOrder
              : this.InfusionContinousSeq.SequentialItemOrder;
        } else if (
          this.InfusionContinousSeq != null &&
          this.InfusionContinousSeq.IsSequentialPrescribing
        ) {
          this.InfusionContinousSeq.SequentialItemOrder =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq;
        }
      }
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .PrescriptionItemNumber == 0
      )
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
          this.InfusionContinousSeq.PrescriptionItemNumber > 0
            ? this.InfusionContinousSeq.PrescriptionItemNumber
            : this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsExistSubSequentialPresitem == 1 &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .SequentialItemOrder < this.InfusionContinousSeq.SequentialItemOrder
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
          this.InfusionContinousSeq.SequentialItemOrder > 0
            ? this.InfusionContinousSeq.SequentialItemOrder
            : 0;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder > 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
            Visibility.Visible;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
            Visibility.Visible;
        }
      }
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentialPrescribing =
        this.InfusionContinousSeq.IsSequentialPrescribing;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsExistSubSequentialPresitem > 1
      ) {
        this.InfusionContinousSeq.DisplaySequentialItemOrder =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder;
      } else {
        if (this.objNewItemVM.ActionCode == ActivityTypes.Reorder) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder <=
            this.InfusionContinousSeq.SequentialItemOrder
          ) {
            this.InfusionContinousSeq.SequentialItemOrder =
              this.InfusionContinousSeq.FirstPrescItemOIDInSeq == 0 &&
              this.InfusionContinousSeq.IsSequentialPrescribing == false
                ? 0
                : this.InfusionContinousSeq.SequentialItemOrder + 1;
          } else {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .IsChksequentialPresitem
            ) {
              this.InfusionContinousSeq.SequentialItemOrder =
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .SequentialItemOrder + 1;
            }
          }
        } else {
          this.InfusionContinousSeq.SequentialItemOrder =
            this.InfusionContinousSeq.FirstPrescItemOIDInSeq == 0 &&
            this.InfusionContinousSeq.IsSequentialPrescribing == false
              ? 0
              : this.InfusionContinousSeq.SequentialItemOrder + 1;
        }
      }
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .TotalCountSeq < this.InfusionContinousSeq.SequentialItemOrder
      )
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq =
          this.InfusionContinousSeq.SequentialItemOrder > 0
            ? Convert.ToInt32(this.InfusionContinousSeq.SequentialItemOrder)
            : 0;
      if (this.MedsResolve != null) {
        let lastSequenceitem = ObjectHelper.CreateType<PrescriptionItemVM>(
          this.MedsResolve.Where(
            (c) =>
              c.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber ==
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber
          )
            .Select((s) => s)
            .LastOrDefault(),
          PrescriptionItemVM
        );
        if (lastSequenceitem != null) {
          let index1: number = this.MedsResolve.IndexOf(lastSequenceitem);
          if (index1 != -1) {
            this.InfusionContinousSeq.IsCurrentgrdResolveIndex = index1;
          }
        } else {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .IsCurrentgrdResolveIndex == 0
          ) {
            let currentitem = ObjectHelper.CreateType<PrescriptionItemVM>(
              this.MedsResolve.Where(
                (c) =>
                  c.PrescriptionItemOID == this.objNewItemVM.PrescriptionItemOID
              )
                .Select((s) => s)
                .LastOrDefault(),
              PrescriptionItemVM
            );
            if (currentitem != null) {
              let currentitemindex: number =
                this.MedsResolve.IndexOf(currentitem);
              if (currentitemindex != -1) {
                this.InfusionContinousSeq.IsCurrentgrdResolveIndex =
                  currentitemindex;
              }
            }
          } else {
            this.InfusionContinousSeq.IsCurrentgrdResolveIndex =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsCurrentgrdResolveIndex;
          }
        }
      }
      if (
        !IschkseqPresitem &&
        this.InfusionContinousSeq != null &&
        (((this.InfusionContinousSeq.SequentialRoute != null ||
          this.InfusionContinousSeq.SequentialMultiplsRoutes != null) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
          ((this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag !=
            null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString() ==
              '0') ||
            (this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag !=
              null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString() ==
                '1' &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType ==
                CConstants.SUBTYPE_GAS))) ||
          this.objNewItemVM.ItemMainType == CConstants.Formulary_Appliance)
      ) {
        let lastseq = this.MedsResolve.Where(
          (x) =>
            x.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber ==
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber
        )
          .Select((x) => x)
          .LastOrDefault();
        if (lastseq != null) {
          this.MedsResolve.ForEach((Reinsert) => {
            if (
              lastseq.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber ==
                Reinsert.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber &&
              lastseq.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder ==
                Reinsert.FormViewerDetails.BasicDetails.InfusionDetails
                  .SequentialItemOrder
            ) {
              Reinsert.FormViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem =
                false;
            }
          });
        }
        this.InfusionContinousSeq = new InfContinousSequentail();
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData =
          new InfContinousSequentail();
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder = 0;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber = 0;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
          Visibility.Collapsed;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
          Visibility.Collapsed;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc =
          String.Empty;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder = 0;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsShowRouteDiscrepency =
          false;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType = null;
      }
    } else if (
      this.InfusionContinousSeq != null &&
      (this.InfusionContinousSeq.SequentialRoute != null ||
        this.InfusionContinousSeq.SequentialMultiplsRoutes != null) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString() ==
        '1' &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType ==
        CConstants.SUBTYPE_GAS
    ) {
      this.InfusionContinousSeq = new InfContinousSequentail();
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData =
        new InfContinousSequentail();
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
        Visibility.Collapsed;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Collapsed;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc =
        String.Empty;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsShowRouteDiscrepency =
        false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType = null;
    }
  }
  private UncheckedSequential(): void {
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .PrescriptionItemNumber > 0 &&
      this.MedsResolve != null
    ) {
      let NonCurrentsequentialgrps = this.MedsResolve.GroupBy(
        (g) =>
          g.FormViewerDetails.BasicDetails.InfusionDetails
            .PrescriptionItemNumber
      )
        .Where(
          (c) =>
            c.Key !=
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber
        )
        .Select((s) => s)
        .ToList();
      if (NonCurrentsequentialgrps != null) {
        NonCurrentsequentialgrps.forEach((Currentseq) => {
          let Existinggrps: PrescriptionItemVM;
          Existinggrps = ObjectHelper.CreateType<PrescriptionItemVM>(
            this.MedsResolve.Where(
              (c) =>
                c.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber == Currentseq.Key
            )
              .Select((s) => s)
              .LastOrDefault(),
            PrescriptionItemVM
          );
          let index: number = this.MedsResolve.IndexOf(Existinggrps);
          for (let i: number = 0; i < this.MedsResolve.Count; i++) {
            if (
              index == i &&
              this.MedsResolve[i].OperationMode == 'N' &&
              this.MedsResolve[i].FormViewerDetails.BasicDetails.InfusionDetails
                .IsChksequentialPresitem
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData =
                new InfContinousSequentail();
              this.MedsResolve[
                i
              ].FormViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem =
                this.MedsResolve[i].FormViewerDetails.BasicDetails
                  .InfusionDetails.IsChksequentialPresitem
                  ? false
                  : this.MedsResolve[i].FormViewerDetails.BasicDetails
                      .InfusionDetails.IsChksequentialPresitem;
              this.MedsResolve[
                i
              ].FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem = 0;
            }
          }
        });
      }
    }
  }
  private DoSeqItemDeliveryDeviceDisableRateOUM(): void {
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
      (String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
        InfusionTypesCode.CONTINUOUS
      ) == 0 ||
        String.Compare(
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        ) == 0 ||
        String.Compare(
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
          InfusionTypesCode.FLUID
        ) == 0) &&
      ProfileData.InfusionPresConfig != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .DeliveryDevice != null
    ) {
      let InfusionrateNUMDEMUOM =
        ProfileData.InfusionPresConfig.objInfusDeliveryDevice
          .Where(
            (UOMDEMO) =>
              UOMDEMO.DeviceName ==
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .DeliveryDevice.DisplayText
          )
          .Select((UOMDEMO) => UOMDEMO)
          .FirstOrDefault();
      if (InfusionrateNUMDEMUOM != null) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
          !String.IsNullOrEmpty(
            InfusionrateNUMDEMUOM.InfusionRateDenomUOMOID
          ) &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.Value
          ) &&
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateNumeratorUom.Value,
            InfusionrateNUMDEMUOM.InfusionRateNumUOMOID,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom =
            false;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl =
            false;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom != null &&
          !String.IsNullOrEmpty(
            InfusionrateNUMDEMUOM.InfusionRateDenomUOMOID
          ) &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.Value
          ) &&
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfRateDinominatorUom.Value,
            InfusionrateNUMDEMUOM.InfusionRateDenomUOMOID,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom =
            false;
        }
        if (
          !this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .IsenableInfusionratenumuom
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator =
            false;
        }
      } else {
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.NORMAL,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom =
            true;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom =
            true;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl =
            true;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator =
            true;
        }
      }
    } else {
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
        String.Compare(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateDenominatoruom =
          true;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuom =
          true;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionratenumuomlbl =
          true;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator =
          true;
      }
    }
  }
  public SubSequentialShowformViewer(objNewItemVM: PrescriptionItemVM): void {
    let isNextScheduleExists: boolean = false;
    if (
      objNewItemVM != null &&
      objNewItemVM.FormViewerDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails.Ordersets == null
    ) {
      if (
        objNewItemVM.ActionCode != ActivityTypes.Amend &&
        this.InfusionContinousSeq != null &&
        this.InfusionContinousSeq.IsSequentialPrescribing == true &&
        !objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsChkNextSequencePrescribing &&
        !objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsItemAddedToResolveGrid
      ) {
        objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsChkNextSequencePrescribing =
          this.InfusionContinousSeq.IsSequentialPrescribing;
        objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc =
          '{Sequential prescription #' +
          (objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .IsExistSubSequentialPresitem > 1
            ? this.InfusionContinousSeq.DisplaySequentialItemOrder
            : this.InfusionContinousSeq.SequentialItemOrder) +
          ' of ' +
          (objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .IsExistSubSequentialPresitem > 1
            ? this.InfusionContinousSeq.DisplaySequentialItemOrder
            : this.InfusionContinousSeq.SequentialItemOrder) +
          '}';
        if (
          this.InfusionContinousSeq.SequentialMultiplsRoutes != null &&
          this.InfusionContinousSeq.SequentialMultiplsRoutes.Count > 0
        ) {
          this.InfusionContinousSeq.SequentialMultiplsRoutes.forEach(
            (MRoutes) => {
              if (
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .MultipleRouteSequential == null
              )
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential =
                  new ObservableCollection<CListItem>();
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.MultipleRouteSequential.Add(
                MRoutes
              );
            }
          );
        } else {
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential =
            this.InfusionContinousSeq.SequentialRoute;
        }
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionType == null
        ) {
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionType =
            this.InfusionContinousSeq.Infusiontype;
        }
        if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.InfusionContinousSeq.SequentialMultiplsRoutes != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
          objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes !=
            null &&
          objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes
            .Count > 0
        ) {
          this.InfusionContinousSeq.SequentialMultiplsRoutes.forEach(
            (MRoutes) => {
              objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.ForEach(
                (ReInsert) => {
                  if (
                    String.Compare(
                      ReInsert.Value,
                      MRoutes.Value,
                      StringComparison.CurrentCultureIgnoreCase
                    ) == 0 &&
                    ReInsert.Tag != null &&
                    !String.IsNullOrEmpty(ReInsert.Tag.ToString()) &&
                    ReInsert.Tag.ToString() == '1'
                  ) {
                    ReInsert.IsSelected = true;
                  }
                }
              );
            }
          );
        } else if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.InfusionContinousSeq.SequentialRoute != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
          objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes !=
            null &&
          objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes
            .Count > 0
        ) {
          objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.ForEach(
            (ReInsert) => {
              if (
                String.Compare(
                  ReInsert.Value,
                  this.InfusionContinousSeq.SequentialRoute.Value,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 &&
                ReInsert.Tag != null &&
                !String.IsNullOrEmpty(ReInsert.Tag.ToString()) &&
                ReInsert.Tag.ToString() == '1'
              ) {
                ReInsert.IsSelected = true;
              }
            }
          );
        }
        this.DoSeqItemDeliveryDeviceDisableRateOUM();
        objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder =
          this.InfusionContinousSeq.SequentialItemOrder;
        let PreviousStartDTTM: DateTime = DateTime.MinValue;
        let PreviousStartPrescriptionTime: DateTime = DateTime.MinValue;
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
          String.Equals(
            objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
            '1'
          ) &&
          ((objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .CurrentSequentialOrder > 1 &&
            objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder <= 0) ||
            objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder > 1)
        ) {
          isNextScheduleExists = objNewItemVM.IsNextSeqSlotExists(
            this.InfusionContinousSeq,
            objNewItemVM,
            (o1) => {
              PreviousStartDTTM = o1;
            },
            (o2) => {
              PreviousStartPrescriptionTime = o2;
            }
          );
          if (isNextScheduleExists) {
            objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
              PreviousStartDTTM;
            objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
              PreviousStartPrescriptionTime;
          } else {
            objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
              DateTime.MinValue;
          }
        }
        if (
          objNewItemVM != null &&
          objNewItemVM.FormViewerDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null &&
          !(
            objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
            String.Equals(
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
              InfusionTypeCode.INTERMITTENT
            )
          )
        ) {
          objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes =
            objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .AdministrationScheduleTimes != null &&
            objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .AdministrationScheduleTimes.Count > 0
              ? null
              : objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                  .AdministrationScheduleTimes;
        }
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateNumeratorUom.Value.length > 0 &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .InfRateDinominatorUom.Value.length > 0
        ) {
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionrateCalculator =
            false;
        }
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder != 1
        )
          objNewItemVM.DisableDefaultSubSeqItems(false);
        else objNewItemVM.DisableDefaultSubSeqItems(true);
        objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData =
          this.InfusionContinousSeq;
        objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsCurrentgrdResolveIndex =
          this.InfusionContinousSeq.IsCurrentgrdResolveIndex + 1;
      } else if (
        objNewItemVM.ActionCode == ActivityTypes.Reorder &&
        objNewItemVM.IsControlledDrug == '1' &&
        PatientContext.PrescriptionType != PrescriptionTypes.Clerking
      ) {
        if (this.ReorderSeqItemsCount != 0)
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq =
            this.ReorderSeqItemsCount;
        objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc =
          '{Sequential prescription #' +
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder +
          ' of ' +
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .TotalCountSeq +
          '}';
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .TotalCountSeq !=
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder
        ) {
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem =
            Visibility.Collapsed;
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType =
            false;
        } else {
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem =
            Visibility.Visible;
        }
        objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi =
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder == 0
            ? Visibility.Collapsed
            : Visibility.Visible;
        if (
          this.InfusionContinousSeq != null &&
          this.InfusionContinousSeq.IsSequentialPrescribing == true
        )
          objNewItemVM.DisableDefaultSubSeqItems(false);
      } else if (
        objNewItemVM.ActionCode == ActivityTypes.Amend &&
        this.InfusionContinousSeq != null &&
        this.InfusionContinousSeq.IsSequentialPrescribing == true &&
        this.InfusionContinousSeq.IsFirstiteminseq
      ) {
        if (
          objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
          String.Equals(
            objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
            '1'
          )
        ) {
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc =
            '{Sequential prescription # 1 of 1 }';
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi =
            Visibility.Visible;
          let TotalCountSequential = this.MedsResolve.Where(
            (ototal) =>
              ototal.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder != 0 &&
              String.Compare(
                ototal.PrescriptionItemStatus,
                'MEDStatus3',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              ((String.Compare(
                ototal.PrescriptionItemStatus,
                'MEDStatus14',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
                String.IsNullOrEmpty(ototal.OperationMode)) ||
                String.Compare(
                  ototal.PrescriptionItemStatus,
                  'MEDStatus14',
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0) &&
              String.Compare(
                ototal.PrescriptionItemStatus,
                'MEDStatus2',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber > 0 &&
              ototal.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber ==
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber
          )
            .GroupBy(
              (ototal) =>
                ototal.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber
            )
            .Select((g) => g.Count)
            .ToList();
          if (TotalCountSequential != null && TotalCountSequential.Count > 0) {
            if (
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder != TotalCountSequential[0]
            ) {
              if (TotalCountSequential[0] == 1)
                objNewItemVM.FormViewerDetails.BasicDetails.IsenableRoute =
                  true;
              else if (TotalCountSequential[0] >= 2) {
                objNewItemVM.FormViewerDetails.BasicDetails.IsenableRoute =
                  false;
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsenableInfusionType =
                  false;
              }
            }
          }
        }
      } else {
        if (
          objNewItemVM != null &&
          objNewItemVM.FormViewerDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .GroupSequenceNo > 0 &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ItemSequenceNo != 1 &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ItemSequenceNo != 0
        )
          objNewItemVM.DisableDefaultSubSeqItems(false);
        else objNewItemVM.DisableDefaultSubSeqItems(true);
        if (this.MedsResolve != null) {
          let TotalCountSequential = this.MedsResolve.Where(
            (ototal) =>
              ototal.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder != 0 &&
              String.Compare(
                ototal.PrescriptionItemStatus,
                'MEDStatus3',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              ((String.Compare(
                ototal.PrescriptionItemStatus,
                'MEDStatus14',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
                String.IsNullOrEmpty(ototal.OperationMode)) ||
                String.Compare(
                  ototal.PrescriptionItemStatus,
                  'MEDStatus14',
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0) &&
              String.Compare(
                ototal.PrescriptionItemStatus,
                'MEDStatus2',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber > 0 &&
              ototal.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber ==
                objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber
          )
            .GroupBy(
              (ototal) =>
                ototal.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber
            )
            .Select((g) => g.Count)
            .ToList();
        }
        if (this.InfusionContinousSeq == null) {
          this.InfusionContinousSeq = new InfContinousSequentail();
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData =
            new InfContinousSequentail();
        }
        if (
          objNewItemVM != null &&
          objNewItemVM.FormViewerDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails != null &&
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null
        ) {
          objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsContisequenceDisplayordervisi =
            objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder == 0
              ? Visibility.Collapsed
              : Visibility.Visible;
        }
      }
    } else if (
      objNewItemVM != null &&
      objNewItemVM.FormViewerDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null
    ) {
      objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsAddSequentialPresitem =
        Visibility.Collapsed;
      if (this.InfusionContinousSeq != null) {
        this.InfusionContinousSeq = new InfContinousSequentail();
      }
      objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData =
        new InfContinousSequentail();
    }
  }
  //public delegate void FormViewerCloseEventhandler(AppDialogResult oAppDialogResult);
  public formViewerCloseEventhandler: Function;
  public oAppDialogResultClick : AppDialogResult;
  private RestoreOldValues(): void {
    this.objNewItemVM.FormViewerDetails.BasicDetails.TechvalMsgResetAmend =
      true;
    let oManageReviewPeriod: IPPMAManagePrescSer.ManageReviewPeriod = null;
    if (this.objNewItemVM.FormViewerDetails != null) {
      this.cFollowUpOrStat = '\0';
      let IsRestoreAdhocToPreDefinedMCI: boolean = false;
      let IsFormValueForAdhocMCI: boolean =
        this.objNewItemVM.FormViewerDetails.BasicDetails.isAdhocitem;
      if (this.objNewItemVM.FormViewerDetails.BasicDetails != null) {
        oManageReviewPeriod =
          this.objNewItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .TitratedDoseDetails != null
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.isFormCancel =
            true;
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsStepDoseStartDTTMRestored =
          true;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsRestoreOldValues =
          true;
        let ReasonforModifcation: CListItem = new CListItem();
        ReasonforModifcation =
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .ReasonforModification;
        let IsPrevenableRSNFORMOD: boolean =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableRSNFORMOD;
        let IsPrevModificationReasonExists: boolean =
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsModificationReasonExists;
        let IsPrevMandatoryRSNFORMOD: boolean = false;
        if(this.objNewItemVM.FormViewerDetails.BHasFormViewParams){
          IsPrevMandatoryRSNFORMOD = false;
        }else{
          IsPrevMandatoryRSNFORMOD = this.objNewItemVM.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD;
        }
        let IsEnableoOadmission: boolean = true;
        let IsVisibleOnadmission: Visibility = Visibility.Collapsed;
        let IsOnadmission: boolean = false;
        let IsExistsonadmission: string = '0';
        IsExistsonadmission =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.CareTaker.Memento !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.CareTaker.Memento
            .Count != 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
            false;
          this.objNewItemVM.FormViewerDetails.BasicDetails.Restore(
            this.objNewItemVM.FormViewerDetails.BasicDetails.CareTaker
              .Memento[0]
          );
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
            true;
          IsExistsonadmission =
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsExistsOnAdmission;
          IsEnableoOadmission =
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsEnableOnadmission;
          IsVisibleOnadmission =
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsVisibleOnadmission;
          IsOnadmission =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission;
          if (
            (this.objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
              this.objNewItemVM.ActionCode == ActivityTypes.Reorder) &&
            this.objNewItemVM.OperationMode.Equals('N') &&
            IsFormValueForAdhocMCI &&
            !this.objNewItemVM.FormViewerDetails.BasicDetails.isAdhocitem &&
            this.objNewItemVM.IsConflictDisabled &&
            String.Equals(
              this.objNewItemVM.ItemSubType,
              CConstants.SUBTYPE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            IsRestoreAdhocToPreDefinedMCI = true;
          }
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsAllowMultiRoute &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .Routes != null
          ) {
            let oRoute: CListItem =
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route;
            let RouteOIDs: string[] = oRoute.Value.Split('/');
            if (RouteOIDs.Count() > 0) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.ForEach(
                (ReInsert) => {
                  if (RouteOIDs.Contains(ReInsert.Value)) {
                    ReInsert.IsSelected = true;
                  } else {
                    ReInsert.IsSelected = false;
                  }
                }
              );
            }
          }
          let Istypeindrug: boolean =
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.NONCATALOGUEITEM
            ) == 0 ||
            String.Compare(
              this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.Precatalog
            ) == 0
              ? true
              : false;
          let IsMCI: boolean =
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType
            ) &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
              'CC_MULCMPNTITM',
              StringComparison.CurrentCultureIgnoreCase
            )
              ? true
              : false;
          let DrugAsCD: boolean =
            (this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm ==
              null ||
              (this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm !=
                null &&
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm
                    .Value
                ))) &&
            (this.objNewItemVM.FormViewerDetails.BasicDetails.Route == null ||
              (this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
                ))) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.VMDrugProperties !=
              null &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.CurrentCultureIgnoreCase
            );
          if (
            !Istypeindrug &&
            !IsMCI &&
            !this.objNewItemVM.FormViewerDetails.BasicDetails.CDItemLevelVM &&
            (String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IdentifyingType,
                CConstants.ACTUALMOIETY,
                StringComparison.CurrentCultureIgnoreCase
              ))
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .VMRouteFormForCD ||
              DrugAsCD
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .DrugProperties != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties
                  .Count > 0 &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                  (x) =>
                    String.Equals(
                      x.DrugPropertyCode,
                      CConstants.DrugPropertyCNTRLDDRUG,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                ).Count() == 0
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties.Add(
                  ObjectHelper.CreateObject(
                    new IPPMAManagePrescSer.DrugProperty(),
                    {
                      DrugPropertyCode: CConstants.DrugPropertyCNTRLDDRUG,
                      OccuranceCode: CConstants.AllChild_CC,
                      VMChildCode: CConstants.AllChild_CC,
                    }
                  )
                );
              }
            } else {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .DrugProperties != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties
                  .Count > 0 &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                  (x) =>
                    String.Equals(
                      x.DrugPropertyCode,
                      CConstants.DrugPropertyCNTRLDDRUG,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                ).Count() > 0
              ) {
                let toRemove =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                    (c) =>
                      String.Equals(
                        c.DrugPropertyCode,
                        CConstants.DrugPropertyCNTRLDDRUG
                      )
                  ).ToList();
                toRemove.forEach((item) => {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties.Remove(
                    item
                  );
                });
              }
            }
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
              .CareTaker.Memento.Count != 0
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin.Restore(
              this.objNewItemVM.FormViewerDetails.BasicDetails.RecordAdmin
                .CareTaker.Memento[0]
            );
          }
        }
        if (
          this.objNewItemVM.iSSupplyrequest != null &&
          !String.IsNullOrEmpty(this.SupplyStatusBackup)
        ) {
          this.objNewItemVM.SelectedSupplyreq =
            this.objNewItemVM.iSSupplyrequest
              .Where(
                (x) =>
                  x != null &&
                  !String.IsNullOrEmpty(x.Value) &&
                  String.Equals(
                    x.Value,
                    this.SupplyStatusBackup,
                    StringComparison.InvariantCultureIgnoreCase
                  )
              )
              .FirstOrDefault();
        }
        this.objNewItemVM.TvTrafficSymbol = this.TrafficSymbolBkup;
        if (this.ProdOpt != null) {
          if (
            this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
            this.objNewItemVM.FormViewerDetails.TechValidateDetails
              .TechValidatedItems != null
          ) {
            let dosecomb =
              this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
                (x) =>
                  x.IsDoseCombinationsDefined != '\0' &&
                  x.IsDoseCombinationsDefined == '1' &&
                  (x.FluidPrescribableItemListOID == null || x.FluidPrescribableItemListOID == 0)
              ).ToList();
            dosecomb.forEach((item) => {
              this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Remove(
                item
              );
            });
          }
          let noofdosecomb: number = this.ProdOpt.OperationMode.Count();
          for (let i: number = 0; i < noofdosecomb; i++) {
            if (
              this.objNewItemVM.FormViewerDetails.TechValidateDetails
                .TechValidatedItems == null
            )
              this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems =
                new ObservableCollection<CustomTechValidatedItem>();
            let TVProd: CustomTechValidatedItem = new CustomTechValidatedItem();
            TVProd.QuantityPerDose = this.ProdOpt.Quantity[i];
            TVProd.QuantityPerDoseUOM = new IPPMAManagePrescSer.ObjectInfo();
            TVProd.QuantityPerDoseUOM.OID = this.ProdOpt.QuantityUOMOID[i];
            TVProd.QuantityPerDoseUOM.Name = this.ProdOpt.QuantityUOMName[i];
            TVProd.TotalQuantity = this.ProdOpt.TotalQuantity[i];
            TVProd.TotalQuantityUOM = new IPPMAManagePrescSer.ObjectInfo();
            TVProd.TotalQuantityUOM.OID = this.ProdOpt.TotalQuantityUOMOID[i];
            TVProd.TotalQuantityUOM.Name = this.ProdOpt.TotalQuantityUOMName[i];
            TVProd.FluidPrescribableItemListOID =
              this.ProdOpt.FluidPrescribableItemListOID[i];
            TVProd.PrescriptionItemTechOID =
              this.ProdOpt.PrescriptionItemTechOID[i];
            TVProd.OperationMode = this.ProdOpt.OperationMode[i];
            TVProd.IsDoseCombinationsDefined = '1';
            TVProd.SupComments = this.ProdOpt.Supplycomments[i];
            if (
              this.ProdOpt.Supplyinstruction[i] != null &&
              this.ProdOpt.Supplyinstruction[i].Count > 0
            ) {
              let obs: ObservableCollection<CListItem> =
                new ObservableCollection<CListItem>();
              let col: ObservableCollection<IPPMAManagePrescSer.ObjectInfo> =
                new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
              obs = this.ProdOpt.Supplyinstruction[i];
              for (let j: number = 0; j < obs.Count; j++) {
                let obj: IPPMAManagePrescSer.ObjectInfo =
                  new IPPMAManagePrescSer.ObjectInfo();
                obj.Code = obs[j].Value;
                obj.Name = obs[j].DisplayText;
                col.Add(obj);
              }
              TVProd.SupplyInstruction = col;
            }
            TVProd.SupplyInstructionText =
              this.ProdOpt.SupplyInstructionText[i];
            TVProd.selectedSupplyInstruction =
              this.ProdOpt.SelectedSupplyinstruction[i];
            TVProd.bMultiCompChilds = this.ProdOpt.bMultiCompChilds[i];
            TVProd.ProdSupplyInsWithComments =
              this.ProdOpt.ProdSupplyInsWithComments[i];
            TVProd.DrugItem = new IPPMAManagePrescSer.DrugItemBasicData();
            TVProd.DrugItem.IdentifyingOID = this.ProdOpt.IdentifyingOID[i];
            TVProd.DrugItem.IdentifyingName = this.ProdOpt.IdentifyingName[i];
            TVProd.DrugItem.IdentifyingType = this.ProdOpt.IdentifyingType[i];
            TVProd.DrugItem.PrescribableItemListOID =
              this.ProdOpt.PrescribableItemListOID[i];
            this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Add(
              TVProd
            );
          }
        }
        if (
          this.objNewItemVM.DoseCalculationDetails != null &&
          this.objNewItemVM.DoseCalculationDetails.CareTaker.Memento != null &&
          this.objNewItemVM.DoseCalculationDetails.CareTaker.Memento.Count != 0
        ) {
          this.objNewItemVM.DoseCalculationDetails.Restore(
            this.objNewItemVM.DoseCalculationDetails.CareTaker.Memento[0]
          );
        } else if (this.objNewItemVM.DoseCalculationDetails != null) {
          this.objNewItemVM.DoseCalculationDetails = null;
          this.objNewItemVM.IsDoseCalcPerformed = false;
        } else if (this.oDoseCalculationForClone != null) {
          this.objNewItemVM.DoseCalculationDetails =
            this.oDoseCalculationForClone;
          this.objNewItemVM.IsDoseCalcPerformed = true;
        }
        if (this.oDoseCalcDefaultForClone != null) {
          this.objNewItemVM.oDoseCalcDefault = this.oDoseCalcDefaultForClone;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null
        ) {
          let oSelInfusionNumUOM: CListItem = new CListItem();
          let oSelInfBolusUOM: CListItem = new CListItem();
          let oSelInfBoosterUOM: CListItem = new CListItem();
          let oSelSequenceName: CListItem = new CListItem();
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SelectedSequenceName != null              
          ) {
            if (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SelectedSequenceName.Value == '0')

              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SelectedSequenceName = null;
            else
              oSelSequenceName = ObjectHelper.CreateObject(new CListItem(), {
                Value:
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .SelectedSequenceName.Value,
                DisplayText:
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                    .SelectedSequenceName.DisplayText,
              });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionRateNumValue != null
          ) {
            oSelInfusionNumUOM = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionRateNumValue.Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .InfusionRateNumValue.DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.InfusionRateNumValue.Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .Boosterdoseuom != null
          ) {
            oSelInfBoosterUOM = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .Boosterdoseuom.Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .Boosterdoseuom.DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.Boosterdoseuom.Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .BolusUOM != null
          ) {
            oSelInfBolusUOM = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .BolusUOM.Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .BolusUOM.DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.BolusUOM.Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .CareTaker.Memento.Count != 0
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Restore(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .CareTaker.Memento[0]
            );
          if (
            oSelInfusionNumUOM != null &&
            !String.IsNullOrEmpty(oSelInfusionNumUOM.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .InfusionRateNumValue == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.InfusionRateNumValue =
              oSelInfusionNumUOM;
          }
          if (
            oSelInfBoosterUOM != null &&
            !String.IsNullOrEmpty(oSelInfBoosterUOM.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .Boosterdoseuom == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.Boosterdoseuom =
              oSelInfBoosterUOM;
          }
          if (
            oSelInfBolusUOM != null &&
            !String.IsNullOrEmpty(oSelInfBolusUOM.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .BolusUOM == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.BolusUOM =
              oSelInfBolusUOM;
          }
          if (
            oSelSequenceName != null &&
            !String.IsNullOrEmpty(oSelSequenceName.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SelectedSequenceName == null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo > 0
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SelectedSequenceName =
              oSelSequenceName;
          }
        }
        if (
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM != null &&
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.CareTaker.Memento !=
            null &&
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.CareTaker.Memento
            .Count != 0
        ) {
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.Restore(
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.CareTaker
              .Memento[0]
          );
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstDRCAmendedFlds =
          new List<string>();
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsModificationReasonExists =
          IsPrevModificationReasonExists;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableRSNFORMOD =
          IsPrevenableRSNFORMOD;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsMandatoryRSNFORMOD =
          IsPrevMandatoryRSNFORMOD;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .IsModificationReasonExists
        )
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
            ReasonforModifcation;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .CareTaker.Memento.Count != 0
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.Restore(
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                .CareTaker.Memento[0]
            );
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .AdministrationScheduleTimes != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .AdministrationScheduleTimes.Count > 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[0].CareTaker.Memento.Count >
              0
          ) {
            for (
              let i: number = 0;
              i <
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                .AdministrationScheduleTimes.Count;
              i++
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes[
                i
              ].Restore(
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                  .AdministrationScheduleTimes[i].CareTaker.Memento[0]
              );
            }
          }
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .OriginalMultiDoseDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .OriginalMultiDoseDetails.Count > 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalMultiDoseDetails[0].CareTaker.Memento.Count >
            0
        ) {
          let iTotalCount: number =
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .OriginalMultiDoseDetails.Count;
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Clear();
          for (let i: number = 0; i < iTotalCount; i++) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Add(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .OriginalMultiDoseDetails[i]
            );
            this.objNewItemVM.FormViewerDetails.BasicDetails.RestoreSelectedDoseDetail(
              this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[
                i
              ]
            );
          }
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .ConditionalDosingDetails != null
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ConditionalDosingDetails.CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ConditionalDosingDetails.CareTaker.Memento.Count != 0
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.Restore(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ConditionalDosingDetails.CareTaker.Memento[0]
            );
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ConditionalDosingDetails.DoseDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ConditionalDosingDetails.DoseDetails.Count > 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails[0].CareTaker.Memento.Count >
              0
          ) {
            for (
              let i: number = 0;
              i <
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ConditionalDosingDetails.DoseDetails.Count;
              i++
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails[
                  i
                ].CareTaker.Memento.Count > 0
              )
                this.objNewItemVM.FormViewerDetails.BasicDetails.ConditionalDosingDetails.DoseDetails[
                  i
                ].Restore(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ConditionalDosingDetails.DoseDetails[i].CareTaker
                    .Memento[0]
                );
            }
          }
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails !=
          null
        ) {
          let oSelFreq: CListItem = new CListItem();
          let oSelRoute: CListItem = new CListItem();
          let oSelDosageForm: CListItem = new CListItem();
          let oSelDoseUOM: CListItem = new CListItem();
          let oSelSite: CListItem = new CListItem();
          let oSelStrength: CListItem = new CListItem();
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency != null
          ) {
            oSelFreq = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency
                  .Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency
                  .DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency
                .Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null
          ) {
            oSelRoute = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Route
                  .DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm != null
          ) {
            oSelDosageForm = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm
                  .Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm
                  .DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm
                .Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM != null
          ) {
            oSelDoseUOM = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM.Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM
                  .DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM.Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Site != null
          ) {
            oSelSite = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Site.Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Site
                  .DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails.Site.Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Strength != null
          ) {
            oSelStrength = ObjectHelper.CreateObject(new CListItem(), {
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Strength.Value,
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Strength
                  .DisplayText,
              Tag: this.objNewItemVM.FormViewerDetails.BasicDetails.Strength
                .Tag,
            });
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .CareTaker.Memento != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .CareTaker.Memento.Count != 0
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Restore(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
                .CareTaker.Memento[0]
            );
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .Routes != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .Routes.Count > 0
          ) {
            let selectedRoutes: string[] =
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value
              )
                ? this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Value.Split(
                    ','
                  )
                : null;
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.forEach(
              (MultiRoute) => {
                if (selectedRoutes != null && selectedRoutes.length > 0) {
                  selectedRoutes.forEach((item) => {
                    if (item == MultiRoute.Value && !MultiRoute.IsSelected) {
                      MultiRoute.IsSelected = true;
                    }
                  });
                }
              }
            );
          }
          if (
            oSelFreq != null &&
            !String.IsNullOrEmpty(oSelFreq.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency =
              oSelFreq;
          }
          if (
            oSelRoute != null &&
            !String.IsNullOrEmpty(oSelRoute.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route = oSelRoute;
          }
          if (
            oSelDosageForm != null &&
            !String.IsNullOrEmpty(oSelDosageForm.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm =
              oSelDosageForm;
          }
          if (
            oSelDoseUOM != null &&
            !String.IsNullOrEmpty(oSelDoseUOM.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM =
              oSelDoseUOM;
          }
          if (
            oSelSite != null &&
            !String.IsNullOrEmpty(oSelSite.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Site == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.Site = oSelSite;
          }
          if (
            oSelStrength != null &&
            !String.IsNullOrEmpty(oSelStrength.Value) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Strength == null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.Strength =
              oSelStrength;
          }
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableOnadmission =
          IsEnableoOadmission;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsVisibleOnadmission =
          IsVisibleOnadmission;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission =
          IsOnadmission;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
          IsExistsonadmission;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsStepDoseStartDTTMRestored =
          false;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsRestoreOldValues =
          false;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .TitratedDoseDetails != null
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.isFormCancel =
            false;
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsCancelClick = false;
      }
      if (this.oConflictsVM != null) {
        this.objNewItemVM.FormViewerDetails.ConflictDetails = this.oConflictsVM;
        this.oConflictsVM = null;
      }
      if (
        this.oMulticomponentVM != null &&
        this.oMulticomponentVM.oMCItemBasicInfo != null
      ) {
        this.objNewItemVM.FormViewerDetails.MulticomponentDetails =
          this.oMulticomponentVM;
        this.oMulticomponentVM = null;
      }
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails !=
        null
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
            .CareTaker.Memento != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
            .CareTaker.Memento.Count > 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails.Restore(
            this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
              .CareTaker.Memento[0]
          );
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
            .GrdTitrated != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
            .GrdTitrated.Count > 0
        ) {
          let nGridRowCount: number =
            this.objNewItemVM.FormViewerDetails.BasicDetails.TitratedDoseDetails
              .GrdTitrated.Count;
          for (let i: number = 0; i < nGridRowCount; i++) {
            let oTitratedScheduleDtl: TitratedScheduleDetails =
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .TitratedDoseDetails.GrdTitrated[i];
            if (
              oTitratedScheduleDtl != null &&
              oTitratedScheduleDtl.CareTaker.Memento != null &&
              oTitratedScheduleDtl.CareTaker.Memento.Count > 0
            ) {
              oTitratedScheduleDtl.Restore(
                oTitratedScheduleDtl.CareTaker.Memento[0]
              );
            }
          }
        }
      }
      this.objNewItemVM.IsTechValidateMandatory = this.IsTechValMandatory;
      if (
        oManageReviewPeriod != null &&
        oManageReviewPeriod.oReviewAfterDetail != null &&
        !String.IsNullOrEmpty(
          oManageReviewPeriod.oReviewAfterDetail.DiscontinueReason
        )
      ) {
        let objResGridElement: PrescriptionItemVM = this.MedsResolve.Where(
          (x) => x.PrescriptionItemOID == this.objNewItemVM.PrescriptionItemOID
        ).FirstOrDefault();
        objResGridElement.DiscontinueCancelReason = new CListItem();
        objResGridElement.OperationMode = 'M';
        objResGridElement.DiscontinueCancelReason.DisplayText =
          oManageReviewPeriod.oReviewAfterDetail.DiscontinueReason;
        objResGridElement.FormViewerDetails.BasicDetails.DiscontinueReason =
          objResGridElement.DiscontinueCancelReason.DisplayText;
        objResGridElement.PrescriptionItemStatus = CConstants.DISCONTINUED;
        objResGridElement.DiscontinueCancelAction = 'Discontinue';
        objResGridElement.IsItemDisOrCan = true;
        objResGridElement.FormViewerDetails.BasicDetails.ManageReviewDetail =
          oManageReviewPeriod;
      }
      if (
        this.oConflictsVM == null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.ConflictDetails != null &&
        this.objNewItemVM.FormViewerDetails.ConflictDetails.Count > 0
      ) {
        let objGridElement: PrescriptionItemVM = this.MedsResolve.Where(
          (x) => x.PrescriptionItemOID == this.objNewItemVM.PrescriptionItemOID
        ).FirstOrDefault();
        if (IsRestoreAdhocToPreDefinedMCI) {
          this.objNewItemVM.FormViewerDetails.ConflictDetails = null;
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.MulticomponentDetails != null &&
            this.objNewItemVM.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo != null &&
            this.objNewItemVM.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count > 0
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'F'
              ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'S'
              )
            ) {
              if (
                this.MedsResolve != null &&
                this.MedsResolve.Count > 0 &&
                this.objNewItemVM.ActionCode != ActivityTypes.Amend
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ParentUniqueIDofSTAT > 0
                ) {
                  let oParentItem: PrescriptionItemVM = this.MedsResolve.Where(
                    (s) =>
                      s.UniqueRowID ==
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .ParentUniqueIDofSTAT &&
                      !s.FormViewerDetails.BasicDetails.isAdhocitem
                  ).FirstOrDefault();
                  if (
                    oParentItem != null &&
                    oParentItem.FormViewerDetails != null &&
                    oParentItem.FormViewerDetails.MulticomponentDetails !=
                      null &&
                    oParentItem.FormViewerDetails.MulticomponentDetails
                      .oMCItemBasicInfo != null &&
                    oParentItem.FormViewerDetails.MulticomponentDetails
                      .oMCItemBasicInfo.Count > 0
                  ) {
                    oParentItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.ForEach(
                      (x) => (x.SealImage = String.Empty)
                    );
                  }
                }
              }
            } else {
              let oChildItem: PrescriptionItemVM = this.MedsResolve.Where(
                (s) =>
                  s.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT > 0 &&
                  s.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT ==
                    this.objNewItemVM.UniqueRowID &&
                  !s.FormViewerDetails.BasicDetails.isAdhocitem
              ).FirstOrDefault();
              if (
                oChildItem != null &&
                oChildItem.FormViewerDetails != null &&
                oChildItem.FormViewerDetails.MulticomponentDetails != null &&
                oChildItem.FormViewerDetails.MulticomponentDetails
                  .oMCItemBasicInfo != null &&
                oChildItem.FormViewerDetails.MulticomponentDetails
                  .oMCItemBasicInfo.Count > 0
              ) {
                oChildItem.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.ForEach(
                  (x) => (x.SealImage = String.Empty)
                );
              }
            }
          }
        }
        if (
          objGridElement != null &&
          objGridElement.FormViewerDetails != null &&
          !String.IsNullOrEmpty(objGridElement.PrescriptionItemStatus) &&
          !String.Equals(
            objGridElement.PrescriptionItemStatus,
            CConstants.DISCONTINUED,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            objGridElement.PrescriptionItemStatus,
            CConstants.COMPLETED,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            objGridElement.PrescriptionItemStatus,
            CConstants.CANCELLED,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          objGridElement.FormViewerDetails.ConflictDetails =
            this.objNewItemVM.FormViewerDetails.ConflictDetails;
        }
      }
    }
    this.objNewItemVM.FormViewerDetails.BasicDetails.TechvalMsgResetAmend =
      false;
  }
  
    objNFMC_Closed(args: AppDialogEventargs): void {
        this.oAppDialogWindow1 = args.AppChildWindow;   
        this.omedNonFormulary = args.Content && args.Content.Component ? args.Content.Component as medNonFormulary : this.omedNonFormulary;     
        if (args.Result == AppDialogResult.Ok) {            
            if (this.omedNonFormulary.OKButtonClick()) {
                let sOID: string = String.Empty;
                let sType: string = String.Empty;
                let sName: string = String.Empty;
                let sFormularyNote: string = String.Empty;
                let NonFormularyReason: CListItem = ObjectHelper.CreateType<CListItem>(this.omedNonFormulary.cboReason.SelectedItem, CListItem);
                let sOtherNonFormularyReason: string = this.objNewItemVM.MCNonFormularyReason = this.objNewItemVM.MCOtherNonFormularyReason = String.Empty;
                let sMCnonformulary: string = String.Empty;
                sMCnonformulary = NonFormularyReason.Value.ToString();
                this.objNewItemVM.MCNonFormularyReason = NonFormularyReason.DisplayText;
                this.objNewItemVM.MCOtherNonFormularyReason = this.omedNonFormulary.txtOtherReason.Text;
                if (NonFormularyReason != null && String.Compare(NonFormularyReason.Value, "CC_OTHER") == 0) {
                    sOtherNonFormularyReason = this.omedNonFormulary.txtOtherReason.Text;
                }
                for (let rcount: number = 0; rcount < this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo.Count; rcount++) {
                    if (this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].IsNonFormulary == true) {
                        this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].Nonformularyreason = sMCnonformulary;
                        this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[rcount].OtherNonformularyreason = sOtherNonFormularyReason;
                    }
                }
                this.objNewItemVM.MCnonformularycheck = true;
                this.AddToResolveGrid();
                this.CallOrderSetSequence(this.orsseqcount);
                this.orsseqcount++;
                if (this.objRePresItmCollection != null && this.objRePresItmCollection.Count > 0) {
                    this.CallRePresSequence(this.represcseqcount);
                    this.represcseqcount++;
                }
                if (this.formViewerCloseEventhandler != null)
                    this.formViewerCloseEventhandler(args.Result);
                // this.oAppDialogWindow.DialogResult = true;
                // this.oAppDialogWindow1.DialogResult = true;                
                this.oAppDialogWindow1.DialogRef.close();   
                if(this.objFormViewer != null && this.objFormViewer.dupDialogRef != null)
                  this.objFormViewer.dupDialogRef.close();             
            }
            
        }
        else if (args.Result == AppDialogResult.Cancel) {
            this.omedNonFormulary.CancelButtonClick();
        }
    }
  
  public EnableReorderedItemAfterRemove(oRemoveItem: PrescriptionItemVM): void {
    if (
      oRemoveItem != null &&
      oRemoveItem.ActionCode == ActivityTypes.Reorder &&
      !String.IsNullOrEmpty(oRemoveItem.SourcePrescriptionType)
    ) {
      let SrcPrescriptionItems: ObservableCollection<PrescriptionItemVM> = null;
      switch (oRemoveItem.SourcePrescriptionType) {
        case PrescriptionTypes.Clerking:
          SrcPrescriptionItems = this.MedsClerked;
          break;
        case PrescriptionTypes.Outpatient:
          SrcPrescriptionItems = this.MedsOutPatient;
          break;
        case PrescriptionTypes.Leave:
          SrcPrescriptionItems = this.MedsLeave;
          break;
        case PrescriptionTypes.Discharge:
          SrcPrescriptionItems = this.MedsDischarge;
          break;
        case PrescriptionTypes.ForAdministration:
          SrcPrescriptionItems = this.MedsInPatient;
          break;
      }
      if (SrcPrescriptionItems != null) {
        let sourceItems: IEnumerable<PrescriptionItemVM> =
          SrcPrescriptionItems.Where(
            (item) =>
              item.PrescriptionItemOID == oRemoveItem.SourcePrescriptionOid ||
              item.PrescriptionItemOID ==
                oRemoveItem.SourcePrevEncPrescriptionOid
          ).Select((item) => item);
        if (sourceItems != null && sourceItems.Count() > 0) {
          let _sourceItem: PrescriptionItemVM = sourceItems.First();
          if (_sourceItem != null) {
            _sourceItem.IsReoderIconEnable = true;
            _sourceItem.ReorderToolTip = 'Select to copy across';
            if (
              _sourceItem.FormViewerDetails != null &&
              _sourceItem.FormViewerDetails.BasicDetails != null &&
              _sourceItem.FormViewerDetails.BasicDetails.InfusionDetails !=
                null &&
              _sourceItem.FormViewerDetails.BasicDetails.InfusionDetails
                .OriginalSequenceOrderno > 0
            ) {
              _sourceItem.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
                _sourceItem.FormViewerDetails.BasicDetails.InfusionDetails.OriginalSequenceOrderno;
            }
          }
        }
      }
    }
  }
  private RemoveFromResolveGrid(): void {
    if (this.MedsResolve != null && this.objNewItemVM != null) {
      let IsRemoveSeqItem: boolean = false;
      let oVmRemoveItem: PrescriptionItemVM = this.objNewItemVM;
      if (
        this.objNewItemVM.ActionCode == ActivityTypes.Prescribe &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
        (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypeCode.CONTINUOUS ||
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
            InfusionTypeCode.SINGLEDOSEVOLUME ||
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
            InfusionTypeCode.FLUID) &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .SequentialItemOrder != 0 &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .SequentialItemOrder > 0
      ) {
        IsRemoveSeqItem = true;
        if (this.InfusionContinousSeq != null) {
          this.InfusionContinousSeq.SequentialItemOrder =
            this.InfusionContinousSeq.SequentialItemOrder - 1;
        }
        let oMsgBox: iMessageBox = ObjectHelper.CreateObject(
          new iMessageBox(),
          {
            Title: 'LORENZO',
            Message: Resource.Infusion.SequentialRemove_Message,
            MessageButton: MessageBoxButton.OK,
            IconType: MessageBoxType.Information,
          }
        );
        oMsgBox.Show();
      }
      let nIndex: number = this.MedsResolve.IndexOf(this.objNewItemVM);
      let UniqueGroupSequenceNo: number = 0;
      let IsIVSeqInfItem: boolean =
        !this.objNewItemVM.IsGroupHeader &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.formViewerDetails.BasicDetails.InfusionType != null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.formViewerDetails.BasicDetails.InfusionType.Value
        ) &&
        this.objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails
          .GroupSequenceNo > 0 &&
        this.objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails
          .ItemSequenceNo > 0;
      let IsNonIVSeqInfItem: boolean =
        !this.objNewItemVM.IsGroupHeader &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo != null &&
        this.objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo
          .GroupSequenceNo > 0 &&
        this.objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo
          .ItemSequenceNo > 0;
      let ItemSeqno: number = 0;
      let SeqFirstItemStartDTTM: DateTime = DateTime.MinValue;
      if (IsIVSeqInfItem) {
        UniqueGroupSequenceNo =
          this.objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails
            .GroupSequenceNo;
        ItemSeqno =
          this.objNewItemVM.formViewerDetails.BasicDetails.InfusionDetails
            .ItemSequenceNo;
        let objInfusionVM: InfusionVM = null;
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null &&
          this != null &&
          this.MedsResolve != null &&
          this.MedsResolve.Count > 0
        ) {
          objInfusionVM = CSequentialHelper.GetFirstActiveItemInfusionVM(
            this.MedsResolve,
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo
          );
        }
        if (
          objInfusionVM != null &&
          objInfusionVM.ItemSequenceNo == ItemSeqno
        ) {
          SeqFirstItemStartDTTM =
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .StartPrescriptionTime;
          this.MedsResolve.ForEach((SubSeqItems) => {
            if (
              !this.objNewItemVM.IsGroupHeader &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              SubSeqItems.FormViewerDetails.BasicDetails.InfusionDetails !=
                null &&
              SubSeqItems.FormViewerDetails.BasicDetails.InfusionDetails
                .GroupSequenceNo ==
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber > 0 &&
              SubSeqItems.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber > 0 &&
              SubSeqItems.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber ==
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .PrescriptionItemNumber &&
              !String.Equals(
                SubSeqItems.PrescriptionItemStatus,
                CConstants.CANCELLED,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              !String.Equals(
                SubSeqItems.PrescriptionItemStatus,
                CConstants.COMPLETED,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              !String.Equals(
                SubSeqItems.PrescriptionItemStatus,
                CConstants.DISCONTINUED,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              SubSeqItems.FormViewerDetails.BasicDetails.InfusionDetails
                .ItemSequenceNo >
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .ItemSequenceNo
            ) {
              SubSeqItems.FormViewerDetails.BasicDetails.StartDTTM =
                SeqFirstItemStartDTTM;
              SubSeqItems.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                SeqFirstItemStartDTTM;
            }
          });
          ItemSeqno = ItemSeqno + 1;
        }
        this.MedsResolve.Remove(this.objNewItemVM);
        if (UniqueGroupSequenceNo > 0) {
          CSequentialHelper.ReassignSequenceNoOnRemove(
            this.MedsResolve,
            UniqueGroupSequenceNo,
            eSequenceNoReassignType.ReassignWithinGroup,
            this
          );
          CSequentialHelper.ReSetStartEnd_DateTIme_OnAmend(
            this.MedsResolve,
            UniqueGroupSequenceNo,
            ItemSeqno,
            this.ActivityCode,
            this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
          );
        }
      } else if (IsNonIVSeqInfItem) {
        UniqueGroupSequenceNo =
          this.objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo
            .GroupSequenceNo;
        ItemSeqno =
          this.objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo
            .ItemSequenceNo;
        if (UniqueGroupSequenceNo > 0) {
          let objSequenceDetail: SequenceDetail = null;
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
              null &&
            this != null &&
            this.MedsResolve != null &&
            this.MedsResolve.Count > 0
          ) {
            objSequenceDetail =
              CommonSequentialHelper.GetFirstActiveItemSeqItemVM(
                this.MedsResolve,
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                  .GroupSequenceNo
              );
          }
          if (
            objSequenceDetail != null &&
            ItemSeqno == objSequenceDetail.ItemSequenceNo
          ) {
            SeqFirstItemStartDTTM =
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .StartPrescriptionTime;
            this.MedsResolve.ForEach((ReInsertDTTM) => {
              if (
                !this.objNewItemVM.IsGroupHeader &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
                  null &&
                ReInsertDTTM.FormViewerDetails.BasicDetails.SequenceInfo !=
                  null &&
                ReInsertDTTM.FormViewerDetails.BasicDetails.SequenceInfo
                  .GroupSequenceNo ==
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                    .GroupSequenceNo &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                  .PrescriptionItemNumber > 0 &&
                ReInsertDTTM.FormViewerDetails.BasicDetails.SequenceInfo
                  .PrescriptionItemNumber > 0 &&
                ReInsertDTTM.FormViewerDetails.BasicDetails.SequenceInfo
                  .PrescriptionItemNumber ==
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                    .PrescriptionItemNumber &&
                !String.Equals(
                  ReInsertDTTM.PrescriptionItemStatus,
                  CConstants.CANCELLED,
                  StringComparison.InvariantCultureIgnoreCase
                ) &&
                !String.Equals(
                  ReInsertDTTM.PrescriptionItemStatus,
                  CConstants.COMPLETED,
                  StringComparison.InvariantCultureIgnoreCase
                ) &&
                !String.Equals(
                  ReInsertDTTM.PrescriptionItemStatus,
                  CConstants.DISCONTINUED,
                  StringComparison.InvariantCultureIgnoreCase
                ) &&
                ReInsertDTTM.FormViewerDetails.BasicDetails.SequenceInfo
                  .ItemSequenceNo >
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                    .ItemSequenceNo
              ) {
                ReInsertDTTM.FormViewerDetails.BasicDetails.StartDTTM =
                  SeqFirstItemStartDTTM;
                ReInsertDTTM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                  SeqFirstItemStartDTTM;
              }
            });
            ItemSeqno = ItemSeqno + 1;
          }
          this.MedsResolve.Remove(this.objNewItemVM);
          CommonSequentialHelper.ReassignSequenceNoOnRemove(
            this.MedsResolve,
            UniqueGroupSequenceNo,
            eCommonSequenceNoReassignType.ReassignWithinGroup,
            this
          );
          CommonSequentialHelper.ReSetStartEnd_DateTIme_OnAmend(
            this.MedsResolve,
            UniqueGroupSequenceNo,
            ItemSeqno,
            this.ActivityCode,
            this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
          );
        }
      } else {
        this.MedsResolve.Remove(this.objNewItemVM);
      }
      this.EnableReorderedItemAfterRemove(this.objNewItemVM);
      this.UpdateConflicts(nIndex, String.Empty);
      if (IsRemoveSeqItem) this.DoRearrangaeSeqNumber(oVmRemoveItem);
    }
  }
  private DoRearrangaeSeqNumber(RemoveItem: PrescriptionItemVM): void {
    let ItemOrder: number = 1;
    let GetSequential = this.MedsResolve.Where(
      (c) =>
        c.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder >
          0 &&
        c.FormViewerDetails.BasicDetails.InfusionDetails
          .PrescriptionItemNumber ==
          RemoveItem.FormViewerDetails.BasicDetails.InfusionDetails
            .PrescriptionItemNumber
    )
      .Select((s) => s)
      .OrderBy(
        (oSelectorder) =>
          oSelectorder.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder
      );
    if (GetSequential != null && GetSequential.Count() > 0) {
      this.MedsResolve.ForEach((ReInsert) => {
        if (GetSequential.Contains(ReInsert)) {
          ReInsert.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
            ItemOrder;
          ReInsert.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
            Visibility.Visible;
          ReInsert.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
            Visibility.Visible;
          if (
            ReInsert.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder == 1 &&
            RemoveItem.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder == 1
          )
            ReInsert.FormViewerDetails.BasicDetails.StartDTTM =
              RemoveItem.FormViewerDetails.BasicDetails.StartDTTM;
          ItemOrder = ItemOrder + 1;
        }
      });
      if (
        this != null &&
        this.InfusionContinousSeq != null &&
        this.InfusionContinousSeq.SequentialItemOrder > 0
      )
        this.InfusionContinousSeq.SequentialItemOrder -= 1;
    } else this.InfusionContinousSeq = null;
  }
  private CheckWarnings(): void {
    if (
      FormviewerComboValues.ConflictsReason != null &&
      FormviewerComboValues.ConflictsReason.Count > 0
    ) {
      this.FormViewerReason = new ObservableCollection<CListItem>();
      FormviewerComboValues.ConflictsReason.forEach((oCTerms) => {
        this.FormViewerReason.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oCTerms.csDescription,
            Value: oCTerms.csCode,
          })
        );
      });
      this.objNewItemVM.FormViewerDetails.AuthoriseReason =
        this.FormViewerReason;
      this.objNewItemVM.FormViewerDetails.ClinicalVerifyReason =
        this.FormViewerReason;
      this.objNewItemVM.FormViewerDetails.ConflictsReason =
        this.FormViewerReason;
    } else {
      if (this.FormViewerReason == null) {
        ProcessRTE.GetValuesByDomainCode(
          ValueDomain.ConflictsReason,
          (s, e) => {
            this.OnRTEResult(s);
          }
        );
      } else {
        this.objNewItemVM.FormViewerDetails.AuthoriseReason =
          this.FormViewerReason;
        this.objNewItemVM.FormViewerDetails.ClinicalVerifyReason =
          this.FormViewerReason;
        this.objNewItemVM.FormViewerDetails.ConflictsReason =
          this.FormViewerReason;
      }
    }
    if (
      this.objNewItemVM.FormViewerDetails.ConflictDetails == null ||
      this.objNewItemVM.ActionCode == ActivityTypes.Amend
    ) {
      if (!this.MCIlink_click) {
        if (
          this.lUniqueRowIDForStatOrFollowup > 0 &&
          this.MedsResolve != null &&
          this.MedsResolve.Count > 0
        ) {
          let bItem = this.MedsResolve.Where(
            (x) => x.UniqueRowID == this.lUniqueRowIDForStatOrFollowup
          );
          if (bItem == null || (bItem != null && bItem.Count() == 0))
            bItem = this.MedsResolve.Where(
              (x) => x.UniqueRowItemID == this.lUniqueRowIDForStatOrFollowup
            );
          let oItem: PrescriptionItemVM = null;
          if (bItem != null && bItem.Count() > 0) oItem = bItem.First();
          this.lUniqueRowIDForStatOrFollowup = 0;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            (this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
              'F'
            ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
                'S'
              )) &&
            oItem != null &&
            oItem.FormViewerDetails != null &&
            oItem.FormViewerDetails.BasicDetails != null &&
            oItem.FormViewerDetails.BasicDetails.oPrescitemVM != null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.oPrescitemVM
                .LorenzoID
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.oPrescitemVM.LorenzoID.Equals(
              oItem.FormViewerDetails.BasicDetails.oPrescitemVM.LorenzoID
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.oPrescitemVM.ActionCode.Equals(
              ActivityTypes.Prescribe
            )
          ) {
            if (oItem.FormViewerDetails.ConflictDetails != null) {
              this.objNewItemVM.FormViewerDetails.ConflictDetails =
                new ObservableCollection<ConflictsVM>();
              let nConflictCount: number =
                oItem.FormViewerDetails.ConflictDetails.Count;
              //Not Required for LHS. To be Re-Visited.
              for (let i: number = 0; i < nConflictCount; i++) {
                  this.objNewItemVM.FormViewerDetails.ConflictDetails.Add(CommonClo.Clone(oItem.FormViewerDetails.ConflictDetails[i]));
              }
            }
            this.objNewItemVM_WarningsCompletedEvent(true);
          } else {
            this.objNewItemVM.AllergenCheck = false;
            this.objNewItemVM.GenerateConflictsForInpatient(this.MedsResolve);
          }
        } else {
          this.objNewItemVM.AllergenCheck = false;
          this.objNewItemVM.GenerateConflictsForInpatient(this.MedsResolve);
        }
      } else {
        this.ShowFormViewer();
        this.MCIlink_click = false;
      }
    } else {
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.OrdersetSequence !=
          null
      ) {
        this.AssociateSequenceForOrderSet();
      }
      this.AddToResolveGrid();
      ObjectHelper.stopFinishAndCancelEvent(false);
    }
  }
  //public delegate void ReBindResolveGrid(bool IsRepositionDrug, PrescriptionItemVM oItemVM, int ? index = 0, string sFrom = null);
  public ReBindResolveGridEvent: Function;
  //public delegate void EnableDisableSupplyInstruction();
  public EnableDisableSupplyInstructionEvent: Function;
  public objNewItemVM_WarningsGenerationCompleted(): void {
    let iWARCHK: number = 0;
    if (this.ActivityCode == ActivityTypes.UpdateWarning) {
      if (
        this.ReBindResolveGridEvent != null &&
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SelectedSequenceName == null ||
          (!String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SelectedSequenceName.Value
          ) &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SelectedSequenceName.Value,
              CConstants.NewSequenceCode,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          this.ReBindResolveGridEvent(false, this.objNewItemVM);
        } else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SelectedSequenceName != null
        ) {
          this.ReBindResolveGridEvent(true, this.objNewItemVM);
        }
      }
      this.CheckAndLaunchFollowStat();
    } else {
      if (
        this.objProcessingItemVM != null &&
        String.Compare(this.objProcessingItemVM.OperationMode, 'TM') == 0
      ) {
        iWARCHK = 1;
      }
      if (iWARCHK == 0) {
        if (
          String.Compare(
            CConstants.SUBTYPE,
            this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        )
          this.objNewItemVM.GetnamewithoutUOM();
        if (
          (this.objNewItemVM.FormViewerDetails.MulticomponentDetails != null &&
            this.objNewItemVM.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo != null &&
            this.objNewItemVM.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count > 0 &&
            (this.objNewItemVM.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count < 2 ||
              (this.objNewItemVM.FormViewerDetails.MulticomponentDetails
                .oMCItemBasicInfo[0].isQtyEditable &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SNamewithoutQuantitys
                )) ||
              (this.objNewItemVM.FormViewerDetails.MulticomponentDetails
                .oMCItemBasicInfo[0].isQtyUOMEditable &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SNamewithoutUOM
                )))) ||
          (this.objNewItemVM != null &&
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            ((this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingOID ==
              CommonFlags.MCidentifyingOID &&
              this.objNewItemVM.FormViewerDetails.MulticomponentDetails !=
                null &&
              this.objNewItemVM.FormViewerDetails.MulticomponentDetails
                .oMCItemBasicInfo != null &&
              this.objNewItemVM.FormViewerDetails.MulticomponentDetails
                .oMCItemBasicInfo.Count < 2) ||
              (String.Compare(
                this.objNewItemVM.FormViewerDetails.BasicDetails.BrandName,
                CConstants.SelectBrand
              ) == 0 &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IsBrandMandatory == Visibility.Visible)))
        ) {
          if (
            PatientContext.IsTurnONDRC &&
            this.objNewItemVM.ePrescribeSource == PrescribeSource.DOS &&
            this.ActivityCode == ActivityTypes.Prescribe &&
            !this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge &&
            this.objNewItemVM.CanPerformDRC(this.objNewItemVM)
          ) {
            this.objNewItemVM.PerformDRC(this.objNewItemVM);
          }
          this.ClearNonInfusiondata();
          this.ShowFormViewer();
        } else if (
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .isFormViewDataLoaded &&
          this.objNewItemVM.isAdhocitem == false &&
          ((this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails ==
              null) ||
            (this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .IsFluidConflictGen != '2'))
        ) {
          if (this.isDeactivatedAttributesExists()) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value
              ) &&
              (String.Compare(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypeCode.CONTINUOUS,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypeCode.SINGLEDOSEVOLUME,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 ||
                String.Compare(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypeCode.FLUID,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0) &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder > 0 &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber > 0 &&
              !this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                .DRCAcknowledge &&
              this.objNewItemVM.CanPerformDRC(this.objNewItemVM)
            ) {
              this.ClearNonInfusiondata();
              this.objNewItemVM.bDRCConflictGeToAddtoResolve = true;
              this.objNewItemVM.PerformDRC(this.objNewItemVM);
            } else if (
              !this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                .DRCAcknowledge &&
              this.objNewItemVM.CanPerformDRC(this.objNewItemVM)
            ) {
              this.ClearNonInfusiondata();
              this.objNewItemVM.bDRCConflictGeToAddtoResolve = true;
              this.LaunchDRCorShowFV(this.objNewItemVM);
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets !=
                  null &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets
                    .Value
                )
              )
                this.AddtoResolutionGriddone = false;
            } else if (
              this.ActivityCode != ActivityTypes.Amend &&
              String.Equals(
                this.objNewItemVM.ItemMainType,
                'CC_DRUG',
                StringComparison.CurrentCultureIgnoreCase
              ) &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
              ) &&
              ((!String.Equals(
                PrescriptionTypes.ForAdministration,
                PatientContext.PrescriptionType,
                StringComparison.CurrentCultureIgnoreCase
              ) &&
                String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType
                    .Value,
                  DoseTypeCode.TITRATED
                )) ||
                String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType
                    .Value,
                  DoseTypeCode.STEPPEDVARIABLE
                )) &&
              (this.objNewItemVM.formViewerDetails.BasicDetails
                .IsDoNotOpenFVForOrderSet == null ||
                (this.objNewItemVM.formViewerDetails.BasicDetails
                  .IsDoNotOpenFVForOrderSet != null &&
                  ObjectHelper.HasValue(
                    this.objNewItemVM.formViewerDetails.BasicDetails
                      .IsDoNotOpenFVForOrderSet
                  ) &&
                  !this.objNewItemVM.formViewerDetails.BasicDetails
                    .IsDoNotOpenFVForOrderSet.Value))
            ) {
              this.ClearNonInfusiondata();
              this.ShowFormViewer();
            } else if (
              this.ToCheckForZeroChangingDoseTime(
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MultiDoseDetails
              )
            ) {
              this.ClearNonInfusiondata();
              this.ShowFormViewer();
            } else {
              if (
                this.objNewItemVM != null &&
                this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .DrugProperties != null &&
                (String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .IdentifyingType,
                  CConstants.CATALOGUEITEM
                ) ||
                  String.Equals(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .IdentifyingType,
                    CConstants.ACTUALMOIETY
                  ))
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.VMDrugProperties =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                    (c) =>
                      String.Equals(
                        c.DrugPropertyCode,
                        CConstants.DrugPropertyCNTRLDDRUG
                      )
                  )
                    .ToList()
                    .FirstOrDefault();
              }
              this.ClearNonInfusiondata();
              if (
                PatientContext.ClerkFormViewDefaultBehavior ==
                  ClerkFormViewDeftBehaviour.LaunchFormNoMandatory ||
                (this.ActivityCode == ActivityTypes.Reorder &&
                  this.objNewItemVM.IsDosCalciReOrderShowFormviewerRequired)
              ) {
                this.ShowFormViewer();
              } else {
                if (
                  this.objNewItemVM != null &&
                  this.objNewItemVM.FormViewerDetails != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .OrdersetSequence != null
                ) {
                  this.AssociateSequenceForOrderSet();
                }
                this.AddToResolveGrid();
                this.AddtoResolutionGriddone = true;
                ObjectHelper.stopFinishAndCancelEvent(false);
              }
            }
          } else {
            this.ClearNonInfusiondata();
            this.ShowFormViewer();
          }
        }
      }
    }
  }
  private AssociateSequenceForOrderSet(): void {
    let sOrderSetgrpID: string = String.Empty;
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.OrdersetSequence != null
    ) {
      sOrderSetgrpID =
        this.objNewItemVM.FormViewerDetails.BasicDetails.OrdersetSequence
          .OrderSetGropID;
    } else if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
      )
    ) {
      sOrderSetgrpID =
        this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value;
    }
    if (
      PatientContext.IsINFUSIONON &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value
      ) &&
      !this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value.Equals(
        InfusionTypeCode.INTERMITTENT
      ) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .GroupSequenceNo == 0
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo =
          CSequentialHelper.GetSequenceGroupNo4Orderset(
            this.MedsResolve,
            sOrderSetgrpID
          );
      }
      CSequentialHelper.SetSeqPropertiesOnFormViewerClose(
        this.objNewItemVM,
        this.MedsResolve,
        this
      );
    } else {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo == null
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo =
          new SequenceDetail();
        this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo =
          CommonSequentialHelper.GetSequenceGroupNo4Orderset(
            this.MedsResolve,
            this.objNewItemVM.FormViewerDetails.BasicDetails.OrdersetSequence
              .OrderSetGropID
          );
      }
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.OrdersetSequence !=
          null
      ) {
        CommonSequentialHelper.SetSeqPropertiesOnFormViewerClose(
          this.objNewItemVM,
          this.MedsResolve,
          this
        );
      }
    }
  }
  private LaunchDRCorShowFV(objNewItemVM: PrescriptionItemVM): void {
    if (
      objNewItemVM != null &&
      objNewItemVM.FormViewerDetails != null &&
      objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      let IsSteppedDoseType: boolean = false;
      if (
        objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
        !String.IsNullOrEmpty(
          objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
        ) &&
        (String.Equals(
          objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.STEPPED,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
          String.Equals(
            objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.VARIABLE,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
          String.Equals(
            objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.CurrentCultureIgnoreCase
          ))
      ) {
        IsSteppedDoseType = true;
      }
      if (
        objNewItemVM.ActionCode == ActivityTypes.Reorder &&
        objNewItemVM.FormViewerDetails.BasicDetails
          .IsRecalculateEndDTTMInReordeSV &&
        IsSteppedDoseType &&
        (String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Leave,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Outpatient,
            StringComparison.CurrentCultureIgnoreCase
          )) &&
        objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails != null &&
        objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails.Count > 0
      ) {
        this.ShowFormViewer();
      } else {
        objNewItemVM.PerformDRC(objNewItemVM);
      }
    }
  }
  public ToCheckForZeroChangingDoseTime(
    oMultiDoseDetails: ObservableCollection<MultipleDoseDetail>
  ): boolean {
    let _isChangingDose: boolean = false;
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value
      ) &&
      String.Equals(
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE
      ) &&
      !String.Equals(
        PrescriptionTypes.ForAdministration,
        PatientContext.PrescriptionType,
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      this.ActivityCode != ActivityTypes.Amend
    ) {
      let nCount: number = oMultiDoseDetails.Count;
      for (let i: number = 0; i < nCount; i++) {
        if (
          oMultiDoseDetails[i].ScheduleDetailsData != null &&
          oMultiDoseDetails[i].ScheduleDetailsData.Count() > 0
        ) {
          let ToFindChangingDoseTimes = oMultiDoseDetails[
            i
          ].ScheduleDetailsData.Where(
            (c) =>
              c != null &&
              String.Equals(
                c.ScheduleTime,
                '00:00',
                StringComparison.InvariantCultureIgnoreCase
              )
          ).Count();
          if (ToFindChangingDoseTimes > 1) {
            _isChangingDose = true;
            break;
          }
        }
      }
    }
    return _isChangingDose;
  }
  private cFollowUpOrStat: string = '\0';
  private sStatPrevVMVPIdentifyingName: string = String.Empty;
  private sStatPrevVMVPLorenzoID: string = String.Empty;
  public lUniqueRowIDForStatOrFollowup: number = 0;
  private ClearNonInfusiondata(): void {
    let AccessContraintControls: boolean = false;
    if (
      PatientContext.IsINFUSIONON &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
      String.Equals(
        this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
        '1'
      )
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails
          .AccessContraintControls != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.AccessContraintControls
          .Count > 0
      ) {
        AccessContraintControls = true;
      }
      if (
        !(
          AccessContraintControls &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.AccessContraintControls.Contains(
            'cboStrength'
          )
        )
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.Strength = null;
      }
      if (
        !String.Equals(
          this.objNewItemVM.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !(
          AccessContraintControls &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.AccessContraintControls.Contains(
            'cboDosageForm'
          )
        )
      )
        this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm = null;
    }
  }
  public SetDCIndicator(): void {
    if (
      MedicationCommonProfileData.PrescribeConfig != null &&
      MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
    ) {
      let IsRebindResolveGrd: boolean = false;
      if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
        this.MedsResolve.ForEach((oItemVM) => {
          if (
            oItemVM.PrescriptionItemOID == 0 &&
            oItemVM.IsDoseCalcPerformed &&
            oItemVM.DoseCalculationDetails != null &&
            oItemVM.DoseCalculationDetails.CalculatedDTTM !=
              DateTime.MinValue &&
            oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist.Equals('2') &&
            !Common.IsClosedEncounter()
          ) {
            IsRebindResolveGrd = true;
          } else if (
            oItemVM.PrescriptionItemOID > 0 &&
            !String.IsNullOrEmpty(oItemVM.PrescriptionItemStatusCode) &&
            (String.Equals(
              oItemVM.PrescriptionItemStatus,
              CConstants.SUBMITTED,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                oItemVM.PrescriptionItemStatus,
                CConstants.AUTOVERIFIED,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              String.Equals(
                oItemVM.PrescriptionItemStatus,
                CConstants.AWAITINGAUTHORISE,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              String.Equals(
                oItemVM.PrescriptionItemStatus,
                CConstants.CLINICALLYVERIFIED,
                StringComparison.InvariantCultureIgnoreCase
              ))
          ) {
            if (
              oItemVM.FormViewerDetails.BasicDetails.DCCalDTTM !=
                DateTime.MinValue &&
              (oItemVM.IsDoseCalcPerformed ||
                oItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist) &&
              oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist.Equals('2')
            ) {
              if (!Common.IsClosedEncounter()) {
                oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '2';
                IsRebindResolveGrd = true;
              } else {
                oItemVM.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
              }
            }
          }
        });
      }
      if (IsRebindResolveGrd) {
        if (this.IsVisibleHWIndicator == Visibility.Collapsed) {
          this.IsVisibleHWIndicator = Visibility.Visible;
        }
      } else {
        if (this.IsVisibleHWIndicator == Visibility.Visible) {
          this.IsVisibleHWIndicator = Visibility.Collapsed;
        }
      }
    }
  }

  ReevaluateRHSPipe(item: PrescriptionItemVM){
    let medotherdisplaypipe = new DisplayOtherInformationLineItemPipe1();
    item.MedOtherDisplay1 = medotherdisplaypipe.transform(item, '', 0,'');
    let medlinedisplaypipe = new DisplayPrescriptionLineItemPipe1();
    item.MedLineDisplay = medlinedisplaypipe.transform(item, '', 0, '');
    let infoIconKey = new InfoIconPipe();
    item.InfoIconKey = infoIconKey.transform(item, '', 0, '');
    item.mode = 'update';
  }
  
  public IsrecordadmindoneforSTAT: boolean = false;
  public AddToResolveGrid(_DRCCompleted: boolean = false): void {
    this.objNewItemVM.IsAllowedToPerform = true;
    this.bIsReviewAlertShow = true;
    let IsFrmVwAttributesChangedForAmendUpdate: boolean = false;
    let IsSequenceCommonUpdateCalled: boolean = false;
    this.objNewItemVM.IsAddedToResolveGrid = true;
    this.objNewItemVM.objDoseFormulaDef = null;
    this.objNewItemVM.IsDoseCalcInfo = false;
    this.objNewItemVM.bFormViwerOpened = false;
    this.objNewItemVM.IsDosCalciReOrderShowFormviewerRequired = false;
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsAddtoResolve = true;
      this.objNewItemVM.FormViewerDetails.BasicDetails.isRuleexecuted = false;
    }
    if (this.MedsResolve == null) {
      this.MedsResolve = new ObservableCollection<PrescriptionItemVM>();
    }
    this.cFollowUpOrStat = '\0';
    this.IsrecordadmindoneforSTAT = false;
    let IsInfTypeIntermittent: boolean = false;
    let IsInfPCAConcentrationUOM: boolean = false;
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      if (this.objNewItemVM.IsNoMatches) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds = true;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableNewMed = false;
        this.objNewItemVM.IsNoMatches = false;
      }
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsClearOnAdmissionAmended =
        false;
    }
    if (this.objNewItemVM != null) {
      this.objNewItemVM.PrescriptionType = PatientContext.PrescriptionType;
    }
    if (
      this.objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
      this.objNewItemVM.ActionCode == ActivityTypes.Reorder
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
        true;
      if (
        (this.objNewItemVM.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction == null ||
          (this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction.Count == 0)) &&
        String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
        ) &&
        this.objNewItemVM.IsProdOptChange == 0 &&
        (this.objNewItemVM.SelectedSupplyreq == null ||
          (this.objNewItemVM.SelectedSupplyreq != null &&
            String.Equals(
              this.objNewItemVM.SelectedSupplyreq.Value,
              Resource.TechValidate.Empty,
              StringComparison.InvariantCultureIgnoreCase
            )))
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
          false;
      }
    }
    if (
      (this.objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
        this.objNewItemVM.ActionCode == ActivityTypes.Reorder) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .SelectedsupplyInstruction != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
        .Count > 0
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
        true;
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .FluidLorenzoID
      ) &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .FluidItemType
      ) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .FluidIdentifyingOID > 0
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsFluidAssociated = true;
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .IsTreatMentVisible == Visibility.Visible
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.ISvisibletreatmentcontinue =
        Visibility.Visible;
    }
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.ActionCode != ActivityTypes.Amend
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsDoseVisible ==
          Visibility.Visible &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsAdminMethodVisible ==
          Visibility.Collapsed &&
        (!this.objNewItemVM.FormViewerDetails.BHasFormViewParams ||
          (this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
            this.objNewItemVM.FormViewerDetails.BasicControls != null &&
            this.objNewItemVM.FormViewerDetails.BasicControls.Contains(
              CConstants.CONST_DOSE
            )))
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod = null;
      }
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction !=
        null &&
      !this.objNewItemVM.formViewerDetails.BHasFormViewParams &&
      !String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.OrdinalIgnoreCase
      ) &&
      String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction
      )
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction = null;
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
      (String.Equals(
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
        DoseTypeCode.NORMAL,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.TITRATED,
          StringComparison.InvariantCultureIgnoreCase
        )) &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.UpperDose
      )
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.UpperDose = String.Empty;
    }
    if (
      this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
      this.objNewItemVM.FormViewerDetails.BasicControls != null &&
      this.objNewItemVM.FormViewerDetails.BasicControls.Contains(
        'CC_ADMININSTR'
      )
    ) {
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstVisibility =
          Visibility.Visible;
      } else {
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsAdminInsVisible =
          Visibility.Visible;
      }
    }
    if (
      !this.objNewItemVM.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds &&
      this.objNewItemVM.ActionCode == ActivityTypes.Prescribe &&
      this.objNewItemVM.FormViewerDetails != null &&
      !this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction !=
        null &&
      String.Equals(
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction.Value,
        'CC_Other'
      ) &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction
      )
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstVisibility =
        Visibility.Visible;
    }
    if (
      this.objNewItemVM.ActionCode == ActivityTypes.Reorder &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsAdminInsVisible ==
        Visibility.Visible &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction !=
        null &&
      String.Equals(
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction.Value,
        'CC_Other'
      ) &&
      PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction
      )
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstVisibility =
        Visibility.Visible;
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .OtherAdminiInstVisibility == Visibility.Collapsed &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction
      ) &&
      !(
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsAdminInsVisible ==
        Visibility.Visible
      )
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
        String.Empty;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction !=
        null
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
          null;
      }
    }
    this.objNewItemVM.FormViewerDetails.BasicDetails.RHSSupplyInstrIconTooltip =
      true;
    if (
      !this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .ISvisibletreatmentcontinue == Visibility.Collapsed
    ) {
      if (
        String.Compare(
          this.objNewItemVM.ItemMainType,
          CConstants.Formulary_Appliance,
          StringComparison.OrdinalIgnoreCase
        ) != 0 ||
        (String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge
        ) &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Outpatient
          ))
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .TreatmentToContinue != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue
              .Value
          )
        )
          this.objNewItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue =
            null;
      }
    }
    if (
      this.objNewItemVM != null &&
      !this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .InfMonitoringperiodVisi == Visibility.Collapsed &&
      this.objNewItemVM.ActionCode != ActivityTypes.Amend
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriod =
        String.Empty;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.MonitoringPeriodUOM =
        null;
    }
    if (
      String.Equals(
        this.objNewItemVM.ItemMainType,
        CConstants.Formulary_Appliance,
        StringComparison.OrdinalIgnoreCase
      ) &&
      !this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      !String.Equals(
        this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
        CConstants.SUBTYPE_GAS,
        StringComparison.OrdinalIgnoreCase
      ) &&
      (this.objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
        this.objNewItemVM.ActionCode == ActivityTypes.Reorder)
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route = null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm = null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.Site = null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.Strength = null;
      if (
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Dose
        ) &&
        String.Compare(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Dose,
          '0'
        ) != 0
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.Dose = null;
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM = null;
      }
    }
    this.alreadyPrescribedItemOID = 0;
    this.IsNoMatche = false;
    this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistingItem = true;
    this.objNewItemVM.IsLoadBasicFaxTab = false;
    if (
      this.objNewItemVM.IsUnHoldAction &&
      this.objNewItemVM.PrescriptionItemOID > 0
    ) {
      this.objNewItemVM.OperationMode = 'U';
    } else if (
      !String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.objNewItemVM.OperationMode = 'N';
    } else if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.bIsAmend &&
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.objNewItemVM.OperationMode = 'N';
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsBrandMandatory ==
        Visibility.Visible &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.BrandName
      ) &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.BrandName,
        CConstants.SelectBrand,
        StringComparison.InvariantCultureIgnoreCase
      ) != 0 &&
      this.IsFormViewerClosed
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsBrandMandatory =
        Visibility.Collapsed;
      if (this.ReBindResolveGridEvent != null)
        this.ReBindResolveGridEvent(false, this.objNewItemVM);
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsBrandMandatory ==
        Visibility.Visible &&
      PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
      this.IsFormViewerClosed
    ) {
      this.objNewItemVM.AlreadyPrescribedItemOID = 0;
      this.alreadyPrescribedItemOID = 0;
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .SelProdName
      ) &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .SelProdName,
        CConstants.Selectproduct,
        StringComparison.InvariantCultureIgnoreCase
      ) != 0 &&
      this.IsFormViewerClosed
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.isProductVisible =
        Visibility.Collapsed;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.isProductMandatory =
        false;
      if (this.ReBindResolveGridEvent != null)
        this.ReBindResolveGridEvent(false, this.objNewItemVM);
    }
    if (
      String.Compare(
        CConstants.SUBTYPE,
        this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    )
      this.objNewItemVM.GetMcchilditemDisplay();
    else {
      this.objNewItemVM.FormViewerDetails.BasicDetails.MCIItemDrugprop =
        this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingName;
    }
    this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist = false;
    this.objNewItemVM.PrescriptionItemStatus = null;
    if (
      DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
        DateTime.MinValue) &&
      DateTime.LessThanOrEqualTo(this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
        CommonBB.GetServerDateTime()) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails
        .SelectedFrequencyDetails != null &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails
          .SelectedFrequencyDetails.UOM
      ) &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails
          .SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY'
      ) == 0 &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails
          .SelectedFrequencyDetails.Type
      ) &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails
          .SelectedFrequencyDetails.Type,
        'CC_INTERVAL'
      ) == 0 &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      !String.Equals(
        PatientContext.ClerkFormViewDefaultBehavior,
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
      String.Compare(
        this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
        '1'
      ) != 0
    ) {
      this.objNewItemVM.PrescriptionItemStatus = CConstants.COMPLETED;
    }
    if (
      this.ActivityCode != ActivityTypes.Amend ||
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenu,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      if (
        (this.objNewItemVM != null &&
          this.objNewItemVM.ActionCode != ActivityTypes.Amend) ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenu,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        if (
          this.bAlreadyWebMethodInvoked == false &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.bAlreadyWebMethodInvoked = true;
          PrescriptionHelper.GetMedCount(
            Convert.ToInt64(PatientContext.EncounterOid),
            PrescriptionTypes.Discharge,
            (s, e) => {
              this.PatientMedicationCount_Completed(s, e);
            }
          );
        } else if (
          this.bAlreadyWebMethodInvoked == false &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.bAlreadyWebMethodInvoked = true;
          PrescriptionHelper.GetMedCount(
            Convert.ToInt64(PatientContext.EncounterOid),
            PrescriptionTypes.ForAdministration,
            (s, e) => {
              this.PatientMedicationCount_Completed(s, e);
            }
          );
        }
      }
    }
    if (
      this.objNewItemVM != null &&
      this.objProcessingItemVM != null &&
      this.objNewItemVM.OnBehalfOf != null
    ) {
      this.objProcessingItemVM.OnBehalfOf = ObjectHelper.CreateObject(
        new CListItem(),
        {
          DisplayText: String.IsNullOrEmpty(
            this.objNewItemVM.OnBehalfOf.DisplayText
          )
            ? String.Empty
            : this.objNewItemVM.OnBehalfOf.DisplayText,
          Value: String.IsNullOrEmpty(this.objNewItemVM.OnBehalfOf.Value)
            ? String.Empty
            : this.objNewItemVM.OnBehalfOf.Value,
        }
      );
      if (this.objNewItemVM.OnBehalfOfReason != null) {
        this.objProcessingItemVM.OnBehalfOfReason = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: String.IsNullOrEmpty(
              this.objNewItemVM.OnBehalfOfReason.DisplayText
            )
              ? String.Empty
              : this.objNewItemVM.OnBehalfOfReason.DisplayText,
            Value: String.IsNullOrEmpty(
              this.objNewItemVM.OnBehalfOfReason.Value
            )
              ? String.Empty
              : this.objNewItemVM.OnBehalfOfReason.Value,
          }
        );
      }
      if (this.objNewItemVM.CommunicationMode != null) {
        this.objProcessingItemVM.CommunicationMode = ObjectHelper.CreateObject(
          new CListItem(),
          {
            DisplayText: String.IsNullOrEmpty(
              this.objNewItemVM.CommunicationMode.DisplayText
            )
              ? String.Empty
              : this.objNewItemVM.CommunicationMode.DisplayText,
            Value: String.IsNullOrEmpty(
              this.objNewItemVM.CommunicationMode.Value
            )
              ? String.Empty
              : this.objNewItemVM.CommunicationMode.Value,
          }
        );
      }
    }
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.FormViewerDetails != null &&
      this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
    ) {
      this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsenableOnbehalfOf =
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsenableOnbehalfOf;
    }
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
      this.objNewItemVM.FormViewerDetails.TechValidateDetails
        .SelectedPrescItem != null &&
      this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem
        .PresTechValidatedItemsChild != null &&
      this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem
        .PresTechValidatedItemsChild.Count > 0 &&
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.MulticomponentDetails != null &&
      this.objNewItemVM.FormViewerDetails.MulticomponentDetails
        .oMCItemBasicInfo != null &&
      this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
        .Count > 0
    ) {
      let nCount: number =
        this.objNewItemVM.FormViewerDetails.TechValidateDetails
          .SelectedPrescItem.PresTechValidatedItemsChild.Count;
      for (let i: number = 0; i < nCount; i++) {
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.MulticomponentDetails != null &&
          this.objNewItemVM.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo != null &&
          this.objNewItemVM.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo.Count > 0
        ) {
          for (
            let j: number = 0;
            j <
            this.objNewItemVM.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count;
            j++
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.TechValidateDetails
                .SelectedPrescItem.PresTechValidatedItemsChild[i]
                .FormViewerDetails.BasicDetails.IdentifyingOID ==
              this.objNewItemVM.FormViewerDetails.MulticomponentDetails
                .oMCItemBasicInfo[j].IdentifyingOID
            ) {
              this.objNewItemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                j
              ].OperationMode =
                this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
                  i
                ].FormViewerDetails.BasicDetails.TecValOperationMode;
            }
          }
        }
      }
    }
    if (
      !(
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.OrdinalIgnoreCase
        ) &&
        PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.DoNotLaunchForm
      )
    ) {
      this.objNewItemVM.oDoseCalcDefault = null;
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.ISAlwaysuseDosecalc =
          false;
      }
    }
    if (
      String.Equals(
        this.objNewItemVM.ItemSubType,
        CConstants.SUBTYPE,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCIAuthorise) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsAuthorise = true;
      } else {
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsAuthorise = false;
      }
    }
    if (
      !this.objNewItemVM.FormViewerDetails.BasicDetails.IsAuthorise &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsFluidAuthorise
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsAuthorise = true;
    }
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsAuthorise &&
      (this.ActivityCode == ActivityTypes.Prescribe ||
        this.ActivityCode == ActivityTypes.Reorder)
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
        this.objNewItemVM.FormViewerDetails.TechValidateDetails
          .SelectedPrescItem != null &&
        this.objNewItemVM.FormViewerDetails.TechValidateDetails
          .SelectedPrescItem.PresTechValidatedItemsChild != null &&
        this.objNewItemVM.FormViewerDetails.TechValidateDetails
          .SelectedPrescItem.PresTechValidatedItemsChild.Count > 0
      ) {
        for (
          let i: number = 0;
          i <
          this.objNewItemVM.FormViewerDetails.TechValidateDetails
            .SelectedPrescItem.PresTechValidatedItemsChild.Count;
          i++
        ) {
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].FormViewerDetails.BasicDetails.Supplycomments = String.Empty;
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].FormViewerDetails.BasicDetails.SupplyInsText = String.Empty;
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].FormViewerDetails.BasicDetails.SupplyInsVal = String.Empty;
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].FormViewerDetails.BasicDetails.SelectedsupplyInstruction = null;
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].FormViewerDetails.BasicDetails.OriginalSupplyInstructionText = null;
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].FormViewerDetails.BasicDetails.OriginalSupplyComments =
            String.Empty;
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].FormViewerDetails.BasicDetails.NextSupplyDate = DateTime.MinValue;
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].FormViewerDetails.TechValidateDetails = null;
          this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[
            i
          ].SelectedSupplyreq = null;
        }
      }
      this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsText =
        String.Empty;
      this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsVal =
        String.Empty;
      this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
        null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalSupplyComments =
        null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments = null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalSupplyInstructionText =
        null;
      this.objNewItemVM.FormViewerDetails.TechvalidateCADetails = null;
      this.objNewItemVM.FormViewerDetails.TechValidateDetails = null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
        false;
      this.objNewItemVM.SelectedSupplyreq = null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate =
        DateTime.MinValue;
      this.objNewItemVM.TechValidatedItems = null;
    }
    this.IsDurationOnlyChanged = this.GetDurationValueChange(
      this.objNewItemVM.FormViewerDetails.BasicDetails
    );
    let IsNonIVSequence: boolean = false;
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.formViewerDetails != null &&
      this.objNewItemVM.formViewerDetails.BasicDetails != null &&
      this.objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo != null &&
      this.objNewItemVM.formViewerDetails.BasicDetails.SequenceInfo
        .GroupSequenceNo > 0
    ) {
      IsNonIVSequence = true;
    }
    if (this.ActivityCode == ActivityTypes.Prescribe) {
      this.ValidateDOSforFP10Attributes();
    }
    if(this.IsDurationOnlyChanged &&  !IsNonIVSequence && (this.objProcessingItemVM !=null && !String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) && String.Equals(this.objProcessingItemVM.OperationMode, 'U')))
    {
      this.objProcessingItemVM.OperationMode ="UA";
    }
    if (
      this.ActivityCode == ActivityTypes.Prescribe ||
      (this.objProcessingItemVM != null &&
        ((!String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) &&
          String.Equals(this.objProcessingItemVM.OperationMode, 'N')) ||
          (String.Equals(this.objProcessingItemVM.OperationMode, 'U') &&
            this.IsDurationOnlyChanged &&
            !IsNonIVSequence)))
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsValidateDoseSafty =
        false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsValidateBoosterSafty =
        false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsValidateBolusSafty =
        false;
      if (
        (this.objNewItemVM.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction.Count > 0) ||
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
        ) ||
        this.objNewItemVM.IsProdOptChange == 1 ||
        (this.objNewItemVM.SelectedSupplyreq != null &&
          !String.Equals(
            this.objNewItemVM.SelectedSupplyreq.Value,
            Resource.TechValidate.Empty,
            StringComparison.InvariantCultureIgnoreCase
          ))
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
          true;
      }
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableOnadmission
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
            '1';
        } else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission &&
          !this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableOnadmission
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
            '2';
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
            '0';
        }
        if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
            Visibility.Visible;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
            Visibility.Collapsed;
        }
      }
      if (
        this.ActivityCode == ActivityTypes.Amend &&
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objProcessingItemVM != null &&
        this.objProcessingItemVM.FormViewerDetails != null &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails
          .InfusionDetails != null &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionType !=
          null &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .GroupSequenceNo > 0 &&
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsSequentialStartDTTMUpdated
      ) {
        if (this.IsDurationOnlyChanged) {
          this.objProcessingItemVM.OperationMode = 'UA';
          this.objNewItemVM.OperationMode =
            this.objProcessingItemVM.OperationMode;
          this.objNewItemVM.SequentialActionPerfromCodeAEITS = null;
          this.objNewItemVM.IsFormViewDataLoaded = false;
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentialStartDTTMUpdated =
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentialStartDTTMUpdated;
        }
      }
      let Index: number = -1;
      if (
        this.objProcessingItemVM != null &&
        !String.Equals(this.objProcessingItemVM.OperationMode, 'TM') &&
        !String.Equals(this.objProcessingItemVM.OperationMode, 'CU') &&
        (this.objRePresItmCollection == null ||
          (this.objRePresItmCollection != null &&
            this.objRePresItmCollection.Count <= 0))
      ) {
        Index = this.MedsResolve.IndexOf(this.objProcessingItemVM);
      }
      if (Index == -1) {
        // this.objNewItemVM.PrescribeThisItemEvent -= this.PrescribeExistingItem;
        this.objNewItemVM.PrescribeThisItemEvent = (s, e) => {
          this.PrescribeExistingItem(s, e);
        };
        if (!this.MedsResolve.Contains(this.objNewItemVM)) {
          let canGeneratConfilcts: boolean = true;
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.OrdinalIgnoreCase
            ) ||
            PatientContext.ClerkFormViewDefaultBehavior ==
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ) {
            canGeneratConfilcts =
              ProfileData.MedConflictConfig != null &&
              ProfileData.MedConflictConfig.DisplayConflicts == '1';
          }
          if (canGeneratConfilcts) {
            this.ActivityCode = ActivityTypes.UpdateWarning;
            this.CheckWarnings();
            // this.objNewItemVM.WarningsGenerationCompleted = (s, e) => {
            //   this.objNewItemVM_WarningsGenerationCompleted();
            // };
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
            null
          ) {
            if (
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.CONTINUOUS,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.SINGLEDOSEVOLUME,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.FLUID,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.PCA,
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails != null &&
                PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
                (String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Duration
                ) ||
                  (String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails.Duration
                  ) &&
                    this.objNewItemVM.FormViewerDetails.BasicDetails.Duration.Equals(
                      '0'
                    )))
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                  true;
              } else
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                  false;
            }
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value == InfusionTypesCode.CONTINUOUS ||
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value == InfusionTypesCode.SINGLEDOSEVOLUME ||
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value == InfusionTypesCode.FLUID) &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder != 0 &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SequentialItemOrder > 0
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
                Visibility.Visible;
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
                Visibility.Visible;
            } else {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
                Visibility.Collapsed;
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
                Visibility.Collapsed;
            }
          }
          if (
            PatientContext.IsINFUSIONON &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo > 0 &&
            (String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.CONTINUOUS
            ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.SINGLEDOSEVOLUME
              ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.FLUID
              ))
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .ItemSequenceNo == 1
            ) {
              let UnqeID: Random = new Random();
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                UnqeID.Next();
            } else {
              let oInfusionVM: InfusionVM =
                CSequentialHelper.GetFirstActiveItemInfusionVM(
                  this.MedsResolve,
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.GroupSequenceNo
                );
              if (oInfusionVM != null) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                  oInfusionVM.PrescriptionItemNumber;
              }
            }
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.SetClerked(this.objNewItemVM);
            this.MedsResolve.Insert(
              CSequentialHelper.GetIndexForNewItem(
                this.MedsResolve,
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo
              ),
              this.objNewItemVM
            );
          } else if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .GroupSequenceNo > 0
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                .ItemSequenceNo == 1
            ) {
              let UnqeID: Random = new Random();
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber =
                UnqeID.Next();
            } else {
              let oSequenceDetail: SequenceDetail =
                CommonSequentialHelper.GetFirstActiveItemSeqItemVM(
                  this.MedsResolve,
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                    .GroupSequenceNo
                );
              if (oSequenceDetail != null) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber =
                  oSequenceDetail.PrescriptionItemNumber;
              }
            }
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.SetClerked(this.objNewItemVM);
            this.MedsResolve.Insert(
              CommonSequentialHelper.GetIndexForNewItem(
                this.MedsResolve,
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                  .GroupSequenceNo
              ),
              this.objNewItemVM
            );
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Collapsed;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Collapsed;
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
              )
            ) {
              let bInsertHeader: boolean = true;
              if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
                let objHeader: PrescriptionItemVM = this.MedsResolve[0];
                if (objHeader.IsOrderSetHeader) {
                  if (
                    String.Equals(
                      objHeader.PrescriptionItem,
                      this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets
                        .DisplayText,
                      StringComparison.CurrentCultureIgnoreCase
                    ) &&
                    objHeader.OrderSetGroupID ==
                      this.objNewItemVM.OrderSetGroupID
                  ) {
                    this.SetClerked(this.objNewItemVM);
                    this.MedsResolve.Insert(1, this.objNewItemVM);
                    bInsertHeader = false;
                  }
                }
              }
              if (bInsertHeader) {
                this.SetClerked(this.objNewItemVM);
                this.objNewItemVM.isNew = true;
                this.MedsResolve.Insert(0, this.objNewItemVM);
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets !=
                    null &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets
                      .Value
                  )
                ) {
                }
              }
            } else {
              let IsMultiInfusionRoutes: boolean = false;
                            
                            if (this.objFormViewer != null && !this.objFormViewer.isSeqRouteMessagedisplayed) {
                                if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && this.objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute && this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked && this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails != null && this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes != null && this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Count > 0 && this.InfusionContinousSeq != null && this.InfusionContinousSeq.SequentialItemOrder > 1) {
                                    IsMultiInfusionRoutes = Common.IsInfusionMultiRoutes(this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes);
                                    if (!IsMultiInfusionRoutes) {
                                        let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                                            Title: "Lorenzo - Manage prescription",
                                            Message: Resource.Infusion.SequentialRouteDifferent_Message,
                                            MessageButton: MessageBoxButton.OKCancel,
                                            IconType: MessageBoxType.Question
                                        });
                                        iMsgBox.MessageBoxClose = (s, e) => { this.iMsgBox_MessageBoxClose(s, e); };
                                        iMsgBox.Show();
                                    }
                                    else {
                                        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsItemAddedToResolveGrid = true;
                                        this.SetClerked(this.objNewItemVM);
                                        this.objNewItemVM.isNew = true;
                                        this.MedsResolve.Insert(0, this.objNewItemVM);
                                        this.ReevaluateRHSPipe(this.objNewItemVM);
                                    }
                                }
                                else if (this.InfusionContinousSeq != null && (this.InfusionContinousSeq.SequentialRoute != null || this.InfusionContinousSeq.SequentialMultiplsRoutes != null) && this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null && this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null && this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString() == "0" && this.InfusionContinousSeq.SequentialItemOrder > 1 && this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType != CConstants.SUBTYPE_GAS) {
                                    let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                                        Title: "Lorenzo - Manage prescription",
                                        Message: Resource.Infusion.SequentialRouteDifferent_Message,
                                        MessageButton: MessageBoxButton.OKCancel,
                                        IconType: MessageBoxType.Question
                                    });
                                    iMsgBox.MessageBoxClose = (s, e) => { this.iMsgBox_MessageBoxClose(s, e); };
                                    iMsgBox.Show();
                                }
                                else {
                                    if (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null) {
                                        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsItemAddedToResolveGrid = true;
                                    }
                                    this.SetClerked(this.objNewItemVM);
                                    this.objNewItemVM.isNew = true;
                                    this.MedsResolve.Insert(0, this.objNewItemVM);
                                    this.ReevaluateRHSPipe(this.objNewItemVM);
                                }
                            }
                            else {
                                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsItemAddedToResolveGrid = true;
                                this.SetClerked(this.objNewItemVM);
                                this.objNewItemVM.isNew = true;
                                this.MedsResolve.Insert(0, this.objNewItemVM);
                                this.ReevaluateRHSPipe(this.objNewItemVM);
                            }
            }
          }
          if (
            !canGeneratConfilcts ||
            this.objNewItemVM.FormViewerDetails.ConflictDetails != null
          || ( String.Compare(this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.NONCATALOGUEITEM) == 0 
          || String.Compare(this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,CConstants.Precatalog) == 0)
          )
            this.CheckAndLaunchFollowStat();
        }
      } else {
        if (this.objNewItemVM.IsUnHoldAction) {
          // this.objNewItemVM.PrescribeThisItemEvent -= this.PrescribeExistingItem;
          this.objNewItemVM.PrescribeThisItemEvent = (s, e) => {
            this.PrescribeExistingItem(s, e);
          };
        }
        if (
          this.objProcessingItemVM != null &&
          String.Equals(this.objProcessingItemVM.OperationMode, 'U')
        )
          this.objNewItemVM.OperationMode = 'U';
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
            null &&
          (String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS
          ) ||
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) ||
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.FLUID
            )) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .GroupSequenceNo > 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ItemSequenceNo > 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
            Visibility.Visible;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
            Visibility.Visible;
        } else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .GroupSequenceNo > 0 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .ItemSequenceNo > 0
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentiallinkvisi =
            Visibility.Visible;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
            Visibility.Visible;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
            Visibility.Collapsed;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
            Visibility.Collapsed;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null
        ) {
          if (
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.CONTINUOUS,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.FLUID,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.PCA,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
              (String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Duration
              ) ||
                (String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Duration
                ) &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Duration.Equals(
                    '0'
                  )))
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                true;
            } else
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                false;
          }
        }
        this.ValidateStationaryType();
        if (this.bIsReplacement == true) {
          this.SetClerked(this.objNewItemVM);
          this.objNewItemVM.isNew = true;
          this.MedsResolve.Insert(0, this.objNewItemVM);
          this.objProcessingItemVM.PrescriptionItemStatus =
            CConstants.DISCONTINUED;
          this.objProcessingItemVM.OperationMode = 'M';
          this.bIsReplacement = false;
        } else {
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
            this.objProcessingItemVM != null &&
            this.objProcessingItemVM.FormViewerDetails != null
          ) {
            if (
              this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                .MedDRCReason != null
            ) {
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
            }
            if (
              this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                .DRCAcknowledge
            )
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
            if (
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                  .DRCComments
              )
            ) {
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
            }
          }
          if (
            this.ActivityCode != ActivityTypes.Reorder &&
            this.objProcessingItemVM != null
          ) {
            Common.UpdateChanges(this.objProcessingItemVM);
          }
          if (
            !String.IsNullOrEmpty(
              this.objProcessingItemVM.PrescriptionItemStatus
            )
          ) {
            this.PresItemStatus =
              this.objProcessingItemVM.PrescriptionItemStatus;
          }
          if (
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !String.IsNullOrEmpty(this.objProcessingItemVM.AuthoriseRoleOID)
          ) {
            this.AuthRoleOID = this.objProcessingItemVM.AuthoriseRoleOID;
          }
          this.objProcessingItemVM = null;
          if (
            this.objNewItemVM != null &&
            (this.objNewItemVM.ActionCode == ActivityTypes.Prescribe ||
              this.objNewItemVM.ActionCode == ActivityTypes.Reorder ||
              (this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
                String.Equals(
                  this.objNewItemVM.OperationMode,
                  'N',
                  StringComparison.InvariantCultureIgnoreCase
                ))) &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo > 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ItemSequenceNo > 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .CboSequenceNamelstVisible == Visibility.Visible
          ) {
            let AlreadyAddToGridIndx: number = -1;
            let oRemoveMedReslove: PrescriptionItemVM = null;
            AlreadyAddToGridIndx = this.MedsResolve.IndexOf(this.objNewItemVM);
            oRemoveMedReslove = this.objNewItemVM;
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .ItemSequenceNo == 1
            ) {
              let UnqeID: Random = new Random();
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                UnqeID.Next();
            } else {
              let oInfFirstItem: PrescriptionItemVM = this.MedsResolve.Where(
                (i) =>
                  i.FormViewerDetails.BasicDetails.InfusionDetails
                    .GroupSequenceNo ==
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionDetails.GroupSequenceNo &&
                  i.FormViewerDetails.BasicDetails.InfusionDetails
                    .ItemSequenceNo == 1
              ).FirstOrDefault();
              if (
                oInfFirstItem == null &&
                this.oTempPrescDisCancelItemVM != null &&
                this.oTempPrescDisCancelItemVM.Count > 0
              ) {
                oInfFirstItem = this.oTempPrescDisCancelItemVM
                  .Where(
                    (i) =>
                      i.FormViewerDetails.BasicDetails.InfusionDetails
                        .GroupSequenceNo ==
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.GroupSequenceNo &&
                      i.FormViewerDetails.BasicDetails.InfusionDetails
                        .ItemSequenceNo == 1
                  )
                  .FirstOrDefault();
              }
              if (oInfFirstItem != null) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                  oInfFirstItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
              }
            }
            if (AlreadyAddToGridIndx != -1) {
              this.MedsResolve.Remove(oRemoveMedReslove);
              let _NextIndx: number = CSequentialHelper.GetIndexForNewItem(
                this.MedsResolve,
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo
              );
              this.MedsResolve.Insert(_NextIndx, this.objNewItemVM);
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
                Visibility.Visible;
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
                Visibility.Visible;
            } else {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
                Visibility.Collapsed;
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
                Visibility.Collapsed;
            }
          } else {
            this.MedsResolve[Index] = this.objNewItemVM;
            if (
              this.MedsResolve[Index] != null &&
              String.IsNullOrEmpty(
                this.MedsResolve[Index].PrescriptionItemStatus
              ) &&
              this.MedsResolve[Index].PrescriptionItemOID > 0
            ) {
              this.MedsResolve[Index].PrescriptionItemStatus =
                this.PresItemStatus;
            }
            if (
              String.Equals(
                ContextInfo.MenuCode,
                CConstants.AuthoriseMenuCode,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              this.MedsResolve[Index] != null &&
              String.IsNullOrEmpty(this.MedsResolve[Index].AuthoriseRoleOID) &&
              !String.IsNullOrEmpty(this.AuthRoleOID)
            ) {
              this.MedsResolve[Index].AuthoriseRoleOID = this.AuthRoleOID;
            }
          }
          this.SetClerked(this.objNewItemVM);
          let oPresData = this.MedsResolve.Where(
            (Item) =>
              !String.IsNullOrEmpty(Item.OperationMode) &&
              String.Equals(Item.OperationMode, 'M') &&
              Item.PrescriptionItemOID ==
                this.objNewItemVM.SourcePrescriptionOid &&
              this.ActivityCode != ActivityTypes.Reorder
          ).Select((Item) => Item);
          if (oPresData != null && oPresData.Count() > 0) {
            for (let i=0; i< oPresData.Count(); i++){
              let oVM : PrescriptionItemVM = oPresData[i];          
              let nCurItemIdx: number = this.MedsResolve.IndexOf(oVM);
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .ReasonforModification != null &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ReasonforModification.Value
                )
              ) {
                oVM.FormViewerDetails.BasicDetails.ReasonforModification =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .ReasonforModification.DisplayText,
                    Value:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .ReasonforModification.Value,
                  });
              }
              if (
                oVM != null &&
                oVM.FormViewerDetails != null &&
                oVM.FormViewerDetails.BasicDetails != null &&
                oVM.FormViewerDetails.BasicDetails.InfusionType != null &&
                !String.IsNullOrEmpty(
                  oVM.FormViewerDetails.BasicDetails.InfusionType.Value
                ) &&
                String.Equals(
                  oVM.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypeCode.INTERMITTENT
                )
              ) {
                IsInfTypeIntermittent = true;
              }
              if (
                oVM.FormViewerDetails.BasicDetails.Infusions &&
                oVM.FormViewerDetails.BasicDetails.InfusionType != null &&
                !String.IsNullOrEmpty(oVM.PrescriptionItemStatus) &&
                !String.IsNullOrEmpty(
                  oVM.FormViewerDetails.BasicDetails.InfusionType.Value
                ) &&
                String.Equals(
                  oVM.FormViewerDetails.BasicDetails.InfusionType.Value,
                  InfusionTypesCode.PCA
                ) &&
                String.Equals(
                  oVM.PrescriptionItemStatus,
                  CConstants.DISCONTINUED,
                  StringComparison.CurrentCultureIgnoreCase
                )
              ) {
                IsInfPCAConcentrationUOM = true;
              }
              let tmpStartDate: DateTime = DateTime.MinValue;
              if (
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration
                ) &&
                DateTime.NotEquals(oVM.FormViewerDetails.BasicDetails.StartDTTM,
                  DateTime.MinValue)
              )
                tmpStartDate =
                  oVM.FormViewerDetails.BasicDetails.StartDTTM.AddMinutes(
                    -MedChartData.DuenessThreshold
                  );
              if (
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration
                ) &&
                !String.Equals(
                  PatientContext.ClerkFormViewDefaultBehavior,
                  ClerkFormViewDeftBehaviour.LaunchFormMandatory
                ) &&
                ((DateTime.NotEquals(oVM.FormViewerDetails.BasicDetails.StartDTTM,
                  DateTime.MinValue) &&
                  DateTime.LessThanOrEqualTo(oVM.FormViewerDetails.BasicDetails.StartDTTM,
                    CommonBB.GetServerDateTime())) ||
                  (DateTime.NotEquals(tmpStartDate, DateTime.MinValue) &&
                    DateTime.LessThanOrEqualTo(tmpStartDate, CommonBB.GetServerDateTime()) &&
                    !IsInfTypeIntermittent) ||
                  oVM.IsInfInprogress ||
                  oVM.IsDueNowSlot) &&
                !IsInfPCAConcentrationUOM
              ) {
                oVM.PrescriptionItemStatus = CConstants.COMPLETED;
              } else {
                if (
                  String.Equals(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.ForAdministration,
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  !String.Equals(
                    oVM.PrescriptionItemStatus,
                    'MEDStatus14',
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  !IsInfPCAConcentrationUOM
                ) {
                  oVM.PrescriptionItemStatus = CConstants.CANCELLED;
                } else {
                  if (
                    String.Equals(
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .ModificationAction,
                      CConstants.Activity_Discontinue
                    )
                  )
                    oVM.PrescriptionItemStatus = CConstants.DISCONTINUED;
                  else if (
                    String.Equals(
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .ModificationAction,
                      CConstants.Activity_Cancel
                    )
                  )
                    oVM.PrescriptionItemStatus = CConstants.CANCELLED;
                }
              }
              if (
                oVM.FormViewerDetails.BasicDetails.Infused == '1' &&
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.CurrentCultureIgnoreCase
                ) &&
                !oVM.IsDueNowSlot &&
                !oVM.IsInfInprogress &&
                !IsInfTypeIntermittent &&
                !String.Equals(
                  oVM.PrescriptionItemStatus,
                  'MEDStatus14',
                  StringComparison.CurrentCultureIgnoreCase
                )
              ) {
                oVM.PrescriptionItemStatus = CConstants.CANCELLED;
              } else if (
                String.Compare(
                  oVM.FormViewerDetails.BasicDetails.Infused,
                  '1'
                ) == 0 &&
                oVM.FormViewerDetails != null &&
                oVM.FormViewerDetails.BasicDetails != null &&
                oVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
                !String.Equals(
                  oVM.PrescriptionItemStatus,
                  'MEDStatus14',
                  StringComparison.CurrentCultureIgnoreCase
                ) &&
                !oVM.IsDueNowSlot &&
                !oVM.IsInfInprogress &&
                oVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .SequentialItemOrder > 1
              ) {
                oVM.PrescriptionItemStatus = CConstants.CANCELLED;
              }
              if (
                DateTime.NotEquals(oVM.FormViewerDetails.BasicDetails.DCCalDTTM,
                  DateTime.MinValue) &&
                (String.Equals(
                  oVM.PrescriptionItemStatus,
                  CConstants.DISCONTINUED,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                  String.Equals(
                    oVM.PrescriptionItemStatus,
                    CConstants.COMPLETED,
                    StringComparison.InvariantCultureIgnoreCase
                  ) ||
                  String.Equals(
                    oVM.PrescriptionItemStatus,
                    CConstants.CANCELLED,
                    StringComparison.InvariantCultureIgnoreCase
                  )) &&
                (oVM.IsDoseCalcPerformed ||
                  oVM.FormViewerDetails.BasicDetails.IsDoseCalcExist) &&
                oVM.FormViewerDetails.BasicDetails.DoseCalcExist.Equals('2')
              ) {
                oVM.FormViewerDetails.BasicDetails.DoseCalcExist = '1';
                oVM.FormViewerDetails.BasicDetails.PreviousDoseCalcExist = '2';
              }
              this.MedsResolve[nCurItemIdx] = oVM;
              break;
            }
          }
          let _IsTypeInDrug:boolean=false;
          if(( String.Compare(this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType, CConstants.NONCATALOGUEITEM) == 0 
          || String.Compare(this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,CConstants.Precatalog) == 0))
          {
            _IsTypeInDrug=true;
          }
          if (this.objNewItemVM.FormViewerDetails.ConflictDetails != null || _IsTypeInDrug)
            {
              this.CheckAndLaunchFollowStat();
            }
            
        }
      }
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        ((this.objNewItemVM.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction.Count > 0) ||
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
          ) ||
          (this.objNewItemVM.SelectedSupplyreq != null &&
            (String.Equals(
              this.objNewItemVM.SelectedSupplyreq.Value,
              CConstants.Supplycode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                this.objNewItemVM.SelectedSupplyreq.Value,
                CConstants.DonotSupplycode,
                StringComparison.InvariantCultureIgnoreCase
              ))))
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.TecValOperationMode =
          'N';
      }
      if (
        this.ReBindResolveGridEvent != null &&
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SelectedSequenceName == null ||
          (!String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SelectedSequenceName.Value
          ) &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .SelectedSequenceName.Value,
              CConstants.NewSequenceCode,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          this.ReBindResolveGridEvent(false, this.objNewItemVM);
        } else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SelectedSequenceName != null
        ) {
          this.ReBindResolveGridEvent(true, this.objNewItemVM);
        }
      }
      this.SetDCIndicator();
    } else if (this.ActivityCode == ActivityTypes.Amend) {
      this.IsDurationOnlyChanged = false;
      this.IsReasonforModficationChanged = false;
      let oCurrentDTTM: DateTime = CommonBB.GetServerDateTime();
      this.objNewItemVM.IsGPConnectItem = false;
      this.objNewItemVM.GpConnectMedicationItem = null;
      this.objNewItemVM.IsLoadBasicFaxTab = false;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
        (String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.TITRATED,
            StringComparison.CurrentCultureIgnoreCase
          )) &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.UpperDose
        )
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.UpperDose =
          String.Empty;
      }
      if (
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenu,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenu,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.objProcessingItemVM.bIsSupplyDispensingInstructionSet =
          this.objNewItemVM.bIsSupplyDispensingInstructionSet;
        if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null
        )
          this.objNewItemVM.IsClinicallyVerifyEnable =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify;
        else
          this.objProcessingItemVM.IsClinicallyVerifyEnable =
            this.objNewItemVM.IsClinicallyVerifyEnable;
      }
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationAction
        ) &&
        (!String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenu,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenu,
            StringComparison.InvariantCultureIgnoreCase
          )) &&
        (this.objNewItemVM.HIIsAcknowledged == '2' ||
          this.objNewItemVM.HIIsAcknowledged == '5')
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.ConflictDetails != null &&
          String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationAction
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.ConflictDetails =
            this.objNewItemVM.FormViewerDetails.ConflictDetails;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute;
          this.objProcessingItemVM.ActionCode = ActivityTypes.ConflictUpdate;
          this.objProcessingItemVM.OperationMode = 'CU';
          if (this.objNewItemVM.HIIsAcknowledged == '2') {
            if (this.ReBindResolveGridEvent != null)
              this.ReBindResolveGridEvent(true, this.objNewItemVM);
            this.CheckAndLaunchFollowStat();
          }
          this.objProcessingItemVM.HIIsAcknowledged =
            this.objNewItemVM.HIIsAcknowledged;
        }
      } else {
      }
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.MulticomponentDetails != null &&
        this.objProcessingItemVM != null &&
        this.objProcessingItemVM.FormViewerDetails != null
      ) {
        this.objProcessingItemVM.FormViewerDetails.MulticomponentDetails =
          this.objNewItemVM.FormViewerDetails.MulticomponentDetails;
      }
      if (
        this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM != null &&
        this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCTrafficIcon ==
          ConflictIcons.Red &&
        !this.objNewItemVM.FormViewerDetails.PresItemDRCVM
          .IsAmendDRCRegenarated &&
        String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationAction
        ) &&
        this.objNewItemVM.FormViewerDetails.TechValidateDetails == null &&
        !String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) &&
        !String.Equals(this.objProcessingItemVM.OperationMode, 'UA') &&
        !String.Equals(this.objProcessingItemVM.OperationMode, 'CU')
      ) {
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
        this.objProcessingItemVM.ActionCode = this.objNewItemVM.ActionCode;
        if (
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason !=
            null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason.Value
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
        }
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated;
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
      }
      if (
        this.objProcessingItemVM != null &&
        ((String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory) ||
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge
          ))
      ) {
        this.objNewItemVM.InPatDisReorderFlag =
          this.objProcessingItemVM.InPatDisReorderFlag;
      }
      if (
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Count ==
          0 &&
        !String.Equals(this.CACode, 'MED_CA_CLN_VRFY_SL_P2')
      ) {
        if (
          DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
            DateTime.MinValue) &&
          DateTime.LessThan(this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
            CommonBB.GetServerDateTime())
        ) {
          if (String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode))
            this.objProcessingItemVM.OperationMode = 'UA';
        }
      }
      if (
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Count >
          0
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails
            .Count > 0
        ) {
          let nMultiDoseDetCnt: number =
            this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails
              .Count;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails[0]
              .OperationMode == 'D'
          )
            this.IsDurationOnlyChanged = false;
          else if (nMultiDoseDetCnt > 0) {
            for (let nCnt: number = 0; nCnt < nMultiDoseDetCnt; nCnt++) {
              if (
                (this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MultiDoseDetails[nCnt].OperationMode == 'N' ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails[nCnt].OperationMode == 'U') &&
                DateTime.LessThanOrEqualTo(this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MultiDoseDetails[nCnt].StartDTTM, oCurrentDTTM)
              ) {
                this.IsDurationOnlyChanged = false;
                break;
              } else {
                this.IsDurationOnlyChanged = this.GetDurationValueChange(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                );
              }
            }
          }
        } else
          this.IsDurationOnlyChanged = this.GetDurationValueChange(
            this.objNewItemVM.FormViewerDetails.BasicDetails
          );
        if (
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType,
            CConstants.SUBTYPE,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMCenableRSNFORMOD
          )
            this.IsDurationOnlyChanged = false;
        }
        if (
          this.IsDurationOnlyChanged &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds
            .Count > 0
        ) {
          IsFrmVwAttributesChangedForAmendUpdate = true;
        }
      }
      let Isdischargenewmedchecked: boolean = false;
      if (
        PatientContext.PrescriptionType == PrescriptionTypes.Discharge &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Count >
          0
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds
            .Count == 1 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
            'IsIDSNewmeds'
          )
        ) {
          if (this.objNewItemVM.isnewmedschecked == true) {
            Isdischargenewmedchecked = true;
            this.IsDurationOnlyChanged = this.GetDurationValueChange(
              this.objNewItemVM.FormViewerDetails.BasicDetails
            );
          }
        }
      }
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.TechValSupplyInst !=
          null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.TechValSupplyInst
            .Value
        )
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText =
          this.objNewItemVM.FormViewerDetails.BasicDetails.TechValSupplyInst.Value;
      }
      if (
        !String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationAction,
          CConstants.Activity_Discontinue
        ) &&
        !String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationAction,
          CConstants.Activity_Cancel
        )
      ) {
        if (this.objNewItemVM != null && this.objNewItemVM.isTechVldLod) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText =
            this.objNewItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText;
        }
      }
      if (
        !Isdischargenewmedchecked &&
        (!String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) ||
          (String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) &&
            String.Equals(
              PatientContext.ClerkFormViewDefaultBehavior,
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
            ))) &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Count >
          0
      ) {
        let ncount: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Count;
        for (let i: number = 0; i < ncount; i++) {
          if (
            !String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds[
                i
              ],
              'ReasonforModification'
            )
          ) {
            if (
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds[
                  i
                ],
                'SupplyInsVal'
              ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds[
                  i
                ],
                'SupplyInsText'
              ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds[
                  i
                ],
                'Supplycomments'
              ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds[
                  i
                ],
                'SupplyStatus'
              )
            ) {
              this.IsDurationOnlyChanged = true;
            } else {
              this.IsDurationOnlyChanged = false;
              break;
            }
          }
        }
        if (
          !this.IsDurationOnlyChanged &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds
            .Count == 1 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds[0] !=
            null &&
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds[0],
            'ReasonforModification'
          ) &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails
            .TechValidatedItems != null &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails
            .TechValidatedItems.Count > 0
        ) {
          this.IsDurationOnlyChanged = true;
        }
      }
      if (
        !this.IsDurationOnlyChanged &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Count >
          0
      ) {
        if (
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationAction
          )
        ) {
          if (
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ModificationComments
            )
          )
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ModificationComments =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationComments;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ReasonforModification != null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ReasonforModification.Value
            )
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ReasonforModification.DisplayText,
                Value:
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ReasonforModification.Value,
              });
            this.IsReasonforModficationChanged = true;
          }
          this.objNewItemVM.ActionCode = ActivityTypes.Amend;
          this.objNewItemVM.SourcePrescriptionOid =
            this.objProcessingItemVM.PrescriptionItemOID;
          this.objNewItemVM.SourcePresOid =
            this.objProcessingItemVM.PrescriptionOID;
          this.objNewItemVM.ParentReorderItemOID =
            this.objProcessingItemVM.ReorderItemOID;
          this.objNewItemVM.OrderSetGroupID =
            this.objProcessingItemVM.OrderSetGroupID;
          this.objNewItemVM.IsAmendment = '1';
          if (
            this.objProcessingItemVM != null &&
            !String.Equals(
              this.objProcessingItemVM.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsAuthorise =
              false;
          }
          if (
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsClinicallyVerified
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsAuthorise =
              false;
          }
          if (
            this.objProcessingItemVM != null &&
            this.objProcessingItemVM.FormViewerDetails != null
          ) {
            if (
              this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                .MedDRCReason != null
            ) {
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
            }
            if (
              this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                .DRCAcknowledge
            )
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
            if (
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM
                  .DRCComments
              )
            ) {
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
            }
          }
          let isSteppedVariable: boolean = false;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
            (String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
                DoseTypeCode.VARIABLE,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
              String.Equals(
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.CurrentCultureIgnoreCase
              ))
          ) {
            isSteppedVariable = true;
          }
          let oTempStartDttm: DateTime =
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.DateTime.Add(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .StartPrescriptionTime.TimeOfDay
            );
          if (
            (isSteppedVariable &&
              DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails
                .OrginalStartDTTM, oTempStartDttm) &&
              DateTime.LessThanOrEqualTo(this.objNewItemVM.FormViewerDetails.BasicDetails
                .OrginalStartDTTM, oCurrentDTTM)) ||
            (!isSteppedVariable &&
              DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails
                .OrginalStartDTTM, oTempStartDttm) &&
              DateTime.LessThanOrEqualTo(this.objNewItemVM.FormViewerDetails.BasicDetails
                .OrginalStartDTTM, oCurrentDTTM))
          ) {
            if (isSteppedVariable) {
              //Not used
              /*if (this.objFormViewer != null) {
                                if (this.objFormViewer.dtpStartDate != null)
                                    // this.objFormViewer.dtpStartDate.OnDateValueChanged -= this.objFormViewer.dtpStartDate_OnDateValueChanged;
                                if (this.objFormViewer.iTimeStartDateTime != null)
                                    // this.objFormViewer.iTimeStartDateTime.ValueChanged -= this.objFormViewer.iTimeStartDateTime_ValueChanged;
                            }*/
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsStepDoseStartDTTMRestored =
                true;
              let oTmpCurrentTime: DateTime = DateTime.MinValue;
              if (
                !String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Clerking
                )
              ) {
                oTmpCurrentTime = oCurrentDTTM;
              } else {
                oTmpCurrentTime = oCurrentDTTM.Date;
              }
              let IsClerkingStartDTTMAvailable: boolean = false;
              if (
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Clerking,
                  StringComparison.InvariantCultureIgnoreCase
                ) &&
                ((this.objNewItemVM.FormViewerDetails.BasicDetails
                  .Partialdate &&
                  (this.objNewItemVM.FormViewerDetails.BasicDetails.Year > 0 ||
                    this.objNewItemVM.FormViewerDetails.BasicDetails.Month !=
                      null)) ||
                  (this.objNewItemVM.FormViewerDetails.BasicDetails
                    .Completedate &&
                    DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails
                      .CompleteStartDTTM, DateTime.MinValue)))
              ) {
                IsClerkingStartDTTMAvailable = true;
              }
              if (
                !IsClerkingStartDTTMAvailable &&
                !this.objNewItemVM.IsStartDTTMAssignedForAmend
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                  oTmpCurrentTime;
                this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalStartDTTM =
                  oTmpCurrentTime;
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                  oTmpCurrentTime;
              }
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsStepDoseStartDTTMRestored =
                false;
              if (
                this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
                this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM,
                  DateTime.MinValue) &&
                DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
                  DateTime.MinValue) &&
                DateTime.LessThan(this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MultiDoseDetails != null
              ) {
                let nDoseCnt: number =
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails.Count;
                let StepEndDTTM: DateTime = DateTime.MinValue;
                if (
                  nDoseCnt > 0 &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MultiDoseDetails[nDoseCnt - 1] != null
                ) {
                  if (
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .MultiDoseDetails[nDoseCnt - 1].DurationUOM != null &&
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .MultiDoseDetails[nDoseCnt - 1].Duration > 0 &&
                    (!String.IsNullOrEmpty(
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .MultiDoseDetails[nDoseCnt - 1].DurationUOM.Value
                    ) ||
                      !String.IsNullOrEmpty(
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .MultiDoseDetails[nDoseCnt - 1].DurationUOM
                          .DisplayText
                      )) &&
                    DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails
                      .MultiDoseDetails[nDoseCnt - 1].EndDTTM,
                      DateTime.MinValue)
                  ) {
                    StepEndDTTM =
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .MultiDoseDetails[nDoseCnt - 1].EndDTTM;
                  } else {
                    StepEndDTTM = DateTime.MinValue;
                  }
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate =
                    StepEndDTTM;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime =
                    StepEndDTTM;
                }
              }
            } else if (
              (String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking
              ) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IsenableStartdate == true &&
                DateTime.GreaterThan(this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM,
                  DateTime.MinValue)) ||
              !String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking
              )
            ) {
              let IsFirstItemInSequential: boolean = false;
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo > 0
              ) {
                let objInfVM: InfusionVM =
                  CSequentialHelper.GetFirstActiveItemInfusionVM(
                    this.MedsResolve,
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionDetails.GroupSequenceNo
                  );
                if (
                  objInfVM != null &&
                  objInfVM.ItemSequenceNo ==
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionDetails.ItemSequenceNo
                ) {
                  IsFirstItemInSequential = true;
                }
              }
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo > 0 &&
                !IsFirstItemInSequential
              ) {
                let oInfusionContinousSeq: InfContinousSequentail = null;
                if (this.objNewItemVM.ParentbaseVM != null)
                  oInfusionContinousSeq =
                    this.objNewItemVM.ParentbaseVM.InfusionContinousSeq;
                let PreviousStartDTTM: DateTime = DateTime.MinValue;
                let PreviousStartPrescriptionTime: DateTime = DateTime.MinValue;
                let isNextScheduleExists: boolean =
                  this.objNewItemVM.IsNextSeqSlotExists(
                    oInfusionContinousSeq,
                    this.objNewItemVM,
                    (o1) => {
                      PreviousStartDTTM = o1;
                    },
                    (o2) => {
                      PreviousStartPrescriptionTime = o2;
                    }
                  );
                if (isNextScheduleExists) {
                  if (
                    DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM
                      .Date, PreviousStartDTTM.Date)
                  )
                    this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                      DateTime.MinValue;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                    PreviousStartDTTM;
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                    PreviousStartPrescriptionTime;
                }
              } else if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
                  null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                  .GroupSequenceNo > 0 &&
                CommonSequentialHelper.IsSequeneSubsequentItem(
                  this.objNewItemVM
                )
              ) {
              } else if (!this.objNewItemVM.IsStartDTTMAssignedForAmend) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsRequiredUpdateAdmintimes =
                  true;
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails != null &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedFrequencyDetails.Type
                  ) &&
                  String.Equals(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedFrequencyDetails.Type,
                    'CC_PERIOD',
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  PatientContext.PrescriptionType ==
                    PrescriptionTypes.ForAdministration &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedFrequencyDetails.UOM
                  ) &&
                  String.Equals(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedFrequencyDetails.UOM,
                    'CC_IPONCENLY',
                    StringComparison.OrdinalIgnoreCase
                  ) &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes !=
                    null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                    .AdministrationScheduleTimes != null
                ) {
                  let ScheduleDTTM: DateTime =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Select(
                      (c) => c.ScheduleDTTM
                    ).FirstOrDefault();
                  oCurrentDTTM = oCurrentDTTM.DateTime.AddTime(ScheduleDTTM);
                }
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                  oCurrentDTTM;
                this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalStartDTTM =
                  oCurrentDTTM;
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                  oCurrentDTTM.AddTicks(
                    -(oCurrentDTTM.Ticks % TimeSpan.TicksPerMinute)
                  );
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopDate =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime;
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsRequiredUpdateAdmintimes =
                  false;
              }
            }
          }
          if (
            PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsenableStartdate == false &&
            DateTime.GreaterThan(this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM,
              DateTime.MinValue)
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
              DateTime.MinValue;
            this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalStartDTTM =
              DateTime.MinValue;
            this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
              DateTime.MinValue;
          }
          if (
            this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
            !String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode)
          ) {
            this.objProcessingItemVM.PreviousOperationMode =
              this.objProcessingItemVM.OperationMode;
          }
          this.objProcessingItemVM.OperationMode = 'M';
          if (
            this.objProcessingItemVM != null &&
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionType != null &&
            !String.IsNullOrEmpty(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionType.Value
            ) &&
            String.Equals(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionType.Value,
              InfusionTypeCode.INTERMITTENT
            )
          ) {
            IsInfTypeIntermittent = true;
          }
          if (
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionType != null &&
            DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails.StartDTTM,
              DateTime.MinValue) &&
            DateTime.LessThanOrEqualTo(this.objProcessingItemVM.FormViewerDetails.BasicDetails.StartDTTM,
              oCurrentDTTM) &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration
            ) &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ModificationAction,
              CConstants.Activity_Discontinue
            ) &&
            !String.IsNullOrEmpty(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionType.Value
            ) &&
            String.Equals(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionType.Value,
              InfusionTypesCode.PCA
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString()
            ) &&
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
              '1',
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            (this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
              'LowConcentration'
            ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
                'LowConcentrationUOM'
              ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
                'UpperConcentration'
              ) ||
              this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
                'UpperConcentrationUOM'
              ))
          ) {
            this.objProcessingItemVM.PrescriptionItemStatus =
              CConstants.DISCONTINUED;
          } else {
            let tmpStartDate: DateTime = DateTime.MinValue;
            if (
              DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .StartDTTM, DateTime.MinValue)
            )
              tmpStartDate =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.StartDTTM.AddMinutes(
                  -MedChartData.DuenessThreshold
                );
            let IsSeqItemTobeCompleted: boolean = false;
            if (
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.GroupSequenceNo > 0
            ) {
              let objInfVM: InfusionVM =
                CSequentialHelper.GetFirstActiveItemInfusionVM(
                  this.objProcessingItemVM.ParentbaseVM.MedsResolve,
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.GroupSequenceNo
                );
              if (
                objInfVM != null &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails.ItemSequenceNo != objInfVM.ItemSequenceNo &&
                DateTime.Equals(this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .StartDTTM, DateTime.MinValue)
              ) {
                IsSeqItemTobeCompleted = true;
              }
            }
            if (
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration
              ) &&
              !String.Equals(
                PatientContext.ClerkFormViewDefaultBehavior,
                ClerkFormViewDeftBehaviour.LaunchFormMandatory
              ) &&
              ((DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .StartDTTM, DateTime.MinValue) &&
                DateTime.LessThanOrEqualTo(this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .StartDTTM, oCurrentDTTM)) ||
                (DateTime.NotEquals(tmpStartDate, DateTime.MinValue) &&
                  DateTime.LessThanOrEqualTo(tmpStartDate, oCurrentDTTM) &&
                  !IsInfTypeIntermittent) ||
                this.objProcessingItemVM.IsInfInprogress ||
                this.objProcessingItemVM.IsDueNowSlot ||
                IsSeqItemTobeCompleted)
            ) {
              let isFutureStopTime: boolean = false;
              this.objProcessingItemVM.PrescriptionItemStatus =
                CConstants.COMPLETED;
              this.objProcessingItemVM.IsAmendCompletedStatus = true;
              if (isSteppedVariable) {
                let dtTmpEndDTTM: DateTime =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .StartPrescriptionTime
                  );
                if (DateTime.GreaterThan(dtTmpEndDTTM, oCurrentDTTM)) isFutureStopTime = true;
              } else {
                isFutureStopTime = true;
              }
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsRequiredUpdateAdmintimes =
                true;
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .SelectedFrequencyDetails != null &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.Type
                ) &&
                String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.Type,
                  'CC_PERIOD',
                  StringComparison.CurrentCultureIgnoreCase
                ) &&
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.ForAdministration &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.UOM
                ) &&
                String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.UOM,
                  'CC_IPONCENLY',
                  StringComparison.OrdinalIgnoreCase
                ) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes !=
                  null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                  .AdministrationScheduleTimes != null
              ) {
                let ScheduleDTTM: DateTime =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Select(
                    (c) => c.ScheduleDTTM
                  ).FirstOrDefault();
                oCurrentDTTM = oCurrentDTTM.DateTime.AddTime(ScheduleDTTM);
                if (isFutureStopTime) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.AddTime(
                      ScheduleDTTM
                    );
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.AddTime(
                      ScheduleDTTM
                    );
                }
              }
              if (isFutureStopTime) {
                let _TempStopDTTM: DateTime =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .StartPrescriptionTime
                  );
                if (
                  this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
                  this.objNewItemVM.FormViewerDetails != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.GroupSequenceNo > 0 &&
                  DateTime.LessThanOrEqualTo(_TempStopDTTM, oCurrentDTTM)
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopDate =
                    oCurrentDTTM;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime =
                    oCurrentDTTM;
                } else {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopDate =
                    _TempStopDTTM;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime =
                    _TempStopDTTM;
                }
              } else {
                let dtTmpEndDTTM: DateTime =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.DateTime.AddTime(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .StartPrescriptionTime
                  );
                let _TempStopDateTime: DateTime =
                  DateTime.NotEquals(dtTmpEndDTTM, DateTime.MinValue) &&
                  DateTime.LessThan(dtTmpEndDTTM, oCurrentDTTM)
                    ? dtTmpEndDTTM
                    : oCurrentDTTM;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopDate =
                  _TempStopDateTime;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime =
                  _TempStopDateTime;
                this.objNewItemVM.FormViewerDetails.BasicDetails.AmendedCurrDTTM =
                  _TempStopDateTime;
              }
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsRequiredUpdateAdmintimes =
                false;
            } else {
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsRequiredUpdateAdmintimes =
                true;
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .SelectedFrequencyDetails != null &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.Type
                ) &&
                String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.Type,
                  'CC_PERIOD',
                  StringComparison.CurrentCultureIgnoreCase
                ) &&
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.ForAdministration &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.UOM
                ) &&
                String.Equals(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.UOM,
                  'CC_IPONCENLY',
                  StringComparison.OrdinalIgnoreCase
                ) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes !=
                  null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                  .AdministrationScheduleTimes != null
              ) {
                let ScheduleDTTM: DateTime =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.Select(
                    (c) => c.ScheduleDTTM
                  ).FirstOrDefault();
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.AddTime(
                    ScheduleDTTM
                  );
                this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM.AddTime(
                    ScheduleDTTM
                  );
              }
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsRequiredUpdateAdmintimes =
                false;
              if (
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.CurrentCultureIgnoreCase
                ) &&
                !String.Equals(
                  this.objProcessingItemVM.PrescriptionItemStatus,
                  'MEDStatus14',
                  StringComparison.CurrentCultureIgnoreCase
                )
              ) {
                this.objProcessingItemVM.PrescriptionItemStatus =
                  CConstants.CANCELLED;
              } else {
                if (
                  String.Equals(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .ModificationAction,
                    CConstants.Activity_Discontinue
                  )
                )
                  this.objProcessingItemVM.PrescriptionItemStatus =
                    CConstants.DISCONTINUED;
                else if (
                  String.Equals(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .ModificationAction,
                    CConstants.Activity_Cancel
                  )
                )
                  this.objProcessingItemVM.PrescriptionItemStatus =
                    CConstants.CANCELLED;
              }
              if (
                this.SelectedPrescribeItem != null &&
                this.SelectedPrescribeItem.FormViewerDetails != null &&
                this.SelectedPrescribeItem.FormViewerDetails.BasicDetails !=
                  null &&
                String.Compare(
                  this.SelectedPrescribeItem.FormViewerDetails.BasicDetails
                    .itemSubType,
                  CConstants.SUBTYPE,
                  StringComparison.OrdinalIgnoreCase
                ) == 0 &&
                String.Compare(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 &&
                String.Compare(
                  this.objProcessingItemVM.PrescriptionItemStatus,
                  'MEDStatus14',
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0
              ) {
                this.objProcessingItemVM.PrescriptionItemStatus =
                  CConstants.CANCELLED;
              }
            }
          }
          if (
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.Infused ==
              '1' &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.CurrentCultureIgnoreCase
            ) &&
            !this.objProcessingItemVM.IsDueNowSlot &&
            !this.objProcessingItemVM.IsInfInprogress &&
            !IsInfTypeIntermittent &&
            !String.Equals(
              this.objProcessingItemVM.PrescriptionItemStatus,
              'MEDStatus14',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.objProcessingItemVM.PrescriptionItemStatus =
              CConstants.CANCELLED;
          } else if (
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails != null &&
            !String.Equals(
              this.objProcessingItemVM.PrescriptionItemStatus,
              'MEDStatus14',
              StringComparison.CurrentCultureIgnoreCase
            ) &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails.SequentialItemOrder > 1 &&
            !this.objProcessingItemVM.IsDueNowSlot &&
            !this.objProcessingItemVM.IsInfInprogress
          ) {
          }
          if (
            this.objProcessingItemVM != null &&
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
            DateTime.NotEquals(this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM,
              DateTime.MinValue) &&
            (String.Equals(
              this.objProcessingItemVM.PrescriptionItemStatus,
              CConstants.DISCONTINUED,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                this.objProcessingItemVM.PrescriptionItemStatus,
                CConstants.COMPLETED,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              String.Equals(
                this.objProcessingItemVM.PrescriptionItemStatus,
                CConstants.CANCELLED,
                StringComparison.InvariantCultureIgnoreCase
              )) &&
            (this.objProcessingItemVM.IsDoseCalcPerformed ||
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .IsDoseCalcExist) &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseCalcExist.Equals(
              '2'
            )
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseCalcExist =
              '1';
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.PreviousDoseCalcExist =
              '2';
          }
          if (
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails.SequentialItemOrder >= 1
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Collapsed;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Collapsed;
          }
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ReviewAfterVisible == Visibility.Visible &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsenableReviewAfter &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.objProcessingItemVM != null &&
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.currentItemReviewafter =
              this.objNewItemVM.FormViewerDetails.BasicDetails.currentItemReviewafter;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.currentItemReviewafterUOM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.currentItemReviewafterUOM;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments;
          }
          this.ValidateStationaryType();
          if (
            this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
            this.objNewItemVM.FormViewerDetails.TechValidateDetails
              .TechValidatedItems != null
          ) {
            let TechValidatItems =
              this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
                (TechValItems) => TechValItems.IsDoseCombinationsDefined == '1'
              ).Select((TechValItems) => TechValItems);
            this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems =
              new ObservableCollection<CustomTechValidatedItem>(
                TechValidatItems
              );
          }
          if (
            this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
            (this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction == null ||
              (this.objNewItemVM.FormViewerDetails.BasicDetails
                .SelectedsupplyInstruction != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction.Count == 0)) &&
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            this.objNewItemVM.IsProdOptChange == 0 &&
            (this.objNewItemVM.SelectedSupplyreq == null ||
              (this.objNewItemVM.SelectedSupplyreq != null &&
                String.Equals(
                  this.objNewItemVM.SelectedSupplyreq.Value,
                  Resource.TechValidate.Empty,
                  StringComparison.InvariantCultureIgnoreCase
                )))
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              false;
          }
          if (
            this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.Value
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsChangedFrequencyValueInAmend.Equals(
              'N'
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .PresItemEncounterDetail != null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .PresItemEncounterDetail.Value
            ) &&
            PatientContext.EncounterOid > 0 &&
            !String.IsNullOrEmpty(PatientContext.EncounterCode) &&
            Common.CheckClinicalEncounterType(PatientContext.EncounterCode) &&
            Common.CheckClinicalEncounterType(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .PresItemEncounterDetail.DisplayText
            ) &&
            PatientContext.EncounterOid !=
              Convert.ToInt64(
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .PresItemEncounterDetail.Value
              ) &&
            !String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .PresItemEncounterDetail.DisplayText,
              PatientContext.EncounterCode,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdminType.Equals(
              'D'
            ) &&
            ProfileData.ScheduleConfig instanceof ScheduleConfig &&
            ProfileData.ScheduleConfig != null &&
            !String.Equals(
              ProfileData.ScheduleConfig.SlotTimesTypeForAdmin,
              'Y',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsDrugRoundTimesAvailForAmendGetFrequency =
              true;
            this.objNewItemVM.FormViewerDetails.BasicDetails.GetFrequencyDetails(
              Convert.ToInt64(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.Value
              )
            );
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsChangedFrequencyValueInAmend =
              'S';
          }
          this.InsertNewReorder_AmendItem();
          if (
            (this.ActivityCode as ActivityTypes) != ActivityTypes.Reorder &&
            this.objProcessingItemVM != null
          ) {
            Common.UpdateChanges(this.objProcessingItemVM);
          }
          this.SetDCIndicator();
          this.objProcessingItemVM = null;
        } else if (
          ((PatientContext.ClerkFormViewDefaultBehavior ==
            ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.InvariantCultureIgnoreCase
            )) ||
            !String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.InvariantCultureIgnoreCase
            )) &&
          String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationAction
          ) &&
          !(
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenu,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) &&
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenu,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null
          ) {
            if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .AdminInstruction != null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .AdminInstruction.DisplayText,
                    Value:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .AdminInstruction.Value,
                  });
              } else {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
                  null;
              }
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
                this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdditionalComments =
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdditionalComments;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.Quantity =
                this.objNewItemVM.FormViewerDetails.BasicDetails.Quantity;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.QuantityUOM =
                this.objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOM;
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails =
                this.objNewItemVM.FormViewerDetails.TechValidateDetails;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.Frequency =
                this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.DosageForm =
                this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.Route =
                this.objNewItemVM.FormViewerDetails.BasicDetails.Route;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.Dose =
                this.objNewItemVM.FormViewerDetails.BasicDetails.Dose;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseUOM =
                this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds;
              if (
                PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfter =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM;
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .ReviewafterUOM != null
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM;
                }
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments;
              }
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets !=
                  null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets
                  .Tag != null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.OrdersetAssociationOID =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Tag.ToString();
              }
              if (this.objNewItemVM.IsDoseCalcPerformedInAmend) {
                this.objProcessingItemVM.IsDoseCalcPerformed =
                  this.objNewItemVM.IsDoseCalcPerformed;
                this.objProcessingItemVM.IsDoseCalcPerformedInAmend =
                  this.objNewItemVM.IsDoseCalcPerformedInAmend;
                this.objProcessingItemVM.DoseCalculationDetails =
                  this.objNewItemVM.DoseCalculationDetails;
                this.objProcessingItemVM.IsDoseCalcInfo =
                  this.objNewItemVM.IsDoseCalcInfo;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist;
                if (this.objNewItemVM.DoseCalculationDetails != null) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM =
                    this.objNewItemVM.DoseCalculationDetails.CalculatedDTTM;
                } else {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM =
                    DateTime.MinValue;
                }
              }
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.Duration =
                this.objNewItemVM.FormViewerDetails.BasicDetails.Duration;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.DurationUOM =
                this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.NoOfInstallments =
                this.objNewItemVM.FormViewerDetails.BasicDetails.NoOfInstallments;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.Supplycomments =
                this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
                this.objNewItemVM.FormViewerDetails.BasicDetails.DRCDosetype;
              this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory =
                this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory;
              this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory =
                this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend =
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend;
              this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType =
                this.objNewItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType;
              if (
                this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                  .IsAmendDRCRegenarated
              ) {
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
                this.objProcessingItemVM.ActionCode =
                  this.objNewItemVM.ActionCode;
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated =
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated;
                if (
                  this.objNewItemVM.FormViewerDetails != null &&
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                    .MedDRCReason != null &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                      .MedDRCReason.Value
                  )
                ) {
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
                }
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DRCDosetype;
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
              } else {
                if (
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM !=
                    null &&
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM
                    .Count > 0 &&
                  this.objNewItemVM.bDRCConflicttabloaded
                ) {
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded =
                    true;
                }
                if (
                  this.objNewItemVM.FormViewerDetails != null &&
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                    .MedDRCReason != null &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                      .MedDRCReason.Value
                  )
                ) {
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType =
                    !String.IsNullOrEmpty(
                      this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                        .BehaviourType
                    )
                      ? this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                          .BehaviourType
                      : String.Empty;
                }
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
              }
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsVal =
                this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsVal;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsText =
                this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsText;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel =
                this.objNewItemVM.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText =
                this.objNewItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText;
              if (
                String.IsNullOrEmpty(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments
                ) &&
                String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .Supplycomments
                ) &&
                String.Equals(
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments,
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .Supplycomments
                ) &&
                (this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction == null ||
                  (this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction != null &&
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyinstruction.Count == 0)) &&
                (this.objNewItemVM.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction == null ||
                  (this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction != null &&
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedsupplyInstruction.Count == 0))
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
              }
              if (
                (this.objProcessingItemVM.SelectedSupplyreq == null &&
                  this.objNewItemVM.SelectedSupplyreq != null &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.SelectedSupplyreq.Value
                  )) ||
                (this.objProcessingItemVM.SelectedSupplyreq != null &&
                  this.objNewItemVM.SelectedSupplyreq == null) ||
                (this.objProcessingItemVM.SelectedSupplyreq != null &&
                  this.objNewItemVM.SelectedSupplyreq != null &&
                  !String.Equals(
                    this.objProcessingItemVM.SelectedSupplyreq.Value,
                    this.objNewItemVM.SelectedSupplyreq.Value,
                    StringComparison.InvariantCultureIgnoreCase
                  ))
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  true;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  true;
              }
              this.objProcessingItemVM.SelectedSupplyreq =
                this.objNewItemVM.SelectedSupplyreq;
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.TecValOperationMode =
                'N';
              if (
                this.objNewItemVM != null &&
                this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                this.objProcessingItemVM != null &&
                this.objProcessingItemVM.FormViewerDetails != null &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.RHSSupplyInstrIconTooltip =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.RHSSupplyInstrIconTooltip;
              }
              if (
                !this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InAmendSupplyinstrClear &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction != null &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction.Count > 0 &&
                (this.objNewItemVM.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction == null ||
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction.Count == 0)
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InAmendSupplyinstrClear =
                  true;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.InAmendSupplyinstrClear =
                  true;
              }
              if (
                !this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InAmendSupplyinstrClear
              ) {
                if (
                  !String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyComments
                  ) &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  ) &&
                  String.Equals(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyComments,
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  ) &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count > 0 &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction.Count > 0 &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count ==
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedsupplyInstruction.Count
                ) {
                  let existsupplyinstcount: number =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyinstruction.Count;
                  let existsupplyvalue: string = String.Empty;
                  for (let i: number = 0; i < existsupplyinstcount; i++) {
                    existsupplyvalue =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ExistingSupplyinstruction[i].Value;
                    if (
                      this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                        (c) => c.Value == existsupplyvalue
                      ).Count() > 0
                    ) {
                      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                        false;
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                        false;
                    } else {
                      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                        true;
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                        true;
                      break;
                    }
                  }
                } else if (
                  !String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyComments
                  ) &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  ) &&
                  String.Equals(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyComments,
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  ) &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count == 0 &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction.Count == 0
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                    false;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                    false;
                } else if (
                  String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyComments
                  ) &&
                  String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  ) &&
                  String.Equals(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyComments,
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  ) &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count > 0 &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction.Count > 0 &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count ==
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedsupplyInstruction.Count
                ) {
                  let existsupplyinstcount: number =
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyinstruction.Count;
                  let existsupplyvalue: string = String.Empty;
                  for (let i: number = 0; i < existsupplyinstcount; i++) {
                    existsupplyvalue =
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ExistingSupplyinstruction[i].Value;
                    if (
                      this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                        (c) => c.Value == existsupplyvalue
                      ).Count() > 0
                    ) {
                      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                        false;
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                        false;
                    } else {
                      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                        true;
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                        true;
                      break;
                    }
                  }
                }
              }
              if (this.objNewItemVM.IsProdOptChange == 1) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  true;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  true;
              }
              if (
                this.objNewItemVM.FormViewerDetails.TechValidateDetails !=
                  null &&
                this.objNewItemVM.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems != null
              ) {
                let TechValidatItems =
                  this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
                    (TechValItems) =>
                      TechValItems.IsDoseCombinationsDefined == '1'
                  ).Select((TechValItems) => TechValItems);
                this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems =
                  new ObservableCollection<CustomTechValidatedItem>(
                    TechValidatItems
                  );
              }
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.ProblemIndication =
                this.objNewItemVM.FormViewerDetails.BasicDetails.ProblemIndication;
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MedClerkModifyReason != null &&
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MedClerkModifyReason.Value
                )
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .MedClerkModifyReason.DisplayText,
                    Value:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .MedClerkModifyReason.Value,
                  });
              }
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MedicationClerkingSource != null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource =
                  new ObservableCollection<CListItem>();
                this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.forEach(
                  (medClrkSrc) => {
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.Add(
                      medClrkSrc
                    );
                    if (medClrkSrc.DisplayText == 'Other') {
                      if (medClrkSrc.Tag != null) {
                        this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherComments =
                          medClrkSrc.Tag.ToString();
                      }
                    }
                  }
                );
              }
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.EndDTTM =
                this.objNewItemVM.FormViewerDetails.BasicDetails.EndDTTM;
              if (
                !String.IsNullOrEmpty(
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SiteFreeText
                )
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Site =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .SiteFreeText,
                  });
              } else if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.Site != null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Site =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.objNewItemVM.FormViewerDetails.BasicDetails.Site
                        .DisplayText,
                    Value:
                      this.objNewItemVM.FormViewerDetails.BasicDetails.Site
                        .Value,
                  });
              }
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod !=
                null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminMethod =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .AdminMethod.DisplayText,
                    Value:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .AdminMethod.Value,
                  });
              }
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .NONCatalogueReason != null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .NONCatalogueReason.DisplayText,
                    Value:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .NONCatalogueReason.Value,
                  });
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason;
              }
              if (
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .InfusionDetails != null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingType =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingType;
              }
            }
          }
          if (
            !String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) &&
            String.Compare(
              this.objProcessingItemVM.OperationMode,
              'DRCU',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            this.objProcessingItemVM.ActionCode =
              ActivityTypes.DRCConflictUpdate;
            this.objProcessingItemVM.OperationMode = 'DRCU';
          } else if (
            !String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) &&
            String.Compare(
              this.objProcessingItemVM.OperationMode,
              'CU',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            this.objProcessingItemVM.ActionCode = ActivityTypes.ConflictUpdate;
            this.objProcessingItemVM.OperationMode = 'CU';
          } else {
            this.objProcessingItemVM.OperationMode = 'UA';
            this.objProcessingItemVM.ActionCode = this.objNewItemVM.ActionCode;
          }
          if (
            (this.ActivityCode as ActivityTypes) != ActivityTypes.Reorder &&
            this.objProcessingItemVM != null
          ) {
            Common.UpdateChanges(this.objProcessingItemVM);
          }
          IsSequenceCommonUpdateCalled = true;
          this.SequenceCommonActionInAddtoResolveGrid(
            IsFrmVwAttributesChangedForAmendUpdate
          );
          this.callReBindResolveGridEvent(
            this.objProcessingItemVM.OperationMode,
            this.objProcessingItemVM,
            null
          );
          if (
            this.objProcessingItemVM != null &&
            String.Equals(
              this.objProcessingItemVM.PrescriptionItemStatus,
              CConstants.CLINICALLYVERIFIED,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.objNewItemVM.PrescriptionItemStatus =
              this.objProcessingItemVM.PrescriptionItemStatus;
          }
          this.objProcessingItemVM = null;
        } else if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenu,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenu,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.objProcessingItemVM.bCVFlagSetThroughCode = true;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified;
          this.objProcessingItemVM.bCVFlagSetThroughCode = false;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.VerificationComments =
            this.objNewItemVM.FormViewerDetails.BasicDetails.VerificationComments;
          if (
            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails ==
            null
          )
            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails =
              ObjectHelper.CreateObject(new TechValidateVM(), {
                Quantity: String.Empty,
                TotalQuantity: String.Empty,
              });
          if (
            ((PatientContext.ClerkFormViewDefaultBehavior ==
              ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.InvariantCultureIgnoreCase
              )) ||
              !String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.InvariantCultureIgnoreCase
              )) &&
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ModificationAction
            )
          ) {
            if (
              this.objNewItemVM != null &&
              this.objNewItemVM.FormViewerDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails != null
            ) {
              if (
                this.objProcessingItemVM != null &&
                this.objProcessingItemVM.FormViewerDetails != null &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
              ) {
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .AdminInstruction != null
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .AdminInstruction.DisplayText,
                      Value:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .AdminInstruction.Value,
                    });
                } else {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
                    null;
                }
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdditionalComments =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.AdditionalComments;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.TecValOperationMode =
                  'M';
                if (
                  String.IsNullOrEmpty(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyComments
                  ) &&
                  String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  ) &&
                  String.Equals(
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyComments,
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  ) &&
                  (this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction == null ||
                    (this.objProcessingItemVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyinstruction != null &&
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails
                        .ExistingSupplyinstruction.Count == 0)) &&
                  (this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction == null ||
                    (this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedsupplyInstruction != null &&
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .SelectedsupplyInstruction.Count == 0))
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                    false;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                    false;
                }
                if (
                  (this.objProcessingItemVM.SelectedSupplyreq == null &&
                    this.objNewItemVM.SelectedSupplyreq != null &&
                    !String.IsNullOrEmpty(
                      this.objNewItemVM.SelectedSupplyreq.Value
                    )) ||
                  (this.objProcessingItemVM.SelectedSupplyreq != null &&
                    this.objNewItemVM.SelectedSupplyreq == null) ||
                  (this.objProcessingItemVM.SelectedSupplyreq != null &&
                    this.objNewItemVM.SelectedSupplyreq != null &&
                    !String.Equals(
                      this.objProcessingItemVM.SelectedSupplyreq.Value,
                      this.objNewItemVM.SelectedSupplyreq.Value,
                      StringComparison.InvariantCultureIgnoreCase
                    ))
                ) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                    true;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                    true;
                }
                if (this.objNewItemVM.IsProdOptChange == 1) {
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                    true;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                    true;
                }
                this.objProcessingItemVM.SelectedSupplyreq =
                  this.objNewItemVM.SelectedSupplyreq;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsText =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsText;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsVal =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsVal;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText;
                if (
                  this.objNewItemVM.FormViewerDetails.TechValidateDetails !=
                    null &&
                  this.objNewItemVM.FormViewerDetails.TechValidateDetails
                    .TechValidatedItems != null
                ) {
                  let TechValidatItems =
                    this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
                      (TechValItems) =>
                        TechValItems.IsDoseCombinationsDefined == '1'
                    ).Select((TechValItems) => TechValItems);
                  this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems =
                    new ObservableCollection<CustomTechValidatedItem>(
                      TechValidatItems
                    );
                }
                if (
                  !this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InAmendSupplyinstrClear &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction != null &&
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count > 0 &&
                  (this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedsupplyInstruction == null ||
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SelectedsupplyInstruction.Count == 0)
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InAmendSupplyinstrClear =
                    true;
                }
          //      this.objProcessingItemVM.FormViewerDetails.BasicDetails.Frequency =
            //      this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency;
                //56121 fix
                  if (
                    this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
                    String.Equals(
                      this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
                      DoseTypeCode.STEPPEDVARIABLE
                    ) &&
                    this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
                      null
                  ) {
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails =
                      this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails;
                    this.objProcessingItemVM.oDoseRegime =
                      this.objNewItemVM.FillDoseRegime(
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                      );
                  } else  {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Frequency =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency;
                  }

                this.objProcessingItemVM.FormViewerDetails.BasicDetails.DosageForm =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds;
                if (
                  PatientContext.PrescriptionType !=
                  PrescriptionTypes.ForAdministration
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.Quantity =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.Quantity;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.QuantityUOM =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOM;
                }
                if (this.objNewItemVM.IsDoseCalcPerformedInAmend) {
                  this.objProcessingItemVM.IsDoseCalcPerformed =
                    this.objNewItemVM.IsDoseCalcPerformed;
                  this.objProcessingItemVM.IsDoseCalcPerformedInAmend =
                    this.objNewItemVM.IsDoseCalcPerformedInAmend;
                  this.objProcessingItemVM.DoseCalculationDetails =
                    this.objNewItemVM.DoseCalculationDetails;
                  this.objProcessingItemVM.IsDoseCalcInfo =
                    this.objNewItemVM.IsDoseCalcInfo;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist;
                  if (this.objNewItemVM.DoseCalculationDetails != null) {
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM =
                      this.objNewItemVM.DoseCalculationDetails.CalculatedDTTM;
                  } else {
                    this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM =
                      DateTime.MinValue;
                  }
                }
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Duration =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Duration;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.DurationUOM =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM;
                //Route not loaded
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Route = 
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Route;
                //
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.NoOfInstallments =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.NoOfInstallments;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Supplycomments =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.NextSupplyDate =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.DRCDosetype;
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory =
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory;
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory =
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend;
                this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType =
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType;
                if (
                  this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                    .IsAmendDRCRegenarated
                ) {
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
                  this.objProcessingItemVM.ActionCode =
                    this.objNewItemVM.ActionCode;
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated;
                  if (
                    this.objNewItemVM.FormViewerDetails != null &&
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                      .MedDRCReason != null &&
                    !String.IsNullOrEmpty(
                      this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                        .MedDRCReason.Value
                    )
                  ) {
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
                      this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
                  }
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.DRCDosetype;
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
                } else {
                  if (
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                      .MedDRCVM != null &&
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM
                      .Count > 0 &&
                    this.objNewItemVM.bDRCConflicttabloaded
                  ) {
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
                      this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded =
                      true;
                  }
                  if (
                    this.objNewItemVM.FormViewerDetails != null &&
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                      .MedDRCReason != null &&
                    !String.IsNullOrEmpty(
                      this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                        .MedDRCReason.Value
                    )
                  ) {
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
                      this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
                      this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
                    this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType =
                      !String.IsNullOrEmpty(
                        this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                          .BehaviourType
                      )
                        ? this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                            .BehaviourType
                        : String.Empty;
                  }
                  this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
                    this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
                }
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.ProblemIndication =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.ProblemIndication;
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MedClerkModifyReason != null &&
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .MedClerkModifyReason.Value
                  )
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason =
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .MedClerkModifyReason.DisplayText,
                      Value:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .MedClerkModifyReason.Value,
                    });
                }
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .MedicationClerkingSource != null
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource =
                    new ObservableCollection<CListItem>();
                  this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.forEach(
                    (medClrkSrc) => {
                      this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.Add(
                        medClrkSrc
                      );
                      if (medClrkSrc.DisplayText == 'Other') {
                        if (medClrkSrc.Tag != null) {
                          this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherComments =
                            medClrkSrc.Tag.ToString();
                        }
                      }
                    }
                  );
                }
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.EndDTTM =
                  this.objNewItemVM.FormViewerDetails.BasicDetails.EndDTTM;
                if (
                  !String.IsNullOrEmpty(
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SiteFreeText
                  )
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.Site =
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .SiteFreeText,
                    });
                } else if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Site != null
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.Site =
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText:
                        this.objNewItemVM.FormViewerDetails.BasicDetails.Site
                          .DisplayText,
                      Value:
                        this.objNewItemVM.FormViewerDetails.BasicDetails.Site
                          .Value,
                    });
                }
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .AdminMethod != null
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminMethod =
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .AdminMethod.DisplayText,
                      Value:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .AdminMethod.Value,
                    });
                }
                if (
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .NONCatalogueReason != null
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason =
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .NONCatalogueReason.DisplayText,
                      Value:
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .NONCatalogueReason.Value,
                    });
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason;
                }
                if (
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails != null &&
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails != null
                ) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingType =
                    this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingType;
                }
              }
            }
            this.objProcessingItemVM.OperationMode = 'UA';
          }
          if (
            PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked =
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked;
          }
          if (
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ModificationAction
            )
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ReasonforModification == null &&
              this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
              this.objNewItemVM.FormViewerDetails.TechValidateDetails
                .Technicalvalidateupdate
            ) {
              if (
                !this.GetDurationValueChange(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                ) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IsClearlstAmendList
              ) {
                this.objNewItemVM.OperationMode = 'TM';
                this.objProcessingItemVM.OperationMode = 'TM';
              }
            } else if (
              this.objNewItemVM.FormViewerDetails.TechValidateDetails != null
            ) {
              this.objNewItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                false;
            }
          } else {
            this.objNewItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
              false;
          }
          this.objProcessingItemVM.FormViewerDetails.TechValidateDetails =
            this.objNewItemVM.FormViewerDetails.TechValidateDetails;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DrugProperties =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties;
          if (
            ((String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                ContextInfo.MenuCode,
                CConstants.ClinicallyVerifyMenu,
                StringComparison.InvariantCultureIgnoreCase
              )) &&
              String.Equals(
                this.objProcessingItemVM.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.SUBMITTED,
                StringComparison.InvariantCultureIgnoreCase
              )) ||
            ((String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                ContextInfo.MenuCode,
                CConstants.AuthoriseMenu,
                StringComparison.InvariantCultureIgnoreCase
              )) &&
              String.Equals(
                this.objProcessingItemVM.PrescriptionItemStatus,
                PrescriptionItemStatusCodes.AWAITINGAUTHORISE,
                StringComparison.InvariantCultureIgnoreCase
              ))
          )
            this.objProcessingItemVM.FormViewerDetails.ConflictDetails =
              this.objNewItemVM.FormViewerDetails.ConflictDetails;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds;
          if (
            !PatientContext.PrescriptionType.Equals(
              PrescriptionTypes.ForAdministration,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.IsAmendUpdateOnNonIP = this.GetDurationValueChange(
              this.objNewItemVM.FormViewerDetails.BasicDetails
            );
          }
          let Index: number = -1;
          if (this.objProcessingItemVM != null) {
            Index = this.MedsResolve.IndexOf(this.objProcessingItemVM);
          }
          if (Index != -1) {
            this.MedsResolve[Index] = this.objProcessingItemVM;
          }
          if (
            (this.ActivityCode as ActivityTypes) != ActivityTypes.Reorder &&
            this.objProcessingItemVM != null
          ) {
            Common.UpdateChanges(this.objProcessingItemVM);
          }
          IsSequenceCommonUpdateCalled = true;
          this.SequenceCommonActionInAddtoResolveGrid(
            IsFrmVwAttributesChangedForAmendUpdate
          );
          this.callReBindResolveGridEvent(
            this.objProcessingItemVM.OperationMode,
            this.objProcessingItemVM,
            Index
          );
          this.objProcessingItemVM = null;
        } else if (
          this.objNewItemVM.FormViewerDetails.TechValidateDetails != null
        ) {
          if (
            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails ==
            null
          )
            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails =
              ObjectHelper.CreateObject(new TechValidateVM(), {
                Quantity: String.Empty,
                TotalQuantity: String.Empty,
              });
          if (
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ModificationAction
            )
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .ReasonforModification == null &&
              this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
              this.objNewItemVM.FormViewerDetails.TechValidateDetails
                .Technicalvalidateupdate
            ) {
              if (
                !this.GetDurationValueChange(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                ) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .IsClearlstAmendList
              ) {
                this.objNewItemVM.OperationMode = 'TM';
                this.objProcessingItemVM.OperationMode = 'TM';
              }
            } else if (
              this.objNewItemVM.FormViewerDetails.TechValidateDetails != null
            ) {
              this.objNewItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
                false;
            }
          } else {
            this.objNewItemVM.FormViewerDetails.TechValidateDetails.Technicalvalidateupdate =
              false;
          }
          this.objProcessingItemVM.FormViewerDetails.TechValidateDetails =
            this.objNewItemVM.FormViewerDetails.TechValidateDetails;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .TechValSupplyInst != null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.TechValSupplyInst
                .Value
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText =
              this.objNewItemVM.FormViewerDetails.BasicDetails.TechValSupplyInst.Value;
          }
          if (this.objNewItemVM != null && this.objNewItemVM.isTechVldLod) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText =
              this.objNewItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText;
          }
          if (
            this.objNewItemVM.FormViewerDetails.TechValidateDetails
              .SelectedPrescItem != null
          ) {
            this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild =
              this.objNewItemVM.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild;
          }
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DrugProperties =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds;
          if (
            PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfter =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsReviewAlert =
              this.objNewItemVM.FormViewerDetails.BasicDetails.IsReviewAlert;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments;
          }
          if (
            this.objProcessingItemVM != null &&
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails != null &&
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null
          )
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked;
        }
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableOnadmission
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '1';
          } else if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission &&
            !this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsEnableOnadmission
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '2';
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '0';
          }
          if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
              Visibility.Visible;
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
              Visibility.Collapsed;
          }
        }
      } else {
        if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenu,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenu,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.VerificationComments =
            this.objNewItemVM.FormViewerDetails.BasicDetails.VerificationComments;
          this.objProcessingItemVM.bCVFlagSetThroughCode = true;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified;
          this.objProcessingItemVM.bCVFlagSetThroughCode = false;
          this.objProcessingItemVM.IsClinicallyVerifyEnable =
            this.objNewItemVM.IsClinicallyVerifyEnable;
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsIDSNewmeds;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.DrugProperties =
          this.objNewItemVM.FormViewerDetails.BasicDetails.DrugProperties;
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objProcessingItemVM != null &&
          this.objProcessingItemVM.FormViewerDetails != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.RHSSupplyInstrIconTooltip =
            this.objNewItemVM.FormViewerDetails.BasicDetails.RHSSupplyInstrIconTooltip;
        }
        if (
          !String.IsNullOrEmpty(
            this.objProcessingItemVM.PrescriptionItemStatus
          ) &&
          String.Equals(
            this.objProcessingItemVM.PrescriptionItemStatus,
            CConstants.AWAITINGAUTHORISE
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsAuthorise =
            true;
        } else {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsAuthorise =
            false;
        }
        if (
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0 &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .IsClinicallyVerified
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsAuthorise =
            false;
        }
        this.objProcessingItemVM.FormViewerDetails.TechValidateDetails =
          this.objNewItemVM.FormViewerDetails.TechValidateDetails;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.Duration =
          this.objNewItemVM.FormViewerDetails.BasicDetails.Duration;
        //Route not loaded
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.Route = 
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route;
        //
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.NoOfInstallments =
          this.objNewItemVM.FormViewerDetails.BasicDetails.NoOfInstallments;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM;
        this.objProcessingItemVM.IsProdOptChange =
          this.objNewItemVM.IsProdOptChange;
        if (this.objNewItemVM.IsDoseCalcPerformedInAmend) {
          this.objProcessingItemVM.IsDoseCalcPerformed =
            this.objNewItemVM.IsDoseCalcPerformed;
          this.objProcessingItemVM.IsDoseCalcPerformedInAmend =
            this.objNewItemVM.IsDoseCalcPerformedInAmend;
          this.objProcessingItemVM.DoseCalculationDetails =
            this.objNewItemVM.DoseCalculationDetails;
          this.objProcessingItemVM.IsDoseCalcInfo =
            this.objNewItemVM.IsDoseCalcInfo;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist;
          if (this.objNewItemVM.DoseCalculationDetails != null) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM =
              this.objNewItemVM.DoseCalculationDetails.CalculatedDTTM;
          } else {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM =
              DateTime.MinValue;
          }
        }
        if (
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .InfusionDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingType =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingType;
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
          this.objNewItemVM.FormViewerDetails.BasicDetails.DRCDosetype;
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory;
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend;
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType;
        if (
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM
            .IsAmendDRCRegenarated
        ) {
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
          this.objProcessingItemVM.ActionCode = this.objNewItemVM.ActionCode;
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated;
          if (
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason
                .Value
            )
          ) {
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
          }
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DRCDosetype;
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
        } else {
          if (
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM !=
              null &&
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count >
              0 &&
            this.objNewItemVM.bDRCConflicttabloaded
          ) {
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded =
              true;
          }
          if (
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason
                .Value
            )
          ) {
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType =
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType
              )
                ? this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                    .BehaviourType
                : String.Empty;
          }
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
        }
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableOnadmission
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '1';
          } else if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission &&
            !this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsEnableOnadmission
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '2';
          } else {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '0';
          }
          if (this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
              Visibility.Visible;
          } else {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
              Visibility.Collapsed;
          }
        }
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.SelectedSupplyreq != null &&
          this.objNewItemVM.SelectedSupplyreq.Value != null &&
          !String.Equals(
            this.objNewItemVM.SelectedSupplyreq.Value,
            Resource.TechValidate.Empty
          )
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV = true;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
            true;
        }
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objProcessingItemVM.FormViewerDetails != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
          !this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV &&
          ((!String.IsNullOrEmpty(
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyComments
          ) &&
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            )) ||
            (String.IsNullOrEmpty(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyComments
            ) &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
              )) ||
            !String.Equals(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyComments,
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
            true;
          this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV = true;
        }
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objProcessingItemVM.FormViewerDetails != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
          !this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction.Count > 0 &&
          (this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .ExistingSupplyinstruction == null ||
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction.Count == 0)
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV = true;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
            true;
        }
        if (
          !String.IsNullOrEmpty(
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyComments
          ) &&
          String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
          )
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InAmendSupplyinstrClear =
            true;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InAmendSupplyinstrClear =
            true;
        }
        if (
          !this.objNewItemVM.FormViewerDetails.BasicDetails
            .InAmendSupplyinstrClear &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .ExistingSupplyinstruction != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .ExistingSupplyinstruction.Count > 0 &&
          (this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction == null ||
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction.Count == 0)
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InAmendSupplyinstrClear =
            true;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InAmendSupplyinstrClear =
            true;
          this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV = true;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
            true;
        }
        if (
          !this.objNewItemVM.FormViewerDetails.BasicDetails
            .InAmendSupplyinstrClear
        ) {
          if (
            !String.IsNullOrEmpty(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyComments
            ) &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            String.Equals(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyComments,
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction.Count > 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction.Count > 0 &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction.Count ==
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .SelectedsupplyInstruction.Count
          ) {
            let existsupplyinstcount: number =
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyinstruction.Count;
            let existsupplyvalue: string = String.Empty;
            for (let i: number = 0; i < existsupplyinstcount; i++) {
              existsupplyvalue =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction[i].Value;
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                  (c) => c.Value == existsupplyvalue
                ).Count() > 0
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  true;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  true;
                this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
                  true;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
                  true;
                break;
              }
            }
          } else if (
            !String.IsNullOrEmpty(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyComments
            ) &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            String.Equals(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyComments,
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction.Count == 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction.Count == 0
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              false;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              false;
          } else if (
            String.IsNullOrEmpty(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyComments
            ) &&
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            // String.Equals(
            //   this.objProcessingItemVM.FormViewerDetails.BasicDetails
            //     .ExistingSupplyComments,
            //   this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            // ) &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction.Count > 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction.Count > 0 &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction.Count ==
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .SelectedsupplyInstruction.Count
          ) {
            let existsupplyinstcount: number =
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyinstruction.Count;
            let existsupplyvalue: string = String.Empty;
            for (let i: number = 0; i < existsupplyinstcount; i++) {
              existsupplyvalue =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction[i].Value;
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                  (c) => c.Value == existsupplyvalue
                ).Count() > 0
              ) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  true;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  true;
                this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
                  true;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
                  true;
                break;
              }
            }
          } else if (
            String.IsNullOrEmpty(
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyComments
            ) &&
            String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            // String.Equals(
            //   this.objProcessingItemVM.FormViewerDetails.BasicDetails
            //     .ExistingSupplyComments,
            //   this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            // ) &&
            (this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .ExistingSupplyinstruction == null ||
              (this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .ExistingSupplyinstruction != null &&
                this.objProcessingItemVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction.Count == 0)) &&
            (this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction == null ||
              (this.objNewItemVM.FormViewerDetails.BasicDetails
                .SelectedsupplyInstruction != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction.Count == 0))
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              false;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              false;
          }
          if (
            DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails
              .OriginalNextSupplyDate, DateTime.MinValue) &&
            DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate,
              DateTime.MinValue) &&
            !String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .OriginalNextSupplyDate,
              this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
            this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV = true;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
              true;
          } else if (
            DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails
              .OriginalNextSupplyDate, DateTime.MinValue) &&
            DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate,
              DateTime.MinValue) &&
            !String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .OriginalNextSupplyDate,
              this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
            this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV = true;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
              true;
          } else if (
            DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails
              .OriginalNextSupplyDate, DateTime.MinValue) &&
            DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate,
              DateTime.MinValue) &&
            !String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .OriginalNextSupplyDate,
              this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
            this.objNewItemVM.FormViewerDetails.BasicDetails.OnbehalfTV = true;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.OnbehalfTV =
              true;
          }
          if (
            (this.objProcessingItemVM.SelectedSupplyreq == null &&
              this.objNewItemVM.SelectedSupplyreq != null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.SelectedSupplyreq.Value
              )) ||
            (this.objProcessingItemVM.SelectedSupplyreq != null &&
              this.objNewItemVM.SelectedSupplyreq == null) ||
            (this.objProcessingItemVM.SelectedSupplyreq != null &&
              this.objNewItemVM.SelectedSupplyreq != null &&
              !String.Equals(
                this.objProcessingItemVM.SelectedSupplyreq.Value,
                this.objNewItemVM.SelectedSupplyreq.Value,
                StringComparison.InvariantCultureIgnoreCase
              ))
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
          }
          if (this.objNewItemVM.IsProdOptChange == 1) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
              true;
          }
        }
        this.objProcessingItemVM.FormViewerDetails.ConflictDetails =
          this.objNewItemVM.FormViewerDetails.ConflictDetails;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.TecValOperationMode =
          'N';
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechPresItemTechOID =
          this.objNewItemVM.FormViewerDetails.BasicDetails.TechPresItemTechOID;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.DurationUOM =
          this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM;
        //Route not loaded
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.Route = 
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route;
        //
        if (this.objNewItemVM.IsDoseCalcPerformedInAmend) {
          this.objProcessingItemVM.IsDoseCalcPerformed =
            this.objNewItemVM.IsDoseCalcPerformed;
          this.objProcessingItemVM.IsDoseCalcPerformedInAmend =
            this.objNewItemVM.IsDoseCalcPerformedInAmend;
          this.objProcessingItemVM.DoseCalculationDetails =
            this.objNewItemVM.DoseCalculationDetails;
          this.objProcessingItemVM.IsDoseCalcInfo =
            this.objNewItemVM.IsDoseCalcInfo;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsDoseCalcExist;
          if (this.objNewItemVM.DoseCalculationDetails != null) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM =
              this.objNewItemVM.DoseCalculationDetails.CalculatedDTTM;
          } else {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.DCCalDTTM =
              DateTime.MinValue;
          }
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
          this.objNewItemVM.FormViewerDetails.BasicDetails.DRCDosetype;
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsDRCAcklgdeMandatory;
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsDRCReasonMandatory;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsChangedDRCDoseTypeForAmend;
        this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType =
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType;
        if (
          this.objNewItemVM.FormViewerDetails.PresItemDRCVM
            .IsAmendDRCRegenarated
        ) {
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
          this.objProcessingItemVM.ActionCode = this.objNewItemVM.ActionCode;
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated;
          if (
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason
                .Value
            )
          ) {
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
          }
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DRCDosetype =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DRCDosetype;
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
        } else {
          if (
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM !=
              null &&
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM.Count >
              0 &&
            this.objNewItemVM.bDRCConflicttabloaded
          ) {
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM =
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCVM;
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCDataLoaded =
              true;
          }
          if (
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason !=
              null &&
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason
                .Value
            )
          ) {
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason =
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.MedDRCReason;
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCComments =
              this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCComments;
            this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType =
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.PresItemDRCVM.BehaviourType
              )
                ? this.objNewItemVM.FormViewerDetails.PresItemDRCVM
                    .BehaviourType
                : String.Empty;
          }
          this.objProcessingItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge =
            this.objNewItemVM.FormViewerDetails.PresItemDRCVM.DRCAcknowledge;
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
          this.objNewItemVM.FormViewerDetails.BasicDetails.SelectedsupplyInstruction;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsText =
          this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsText;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsVal =
          this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsVal;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel =
          this.objNewItemVM.FormViewerDetails.BasicDetails.TechSupplyInstrItemLevel;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.Supplycomments =
          this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.NextSupplyDate =
          this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.FluidSupplyInstrText =
          this.objNewItemVM.FormViewerDetails.BasicDetails.FluidSupplyInstrText;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.FluidNextSupplyDate =
          this.objNewItemVM.FormViewerDetails.BasicDetails.FluidNextSupplyDate;
        if (
          !String.IsNullOrEmpty(this.objNewItemVM.ItemSubType) &&
          String.Equals(
            this.objNewItemVM.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.MulticomponentDetails != null &&
          this.objNewItemVM.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo != null &&
          this.objNewItemVM.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo.Count > 0 &&
          this.objNewItemVM.PresTechValidatedItemsChild != null &&
          this.objNewItemVM.PresTechValidatedItemsChild.Count > 0 &&
          this.objProcessingItemVM.FormViewerDetails != null &&
          this.objProcessingItemVM.FormViewerDetails.TechValidateDetails !=
            null &&
          this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems != null &&
          this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems.Count > 0 &&
          this.objProcessingItemVM.FormViewerDetails.TechValidateDetails
            .PresTechValidatedItems[0].PresTechValidatedItemsChild != null &&
          this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild.Count >
            0
        ) {
          this.objNewItemVM.PresTechValidatedItemsChild.forEach((child) => {
            let processingChildVM: PrescriptionItemVM =
              this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild.Where(
                (x) =>
                  x.FormViewerDetails.BasicDetails.IdentifyingOID ==
                  child.FormViewerDetails.BasicDetails.IdentifyingOID
              ).FirstOrDefault();
            if (processingChildVM != null) {
              if (
                !String.IsNullOrEmpty(
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments
                ) &&
                !String.IsNullOrEmpty(
                  child.FormViewerDetails.BasicDetails.Supplycomments
                ) &&
                String.Equals(
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments,
                  child.FormViewerDetails.BasicDetails.Supplycomments
                ) &&
                processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction != null &&
                processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction.Count > 0 &&
                child.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction != null &&
                child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                  .Count > 0 &&
                processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction.Count ==
                  child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                    .Count
              ) {
                let existsupplyinstcount: number =
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count;
                let existsupplyvalue: string = String.Empty;
                for (let i: number = 0; i < existsupplyinstcount; i++) {
                  existsupplyvalue =
                    processingChildVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyinstruction[i].Value;
                  if (
                    child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                      (c) => c.Value == existsupplyvalue
                    ).Count() > 0 &&
                    String.Equals(
                      child.SelectedSupplyreq.Value,
                      Resource.TechValidate.Empty,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    child.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                      false;
                    processingChildVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                      false;
                  } else {
                    child.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                      true;
                    processingChildVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                      true;
                    break;
                  }
                }
              } else if (
                !String.IsNullOrEmpty(
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments
                ) &&
                !String.IsNullOrEmpty(
                  child.FormViewerDetails.BasicDetails.Supplycomments
                ) &&
                String.Equals(
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments,
                  child.FormViewerDetails.BasicDetails.Supplycomments
                ) &&
                processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction != null &&
                processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction.Count == 0 &&
                child.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction != null &&
                child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                  .Count == 0 &&
                String.Equals(
                  child.SelectedSupplyreq.Value,
                  Resource.TechValidate.Empty,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ) {
                child.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
              } else if (
                String.IsNullOrEmpty(
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments
                ) &&
                String.IsNullOrEmpty(
                  child.FormViewerDetails.BasicDetails.Supplycomments
                ) &&
                String.Equals(
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments,
                  child.FormViewerDetails.BasicDetails.Supplycomments
                ) &&
                processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction != null &&
                processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction.Count > 0 &&
                child.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction != null &&
                child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                  .Count > 0 &&
                processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction.Count ==
                  child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                    .Count
              ) {
                let existsupplyinstcount: number =
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count;
                let existsupplyvalue: string = String.Empty;
                for (let i: number = 0; i < existsupplyinstcount; i++) {
                  existsupplyvalue =
                    processingChildVM.FormViewerDetails.BasicDetails
                      .ExistingSupplyinstruction[i].Value;
                  if (
                    child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                      (c) => c.Value == existsupplyvalue
                    ).Count() > 0 &&
                    String.Equals(
                      child.SelectedSupplyreq.Value,
                      Resource.TechValidate.Empty,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    child.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                      false;
                    processingChildVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                      false;
                  } else {
                    child.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                      true;
                    processingChildVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                      true;
                    break;
                  }
                }
              } else if (
                String.IsNullOrEmpty(
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyComments
                ) &&
                String.IsNullOrEmpty(
                  child.FormViewerDetails.BasicDetails.Supplycomments
                ) &&
                (processingChildVM.FormViewerDetails.BasicDetails
                  .ExistingSupplyinstruction == null ||
                  processingChildVM.FormViewerDetails.BasicDetails
                    .ExistingSupplyinstruction.Count == 0) &&
                (child.FormViewerDetails.BasicDetails
                  .SelectedsupplyInstruction == null ||
                  child.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
                    .Count == 0) &&
                String.Equals(
                  child.SelectedSupplyreq.Value,
                  Resource.TechValidate.Empty,
                  StringComparison.InvariantCultureIgnoreCase
                ) &&
                DateTime.Equals(child.FormViewerDetails.BasicDetails.NextSupplyDate,
                  child.FormViewerDetails.BasicDetails.OriginalNextSupplyDate)
              ) {
                child.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
                processingChildVM.FormViewerDetails.BasicDetails.IsSupplyinstrChanged =
                  false;
              }
            }
          });
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .FluidPrescribableItemListOID > 0
        ) {
          if (
            this.objNewItemVM.PresTechValidatedItemsChild != null &&
            this.objNewItemVM.PresTechValidatedItemsChild.Count > 0
          ) {
            this.objProcessingItemVM.PresTechValidatedItemsChild =
              this.objNewItemVM.PresTechValidatedItemsChild;
          }
        }
        if (
          this.objNewItemVM.FormViewerDetails.TechValidateDetails != null &&
          this.objNewItemVM.FormViewerDetails.TechValidateDetails
            .TechValidatedItems != null
        ) {
          let TechValidatItems =
            this.objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
              (TechValItems) => TechValItems.IsDoseCombinationsDefined == '1'
            ).Select((TechValItems) => TechValItems);
          this.objProcessingItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems =
            new ObservableCollection<CustomTechValidatedItem>(TechValidatItems);
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM !=
            null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM.Value
          ) &&
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM.Value,
            'CC_DOSES'
          ) &&
          (this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
            'Duration'
          ) ||
            this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Contains(
              'DurationUOM'
            )) &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminTimes ==
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminTimes =
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes;
        }
        this.objProcessingItemVM.FormViewerDetails.TechValidateDetails =
          this.objNewItemVM.FormViewerDetails.TechValidateDetails;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.TechValSupplyInst !=
            null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.TechValSupplyInst
              .Value
          )
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText =
            this.objNewItemVM.FormViewerDetails.BasicDetails.TechValSupplyInst.Value;
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText =
          this.objNewItemVM.FormViewerDetails.BasicDetails.TechsupplyInstText;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.EndDTTM =
          this.objNewItemVM.FormViewerDetails.BasicDetails.EndDTTM;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime =
          this.objNewItemVM.FormViewerDetails.BasicDetails.StopPrescriptionTime;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.StopDate =
          this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.PrescibableItemOID =
          this.objNewItemVM.FormViewerDetails.BasicDetails.PrescibableItemOID;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.Dose =
          this.objNewItemVM.FormViewerDetails.BasicDetails.Dose;
        if (
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
            .FreqDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedFrequencyDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedFrequencyDetails.LowPeriod > 1 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedFrequencyDetails.LowEvent == 1 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedFrequencyDetails.HighPeriod == 0 &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedFrequencyDetails.UOM
          ) &&
          DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalEndDTTM,
            DateTime.MinValue) &&
          (DateTime.LessThan(this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalEndDTTM,
            this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate) ||
            DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
              DateTime.MinValue))
        ) {
          let _oAdminTimesDetls: ObservableCollection<GrdAdminstrativeTimesCols> =
            new ObservableCollection<GrdAdminstrativeTimesCols>();
          let _objAdminTimesDetls: GrdAdminstrativeTimesCols =
            new GrdAdminstrativeTimesCols();
          let oTempDTTM: List<DateTime> = new List<DateTime>();
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes !=
              null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .AdministrationScheduleTimes != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
              .AdministrationScheduleTimes.Count > 0
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes.AdministrationScheduleTimes.forEach(
              (objAdminScheduleTime) => {
                _objAdminTimesDetls.IsFixedEnabled = true;
                _objAdminTimesDetls.FixedTimes =
                  objAdminScheduleTime.ScheduleDTTM.ToString('HH:mm');
                _oAdminTimesDetls.Add(_objAdminTimesDetls);
              }
            );
          }
          if (
            DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
              DateTime.MinValue) &&
            DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalEndDTTM,
              DateTime.MinValue)
          ) {
            oTempDTTM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.GetDoseDetailSV(
                this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalEndDTTM,
                this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
                oCurrentDTTM,
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                  .FreqDetails,
                _oAdminTimesDetls
              );
            if (oTempDTTM != null && oTempDTTM.Count > 0) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.NextSlotGenerateStartDTTM =
                oTempDTTM
                  .Where(
                    (c) =>
                      c.Date >
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .OrginalEndDTTM.Date
                  )
                  .FirstOrDefault().Date;
            }
          } else if (
            DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails.StopDate,
              DateTime.MinValue) &&
            DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalEndDTTM,
              DateTime.MinValue)
          ) {
            oTempDTTM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.GetDoseDetailSV(
                this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalEndDTTM,
                this.objNewItemVM.FormViewerDetails.BasicDetails.OrginalEndDTTM.AddDays(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .SelectedFrequencyDetails.LowPeriod
                ),
                oCurrentDTTM,
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes
                  .FreqDetails,
                _oAdminTimesDetls
              );
            if (oTempDTTM != null && oTempDTTM.Count > 0) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.NextSlotGenerateStartDTTM =
                oTempDTTM
                  .Where(
                    (c) =>
                      c.Date >
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .OrginalEndDTTM.Date
                  )
                  .FirstOrDefault().Date;
            }
          }
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsAmendedStopDTTMForAlternateDaysFreq =
            true;
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.UpperDose =
          this.objNewItemVM.FormViewerDetails.BasicDetails.UpperDose;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseUOM =
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseUOM;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.Quantity =
          this.objNewItemVM.FormViewerDetails.BasicDetails.Quantity;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.QuantityUOM =
          this.objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOM;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.QuantityUOMName =
          this.objNewItemVM.FormViewerDetails.BasicDetails.QuantityUOMName;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.ModificationComments =
          this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationComments;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdditionalComments =
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdditionalComments;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.ProblemIndication =
          this.objNewItemVM.FormViewerDetails.BasicDetails.ProblemIndication;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.PatientProblemCode =
          this.objNewItemVM.FormViewerDetails.BasicDetails.PatientProblemCode;
        if (
          !String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) &&
          String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.ModificationAction
          )
        ) {
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null
          ) {
            if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.FormViewerDetails != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
            ) {
              if (
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .AdminInstruction != null
              ) {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .AdminInstruction.DisplayText,
                    Value:
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .AdminInstruction.Value,
                  });
              } else {
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminInstruction =
                  null;
              }
            }
          }
        }
        if (this.objNewItemVM.FormViewerDetails.BasicDetails.PreDefinedMCI) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.PreDefinedMCI =
            this.objNewItemVM.FormViewerDetails.BasicDetails.PreDefinedMCI;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DisableConflictsMCI =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DisableConflictsMCI;
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsVal =
          this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsVal;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsText =
          this.objNewItemVM.FormViewerDetails.BasicDetails.SupplyInsText;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue =
          this.objNewItemVM.FormViewerDetails.BasicDetails.TreatmentToContinue;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.VerificationComments =
          this.objNewItemVM.FormViewerDetails.BasicDetails.VerificationComments;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.InstalmentInstructions =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InstalmentInstructions;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction =
          this.objNewItemVM.FormViewerDetails.BasicDetails.OtherAdminiInstruction;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.NoOfInstallments =
          this.objNewItemVM.FormViewerDetails.BasicDetails.NoOfInstallments;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.EndorsementProperties =
          this.objNewItemVM.FormViewerDetails.BasicDetails.EndorsementProperties;
        if (
          PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsMultiRouteChecked;
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.Route =
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.DosageForm =
          this.objNewItemVM.FormViewerDetails.BasicDetails.DosageForm;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute;
        if (
          PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfter =
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminTimes =
            this.objNewItemVM.FormViewerDetails.BasicDetails.AdminTimes;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM =
            this.objNewItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM !=
            null
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM =
              this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM;
          }
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsReviewAlert =
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsReviewAlert;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible =
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason !=
          null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.NONCatalogueReason =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .NONCatalogueReason.DisplayText,
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .NONCatalogueReason.Value,
            });
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason =
            this.objNewItemVM.FormViewerDetails.BasicDetails.OtherNONCatalogueReason;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .IsChksequentialPresitem
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Visible;
          } else if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder > 0 &&
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ParentPrescriptionItemOID > 0
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Visible;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.lstAmendedFlds.Any(
              (i) => i.Equals('InfusionPeriod')
            )
          ) {
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsEstimatedStopRecalculationRequired =
              true;
          }
          if (
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            PatientContext.ClerkFormViewDefaultBehavior !=
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ) {
            if (
              !String.IsNullOrEmpty(
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.Duration
              ) &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .DurationUOM != null &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null
            ) {
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOnGoing =
                'N';
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
                false;
            }
          }
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem;
        }
        this.objProcessingItemVM.IsReSupplyRequested =
          this.objNewItemVM.IsReSupplyRequested;
        this.objProcessingItemVM.IsWardStock = this.objNewItemVM.IsWardStock;
        this.objProcessingItemVM.IsSupplyRequested =
          this.objNewItemVM.IsSupplyRequested;
        this.objProcessingItemVM.RequisitionCACode =
          this.objNewItemVM.RequisitionCACode;
        this.objProcessingItemVM.SelectedSupplyreq =
          this.objNewItemVM.SelectedSupplyreq;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate =
          this.objNewItemVM.FormViewerDetails.BasicDetails.OriginalNextSupplyDate;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.NextSupplyDate =
          this.objNewItemVM.FormViewerDetails.BasicDetails.NextSupplyDate;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.EditedGridID =
          this.objNewItemVM.FormViewerDetails.BasicDetails.EditedGridID;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.itemSubType =
          this.objNewItemVM.FormViewerDetails.BasicDetails.itemSubType;
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.mCIItemDisplay =
          this.objNewItemVM.FormViewerDetails.BasicDetails.mCIItemDisplay;
        if (
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.MCIItemDrugprop
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.MCIItemDrugprop =
            this.objNewItemVM.FormViewerDetails.BasicDetails.MCIItemDrugprop;
        } else {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.MCIItemDrugprop =
            this.objNewItemVM.FormViewerDetails.BasicDetails.mCIItemDisplay;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails !=
          null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DefaultDetails =
            new FormViewerDefaultsVM();
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes =
            new ObservableCollection<CListItem>();
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.forEach(
            (oItem) => {
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  Value: oItem.Value,
                  DisplayText: oItem.DisplayText,
                  Tag: oItem.Tag,
                })
              );
            }
          );
        }
        if (
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DurationUOM ==
          null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DurationUOM =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DurationUOM;
        }
        if (this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseType =
            new CListItem();
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseType.DisplayText =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.DisplayText;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.DoseType.Value =
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.PRNInstruction !=
          null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.PRNInstruction =
            this.objNewItemVM.FormViewerDetails.BasicDetails.PRNInstruction;
        } else if (
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .PRNInstructionFreeText
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.PRNInstruction =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .PRNInstructionFreeText,
            });
        }
        if (
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.SiteFreeText
          ) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.Site == null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.Site =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.SiteFreeText,
            });
        } else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.Site != null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.Site =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Site
                  .DisplayText,
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.Site.Value,
            });
        }
        if (
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.SiteFreeText
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.SiteFreeText =
            this.objNewItemVM.FormViewerDetails.BasicDetails.SiteFreeText;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod != null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.AdminMethod =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod
                  .DisplayText,
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails.AdminMethod
                  .Value,
            });
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType != null &&
          String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE
          ) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails !=
            null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails =
            this.objNewItemVM.FormViewerDetails.BasicDetails.MultiDoseDetails;
          this.objProcessingItemVM.oDoseRegime =
            this.objNewItemVM.FillDoseRegime(
              this.objNewItemVM.FormViewerDetails.BasicDetails
            );
        } else if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency
              .DisplayText
          ) &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.Value
          ) &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.Frequency !=
            null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.Frequency.DisplayText =
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.DisplayText;
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.Frequency.Value =
            this.objNewItemVM.FormViewerDetails.BasicDetails.Frequency.Value;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .ReasonforModification != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .ReasonforModification.Value
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .ReasonforModification.DisplayText,
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .ReasonforModification.Value,
            });
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .MedClerkModifyReason != null &&
          !String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .MedClerkModifyReason.Value
          )
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedClerkModifyReason =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MedClerkModifyReason.DisplayText,
              Value:
                this.objNewItemVM.FormViewerDetails.BasicDetails
                  .MedClerkModifyReason.Value,
            });
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .MedicationClerkingSource != null
        ) {
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource =
            new ObservableCollection<CListItem>();
          this.objNewItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.forEach(
            (medClrkSrc) => {
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.MedicationClerkingSource.Add(
                medClrkSrc
              );
              if (medClrkSrc.DisplayText == 'Other') {
                if (medClrkSrc.Tag != null) {
                  this.objProcessingItemVM.FormViewerDetails.BasicDetails.OtherComments =
                    medClrkSrc.Tag.ToString();
                }
              }
            }
          );
        }
        this.objProcessingItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail =
          this.objNewItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail;
        if (
          this.ActivityCode == ActivityTypes.Amend &&
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objProcessingItemVM != null &&
          this.objProcessingItemVM.FormViewerDetails != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails
            .SequenceInfo != null &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .GroupSequenceNo > 0 &&
          this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .IsSequentialStartDTTMUpdated
        ) {
          if (this.IsDurationOnlyChanged) {
            this.objProcessingItemVM.OperationMode = 'UA';
            this.objNewItemVM.OperationMode =
              this.objProcessingItemVM.OperationMode;
            this.objNewItemVM.SequentialActionPerfromCodeAEITS = null;
            this.objNewItemVM.IsFormViewDataLoaded = false;
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentialStartDTTMUpdated =
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentialStartDTTMUpdated;
          }
        }
        let Index: number = -1;
        if (this.objProcessingItemVM != null) {
          Index = this.MedsResolve.IndexOf(this.objProcessingItemVM);
        }
        if (Index != -1) {
          let IsClinicallyValidateMode: boolean = false;
          if (
            !String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) &&
            this.objProcessingItemVM.OperationMode.Equals('M') &&
            (String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                ContextInfo.MenuCode,
                CConstants.ClinicallyVerifyMenu,
                StringComparison.InvariantCultureIgnoreCase
              ))
          ) {
            if (IsFrmVwAttributesChangedForAmendUpdate) {
              this.objProcessingItemVM.OperationMode = String.Empty;
            } else {
              IsClinicallyValidateMode = true;
            }
          }
          if (IsClinicallyValidateMode) {
            this.objProcessingItemVM.OperationMode = 'M';
          } else if (
            !String.IsNullOrEmpty(this.objProcessingItemVM.OperationMode) &&
            !this.objProcessingItemVM.OperationMode.Equals('UA')
          ) {
            this.objProcessingItemVM.OperationMode = 'CU';
          } else {
            this.objProcessingItemVM.OperationMode = 'UA';
            this.objProcessingItemVM.ActionCode = this.objNewItemVM.ActionCode;
          }
          if (
            this.ActivityCode == ActivityTypes.Amend &&
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            this.objProcessingItemVM != null &&
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .SequenceInfo != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .GroupSequenceNo > 0 &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .IsSequentialStartDTTMUpdated
          ) {
            if (this.IsDurationOnlyChanged) {
              this.objProcessingItemVM.OperationMode = 'UA';
              this.objNewItemVM.OperationMode =
                this.objProcessingItemVM.OperationMode;
              this.objNewItemVM.SequentialActionPerfromCodeAEITS = null;
              this.objNewItemVM.IsFormViewDataLoaded = false;
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentialStartDTTMUpdated =
                this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentialStartDTTMUpdated;
            }
          }
          if (
            this.objProcessingItemVM.ActionCode == ActivityTypes.Amend &&
            this.objProcessingItemVM != null &&
            this.objProcessingItemVM.FormViewerDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails != null &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails.GroupSequenceNo > 0 &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails.ItemSequenceNo > 0 &&
            this.objProcessingItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails.CboSequenceNamelstVisible == Visibility.Visible
          ) {
            let _ExistingPrescrItem: PrescriptionItemVM =
              this.objProcessingItemVM;
            this.MedsResolve.Remove(_ExistingPrescrItem);
            if (
              this.objProcessingItemVM.PrescriptionItemOID > 0 &&
              this.objProcessingItemVM.FormViewerDetails.BasicDetails
                .InfusionDetails.ItemSequenceNo == 1
            ) {
              _ExistingPrescrItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID =
                this.objProcessingItemVM.PrescriptionItemOID;
              _ExistingPrescrItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                this.objProcessingItemVM.PrescriptionItemOID;
            } else {
              let oInfFirstItem: PrescriptionItemVM = this.MedsResolve.Where(
                (i) =>
                  i.FormViewerDetails.BasicDetails.InfusionDetails
                    .GroupSequenceNo ==
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionDetails.GroupSequenceNo &&
                  i.FormViewerDetails.BasicDetails.InfusionDetails
                    .ItemSequenceNo == 1
              ).FirstOrDefault();
              if (
                oInfFirstItem == null &&
                this.oTempPrescDisCancelItemVM != null &&
                this.oTempPrescDisCancelItemVM.Count > 0
              ) {
                oInfFirstItem = this.oTempPrescDisCancelItemVM
                  .Where(
                    (i) =>
                      i.FormViewerDetails.BasicDetails.InfusionDetails
                        .GroupSequenceNo ==
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.GroupSequenceNo &&
                      i.FormViewerDetails.BasicDetails.InfusionDetails
                        .ItemSequenceNo == 1
                  )
                  .FirstOrDefault();
              }
              if (oInfFirstItem != null) {
                if (oInfFirstItem.PrescriptionItemOID > 0) {
                  _ExistingPrescrItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                    oInfFirstItem.PrescriptionItemOID;
                  _ExistingPrescrItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID =
                    oInfFirstItem.PrescriptionItemOID;
                } else {
                  let objFirstitem: InfusionVM =
                    CSequentialHelper.GetFirstActiveItemInfusionVM(
                      this.MedsResolve,
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .InfusionDetails.GroupSequenceNo
                    );
                  if (objFirstitem != null) {
                    _ExistingPrescrItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                      objFirstitem.PrescriptionItemNumber;
                    _ExistingPrescrItem.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID = 0;
                  }
                }
              }
            }
            if (
              this.objProcessingItemVM != null &&
              !this.objProcessingItemVM.OperationMode.Equals(
                'UA',
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              _ExistingPrescrItem.OperationMode = 'U';
              _ExistingPrescrItem.SequentialActionPerfromCodeAEITS =
                CAActivity.SequentialActionCodeAEITS;
            }
            _ExistingPrescrItem.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            _ExistingPrescrItem.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.MedsResolve.Insert(
              CSequentialHelper.GetIndexForNewItem(
                this.MedsResolve,
                _ExistingPrescrItem.FormViewerDetails.BasicDetails
                  .InfusionDetails.GroupSequenceNo
              ),
              _ExistingPrescrItem
            );
          } else {
            this.MedsResolve[Index] = this.objProcessingItemVM;
          }
        }
        if (
          (this.ActivityCode as ActivityTypes) != ActivityTypes.Reorder &&
          this.objProcessingItemVM != null
        ) {
          Common.UpdateChanges(this.objProcessingItemVM);
        }
        IsSequenceCommonUpdateCalled = true;
        this.SequenceCommonActionInAddtoResolveGrid(
          IsFrmVwAttributesChangedForAmendUpdate
        );
        this.callReBindResolveGridEvent(
          this.objProcessingItemVM.OperationMode,
          this.objProcessingItemVM,
          Index
        );
        this.objProcessingItemVM = null;
      }
    } else if (this.ActivityCode == ActivityTypes.Reorder) {
      if (this.objProcessingItemVM != null) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.oPrescitemVM !=
            null &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.oPrescitemVM.bIsReprescribe =
            this.objProcessingItemVM.bIsReprescribe;
        }
        this.objNewItemVM.ActionCode = ActivityTypes.Reorder;
        if (
          this.objProcessingItemVM != null &&
          this.objProcessingItemVM.EncounterOID == PatientContext.EncounterOid
        ) {
          if (
            !String.IsNullOrEmpty(
              this.objProcessingItemVM.ParentSourcePrescriptionType
            ) &&
            String.Equals(
              this.objProcessingItemVM.ParentSourcePrescriptionType,
              CConstants.Clerking
            ) &&
            this.objProcessingItemVM.bIsReprescribe
          ) {
            this.objNewItemVM.SourcePrescriptionOid =
              this.objProcessingItemVM.ReorderItemOID;
          } else {
            this.objNewItemVM.SourcePrescriptionOid =
              this.objProcessingItemVM.PrescriptionItemOID;
          }
          this.objNewItemVM.SourcePresOid =
            this.objProcessingItemVM.PrescriptionOID;
        }
        this.objNewItemVM.ParentReorderItemOID =
          this.objProcessingItemVM.ReorderItemOID;
        this.objNewItemVM.SourcePrevEncPrescriptionOid =
          this.objProcessingItemVM.PrescriptionItemOID;
        if (
          this.objNewItemVM.AlreadyPrescribedItemOID == 0 &&
          PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
          String.Equals(
            PrescriptionTypes.Discharge,
            this.objProcessingItemVM.ParentSourcePrescriptionType,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          this.objNewItemVM.ParentReorderItemOID > 0 &&
          this.objNewItemVM.formViewerDetails.BasicDetails != null &&
          String.Equals(
            this.objNewItemVM.formViewerDetails.BasicDetails.IdentifyingType,
            this.objNewItemVM.formViewerDetails.BasicDetails
              .OriginalIdentifyingType,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.objNewItemVM.AlreadyPrescribedItemOID =
            this.objNewItemVM.ParentReorderItemOID;
        }
        this.objNewItemVM.IsOrderSetLastItem =
          this.objProcessingItemVM.IsOrderSetLastItem;
        if (this.objProcessingItemVM != null) {
          this.objProcessingItemVM.IsReoderIconEnable = false;
          this.objProcessingItemVM.ReorderToolTip = 'Copied item';
        }
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsOnadmission &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
            Visibility.Visible;
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsEnableOnadmission
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '1';
          } else if (
            !this.objNewItemVM.FormViewerDetails.BasicDetails
              .IsEnableOnadmission
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '2';
          } else {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
              '0';
          }
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsDispalyOnadmission =
            Visibility.Collapsed;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsExistsOnAdmission =
            '0';
        }
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
          ((this.objNewItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction.Count > 0) ||
            !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Supplycomments
            ) ||
            (this.objNewItemVM.SelectedSupplyreq != null &&
              (String.Equals(
                this.objNewItemVM.SelectedSupplyreq.Value,
                CConstants.Supplycode,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
                String.Equals(
                  this.objNewItemVM.SelectedSupplyreq.Value,
                  CConstants.DonotSupplycode,
                  StringComparison.InvariantCultureIgnoreCase
                ))))
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.TecValOperationMode =
            'N';
        }
        this.InsertNewReorder_AmendItem();
        Busyindicator.SetStatusIdle('Reorder');
        Busyindicator.SetStatusIdle('Represribce');
      }
    } else if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .IsShowRouteDiscrepency &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .PrescriptionItemNumber > 0
    ) {
      let GetNonSeq = new ObservableCollection<PrescriptionItemVM>(
        this.MedsResolve.Where((c) => c.SeqOperationMode == 'R').Select(
          (s) => s
        )
      ).FirstOrDefault();
      let Remindex: number = this.MedsResolve.IndexOf(GetNonSeq);
      this.MedsResolve.RemoveAt(Remindex);
      let lastSequenceitem = ObjectHelper.CreateType<PrescriptionItemVM>(
        this.MedsResolve.Where(
          (c) =>
            c.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber ==
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber
        )
          .Select((s) => s)
          .LastOrDefault(),
        PrescriptionItemVM
      );
      let index: number = this.MedsResolve.IndexOf(lastSequenceitem) + 1;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
        Visibility.Visible;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Visible;
      this.SetClerked(this.objNewItemVM);
      this.MedsResolve.Insert(index, this.objNewItemVM);
    }
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.TechvalMsgResetAmend =
        false;
    }
    if (!IsSequenceCommonUpdateCalled) {
      this.SequenceCommonActionInAddtoResolveGrid(
        IsFrmVwAttributesChangedForAmendUpdate
      );
    }
    if (this.PrescriptionItemAddedEvent != null) {
      let bEventvalue: boolean = true;
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .ItemSequenceNo > 0
      ) {
        bEventvalue = false;
      }
      this.PrescriptionItemAddedEvent(bEventvalue);
    }
    if (this.PrescribeNewItemEvent != null) {
      this.PrescribeNewItemEvent(false);
    }
    if (typeof(this.objNewItemVM) !== 'undefined' && this.objNewItemVM != null && this.objNewItemVM.UniqueRowItemID == 0) {
      let UniqueID: Random = new Random();
      this.objNewItemVM.UniqueRowItemID = UniqueID.Next();
    }
    if (
      this.lUniqueRowIDForStatOrFollowup > 0 &&
      this.MedsResolve != null &&
      this.MedsResolve.Count > 0 &&
      this.MedsResolve[0].IsOrderSetHeader &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
          'S'
        ) ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
          'F'
        )
      )
        this.lUniqueRowIDForStatOrFollowup =
          this.objNewItemVM.UniqueRowID > 0
            ? this.objNewItemVM.UniqueRowID
            : this.objNewItemVM.UniqueRowItemID;
    }
    Busyindicator.SetStatusIdle('FormViewer');
    Busyindicator.SetStatusIdle('PrescribeProductOption');
    Busyindicator.SetStatusIdle('Favourites');
    Busyindicator.SetStatusIdle('IndicationreqForm');
    Busyindicator.SetStatusIdle('FormViewerClick');
    Busyindicator.SetStatusIdle('FormViewer');
    Busyindicator.SetStatusIdle('Orderset');
    Busyindicator.SetStatusIdle('Reorder');
    Busyindicator.SetStatusIdle('FormViewerClick');
    Busyindicator.SetStatusIdle('FormViewer');
    Busyindicator.SetStatusIdle('IndicationFormViewer');
    Busyindicator.SetStatusIdle('FormViewerClick');
    Busyindicator.SetStatusIdle('FormViewer');
    Busyindicator.SetStatusIdle('OrderSetPrescribe');
    /*need to check whether changedetection necessary-fixed due to issue from modularisation
    indication drug not adding to rhs */
    this.ChangeDetection.emit();
    this.nonformokclick = false;
    if (
      this.EnableDisableSupplyInstructionEvent != null &&
      String.Equals(ContextInfo.MenuCode, CConstants.ClinicallyVerifyMenuCode)
    )
      this.EnableDisableSupplyInstructionEvent();
    if (this.MedsResolve != null) {
      let Oitem = this.MedsResolve.Where(
        (NItem) => NItem.OperationMode == 'N'
      ).Select((NItem) => NItem);
      if (Oitem != null && Oitem.Count() > 0) {
        this.MaxNoOfPrescCounter = Oitem.Count();
      }
    }
    if (
      this.MaxNoOfPrescCounter == CConstants.MaxNoOfPrescriptions &&
      !this.blMaxMsgFlag
    ) {
      this.blMaxMsgFlag = true;
      let oMsgBox: iMessageBox = new iMessageBox();
      oMsgBox.MessageBoxClose = (s, e) => {
        this.MaxPrescriptionDiable_MessageBoxClose(s, e);
      };
      oMsgBox.Title = 'LORENZO';
      oMsgBox.Message = Resource.MedicationForm.MaxPrescriptionAlert_Msg;
      oMsgBox.MessageButton = MessageBoxButton.OK;
      oMsgBox.IconType = MessageBoxType.Exclamation;
      oMsgBox.Width = 450;
      oMsgBox.Height = 150;
      oMsgBox.Show();
    }
    if (this.MedsResolve.Where((x) => x.OperationMode == 'N').Count() > 0) {
      this.IsCompletedByPrescriberBoxChecked = false;
    }
    if (
      this.formViewerCloseEventhandler != null &&
      ((ObjectHelper.HasValue(_DRCCompleted) && _DRCCompleted.Value) ||
        (QueryStringInfo.SelPrescItemOID == 0 &&
          this.objNewItemVM != null &&
          this.objNewItemVM.bFormViewerLoadOnCVUnCheck))
    ) {
      let oAppDialogResultValue: AppDialogEventargs = new AppDialogEventargs();
      oAppDialogResultValue.Result = AppDialogResult.Ok;
      this.formViewerCloseEventhandler(oAppDialogResultValue.Result);
    }
    if (
      this.ActivityCode != ActivityTypes.Reorder &&
      this.objProcessingItemVM != null
    ) {
      Common.UpdateChanges(this.objProcessingItemVM);
    }
  }
  SetClerked(vm: PrescriptionItemVM): void {
    if (
      vm != null &&
      vm.OperationMode == 'N' &&
      vm.GpConnectMedicationItem != null
    ) {
      vm.GpConnectMedicationItem.IsClerked = true;
    }
  }
  private SequenceCommonActionInAddtoResolveGrid(
    IsFrmVwAttributesChangedForAmendUpdate: boolean
  ): void {
    let oSequentialItems: IEnumerable<PrescriptionItemVM> = null;
    if (
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .PrescriptionItemNumber > 0
    ) {
      oSequentialItems = this.MedsResolve.Where(
        (s) =>
          s.FormViewerDetails != null &&
          s.FormViewerDetails.BasicDetails != null &&
          s.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          (s.FormViewerDetails.BasicDetails.InfusionDetails
            .PrescriptionItemNumber ==
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber ||
            s.FormViewerDetails.BasicDetails.InfusionDetails
              .ParentPrescriptionItemOID ==
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .PrescriptionItemNumber) &&
          s.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo >
            0 &&
          s.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0 &&
          s.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo >
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ItemSequenceNo
      );
    } else if (
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .ParentPrescriptionItemOID > 0
    ) {
      oSequentialItems = this.MedsResolve.Where(
        (s) =>
          s.FormViewerDetails != null &&
          s.FormViewerDetails.BasicDetails != null &&
          s.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          (s.FormViewerDetails.BasicDetails.InfusionDetails
            .ParentPrescriptionItemOID ==
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ParentPrescriptionItemOID ||
            s.FormViewerDetails.BasicDetails.InfusionDetails
              .PrescriptionItemNumber ==
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .ParentPrescriptionItemOID) &&
          s.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo >
            0 &&
          s.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo > 0 &&
          s.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo >
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ItemSequenceNo
      );
    }
    if (oSequentialItems != null && oSequentialItems.Count() > 0) {
      if (
        (this.ActivityCode == ActivityTypes.Prescribe ||
          this.ActivityCode == ActivityTypes.Reorder ||
          (this.ActivityCode == ActivityTypes.Amend &&
            (IsFrmVwAttributesChangedForAmendUpdate ||
              (this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                (this.CheckSequenceDurationOrPeriodChanged(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                ) ||
                  (DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails
                    .OrginalStartDTTM, DateTime.MinValue) &&
                    DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails
                      .StartPrescriptionTime,
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .OrginalStartDTTM))))))) &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .GroupSequenceNo > 0 &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .ItemSequenceNo > 0
      ) {
        let ResetStartItemSeqNo: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ItemSequenceNo + 1;
        CSequentialHelper.ReassignItemSequenceOnAmend(
          this.MedsResolve,
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .GroupSequenceNo,
          ResetStartItemSeqNo,
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .StartPrescriptionTime,
          this.ActivityCode,
          this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
        );
        CSequentialHelper.ReSetStartEnd_DateTIme_OnAmend(
          this.MedsResolve,
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .GroupSequenceNo,
          ResetStartItemSeqNo,
          this.ActivityCode,
          this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
        );
      }
    }
    oSequentialItems = null;
    if (
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
        .PrescriptionItemNumber > 0
    ) {
      oSequentialItems = this.MedsResolve.Where(
        (s) =>
          s.FormViewerDetails != null &&
          s.FormViewerDetails.BasicDetails != null &&
          s.FormViewerDetails.BasicDetails.SequenceInfo != null &&
          (s.FormViewerDetails.BasicDetails.SequenceInfo
            .PrescriptionItemNumber ==
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .PrescriptionItemNumber ||
            s.FormViewerDetails.BasicDetails.SequenceInfo
              .ParentPrescriptionItemOID ==
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                .PrescriptionItemNumber) &&
          s.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0 &&
          s.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo > 0 &&
          s.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo >
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .ItemSequenceNo
      );
    } else if (
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
        .ParentPrescriptionItemOID > 0
    ) {
      oSequentialItems = this.MedsResolve.Where(
        (s) =>
          s.FormViewerDetails != null &&
          s.FormViewerDetails.BasicDetails != null &&
          s.FormViewerDetails.BasicDetails.SequenceInfo != null &&
          (s.FormViewerDetails.BasicDetails.SequenceInfo
            .ParentPrescriptionItemOID ==
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .ParentPrescriptionItemOID ||
            s.FormViewerDetails.BasicDetails.SequenceInfo
              .PrescriptionItemNumber ==
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                .ParentPrescriptionItemOID) &&
          s.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo > 0 &&
          s.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo > 0 &&
          s.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo >
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .ItemSequenceNo
      );
    }
    if (oSequentialItems != null && oSequentialItems.Count() > 0) {
      if (
        (this.ActivityCode == ActivityTypes.Prescribe ||
          this.ActivityCode == ActivityTypes.Reorder ||
          (this.ActivityCode == ActivityTypes.Amend &&
            (IsFrmVwAttributesChangedForAmendUpdate ||
              (this.objNewItemVM.FormViewerDetails != null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
                (this.CheckSequenceDurationOrPeriodChanged(
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                ) ||
                  (this.objNewItemVM.FormViewerDetails.BasicDetails
                    .IsenableStartdate &&
                   DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails
                      .OrginalStartDTTM, DateTime.MinValue) &&
                    DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails
                      .StartPrescriptionTime,
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .OrginalStartDTTM))))))) &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
          .GroupSequenceNo > 0 &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
          .ItemSequenceNo > 0
      ) {
        let ResetStartItemSeqNo: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .ItemSequenceNo + 1;
        CommonSequentialHelper.ReassignItemSequenceOnAmend(
          this.MedsResolve,
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .GroupSequenceNo,
          ResetStartItemSeqNo,
          this.objNewItemVM.FormViewerDetails.BasicDetails
            .StartPrescriptionTime,
          this.ActivityCode,
          this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
        );
        CommonSequentialHelper.ReSetStartEnd_DateTIme_OnAmend(
          this.MedsResolve,
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .GroupSequenceNo,
          ResetStartItemSeqNo,
          this.ActivityCode,
          this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
        );
      }
    }
  }
  public CheckSequenceDurationOrPeriodChanged(
    objItemVM: BasicDetailsVM
  ): boolean {
    let bDurationChange: boolean = false;
    if (
      objItemVM != null &&
      objItemVM.lstAmendedFlds != null &&
      objItemVM.lstAmendedFlds.Count > 0
    ) {
      bDurationChange =
        objItemVM.lstAmendedFlds
          .Where(
            (x) =>
              x.Equals(
                'Duration',
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              x.Equals(
                'DurationUOM',
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              x.Equals(
                'InfusionPeriodUOM',
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              x.Equals(
                'InfusionPeriod',
                StringComparison.InvariantCultureIgnoreCase
              )
          )
          .Count() != 0;
    }
    return bDurationChange;
  }
  private ValidateDOSforFP10Attributes(): void {
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.BHasFormViewParams &&
        this.objNewItemVM.FormViewerDetails.BasicControls != null &&
        this.objNewItemVM.FormViewerDetails.BasicControls.Count() > 0
      ) {
        if (this.objNewItemVM.FormViewerDetails.BasicDetails != null) {
          if (
            !this.objNewItemVM.FormViewerDetails.BasicControls.Contains(
              'CC_NOINSTL'
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.NoOfInstallments =
              null;
          }
          if (
            !this.objNewItemVM.FormViewerDetails.BasicControls.Contains(
              'CC_INTVLBNINSTL'
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment =
              null;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
              null;
          }
          if (
            !this.objNewItemVM.FormViewerDetails.BasicControls.Contains(
              'CC_INSTLMNT_INSTCS'
            )
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InstalmentInstructions =
              null;
          }
        }
      } else if (this.objNewItemVM.FormViewerDetails.BasicDetails != null) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.NoOfInstallments =
          null;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallment =
          null;
        this.objNewItemVM.FormViewerDetails.BasicDetails.IntervalBetweenInstallmentUOM =
          null;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InstalmentInstructions =
          null;
      }
    }
  }
  iMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsShowRouteDiscrepency =
      true;
    this.objNewItemVM.SeqOperationMode = 'R';
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsDisplayOrderSeqPresc =
        null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
        Visibility.Collapsed;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Collapsed;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentialPrescribing =
        false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.RouteSequential =
        null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SubSequentialItemOrderno = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber = 0;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .PrevSequentialPrescribingData != null
      )
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrevSequentialPrescribingData.SequentialItemOrder = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder = 0;
      if (!this.objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType = null;
      }
      let objbase: IPPMABaseVM = ObjectHelper.CreateType<IPPMABaseVM>(
        this.objNewItemVM.ParentbaseVM,
        IPPMABaseVM
      );
      if (objbase != null && objbase.InfusionContinousSeq != null) {
        objbase.InfusionContinousSeq.IsSequentialPrescribing = false;
        objbase.InfusionContinousSeq.FirstPrescItemOIDInSeq = 0;
        objbase.InfusionContinousSeq.SequentialRoute = null;
        objbase.InfusionContinousSeq.SequentialMultiplsRoutes = null;
        objbase.InfusionContinousSeq.SequentialItemOrder = 0;
      }
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsItemAddedToResolveGrid =
        true;
        this.objNewItemVM.isNew = true;
        this.MedsResolve.Insert(0, this.objNewItemVM);
    } else {
      if (e.MessageBoxResult == MessageBoxResult.Cancel) {
        Busyindicator.SetStatusIdle('FormViewer');
      }
    }
  }
  public GetDurationValueChange(objItemVM: BasicDetailsVM): boolean {
    let sFldname: string = String.Empty;
    let bDurationChange: boolean = true;
    let sDoseType: string = String.Empty;
    let IsMedicalGasDrug: boolean = false;
    if (
      objItemVM != null &&
      objItemVM.InfusionDetails != null &&
      !String.IsNullOrEmpty(objItemVM.itemSubType) &&
      String.Compare(
        objItemVM.itemSubType,
        CConstants.SUBTYPE_GAS,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      IsMedicalGasDrug = true;
    }
    for (let i: number = 0; i < objItemVM.lstAmendedFlds.Count; i++) {
      if (objItemVM.DoseType != null) sDoseType = objItemVM.DoseType.Value;
      sFldname = objItemVM.lstAmendedFlds[i];
      if (
        String.Compare(
          sFldname,
          'Duration',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'EndDTTM',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'ReasonforModification',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'DurationUOM',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'ProblemIndication',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'ModificationComments',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'QuantityUOM',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'SupplyInstructionText',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'InstalmentInstructions',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'AdditionalComments',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'TreatmentToContinue',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'Quantity',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'OtherAdminiInstruction',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'EndorsementProperties',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'IsOnadmission',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'DRCDosetype',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'NoOfInstallments',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'IntervalBetweenInstallment',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'IntervalBetweenInstallmentUOM',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(sFldname, 'Rate', StringComparison.OrdinalIgnoreCase) ==
          0 ||
        String.Compare(
          sFldname,
          'InfusionPeriodUOM',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'InfusionPeriod',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'Reviewafter',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'ReviewafterUOM',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'ReviewRequestComments',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'IsOngoingChecked',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'MaxDose',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'TargetLowerSatRange',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'TargetUpperSatRange',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        (String.Compare(
          sFldname,
          'DeliveryDeviceFreetext',
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
          IsMedicalGasDrug) ||
        (String.Compare(
          sFldname,
          'InfRateDinominatorUom',
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
          IsMedicalGasDrug) ||
        (String.Compare(
          sFldname,
          'InfRateNumeratorUom',
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
          IsMedicalGasDrug) ||
        String.Compare(
          sFldname,
          'UpperRate',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'IsChksequentialPresitem',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'MonitoringPeriod',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'MonitoringPeriodUOM',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'IsIDSNewmeds',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'NONCatalogueReason',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'SupplyInsVal',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'SupplyInsText',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'Supplycomments',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'SupplyStatus',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          sFldname,
          'NextSupplyDates',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Equals(
          sFldname,
          'SequenceName',
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          sFldname,
          'PrecedingInfusionItemlst',
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
      } else {
        bDurationChange = false;
        break;
      }
    }
    return bDurationChange;
  }
  private CheckAndLaunchFollowStat(): void {
    let _IsAssignSTATobj: boolean = true;
    let oItem: PrescriptionItemVM = null;
    let bORSSTATLaunch: boolean = false;
    if (this.IsReorderingSeqItems) {
      this.ReorderSequentialItem(null);
    } else if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsFollowUpStat &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat != '\0' &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
      !String.IsNullOrEmpty(
        this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
      )
    ) {
      this.cFollowUpOrStat =
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
          'S'
        ) ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
          'F'
        )
      ) {
        this.lUniqueRowIDForStatOrFollowup =
          this.objNewItemVM.UniqueRowID > 0
            ? this.objNewItemVM.UniqueRowID
            : this.objNewItemVM.UniqueRowItemID;
        this.objNewItemVM.DoseCalculationDetails = null;
      }
      this.IsrecordadmindoneforSTAT =
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled;
      if (this.orsseqcount <= this.objORSPresItmCollection.Count) {
        bORSSTATLaunch = true;
        this.objORSPresItmCollection.Insert(
          this.orsseqcount,
          this.objNewItemVM
        );
      }
    } else if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsFollowUpStat &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat != '\0' &&
      this.objRePresItmCollection != null &&
      this.objRePresItmCollection.Count > 0
    ) {
      this.cFollowUpOrStat =
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
          'S'
        ) ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
          'F'
        )
      ) {
        this.lUniqueRowIDForStatOrFollowup =
          this.objNewItemVM.UniqueRowID > 0
            ? this.objNewItemVM.UniqueRowID
            : this.objNewItemVM.UniqueRowItemID;
        this.objNewItemVM.DoseCalculationDetails = null;
      }
      this.IsrecordadmindoneforSTAT =
        this.objNewItemVM.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled;
      this.objRePresItmCollection.Insert(
        this.represcseqcount,
        this.objNewItemVM
      );
      bORSSTATLaunch = true;
    }
    if (
      !bORSSTATLaunch &&
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsFollowUpStat &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat != '\0'
    ) {
      if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
        let bItem = this.MedsResolve.Where(
          (x) =>
            (x.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT ==
              this.objNewItemVM.UniqueRowID ||
              x.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT ==
                this.objNewItemVM.UniqueRowItemID) &&
            x.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')
        );
        if (bItem != null && bItem.Count() > 0) {
          oItem = bItem.First();
          _IsAssignSTATobj = false;
        }
      }
      if (_IsAssignSTATobj) {
        this.cFollowUpOrStat =
          this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat;
        if (
          (this.cFollowUpOrStat.Equals('S') ||
            this.cFollowUpOrStat.Equals('F')) &&
          this.OrdersetStat != null &&
          !String.IsNullOrEmpty(this.OrdersetStat.Value)
        ) {
          this.sStatPrevVMVPIdentifyingName =
            this.objNewItemVM.VMVPIdentifyingName;
          this.sStatPrevVMVPLorenzoID = this.objNewItemVM.VMVPLorenzoID;
        }
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
            'S'
          ) ||
          this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
            'F'
          )
        )
          this.lUniqueRowIDForStatOrFollowup =
            this.objNewItemVM.UniqueRowID > 0
              ? this.objNewItemVM.UniqueRowID
              : this.objNewItemVM.UniqueRowItemID;
        this.IsrecordadmindoneforSTAT =
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat !=
            '\0'
        ) {
          this.OrdersetStat = new CListItem();
          this.OrdersetStat =
            this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets;
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.FollowUpOrStat = '\0';
        this.PrescribeNewItem(
          ObjectHelper.CreateObject(new DrugItemInputData(), {
            IdentifyingOID:
              this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingOID,
            IdentifyingType:
              this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingType,
            IdentifyingName:
              this.objNewItemVM.FormViewerDetails.BasicDetails.IdentifyingName,
            IsFormulary: true,
            LorenzoID: this.objNewItemVM.LorenzoID,
            ItemType: this.objNewItemVM.ItemMainType,
            ITMSUBTYP: this.objNewItemVM.ItemSubType,
            FormularyNote: this.objNewItemVM.FormularyNote,
            MCVersionNo: !String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.MCVersion
            )
              ? this.objNewItemVM.FormViewerDetails.BasicDetails.MCVersion
              : AppSessionInfo.AMCV,
          })
        );
      } else {
        if (oItem != null) {
          oItem.IsConflictClick = false;
          oItem.FormViewerClick(true);
        }
      }
    }
  }
  private ValidateStationaryType(): void {
    let bValidStatType: boolean = false;
    if (
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType != null &&
      this.StationaryTypes != null &&
      this.StationaryTypes.Count > 0
    ) {
      bValidStatType = this.CheckIfStationaryTypeExist(
        this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType
      );
    }
    if (!bValidStatType) {
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys.Contains(
          this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType
        )
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys.Remove(
          this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType
        );
      }
      if (this.DefaultStationaryType != null) {
        if (
          this.objNewItemVM != null &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null
        ) {
          if (
            !String.IsNullOrEmpty(this.DefaultStationaryType.DisplayText) &&
            !String.IsNullOrEmpty(this.DefaultStationaryType.Value) &&
            this.DefaultStationaryType.Tag != null
          )
            this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: this.DefaultStationaryType.DisplayText,
                Value: this.DefaultStationaryType.Value,
                Tag: this.DefaultStationaryType.Tag,
              });
        }
      } else if (
        this.StationaryTypes != null &&
        this.StationaryTypes.Count == 1 &&
        this.DefaultStationaryType == null
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.StationaryType =
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: this.StationaryTypes[0].DisplayText,
            Value: this.StationaryTypes[0].Value,
          });
      }
    } else {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
          .Stationarys != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
          .Stationarys.Count > 0
      ) {
        let nCnt: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
            .Stationarys.Count;
        let removeIdx: List<number> = new List<number>();
        for (let i: number = 0; i < nCnt; i++) {
          if (
            !this.CheckIfStationaryTypeExist(
              this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
                .Stationarys[i]
            )
          ) {
            removeIdx.Add(i);
          }
        }
        let nLen: number = removeIdx.Count;
        for (let i: number = nLen; i > 0; i--) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Stationarys.RemoveAt(
            removeIdx[i - 1]
          );
        }
      }
    }
  }
  private CheckIfStationaryTypeExist(StatType: CListItem): boolean {
    let bValidStatType: boolean = false;
    let nCnt: number = this.StationaryTypes.Count;
    for (let i: number = 0; i < nCnt; i++) {
      if (String.Compare(StatType.Value, this.StationaryTypes[i].Value) == 0) {
        bValidStatType = true;
        break;
      }
    }
    return bValidStatType;
  }
  public reorderseqcount: number = 0;
  private InsertNewReorder_AmendItem(): void {
    let IsAmendSeqItemAddToresolve: boolean = false;
    this.objNewItemVM.OperationMode = 'N';
    if (
      this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets == null ||
      (this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
        String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
        ))
    ) {
      this.objNewItemVM.PrescriptionOID = 0;
    }
    this.objNewItemVM.PrescriptionItemOID = 0;
    this.objNewItemVM.PrescriptionNumber = String.Empty;
    this.objNewItemVM.PrescriptionItemNumber = String.Empty;
    this.objNewItemVM.FormViewerDetails.BasicDetails.MCVersion =
      AppSessionInfo.AMCV;
    if (
      this.ActivityCode == ActivityTypes.Amend &&
      this.objProcessingItemVM.FormViewerDetails.BasicDetails
        .IsenableReviewAfter &&
      this.objNewItemVM != null &&
      this.objNewItemVM.FormViewerDetails != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.objProcessingItemVM != null &&
      this.objProcessingItemVM.FormViewerDetails != null &&
      this.objProcessingItemVM.FormViewerDetails.BasicDetails != null
    ) {
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible ==
        Visibility.Visible
      ) {
        if (
          String.IsNullOrEmpty(
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter
          ) &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM ==
            null &&
          DateTime.NotEquals(this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM,
            DateTime.MinValue)
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
            false;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter =
            this.objProcessingItemVM.formViewerDetails.BasicDetails.currentItemReviewafter;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM =
            this.objProcessingItemVM.formViewerDetails.BasicDetails.currentItemReviewafterUOM;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
            this.objProcessingItemVM.formViewerDetails.BasicDetails.LastReviewedDTTM;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
            this.objProcessingItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments;
          let IsDST: boolean = false;
          let IsAmbiguous: boolean = false;
          let IsInvalid: boolean = false;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDateTime =
            this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM.ConvertToUser(
              (o1) => {
                IsDST = o1;
              },
              (o2) => {
                IsAmbiguous = o2;
              },
              (o3) => {
                IsInvalid = o3;
              }
            ).ToDateTimeString(IsDST, IsAmbiguous, CConstants.DateHMFormat);
          this.objNewItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM =
            DateTime.MinValue;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterIconVisible =
            Visibility.Collapsed;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail =
            null;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
            true;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterIconVisible =
            Visibility.Collapsed;
          this.objNewItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail =
            null;
        }
      } else {
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
          false;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterIconVisible =
          Visibility.Collapsed;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter =
          String.Empty;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM = null;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
          DateTime.MinValue;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
          String.Empty;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDateTime =
          String.Empty;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail =
          null;
        this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
          true;
      }
    } else if (
      PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterVisible =
        Visibility.Collapsed;
      this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfter =
        String.Empty;
      this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewafterUOM = null;
      this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDTTM =
        DateTime.MinValue;
      this.objNewItemVM.FormViewerDetails.BasicDetails.LastReviewedDTTM =
        DateTime.MinValue;
      this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewRequestComments =
        String.Empty;
      this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterDateTime =
        String.Empty;
      this.objNewItemVM.FormViewerDetails.BasicDetails.ReviewAfterCommentsVisible =
        Visibility.Collapsed;
    }
    if (this.ActivityCode == ActivityTypes.Reorder) {
      if (
        this.objNewItemVM != null &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null
      ) {
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType !=
            null &&
          (String.Equals(
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.FLUID,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
            String.Equals(
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value,
              InfusionTypesCode.PCA,
              StringComparison.CurrentCultureIgnoreCase
            ))
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
              null &&
            PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
            (String.IsNullOrEmpty(
              this.objNewItemVM.FormViewerDetails.BasicDetails.Duration
            ) ||
              (!String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Duration
              ) &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.Duration.Equals(
                  '0'
                )))
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
              true;
          } else
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsOngoingChecked =
              false;
        }
      }
    }
    // this.objNewItemVM.PrescribeThisItemEvent -= this.PrescribeExistingItem;
    this.objNewItemVM.PrescribeThisItemEvent = (s, e) => {
      this.PrescribeExistingItem(s, e);
    };
    let canGeneratConfilcts: boolean = true;
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
      PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      canGeneratConfilcts =
        ProfileData.MedConflictConfig != null &&
        ProfileData.MedConflictConfig.DisplayConflicts == '1';
    }
    if (canGeneratConfilcts) {
      this.ActivityCode = ActivityTypes.UpdateWarning;
      this.CheckWarnings();
      this.objNewItemVM.WarningsGenerationCompleted = (s,e) => {
        this.objNewItemVM_WarningsGenerationCompleted();
      };
    }
    if (
      this.objNewItemVM.ActionCode == ActivityTypes.Reorder &&
      PatientContext.IsINFUSIONON &&
      this.objNewItemVM != null &&
      this.ReorderSeqItemIndex != -1 &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      !this.IsNonSequentialitem &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
      (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
        InfusionTypesCode.CONTINUOUS ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.SINGLEDOSEVOLUME ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.FLUID) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .ParentPrescriptionItemOID > 0
    ) {
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentialPrescribing =
        this.ReorderSeqItemIndex != this.ReorderSeqItemsCount ? true : false;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsChksequentialPresitem =
        this.ReorderSeqItemIndex != this.ReorderSeqItemsCount ? true : false;
      if (this.InfusionContinousSeq == null)
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID;
      if (
        this.ReorderSeqItemsCount > 1 &&
        this.InfusionContinousSeq != null &&
        this.InfusionContinousSeq.SequentialItemOrder > 0
      )
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq =
          this.ReorderSeqItemsCount +
          Convert.ToInt32(this.InfusionContinousSeq.SequentialItemOrder) -
          1;
      else
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq =
          this.ReorderSeqItemsCount;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .IsChksequentialPresitem
      )
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem = 1;
      else
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsExistSubSequentialPresitem = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID = 0;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
        Visibility.Collapsed;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Collapsed;
      if (
        this.InfusionContinousSeq != null &&
        this.InfusionContinousSeq.SequentialItemOrder > 0 &&
        (this.InfusionContinousSeq.IsPreviousationamend ||
          this.InfusionContinousSeq.IsPreviousationUpdate)
      ) {
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.TotalCountSeq =
          Convert.ToInt32(
            this.ReorderSeqItemsCount +
              this.InfusionContinousSeq.SequentialItemOrder -
              1
          );
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder == 1
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
            this.InfusionContinousSeq.SequentialItemOrder;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder =
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder +
            this.InfusionContinousSeq.SequentialItemOrder -
            1;
        }
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.CurrentSequentialOrder =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.SequentialItemOrder;
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
          this.InfusionContinousSeq.PrescriptionItemNumber;
      }
      let PreviousStartDTTM: DateTime = DateTime.MinValue;
      let PreviousStartPrescriptionTime: DateTime = DateTime.MinValue;
      if (
        DateTime.Equals(this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM,
          DateTime.MinValue) &&
        (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .CurrentSequentialOrder > 0 ||
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder > 0)
      ) {
        let oInfusionContinousSeq: InfContinousSequentail = null;
        if (this.objNewItemVM.ParentbaseVM != null)
          oInfusionContinousSeq =
            this.objNewItemVM.ParentbaseVM.InfusionContinousSeq;
        let isNextScheduleExists: boolean =
          this.objNewItemVM.IsNextSeqSlotExists(
            oInfusionContinousSeq,
            this.objNewItemVM,
            (o1) => {
              PreviousStartDTTM = o1;
            },
            (o2) => {
              PreviousStartPrescriptionTime = o2;
            }
          );
        if (isNextScheduleExists) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
            PreviousStartDTTM;
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
            PreviousStartPrescriptionTime;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
            DateTime.MinValue;
        }
      }
      this.MedsResolve.Insert(this.reorderseqcount, this.objNewItemVM);
      this.reorderseqcount++;
      if (this.ReorderSeqItemIndex == this.ReorderSeqItemsCount) {
        this.ReorderSeqItemIndex = 0;
        this.ReorderSeqItemsCount = 0;
        this.reorderseqcount = 0;
        this.InfusionContinousSeq = null;
        Busyindicator.SetStatusIdle('SequentialReorder');
      }
    } else if (
      this.objNewItemVM.ActionCode == ActivityTypes.Reorder &&
      PatientContext.IsINFUSIONON &&
      this.objNewItemVM != null &&
      this.ReorderSeqItemIndex != -1 &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
      (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
        InfusionTypesCode.CONTINUOUS ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.SINGLEDOSEVOLUME ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.FLUID) &&
      this.InfusionContinousSeq != null &&
      (this.InfusionContinousSeq.SequentialRoute != null ||
        this.InfusionContinousSeq.SequentialMultiplsRoutes != null) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString() ==
        '1' &&
      this.IsNonSequentialitem &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
        .SequentialItemOrder == 1
    ) {
      this.objNewItemVM.isNew = true;
      this.MedsResolve.Insert(0, this.objNewItemVM);
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
        Visibility.Visible;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Visible;
    } else if (
      this.objNewItemVM.ActionCode == ActivityTypes.Reorder &&
      PatientContext.IsINFUSIONON &&
      this.objNewItemVM != null &&
      this.ReorderSeqItemIndex != -1 &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
        null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType != null &&
      (this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
        InfusionTypesCode.CONTINUOUS ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.SINGLEDOSEVOLUME ||
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionType.Value ==
          InfusionTypesCode.FLUID) &&
      this.InfusionContinousSeq != null &&
      (this.InfusionContinousSeq.SequentialRoute != null ||
        this.InfusionContinousSeq.SequentialMultiplsRoutes != null) &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
      this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString() ==
        '1'
    ) {
      let index: number = 0;
      if (
        this.InfusionContinousSeq.IsCurrentgrdResolveIndex > 0 &&
        this.InfusionContinousSeq.IsCurrentgrdResolveIndex != -1 &&
        !this.InfusionContinousSeq.IsPreviousationamend
      )
        index = this.InfusionContinousSeq.IsCurrentgrdResolveIndex + 1;
      else
        index =
          Convert.ToInt32(this.InfusionContinousSeq.SequentialItemOrder) - 1;
      let PreviousStartDTTM: DateTime = DateTime.MinValue;
      let PreviousStartPrescriptionTime: DateTime = DateTime.MinValue;
      let isNextScheduleExists: boolean = false;
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
        String.Equals(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
          '1'
        ) &&
        ((this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .CurrentSequentialOrder > 1 &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder <= 0) ||
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .SequentialItemOrder > 1)
      ) {
        isNextScheduleExists = this.objNewItemVM.IsNextSeqSlotExists(
          this.InfusionContinousSeq,
          this.objNewItemVM,
          (o1) => {
            PreviousStartDTTM = o1;
          },
          (o2) => {
            PreviousStartPrescriptionTime = o2;
          }
        );
        if (isNextScheduleExists) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
            PreviousStartDTTM;
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartPrescriptionTime =
            PreviousStartPrescriptionTime;
        } else {
          this.objNewItemVM.FormViewerDetails.BasicDetails.StartDTTM =
            DateTime.MinValue;
        }
      }
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
        Visibility.Visible;
      this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
        Visibility.Visible;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
        this.InfusionContinousSeq.PrescriptionItemNumber;
      this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID =
        this.InfusionContinousSeq.PrescriptionItemNumber;
      this.MedsResolve.Insert(index, this.objNewItemVM);
    } else {
      if (
        this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .GroupSequenceNo > 0
      ) {
        this.objNewItemVM.SequentialActionPerfromCodeAEITS = null;
        let NewItemSeqno: number = 0;
        let iCurrentSeqGroupNo: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .GroupSequenceNo;
        let PrevItemSeqNo: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .ItemSequenceNo;
        let PrevSeqItem: PrescriptionItemVM;
        let _oldItemSeqNoIndx: number =
          CSequentialHelper.GetIndexOfGivenItemSequenceNo(
            this.MedsResolve,
            iCurrentSeqGroupNo,
            PrevItemSeqNo,
            (o) => {
              PrevSeqItem = o;
            }
          );
        let _NextIndx: number = -1;
        if (PrevSeqItem == null) {
          _NextIndx = CSequentialHelper.GetIndexForNewItem(
            this.MedsResolve,
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo
          );
        } else {
          NewItemSeqno = PrevItemSeqNo + 1;
          _NextIndx = _oldItemSeqNoIndx + 1;
        }
        if (_NextIndx != -1) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ItemSequenceNo > 1
          ) {
            let _PreviousParentPrescItemOID: number = 0;
            if (
              PrevSeqItem != null &&
              PrevSeqItem.FormViewerDetails != null &&
              PrevSeqItem.FormViewerDetails.BasicDetails != null &&
              PrevSeqItem.FormViewerDetails.BasicDetails.InfusionDetails != null
            ) {
              _PreviousParentPrescItemOID =
                PrevSeqItem.FormViewerDetails.BasicDetails.InfusionDetails
                  .ParentPrescriptionItemOID;
            }
            if (_PreviousParentPrescItemOID > 0) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID =
                _PreviousParentPrescItemOID;
            }
          } else {
            if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.PrescriptionItemOID > 0
            ) {
              if (this.objNewItemVM.OperationMode.Equals('U')) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID =
                  this.objProcessingItemVM.PrescriptionItemOID;
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                  this.objProcessingItemVM.PrescriptionItemOID;
              }
            }
          }
          if (PrevSeqItem != null) {
            CSequentialHelper.ReassignItemSequenceOnAmend(
              this.MedsResolve,
              iCurrentSeqGroupNo,
              NewItemSeqno,
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .StartPrescriptionTime,
              this.objNewItemVM.ActionCode,
              this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
            );
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo =
              NewItemSeqno;
            if (
              PrevSeqItem.FormViewerDetails != null &&
              PrevSeqItem.FormViewerDetails.BasicDetails != null &&
              PrevSeqItem.FormViewerDetails.BasicDetails.InfusionDetails != null
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsLastItem =
                PrevSeqItem.FormViewerDetails.BasicDetails.InfusionDetails.IsLastItem;
            }
          }
          if (this.objProcessingItemVM != null) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsAnyItemAdministeredInSeqGroup =
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsAnyItemAdministeredInSeqGroup;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ParentPrescriptionItemOID == 0
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .ItemSequenceNo == 1
            ) {
              let UnqeID: Random = new Random();
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                UnqeID.Next();
            } else {
              let oInfFirstItem: PrescriptionItemVM = this.MedsResolve.Where(
                (i) =>
                  i.FormViewerDetails.BasicDetails.InfusionDetails
                    .GroupSequenceNo ==
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .InfusionDetails.GroupSequenceNo &&
                  i.FormViewerDetails.BasicDetails.InfusionDetails
                    .ItemSequenceNo == 1
              ).FirstOrDefault();
              if (
                oInfFirstItem == null &&
                this.oTempPrescDisCancelItemVM != null &&
                this.oTempPrescDisCancelItemVM.Count > 0
              ) {
                oInfFirstItem = this.oTempPrescDisCancelItemVM
                  .Where(
                    (i) =>
                      i.FormViewerDetails.BasicDetails.InfusionDetails
                        .GroupSequenceNo ==
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .InfusionDetails.GroupSequenceNo &&
                      i.FormViewerDetails.BasicDetails.InfusionDetails
                        .ItemSequenceNo == 1
                  )
                  .FirstOrDefault();
              }
              if (oInfFirstItem != null) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                  oInfFirstItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
              }
            }
          }
          this.MedsResolve.Insert(_NextIndx, this.objNewItemVM);
          if (
            PrevSeqItem != null &&
            PrevSeqItem.FormViewerDetails.BasicDetails.InfusionDetails != null
          ) {
            let ResetStartItemSeqNo: number =
              PrevSeqItem.FormViewerDetails.BasicDetails.InfusionDetails
                .ItemSequenceNo + 1;
            CSequentialHelper.ReSetStartEnd_DateTIme_OnAmend(
              this.MedsResolve,
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .GroupSequenceNo,
              ResetStartItemSeqNo + 1,
              this.ActivityCode,
              this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
            );
          }
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
            Visibility.Visible;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
            Visibility.Visible;
          IsAmendSeqItemAddToresolve = true;
        }
      } else if (
        this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
        this.objNewItemVM.FormViewerDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
        this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
          .GroupSequenceNo > 0
      ) {
        this.objNewItemVM.SequentialActionPerfromCodeAEITS = null;
        let NewItemSeqno: number = 0;
        let iCurrentSeqGroupNo: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .GroupSequenceNo;
        let PrevItemSeqNo: number =
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
            .ItemSequenceNo;
        let PrevSeqItem: PrescriptionItemVM;
        let _oldItemSeqNoIndx: number =
          CommonSequentialHelper.GetIndexOfGivenItemSequenceNo(
            this.MedsResolve,
            iCurrentSeqGroupNo,
            PrevItemSeqNo,
            (o1) => {
              PrevSeqItem = o1;
            }
          );
        let _NextIndx: number = -1;
        if (PrevSeqItem == null) {
          _NextIndx = CommonSequentialHelper.GetIndexForNewItem(
            this.MedsResolve,
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .GroupSequenceNo
          );
        } else {
          NewItemSeqno = PrevItemSeqNo + 1;
          _NextIndx = _oldItemSeqNoIndx + 1;
        }
        if (_NextIndx != -1) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .ItemSequenceNo > 1
          ) {
            let _PreviousParentPrescItemOID: number = 0;
            if (
              PrevSeqItem != null &&
              PrevSeqItem.FormViewerDetails != null &&
              PrevSeqItem.FormViewerDetails.BasicDetails != null &&
              PrevSeqItem.FormViewerDetails.BasicDetails.SequenceInfo != null
            ) {
              _PreviousParentPrescItemOID =
                PrevSeqItem.FormViewerDetails.BasicDetails.SequenceInfo
                  .ParentPrescriptionItemOID;
            }
            if (_PreviousParentPrescItemOID > 0) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ParentPrescriptionItemOID =
                _PreviousParentPrescItemOID;
            }
          } else {
            if (
              this.objProcessingItemVM != null &&
              this.objProcessingItemVM.PrescriptionItemOID > 0
            ) {
              if (this.objNewItemVM.OperationMode.Equals('U')) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ParentPrescriptionItemOID =
                  this.objProcessingItemVM.PrescriptionItemOID;
              } else {
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber =
                  this.objProcessingItemVM.PrescriptionItemOID;
              }
            }
          }
          if (PrevSeqItem != null) {
            CommonSequentialHelper.ReassignItemSequenceOnAmend(
              this.MedsResolve,
              iCurrentSeqGroupNo,
              NewItemSeqno,
              this.objNewItemVM.FormViewerDetails.BasicDetails
                .StartPrescriptionTime,
              this.objNewItemVM.ActionCode,
              this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
            );
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo =
              NewItemSeqno;
            if (
              PrevSeqItem.FormViewerDetails != null &&
              PrevSeqItem.FormViewerDetails.BasicDetails != null &&
              PrevSeqItem.FormViewerDetails.BasicDetails.SequenceInfo != null
            ) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsLastItem =
                PrevSeqItem.FormViewerDetails.BasicDetails.SequenceInfo.IsLastItem;
            }
          }
          if (this.objProcessingItemVM != null) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsAnyItemAdministeredInSeqGroup =
              this.objProcessingItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsAnyItemAdministeredInSeqGroup;
          }
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .ParentPrescriptionItemOID == 0
          ) {
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                .ItemSequenceNo == 1
            ) {
              let UnqeID: Random = new Random();
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber =
                UnqeID.Next();
            } else {
              let oInfFirstItem: PrescriptionItemVM = this.MedsResolve.Where(
                (i) =>
                  i.FormViewerDetails.BasicDetails.SequenceInfo != null &&
                  i.FormViewerDetails.BasicDetails.SequenceInfo
                    .GroupSequenceNo ==
                    this.objNewItemVM.FormViewerDetails.BasicDetails
                      .SequenceInfo.GroupSequenceNo &&
                  i.FormViewerDetails.BasicDetails.SequenceInfo
                    .ItemSequenceNo == 1
              ).FirstOrDefault();
              if (
                oInfFirstItem == null &&
                this.oTempPrescDisCancelItemVM != null &&
                this.oTempPrescDisCancelItemVM.Count > 0
              ) {
                oInfFirstItem = this.oTempPrescDisCancelItemVM
                  .Where(
                    (i) =>
                      i.FormViewerDetails.BasicDetails.SequenceInfo != null &&
                      i.FormViewerDetails.BasicDetails.SequenceInfo
                        .GroupSequenceNo ==
                        this.objNewItemVM.FormViewerDetails.BasicDetails
                          .SequenceInfo.GroupSequenceNo &&
                      i.FormViewerDetails.BasicDetails.SequenceInfo
                        .ItemSequenceNo == 1
                  )
                  .FirstOrDefault();
              }
              if (oInfFirstItem != null) {
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber =
                  oInfFirstItem.FormViewerDetails.BasicDetails.SequenceInfo.PrescriptionItemNumber;
              }
            }
          }
          this.MedsResolve.Insert(_NextIndx, this.objNewItemVM);
          if (
            PrevSeqItem != null &&
            PrevSeqItem.FormViewerDetails.BasicDetails.SequenceInfo != null
          ) {
            let ResetStartItemSeqNo: number =
              PrevSeqItem.FormViewerDetails.BasicDetails.SequenceInfo
                .ItemSequenceNo + 1;
            CommonSequentialHelper.ReSetStartEnd_DateTIme_OnAmend(
              this.MedsResolve,
              this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                .GroupSequenceNo,
              ResetStartItemSeqNo + 1,
              this.ActivityCode,
              this.objNewItemVM.FormViewerDetails.BasicDetails.TimeMinValueFlag
            );
          }
          this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo.IsSequentiallinkvisi =
            Visibility.Visible;
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
            Visibility.Visible;
          IsAmendSeqItemAddToresolve = true;
        }
      } else {
        if (this.IsNonSequentialitem) {
          CSequentialHelper.ClearSeqProperties(this.objNewItemVM);
          CommonSequentialHelper.ClearSeqProperties(this.objNewItemVM);
          this.IsNonSequentialitem = false;
        } else {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .SequentialItemOrder > 0
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentialPrescribing =
              true;
          }
        }
      }
      if (
        this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
        !String.IsNullOrEmpty(
          this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
        )
      ) {
        if (this.objNewItemVM.ActionCode == ActivityTypes.Reorder) {
          let bInsertHeader: boolean = true;
          if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
            let objHeader: PrescriptionItemVM = this.MedsResolve.Where(
              (c) =>
                c.IsOrderSetHeader &&
                c.PrescriptionItem ==
                  this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets
                    .DisplayText &&
                String.IsNullOrEmpty(c.OrderSetGroupID)
            ).FirstOrDefault();
            let index: number = this.MedsResolve.IndexOf(objHeader);
            if (objHeader != null && objHeader.IsOrderSetHeader) {
              this.MedsResolve.Insert(index + 1, this.objNewItemVM);
              bInsertHeader = false;
            }
          }
          if (bInsertHeader) {
            this.objNewItemVM.isNew = true;
            this.MedsResolve.Insert(0, this.objNewItemVM);
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
              )
            ) {
            }
          }
          this.ReevaluateRHSPipe(this.objNewItemVM);
        } else {
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
            this.objNewItemVM.PrescriptionItemOID == 0 &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null
          ) {
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds =
              false;
          }
          let bInsertHeader: boolean = true;
          if (this.MedsResolve != null && this.MedsResolve.Count > 0) {
            let objHeader: PrescriptionItemVM = this.MedsResolve.Where(
              (c) =>
                c.OrderSetGroupID == this.objNewItemVM.OrderSetGroupID &&
                c.IsOrderSetHeader
            ).FirstOrDefault();
            let index: number = this.MedsResolve.IndexOf(objHeader);
            if (objHeader != null && objHeader.IsOrderSetHeader) {
              this.MedsResolve.Insert(index + 1, this.objNewItemVM);
              bInsertHeader = false;
            }
          }
          let IsOrdsetSequenceItem: boolean = false;
          if (
            this.objNewItemVM != null &&
            this.objNewItemVM.FormViewerDetails != null &&
            this.objNewItemVM.FormViewerDetails.BasicDetails != null &&
            ((this.objNewItemVM.FormViewerDetails.BasicDetails
              .InfusionDetails != null &&
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .GroupSequenceNo > 0) ||
              (this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo !=
                null &&
                this.objNewItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                  .GroupSequenceNo > 0))
          ) {
            IsOrdsetSequenceItem = true;
          }
          if (bInsertHeader && !IsOrdsetSequenceItem) {
	  this.objNewItemVM.isNew = true;
            this.MedsResolve.Insert(0, this.objNewItemVM);
            if (
              this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets !=
                null &&
              !String.IsNullOrEmpty(
                this.objNewItemVM.FormViewerDetails.BasicDetails.Ordersets.Value
              )
            ) {
            }
          }
        }
      } else if (!IsAmendSeqItemAddToresolve) {
        if (
          this.objNewItemVM.ActionCode == ActivityTypes.Amend &&
          this.objNewItemVM.PrescriptionItemOID == 0 &&
          this.objNewItemVM.FormViewerDetails != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails != null
        ) {
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsClearlstAmendedFlds =
            false;
        }
        let _Indx: number = -1;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
            .GroupSequenceNo > 0
        ) {
          if (
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ItemSequenceNo == 1
          ) {
            let UnqeID: Random = new Random();
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
              UnqeID.Next();
          } else {
            let oInfFirstItem: PrescriptionItemVM = this.MedsResolve.Where(
              (i) =>
                i.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo ==
                  this.objNewItemVM.FormViewerDetails.BasicDetails
                    .InfusionDetails.GroupSequenceNo &&
                i.FormViewerDetails.BasicDetails.InfusionDetails
                  .ItemSequenceNo == 1
            ).FirstOrDefault();
            if (
              oInfFirstItem == null &&
              this.oTempPrescDisCancelItemVM != null &&
              this.oTempPrescDisCancelItemVM.Count > 0
            ) {
              oInfFirstItem = this.oTempPrescDisCancelItemVM
                .Where(
                  (i) =>
                    i.FormViewerDetails.BasicDetails.InfusionDetails
                      .GroupSequenceNo ==
                      this.objNewItemVM.FormViewerDetails.BasicDetails
                        .InfusionDetails.GroupSequenceNo &&
                    i.FormViewerDetails.BasicDetails.InfusionDetails
                      .ItemSequenceNo == 1
                )
                .FirstOrDefault();
            }
            if (oInfFirstItem != null) {
              this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber =
                oInfFirstItem.FormViewerDetails.BasicDetails.InfusionDetails.PrescriptionItemNumber;
            }
          }
          _Indx = CSequentialHelper.GetIndexForNewItem(
            this.MedsResolve,
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo
          );
          if (_Indx != -1) {
            this.MedsResolve.Insert(_Indx, this.objNewItemVM);
            this.objNewItemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsSequentiallinkvisi =
              Visibility.Visible;
            this.objNewItemVM.FormViewerDetails.BasicDetails.IsSequentiallinkvisi =
              Visibility.Visible;
          }
        } else {
          this.objNewItemVM.isNew = true;
          this.MedsResolve.Insert(0, this.objNewItemVM);
        }
        if (
          this.objNewItemVM.ActionCode == ActivityTypes.Reorder &&
          this.ReBindResolveGridEvent != null
        ) {
          this.ReBindResolveGridEvent(true, this.objNewItemVM);
        }
        let IsInfusionDrug: boolean = false;
        if (
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route != null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag != null &&
          String.Compare(
            this.objNewItemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
            '1'
          ) == 0
        ) {
          IsInfusionDrug = true;
        }
        if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.IsAllowMultiRoute &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails !=
            null &&
          this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
            .Routes != null
        ) {
          IsInfusionDrug = !Common.IsNonInfusionMultiRoutes(
            this.objNewItemVM.FormViewerDetails.BasicDetails.DefaultDetails
              .Routes
          );
        }
      }
    }
    if (
      !canGeneratConfilcts ||
      (!this.objNewItemVM.FormViewerDetails.BasicDetails.bIsAmend &&
        this.objNewItemVM.FormViewerDetails.ConflictDetails != null)
    )
      this.CheckAndLaunchFollowStat();
    this.ValidateStationaryType();
  }
  PatientMedicationCount_Completed(
    sender: Object,
    e: IPPMAManagePrescSer.GetIPPPatientMedicationCountCompletedEventArgs
  ): void {
    if (e.Error != null) return;
    let objResult: IPPMAManagePrescSer.CResMsgGetIPPPatientMedicationCount =
      e.Result;
    if (
      !(
        objResult instanceof
        IPPMAManagePrescSer.CResMsgGetIPPPatientMedicationCount
      )
    )
      return;
    if (objResult != null) {
      this.PromptIsEnabled = objResult.bIsExist;
    }
  }
  PatientCount_Completed(
    sender: Object,
    e: GetPatientMedicationCountCompletedEventArgs
  ): void {
    if (e.Error != null) return;
    let objResult: CResMsgGetPatientMedicationCount = e.Result;
    if (!(objResult instanceof CResMsgGetPatientMedicationCount)) return;
    if (objResult != null) {
      this.MedicationExist = objResult.bIsExist;
    }
    this.SetEncounterLabel();
  }
  private SetEncounterLabel(): void {
    let sEnc: string = String.Empty;
    if (this.EncounterGridObj == null) {
      sEnc = this.EncLblDetails;
    } else {
      sEnc = this.EncounterGridObj.Encounter;
    }
    if (
      this.MedicationExist ||
      String.Compare(
        this.AppContext.MenuCode,
        CConstants.ClinicallyVerifyMenuSL,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.EncounterLabelDetails = sEnc;
    } else {
      this.EncounterLabelDetails = !String.IsNullOrEmpty(sEnc)
        ? sEnc + ': No medication items recorded for this encounter'
        : String.Empty;
    }
  }
  EncounterList_Completed(
    sender: Object,
    e: GetEncountersPagingCompletedEventArgs
  ): void {
    if (e.Error != null) return;
    let objResult: CResMsgGetEncountersPaging = e.Result;
    if (!(objResult instanceof CResMsgGetEncountersPaging)) {
      if (
        (<CResMsgGetEncountersPaging>objResult).oEncounter == null ||
        (<CResMsgGetEncountersPaging>objResult).oEncounter.Count == 0
      )
        return;
    }
    this.TotalEncounterPages =
      (objResult.TotalRecCount + CConstants.EncountersPageSize - 1) /
      CConstants.EncountersPageSize;
    if (objResult != null) {
      let oCurrentEncounter: EncounterVM = null;
      let oPatEncounter: EncounterVM = null;
      let oCollEncounter: ObservableCollection<EncounterVM> =
        new ObservableCollection<EncounterVM>();
      if (objResult.oEncounter == null) return;
      objResult.oEncounter.forEach((oEncItems) => {
        let oItemVM: EncounterVM = new EncounterVM();
        oItemVM.Encounter = this.GetEncounterDescription(oEncItems);
        oItemVM.EncounterID = oEncItems.EncounterID;
        oItemVM.EncounterType = oEncItems.EncounterType;
        oItemVM.EncounterStatus = CommonBB.GetText(
          oEncItems.EncounterStatus,
          MedicationCommonConceptCodeData.ConceptCodes
        );
        if (
          PatientContext.EncounterOid == Convert.ToInt64(oEncItems.EncounterID)
        ) {
          oCurrentEncounter = oItemVM;
          PatientContext.EncounterStartDate = oEncItems.CreatedDttm;
        } else {
          oPatEncounter = oItemVM;
        }
        oCollEncounter.Add(oItemVM);
      });
      this.EncounterGrid = oCollEncounter;
      if (oCurrentEncounter != null) {
        this.EncounterGridObj = oCurrentEncounter;
        this.EncLblDetails = oCurrentEncounter.Encounter;
      }
      this.LaunchIPForAdmin(true);
    }
  }
  GetEncounterDescription(oColl: Encounter): string {
    if (
      String.Compare(
        oColl.EncounterStatus,
        'CC_ENCCANCELLED',
        StringComparison.InvariantCultureIgnoreCase
      ) != 0
    ) {
      let sEnc: StringBuilder = new StringBuilder();
      sEnc.Append(
        CommonBB.GetText(
          oColl.EncounterType,
          MedicationCommonConceptCodeData.ConceptCodes
        )
      );
      sEnc.Append(' Encounter - Start date: ');
      sEnc.Append(oColl.CreatedDttm.ToString(CConstants.ShortDateFormat));
      sEnc.Append(' - ');
      if (!String.IsNullOrEmpty(oColl.SpecialtyName)) {
        sEnc.Append(oColl.SpecialtyName);
        sEnc.Append(' - ');
      }
      if (!String.IsNullOrEmpty(oColl.CareProviderName)) {
        sEnc.Append(oColl.CareProviderName);
        sEnc.Append(' - ');
      }
      sEnc.Append(
        CommonBB.GetText(
          oColl.EncounterStatus,
          MedicationCommonConceptCodeData.ConceptCodes
        )
      );
      if (!String.IsNullOrEmpty(sEnc.ToString())) {
        return Convert.ToString(sEnc);
      }
    }
    return String.Empty;
  }
  public GetNonReconciledItems(): void {
    iBusyIndicator.Start('Reconcile', true);
    if (
      this.oLstItemReconcileCombo == null ||
      this.oLstItemReconcileCombo.Count == 0
    ) {
      ProcessRTE.GetValuesByDomainCode(ValueDomain.ReconcileReason, (s, e) => {
        this.OnRTEResult(s);
      });
    } else this.GetNonReconciledDrugItems();
  }
  public GetMsgInpatDisItems(): void {
    if (
      this.TypeIndex == 0 &&
      (String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) == 0)
    ) {
      this.AmendDisCancelExistIpatDis();
    }
    if (this.TypeIndex == 1) {
      this.InpatOrDischargeExistMsg('Notyp');
    } else if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge
      ) == 0
    ) {
      this.GetNonReconciledItems();
    }
  }
  private GetNonReconciledDrugItems(): void {
    if (
      this.MedsReconcile == null ||
      (this.MedsReconcile != null && this.MedsReconcile.Count == 0) ||
      this.isReconcileserreq
    ) {
      let oPresWS: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      let oReqGetNonReconcildItems: IPPMAManagePrescSer.CReqMsgGetNonReconciledItems =
        new IPPMAManagePrescSer.CReqMsgGetNonReconciledItems();
      oReqGetNonReconcildItems.oPrescriptionItemCriteriaBC =
        new IPPMAManagePrescSer.PrescriptionItemCriteria();
      oReqGetNonReconcildItems.oPrescriptionItemCriteriaBC.PatientOID =
        PatientContext.PatientOID;
      oReqGetNonReconcildItems.oPrescriptionItemCriteriaBC.EncounterOID =
        PatientContext.EncounterOid;
      let sImageList: string;
      oReqGetNonReconcildItems.oPrescriptionItemCriteriaBC.SealRecordList =
        MedicationPrescriptionHelper.GetSealDrugs(
          CConstants.PatConf_Pres,
          (o) => {
            sImageList = o;
          }
        );
      oReqGetNonReconcildItems.oPrescriptionItemCriteriaBC.OID =
        this.getReorderedItems();
      oReqGetNonReconcildItems.oContextInformation = Common.FillContext();
      oPresWS.GetNonReconciledItemsCompleted = (s, e) => {
        this.oPresWS_GetNonReconciledItemsCompleted(s, e);
      };
      oPresWS.GetNonReconciledItemsAsync(oReqGetNonReconcildItems);
    } else {
      this.IsReconcileMessage = false;
      let nRecCnt: number = this.MedsReconcile.Count;
      if (nRecCnt > 0) {
        for (let nCnt: number = nRecCnt - 1; nCnt >= 0; nCnt--) {
          this.MedsReconcile[nCnt].ReconcileReason =
            this.oLstItemReconcileCombo;
          this.IsIteminReorder = false;
          if (
            (this.MedsReconcile[nCnt].FormViewerDetails.BasicDetails
              .ReasonforModification != null &&
              String.IsNullOrEmpty(
                this.MedsReconcile[nCnt].FormViewerDetails.BasicDetails
                  .ReasonforModification.DisplayText
              )) ||
            this.MedsReconcile[nCnt].FormViewerDetails.BasicDetails
              .ReasonforModification == null
          ) {
            this.MedsReconcile[
              nCnt
            ].FormViewerDetails.BasicDetails.ReasonforModification =
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'Select reason',
              });
          }
          if (
            !this.IsReconcileMessage &&
            this.MedsReconcile[nCnt].FormViewerDetails.BasicDetails
              .ReasonforModification != null &&
            String.Compare(
              this.MedsReconcile[nCnt].FormViewerDetails.BasicDetails
                .ReasonforModification.DisplayText,
              'Select reason',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            this.IsReconcileMessage = true;
          }
          this.AssignReorderandReconcile(this.MedsReconcile[nCnt]);
          if (nRecCnt == this.MedsReconcile.Count) {
            if (
              this.MedsReconcile != null &&
              this.MedsReconcile.Count > 0 &&
              this.MedsReconcile[nCnt] != null &&
              this.MedsReconcile[nCnt].FormViewerDetails != null &&
              this.MedsReconcile[nCnt].FormViewerDetails.BasicDetails != null &&
              this.MedsReconcile[nCnt].FormViewerDetails.BasicDetails
                .ReasonforModification != null
            ) {
              this.MedsReconcile[
                nCnt
              ].FormViewerDetails.BasicDetails.Launchallgergyonceonly =
                String.Compare(
                  this.MedsReconcile[nCnt].FormViewerDetails.BasicDetails
                    .ReasonforModification.Value,
                  'CC_MEDALLADVRECTINTO',
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
                  ? true
                  : false;
            }
          }
        }
      }
      if (this.MedsReconcile != null && this.MedsReconcile.Count > 0) {
        this.GetDrugBasicSnomedcodeInfo(ActivityTypes.Reconcile, 0);
        for (let n: number = 0; n < this.MedsReconcile.Count; n++) {
          this.IsReconcileMessage = false;
          if (
            !this.IsReconcileMessage &&
            this.MedsReconcile[n].FormViewerDetails.BasicDetails
              .ReasonforModification != null &&
            String.Compare(
              this.MedsReconcile[n].FormViewerDetails.BasicDetails
                .ReasonforModification.DisplayText,
              'Select reason',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            this.IsReconcileMessage = true;
            break;
          }
        }
      }
      if (
        (this.IsReconcileMessage &&
          this.MedsReconcile != null &&
          this.MedsReconcile.Count > 0) ||
        this.IsreconcileClick
      ) {
        this.DisplayReconcileMessage();
      } else this.PrescribeOrShowReconcile();
    }
  }
  private getReorderedItems(): IPPMAManagePrescSer.ArrayOfLong {
    let objArray: IPPMAManagePrescSer.ArrayOfLong =
      new IPPMAManagePrescSer.ArrayOfLong();
    let lstReorderedItems: List<number> = new List<number>();
    this.MedsResolve.forEach((objVM) => {
      if (
        objVM != null &&
        objVM.FormViewerDetails != null &&
        objVM.FormViewerDetails.BasicDetails != null
      ) {
        if (
          objVM.FormViewerDetails.BasicDetails.IsIDSNewmeds == false &&
          objVM.ReorderItemOID > 0 &&
          objVM.ParentSourcePrescriptionItemOID > 0 &&
          String.Compare(
            objVM.PrescriptionItemStatus,
            CConstants.CANCELLED,
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          if (!objArray.Contains(objVM.ReorderItemOID))
            objArray.Add(objVM.ReorderItemOID);
        } else if (
          objVM.FormViewerDetails.BasicDetails.IsIDSNewmeds == false &&
          (objVM.ReorderItemOID > 0 || objVM.ParentReorderItemOID > 0) &&
          objVM.SourcePrescriptionOid > 0 &&
          objVM.IsAmendment == '1' &&
          String.Compare(
            objVM.PrescriptionItemStatus,
            CConstants.CANCELLED,
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          if (
            String.Compare(
              objVM.PrescriptionItemStatus,
              CConstants.DISCONTINUED,
              StringComparison.OrdinalIgnoreCase
            ) != 0 ||
            (String.Compare(
              objVM.PrescriptionItemStatus,
              CConstants.DISCONTINUED,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) == 0)
          ) {
            {
              if (objVM.ReorderItemOID > 0) {
                if (!objArray.Contains(objVM.ReorderItemOID))
                  objArray.Add(objVM.ReorderItemOID);
              } else {
                if (!objArray.Contains(objVM.ParentReorderItemOID))
                  objArray.Add(objVM.ParentReorderItemOID);
              }
            }
          }
        } else if (
          objVM.FormViewerDetails.BasicDetails.IsIDSNewmeds == false &&
          objVM.ReorderItemOID > 0 &&
          String.Compare(
            objVM.PrescriptionItemStatus,
            CConstants.CANCELLED,
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          if (
            objVM.ReorderItemOID > 0 &&
            (String.Compare(
              objVM.PrescriptionItemStatus,
              CConstants.DISCONTINUED,
              StringComparison.OrdinalIgnoreCase
            ) != 0 ||
              (String.Compare(
                objVM.PrescriptionItemStatus,
                CConstants.DISCONTINUED,
                StringComparison.OrdinalIgnoreCase
              ) == 0 &&
                String.Compare(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.OrdinalIgnoreCase
                ) == 0))
          ) {
            if (
              String.Compare(
                objVM.PrescriptionItemStatus,
                CConstants.ONHOLD,
                StringComparison.OrdinalIgnoreCase
              ) != 0
            ) {
              if (!objArray.Contains(objVM.ReorderItemOID))
                objArray.Add(objVM.ReorderItemOID);
            }
          }
        } else if (
          objVM.FormViewerDetails.BasicDetails.IsIDSNewmeds == false &&
          objVM.AlreadyPrescribedItemOID > 0 &&
          String.Compare(
            objVM.PrescriptionItemStatus,
            CConstants.CANCELLED,
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          if (
            objVM.AlreadyPrescribedItemOID > 0 &&
            (String.Compare(
              objVM.PrescriptionItemStatus,
              CConstants.DISCONTINUED,
              StringComparison.OrdinalIgnoreCase
            ) != 0 ||
              (String.Compare(
                objVM.PrescriptionItemStatus,
                CConstants.DISCONTINUED,
                StringComparison.OrdinalIgnoreCase
              ) == 0 &&
                String.Compare(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.ForAdministration,
                  StringComparison.OrdinalIgnoreCase
                ) == 0))
          ) {
            if (
              String.Compare(
                objVM.PrescriptionItemStatus,
                CConstants.ONHOLD,
                StringComparison.OrdinalIgnoreCase
              ) != 0
            ) {
              if (!objArray.Contains(objVM.AlreadyPrescribedItemOID))
                objArray.Add(objVM.AlreadyPrescribedItemOID);
            }
          }
        }
      }
    });
    return objArray.Count > 0 ? objArray : null;
  }
  oPresWS_GetNonReconciledItemsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetNonReconciledItemsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000032;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:GetNonReconciledItemsCompleted()';
    if (e.Error == null) {
      try {
        let oResGetNonReconcildItems: IPPMAManagePrescSer.CResMsgGetNonReconciledItems =
          e.Result;
        if (
          oResGetNonReconcildItems instanceof
            IPPMAManagePrescSer.CResMsgGetNonReconciledItems &&
          oResGetNonReconcildItems.oPrescriptionItemView != null &&
          oResGetNonReconcildItems.oPrescriptionItemView.Count > 0
        ) {
          this.IsReconcileMessage = false;
          if (this.MedsReconcile != null) {
            this.medsCopyReconcile = this.MedsReconcile;
          }
          this.MedsReconcile = new ObservableCollection<PrescriptionItemVM>();
          this.MedsReorder = new ObservableCollection<PrescriptionItemVM>();
          oResGetNonReconcildItems.oPrescriptionItemView.forEach(
            (oItemView) => {
              if (
                oItemView instanceof IPPMAManagePrescSer.PrescriptionItemView
              ) {
                let oItemVM: PrescriptionItemVM = new PrescriptionItemVM(this);
                oItemVM.ReconcileReason = this.oLstItemReconcileCombo;
                oItemVM.FillPrescriptionItemVM(oItemView, false, false);
                oItemVM.ReconcilecommentsIP =
                  oItemView.oPrescriptionItemAction.IPReconcileComments;
                oItemVM.ReconcilecmmentsDis =
                  oItemView.oPrescriptionItemAction.ReconcileComments;
                oItemVM.FormViewerDetails.BasicDetails.ReasonforModificationIP =
                  oItemView.oPrescriptionItemAction.IPReconcileReason;
                oItemVM.FormViewerDetails.BasicDetails.ReasonforModificationDis =
                  oItemView.oPrescriptionItemAction.ReasonForModification;
                if (
                  PatientContext.PrescriptionType !=
                  PrescriptionTypes.ForAdministration
                ) {
                  if (
                    oItemView.oPrescriptionItemAction != null &&
                    !String.IsNullOrEmpty(
                      oItemView.oPrescriptionItemAction.ReconcileComments
                    )
                  ) {
                    oItemVM.ReconcileComments =
                      oItemView.oPrescriptionItemAction.ReconcileComments;
                  }
                } else {
                  if (
                    oItemView.oPrescriptionItemAction != null &&
                    !String.IsNullOrEmpty(
                      oItemView.oPrescriptionItemAction.IPReconcileComments
                    )
                  ) {
                    oItemVM.ReconcileComments =
                      oItemView.oPrescriptionItemAction.IPReconcileComments;
                  }
                }
                if (
                  this.MedsResolve != null &&
                  (String.Compare(
                    this.CACode,
                    'MN_MEDDISCHRGESL_P2',
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0 ||
                    String.Compare(
                      this.CACode,
                      'MN_MEDINPATSL_P2',
                      StringComparison.CurrentCultureIgnoreCase
                    ) == 0 ||
                    String.Compare(
                      this.CACode,
                      'MN_MEDADMINISTRAT_P2',
                      StringComparison.CurrentCultureIgnoreCase
                    ) == 0 ||
                    String.Compare(
                      ContextInfo.MenuCode,
                      CConstants.ClinicallyVerifyMenuCode,
                      StringComparison.InvariantCultureIgnoreCase
                    ) == 0 ||
                    String.Compare(
                      ContextInfo.MenuCode,
                      CConstants.ClinicallyVerifyMenu,
                      StringComparison.InvariantCultureIgnoreCase
                    ) == 0)
                ) {
                  let Reason = this.MedsResolve.Where(
                    (Item) =>
                      (Item.ParentSourcePrescriptionType == 'CC_MEDCLERK1' ||
                        Item.AlreadyPrescribedItemOID > 0) &&
                      Item.PrescriptionItemStatus == 'MEDStatus2' &&
                      ((Item.ReorderItemOID > 0 &&
                        Item.ReorderItemOID == oItemVM.PrescriptionItemOID) ||
                        (Item.AlreadyPrescribedItemOID > 0 &&
                          Item.AlreadyPrescribedItemOID ==
                            oItemVM.PrescriptionItemOID) ||
                        (Item.LorenzoID ==
                          oItemView.oPrescriptionItem.LorenzoID &&
                          Item.FormViewerDetails.BasicDetails.IdentifyingType ==
                            oItemView.oPrescriptionItem.IdentifyingType)) &&
                      !String.IsNullOrEmpty(Item.DiscontinueCancelAction)
                  ).Select((Item) => Item);
                  if (Reason != null && Reason.Count() > 0) {
                    Reason.forEach((oItem) => {
                      oItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: 'Select reason',
                        });
                    });
                  } else {
                    if (
                      !String.IsNullOrEmpty(
                        oItemView.oPrescriptionItemAction.ReasonForModification
                      ) &&
                      PatientContext.PrescriptionType !=
                        PrescriptionTypes.ForAdministration
                    ) {
                      oItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText:
                            oItemView.oPrescriptionItemAction
                              .ReasonForModification,
                          Value:
                            oItemView.oPrescriptionItemAction
                              .ReasonForModification,
                        });
                    } else if (
                      (PatientContext.PrescriptionType ==
                        PrescriptionTypes.ForAdministration || PatientContext.PrescriptionType ==
                        PrescriptionTypes.Discharge) &&
                      !String.IsNullOrEmpty(
                        oItemView.oPrescriptionItemAction.IPReconcileReason
                      )
                    ) {
                      oItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText:
                            oItemView.oPrescriptionItemAction.IPReconcileReason,
                          Value:
                            oItemView.oPrescriptionItemAction.IPReconcileReason,
                        });
                    } else {
                      oItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: 'Select reason',
                        });
                    }
                  }
                }
                if (
                  oItemVM.FormViewerDetails.BasicDetails
                    .ReasonforModification != null &&
                  this.oLstItemReconcileCombo != null &&
                  this.oLstItemReconcileCombo.Count > 0 &&
                  String.Compare(
                    oItemVM.FormViewerDetails.BasicDetails.ReasonforModification
                      .DisplayText,
                    'Select reason',
                    StringComparison.CurrentCultureIgnoreCase
                  ) != 0
                ) {
                  for(let i=0; i< this.oLstItemReconcileCombo.Count; i++){
                    let Itm : CListItem = this.oLstItemReconcileCombo[i];                
                    if (
                      String.Compare(
                        Itm.Value,
                        oItemVM.FormViewerDetails.BasicDetails
                          .ReasonforModification.Value,
                        StringComparison.OrdinalIgnoreCase
                      ) == 0
                    ) {
                      oItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: Itm.DisplayText,
                          Value: Itm.Value,
                          IsSelected: true,
                        });
                      break;
                    }
                  }
                }
                if (
                  oItemVM != null &&
                  oItemVM.FormViewerDetails != null &&
                  oItemVM.FormViewerDetails.BasicDetails != null &&
                  oItemVM.FormViewerDetails.BasicDetails
                    .ReasonforModification != null &&
                  !String.IsNullOrEmpty(
                    oItemVM.FormViewerDetails.BasicDetails.ReasonforModification
                      .Value
                  ) &&
                  String.Compare(
                    oItemVM.FormViewerDetails.BasicDetails.ReasonforModification
                      .Value,
                    'CC_MEDALLADVRECTINTO',
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
                ) {
                  oItemVM.FormViewerDetails.BasicDetails.Launchallgergyonceonly =
                    true;
                } else {
                  oItemVM.FormViewerDetails.BasicDetails.Launchallgergyonceonly =
                    false;
                }
                if (
                  this.medsCopyReconcile != null &&
                  this.medsCopyReconcile.Count > 0
                ) {
                  for (
                    let n: number = 0;
                    n < this.medsCopyReconcile.Count;
                    n++
                  ) {
                    if (
                      String.IsNullOrEmpty(
                        oItemVM.FormViewerDetails.BasicDetails
                          .ReasonforModification.DisplayText
                      ) ||
                      (oItemVM.FormViewerDetails.BasicDetails
                        .ReasonforModification != null &&
                        oItemVM.FormViewerDetails.BasicDetails
                          .ReasonforModification.DisplayText == 'Select reason')
                    ) {
                      if (
                        oItemVM.PrescriptionItemOID ==
                        this.medsCopyReconcile[n].PrescriptionItemOID
                      ) {
                        if (
                          this.medsCopyReconcile[n].FormViewerDetails
                            .BasicDetails.ReasonforModification != null &&
                          this.medsCopyReconcile[n].FormViewerDetails
                            .BasicDetails.ReasonforModification.DisplayText !=
                            'Select reason'
                        ) {
                          oItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
                            this.medsCopyReconcile[
                              n
                            ].FormViewerDetails.BasicDetails.ReasonforModification;
                        }
                        if (
                          !String.IsNullOrEmpty(
                            this.medsCopyReconcile[n].ReconcileComments
                          )
                        )
                          oItemVM.ReconcileComments =
                            this.medsCopyReconcile[n].ReconcileComments;
                      }
                    }
                    if (
                      oItemVM.FormViewerDetails.BasicDetails
                        .ReasonforModification == null ||
                      (oItemVM.FormViewerDetails.BasicDetails
                        .ReasonforModification != null &&
                        String.IsNullOrEmpty(
                          oItemVM.FormViewerDetails.BasicDetails
                            .ReasonforModification.DisplayText
                        ))
                    ) {
                      oItemVM.FormViewerDetails.BasicDetails.ReasonforModification =
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: 'Select reason',
                        });
                    }
                  }
                }
                this.IsIteminReorder = false;
                this.AssignReorderandReconcile(oItemVM);
              }
            }
          );
          if (this.MedsReconcile != null && this.MedsReconcile.Count > 0) {
            this.GetDrugBasicSnomedcodeInfo(ActivityTypes.Reconcile, 0);
            for (let n: number = 0; n < this.MedsReconcile.Count; n++) {
              this.IsReconcileMessage = false;
              if (
                !this.IsReconcileMessage &&
                this.MedsReconcile[n].FormViewerDetails.BasicDetails
                  .ReasonforModification != null &&
                String.Compare(
                  this.MedsReconcile[n].FormViewerDetails.BasicDetails
                    .ReasonforModification.DisplayText,
                  'Select reason',
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
              ) {
                this.IsReconcileMessage = true;
                break;
              }
            }
          }
          if (
            (this.IsReconcileMessage &&
              this.MedsReconcile != null &&
              this.MedsReconcile.Count > 0) ||
            this.IsreconcileClick
          ) {
            this.DisplayReconcileMessage();
          } else {
            this.PrescribeOrShowReconcile();
          }
          this.isReconcileserreq = false;
        } else {
          this.IsreconcileClick = false;
          this.PrescribeOrShowReconcile();
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  AssignReorderandReconcile(oItemVM: PrescriptionItemVM): void {
    if (
      this.MedsResolve != null &&
      (String.Compare(
        this.CACode,
        'MN_MEDDISCHRGESL_P2',
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          this.CACode,
          'MN_MEDINPATSL_P2',
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          this.CACode,
          'MN_MEDADMINISTRAT_P2',
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenu,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenu,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0)
    ) {
      let oReorder = this.MedsResolve.Where(
        (Item) =>
          (Item.FormViewerDetails.BasicDetails.IsIDSNewmeds == false &&
            Item.AlreadyPrescribedItemOID > 0 &&
            Item.AlreadyPrescribedItemOID == oItemVM.PrescriptionItemOID &&
            (Item.PrescriptionItemStatus == 'MEDStatus6' ||
              Item.PrescriptionItemStatus == 'MEDStatus9' ||
              Item.PrescriptionItemStatus == 'MEDStatus10' ||
              String.IsNullOrEmpty(Item.PrescriptionItemStatus)) &&
            ((Item.ReorderItemOID > 0 &&
              Item.ReorderItemOID == oItemVM.PrescriptionItemOID) ||
              (Item.AlreadyPrescribedItemOID > 0 &&
                Item.AlreadyPrescribedItemOID ==
                  oItemVM.PrescriptionItemOID))) ||
          ((String.Compare(
            Item.SourcePrescriptionType,
            CConstants.sClerking,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            String.Compare(
              Item.SourcePrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.OrdinalIgnoreCase
            ) == 0) &&
            (Item.ActionCode == ActivityTypes.Reorder ||
              (Item.ActionCode == ActivityTypes.UnHold &&
                (Item.SourcePrescriptionOid > 0 ||
                  Item.ParentReorderItemOID > 0 ||
                  Item.ReorderItemOID > 0))) &&
            ((!Item.IsHold &&
              String.IsNullOrEmpty(Item.PrescriptionItemStatus)) ||
              String.Compare(
                Item.PrescriptionItemStatus,
                'MEDStatus13',
                StringComparison.OrdinalIgnoreCase
              ) != 0) &&
            ((Item.ReorderItemOID > 0 &&
              Item.ReorderItemOID == oItemVM.PrescriptionItemOID) ||
              (Item.ParentReorderItemOID > 0 &&
                Item.ParentReorderItemOID == oItemVM.PrescriptionItemOID) ||
              (Item.SourcePrescriptionOid > 0 &&
                Item.SourcePrescriptionOid == oItemVM.PrescriptionItemOID)))
      ).Select((Item) => Item);
      if (oReorder != null && oReorder.Count() > 0) {
        let nCount: number = oReorder.Count();
        for (let i: number = 0; i < nCount; i++) {
          let oVM: any = oReorder[i];
          //oReorder.forEach((oVM) => {
          if (
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.CATALOGUEITEM ||
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.VIRTUALPRODUCT ||
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.VIRTUALPRODUCTPACK
          ) {
            if (
              oVM.AlreadyPrescribedItemOID == 0 &&
              (oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.ACTUALMOIETY ||
                oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                  CConstants.ACTUALPRODUCT ||
                oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                  CConstants.ACTUALPRODUCTPACK)
            ) {
              continue;
            }
          } else if (
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.ACTUALMOIETY ||
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.ACTUALPRODUCT ||
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.ACTUALPRODUCTPACK
          ) {
            if (
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.CATALOGUEITEM ||
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.VIRTUALPRODUCT ||
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.VIRTUALPRODUCTPACK
            ) {
              continue;
            }
          }
          oVM.ReconcilecommentsIP = oItemVM.ReconcilecommentsIP;
          oVM.ReconcilecmmentsDis = oItemVM.ReconcilecmmentsDis;
          oVM.FormViewerDetails.BasicDetails.ReasonforModificationIP =
            oItemVM.FormViewerDetails.BasicDetails.ReasonforModificationIP;
          oVM.FormViewerDetails.BasicDetails.ReasonforModificationDis =
            oItemVM.FormViewerDetails.BasicDetails.ReasonforModificationDis;
          if (this.MedsReorder != null) {
            if (this.MedsReorder.Count == 0) this.MedsReorder.Add(oVM);
            else {
              if (!this.MedsReorder.Contains(oVM)) this.MedsReorder.Add(oVM);
            }
          }
          if (this.MedsReconcile.Contains(oItemVM))
            this.MedsReconcile.Remove(oItemVM);
          this.IsIteminReorder = true;
          //});
        }
      }
      let oReorderInpatient = this.MedsResolve.Where(
        (ItemInpatient) =>
          (ItemInpatient.ActionCode == ActivityTypes.Reorder ||
            (ItemInpatient.ActionCode == ActivityTypes.UnHold &&
              (ItemInpatient.SourcePrescriptionOid > 0 ||
                ItemInpatient.ParentReorderItemOID > 0 ||
                ItemInpatient.ReorderItemOID > 0))) &&
          (ItemInpatient.SourcePrescriptionType ==
            PrescriptionTypes.Foradministration ||
            String.Compare(
              ItemInpatient.SourcePrescriptionType,
              PrescriptionTypes.Inpatient,
              StringComparison.OrdinalIgnoreCase
            ) == 0) &&
          (ItemInpatient.ParentSourcePrescriptionType == 'Medicationclerking' ||
            String.Compare(
              ItemInpatient.ParentSourcePrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.OrdinalIgnoreCase
            ) == 0) &&
          ((!ItemInpatient.IsHold &&
            String.IsNullOrEmpty(ItemInpatient.PrescriptionItemStatus)) ||
            String.Compare(
              ItemInpatient.PrescriptionItemStatus,
              'MEDStatus13',
              StringComparison.OrdinalIgnoreCase
            ) != 0) &&
          ((ItemInpatient.ReorderItemOID > 0 &&
            ItemInpatient.ReorderItemOID == oItemVM.PrescriptionItemOID) ||
            (ItemInpatient.ParentReorderItemOID > 0 &&
              ItemInpatient.ParentReorderItemOID ==
                oItemVM.PrescriptionItemOID) ||
            (ItemInpatient.SourcePrescriptionOid > 0 &&
              ItemInpatient.SourcePrescriptionOid ==
                oItemVM.PrescriptionItemOID))
      ).Select((ItemInpatient) => ItemInpatient);
      if (oReorderInpatient != null && oReorderInpatient.Count() > 0) {
        let nCount: number = oReorderInpatient.Count();
        for (let i: number = 0; i < nCount; i++) {
          let oVM: PrescriptionItemVM = oReorderInpatient[i];
          // oReorderInpatient.forEach((oVM) => {
          if (
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.CATALOGUEITEM ||
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.VIRTUALPRODUCT ||
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.VIRTUALPRODUCTPACK
          ) {
            if (
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.ACTUALMOIETY ||
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.ACTUALPRODUCT ||
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.ACTUALPRODUCTPACK
            ) {
              continue;
            }
          } else if (
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.ACTUALMOIETY ||
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.ACTUALPRODUCT ||
            oItemVM.FormViewerDetails.BasicDetails.IdentifyingType ==
              CConstants.ACTUALPRODUCTPACK
          ) {
            if (
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.CATALOGUEITEM ||
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.VIRTUALPRODUCT ||
              oVM.FormViewerDetails.BasicDetails.IdentifyingType ==
                CConstants.VIRTUALPRODUCTPACK
            ) {
              continue;
            }
          }
          oVM.ReconcilecommentsIP = oItemVM.ReconcilecommentsIP;
          oVM.ReconcilecmmentsDis = oItemVM.ReconcilecmmentsDis;
          oVM.FormViewerDetails.BasicDetails.ReasonforModificationIP =
            oItemVM.FormViewerDetails.BasicDetails.ReasonforModificationIP;
          oVM.FormViewerDetails.BasicDetails.ReasonforModificationDis =
            oItemVM.FormViewerDetails.BasicDetails.ReasonforModificationDis;
          if (this.MedsReorder != null) {
            if (this.MedsReorder.Count == 0) this.MedsReorder.Add(oVM);
            else {
              if (!this.MedsReorder.Contains(oVM)) this.MedsReorder.Add(oVM);
            }
          }
          if (this.MedsReconcile.Contains(oItemVM))
            this.MedsReconcile.Remove(oItemVM);
          this.IsIteminReorder = true;
          // });
        }
      }
      if (!this.IsIteminReorder) {
        if (this.MedsReconcile.Count == 0) this.MedsReconcile.Add(oItemVM);
        else {
          if (!this.MedsReconcile.Contains(oItemVM))
            this.MedsReconcile.Add(oItemVM);
        }
      }
    }
  }
  PrescribeOrShowReconcile(): void {
    if ((this.IsFinishNow || this.IsFinish) && this.IsFinishClicked) {
      this.ModifiedPatientPrescription();
    } else if (this.IsNexBtnClicked) {
      this.IsCallFromMoveNext = true;
      //Not Required for LHS. To be Re-Visited.
      //MoveNext();
    }
    Busyindicator.SetStatusIdle('Reconcile');
    Busyindicator.SetStatusIdle('Next');
  }
  DisplayReconcileMessage(): void {
    if (ProfileData.AdditionalPrescConfig == null) {
      Common.GetProfileConfigData((s, e) => {
        this.oProfileFactory_OnProfileReconcileLoaded(s, e);
      });
    } else {
      this.ReconcileLaunch();
    }
  }
  ReconcileLaunch(): void {
    if (PatientContext.PrescriptionType == PrescriptionTypes.Discharge) {
      if (
        this.IsReconcileMessage &&
        !this.IsreconcileClick &&
        !ProfileData.AdditionalPrescConfig.ReconcileMandatory
      ) {
        if (!this.IsReconcileMsgShowed) {
          let oMsg: iMessageBox = new iMessageBox();
          oMsg.Title = 'LORENZO';
          oMsg.Message = Resource.prescribedrugs.ReConcile_Msg;
          oMsg.MessageButton = MessageBoxButton.YesNo;
          oMsg.IconType = MessageBoxType.Question;
          ObjectHelper.stopScreenFreezeEvent(true);
          oMsg.Show();
          // ObjectHelper.stopFinishAndCancelEvent(true);
          this.IsReconcileMsgShowed = true;
          this.IsReconcileMsgClicked = false;
          oMsg.MessageBoxClose = (s, e) => {
            this.oMsg_MessageBoxClose(s, e);
          };
        }
      } else {
        if (!this.IsReconcileMezLaunched) {
          this.IsReconcileMezLaunched = true;
          ObjectHelper.stopScreenFreezeEvent(true);
          //Not Required for LHS. To be Re-Visited.
          this.oMedReconcile = new MedReconcileChild();
          this.oMedReconcile.constructorIMPL(this);
          // ObjectHelper.stopFinishAndCancelEvent(true);
           AppActivity.OpenWindow("Reconcile - LORENZO -- Webpage Dialog", this.oMedReconcile, (s,e) => {this.oMedReconcile_Closed(s);}, "", false, 380, 750, false, WindowButtonType.OkCancel, null);
        }
      }
    } else if (
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
    ) {
      if (this.ReconcileforIP) {
        if (
          this.IsReconcileMessage &&
          !this.IsreconcileClick &&
          ProfileData.AdditionalPrescConfig.RecManforIP &&
          !ProfileData.AdditionalPrescConfig.ReconcileMandatory
        ) {
          if (!this.IsReconcileMsgShowed) {
            let oMsg: iMessageBox = new iMessageBox();
            oMsg.Title = 'LORENZO';
            oMsg.Message = Resource.prescribedrugs.Reconcile_MSgforIP;
            oMsg.MessageButton = MessageBoxButton.YesNo;
            oMsg.IconType = MessageBoxType.Question;
            ObjectHelper.stopScreenFreezeEvent(true);
            oMsg.Show();
            // ObjectHelper.stopFinishAndCancelEvent(true)
            this.IsReconcileMsgShowed = true;
            this.IsReconcileMsgClicked = false;
            oMsg.MessageBoxClose = (s, e) => {
              this.oMsg_MessageBoxClose(s, e);
            };
          }
        } else if (
          this.IsreconcileClick ||
          ProfileData.AdditionalPrescConfig.ReconcileMandatory
        ) {
          if (!this.IsReconcileMezLaunched) {
            this.IsReconcileMezLaunched = true;
            ObjectHelper.stopScreenFreezeEvent(true);
            //Not Required for LHS. To be Re-Visited.
            this.oMedReconcile = new MedReconcileChild();
            this.oMedReconcile.constructorIMPL(this);
            // ObjectHelper.stopFinishAndCancelEvent(true);
            AppActivity.OpenWindow("Reconcile - LORENZO -- Webpage Dialog", this.oMedReconcile, (s,e) => {this.oMedReconcile_Closed(s);}, "", false, 380, 750, false, WindowButtonType.OkCancel, null);
           
            
          
          }
        } else {
          if ((this.IsFinishNow || this.IsFinish) && this.IsFinishClicked)
            this.ModifiedPatientPrescription();
        }
      } else {
        Busyindicator.SetStatusIdle('Reconcile');
        if ((this.IsFinishNow || this.IsFinish) && this.IsFinishClicked)
          this.ModifiedPatientPrescription();
        this.IsCallFromMoveNext = true;
        this.IsReconcileMessage = false;
      }
    }
    Busyindicator.SetStatusIdle('Reconcile');
    //Not Required for LHS. To be Re-Visited.
    /*
        if (!this.IsReconcileMessage && this.IsNexBtnClicked) {
            MoveNext();
        }
        */
  }
  InpatOrDischargeExistMsg(Ptype: string): void {
    if (PatientContext.PrescriptionType == PrescriptionTypes.Discharge) {
      let oMsg: iMessageBox = new iMessageBox();
      oMsg.Title = 'LORENZO';
      oMsg.Message = Resource.prescribedrugs.DisgchargeExistMsg;
      oMsg.MessageButton = MessageBoxButton.OK;
      oMsg.IconType = MessageBoxType.Information;
      oMsg.Show();
      ObjectHelper.stopScreenFreezeEvent(true);
      oMsg.MessageBoxClose = (s, e) => {
        this.oMsg_MessageBoxPromtClose(s, e);
      };
      this.PromptIsEnabled = false;
    } else if (
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
    ) {
      let oMsg: iMessageBox = new iMessageBox();
      oMsg.Title = 'LORENZO';
      oMsg.Message = Resource.prescribedrugs.InpatientExistMsg;
      oMsg.MessageButton = MessageBoxButton.OK;
      oMsg.IconType = MessageBoxType.Information;
      oMsg.Show();
      // ObjectHelper.stopFinishAndCancelEvent(true);
      ObjectHelper.stopScreenFreezeEvent(true);
      oMsg.MessageBoxClose = (s, e) => {
        // ObjectHelper.stopFinishAndCancelEvent(false);
        this.oMsg_MessageBoxPromtClose(s, e);
      };
      this.PromptIsEnabled = false;
    } else {
      if (
        String.Compare(Ptype, 'Dis') == 0 ||
        String.Compare(Ptype, 'Notyp') == 0
      ) {
        this.GetNonReconciledItems();
      } else if (String.Compare(Ptype, 'Inpat') == 0) {
        if (this.IsFinishClicked) {
          this.ModifiedPatientPrescription();
        }
      } else if (
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.OutPatientPrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClerkingPrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.LeavePrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.DischargePrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.InpatientPrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ForadminPrescribeMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.ModifiedPatientPrescription();
      }
    }
  }
  oMsg_MessageBoxPromtClose(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      if (
        String.Compare(
          this.CACode,
          CConstants.DischargePrescribeMenuCode,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          this.CACode,
          'MN_MEDINPATSL_P2',
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
        ((String.Compare(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenu,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenu,
            StringComparison.InvariantCultureIgnoreCase
          ) == 0) &&
          (String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0))
      ) {
        this.GetNonReconciledItems();
      } else {
        if (this.IsFinishClicked) {
          this.IsFinishClicked = false;
          this.CheckUserRightsAndPrescribe();
        }
      }
    }
  }
  oMsg_MessageBoxPromptClose(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      if (this.IsDisCancelprintMsgShowed) {
        this.IsDisCancelprintMsgShowed = false;
      }
      if (this.IsFinishClicked) {
        this.IsFinishClicked = false;
        this.CheckUserRightsAndPrescribe();
      }
    }
  }
  AuthorAmndDisCanExistIpatDis(): void {
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge
      ) == 0 ||
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0
    ) {
      let oDisNew = this.MedsResolve.Where(
        (ItemDis) =>
          ItemDis.PrescriptionItemStatus == CConstants.AWAITINGAUTHORISE &&
          ItemDis.IsClinicallyVerifyEnable == true &&
          (String.IsNullOrEmpty(ItemDis.ParentSourcePrescriptionType) ||
            String.Compare(
              ItemDis.ParentSourcePrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              ItemDis.ParentSourcePrescriptionType,
              PrescriptionTypes.Leave,
              StringComparison.OrdinalIgnoreCase
            ) == 0) &&
          ItemDis.IsAmendment == '0'
      ).Select((ItemDis) => ItemDis);
      if (
        oDisNew != null &&
        oDisNew.Count() > 0 &&
        this.PromptIsEnabled == true
      ) {
        this.TypeIndex = 1;
      }
      if (this.TypeIndex == 0) {
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Discharge
          ) == 0
        ) {
          let oDisAmnd = this.MedsResolve.Where(
            (ItemDis) =>
              ItemDis.PrescriptionItemStatus == CConstants.AWAITINGAUTHORISE &&
              ItemDis.IsClinicallyVerifyEnable == true &&
              ItemDis.IsAmendment == '1' &&
              (String.Compare(
                ItemDis.ParentSourcePrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
                (String.IsNullOrEmpty(ItemDis.ParentSourcePrescriptionType) &&
                  ItemDis.InPatDisReorderFlag == '1'))
          ).Select((ItemDis) => ItemDis);
          if (oDisAmnd != null && oDisAmnd.Count() > 0) {
            this.TypeIndex = 1;
          }
        } else if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0
        ) {
          let oInpatAmnd = this.MedsResolve.Where(
            (ItemDis) =>
              ItemDis.PrescriptionItemStatus == CConstants.AWAITINGAUTHORISE &&
              ItemDis.IsClinicallyVerifyEnable == true &&
              ItemDis.IsAmendment == '1' &&
              (String.Compare(
                ItemDis.ParentSourcePrescriptionType,
                PrescriptionTypes.Discharge,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
                (String.IsNullOrEmpty(ItemDis.ParentSourcePrescriptionType) &&
                  ItemDis.InPatDisReorderFlag == '1'))
          ).Select((ItemDis) => ItemDis);
          if (oInpatAmnd != null && oInpatAmnd.Count() > 0) {
            this.TypeIndex = 1;
          }
        }
      }
    }
  }
  AmendDisCancelExistIpatDis(): void {
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge
      ) == 0 ||
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0
    ) {
      let oDisNew = this.MedsResolve.Where(
        (ItemDis) =>
          String.IsNullOrEmpty(ItemDis.ParentSourcePrescriptionType) &&
          (ItemDis.ActionCode == ActivityTypes.UnHold ||
            ItemDis.ActionCode == ActivityTypes.Prescribe) &&
          ItemDis.IsHold == false &&
          (ItemDis.OperationMode == 'U' || ItemDis.OperationMode == 'N')
      ).Select((ItemDis) => ItemDis);
      if (
        oDisNew != null &&
        oDisNew.Count() > 0 &&
        this.PromptIsEnabled == true
      ) {
        this.TypeIndex = 1;
      }
      if (this.TypeIndex == 0) {
        let oReorderClerk = this.MedsResolve.Where(
          (ItemClerk) =>
            (ItemClerk.ActionCode == ActivityTypes.Reorder ||
              ItemClerk.ActionCode == ActivityTypes.UnHold) &&
            ItemClerk.IsHold == false &&
            (String.Compare(
              ItemClerk.SourcePrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
              String.Compare(
                ItemClerk.SourcePrescriptionType,
                PrescriptionTypes.Leave,
                StringComparison.OrdinalIgnoreCase
              ) == 0)
        ).Select((ItemClerk) => ItemClerk);
        if (
          oReorderClerk != null &&
          oReorderClerk.Count() > 0 &&
          this.PromptIsEnabled == true
        ) {
          this.TypeIndex = 1;
        }
      }
    }
    if (this.TypeIndex == 0) {
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge
        ) == 0
      ) {
        let oReorderDisAmd = this.MedsResolve.Where(
          (ItemDis) =>
            (ItemDis.ActionCode == ActivityTypes.Amend ||
              ItemDis.ActionCode == ActivityTypes.UnHold) &&
            ItemDis.IsHold == false &&
            (String.Compare(
              ItemDis.ParentSourcePrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
              (String.IsNullOrEmpty(ItemDis.ParentSourcePrescriptionType) &&
                ItemDis.InPatDisReorderFlag == '1'))
        ).Select((ItemDis) => ItemDis);
        if (oReorderDisAmd != null && oReorderDisAmd.Count() > 0) {
          this.TypeIndex = 1;
        } else {
          let oReorderDisCan = this.MedsResolve.Where(
            (ItemDiscan) =>
              !String.IsNullOrEmpty(ItemDiscan.DiscontinueCancelAction) &&
              (String.Compare(
                ItemDiscan.ParentSourcePrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
                (String.IsNullOrEmpty(
                  ItemDiscan.ParentSourcePrescriptionType
                ) &&
                  ItemDiscan.InPatDisReorderFlag == '1'))
          ).Select((ItemDiscan) => ItemDiscan);
          if (oReorderDisCan != null && oReorderDisCan.Count() > 0) {
            this.TypeIndex = 1;
          }
        }
      }
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0
    ) {
      let oReorderDis = this.MedsResolve.Where(
        (ItemDis) =>
          (ItemDis.ActionCode == ActivityTypes.Amend ||
            ItemDis.ActionCode == ActivityTypes.UnHold) &&
          ItemDis.IsHold == false &&
          (String.Compare(
            ItemDis.ParentSourcePrescriptionType,
            PrescriptionTypes.Discharge,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            (String.IsNullOrEmpty(ItemDis.ParentSourcePrescriptionType) &&
              ItemDis.InPatDisReorderFlag == '1'))
      ).Select((ItemDis) => ItemDis);
      if (oReorderDis != null && oReorderDis.Count() > 0) {
        this.TypeIndex = 1;
      } else {
        let oReorderDisCan = this.MedsResolve.Where(
          (ItemDiscan) =>
            !String.IsNullOrEmpty(ItemDiscan.DiscontinueCancelAction) &&
            (String.Compare(
              ItemDiscan.ParentSourcePrescriptionType,
              PrescriptionTypes.Discharge,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
              (String.IsNullOrEmpty(ItemDiscan.ParentSourcePrescriptionType) &&
                ItemDiscan.InPatDisReorderFlag == '1'))
        ).Select((ItemDiscan) => ItemDiscan);
        if (oReorderDisCan != null && oReorderDisCan.Count() > 0) {
          this.TypeIndex = 1;
        }
      }
    }
  }
  oMsg_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    if (!this.IsReconcileMsgClicked) {
      this.IsReconcileMsgClicked = true;
      this.IsReconcileMsgShowed = false;
      //Not Required for LHS. To be Re-Visited.
       
            if (e.MessageBoxResult == MessageBoxResult.Yes) {
                this.oMedReconcile = new MedReconcileChild();
                this.oMedReconcile.constructorIMPL(this);
                // ObjectHelper.stopFinishAndCancelEvent(true);
                AppActivity.OpenWindow("Reconcile - LORENZO -- Webpage Dialog", this.oMedReconcile,(s,e)=>{this.oMedReconcile_Closed(s);}, "", false, 380, 750, false, WindowButtonType.OkCancel, null);
            }
            else {
                if (this.IsFinishNow || this.IsFinish)
                    this.ModifiedPatientPrescription();
                Busyindicator.SetStatusIdle("Next");
                Busyindicator.SetStatusIdle("Reconcile");
                // if(ObjectHelper.DoubleOpenWindowMode){
                //   ObjectHelper.DoubleOpenWindowMode = false
                // }else
                // ObjectHelper.stopFinishAndCancelEvent(false);
                if (this.IsNexBtnClicked) {
                    this.IsCallFromMoveNext = true;
                 //   MoveNext();
                 //Required to revisit
                }
            }
            
    }
  }
  ReconclReasonBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    Busyindicator.SetStatusBusy('ReconcileReson');
    if (this.OnSelectedReconcileReason != null) {
      this.OnSelectedReconcileReason();
    }
    Busyindicator.SetStatusIdle('ReconcileReson');
  }
  MaxPrescriptionDiable_MessageBoxClose(
    sender: Object,
    e: MessageEventArgs
  ): void {
    if (this.OnFinishMaxPrescribeDisable != null) {
      this.OnFinishMaxPrescribeDisable();
      this.EnableFauxTabs = false;
    }
  }
  oMedReconcile_Closed(args: AppDialogEventargs): void {
    let bIsClose: boolean = false;
    let bMessage: boolean = false;
    let SetAllergycheck: boolean = false;
    Busyindicator.SetStatusIdle('Reconcile');
    if (args.Content.Component) {
      this.oMedReconcile = args.Content.Component;
    }
    this.IsReconcileMezLaunched = false;
    if (args.Result == AppDialogResult.Ok) {
      if (this.MedsReconcile != null && this.MedsReconcile.Count > 0) {
        if (ProfileData.AdditionalPrescConfig.ReconcileMandatory) {
          for(let i=0; i< this.MedsReconcile.Count; i++){
            let oVM : PrescriptionItemVM = this.MedsReconcile[i];
         
            if (
              oVM.FormViewerDetails.BasicDetails.ReasonforModification ==
                null ||
              (oVM.FormViewerDetails.BasicDetails.ReasonforModification !=
                null &&
                String.Compare(
                  oVM.FormViewerDetails.BasicDetails.ReasonforModification
                    .DisplayText,
                  'Select reason',
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0)
            ) { 
              bMessage = true;
              break;
            }
          }
          if(bMessage){
            let oMsgBox: iMessageBox = new iMessageBox();
            // oMsgBox.MessageBoxClose = (s, e) => {
              // this.ReconclReasonBox_MessageBoxClose(s, e);
            // };
             oMsgBox.Title = 'Error - Lorenzo';
             oMsgBox.MessageButton = MessageBoxButton.OK;
             oMsgBox.IconType = MessageBoxType.Information;
             oMsgBox.Message = 'Reason for stopping is mandatory';
             oMsgBox.Show();
             return;
          }
          if (this.MedsReconcile != null) {
            let oQuery = this.MedsReconcile.Where(
              (s) =>
                s.FormViewerDetails.BasicDetails.ReasonforModification !=
                  null &&
                !s.FormViewerDetails.BasicDetails.Launchallgergyonceonly &&
                String.Compare(
                  s.FormViewerDetails.BasicDetails.ReasonforModification.Value,
                  'CC_MEDALLADVRECTINTO',
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
            ).Select((s) => s);
            if (oQuery != null && oQuery.Count() > 0) {
              this.oGrdCols = new ObservableCollection<PrescriptionItemVM>(
                oQuery.AsEnumerable()
              );
              if (this.oGrdCols != null && this.oGrdCols.Count > 0) {
                this.LaunchRecordallergy(this.oGrdCols, bMessage);
                if (this.IsFinishNow || this.IsFinish) SetAllergycheck = true;
              }
            }
          }
          if (
            SetAllergycheck == false &&
            !bMessage &&
            (this.IsFinishNow || this.IsFinish) &&
            this.IsFinishClicked
          ) {
            this.ModifiedPatientPrescription();
          }
        } else {
          if (this.MedsReconcile != null) {
            let oQuery = this.MedsReconcile.Where(
              (s) =>
                s.FormViewerDetails.BasicDetails.ReasonforModification !=
                  null &&
                !s.FormViewerDetails.BasicDetails.Launchallgergyonceonly &&
                String.Compare(
                  s.FormViewerDetails.BasicDetails.ReasonforModification.Value,
                  'CC_MEDALLADVRECTINTO',
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
            ).Select((s) => s);
            if (oQuery != null && oQuery.Count() > 0) {
              this.oGrdCols = new ObservableCollection<PrescriptionItemVM>(
                oQuery.AsEnumerable()
              );
              if (this.oGrdCols != null && this.oGrdCols.Count > 0) {
                this.LaunchRecordallergy(this.oGrdCols, false);
                if (this.IsFinishNow || this.IsFinish) SetAllergycheck = true;
              }
            }
          }
          if (
            !SetAllergycheck &&
            (this.IsFinishNow || this.IsFinish) &&
            this.IsFinishClicked
          ) {
            this.ModifiedPatientPrescription();
          }
          this.MedsReconcile.forEach((oVM) => {
            if (
              oVM.FormViewerDetails.BasicDetails.ReasonforModification !=
                null &&
              String.Compare(
                oVM.FormViewerDetails.BasicDetails.ReasonforModification
                  .DisplayText,
                'Select reason',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            ) {
              oVM.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText =
                null;
              oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value =
                null;
            }
          });
        }
      }
      if (!bMessage) {
        this.IsreconcileClick = false;
        // ObjectHelper.stopFinishAndCancelEvent(false);
        args.AppChildWindow.DialogResult = true;
      }
    } else if (args.Result == AppDialogResult.Cancel) {
      //Not Required for LHS. To be Re-Visited.
      this.oMedReconcile.CancelButtonClick();
      bIsClose = true;
    } else if (args.Result == AppDialogResult.Close) {
      // ObjectHelper.stopFinishAndCancelEvent(false);
      args.AppChildWindow.DialogResult = true;
	    this.oMedReconcile.dupDialogRef.close();
      bIsClose = true; 
    }
    if (!bMessage) {
      if (bIsClose) {
        //Not Required for LHS. To be Re-Visited.
          if( this.oMedReconcile.oReconcileSelReason)
          {
                for (let i: number = 0; i < this.oMedReconcile.oReconcileSelReason.Count; i++) {
                    this.MedsReconcile[i].FormViewerDetails.BasicDetails.ReasonforModification = this.oMedReconcile.oReconcileSelReason[i];
                }
              }
                
        if (this.IsFinish) {
          this.IsFinishClicked = false;
          Busyindicator.SetStatusIdle('FINISH');
          this.IsFinish = false;
        } else if (this.IsFinishNow) {
          this.IsFinishClicked = false;
          Busyindicator.SetStatusIdle('FINISHNOW');
          this.IsFinishNow = false;
        }
      } else {
        //Not Required for LHS. To be Re-Visited.
        if(this.oMedReconcile.oReconcileSelReason !=null){
                for (let i: number = 0; i < this.oMedReconcile.oReconcileSelReason.Count; i++) {
                    if (this.MedsReconcile[i].FormViewerDetails.BasicDetails.ReasonforModification == null)
                        this.MedsReconcile[i].FormViewerDetails.BasicDetails.ReasonforModification = this.oMedReconcile.oReconcileSelReason[i];
                }
              }
                
        if (this.IsNexBtnClicked) {
          this.IsCallFromMoveNext = true;
          //Not Required for LHS. To be Re-Visited.
          //MoveNext();
        }
      }
    }
  }
  public RestrictPrescribe(out1: (sDrugName: string) => void): boolean {
    let sDrugName: string;

    sDrugName = String.Empty;
    let oPrescribedData = this.MedsResolve.Where(
      (item) => !String.IsNullOrEmpty(item.OperationMode)
    ).Select((item) => item);
    let objStaticFrm: IEnumerable<PrescriptionItemVM> = oPrescribedData.Where(
      (x) =>
        x != null &&
        x.FormViewerDetails != null &&
        x.FormViewerDetails.BasicDetails != null &&
        !String.IsNullOrEmpty(x.PrescriptionType) &&
        x.PrescriptionType != PrescriptionTypes.Clerking &&
        (PatientContext.PrescriptionType !=
          PrescriptionTypes.ForAdministration ||
          PatientContext.PrescriptionType != PrescriptionTypes.Inpatient) &&
        !x.FormViewerDetails.BHasFormViewParams &&
        x.FormViewerDetails.BasicDetails.StationaryType != null &&
        (String.IsNullOrEmpty(
          x.FormViewerDetails.BasicDetails.StationaryType.DisplayText
        ) ||
          String.IsNullOrEmpty(
            x.FormViewerDetails.BasicDetails.StationaryType.Value
          ) ||
          x.FormViewerDetails.BasicDetails.StationaryType.Tag == null)
    );
    let objDynamicFrm: IEnumerable<PrescriptionItemVM> = oPrescribedData.Where(
      (y) =>
        y != null &&
        y.FormViewerDetails != null &&
        y.FormViewerDetails.BasicDetails != null &&
        y.FormViewerDetails.BHasFormViewParams &&
        y.FormViewerDetails.BasicControls != null &&
        y.FormViewerDetails.BasicControls.Contains('CC_MED_GRP_STATYP') &&
        y.FormViewerDetails.MandatoryControls != null &&
        y.FormViewerDetails.MandatoryControls[
          Array.IndexOf(
            y.FormViewerDetails.BasicControls,
            y.FormViewerDetails.BasicControls.Where((x) =>
              x.Contains('CC_MED_GRP_STATYP')
            ).FirstOrDefault()
          )
        ] &&
        y.FormViewerDetails.BasicDetails.StationaryType != null &&
        (String.IsNullOrEmpty(
          y.FormViewerDetails.BasicDetails.StationaryType.DisplayText
        ) ||
          String.IsNullOrEmpty(
            y.FormViewerDetails.BasicDetails.StationaryType.Value
          ) ||
          y.FormViewerDetails.BasicDetails.StationaryType.Tag == null)
    );
    if (
      (objStaticFrm != null && objStaticFrm.Count() > 0) ||
      (objDynamicFrm != null && objDynamicFrm.Count() > 0)
    ) {
      if (objStaticFrm != null && objStaticFrm.Count() > 0)
        //Not Required for LHS. To be Re-Visited.
        /*
            sDrugName = String.Join(", ", objStaticFrm.Select(z => z.FormViewerDetails.BasicDetails.IdentifyingName));
            if (objDynamicFrm != null && objDynamicFrm.Count() > 0 && String.IsNullOrEmpty(sDrugName))
                sDrugName = String.Join(", ", objDynamicFrm.Select(z => z.FormViewerDetails.BasicDetails.IdentifyingName));
            else if (!String.IsNullOrEmpty(sDrugName))
                sDrugName = sDrugName + ", " + String.Join(", ", objDynamicFrm.Select(z => z.FormViewerDetails.BasicDetails.IdentifyingName));
            */
        objStaticFrm = null;
      objDynamicFrm = null;
      out1(sDrugName);
      return false;
    } else {
      objStaticFrm = null;
      objDynamicFrm = null;
      out1(sDrugName);
      return true;
    }
  }
  CheckUserRightsAndPrescribe(): void {
    let sIdentifyingName: string = String.Empty;
    if (
      !this.RestrictPrescribe((o) => {
        sIdentifyingName = o;
      })
    ) {
      iMessageBox.Show(
        'LORENZO',
        Resource.MedicationForm.RestrictPrescribeWithoutStationaryType +
          '\n' +
          sIdentifyingName,
        MessageBoxType.Information,
        MessageBoxButton.OK
      );
      if (this.IsFinish) {
        Busyindicator.SetStatusIdle('FINISH');
        this.IsFinishClicked = false;
      } else if (this.IsFinishNow) {
        Busyindicator.SetStatusIdle('FINISHNOW');
        this.IsFinishClicked = false;
      }
      return;
    }
    if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenu,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 ||
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenu,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.VerifyDrugs();
    }
        else {
            if (UserPermissions.CanPresWithAuth) {
              //Revisit Required
              /*
                let oMeduserteam: meduserteam = new meduserteam();
                if (oMeduserteam.sTeamOIDs == null) {
                    iMessageBox.Show("LORENZO", "You do not belong to any team. Since you do not have rights to authorise medication and do not belong to a team that can authorise, this prescription cannot be submitted. Please Suspend the Activity", MessageBoxType.Information, MessageBoxButton.OK);
                    if (this.IsFinish) {
                        Busyindicator.SetStatusIdle("FINISH");
                        this.IsFinish = false;
                    }
                    else if (this.IsFinishNow) {
                        Busyindicator.SetStatusIdle("FINISHNOW");
                        this.IsFinishNow = false;
                    }
                }
                else if (oMeduserteam.sTeamOIDs.Length == 1) {
                    this.TeamOId = Convert.ToInt64(oMeduserteam.sTeamOIDs[0]);
                    let e: AppDialogEventargs = new AppDialogEventargs();
                    e.Content = oMeduserteam;
                    this.oMeduserteam_Closed(e);
                }
                else {
                    let oPrescribedData = this.MedsResolve.Where(item => !String.IsNullOrEmpty(item.OperationMode)).Select(item => item);
                    if (oPrescribedData.Count() > 0) {
                        AppActivity.OpenWindow("Specify Team", oMeduserteam, (s,e) => {this.oMeduserteam_Closed(s);}, "", false, 150, 350, false, WindowButtonType.Ok, null);
                    }
                    else {
                        this.SubmitDrugs();
                    }
                }
                */
            }
            else {
                this.SubmitDrugs();
            }
        }
        
  }
  //Not Required for LHS. To be Re-Visited.
  /*
    oMeduserteam_Closed(args: AppDialogEventargs): void {
        this.oMeduserteam = ObjectHelper.CreateType<meduserteam>(args.Content, meduserteam);
        this.oChildWindow = args.AppChildWindow;
        if (this.oMeduserteam.cboTeam.GetText().Length != 0) {
            this.oMeduserteam.SelTeamOID = Convert.ToInt64(this.oMeduserteam.cboTeam.GetValue());
            this.TeamOId = this.oMeduserteam.SelTeamOID;
        }
        if (args.Result == AppDialogResult.Ok && this.oMeduserteam.SelTeamOID > 0) {
            let objService: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient = new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
            objService.GetTeamMembersWithPermissionCompleted = (s, e) => { this.objService_GetTeamMembersWithPermissionCompleted(s, e); };
            let objRequest: IPPMAManagePrescSer.CReqMsgGetTeamMembersWithPermission = new IPPMAManagePrescSer.CReqMsgGetTeamMembersWithPermission();
            objRequest.oContextInformation = Common.FillContext();
            objRequest.TeamOIDBC = this.oMeduserteam.SelTeamOID;
            objService.GetTeamMembersWithPermissionAsync(objRequest);
        }
        else if (args.Result == AppDialogResult.Ok && this.oMeduserteam.cboTeam.GetText().Length == 0) {
            iMessageBox.Show("LORENZO", "Team is Mandatory, please select the value", MessageBoxType.Critical, MessageBoxButton.OK);
            this.oMeduserteam.cboTeam.Focus();
        }
        else if (args.Result == AppDialogResult.Cancel) {
            this.oMeduserteam.Cancel_ButtonClick();
            if (this.IsFinish) {
                this.IsFinishClicked = false;
                Busyindicator.SetStatusIdle("FINISH");
                this.IsFinish = false;
            }
            else if (this.IsFinishNow) {
                this.IsFinishClicked = false;
                Busyindicator.SetStatusIdle("FINISHNOW");
                this.IsFinishNow = false;
            }
        }
    }
    */
  objService_GetTeamMembersWithPermissionCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetTeamMembersWithPermissionCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000033;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:GetTeamMembersWithPermissionCompleted()';
    if (e.Error == null) {
      try {
        let oResGetTeamMembers: IPPMAManagePrescSer.CResMsgGetTeamMembersWithPermission =
          e.Result;
        if (oResGetTeamMembers.TeamMembersOID != null) {
          let TeamMemCount: number = oResGetTeamMembers.TeamMembersOID.Count;
          this.TeamMembersOID = new Array(TeamMemCount);
          for (let nCnt: number = 0; nCnt < TeamMemCount; nCnt++) {
            this.TeamMembersOID[nCnt] = oResGetTeamMembers.TeamMembersOID[nCnt];
          }
        }
        if (this.IsFinishNow || this.IsFinish) {
          if (
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenu,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenu,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          ) {
            this.VerifyDrugs();
          } else {
            this.SubmitDrugs();
          }
        } else {
          this.IsReconNextPrev = this.IsFinishNow = this.IsFinish = false;
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public PopulatePrintStntyTyCbo(): void {
    let oPrint = this.MedsResolve.Where(
      (Item) =>
        !String.IsNullOrEmpty(Item.OperationMode) && Item.OperationMode == 'N'
    ).Select((Item) => Item);
    this.MedsPrint = new ObservableCollection<PrescriptionItemVM>();
    oPrint.forEach((oVM) => {
      this.MedsPrint.Add(oVM);
    });
    if (this.MedsPrint != null && this.MedsPrint.Count > 0) {
      this.MedsPrint.forEach((oPresItemVM) => {
        if (this.StationaryTypes != null && this.StationaryTypes.Count > 0) {
          oPresItemVM.StationaryCodes = this.StationaryTypes;
        } else {
          if (
            oPresItemVM.FormViewerDetails.BasicDetails.StationaryType != null
          ) {
            oPresItemVM.StationaryCodes = new ObservableCollection<CListItem>();
            oPresItemVM.StationaryCodes.Add(
              oPresItemVM.FormViewerDetails.BasicDetails.StationaryType
            );
          }
        }
        if (
          this.DefaultStationaryType != null &&
          oPresItemVM != null &&
          oPresItemVM.FormViewerDetails != null &&
          oPresItemVM.FormViewerDetails.BasicDetails != null &&
          oPresItemVM.FormViewerDetails.BasicDetails.StationaryType == null
        ) {
          oPresItemVM.FormViewerDetails.BasicDetails.StationaryType =
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: this.DefaultStationaryType.DisplayText,
              Value: this.DefaultStationaryType.Value,
            });
        }
        if (
          oPresItemVM != null &&
          oPresItemVM.FormViewerDetails != null &&
          oPresItemVM.FormViewerDetails.BasicDetails != null &&
          oPresItemVM.FormViewerDetails.BasicDetails.PrintStationaryType == null
        )
          oPresItemVM.FormViewerDetails.BasicDetails.PrintStationaryType =
            oPresItemVM.FormViewerDetails.BasicDetails.StationaryType;
      });
      let profile: ProfileFactoryType = new ProfileFactoryType();
      profile.OnProfileLoaded = (s, e) => {
        this.profile_PrintLoaded(s, e);
      };
      profile.GetProfile<PrintConfigurationData>('VW_MEDICONFIG', 'PRINTCFG');
    } else {
      let profile: ProfileFactoryType = new ProfileFactoryType();
      profile.OnProfileLoaded = (s, e) => {
        this.profile_PrintLoaded(s, e);
      };
      profile.GetProfile<PrintConfigurationData>('VW_MEDICONFIG', 'PRINTCFG');
    }
    if (this.MedsPrint.Count <= 0) {
      this.NoRecordsText = 'No records to show';
    }
  }
  private GetActivityName(CACode: string): string {
    switch (CACode) {
      case 'MN_MEDCLR':
      case 'MN_MEDCLERKSL_P2':
      case 'MN_MEDLEAVE_P2':
      case 'MN_MEDLEAVESL_P2':
      case 'MN_MEDOUTPAT_P2':
      case 'MN_MEDOUTPATSL_P2':
      case 'MN_MEDDISCHARGE_P2':
      case 'MN_MEDDISCHRGESL_P2':
      case 'MN_MEDINPAT':
      case 'MN_MEDINPATSL_P2':
      case 'MN_MEDADMINISTRAT_P2':
      case 'MN_RECORDPGDSUPLY_P2':
        return 'Submit';
      case 'MN_MED_VERIFY_P2':
      case 'MN_MED_VERIFY_SL_P2':
      case 'MED_CA_CLN_VRFY_SL_P2':
        return 'Clinically Verify';
    }
    return '';
  }
  private profile_PrintLoaded(sender: Object, Result: IProfileProp): void {
    if (Result == null) return;
    if (Result.Profile instanceof PrintConfigurationData) {
      ProfileData.PrintConfig = ObjectHelper.CreateType<PrintConfigurationData>(
        Result.Profile,
        PrintConfigurationData
      );
      if (
        ProfileData.PrintConfig != null &&
        (this.PrinterPolicy == null || this.ConsolidatedPrinterPolicy == null)
      ) {
        this.IsPrint = false;
        this.IsConsolidatedPrint = false;
        this.Consolidatedtemplate = String.Empty;
        this.ConsolidatedtemplateName = String.Empty;
        this.DiscIsPrint = false;
        this.DiscIsConsolidatedPrint = false;
        this.DiscConsolidatedtemplate = String.Empty;
        this.DiscConsolidatedtemplateName = String.Empty;
        this.PrinterPolicy = String.Empty;
        this.ConsolidatedPrinterPolicy = String.Empty;
        this.DiscPrinterPolicy = String.Empty;
        this.DiscConsolidatedPrinterPolicy = String.Empty;
        let PatientContextPresType: string = PatientContext.PrescriptionType;
        if (
          PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          PatientContextPresType = PrescriptionTypes.Clerking;
        }
        let ActivityName: string = this.GetActivityName(this.CACode);
        for (
          let i: number = 0;
          i < ProfileData.PrintConfig.ActivityConfigData.Count;
          i++
        ) {
          if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              ActivityName
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              PatientContextPresType
            ) == 0 &&
            String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.IsPrint = true;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.PrinterPolicy = 'BOTH';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            ) {
              this.PrinterPolicy = 'MAIN';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.PrinterPolicy = 'ALT';
            } else this.PrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              ActivityName
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              PatientContextPresType
            ) == 0 &&
            !String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.IsConsolidatedPrint = true;
            if (
              !String.IsNullOrEmpty(
                ProfileData.PrintConfig.ActivityConfigData[i]
                  .SummaryStationeryForConsolidatedPrintValue
              ) &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue.Contains('~')
            ) {
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue =
                ProfileData.PrintConfig.ActivityConfigData[
                  i
                ].SummaryStationeryForConsolidatedPrintValue.Replace('~', '#');
            }
            this.Consolidatedtemplate =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue;
            this.ConsolidatedtemplateName =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrint;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'BOTH';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'MAIN';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.ConsolidatedPrinterPolicy = 'ALT';
            } else this.ConsolidatedPrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              'Discontinue/Cancel'
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              PatientContextPresType
            ) == 0 &&
            String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            this.DiscIsPrint = true;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.DiscPrinterPolicy = 'BOTH';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            )
              this.DiscPrinterPolicy = 'MAIN';
            else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            )
              this.DiscPrinterPolicy = 'ALT';
            else this.DiscPrinterPolicy = 'NO';
          } else if (
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .ActivityToPrintAfter,
              'Discontinue/Cancel'
            ) == 0 &&
            String.Compare(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .PrescriptiontypeValue,
              PatientContextPresType
            ) == 0 &&
            !String.IsNullOrEmpty(
              ProfileData.PrintConfig.ActivityConfigData[i]
                .SummaryStationeryForConsolidatedPrintValue
            )
          ) {
            if (
              !String.IsNullOrEmpty(
                ProfileData.PrintConfig.ActivityConfigData[i]
                  .SummaryStationeryForConsolidatedPrintValue
              ) &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue.Contains('~')
            ) {
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue =
                ProfileData.PrintConfig.ActivityConfigData[
                  i
                ].SummaryStationeryForConsolidatedPrintValue.Replace('~', '#');
            }
            this.DiscIsConsolidatedPrint = true;
            this.DiscConsolidatedtemplate =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrintValue;
            this.DiscConsolidatedtemplateName =
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].SummaryStationeryForConsolidatedPrint;
            if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy') &&
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'BOTH';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Main printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'MAIN';
            } else if (
              ProfileData.PrintConfig.ActivityConfigData[
                i
              ].PolicyToBeUsed.Contains('Alternate printer policy')
            ) {
              this.DiscConsolidatedPrinterPolicy = 'ALT';
            } else this.DiscConsolidatedPrinterPolicy = 'NO';
          }
        }
      }
    }
    Busyindicator.SetStatusIdle('Next');
  }
  public DischargeDTTM: DateTime = DateTime.MinValue;
  public LeaveDTTM: DateTime = DateTime.MinValue;
  private VerifyDrugs(): void {
    //PAN 216 fix
    this.SubmitDrugsRetryCount = this.SubmitDrugsRetryCount + 1;

    if (
      this.MedsResolve == null ||
      (this.MedsResolve != null && this.MedsResolve.Count == 0)
    ) {
      if (
        !String.IsNullOrEmpty(this.WizardContext['IsClnicalNote']) &&
        this.WizardContext['IsClnicalNote'] == 'Yes'
      ) {
        if (this.IsFinish) {
          super.OnFinish();
          return;
        } else if (this.IsFinishNow) {
          super.OnFinishNow();
          return;
        }
      } else {
        this.FinishCA();
        return;
      }
    }
    let oCReqMsgVerifyDrugs: IPPMAManagePrescSer.CReqMsgVerifyDrug = null;
    let oCReqMsgAuthoriseDrugs: IPPMAManagePrescSer.CReqMsgAuthoriseDrugs =
      null;
    let bIsClinicalVer: boolean = false;
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      oCReqMsgVerifyDrugs = new IPPMAManagePrescSer.CReqMsgVerifyDrug();
      oCReqMsgVerifyDrugs.objPatientInfoBC =
        new IPPMAManagePrescSer.GeneralInfo();
      oCReqMsgVerifyDrugs.objPatientInfoBC.IgnoreIfRequestExists =
        this.IgnoreIfRequestExists;
         // revisit required
      oCReqMsgVerifyDrugs.objPatientInfoBC.CACode = this.CACode=='MN_MED_VERIFY_SL_P2'?'MED_CA_CLN_VRFY_SL_P2':this.CACode;
      oCReqMsgVerifyDrugs.objPatientInfoBC.EncounterType =
        PatientContext.EncounterType;
      oCReqMsgVerifyDrugs.objPatientInfoBC.PrescriptionType =
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.CurrentCultureIgnoreCase
        ) &&
        PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ? PrescriptionTypes.Clerking
          : PatientContext.PrescriptionType;
      oCReqMsgVerifyDrugs.VerifiedItemsBC =
        new ObservableCollection<IPPMAManagePrescSer.PrescriptionItemDetails>();
      oCReqMsgVerifyDrugs.DeleteDrugsBC =
        new ObservableCollection<IPPMAManagePrescSer.DeletedItemsInfo>();
      oCReqMsgVerifyDrugs.ReconciledDrugsBC =
        new ObservableCollection<IPPMAManagePrescSer.ReconciledItems>();
      oCReqMsgVerifyDrugs.oDispensinginstructionhistoryBC =
        new IPPMAManagePrescSer.Dispensinginstructionhistory();
      oCReqMsgVerifyDrugs.TechnicalValidateBC =
        new ObservableCollection<IPPMAManagePrescSer.TechnicalValidationInfo>();
      oCReqMsgVerifyDrugs.NonVerifiedItemsBC =
        new ObservableCollection<IPPMAManagePrescSer.PrescriptionItemDetails>();
      oCReqMsgVerifyDrugs.oContextInformation = Common.FillContext();
      bIsClinicalVer = true;
    } else {
      oCReqMsgAuthoriseDrugs = new IPPMAManagePrescSer.CReqMsgAuthoriseDrugs();
      oCReqMsgAuthoriseDrugs.AuthorisedItemsBC =
        new ObservableCollection<IPPMAManagePrescSer.PrescriptionItemDetails>();
      oCReqMsgAuthoriseDrugs.DeleteDrugsBC =
        new ObservableCollection<IPPMAManagePrescSer.DeletedItemsInfo>();
      oCReqMsgAuthoriseDrugs.ReconciledDrugsBC =
        new ObservableCollection<IPPMAManagePrescSer.ReconciledItems>();
      oCReqMsgAuthoriseDrugs.TechnicalValidateBC =
        new ObservableCollection<IPPMAManagePrescSer.TechnicalValidationInfo>();
      oCReqMsgAuthoriseDrugs.UnAuthorisedItemsBC =
        new ObservableCollection<IPPMAManagePrescSer.PrescriptionItemDetails>();
      oCReqMsgAuthoriseDrugs.oContextInformation = Common.FillContext();
    }
    if (
      bIsClinicalVer &&
      this.MedsResolve != null &&
      this.MedsResolve.Count > 0
    ) {
      let oFlowRateChngAltShwn = this.MedsResolve.Where(
        (item) =>
          item != null &&
          !item.IsOrderSetHeader &&
          item.FormViewerDetails != null &&
          item.FormViewerDetails.BasicDetails != null &&
          item.FormViewerDetails.BasicDetails.InfusionDetails != null &&
          item.FormViewerDetails.BasicDetails.InfusionDetails
            .IsInfusionAlertShown
      ).Select((item) => item);
      if (
        (oFlowRateChngAltShwn != null && oFlowRateChngAltShwn.Count() > 0) ||
        this.isCancelDisConVerify
      ) {
        oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown =
          new IPPMAManagePrescSer.CancelDisRateAlertShown();
        oFlowRateChngAltShwn.forEach((item) => {
          if (
            String.IsNullOrEmpty(
              oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown
                .PrescriptionOIDList
            )
          ) {
            oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown.PrescriptionOIDList =
              item.PrescriptionOID.ToString();
          } else {
            if (
              oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown.PrescriptionOIDList.IndexOf(
                item.PrescriptionOID.ToString()
              ) < 0
            ) {
              oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown.PrescriptionOIDList =
                oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown
                  .PrescriptionOIDList +
                ',' +
                item.PrescriptionOID.ToString();
            }
          }
        });
        if (this.MedsDisCon != null && this.MedsDisCon.Count > 0) {
          this.MedsDisCon.forEach((objPresitem) => {
            if (
              objPresitem != null &&
              !objPresitem.IsOrderSetHeader &&
              objPresitem.FormViewerDetails != null &&
              objPresitem.FormViewerDetails.BasicDetails != null &&
              objPresitem.FormViewerDetails.BasicDetails.InfusionDetails !=
                null &&
              objPresitem.FormViewerDetails.BasicDetails.InfusionDetails
                .IsInfusionAlertShown
            ) {
              if (
                String.IsNullOrEmpty(
                  oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown
                    .PrescriptionOIDList
                )
              ) {
                oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown.PrescriptionOIDList =
                  objPresitem.PrescriptionOID.ToString();
              } else {
                if (
                  oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown.PrescriptionOIDList.IndexOf(
                    objPresitem.PrescriptionOID.ToString()
                  ) < 0
                ) {
                  oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown.PrescriptionOIDList =
                    oCReqMsgVerifyDrugs.objPatientInfoBC
                      .oCancelDisRateAlertShown.PrescriptionOIDList +
                    ',' +
                    objPresitem.PrescriptionOID.ToString();
                }
              }
            }
          });
        }
        oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown.IsRateAlertShown =
          true;
        if (PatientContext.PatientOID > 0)
          oCReqMsgVerifyDrugs.objPatientInfoBC.oCancelDisRateAlertShown.PatientOID =
            PatientContext.PatientOID;
      }
    }
    this.MedsResolve.forEach((objProcessingItemVM) => {
      if (
        (objProcessingItemVM.IsClinicallyVerifyEnable &&
          objProcessingItemVM.FormViewerDetails != null &&
          objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
          objProcessingItemVM.FormViewerDetails.BasicDetails
            .IsClinicallyVerified &&
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            ContextInfo.MenuCode,
            CConstants.AuthoriseMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          )) ||
        (String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
          objProcessingItemVM.PrescriptionItemStatus !=
            CConstants.CLINICALLYVERIFIED &&
          objProcessingItemVM.FormViewerDetails != null &&
          objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
          objProcessingItemVM.FormViewerDetails.BasicDetails
            .IsClinicallyVerified &&
          !String.Equals(
            objProcessingItemVM.OperationMode,
            'N',
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          (String.IsNullOrEmpty(objProcessingItemVM.OperationMode) ||
            (!String.IsNullOrEmpty(objProcessingItemVM.OperationMode) &&
              String.Compare(
                objProcessingItemVM.OperationMode,
                'UA',
                StringComparison.CurrentCultureIgnoreCase
              ) != 0 &&
              !String.Equals(
                objProcessingItemVM.OperationMode,
                'N',
                StringComparison.InvariantCultureIgnoreCase
              )))) ||
        (String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
          objProcessingItemVM.FormViewerDetails != null &&
          objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
          objProcessingItemVM.FormViewerDetails.BasicDetails
            .IsClinicallyVerified &&
          !String.IsNullOrEmpty(objProcessingItemVM.OperationMode) &&
          !String.Equals(
            objProcessingItemVM.OperationMode,
            'UA',
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          objProcessingItemVM.PrescriptionItemStatus == CConstants.SUBMITTED) ||
        (String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
          objProcessingItemVM.FormViewerDetails != null &&
          objProcessingItemVM.FormViewerDetails.BasicDetails != null &&
          objProcessingItemVM.IsClinicallyVerifyEnable &&
          objProcessingItemVM.FormViewerDetails.BasicDetails
            .IsClinicallyVerified &&
          String.IsNullOrEmpty(objProcessingItemVM.OperationMode))
      ) {
        objProcessingItemVM.OperationMode = 'M';
      } else if (
        !String.Equals(
          objProcessingItemVM.OperationMode,
          'N',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        if (
          ((PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration ||
            PatientContext.PrescriptionType == PrescriptionTypes.Inpatient) &&
            bIsClinicalVer &&
            objProcessingItemVM.IsOriginalSupplyRequested !=
              objProcessingItemVM.IsSupplyRequested &&
            objProcessingItemVM.IsSupplyRequested) ||
          objProcessingItemVM.IsReSupplyRequested ||
          (objProcessingItemVM.IsOriginalSupplyRequested &&
            !objProcessingItemVM.IsSupplyRequested)
        ) {
          objProcessingItemVM.OperationMode = String.IsNullOrEmpty(
            objProcessingItemVM.OperationMode
          )
            ? 'M'
            : objProcessingItemVM.OperationMode;
        } else if (bIsClinicalVer) {
          if (
            objProcessingItemVM.bIsSupplyDispensingInstructionSet ||
            (objProcessingItemVM.bIsSupplyDispensingInstructionSet &&
              !String.IsNullOrEmpty(
                objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsVal
              )) ||
            (objProcessingItemVM.bIsSupplyDispensingInstructionSet &&
              !String.IsNullOrEmpty(
                objProcessingItemVM.FormViewerDetails.BasicDetails
                  .Supplycomments
              ))
          ) {
            objProcessingItemVM.OperationMode = String.IsNullOrEmpty(
              objProcessingItemVM.OperationMode
            )
              ? 'M'
              : objProcessingItemVM.OperationMode;
            objProcessingItemVM.bIsSupplyDispensingInstructionSet = true;
            if (
              objProcessingItemVM.bIsSupplyDispensingInstructionSet &&
              !String.IsNullOrEmpty(objProcessingItemVM.OperationMode) &&
              !String.Equals(
                objProcessingItemVM.OperationMode,
                'M',
                StringComparison.CurrentCultureIgnoreCase
              ) &&
              !String.IsNullOrEmpty(objProcessingItemVM.OperationMode)
            ) {
              if (
                objProcessingItemVM.FormViewerDetails.TechValidateDetails ==
                null
              ) {
                objProcessingItemVM.FormViewerDetails.TechValidateDetails =
                  new TechValidateVM();
              }
              if (
                objProcessingItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems == null
              ) {
                objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems =
                  new ObservableCollection<PrescriptionItemVM>();
              }
              objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems.Add(
                objProcessingItemVM
              );
              if (
                objProcessingItemVM.FormViewerDetails != null &&
                objProcessingItemVM.FormViewerDetails.TechValidateDetails !=
                  null &&
                objProcessingItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems != null &&
                objProcessingItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems.Count > 0 &&
                objProcessingItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0] != null &&
                objProcessingItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0].FormViewerDetails != null &&
                objProcessingItemVM.FormViewerDetails.TechValidateDetails
                  .PresTechValidatedItems[0].FormViewerDetails.BasicDetails !=
                  null
              ) {
                if (
                  !String.IsNullOrEmpty(
                    objProcessingItemVM.FormViewerDetails.BasicDetails
                      .SupplyInsVal
                  ) &&
                  !String.IsNullOrEmpty(
                    objProcessingItemVM.FormViewerDetails.BasicDetails
                      .SupplyInsText
                  )
                ) {
                  objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
                    new ObservableCollection<CListItem>();
                  let oSupplyText: string[] =
                    objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsText.Split(
                      ';'
                    );
                  let oSupplyValue: string[] =
                    objProcessingItemVM.FormViewerDetails.BasicDetails.SupplyInsVal.Split(
                      ';'
                    );
                  if (
                    oSupplyText != null &&
                    oSupplyText.length > 0 &&
                    oSupplyValue != null &&
                    oSupplyValue.length > 0 &&
                    oSupplyText.length == oSupplyValue.length
                  ) {
                    for (let i: number = 0; i < oSupplyValue.length; i++) {
                      if (
                        objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
                          (c) => c.Value == oSupplyValue[i]
                        ).Count() == 0
                      ) {
                        objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Add(
                          ObjectHelper.CreateObject(new CListItem(), {
                            Value: oSupplyValue[i],
                            DisplayText: oSupplyText[i],
                          })
                        );
                      }
                    }
                  }
                }
                if (
                  !String.IsNullOrEmpty(
                    objProcessingItemVM.FormViewerDetails.BasicDetails
                      .Supplycomments
                  )
                ) {
                  objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.Supplycomments =
                    objProcessingItemVM.FormViewerDetails.BasicDetails.Supplycomments;
                }
              }
            }
          }
        }
      } else if (
        bIsClinicalVer &&
        String.Equals(
          objProcessingItemVM.OperationMode,
          'N',
          StringComparison.CurrentCultureIgnoreCase
        ) &&
        objProcessingItemVM.bIsSupplyDispensingInstructionSet
      ) {
        if (
          objProcessingItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction != null &&
          objProcessingItemVM.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction.Count > 0
        ) {
          objProcessingItemVM.FormViewerDetails.TechValidateDetails =
            new TechValidateVM();
          objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems =
            new ObservableCollection<PrescriptionItemVM>();
          objProcessingItemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems.Add(
            objProcessingItemVM
          );
        }
      }
    });
    if (this.MedsResolve != null) {
      if (bIsClinicalVer) {
        CSequentialHelper.CommonValidateSequence(
          this.MedsResolve,
          this.OriginalLastInfusionGroupSequence
        );
      }
    }
    let oPrescribedData = this.MedsResolve.Where(
      (item) => !String.IsNullOrEmpty(item.OperationMode)
    ).Select((item) => item);
    if (
      this.IsPatientHeightWTUpdatedChecked &&
      MedicationCommonProfileData.PrescribeConfig != null &&
      MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
    ) {
      oCReqMsgVerifyDrugs.objPatientInfoBC.PresItemPatientAddnDetail =
        this.FillPresItemPatientAddnDetail();
    }
    let nPrescDataCnt: number = oPrescribedData.Count();
    for (let i: number = 0; i < nPrescDataCnt; i++) {
      let oItemVM: any = oPrescribedData[i];
      //oPrescribedData.forEach((oItemVM) => {
      if (
        oItemVM.FormViewerDetails == null ||
        oItemVM.FormViewerDetails.BasicDetails == null
      )
        continue;
      let oItemDetails: IPPMAManagePrescSer.PrescriptionItemDetails =
        this.GetResolvePrscriptionItemDetails(oItemVM);
      oItemVM.SetPrnScheduleDet(oItemDetails);
      if (!oItemVM.ClearAdminTimesForPRN(oItemDetails)) {
        oItemDetails.BasicProperties.Dose.DoseRegime[0].FrequencyDetails.ScheduledTimes =
          null;
      }
      oItemDetails.ActionPerformed.IsActionPerformed = '0';
      oItemDetails.BasicProperties.LastModifiedAt = oItemVM.LastModifiedAt;
      oItemDetails.ActionPerformed.UpdateItemStatus =
        String.Compare(oItemDetails.ActionPerformedCode, CAActivity.CA_AMEND) ==
          0 ||
        String.Compare(
          oItemDetails.ActionPerformedCode,
          CAActivity.CA_REORDER
        ) == 0 ||
        String.Compare(
          oItemDetails.ActionPerformedCode,
          CAActivity.CA_PRESCRIBE
        ) == 0
          ? 'True'
          : 'False';
      if (
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        oItemDetails.PrescriptionBasicData.PrescriptionType =
          PrescriptionTypes.Clerking;
      } else {
        oItemDetails.PrescriptionBasicData.PrescriptionType =
          String.IsNullOrEmpty(oItemVM.PrescriptionType)
            ? PatientContext.PrescriptionType
            : oItemVM.PrescriptionType;
      }
      if (
        String.Equals(oItemVM.OperationMode, 'N') ||
        String.Equals(oItemVM.OperationMode, 'U') ||
        String.Equals(oItemVM.OperationMode, 'UA') ||
        String.Equals(oItemVM.OperationMode, 'UI') ||
        String.Compare(
          oItemVM.OperationMode,
          'CU',
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          oItemVM.OperationMode,
          'DRCU',
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        if (
          String.Equals(oItemVM.OperationMode, 'N') &&
          oItemVM.PrescriptionItemOID > 0 &&
          oItemVM.ActionCode == ActivityTypes.UnHold
        )
          oItemVM.OperationMode = 'U';
        if (String.Equals(oItemVM.OperationMode, 'U'))
          oItemDetails.ActionPerformedCode = CAActivity.CA_UNHOLD;
        if (
          !String.IsNullOrEmpty(oItemVM.SequentialActionPerfromCodeAEITS) &&
          !oItemVM.OperationMode.Equals(
            'UA',
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          oItemVM.OperationMode = 'UI';
          oItemDetails.SequentialActionPerformCode =
            oItemVM.SequentialActionPerfromCodeAEITS;
        }
        if (
          !String.IsNullOrEmpty(oItemVM.OperationMode) &&
          String.Compare(oItemVM.OperationMode, 'DRCU') == 0 &&
          oItemVM.PrescriptionItemOID > 0 &&
          oItemVM.ActionCode == ActivityTypes.DRCConflictUpdate
        ) {
          oItemDetails.ActionPerformedCode = CAActivity.OnlyDRCConflictsUpdate;
        }
        if (
          String.Equals(oItemVM.OperationMode, 'UA') ||
          String.Equals(oItemVM.OperationMode, 'CU')
        ) {
          if (String.Equals(oItemVM.OperationMode, 'UA')) {
            oItemDetails.ActionPerformedCode = CAActivity.CA_UPDATEDRUGS;
            if (
              oItemVM != null &&
              oItemVM.FormViewerDetails != null &&
              oItemVM.FormViewerDetails.BasicDetails != null &&
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .GroupSequenceNo > 0 &&
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
                .IsSequentialStartDTTMUpdated
            ) {
              oItemDetails.SequentialActionPerformCode =
                CAActivity.SequentialActionCodeAEITS;
            }
            if (
              oItemVM != null &&
              oItemVM.FormViewerDetails != null &&
              oItemVM.FormViewerDetails.BasicDetails != null &&
              oItemVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
              oItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                .GroupSequenceNo > 0 &&
              oItemVM.FormViewerDetails.BasicDetails.SequenceInfo
                .IsSequentialStartDTTMUpdated
            ) {
              oItemDetails.SequentialActionPerformCode =
                CAActivity.NonIVSeqUpdForSubsequentItems;
            }
          }
          if (
            String.Equals(oItemVM.OperationMode, 'CU') &&
            oItemVM.PrescriptionItemOID > 0 &&
            oItemVM.ActionCode == ActivityTypes.ConflictUpdate
          ) {
            oItemDetails.ActionPerformedCode = CAActivity.OnlyConflictsUpdate;
          }
          if (
            !bIsClinicalVer &&
            !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.VerificationComments
            ) &&
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            oItemDetails.ActionPerformed.Comments =
              oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
            oCReqMsgAuthoriseDrugs.UnAuthorisedItemsBC.Add(oItemDetails);
          } else if (
            bIsClinicalVer &&
            !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.VerificationComments
            ) &&
            (!String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              (String.Equals(
                ContextInfo.MenuCode,
                CConstants.ClinicallyVerifyMenuCode,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
                oItemVM.PrescriptionItemStatus !=
                  CConstants.CLINICALLYVERIFIED))
          ) {
            oItemDetails.ActionPerformed.Comments =
              oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
            if (
              String.Compare(
                oItemVM.PrescriptionItemStatus,
                CConstants.AUTOVERIFIED,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0
            ) {
              oItemDetails.PrescriptionItemStatus = CConstants.SUBMITTED;
            }
            oCReqMsgVerifyDrugs.NonVerifiedItemsBC.Add(oItemDetails);
          }
        }
        if (String.Equals(oItemVM.OperationMode, 'UI')) {
          if (
            oItemVM != null &&
            oItemVM.FormViewerDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
            oItemVM.FormViewerDetails.BasicDetails.SequenceInfo
              .GroupSequenceNo > 0
          ) {
            oItemDetails.ActionPerformedCode =
              CAActivity.CA_UPDATE_NONIVSEQ_DRUGS;
          } else {
            oItemDetails.ActionPerformedCode = CAActivity.CA_UPDATE_SEQ_DRUGS;
          }
          if (
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenu,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (
              oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
              oItemVM.IsClinicallyVerifyEnable
            ) {
              CommonSequentialHelper.SetSequenceActionCode4AmentUpdate(
                oItemVM,
                oItemDetails,
                true
              );
            } else {
              CommonSequentialHelper.SetSequenceActionCode4AmentUpdate(
                oItemVM,
                oItemDetails,
                false
              );
            }
          }
        }
        if (
          oItemVM.PrescriptionItemOID > 0 &&
          !String.IsNullOrEmpty(oItemVM.OperationMode) &&
          (String.Compare(oItemVM.OperationMode, 'DRCU') == 0 ||
            oItemVM.FormViewerDetails.PresItemDRCVM.IsAmendDRCRegenarated)
        ) {
          oItemDetails.OnlyDRCConflictsUpdate = true;
          if (String.IsNullOrEmpty(oItemDetails.ActionPerformedCode)) {
            oItemDetails.ActionPerformedCode =
              CAActivity.OnlyDRCConflictsUpdate;
          }
        }
        if (bIsClinicalVer) {
          let sStationaryCode: string = String.Empty;
          let lStatOID: number = 0;
          if (
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
            oItemVM.PrescriptionItemStatus == CConstants.CLINICALLYVERIFIED
          ) {
            oItemDetails.ActionPerformedCode = 'CLINICALLYVERIFY';
            if (oItemVM.FormViewerDetails.BasicDetails.StationaryType != null)
              Number.TryParse(
                oItemVM.FormViewerDetails.BasicDetails.StationaryType.Value,
                (o) => {
                  lStatOID = o;
                }
              );
            if (
              oItemVM.FormViewerDetails.BasicDetails.StationaryType != null &&
              oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag != null
            )
              sStationaryCode =
                oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag.ToString();
            oItemDetails.PrescriptionItemStatus =
              PrescriptionHelper.GetPrescriptionItemStatus(
                lStatOID,
                sStationaryCode,
                oItemVM.FormViewerDetails.BasicDetails.IsAuthorise
              );
          }
          if (
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.VerificationComments
            )
          )
            oItemDetails.ActionPerformed.Comments =
              oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
          if (oItemVM != null && oItemVM.PrescriptionOID > 0)
            this.sPresOIDDisSum = oItemVM.PrescriptionOID;
          oItemDetails.ActionPerformed.ClinicallySupplyInstruction =
            oItemVM.bIsSupplyDispensingInstructionSet
              ? 'ADDSUPPLYINSTRUCTION'
              : String.Empty;
          oCReqMsgVerifyDrugs.VerifiedItemsBC.Add(oItemDetails);
        } else {
          oItemDetails.ActionPerformed.Comments =
            oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
          oCReqMsgAuthoriseDrugs.AuthorisedItemsBC.Add(oItemDetails);
        }
      } else if (
        String.Equals(oItemVM.OperationMode, 'M') ||
        String.Equals(oItemVM.OperationMode, 'TM')
      ) {
        if (
          (String.Equals(
            oItemVM.PrescriptionItemStatus,
            PrescriptionItemStatusCodes.DISCONTINUED
          ) ||
            String.Equals(
              oItemVM.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.CANCELLED
            ) ||
            String.Equals(
              oItemVM.PrescriptionItemStatus,
              PrescriptionItemStatusCodes.COMPLETED
            )) &&
          oItemVM.PrescriptionOID > 0
        ) {
          let info: IPPMAManagePrescSer.DeletedItemsInfo =
            new IPPMAManagePrescSer.DeletedItemsInfo();
          info.PrescriptionItemData =
            new IPPMAManagePrescSer.PrescriptionItemInputData();
          info.PrescriptionItemData.OID = oItemVM.PrescriptionItemOID;
          info.PrescriptionItemData.PrescriptionItemStatus =
            oItemVM.PrescriptionItemStatus;
          info.PrescriptionItemData.PrescriptionType =
            PatientContext.PrescriptionType;
          info.PrescriptionItemData.PatientOID = PatientContext.PatientOID;
          info.PrescriptionItemData.EncounterOID = PatientContext.EncounterOid;
          info.PrescriptionItemData.PrescriptionOID = oItemVM.PrescriptionOID;
          info.PrescriptionItemData.PrescriptionNumber =
            oItemVM.PrescriptionNumber;
          info.DeletedInfo = new IPPMAManagePrescSer.PrescriptionItemAction();
          info.DeletedInfo.ActionCode = oItemVM.PrescriptionItemStatus;
          info.IsPatMerged =
            PatientContext.PatientOID > 0 &&
            PatientContext.MergedPatientOID > 0 &&
            PatientContext.PatientOID != PatientContext.MergedPatientOID
              ? '1'
              : '0';
          if (oCReqMsgVerifyDrugs != null) {
            if (
              oCReqMsgVerifyDrugs.objPatientInfoBC != null &&
              (String.IsNullOrEmpty(
                oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient
              ) ||
                oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient == '0') &&
              (PatientContext.IsMergedPatient == '1' ||
                PatientContext.IsMergedPatient == '2')
            ) {
              info.IsPatMerged = '1';
            }
          }
          if (oItemVM != null && oItemVM.DiscontinueCancelReason != null) {
            info.DeletedInfo.DirectDiscontinueReason =
              oItemVM.DiscontinueCancelReason.DisplayText;
            this.sPresOIDDisSum = oItemVM.PrescriptionOID;
          }
          if (
            oItemVM != null &&
            oItemVM.FormViewerDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail != null &&
            oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail
              .oReviewAfterDetail != null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail
                .oReviewAfterDetail.ReviewOutcomeComments
            )
          ) {
            info.PrescriptionItemData.ReviewOutcomeComments =
              oItemVM.FormViewerDetails.BasicDetails.ManageReviewDetail.oReviewAfterDetail.ReviewOutcomeComments;
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.ReasonforModification !=
              null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.ReasonforModification.Value
            )
          ) {
            info.DeletedInfo.ReasonForModification =
              oItemVM.FormViewerDetails.BasicDetails.ReasonforModification.DisplayText;
          }
          if (
            oItemVM.FormViewerDetails.BasicDetails.ModificationComments !=
              null &&
            !String.IsNullOrEmpty(
              oItemVM.FormViewerDetails.BasicDetails.ModificationComments
            )
          ) {
            info.DeletedInfo.ModificationComments =
              oItemVM.FormViewerDetails.BasicDetails.ModificationComments;
          }
          if (!String.IsNullOrEmpty(oItemVM.sPatAllergyOIDs)) {
            let sPatAllergyOIDs: string[] = oItemVM.sPatAllergyOIDs.Split(',');
            info.PrescriptionItemData.PatientAllergyOID =
              new IPPMAManagePrescSer.ArrayOfString();
            for (let i: number = 0; i < sPatAllergyOIDs.length; i++) {
              info.PrescriptionItemData.PatientAllergyOID.Add(
                sPatAllergyOIDs[i]
              );
            }
          }
          info.DeletedInfo.VerifyOnBehalf =
            oItemDetails.ActionPerformed.VerifyOnBehalf;
          info.DeletedInfo.LastModifiedAt = oItemVM.LastModifiedAt;
          if (
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails != null &&
            oItemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .ItemSequenceNo > 0
          ) {
            info.PrescriptionItemData.InfusionSeqOrder =
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ItemSequenceNo;
            info.PrescriptionItemData.ParentPrescriptionItemOID =
              oItemVM.FormViewerDetails.BasicDetails.InfusionDetails.ParentPrescriptionItemOID;
          } else if (
            oItemVM.FormViewerDetails.BasicDetails.SequenceInfo != null &&
            oItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo >
              0
          ) {
            info.PrescriptionItemData.InfusionSeqOrder =
              oItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ItemSequenceNo;
            info.PrescriptionItemData.ParentPrescriptionItemOID =
              oItemVM.FormViewerDetails.BasicDetails.SequenceInfo.ParentPrescriptionItemOID;
          }
          info.PrescriptionItemData.IsInfusionInProgress =
            oItemVM.IsInfInprogress;
          if (bIsClinicalVer) oCReqMsgVerifyDrugs.DeleteDrugsBC.Add(info);
          else oCReqMsgAuthoriseDrugs.DeleteDrugsBC.Add(info);
        } else {
          let IsVerifiedcheckForSequence: boolean = false;
          oItemDetails.ActionPerformed.UpdateItemStatus =
            oItemVM.IsClinicallyVerifyEnable ? 'True' : 'False';
          if (
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenu,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (
              (oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
                oItemVM.IsClinicallyVerifyEnable) ||
              (bIsClinicalVer &&
                oItemVM.OperationMode == 'M' &&
                !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified)
            ) {
              let sStationaryCode: string = String.Empty;
              let lStatOID: number = 0;
              if (oItemVM.PrescriptionOID > 0) {
                this.sPresOIDDisSum = oItemVM.PrescriptionOID;
                oItemDetails.ActionPerformed.OnlyUpdatedColumn = 'TRUE';
                oItemDetails.ActionPerformed.ClinicallySupplyInstruction =
                  oItemVM.bIsSupplyDispensingInstructionSet
                    ? 'ADDSUPPLYINSTRUCTION'
                    : String.Empty;
                oItemDetails.ActionPerformedCode = 'CLINICALLYVERIFY';
                oItemDetails.ActionPerformed.Comments =
                  oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
                oItemDetails.PrescriptionItemStatus =
                  CConstants.CLINICALLYVERIFIED;
                if (bIsClinicalVer)
                  oCReqMsgVerifyDrugs.VerifiedItemsBC.Add(oItemDetails);
                else oCReqMsgAuthoriseDrugs.AuthorisedItemsBC.Add(oItemDetails);
                IsVerifiedcheckForSequence = true;
              } else {
                oItemDetails.ActionPerformed.OnlyUpdatedColumn = 'TRUE';
                oItemDetails.ActionPerformedCode = 'AMEND';
                oItemDetails.ActionPerformed.Comments =
                  oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
                oItemDetails.PrescriptionItemStatus =
                  CConstants.CLINICALLYVERIFIED;
                if (bIsClinicalVer)
                  oCReqMsgVerifyDrugs.VerifiedItemsBC.Add(oItemDetails);
                else oCReqMsgAuthoriseDrugs.AuthorisedItemsBC.Add(oItemDetails);
                IsVerifiedcheckForSequence = true;
              }
              if (
                !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified
              ) {
                if (
                  oItemVM.FormViewerDetails.BasicDetails.StationaryType != null
                )
                  Number.TryParse(
                    oItemVM.FormViewerDetails.BasicDetails.StationaryType.Value,
                    (o) => {
                      lStatOID = o;
                    }
                  );
                if (
                  oItemVM.FormViewerDetails.BasicDetails.StationaryType !=
                    null &&
                  oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag !=
                    null
                )
                  sStationaryCode =
                    oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag.ToString();
                oItemDetails.PrescriptionItemStatus =
                  PrescriptionHelper.GetPrescriptionItemStatus(
                    lStatOID,
                    sStationaryCode,
                    oItemVM.FormViewerDetails.BasicDetails.IsAuthorise
                  );
              }
            } else if (
              (PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration ||
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.Inpatient) &&
              oItemVM.bIsSupplyRequestedSet &&
              !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
              oItemVM.IsClinicallyVerifyEnable &&
              oItemVM.FormViewerDetails.BasicDetails.IsSetPharmPrepStatus &&
              oItemVM.FormViewerDetails.BasicDetails.PrepStatus != null &&
              !String.IsNullOrEmpty(
                oItemVM.FormViewerDetails.BasicDetails.PrepStatus.Value
              )
            ) {
              oItemDetails.ActionPerformed.OnlyUpdatedColumn =
                'SUPPLYPREPSTATUS';
              oItemDetails.ActionPerformedCode = 'CLINICALLYVERIFY';
              oItemDetails.ActionPerformed.ClinicallySupplyInstruction =
                oItemVM.bIsSupplyDispensingInstructionSet
                  ? 'ADDSUPPLYINSTRUCTION'
                  : String.Empty;
              if (bIsClinicalVer)
                oCReqMsgVerifyDrugs.VerifiedItemsBC.Add(oItemDetails);
              else oCReqMsgAuthoriseDrugs.AuthorisedItemsBC.Add(oItemDetails);
            } else if (
              !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
              oItemVM.IsClinicallyVerifyEnable &&
              oItemVM.FormViewerDetails.BasicDetails.IsSetPharmPrepStatus &&
              oItemVM.FormViewerDetails.BasicDetails.PrepStatus != null &&
              !String.IsNullOrEmpty(
                oItemVM.FormViewerDetails.BasicDetails.PrepStatus.Value
              )
            ) {
              oItemDetails.ActionPerformed.OnlyUpdatedColumn = 'PREPSTATUS';
              oItemDetails.ActionPerformedCode = 'CLINICALLYVERIFY';
              if (bIsClinicalVer)
                oCReqMsgVerifyDrugs.VerifiedItemsBC.Add(oItemDetails);
              else oCReqMsgAuthoriseDrugs.AuthorisedItemsBC.Add(oItemDetails);
            } else if (
              !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
              oItemVM.IsClinicallyVerifyEnable &&
              !String.IsNullOrEmpty(
                oItemVM.FormViewerDetails.BasicDetails.VerificationComments
              )
            ) {
              oItemDetails.ActionPerformedCode = 'NOTAUTHORISE';
              oItemDetails.ActionPerformed.Comments =
                oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
              oItemDetails.PrescriptionItemStatus = CConstants.NOTAUTHORISED;
              if (bIsClinicalVer)
                oCReqMsgVerifyDrugs.NonVerifiedItemsBC.Add(oItemDetails);
              else oCReqMsgAuthoriseDrugs.UnAuthorisedItemsBC.Add(oItemDetails);
            } else if (
              (PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration ||
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.Inpatient) &&
              oItemVM.bIsSupplyRequestedSet
            ) {
              oItemDetails.ActionPerformed.OnlyUpdatedColumn =
                'SupplyRequested';
              oItemDetails.ActionPerformedCode = 'CLINICALLYVERIFY';
              oCReqMsgVerifyDrugs.VerifiedItemsBC.Add(oItemDetails);
            } else if (oItemVM.bIsSupplyDispensingInstructionSet) {
              oItemDetails.ActionPerformed.OnlyUpdatedColumn =
                'SupplyDispensingInstruction';
              oItemDetails.ActionPerformedCode = 'CLINICALLYVERIFY';
              oItemDetails.ActionPerformed.ClinicallySupplyInstruction =
                oItemVM.bIsSupplyDispensingInstructionSet
                  ? 'ADDSUPPLYINSTRUCTION'
                  : String.Empty;
              oCReqMsgVerifyDrugs.VerifiedItemsBC.Add(oItemDetails);
            }
          } else if (
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenu,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            let arrClinical: string[] = [];
            let objClinConfig: ClinicalVerificationConfiguration =
              ProfileData.ClinicalVerifyConfig;
            if (
              objClinConfig != null &&
              objClinConfig.StationaryTypes.length > 0
            ) {
              arrClinical = objClinConfig.StationaryTypes.Split('~');
            }
            if (
              oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
              oItemVM.IsClinicallyVerifyEnable
            ) {
              oItemDetails.ActionPerformed.OnlyUpdatedColumn = 'TRUE';
              oItemDetails.PrescriptionItemStatus = CConstants.SUBMITTED;
              oItemDetails.ActionPerformed.Comments =
                oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
              oItemDetails.ActionPerformedCode = CConstants.ACTIVITY_AUTHORISE;
              if (arrClinical.length > 0) {
                for (
                  let nCount: number = 0;
                  nCount < arrClinical.length;
                  nCount++
                ) {
                  if (
                    oItemVM != null &&
                    oItemVM.FormViewerDetails.BasicDetails.StationaryType !=
                      null &&
                    !String.IsNullOrEmpty(
                      oItemVM.FormViewerDetails.BasicDetails.StationaryType
                        .Value
                    ) &&
                    String.Compare(
                      arrClinical[nCount],
                      oItemVM.FormViewerDetails.BasicDetails.StationaryType
                        .Value
                    ) == 0
                  ) {
                    oItemDetails.PrescriptionItemStatus = CConstants.SUBMITTED;
                    break;
                  } else {
                    oItemDetails.PrescriptionItemStatus =
                      CConstants.AUTOVERIFIED;
                  }
                }
                if (
                  oItemVM != null &&
                  oItemVM.FormViewerDetails.BasicDetails.StationaryType !=
                    null &&
                  !String.IsNullOrEmpty(
                    oItemVM.FormViewerDetails.BasicDetails.StationaryType.Value
                  ) &&
                  oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag !=
                    null &&
                  !oItemDetails.PrescriptionItemStatus.Equals(
                    PrescriptionItemStatusCodes.SUBMITTED
                  ) &&
                  ProfileData.ClinicalVerifyConfig != null &&
                  !String.IsNullOrEmpty(
                    ProfileData.ClinicalVerifyConfig.StationaryTypeCode
                  )
                ) {
                  let sStationaryCode: string =
                    oItemVM.FormViewerDetails.BasicDetails.StationaryType.Tag.ToString();
                  let arrClinicalCode: string[] =
                    ProfileData.ClinicalVerifyConfig.StationaryTypeCode.Split(
                      '~'
                    );
                  if (
                    arrClinicalCode.length > 0 &&
                    !String.IsNullOrEmpty(sStationaryCode)
                  ) {
                    let statCodes = arrClinicalCode
                      .Where(
                        (statOID) =>
                          String.Compare(statOID, sStationaryCode) == 0
                      )
                      .Select((statOID) => statOID);
                    if (statCodes != null && statCodes.Count() > 0) {
                      oItemDetails.PrescriptionItemStatus =
                        CConstants.SUBMITTED;
                    }
                  }
                }
              } else {
                oItemDetails.PrescriptionItemStatus = CConstants.AUTOVERIFIED;
              }
              if (bIsClinicalVer)
                oCReqMsgVerifyDrugs.VerifiedItemsBC.Add(oItemDetails);
              else oCReqMsgAuthoriseDrugs.AuthorisedItemsBC.Add(oItemDetails);
              IsVerifiedcheckForSequence = true;
            } else if (
              !oItemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified &&
              oItemVM.IsClinicallyVerifyEnable
            ) {
              if (
                !String.IsNullOrEmpty(
                  oItemVM.FormViewerDetails.BasicDetails.VerificationComments
                )
              ) {
                oItemDetails.ActionPerformed.Comments =
                  oItemVM.FormViewerDetails.BasicDetails.VerificationComments;
                oItemDetails.ActionPerformedCode =
                  CConstants.ACTIVITY_NOT_AUTHORISE;
                oItemDetails.PrescriptionItemStatus = CConstants.NOTAUTHORISED;
                if (bIsClinicalVer)
                  oCReqMsgVerifyDrugs.NonVerifiedItemsBC.Add(oItemDetails);
                else
                  oCReqMsgAuthoriseDrugs.UnAuthorisedItemsBC.Add(oItemDetails);
              }
            }
          }
          if (
            oItemDetails != null &&
            oItemDetails.BasicProperties.IsSupplyInstChanged &&
            oItemDetails.TechValidateDetails != null &&
            oItemDetails.TechValidateDetails.Count > 0 &&
            oItemDetails.TechValidateDetails[0] != null &&
            oItemDetails.TechValidateDetails[0].TechValidatedItems != null &&
            oItemDetails.TechValidateDetails[0].TechValidatedItems.Count > 0
          ) {
            oItemDetails.TechValidateDetails[0].IsMergePatient =
              PatientContext.PatientOID > 0 &&
              PatientContext.MergedPatientOID > 0 &&
              PatientContext.PatientOID != PatientContext.MergedPatientOID
                ? '1'
                : '0';
            if (
              oItemDetails.TechValidateDetails[0].IsMergePatient == '0' &&
              (PatientContext.IsMergedPatient == '1' ||
                PatientContext.IsMergedPatient == '2')
            ) {
              oItemDetails.TechValidateDetails[0].IsMergePatient = '1';
            }
            if (oItemDetails.TechValidateDetails[0].Technicalvalidateupdate) {
              if (bIsClinicalVer)
                oCReqMsgVerifyDrugs.TechnicalValidateBC.Add(
                  oItemDetails.TechValidateDetails[0]
                );
              else
                oCReqMsgAuthoriseDrugs.TechnicalValidateBC.Add(
                  oItemDetails.TechValidateDetails[0]
                );
            }
          }
          CommonSequentialHelper.SetSequenceActionCode4AmentUpdate(
            oItemVM,
            oItemDetails,
            IsVerifiedcheckForSequence
          );
        }
      }
      //});
    }
    let oDispense: IPPMAManagePrescSer.Dispensinginstructionhistory =
      new IPPMAManagePrescSer.Dispensinginstructionhistory();
    if (
      this.MedsResolve != null &&
      this.MedsResolve.Count > 0 &&
      this.MedsResolve[0] != null &&
      !this.MedsResolve[0].IsGroupHeader &&
      this.MedsResolve[0].formViewerDetails != null &&
      this.MedsResolve[0].formViewerDetails.TechvalidateCADetails != null
    ) {
      oDispense.DispensingInstruction =
        new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
      if (
        this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
          .DispensingInstruction != null
      ) {
        this.MedsResolve[0].formViewerDetails.TechvalidateCADetails.DispensingInstruction.forEach(
          (objDispInfo) => {
            if (
              !String.Equals(objDispInfo.Value, CConstants.Addtionalcomments)
            ) {
              oDispense.DispensingInstruction.Add(
                ObjectHelper.CreateObject(
                  new IPPMAManagePrescSer.ObjectInfo(),
                  {
                    Code: objDispInfo.Value,
                    Name: objDispInfo.DisplayText,
                  }
                )
              );
            }
            if (
              String.Compare(
                objDispInfo.Value,
                CConstants.Other,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            ) {
              oDispense.OtherDispensingInstruction =
                this.MedsResolve[0].formViewerDetails.TechvalidateCADetails.OtherDispensingInstruction;
            }
          }
        );
      } else {
        if (
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
            .PresTechValidatedItems != null &&
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails.PresTechValidatedItems.Length >
            0 &&
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
            .PresTechValidatedItems[0] != null &&
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
            .PresTechValidatedItems[0].formViewerDetails != null &&
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
            .PresTechValidatedItems[0].formViewerDetails.BasicDetails != null &&
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
            .PresTechValidatedItems[0].formViewerDetails.BasicDetails
            .DispensingInstruction != null
        ) {
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].formViewerDetails.BasicDetails.DispensingInstruction.forEach(
            (objDispInfo) => {
              oDispense.DispensingInstruction.Add(
                ObjectHelper.CreateObject(
                  new IPPMAManagePrescSer.ObjectInfo(),
                  {
                    Code: objDispInfo.Value,
                    Name: objDispInfo.DisplayText,
                  }
                )
              );
              if (
                String.Compare(
                  objDispInfo.Value,
                  CConstants.Other,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0
              ) {
                oDispense.OtherDispensingInstruction = objDispInfo.DisplayText;
              } else if (
                !String.IsNullOrEmpty(
                  this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
                    .PresTechValidatedItems[0].FormViewerDetails.BasicDetails
                    .OtherDispensingInstruction
                )
              ) {
                oDispense.OtherDispensingInstruction =
                  this.MedsResolve[0].formViewerDetails.TechvalidateCADetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.OtherDispensingInstruction;
              }
              if (
                String.Compare(
                  objDispInfo.Value,
                  CConstants.Addtionalcomments,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0
              ) {
                oDispense.Additionalcomments = objDispInfo.DisplayText;
              }
            }
          );
        }
      }
      oDispense.EncounterOid = PatientContext.EncounterOid;
      if (
        !String.IsNullOrEmpty(
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
            .sAdditionalcomments
        )
      ) {
        oDispense.DispensingInstruction.Add(
          ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
            Code: CConstants.Addtionalcomments,
            Name: this.MedsResolve[0].formViewerDetails.TechvalidateCADetails
              .sAdditionalcomments,
          })
        );
        oDispense.Additionalcomments =
          this.MedsResolve[0].formViewerDetails.TechvalidateCADetails.sAdditionalcomments;
      }
      if (bIsClinicalVer)
        oCReqMsgVerifyDrugs.oDispensinginstructionhistoryBC = oDispense;
    } else if (this.MedsResolve[0].IsGroupHeader) {
      if (
        this.MedsResolve != null &&
        this.MedsResolve.Count > 1 &&
        this.MedsResolve[1] != null &&
        this.MedsResolve[1].formViewerDetails != null &&
        this.MedsResolve[1].formViewerDetails.TechvalidateCADetails != null
      ) {
        oDispense.DispensingInstruction =
          new ObservableCollection<IPPMAManagePrescSer.ObjectInfo>();
        if (
          this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
            .DispensingInstruction != null
        ) {
          this.MedsResolve[1].formViewerDetails.TechvalidateCADetails.DispensingInstruction.forEach(
            (objDispInfo) => {
              if (
                !String.Equals(objDispInfo.Value, CConstants.Addtionalcomments)
              ) {
                oDispense.DispensingInstruction.Add(
                  ObjectHelper.CreateObject(
                    new IPPMAManagePrescSer.ObjectInfo(),
                    {
                      Code: objDispInfo.Value,
                      Name: objDispInfo.DisplayText,
                    }
                  )
                );
              }
              if (
                String.Compare(
                  objDispInfo.Value,
                  CConstants.Other,
                  StringComparison.InvariantCultureIgnoreCase
                ) == 0
              ) {
                oDispense.OtherDispensingInstruction =
                  this.MedsResolve[1].formViewerDetails.TechvalidateCADetails.OtherDispensingInstruction;
              }
            }
          );
        } else {
          if (
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
              .PresTechValidatedItems != null &&
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails.PresTechValidatedItems.Length >
              0 &&
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
              .PresTechValidatedItems[1] != null &&
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
              .PresTechValidatedItems[1].formViewerDetails != null &&
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
              .PresTechValidatedItems[1].formViewerDetails.BasicDetails !=
              null &&
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
              .PresTechValidatedItems[1].formViewerDetails.BasicDetails
              .DispensingInstruction != null
          ) {
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails.PresTechValidatedItems[1].formViewerDetails.BasicDetails.DispensingInstruction.forEach(
              (objDispInfo) => {
                oDispense.DispensingInstruction.Add(
                  ObjectHelper.CreateObject(
                    new IPPMAManagePrescSer.ObjectInfo(),
                    {
                      Code: objDispInfo.Value,
                      Name: objDispInfo.DisplayText,
                    }
                  )
                );
                if (
                  String.Compare(
                    objDispInfo.Value,
                    CConstants.Other,
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0
                ) {
                  oDispense.OtherDispensingInstruction =
                    objDispInfo.DisplayText;
                } else if (
                  !String.IsNullOrEmpty(
                    this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
                      .PresTechValidatedItems[1].FormViewerDetails.BasicDetails
                      .OtherDispensingInstruction
                  )
                ) {
                  oDispense.OtherDispensingInstruction =
                    this.MedsResolve[1].formViewerDetails.TechvalidateCADetails.PresTechValidatedItems[1].FormViewerDetails.BasicDetails.OtherDispensingInstruction;
                }
                if (
                  String.Compare(
                    objDispInfo.Value,
                    CConstants.Addtionalcomments,
                    StringComparison.InvariantCultureIgnoreCase
                  ) == 0
                ) {
                  oDispense.Additionalcomments = objDispInfo.DisplayText;
                }
              }
            );
          }
        }
        oDispense.EncounterOid = PatientContext.EncounterOid;
        if (
          !String.IsNullOrEmpty(
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
              .sAdditionalcomments
          )
        ) {
          oDispense.DispensingInstruction.Add(
            ObjectHelper.CreateObject(new IPPMAManagePrescSer.ObjectInfo(), {
              Code: CConstants.Addtionalcomments,
              Name: this.MedsResolve[1].formViewerDetails.TechvalidateCADetails
                .sAdditionalcomments,
            })
          );
          oDispense.Additionalcomments =
            this.MedsResolve[1].formViewerDetails.TechvalidateCADetails.sAdditionalcomments;
        }
        if (bIsClinicalVer)
          oCReqMsgVerifyDrugs.oDispensinginstructionhistoryBC = oDispense;
      }
    }
    if (
      this.MedsReconcile != null &&
      (String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0)
    ) {
      this.MedsReconcile.forEach((oVM) => {
        let oReconciledItems: IPPMAManagePrescSer.ReconciledItems =
          new IPPMAManagePrescSer.ReconciledItems();
        oReconciledItems.PrescriptionItemOID = oVM.PrescriptionItemOID;
        oReconciledItems.PrescriptionOID = oVM.PrescriptionOID;
        oReconciledItems.prescriptiontype = PatientContext.PrescriptionType;
        oReconciledItems.EncounterOID = PatientContext.EncounterOid;
        oReconciledItems.MCVersionNo = AppSessionInfo.AMCV;
        oReconciledItems.IsMerged =
          PatientContext.PatientOID > 0 &&
          PatientContext.MergedPatientOID > 0 &&
          PatientContext.PatientOID != PatientContext.MergedPatientOID
            ? '1'
            : '0';
        if (
          oCReqMsgVerifyDrugs.objPatientInfoBC != null &&
          (String.IsNullOrEmpty(
            oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient
          ) ||
            oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient == '0') &&
          (PatientContext.IsMergedPatient == '1' ||
            PatientContext.IsMergedPatient == '2')
        ) {
          oReconciledItems.IsMerged = '1';
        }
        oReconciledItems.ReconciledStatus =
          new IPPMAManagePrescSer.PrescriptionItemAction();
        if (
          PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration
        ) {
          if (
            oVM.FormViewerDetails.BasicDetails.ReasonforModification != null &&
            !String.IsNullOrEmpty(
              oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value
            )
          ) {
            oReconciledItems.ReconciledStatus.ReasonForModification =
              oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value;
            oReconciledItems.ReconciledStatus.ActionCode =
              CConstants.RECONCILEDSTOPPED;
          } else
            oReconciledItems.ReconciledStatus.ActionCode =
              CConstants.NOTRECONCILED;
          if (
            oVM.FormViewerDetails.BasicDetails.ReasonforModificationIP != null
          )
            oReconciledItems.ReconciledStatus.IPReconcileReason =
              oVM.FormViewerDetails.BasicDetails.ReasonforModificationIP;
        } else {
          if (
            oVM.FormViewerDetails.BasicDetails.ReasonforModification != null &&
            !String.IsNullOrEmpty(
              oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value
            )
          ) {
            oReconciledItems.ReconciledStatus.IPReconcileReason =
              oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value;
            oReconciledItems.ReconciledStatus.ActionCode =
              CConstants.RECONCILEDSTOPPED;
          } else
            oReconciledItems.ReconciledStatus.ActionCode =
              CConstants.NOTRECONCILED;
          if (
            oVM.FormViewerDetails.BasicDetails.ReasonforModificationDis != null
          )
            oReconciledItems.ReconciledStatus.ReasonForModification =
              oVM.FormViewerDetails.BasicDetails.ReasonforModificationDis;
        }
        if (
          PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration
        ) {
          if (!String.IsNullOrEmpty(oVM.ReconcileComments)) {
            oReconciledItems.ReconciledStatus.ReconcileComments =
              oVM.ReconcileComments;
            oReconciledItems.ReconciledStatus.ActionCode =
              CConstants.RECONCILEDSTOPPED;
          }
          if (!String.IsNullOrEmpty(oVM.ReconcilecommentsIP))
            oReconciledItems.ReconciledStatus.IPReconcileComments =
              oVM.ReconcilecommentsIP;
        } else {
          if (!String.IsNullOrEmpty(oVM.ReconcileComments)) {
            oReconciledItems.ReconciledStatus.IPReconcileComments =
              oVM.ReconcileComments;
            oReconciledItems.ReconciledStatus.ActionCode =
              CConstants.RECONCILEDSTOPPED;
          }
          if (!String.IsNullOrEmpty(oVM.ReconcilecmmentsDis))
            oReconciledItems.ReconciledStatus.ReconcileComments =
              oVM.ReconcilecmmentsDis;
        }
        if (bIsClinicalVer)
          oCReqMsgVerifyDrugs.ReconciledDrugsBC.Add(oReconciledItems);
        else oCReqMsgAuthoriseDrugs.ReconciledDrugsBC.Add(oReconciledItems);
      });
      if (this.MedsReorder != null) {
        this.MedsReorder.forEach((oVM) => {
          let oReconciledItems: IPPMAManagePrescSer.ReconciledItems =
            new IPPMAManagePrescSer.ReconciledItems();
          oReconciledItems.PrescriptionItemOID = oVM.SourcePrescriptionOid;
          oReconciledItems.PrescriptionOID = oVM.SourcePresOid;
          oReconciledItems.EncounterOID = PatientContext.EncounterOid;
          oReconciledItems.prescriptiontype = PatientContext.PrescriptionType;
          oReconciledItems.MCVersionNo = AppSessionInfo.AMCV;
          oReconciledItems.IsMerged =
            PatientContext.PatientOID > 0 &&
            PatientContext.MergedPatientOID > 0 &&
            PatientContext.PatientOID != PatientContext.MergedPatientOID
              ? '1'
              : '0';
          if (
            oCReqMsgVerifyDrugs.objPatientInfoBC != null &&
            (String.IsNullOrEmpty(
              oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient
            ) ||
              oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient == '0') &&
            (PatientContext.IsMergedPatient == '1' ||
              PatientContext.IsMergedPatient == '2')
          ) {
            oReconciledItems.IsMerged = '1';
          }
          oReconciledItems.ReconciledStatus =
            new IPPMAManagePrescSer.PrescriptionItemAction();
          oReconciledItems.ReconciledStatus.ActionCode = CConstants.RECONCILED;
          if (
            PatientContext.PrescriptionType !=
            PrescriptionTypes.ForAdministration
          ) {
            if (
              oVM.FormViewerDetails.BasicDetails.ReasonforModification !=
                null &&
              !String.IsNullOrEmpty(
                oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value
              )
            ) {
              oReconciledItems.ReconciledStatus.ReasonForModification =
                oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value;
            }
            if (
              oVM.FormViewerDetails.BasicDetails.ReasonforModificationIP != null
            )
              oReconciledItems.ReconciledStatus.IPReconcileReason =
                oVM.FormViewerDetails.BasicDetails.ReasonforModificationIP;
          } else if (
            PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration
          ) {
            if (
              oVM.FormViewerDetails.BasicDetails.ReasonforModification !=
                null &&
              !String.IsNullOrEmpty(
                oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value
              )
            ) {
              oReconciledItems.ReconciledStatus.IPReconcileReason =
                oVM.FormViewerDetails.BasicDetails.ReasonforModification.Value;
              oReconciledItems.ReconciledStatus.ReasonForModification =
                oVM.FormViewerDetails.BasicDetails.ReasonforModificationDis;
            }
            if (
              oVM.FormViewerDetails.BasicDetails.ReasonforModificationDis !=
              null
            )
              oReconciledItems.ReconciledStatus.ReasonForModification =
                oVM.FormViewerDetails.BasicDetails.ReasonforModificationDis;
          }
          if (
            PatientContext.PrescriptionType !=
            PrescriptionTypes.ForAdministration
          ) {
            if (!String.IsNullOrEmpty(oVM.ReconcileComments)) {
              oReconciledItems.ReconciledStatus.ReconcileComments =
                oVM.ReconcileComments;
            }
            if (!String.IsNullOrEmpty(oVM.ReconcilecommentsIP))
              oReconciledItems.ReconciledStatus.IPReconcileComments =
                oVM.ReconcilecommentsIP;
          } else if (
            PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration
          ) {
            if (!String.IsNullOrEmpty(oVM.ReconcileComments)) {
              oReconciledItems.ReconciledStatus.IPReconcileComments =
                oVM.ReconcileComments;
            }
            if (!String.IsNullOrEmpty(oVM.ReconcilecmmentsDis))
              oReconciledItems.ReconciledStatus.ReconcileComments =
                oVM.ReconcilecmmentsDis;
          }
          if (bIsClinicalVer)
            oCReqMsgVerifyDrugs.ReconciledDrugsBC.Add(oReconciledItems);
          else oCReqMsgAuthoriseDrugs.ReconciledDrugsBC.Add(oReconciledItems);
        });
      }
    }
    this.StationaryTYPOIDs = this.sStatTypOIDs.ToString().TrimStart(',');
    this.StationaryTYPNames = this.sStatTypNames.ToString().TrimStart(',');
    this.sStatTypOIDs = new StringBuilder(',');
    this.sStatTypNames = new StringBuilder(',');
    if (bIsClinicalVer) {
      if (oCReqMsgVerifyDrugs.DeleteDrugsBC.Count == 0)
        oCReqMsgVerifyDrugs.DeleteDrugsBC = null;
      if (oCReqMsgVerifyDrugs.ReconciledDrugsBC.Count == 0)
        oCReqMsgVerifyDrugs.ReconciledDrugsBC = null;
      if (oCReqMsgVerifyDrugs.TechnicalValidateBC.Count == 0)
        oCReqMsgVerifyDrugs.TechnicalValidateBC = null;
      if (oCReqMsgVerifyDrugs.objPatientInfoBC == null)
        oCReqMsgVerifyDrugs.objPatientInfoBC =
          new IPPMAManagePrescSer.GeneralInfo();
      oCReqMsgVerifyDrugs.objPatientInfoBC.IgnoreIfRequestExists =
        this.IgnoreIfRequestExists;
        // revisit required
      oCReqMsgVerifyDrugs.objPatientInfoBC.CACode = this.CACode=='MN_MED_VERIFY_SL_P2'?'MED_CA_CLN_VRFY_SL_P2':this.CACode;
      oCReqMsgVerifyDrugs.objPatientInfoBC.EncounterType =
        PatientContext.EncounterType;
      oCReqMsgVerifyDrugs.objPatientInfoBC.PrescriptionType =
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.CurrentCultureIgnoreCase
        ) &&
        PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
          ? PrescriptionTypes.Clerking
          : PatientContext.PrescriptionType;
      oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient =
        PatientContext.PatientOID > 0 &&
        PatientContext.MergedPatientOID > 0 &&
        PatientContext.PatientOID != PatientContext.MergedPatientOID
          ? '1'
          : '0';
      if (
        oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient == '0' &&
        (PatientContext.IsMergedPatient == '1' ||
          PatientContext.IsMergedPatient == '2')
      ) {
        oCReqMsgVerifyDrugs.objPatientInfoBC.IsMergedPatient = '1';
      }
      oCReqMsgVerifyDrugs.objPatientInfoBC.EncounterOID =
        PatientContext.EncounterOid;
      if (
        (oCReqMsgVerifyDrugs.objPatientInfoBC.PatientOID == 0 || oCReqMsgVerifyDrugs.objPatientInfoBC.PatientOID == undefined)&&
        PatientContext.PatientOID > 0
      ) {
        oCReqMsgVerifyDrugs.objPatientInfoBC.PatientOID =
          PatientContext.PatientOID;
      }
      let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      objServiceProxy.VerifyDrugCompleted = (s, e) => {
        this.objServiceProxy_VerifyDrugCompleted(s, e);
      };
      if(oCReqMsgVerifyDrugs.VerifiedItemsBC && oCReqMsgVerifyDrugs.VerifiedItemsBC.Count == 0){
        oCReqMsgVerifyDrugs.VerifiedItemsBC = {} as any;
      }
      objServiceProxy.VerifyDrugAsync(oCReqMsgVerifyDrugs);
    } else {
      if (oCReqMsgAuthoriseDrugs.DeleteDrugsBC.Count == 0)
        oCReqMsgAuthoriseDrugs.DeleteDrugsBC = null;
      if (oCReqMsgAuthoriseDrugs.ReconciledDrugsBC.Count == 0)
        oCReqMsgAuthoriseDrugs.ReconciledDrugsBC = null;
      if (oCReqMsgAuthoriseDrugs.TechnicalValidateBC.Count == 0)
        oCReqMsgAuthoriseDrugs.TechnicalValidateBC = null;
      if (oCReqMsgAuthoriseDrugs.objPatientInfoBC == null) {
        oCReqMsgAuthoriseDrugs.objPatientInfoBC =
          new IPPMAManagePrescSer.GeneralInfo();
        if (oCReqMsgVerifyDrugs != null)
          oCReqMsgVerifyDrugs.objPatientInfoBC.IgnoreIfRequestExists =
            this.IgnoreIfRequestExists;
        oCReqMsgAuthoriseDrugs.objPatientInfoBC.CACode = this.CACode;
        oCReqMsgAuthoriseDrugs.objPatientInfoBC.EncounterType =
          PatientContext.EncounterType;
        oCReqMsgAuthoriseDrugs.objPatientInfoBC.PrescriptionType =
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior ==
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
            ? PrescriptionTypes.Clerking
            : PatientContext.PrescriptionType;
        oCReqMsgAuthoriseDrugs.objPatientInfoBC.IsMergedPatient =
          PatientContext.PatientOID > 0 &&
          PatientContext.MergedPatientOID > 0 &&
          PatientContext.PatientOID != PatientContext.MergedPatientOID
            ? '1'
            : '0';
        if (
          oCReqMsgAuthoriseDrugs.objPatientInfoBC.IsMergedPatient == '0' &&
          (PatientContext.IsMergedPatient == '1' ||
            PatientContext.IsMergedPatient == '2')
        ) {
          oCReqMsgAuthoriseDrugs.objPatientInfoBC.IsMergedPatient = '1';
        }
        oCReqMsgAuthoriseDrugs.objPatientInfoBC.EncounterOID =
          PatientContext.EncounterOid;
      }
      let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      objServiceProxy.AuthoriseDrugsCompleted = (s, e) => {
        this.objServiceProxy_AuthoriseDrugsCompleted(s, e);
      };
      objServiceProxy.AuthoriseDrugsAsync(oCReqMsgAuthoriseDrugs);
    }
  }
  public async objServiceProxy_VerifyDrugCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.VerifyDrugCompletedEventArgs
  ) :Promise<void> {
    this.bFinalClose = false;
    let _ErrorID: number = 80000034;
    let _SetDIConsentStatus: boolean = false;
    
    //R/f from 2.23 
    this.SubmitDrugsDone = true;

    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:AuthoriseDrugsCompleted()';
    if (e.Error == null) {
      try {
        let oRes: IPPMAManagePrescSer.CResMsgVerifyDrug = e.Result;
        this.WizardContext['EncounterOID'] =
          PatientContext.EncounterOid.ToString();
        this.WizardContext['EncounterValueTypeCode'] =
          PatientContext.EncounterType;
        if (oRes != null) {
          if (
            oRes.oContextInformation != null &&
            oRes.oContextInformation.Errors.Count > 0 &&
            oRes.oContextInformation.Errors[0] != null &&
            (oRes.oContextInformation.Errors[0].ErrorID > 0 || oRes.oContextInformation.Errors[0].ErrorID == -1)
          ) {
            let oMsgBox: iMessageBox = new iMessageBox();
            oMsgBox.MessageBoxClose = (s, e) => {
              this.oMsgBox_MessageBoxClose(s, e);
            };
            oMsgBox.Title = 'Error - Lorenzo';
            oMsgBox.MessageButton = MessageBoxButton.OK;
            oMsgBox.IconType = MessageBoxType.Critical;
            if (oRes.oContextInformation.Errors[0].ErrorID == 900025) {
              oMsgBox.Message = Resource.MedicationErrors._900025_Msg;
            } else if (oRes.oContextInformation.Errors[0].ErrorID == 123451) {
              oMsgBox.Height = 170;
              oMsgBox.Width = 350;
              oMsgBox.Message = Resource.MedicationErrors._123451_Msg;
            } else if (oRes.oContextInformation.Errors[0].ErrorID == 123452) {
              oMsgBox.Height = 170;
              oMsgBox.Width = 350;
              oMsgBox.Message =
                Resource.MedicationErrors.CancelledEncounter1_Msg +
                Environment.NewLine +
                Resource.MedicationErrors.CancelledEncounter2_Msg;
            } else if (oRes.oContextInformation.Errors[0].ErrorID == 310015) {
              oMsgBox.Message = MedicationErrors.DaysOfWeeks_NotExist_Msg;
            } else if (oRes.oContextInformation.Errors[0].ErrorID == 30902020) {
              oMsgBox.Message = oMsgBox.Message = "** System Error ** \r\n ** Prescription not saved ** \r\n ** RE-PRESCRIBE **";
            } 
            else if(oRes.oContextInformation.Errors[0].ErrorID == 221)
              {
    
                   let oMsgBox1: iMessageBox = new iMessageBox();
                  oMsgBox1.MessageBoxClose = (s, e) => {
                    this.oMsgBox1_MessageBoxClose(s, e);
                  };
                oMsgBox1.Title = 'Error - Lorenzo';
                oMsgBox1.MessageButton = MessageBoxButton.OK;
                oMsgBox1.IconType = MessageBoxType.Critical;
                this.SubmitDrugsDone = false;
                let sErrorInfo  =oRes.oContextInformation.Errors[0].Context.ToString() ;
                var sErrortext =sErrorInfo.Value;
                let parsedObject = JSON.parse(sErrortext);
              let nUniqueRowID = parsedObject.string;
                let oDoseMissingPresItems: PrescriptionItemVM =
                this.MedsResolve.Where(
                  (item) =>
                    !String.IsNullOrEmpty(item.UniqueRowID) && item.UniqueRowID == nUniqueRowID
                ).FirstOrDefault((item) => item) as PrescriptionItemVM;
                if(oDoseMissingPresItems !=null)
                {
                  this.RowAfftedon221 = this.MedsResolve.IndexOf(oDoseMissingPresItems);
                  oMsgBox1.Message =  "There is a problem with " + oDoseMissingPresItems.FormViewerDetails.BasicDetails.IdentifyingName + ". Please select and remove it, then save the other prescribed drugs, and then re-prescribe " + oDoseMissingPresItems.FormViewerDetails.BasicDetails.IdentifyingName + " in a new session.";
                }           
                oMsgBox1.Show();
    
              }
            else if (oRes.oContextInformation.Errors[0].ErrorID == -1) {
              //PAN 215 RR DF fix
              this.SubmitDrugsDone = false;
              if (this.SubmitDrugsRetryCount == 3)
              {
                this.SubmitDrugsDone = true;
                oMsgBox.Message = "** System Error ** \r\n ** Prescription not saved ** \r\n ** RE-PRESCRIBE **";
              }
              else
              {
                this.VerifyDrugs();
              }
            } else {
              this.SubmitDrugsDone = true;
              oMsgBox.Message = oRes.oContextInformation.Errors[0].Message;
            }
            if(this.SubmitDrugsDone)
            {
              oMsgBox.Show();
            }
          } else if (
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenu,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (oRes != null) {
              let sPrescriptionOIDs: StringBuilder = new StringBuilder();
              this.MedsResolve.forEach((objProcessingItemVM) => {
                if (
                  objProcessingItemVM.FormViewerDetails != null &&
                  objProcessingItemVM.FormViewerDetails.BasicDetails != null
                ) {
                  if (
                    !String.Equals(
                      objProcessingItemVM.PrescriptionItemStatus,
                      CConstants.AWAITINGAUTHORISE,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) {
                    sPrescriptionOIDs.Append(
                      objProcessingItemVM.PrescriptionOID
                    );
                    sPrescriptionOIDs.Append(',');
                  }
                }
              });
              if (!String.IsNullOrEmpty(oRes.PrescriptionODS)) {
                sPrescriptionOIDs.Append(oRes.PrescriptionODS);
                this.WizardContext['DIS_SUM'] = oRes.PrescriptionODS;
              } else {
                this.WizardContext['DIS_SUM'] = this.sPresOIDDisSum.ToString();
              }
              let oResolveUtility: csResolveUtility = new csResolveUtility();
              let sTypeExist: string;
              sTypeExist = 'false';
              let sPresType: string = PatientContext.PrescriptionType;
              if (
                String.Equals(sPresType, 'CC_DSCHRG') &&
                (String.Equals(
                  this.WizardContext['MenuCode'],
                  'MN_MED_VERIFY_SL_P2'
                ) ||
                  String.Equals(
                    this.WizardContext['WIZ_TaskCode'],
                    'MN_MED_VERIFY_SL_P2'
                  ))
              ) {
                await oResolveUtility.DischargeSummary(
                  (o) => {
                    sTypeExist = o;
                  },
                  PatientContext.EncounterOid.ToString(),
                  PatientContext.PatientOID.ToString()
                );
              }
              this.WizardContext['TypeExist'] = sTypeExist;
              this.sPresOIDPrn = sPrescriptionOIDs.ToString();
              this.DocTemplatesPolicyType(oRes.PrescriptionODS);
              this.FlagSubmitCheck = false;
              this.bFinalClose = true;
              if (
                !String.Equals(
                  this.WizardContext['EncounterOID'],
                  PatientContext.EncounterOid.ToString()
                )
              ) {
                this.WizardContext['EncounterOID'] =
                  PatientContext.EncounterOid.ToString();
                this.WizardContext['EncounterValueTypeCode'] =
                  PatientContext.EncounterType;
              }
              if (this.CanLaunchClerkPrescription) {
                this.WizardContext['CanLaunchClerkingPrescription'] = 'true';
                _SetDIConsentStatus = true;
              } else {
                this.WizardContext['CanLaunchClerkingPrescription'] = 'false';
              }
              if (this.IsPatientHTWTUpdated) {
                this.WizardContext['IsPatientHTWTUpdated'] = '1';
              } else {
                this.WizardContext['IsPatientHTWTUpdated'] = '0';
              }
              if (
                this.CanShownDIConsentPrmpt &&
                (_SetDIConsentStatus ||
                  (ContextManager.Instance['sOrgMenucode'] != null &&
                    (String.Equals(
                      ContextManager.Instance['sOrgMenucode'].ToString(),
                      CConstants.InpatientPrescribeMenuCode,
                      StringComparison.InvariantCultureIgnoreCase
                    ) ||
                      String.Equals(
                        ContextManager.Instance['sOrgMenucode'].ToString(),
                        CConstants.ForadminPrescribeMenuCode,
                        StringComparison.InvariantCultureIgnoreCase
                      ) ||
                      String.Equals(
                        ContextManager.Instance['sOrgMenucode'].ToString(),
                        PrescriptionTypes.ForAdministration,
                        StringComparison.InvariantCultureIgnoreCase
                      ))))
              ) {
                this.WizardContext['CanShownDIConPrmptInGPCTAB'] = 'true';
              } else {
                this.WizardContext['CanShownDIConPrmptInGPCTAB'] = 'false';
              }
            } else {
              this.WizardContext['DIS_SUM'] = String.Empty;
              this.FinishCA();
            }
          } else this.FinishCA();
        } else this.FinishCA();
      } catch (ex: any) {
        this.SubmitDrugsDone = true;
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      this.SubmitDrugsDone = true;
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public ShowReviewAfter(): void {
    this.bIsReviewAlertShow = true;
    let dtCurrent: DateTime = CommonBB.GetServerDateTime();
    let GetResolveGrid: ObservableCollection<PrescriptionItemVM> =
      new ObservableCollection<PrescriptionItemVM>();
    let sListValue: string = String.Empty;
    sListValue = this.sReviewPeriodAlertItems;
    let reviewmsgBox: iMessageBox = new iMessageBox();
    reviewmsgBox.Height = 170;
    reviewmsgBox.Width = 350;
    reviewmsgBox.Title = 'LORENZO';
    let suffixMsg: string;
    if (String.Equals(CConstants.ClinicallyVerifyMenuCode, this.CACode))
      suffixMsg = Resource.prescribedrugs.ReviewAfterItemsSuffmsg;
    else suffixMsg = Resource.prescribedrugs.ReviewItemsSufmsg;
    reviewmsgBox.Message =
      Resource.prescribedrugs.ReviewAfterItemsPrefmsg +
      suffixMsg +
      ' ' +
      sListValue;
    reviewmsgBox.IconType = MessageBoxType.Exclamation;
    reviewmsgBox.MessageButton = MessageBoxButton.OK;
    reviewmsgBox.MessageBoxClose = (s,e) =>{this.reviewmsgBox_msgboxclose(s,e);}
    // ObjectHelper.stopFinishAndCancelEvent(true);
    reviewmsgBox.Show();
  }
  reviewmsgBox_msgboxclose(
    sender: Object,
    e: MessageEventArgs
  ): void {
    if(!ObjectHelper.DoubleMessageMode){
      // ObjectHelper.stopFinishAndCancelEvent(false);
    }
  }
  DocTemplatesPolicyType(sPrescripOIDs: string): void {
    let objReq: CReqMsgGetDocTemplatesPolicyType =
      new CReqMsgGetDocTemplatesPolicyType();
    objReq.DocTemplateOIDsBC = this.StationaryTYPOIDs;
    objReq.PrescriptionOIDsBC = sPrescripOIDs;
    objReq.oContextInformation = Common.FillContext();
    let oServiceProxy: ManagePrescSer.ManagePrescriptionWSSoapClient =
      new ManagePrescSer.ManagePrescriptionWSSoapClient();
    oServiceProxy.GetDocTemplatesPolicyTypeCompleted = (s, e) => {
      this.oServiceProxy_GetDocTemplatesPolicyTypeCompleted(s, e);
    };
    oServiceProxy.GetDocTemplatesPolicyTypeAsync(objReq);
  }
  public async objServiceProxy_AuthoriseDrugsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.AuthoriseDrugsCompletedEventArgs
  ):Promise<void>{
    this.bFinalClose = false;
    let _ErrorID: number = 80000034;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:IPPMABaseVM, Method:AuthoriseDrugsCompleted()';
    if (e.Error == null) {
      try {
        let oRes: IPPMAManagePrescSer.CResMsgAuthoriseDrugs = e.Result;
        this.WizardContext['EncounterOID'] =
          PatientContext.EncounterOid.ToString();
        this.WizardContext['EncounterValueTypeCode'] =
          PatientContext.EncounterType;
        if (oRes != null) {
          if (
            oRes.oContextInformation != null &&
            oRes.oContextInformation.Errors.Count > 0 &&
            oRes.oContextInformation.Errors[0] != null &&
            oRes.oContextInformation.Errors[0].ErrorID > 0
          ) {
            let oMsgBox: iMessageBox = new iMessageBox();
            oMsgBox.MessageBoxClose = (s, e) => {
              this.oMsgBox_MessageBoxClose(s, e);
            };
            oMsgBox.Title = 'Error - Lorenzo';
            oMsgBox.MessageButton = MessageBoxButton.OK;
            oMsgBox.IconType = MessageBoxType.Critical;
            if (oRes.oContextInformation.Errors[0].ErrorID == 900025) {
              oMsgBox.Message = Resource.MedicationErrors._900025_Msg;
            } else {
              oMsgBox.Message = oRes.oContextInformation.Errors[0].Message;
            }
            oMsgBox.Show();
          } else if (
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenu,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0
          ) {
            if (oRes != null) {
              this.WizardContext['DIS_SUM'] =
                this.WizardContext['PRESCRIPTIONOID'].ToString();
              let sPrescriptionOIDs: StringBuilder = new StringBuilder();
              this.MedsResolve.forEach((objProcessingItemVM) => {
                if (
                  objProcessingItemVM.FormViewerDetails != null &&
                  objProcessingItemVM.FormViewerDetails.BasicDetails != null
                ) {
                  sPrescriptionOIDs.Append(objProcessingItemVM.PrescriptionOID);
                  sPrescriptionOIDs.Append(',');
                }
              });
              if (!String.IsNullOrEmpty(oRes.PrescriptionODS)) {
                sPrescriptionOIDs.Append(oRes.PrescriptionODS);
              }
              let oResolveUtility: csResolveUtility = new csResolveUtility();
              let sTypeExist: string;
              sTypeExist = 'false';
              let sPresType: string = PatientContext.PrescriptionType;
              if (
                String.Compare(sPresType, 'CC_DSCHRG') == 0 &&
                (String.Equals(
                  this.WizardContext['MenuCode'],
                  'MN_MED_VERIFY_SL_P2'
                ) ||
                  String.Equals(
                    this.WizardContext['WIZ_TaskCode'],
                    'MN_MED_VERIFY_SL_P2'
                  ))
              ) {
                await oResolveUtility.DischargeSummary(
                  (o) => {
                    sTypeExist = o;
                  },
                  PatientContext.EncounterOid.ToString(),
                  PatientContext.PatientOID.ToString()
                );
              }
              this.WizardContext['TypeExist'] = sTypeExist;
              this.sPresOIDPrn = sPrescriptionOIDs.ToString();
              this.DocTemplatesPolicyType(oRes.PrescriptionODS);
              this.FlagSubmitCheck = false;
              this.bFinalClose = true;
              if (
                String.Compare(
                  this.WizardContext['EncounterOID'],
                  PatientContext.EncounterOid.ToString()
                ) != 0
              ) {
                this.WizardContext['EncounterOID'] =
                  PatientContext.EncounterOid.ToString();
                this.WizardContext['EncounterValueTypeCode'] =
                  PatientContext.EncounterType;
              }
            } else {
              this.WizardContext['DIS_SUM'] = String.Empty;
              this.FinishCA();
            }
          } else this.FinishCA();
        } else this.FinishCA();
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private MyHandler(sender: Object, Result: OnCheckAccessEventArgs): void {
    if (Result.AccResources != null) {
      let nCount: number = Result.AccResources.Length;
      for (let i: number = 0; i < nCount; i++) {
        switch (Result.AccResources[i]) {
          case 'MED_BUT_REODR_P2':
            UserPermissions.CanReorder = true;
            break;
          case 'MED_BUT_HLD_P2':
            UserPermissions.CanHoldUnhold = true;
            break;
          case 'MED_BUT_FAV_P2':
            UserPermissions.CanAddFavourites = true;
            break;
          case 'MED_BUT_DISCONDRG_P2':
            UserPermissions.Cancanceldiscontinuedrugs = true;
            break;
          case 'MED_BUT_DISCON_OW_P2':
            UserPermissions.CancanceldiscontinuedOwnrugs = true;
            break;
          case 'MED_BUT_AMEND_P2':
            UserPermissions.CanAmend = true;
            break;
          case 'PM_AUTH_DRG_P2':
            UserPermissions.CanAuthorise = true;
            break;
          case 'CAN_ACCESS_SEAL_LOCK':
            UserPermissions.CanAccessSealLock = true;
            break;
        }
      }
    }
  }
  //public delegate void GetProfileDataCompletedDelegate();
  public GetProfileDataCompeletedEvent: Function;
  public GetProfileData(): void {
    let profile: ProfileFactoryType = new ProfileFactoryType();
    profile.OnProfileListLoaded = (s, e) => {
      console.log(
        'GetProfileData.profile_OnProfileLoaded.. ViewDiscontinuedDrugText before...',
        this['ViewDiscontinuedDrugText']
      );
      this.profile_OnProfileLoaded(s, e);
      console.log(
        'GetProfileData.profile_OnProfileLoaded.. ViewDiscontinuedDrugText after...',
        this['ViewDiscontinuedDrugText']
      );
    };
    let lstProfileReq: List<ProfileContext> = new List<ProfileContext>();
    let objReq: ProfileContext = new ProfileContext();
    objReq.ContextCode = 'VW_MEDICONFIG';
    objReq.ProfileItemKey = 'MEDLINEDISPLAY';
    objReq.ProfileType = typeof CMedicationLineDisplayData;
    objReq.ProfileLevel = ProfileFactoryType.Level.User;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_MEDICONFIG';
    objReq.ProfileItemKey = 'MEDVIEWCONFIG';
    objReq.ProfileType = typeof MedicationViewConfigData;
    objReq.ProfileLevel = ProfileFactoryType.Level.User;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_MEDICONFIG';
    objReq.ProfileItemKey = 'PRESMETHODCONFIG';
    objReq.ProfileLevel = ProfileFactoryType.Level.User;
    objReq.ProfileType = typeof PrescribingMethodConfigData;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_MEDRESCONFIG';
    objReq.ProfileItemKey = 'MEDRESOGRID';
    objReq.ProfileType = typeof GridConfig;
    objReq.ProfileLevel = ProfileFactoryType.Level.User;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_MEDILISTCONFIG';
    objReq.ProfileItemKey = 'MEDLISTVIEW';
    objReq.ProfileType = typeof GridConfig;
    objReq.ProfileLevel = ProfileFactoryType.Level.User;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_MEDICONFIG';
    objReq.ProfileItemKey = 'CLINVERICFG';
    objReq.ProfileType = typeof ClinicalVerificationConfiguration;
    objReq.ProfileLevel = ProfileFactoryType.Level.User;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_MEDICONFIG';
    objReq.ProfileItemKey = 'INFUSIONPRESCONFIG';
    objReq.ProfileType = typeof InfusionPresConfigData;
    objReq.ProfileLevel = ProfileFactoryType.Level.User;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_MEDICONFIG';
    objReq.ProfileItemKey = 'ADDPRESCRIBINGCONFIG';
    objReq.ProfileType = typeof AddPrescribingConfigData;
    objReq.ProfileLevel = ProfileFactoryType.Level.Organisation;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'MA_ADMINSETTING';
    objReq.ProfileItemKey = 'MASLOTCHARCONFIG';
    objReq.ProfileType = typeof CSlotCharacteristicsConfig;
    objReq.ProfileLevel = ProfileFactoryType.Level.Organisation;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'MA_ADMINSETTING';
    objReq.ProfileItemKey = 'MACHARTDISPLAYCONFIG';
    objReq.ProfileType = typeof CChartDisplayConfig;
    objReq.ProfileLevel = ProfileFactoryType.Level.Organisation;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_MEDICONFIG';
    objReq.ProfileItemKey = 'PRESCONFIG';
    objReq.ProfileType = typeof PrescribingConfigData;
    objReq.ProfileLevel = ProfileFactoryType.Level.Organisation;
    lstProfileReq.Add(objReq);
    objReq = new ProfileContext();
    objReq.ContextCode = 'VW_GPCONNECTMED';
    objReq.ProfileItemKey = 'GPCONNECTMEDCA';
    objReq.ProfileType = typeof GPConnectConfiguration;
    objReq.ProfileLevel = ProfileFactoryType.Level.Organisation;
    lstProfileReq.Add(objReq);
    profile.GetProfilesData(lstProfileReq);
  }
  public MedViewConfigCompleted = new EventEmitter();
  public CV_SearchTabSelect_Completed = new EventEmitter();
  public ActionOn221_ResolveGrid = new EventEmitter();
  public RowAfftedon221 : number =-1;
  profile_OnProfileLoaded(sender: Object, Result: List<ProfileContext>): void {
    if (Result != null && Result.Count > 0) {
      let oProfileGPConfig = Result.Where(
        (c) =>
          String.Equals(
            c.ContextCode,
            'VW_GPCONNECTMED',
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          String.Equals(
            c.ProfileItemKey,
            'GPCONNECTMEDCA',
            StringComparison.CurrentCultureIgnoreCase
          )
      )
        .Select((s) => s.ProfileData)
        .FirstOrDefault();
      if (oProfileGPConfig != null) {
        ProfileData.GPConnectConfig =
          ObjectHelper.CreateType<GPConnectConfiguration>(
            oProfileGPConfig,
            GPConnectConfiguration
          );
      }
    }
    Result.forEach((oProfileContext) => {
      if (
        String.Compare(oProfileContext.ContextCode, 'VW_MEDICONFIG') == 0 &&
        String.Compare(oProfileContext.ProfileItemKey, 'MEDLINEDISPLAY') == 0
      ) {
        if (oProfileContext.ProfileData instanceof CMedicationLineDisplayData) {
          MedicationCommonProfileData.MedLineDisplay =
            ObjectHelper.CreateType<CMedicationLineDisplayData>(
              oProfileContext.ProfileData,
              CMedicationLineDisplayData
            );
        }
      } else if (
        String.Compare(oProfileContext.ContextCode, 'VW_MEDICONFIG') == 0 &&
        String.Compare(oProfileContext.ProfileItemKey, 'MEDVIEWCONFIG') == 0
      ) {
        if (oProfileContext.ProfileData instanceof MedicationViewConfigData) {
          MedicationCommonProfileData.MedViewConfig =
            ObjectHelper.CreateType<MedicationViewConfigData>(
              oProfileContext.ProfileData,
              MedicationViewConfigData
            );
        
        }
      } else if (
        String.Compare(oProfileContext.ContextCode, 'VW_MEDICONFIG') == 0 &&
        String.Compare(oProfileContext.ProfileItemKey, 'PRESMETHODCONFIG') == 0
      ) {
        if (
          oProfileContext.ProfileData instanceof PrescribingMethodConfigData
        ) {
          ProfileData.PrescribeMethodConfig =
            ObjectHelper.CreateType<PrescribingMethodConfigData>(
              oProfileContext.ProfileData,
              PrescribingMethodConfigData
            );
          if (
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode
            ) == 0 ||
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.AuthoriseMenuCode
            ) == 0
          )
            this.PopulateClinicalVerifyTabs();
          else this.PopulateTabs();
        }
      } else if (
        String.Compare(oProfileContext.ContextCode, 'VW_MEDRESCONFIG') == 0 &&
        String.Compare(oProfileContext.ProfileItemKey, 'MEDRESOGRID') == 0
      ) {
        if (oProfileContext.ProfileData instanceof GridConfig) {
          ProfileData.ResolveGridConfig = ObjectHelper.CreateType<GridConfig>(
            oProfileContext.ProfileData,
            GridConfig
          );
        }
      } else if (
        String.Compare(oProfileContext.ContextCode, 'VW_MEDILISTCONFIG') == 0 &&
        String.Compare(oProfileContext.ProfileItemKey, 'MEDLISTVIEW') == 0
      ) {
        if (oProfileContext.ProfileData instanceof GridConfig) {
          ProfileData.MedListViewGridConfig =
            ObjectHelper.CreateType<GridConfig>(
              oProfileContext.ProfileData,
              GridConfig
            );
        }
      } else if (
        String.Compare(oProfileContext.ContextCode, 'VW_MEDICONFIG') == 0 &&
        String.Compare(oProfileContext.ProfileItemKey, 'CLINVERICFG') == 0
      ) {
        if (
          oProfileContext.ProfileData instanceof
          ClinicalVerificationConfiguration
        ) {
          ProfileData.ClinicalVerifyConfig =
            ObjectHelper.CreateType<ClinicalVerificationConfiguration>(
              oProfileContext.ProfileData,
              ClinicalVerificationConfiguration
            );
        }
      } else if (
        String.Compare(oProfileContext.ContextCode, 'VW_MEDICONFIG') == 0 &&
        String.Compare(oProfileContext.ProfileItemKey, 'INFUSIONPRESCONFIG') ==
          0
      ) {
        if (oProfileContext.ProfileData instanceof InfusionPresConfigData) {
          ProfileData.InfusionPresConfig =
            ObjectHelper.CreateType<InfusionPresConfigData>(
              oProfileContext.ProfileData,
              InfusionPresConfigData
            );
          if (
            ProfileData.InfusionPresConfig != null &&
            ProfileData.InfusionPresConfig.IsEnablePrescInfus
          ) {
            PatientContext.IsINFUSIONON = true;
          } else if (ProfileData.InfusionPresConfig != null) {
            PatientContext.IsINFUSIONON = false;
          }
        }
      } else if (
        oProfileContext.ContextCode == 'VW_MEDICONFIG' &&
        oProfileContext.ProfileItemKey == 'ADDPRESCRIBINGCONFIG'
      ) {
        if (oProfileContext.ProfileData instanceof AddPrescribingConfigData) {
          ProfileData.AdditionalPrescConfig =
            ObjectHelper.CreateType<AddPrescribingConfigData>(
              oProfileContext.ProfileData,
              AddPrescribingConfigData
            );
          MedicationCommonProfileData.AddPrescribingConfig =
            ProfileData.AdditionalPrescConfig;
          if (
            ProfileData.AdditionalPrescConfig != null &&
            ProfileData.AdditionalPrescConfig.PrescribeofMCI
          )
            this.bEnableADHOCMCI = true;
          else this.bEnableADHOCMCI = false;
        }
      } else if (
        oProfileContext.ContextCode == 'MA_ADMINSETTING' &&
        oProfileContext.ProfileItemKey == 'MASLOTCHARCONFIG'
      ) {
        if (oProfileContext.ProfileData instanceof CSlotCharacteristicsConfig) {
          MedicationCommonProfileData.SlotCharacteristicsConfig =
            ObjectHelper.CreateType<CSlotCharacteristicsConfig>(
              oProfileContext.ProfileData,
              CSlotCharacteristicsConfig
            );
          if (MedicationCommonProfileData.SlotCharacteristicsConfig != null) {
            if (
              MedicationCommonProfileData.SlotCharacteristicsConfig
                .DuenessThreshold > 0
            ) {
              MedChartData.DuenessThreshold = CommonBB.ConvertHourstoMinutes(
                MedicationCommonProfileData.SlotCharacteristicsConfig
                  .DuenessThreshold
              );
            }
          }
        }
      } else if (
        oProfileContext.ContextCode == 'MA_ADMINSETTING' &&
        oProfileContext.ProfileItemKey == 'MACHARTDISPLAYCONFIG'
      ) {
        if (oProfileContext.ProfileData instanceof CChartDisplayConfig) {
          ProfileData.ChartDisplayConfig =
            ObjectHelper.CreateType<CChartDisplayConfig>(
              oProfileContext.ProfileData,
              CChartDisplayConfig
            );
          if (ProfileData.ChartDisplayConfig != null) {
            if (
              !String.IsNullOrEmpty(
                ProfileData.ChartDisplayConfig.AsRequiredSlotsColor
              )
            ) {
              MedChartData.AsRequiredSlotsColor = CommonBB.ToColor(
                ProfileData.ChartDisplayConfig.AsRequiredSlotsColor
              );
            }
            if (
              !String.IsNullOrEmpty(
                ProfileData.ChartDisplayConfig.DueSlotsColor
              )
            ) {
              MedChartData.DueSlotsColor = CommonBB.ToColor(
                ProfileData.ChartDisplayConfig.DueSlotsColor
              );
            }
            if (
              !String.IsNullOrEmpty(
                ProfileData.ChartDisplayConfig.OmittedSlotsColor
              )
            ) {
              MedChartData.OmittedSlotsColor = CommonBB.ToColor(
                ProfileData.ChartDisplayConfig.OmittedSlotsColor
              );
            }
            if (
              !String.IsNullOrEmpty(
                ProfileData.ChartDisplayConfig.OverDueSlotsColor
              )
            ) {
              MedChartData.OverDueSlotsColor = CommonBB.ToColor(
                ProfileData.ChartDisplayConfig.OverDueSlotsColor
              );
            }
            if (
              !String.IsNullOrEmpty(
                ProfileData.ChartDisplayConfig.TodayOutlineColor
              )
            ) {
              MedChartData.TodayOutlineColor = CommonBB.ToColor(
                ProfileData.ChartDisplayConfig.TodayOutlineColor
              );
            }
          }
        }
      } else if (
        String.Compare(oProfileContext.ContextCode, 'VW_MEDICONFIG') == 0 &&
        String.Compare(oProfileContext.ProfileItemKey, 'PRESCONFIG') == 0
      ) {
        if (oProfileContext.ProfileData instanceof PrescribingConfigData) {
          MedicationCommonProfileData.PrescribeConfig =
            ObjectHelper.CreateType<PrescribingConfigData>(
              oProfileContext.ProfileData,
              PrescribingConfigData
            );
        }
      }
    });
    this.MedViewConfigCompleted.emit(true);
    if (!String.IsNullOrEmpty(this.WizardContext['EncStatus'])) {
      PatientContext.EncounterStatusCode = this.WizardContext['EncStatus'];
    } else if (ContextManager.Instance['EncounterStatusCode'] != null) {
      PatientContext.EncounterStatusCode =
        ContextManager.Instance['EncounterStatusCode'].ToString();
    }
    this.BindResolveGrid();
    if (this.GetProfileDataCompeletedEvent != null) {
      this.GetProfileDataCompeletedEvent();
    }
    if (FormviewerComboValues.CompoundUOMs == null) {
      let oReqResolve: CReqMsgGetUOMTypeList = new CReqMsgGetUOMTypeList();
      oReqResolve.oContextInformation = Common.FillContext();
      oReqResolve.MCVersionNumberBC = AppSessionInfo.AMCV;
      oReqResolve.UOMTypeBC = 'compound';
      let objServiceProxy: MedicationAdministrationWSSoapClient =
        new MedicationAdministrationWSSoapClient();
      objServiceProxy.GetUOMTypeListCompleted =
        this.objServiceProxy_GetUOMTypeListCompleted;
      objServiceProxy.GetUOMTypeListAsync(oReqResolve);
    }
  }
  objServiceProxy_GetUOMTypeListCompleted(
    sender: Object,
    e: GetUOMTypeListCompletedEventArgs
  ): void {
    if (e.Result != null) {
      let objRes: CResMsgGetUOMTypeList =
        ObjectHelper.CreateType<CResMsgGetUOMTypeList>(
          e.Result,
          CResMsgGetUOMTypeList
        );
      if (
        objRes != null &&
        objRes.oUomTypeList != null &&
        objRes.oUomTypeList.Count > 0
      ) {
        let ieUOM: IEnumerable<CListItem> = objRes.oUomTypeList.Select((x) =>
          ObjectHelper.CreateObject(new CListItem(), {
            Value: x.UoMOID.ToString(),
            DisplayText: x.Name,
          })
        );
        FormviewerComboValues.CompoundUOMs =
          new ObservableCollection<CListItem>(ieUOM);
      }
    }
  }
  private _MedTabList: ObservableCollection<iTabItem>;
  public get MedTabList(): ObservableCollection<iTabItem> {
    return this._MedTabList;
  }
  public set MedTabList(value: ObservableCollection<iTabItem>) {
    this._MedTabList = value;
    //OnPropertyChanged("MedTabList");
  }
  public bIsMedTabDefault: boolean = false;
  public bIsMedTabDefaultKey: string;
  PopulateClinicalVerifyTabs(): void {
    if (PatientContext.EncounterOid > 0 && PatientContext.PatientOID > 0) {
      //let objWs: QueryCareEventsWSSoapClient = new QueryCareEventsWSSoapClient();
      let objWs: EncounterWSWSSoapClient = new EncounterWSWSSoapClient();
      let objRequest: CReqMsgGetPatientEncountersforRange =
        new CReqMsgGetPatientEncountersforRange();
      objRequest.objEncounterBC = new Encounter();
      objRequest.objEncounterBC.PatientOID =
        PatientContext.PatientOID.ToString();
      objRequest.objEncounterBC.EncounterID =
        PatientContext.EncounterOid.ToString();
      objRequest.oContextInformation = Common.FillContext();
      objWs.GetPatientEncountersforRangeCompleted = (s, e) => {
        this.objWs_GetPatientEncountersforRangeCompleted(s, e);
      };
      objWs.GetPatientEncountersforRangeAsync(objRequest);
    }
  }
  objWs_GetPatientEncountersforRangeCompleted(
    sender: Object,
    e: GetPatientEncountersforRangeCompletedEventArgs
  ): void {
    let objResponse: CResMsgGetPatientEncountersforRange = e.Result;
    if (objResponse != null && objResponse.oEncounter != null) {
      if (PatientContext.EncounterOid > 0) {
        let ContextEncounter = objResponse.oEncounter
          .Where(
            (oEnc) => oEnc.EncounterID == PatientContext.EncounterOid.ToString()
          )
          .Select((oEnc) => oEnc);
        if (ContextEncounter.Count() == 1)
          PatientContext.EncounterType =
            ContextEncounter.ElementAt(0).EncounterType;
      }
      this.PopulateTabs();
    }
  }
  //public Loadefaulttab = new EventEmitter();
  public PopulateTabs(): void {
    if (this.MedTabList == null)
      this.MedTabList = new ObservableCollection<iTabItem>();
    let sPresType: string = String.Empty;
    if (
      String.Compare(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode
      ) == 0 ||
      String.Compare(ContextInfo.MenuCode, CConstants.AuthoriseMenuCode) == 0
    ) {
      if (
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        sPresType = PrescriptionHelper.GetPrescriptionType(
          PrescriptionTypes.Clerking
        );
      }
      if (String.IsNullOrEmpty(sPresType)) {
        sPresType = PrescriptionHelper.GetPrescriptionType(
          PatientContext.PrescriptionType
        );
      }
    } else {
      sPresType = PrescriptionHelper.GetPrescriptionType(ContextInfo.MenuCode);
    }
    if (String.Compare(sPresType, 'Inpatient') == 0)
      sPresType = PrescriptionTypes.Foradministration;
    let IsPGDSupplyDischarge: boolean = false;
    let IsPGDSupplyOutpatient: boolean = false;
    let sPresMedCount: string = String.Empty;
    let sEncType: string = String.Empty;
    let sEncOID: string = String.Empty;
    let strAllPresTypes: string = String.Empty;
    if (String.IsNullOrEmpty(this.GridSelEncounterType)) {
      sEncType = PatientContext.EncounterType;
      if (!String.IsNullOrEmpty(sEncType))
        sEncType = Common.GetConceptCode(
          sEncType,
          MedicationCommonConceptCodeData.ConceptCodes
        );
      sEncOID = PatientContext.EncounterOid.ToString();
    } else {
      sEncType = this.GridSelEncounterType;
      sEncOID = this.EncounterGridObj.EncounterID;
    }
    if (
      this.ViewEncounterType != null &&
      String.Compare(
        this.GridSelEncounterType,
        this.ViewEncounterType,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 &&
      String.Compare(
        this.EncounterGridObj.EncounterID,
        this.ViewEncounterOID,
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    )
      return;
    else {
      this.ViewEncounterType = sEncType;
      this.ViewEncounterOID = sEncOID;
    }
    if (
      !String.IsNullOrEmpty(sEncType) &&
      String.Compare(ContextInfo.MenuCode, 'MN_RECORDPGDSUPLY_P2') == 0
    ) {
      switch (sEncType) {
        case 'CC_INPAT': {
          IsPGDSupplyDischarge = true;
          break;
        }
        case 'CC_OUTPAT':
        case 'CC_CONT':
        case 'CC_ACCEM':
        case 'CC_WARDATT': {
          IsPGDSupplyOutpatient = true;
          break;
        }
      }
    }
    if (
      ProfileData.PrescribeMethodConfig != null &&
      ProfileData.PrescribeMethodConfig.EncounPresConfig != null
    ) {
      if (this.MedTabList != null && this.MedTabList.Count > 0) {
        this.MedTabList.Clear();
      }
      let IsPrescribeORAmendFromChart: boolean = false;
      if (
        GlobalVariable.IsGPConnectEnabled &&
        !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
        (PatientContext.PrescriptionType.Equals(
          PrescriptionTypes.Clerking,
          StringComparison.OrdinalIgnoreCase
        ) ||
          PatientContext.PrescriptionType.Equals(
            PrescriptionTypes.Inpatient,
            StringComparison.OrdinalIgnoreCase
          ) ||
          PatientContext.PrescriptionType.Equals(
            PrescriptionTypes.Discharge,
            StringComparison.OrdinalIgnoreCase
          )) &&
        ((!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformchart) &&
          String.Equals(
            QueryStringInfo.IsLaunchformchart,
            'True',
            StringComparison.InvariantCultureIgnoreCase
          )) ||
          (!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformInfchart) &&
            String.Equals(
              QueryStringInfo.IsLaunchformInfchart,
              'True',
              StringComparison.InvariantCultureIgnoreCase
            )) ||
          (!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformMedchart) &&
            String.Equals(
              QueryStringInfo.IsLaunchformMedchart,
              'True',
              StringComparison.InvariantCultureIgnoreCase
            )) ||
          (!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformPreschart) &&
            String.Equals(
              QueryStringInfo.IsLaunchformPreschart,
              'True',
              StringComparison.InvariantCultureIgnoreCase
            )))
      ) {
        IsPrescribeORAmendFromChart = true;
      }
      if (
        ProfileData.GPConnectConfig != null &&
        !String.IsNullOrEmpty(ProfileData.GPConnectConfig.PrescriptionCodes) &&
        ProfileData.GPConnectConfig.PrescriptionCodes.length > 0
      ) {
        this.GPConnectConfigPrescTypes =
          ProfileData.GPConnectConfig.PrescriptionCodes.Split('~');
      }
      if (
        GlobalVariable.IsGPConnectEnabled &&
        !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
        this.GPConnectConfigPrescTypes != null &&
        this.GPConnectConfigPrescTypes.length > 0 &&
        this.GPConnectConfigPrescTypes.Contains(PatientContext.PrescriptionType)
      ) {
        this.MedTabList.Add(
          this.AddTabItem(
            CConstants.TABGPCONNECT,
            Resource.MedicationForm.GPConnectText,
            new GpConnectListView(),
            false,
            Resource.MedicationForm.GPConnectText
          )
        );
        this.GPSummaryViewervisible = Visibility.Visible;
      }
      let isGPConnectDefaulted: boolean = false;
      let lstEncounterPresConfigurations =
        ProfileData.PrescribeMethodConfig.EncounPresConfig.Where(
          (x) =>
            x.EncounterCode == sEncType &&
            ((PatientContext.EncounterOid.ToString() == this.ViewEncounterOID &&
              x.PrescriptionCodes != sPresType) ||
              PatientContext.EncounterOid.ToString() != this.ViewEncounterOID)
        ).Select((x) => x);
      let sDefaultRecMedsTab: string = String.Empty;
      let bIsDefaultTab: boolean = false;
      let IsDefaultTabSet: boolean = false;
      if (
        String.Compare(
          this.GridSelEncounterType,
          PatientContext.EncounterType,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 &&
        String.Compare(
          this.EncounterGridObj.EncounterID,
          PatientContext.EncounterOid.ToString(),
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.CopyAcrossPresType = String.Empty;
      }
      if (!String.IsNullOrEmpty(this.CopyAcrossPresType)) {
        sDefaultRecMedsTab = PrescriptionHelper.GetPrescriptionType(
          this.CopyAcrossPresType
        );
        this.CopyAcrossPresType = String.Empty;
      } else {
        let oTemp = ProfileData.PrescribeMethodConfig.EncounPresConfig.Where(
          (encconfig) =>
            encconfig.EncounterCode == sEncType &&
            encconfig.PrescriptionCodes == sPresType
        ).Select((encconfig) => encconfig);
        if (
          oTemp != null &&
          oTemp.Count() > 0 &&
          oTemp.First() != null &&
          !String.IsNullOrEmpty(oTemp.First().CopyAcrossPresCodes)
        ) {
          sDefaultRecMedsTab = oTemp.First().CopyAcrossPresCodes;
        }
      }
      lstEncounterPresConfigurations.forEach((oList) => {
        switch (oList.PrescriptionCodes) {
          case 'Medication clerking':
            bIsDefaultTab = this.bIsMedTabDefault =
              !isGPConnectDefaulted &&
              String.Compare(
                sDefaultRecMedsTab,
                'Medication clerking',
                StringComparison.OrdinalIgnoreCase
              ) == 0;
            let MedListView_CC_MEDCLERK1 = new MedListView();
            MedListView_CC_MEDCLERK1.constructorimpl('CC_MEDCLERK1', true);
            this.MedTabList.Add(
              this.AddTabItem(
                'CC_MEDCLERK1',
                'Clerked',
                MedListView_CC_MEDCLERK1,
                bIsDefaultTab,
                'Clerked'
              )
            );
            sPresMedCount = 'CC_MEDCLERK1';
            if(bIsDefaultTab)
            this.DefaultTabload.next('CC_MEDCLERK1');
            break;
          case 'Discharge':
            if (!IsPGDSupplyDischarge) {
              bIsDefaultTab = this.bIsMedTabDefault =
                !isGPConnectDefaulted &&
                String.Compare(
                  sDefaultRecMedsTab,
                  'Discharge',
                  StringComparison.OrdinalIgnoreCase
                ) == 0;
              let MedListView_CC_DSCHRG = new MedListView();
              MedListView_CC_DSCHRG.constructorimpl('CC_DSCHRG', true);
              this.MedTabList.Add(
                this.AddTabItem(
                  'CC_DSCHRG',
                  'Discharge',
                  MedListView_CC_DSCHRG,
                  bIsDefaultTab,
                  'Discharge'
                )
              );
              sPresMedCount = 'CC_DSCHRG';
              if(bIsDefaultTab)
                this.DefaultTabload.next('CC_DSCHRG');
            }
            break;
          case 'Patient leave':
            bIsDefaultTab = this.bIsMedTabDefault =
              !isGPConnectDefaulted &&
              String.Compare(
                sDefaultRecMedsTab,
                'Patient leave',
                StringComparison.OrdinalIgnoreCase
              ) == 0;
            let MedListView_CC_Patientleave = new MedListView();
            MedListView_CC_Patientleave.constructorimpl(
              'CC_Patientleave',
              true
            );
            this.MedTabList.Add(
              this.AddTabItem(
                'CC_Patientleave',
                'Leave',
                MedListView_CC_Patientleave,
                bIsDefaultTab,
                'Leave'
              )
            );
            sPresMedCount = 'CC_Patientleave';
            break;
          case 'Outpatient':
            if (!IsPGDSupplyOutpatient) {
              bIsDefaultTab = this.bIsMedTabDefault =
                !isGPConnectDefaulted &&
                String.Compare(
                  sDefaultRecMedsTab,
                  'Outpatient',
                  StringComparison.OrdinalIgnoreCase
                ) == 0;
              let MedListView_CC_MED_TYP_OP = new MedListView();
              MedListView_CC_MED_TYP_OP.constructorimpl('CC_MED_TYP_OP', true);
              this.MedTabList.Add(
                this.AddTabItem(
                  'CC_MED_TYP_OP',
                  'Outpatient',
                  MedListView_CC_MED_TYP_OP,
                  bIsDefaultTab,
                  'Outpatient'
                )
              );
              sPresMedCount = 'CC_MED_TYP_OP';
            }
            break;
          case PrescriptionTypes.Foradministration:
            if (!(!PatientContext.IPPMADU_P2 && PatientContext.TTOPBBDU_P2)) {
              bIsDefaultTab = this.bIsMedTabDefault =
                !isGPConnectDefaulted &&
                String.Compare(
                  sDefaultRecMedsTab,
                  PrescriptionTypes.Foradministration,
                  StringComparison.OrdinalIgnoreCase
                ) == 0;
              if (String.Compare(sEncType, 'CC_INPAT') == 0) {
                let MedListView_CC_FOR_ADMIN = new MedListView();
                MedListView_CC_FOR_ADMIN.constructorimpl('CC_FOR_ADMIN', true);
                this.MedTabList.Add(
                  this.AddTabItem(
                    'CC_FOR_ADMIN',
                    'Inpatient',
                    MedListView_CC_FOR_ADMIN,
                    bIsDefaultTab,
                    'Inpatient'
                  )
                );
                sPresMedCount = 'CC_FOR_ADMIN';
                break;
              } else {
                let MedListView_CC_FOR_ADMIN = new MedListView();
                MedListView_CC_FOR_ADMIN.constructorimpl('CC_FOR_ADMIN', true);
                this.MedTabList.Add(
                  this.AddTabItem(
                    'CC_FOR_ADMIN',
                    PrescriptionTypes.Foradministration,
                    MedListView_CC_FOR_ADMIN,
                    bIsDefaultTab,
                    PrescriptionTypes.Foradministration
                  )
                );
                sPresMedCount = 'CC_FRADMINSTN';
                if(bIsDefaultTab)
                this.DefaultTabload.next('CC_FOR_ADMIN');
                break;
              }
            }
            break;
        }
        if (bIsDefaultTab) IsDefaultTabSet = true;
        if (String.Compare(strAllPresTypes, String.Empty) == 0)
          strAllPresTypes = sPresMedCount;
        else strAllPresTypes = strAllPresTypes + ',' + sPresMedCount;
      });
      this.AllPresTypes = 'AllPresTypes';
      if (!IsDefaultTabSet && !isGPConnectDefaulted) {
        if (this.MedTabList != null && this.MedTabList.Count > 0) {
          let Defaulttabkey :string
          if (
            IsPrescribeORAmendFromChart &&
            this.MedTabList.Count > 1 &&
            this.MedTabList[1] != null
          )           
          {
            this.MedTabList[1].IsSelected = true;
            Defaulttabkey = this.MedTabList[1].Key;
          } else {
            this.MedTabList[0].IsSelected = true;
            Defaulttabkey = this.MedTabList[0].Key;
          }
        // this.Loadefaulttab.emit(Defaulttabkey);
         this.DefaultTabload.next(Defaulttabkey);
          this.bIsMedTabDefault = true;
        }
      }
    }
  }
  AddTabItem(
    Key: string,
    Header: string,
    Content: any,
    IsSelected: boolean,
    sToolTip: string
  ): iTabItem {
    let oiTabItem: iTabItem = new iTabItem();
    oiTabItem.Key = Key;
    oiTabItem.Header = Header;
    oiTabItem.Content = Content;
    oiTabItem.IsSelected = IsSelected;
    oiTabItem.ToolTip = sToolTip;
    return oiTabItem;
  }
  public prescitemOIDs: number = 0;
  public Activitycode: ActivityTypes;
  public sAllergyDetails: StringBuilder = new StringBuilder();
  public iIndex: number = 0;
  private _WindowClosed: string;
  public get WindowClosed(): string {
    return this._WindowClosed;
  }
  public set WindowClosed(value: string) {
    this._WindowClosed = value;
    //OnPropertyChanged("WindowClosed");
    this.PropertyChanged({}, {PropertyName: "WindowClosed"});
  }
  nDrugOID: ManagePrescSer.ArrayOfLong = new ManagePrescSer.ArrayOfLong();
  public Listitem: ObservableCollection<PrescriptionItemVM>;
  public GetDrugBasicSnomedcodeInfo(
    Activity: ActivityTypes,
    OIDs: number
  ): void {
    this.prescitemOIDs = OIDs;
    this.Activitycode = Activity;
    Busyindicator.SetStatusIdle('FormViewerMsgClick');
    MedicationPrescriptionHelper.GetDrugBasicInfo(
      this.getSelectedManagePrescItemOIDs(Activity, OIDs),
      (s, e) => {
        this.objService_GetDrugBasicInfoCompleted(s, e);
      }
    );
  }
  getSelectedManagePrescItemOIDs(
    key: ActivityTypes,
    OID: number
  ): ManagePrescSer.ArrayOfLong {
    let PRESCRIPTIONITEMOIDS: string = String.Empty;
    let sDrugOID: string[] = null;
    switch (key) {
      case ActivityTypes.Reconcile:
        this.MedsReconcile.forEach((oSelectedItem) => {
          PRESCRIPTIONITEMOIDS =
            PRESCRIPTIONITEMOIDS +
            oSelectedItem.PrescriptionItemOID.ToString() +
            ',';
        });
        break;
      case ActivityTypes.Reorder:
      case ActivityTypes.Amend:
        PRESCRIPTIONITEMOIDS = OID.ToString() + ',';
        break;
    }
    if (String.IsNullOrEmpty(PRESCRIPTIONITEMOIDS)) return null;
    PRESCRIPTIONITEMOIDS = PRESCRIPTIONITEMOIDS.TrimEnd(',');
    if (!String.IsNullOrEmpty(PRESCRIPTIONITEMOIDS))
      sDrugOID = PRESCRIPTIONITEMOIDS.Split(',');
    if (sDrugOID.length > 0) {
      let nValidOID: number = 0;
      this.nDrugOID.Clear();
      sDrugOID.forEach((sOID) => {
        Number.TryParse(sOID, (o) => {
          nValidOID = o;
        });
        if (!this.nDrugOID.Contains(nValidOID)) this.nDrugOID.Add(nValidOID);
      });
    }
    return this.nDrugOID;
  }
  objService_GetDrugBasicInfoCompleted(
    sender: Object,
    e: GetDrugBasicInfoCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000049;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUi.dll, Class:IPPMABaseVM, Method:objService_GetDrugBasicInfoCompleted()';
    let objResponse: CResMsgGetDrugBasicInfo = e.Result;
    if (objResponse != null && e.Error == null) {
      try {
        if (objResponse.ItemDetail != null) {
          for (
            let nCnt: number = 0;
            nCnt < objResponse.ItemDetail.Count;
            nCnt++
          ) {
            switch (this.Activitycode) {
              case ActivityTypes.Reconcile:
                for(let i=0; i< this.MedsReconcile.Count; i++ ){
                  let oSelectedItem : PrescriptionItemVM = this.MedsReconcile[i];              
                  if (
                    objResponse.ItemDetail[nCnt].OID ==
                    oSelectedItem.PrescriptionItemOID
                  ) {
                    oSelectedItem.SNOMEDCode =
                      objResponse.ItemDetail[nCnt].SNOMEDCode;
                    oSelectedItem.SNOMEDTerm = MedicationCommonBB.GetSnomedTerm(
                      oSelectedItem.SNOMEDCode
                    );
                    break;
                  }
                }
                break;
              case ActivityTypes.Reorder:
                let oQuery = this.MedsClerked.Where(
                  (s) => s.PrescriptionItemOID == this.prescitemOIDs
                ).Select((s) => s);
                if (oQuery != null && oQuery.Count() > 0) {
                  oQuery.forEach((oSelectedItem) => {
                    oSelectedItem.SNOMEDCode =
                      objResponse.ItemDetail[nCnt].SNOMEDCode;
                    oSelectedItem.SNOMEDTerm = MedicationCommonBB.GetSnomedTerm(
                      oSelectedItem.SNOMEDCode
                    );
                  });
                }
                break;
              case ActivityTypes.Amend:
                let oQueryID = this.MedsResolve.Where(
                  (s) => s.PrescriptionItemOID == this.prescitemOIDs
                ).Select((s) => s);
                if (oQueryID != null && oQueryID.Count() > 0) {
                  oQueryID.forEach((oSelectedItem) => {
                    oSelectedItem.SNOMEDCode =
                      objResponse.ItemDetail[nCnt].SNOMEDCode;
                    oSelectedItem.SNOMEDTerm = MedicationCommonBB.GetSnomedTerm(
                      oSelectedItem.SNOMEDCode
                    );
                  });
                }
                break;
            }
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public iMessage: boolean = false;
  public LaunchRecordallergy(
    Grddata: ObservableCollection<PrescriptionItemVM>,
    Message: boolean
  ): void {
    //RR Amend link PresChart
    this.IsAmendFromPresChartAllergyPop = true;
    this.Listitem = Grddata;
    this.iMessage = Message;
    this.sAllergyDetails.Clear();
    this.iIndex = 0;
    //Not Required for LHS. To be Re-Visited.
    this.PropertyChanged = (s, e) => { this.obj_PropertyChanged(s, e); };
    this.sAllergyDetails.Append(
      'PrescriptionItemOID=' + Grddata[this.iIndex].PrescriptionItemOID + '~'
    );
    let SNOMEDTerm: string = MedicationCommonBB.GetSnomedTerm(
      Grddata[this.iIndex].SNOMEDCode
    );
    let SNOMEDCode: string = Grddata[this.iIndex].SNOMEDCode;
    let AllergyType = 'CC_ALGDA';
    let sArgs =
      '&AllergenText=' +
      SNOMEDTerm +
      '&ALLERGYTYPE=' +
      AllergyType +
      '&AllergenCode=' +
      SNOMEDCode +
      '&MenuCodeForAllergy=MN_RECALRGY';
    this.iIndex++;
    //Not Required for LHS. To be Re-Visited.
    //App.LaunchWizard(this.OnChildWizardClose, "MN_HI_RECALRGY", sArgs);
    AppLoadService.LaunchWizard(this.OnChildWizardClose, "MN_HI_RECALRGY", sArgs);
  }
  obj_PropertyChanged(sender: Object, e: PropertyChangedEventArgs): void {
    if (e.PropertyName == 'WindowClosed') {
      if (this.sAllergyDetails.Length > 0) {
        let sAllergyDetails: string[] = this.sAllergyDetails
          .ToString()
          .Split('~');
        if (sAllergyDetails.length == 2) {
          let PrescriptionItemOID: string[] = sAllergyDetails[0].Split('=');
          let AllergyID: string[] = sAllergyDetails[1].Split('=');
          if (PrescriptionItemOID.length == 2 && AllergyID.length == 2) {
            for (
              let nRowIndex = 0;
              nRowIndex < this.Listitem.Count;
              nRowIndex++
            ) {
              if (
                PrescriptionItemOID[1] ==
                this.Listitem[nRowIndex].PrescriptionItemOID.ToString()
              ) {
                this.Listitem[nRowIndex].sAllergyIDs = AllergyID[1];
                break;
              }
            }
          }
        }
        if (
          this.objNewItemVM != null &&
          this.WizardContext['RecAllergy'] == 'True'
        ) {
          this.objNewItemVM.AllergenCheck = false;
          this.objNewItemVM.GenerateConflictsForInpatient(this.MedsResolve);
        }
      }
    }
  }
  public RecAllergy: string = 'False';
  public OnChildWizardClose = (args: ChildWizardCloseEventargs): void => {
    if (this.oGrdCols != null) {
      //RR Amend link PresChart
      this.IsAmendFromPresChartAllergyPop=false;
      let sAllergyID: string = String.Empty;
      let Wizardaction: string = String.Empty;
      MedicationPrescriptionHelper.GetWizardData(
        args.ContextData,
        (o1) => {
          sAllergyID = o1;
        },
        (o2) => {
          Wizardaction = o2;
        }
      );
      this.sAllergyDetails.Append('sAllergyIDs=' + sAllergyID);
      if (!String.IsNullOrEmpty(sAllergyID)) {
        this.WizardContext['RecAllergy'] = 'True';
      }
      this.WindowClosed = sAllergyID;
      if (!String.IsNullOrEmpty(sAllergyID)) {
        this.RecAllergy = 'True';
      }
      this.sAllergyDetails.Clear();
      if (this.iIndex < this.oGrdCols.Count) {
        this.sAllergyDetails.Append(
          'PrescriptionItemOID=' +
            this.oGrdCols[this.iIndex].PrescriptionItemOID +
            '~'
        );
        let SNOMEDTerm: string = MedicationCommonBB.GetSnomedTerm(
          this.oGrdCols[this.iIndex].SNOMEDCode
        );
        let SNOMEDCode: string = this.oGrdCols[this.iIndex].SNOMEDCode;
        let AllergyType = 'CC_ALGDA';
        let sArgs =
          '&AllergenText=' +
          SNOMEDTerm +
          '&ALLERGYTYPE=' +
          AllergyType +
          '&AllergenCode=' +
          SNOMEDCode +
          '&MenuCodeForAllergy=MN_RECALRGY';
        this.iIndex++;
        //Not Required for LHS. To be Re-Visited.
        //App.LaunchWizard(this.OnChildWizardClose, "MN_HI_RECALRGY", sArgs);
        AppLoadService.LaunchWizard(this.OnChildWizardClose, "MN_HI_RECALRGY", sArgs);
      } else {
        this.WizardContext['RecAllergy'] = this.RecAllergy;
        if (!this.iMessage && (this.IsFinishNow || this.IsFinish))
          this.ModifiedPatientPrescription();
      }
    }
  }
  public static CloneObjects(origin: any, destination: any): void {
    Object.keys(origin).forEach(prop => {
      destination[prop] = origin[prop];
    })
  }
  //Not Required for LHS. To be Re-Visited.
  /*
    public static CloneObjects(origin: any, destination: any): void {
        if (origin == null || destination == null)
            return
        if ((String.Compare(origin.GetType().Name, destination.GetType().Name) == 0 && origin.GetType() == destination.GetType()) && origin instanceof Collections.IEnumerable && destination instanceof Collections.IEnumerable) {
            if (origin.GetType().GetInterface("IList", false) != null && destination.GetType().GetInterface("IList", false) != null) {
                let listObject: List = <List>destination;
                if (listObject != null) {
                    <List>origin.forEach((item) => {
                        let o: Object = Activator.CreateInstance(listObject.GetType().GetGenericArguments()[0]);
                        IPPMABaseVM.CloneObjects(item, o);
                        listObject.Add(o);
                    });
                }
            }
        }
        else {
            destination.GetType().GetProperties().forEach((destinationProperty) => {
                if (origin != null && destinationProperty.CanWrite) {
                    origin.GetType().GetProperties().forEach((originProperty) => {
                        if (destinationProperty.CanWrite && originProperty.CanRead && (String.Compare(originProperty.Name, destinationProperty.Name) == 0 && originProperty.PropertyType == destinationProperty.PropertyType)) {
                            destinationProperty.SetValue(destination, originProperty.GetValue(origin, null), null);
                        }
                        else if (destinationProperty.CanWrite && originProperty.CanRead && (String.Compare(originProperty.Name, destinationProperty.Name) == 0 && originProperty.PropertyType != destinationProperty.PropertyType)) {
                            let oriTemp: Object = originProperty.GetValue(origin, null);
                            let desTemp: Object = destinationProperty.GetValue(destination, null);
                            if (oriTemp == null)
                                continue;
                            else if (desTemp == null && oriTemp instanceof IEnumerable) {
                                if (destinationProperty.PropertyType.GetElementType() != null) {
                                    let arr: Array<any> = Array.CreateInstance(destinationProperty.PropertyType.GetElementType(),
                                        <number>oriTemp.GetType().GetProperty("Count").GetValue(oriTemp, null));
                                    let i: number = 0;
                                    (ObjectHelper.CreateType<IEnumerable>(oriTemp, IEnumerable)).forEach((o) => {
                                        let newDes: Object = Activator.CreateInstance(destinationProperty.PropertyType.GetElementType());
                                        IPPMABaseVM.CloneObjects(o, newDes);
                                        arr.SetValue(newDes, i);
                                        i++;
                                    });
                                    destinationProperty.SetValue(destination, arr, null);
                                    continue;
                                }
                            }
                            else if (desTemp == null) {
                                destinationProperty.SetValue(destination, Activator.CreateInstance(destinationProperty.PropertyType), null);
                                IPPMABaseVM.CloneObjects(originProperty.GetValue(origin, null), destinationProperty.GetValue(destination, null));
                            }
                            else if (desTemp.GetType().IsArray && oriTemp instanceof IEnumerable) {
                                let arr: Array<any> = Array<any>.CreateInstance(destinationProperty.PropertyType.GetElementType(),
                                    <number>oriTemp.GetType().GetProperty("Count").GetValue(oriTemp, null));
                                let i: number = 0;
                                (ObjectHelper.CreateType<IEnumerable>(oriTemp, IEnumerable)).forEach((o) => {
                                    let newDes: Object = Activator.CreateInstance(destinationProperty.PropertyType.GetElementType());
                                    IPPMABaseVM.CloneObjects(o, newDes);
                                    arr.SetValue(newDes, i);
                                    i++;
                                });
                                destinationProperty.SetValue(destination, arr, null);
                                continue;
                            }
                        }
                    });
                }
            });
        }
    }
    */
  public DialogHeight: number;
  public objORSPresItmCollection: ObservableCollection<PrescriptionItemVM> =
    new ObservableCollection<PrescriptionItemVM>();
  public OrdersetStat: CListItem = null;
  public CallOrderSetSequence(sequence?: number): void;
  public CallOrderSetSequence(
    objPresItmCollectiontemp?:
      | ObservableCollection<PrescriptionItemVM>
      | number,
    sequence?: number
  ): void;
  public CallOrderSetSequence(
    objPresItmCollectiontemp?:
      | ObservableCollection<PrescriptionItemVM>
      | number,
    sequence?: number
  ): void {
    switch (arguments.length) {
      case 1:
        sequence = <number>objPresItmCollectiontemp;
        if (
          this.objORSPresItmCollection != null &&
          this.objORSPresItmCollection.Count > 0 &&
          sequence <= this.objORSPresItmCollection.Count
        ) {
          if (
            this.MedsResolve != null &&
            ((this.MedsResolve.Count > 0 &&
              !this.MedsResolve[0].IsOrderSetHeader) ||
              this.MedsResolve.Count == 0)
          ) {
            this.objORSPresItmCollection[0].IsOrderSetLastItem = true;
          }
          if (this.objORSPresItmCollection.Count > sequence) {
            this.objORSPresItmCollection[sequence].ParentbaseVM = this;
            this.ResolveforOrderSets(this.objORSPresItmCollection[sequence]);
          } else {
            Busyindicator.SetStatusIdle('OrderSetPrescribe1');
            Busyindicator.SetStatusIdle('OrderSetPrescribe');
            Busyindicator.SetStatusIdle('OrderSetPrescribe');
            Busyindicator.SetStatusIdle('FormViewer');
            Busyindicator.SetStatusIdle('PrescribeProductOption');
            Busyindicator.SetStatusIdle('Favourites');
            Busyindicator.SetStatusIdle('IndicationreqForm');
            Busyindicator.SetStatusIdle('Orderset');
            Busyindicator.SetStatusIdle('FormViewerClick');
            Busyindicator.SetStatusIdle('FormViewer');
          }
          if(this.objORSPresItmCollection.Count-1 == sequence)
          {
            Busyindicator.SetStatusIdle('OrderSetPrescribe1');
          }
        } else {
          Busyindicator.SetStatusIdle('OrderSetPrescribe');
          Busyindicator.SetStatusIdle('OrderSetPrescribe1');
          Busyindicator.SetStatusIdle('FormViewerClick');
          Busyindicator.SetStatusIdle('FormViewer');
          Busyindicator.SetStatusIdle('Favourites');
        }
        break;
      case 2:
        let objPresItmCollection: ObservableCollection<PrescriptionItemVM>;
        objPresItmCollection = <ObservableCollection<PrescriptionItemVM>>(
          objPresItmCollectiontemp
        );
        this.AddtoResolutionGriddone = true;
        if (
          this.MedsResolve != null &&
          ((this.MedsResolve.Count > 0 &&
            !this.MedsResolve[0].IsOrderSetHeader) ||
            this.MedsResolve.Count == 0)
        ) {
          objPresItmCollection[0].IsOrderSetLastItem = true;
        }
        this.objORSPresItmCollection = objPresItmCollection;
        if (objPresItmCollection.Count > sequence) {
          objPresItmCollection[sequence].ParentbaseVM = this;
          this.ResolveforOrderSets(objPresItmCollection[sequence]);
        }
        break;
    }
  }
  public objRePresItmCollection: ObservableCollection<PrescriptionItemVM> =
    new ObservableCollection<PrescriptionItemVM>();
  public CallRePresSequence(sequence?: number): void;
  public CallRePresSequence(
    objPresItmCollectiontemp?:
      | ObservableCollection<PrescriptionItemVM>
      | number,
    sequence?: number
  ): void;
  public CallRePresSequence(
    objPresItmCollectiontemp?:
      | ObservableCollection<PrescriptionItemVM>
      | number,
    sequence?: number
  ): void {
    switch (arguments.length) {
      case 1:
        sequence = <number>objPresItmCollectiontemp;
        if (
          this.objRePresItmCollection != null &&
          this.objRePresItmCollection.Count > 0
        ) {
          if (this.objRePresItmCollection.Count > sequence) {
            this.objRePresItmCollection[sequence].ParentbaseVM = this;
            this.ResolveforReprescribe(this.objRePresItmCollection[sequence]);
          } else {
            this.objRePresItmCollection =
              new ObservableCollection<PrescriptionItemVM>();
            this.objProcessingItemVM = null;
            Busyindicator.SetStatusIdle('Represribce');
          }
        } else {
          this.objRePresItmCollection =
            new ObservableCollection<PrescriptionItemVM>();
          this.objProcessingItemVM = null;
          Busyindicator.SetStatusIdle('Represribce');
        }
        break;
      case 2:
        let objPresItmCollection: ObservableCollection<PrescriptionItemVM>;
        objPresItmCollection = <ObservableCollection<PrescriptionItemVM>>(
          objPresItmCollectiontemp
        );
        this.AddtoResolutionGriddone = true;
        this.objRePresItmCollection = objPresItmCollection;
        if (objPresItmCollection.Count > sequence) {
          objPresItmCollection[sequence].ParentbaseVM = this;
          this.ResolveforReprescribe(objPresItmCollection[sequence]);
        }
        break;
    }
  }
  public RemoveDSTFlag(startTime: DateTime): DateTime {
    let isDSTDate: boolean = startTime
      .ToUserDateTimeString(CConstants.DateHMFormat)
      .Contains('DST');
    if (isDSTDate) {
      let DSTOffsetInMinutes: number =
        TimeZoneInfo.Local.GetUtcOffset(startTime.ToLocalTime()).TotalMinutes -
        TimeZoneInfo.Local.BaseUtcOffset.TotalMinutes;
      startTime = startTime
        .ToUniversalTime()
        .AddMinutes(DSTOffsetInMinutes)
        .ToLocalTime();
    }
    return startTime;
  }
  public AddtoResolutionGriddone: boolean = false;
  public ResolveforOrderSets(objPrescriptionItem: PrescriptionItemVM): void {
    let objDrugItemInputData: DrugItemInputData;
    Busyindicator.SetStatusBusy('OrderSetPrescribe');
    this.AddtoResolutionGriddone = false;
    if (
      objPrescriptionItem != null &&
      objPrescriptionItem.FormViewerDetails != null &&
      objPrescriptionItem.FormViewerDetails.BasicDetails != null
    ) {
      objDrugItemInputData = new DrugItemInputData();
      objDrugItemInputData.IdentifyingName =
        objPrescriptionItem.FormViewerDetails.BasicDetails.IdentifyingName;
      objDrugItemInputData.IdentifyingOID =
        objPrescriptionItem.FormViewerDetails.BasicDetails.IdentifyingOID;
      objDrugItemInputData.IdentifyingType =
        objPrescriptionItem.FormViewerDetails.BasicDetails.IdentifyingType;
      objDrugItemInputData.MCVersionNo = AppSessionInfo.AMCV;
      objDrugItemInputData.IsFormulary = true;
      objDrugItemInputData.FavouritesDetailOID = 0;
      objDrugItemInputData.ItemType = objPrescriptionItem.ItemMainType;
      objDrugItemInputData.ITMSUBTYP = objPrescriptionItem.ItemSubType;
      objDrugItemInputData.LorenzoID = objPrescriptionItem.LorenzoID;
      objDrugItemInputData.FormularyNote = String.Empty;
      if (objPrescriptionItem.ordersetItem != null) {
        let IsUpdateStartEndForOrderSetSV: boolean = false;
        if (
          DateTime.NotEquals(objPrescriptionItem.ordersetItem.StartDTTM, DateTime.MinValue) &&
          DateTime.NotEquals(objPrescriptionItem.FormViewerDetails.BasicDetails.StartDTTM,
            objPrescriptionItem.ordersetItem.StartDTTM) &&
          objPrescriptionItem.FormViewerDetails.BasicDetails.DoseType != null &&
          !String.IsNullOrEmpty(
            objPrescriptionItem.FormViewerDetails.BasicDetails.DoseType.Value
          ) &&
          String.Equals(
            objPrescriptionItem.FormViewerDetails.BasicDetails.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          IsUpdateStartEndForOrderSetSV = true;
        }
        let IsSequenceSubsequentItem: boolean = false;
        if (
          objPrescriptionItem.FormViewerDetails.BasicDetails.Ordersets !=
            null &&
          objPrescriptionItem.OsInstance != null &&
          objPrescriptionItem.OsInstance.OsIsSequential &&
          objPrescriptionItem.FormViewerDetails.BasicDetails.OrdersetSequence ==
            null
        ) {
          objPrescriptionItem.FormViewerDetails.BasicDetails.OrdersetSequence =
            new OrderSetSequenceDetail();
          if (
            !String.IsNullOrEmpty(
              objPrescriptionItem.FormViewerDetails.BasicDetails.Ordersets.Value
            )
          ) {
            objPrescriptionItem.FormViewerDetails.BasicDetails.OrdersetSequence.OrderSetGropID =
              objPrescriptionItem.FormViewerDetails.BasicDetails.Ordersets.Value;
          }
          if (
            !String.IsNullOrEmpty(
              objPrescriptionItem.FormViewerDetails.BasicDetails
                .OrdersetSequence.OrderSetGropID
            ) &&
            objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionType !=
              null &&
            !String.IsNullOrEmpty(
              objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionType
                .Value
            ) &&
            !objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionType.Value.Equals(
              InfusionTypeCode.INTERMITTENT
            ) &&
            objPrescriptionItem.FormViewerDetails.BasicDetails
              .InfusionDetails != null &&
            objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionDetails
              .GroupSequenceNo == 0
          ) {
            objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionDetails.GroupSequenceNo =
              CSequentialHelper.GetSequenceGroupNo4Orderset(
                this.MedsResolve,
                objPrescriptionItem.FormViewerDetails.BasicDetails
                  .OrdersetSequence.OrderSetGropID
              );
            if (
              objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionDetails
                .GroupSequenceNo > 0
            ) {
              IsSequenceSubsequentItem = true;
              objPrescriptionItem.FormViewerDetails.BasicDetails.IsEnableStartdtSeq =
                false;
            }
          } else {
            objPrescriptionItem.FormViewerDetails.BasicDetails.SequenceInfo =
              new SequenceDetail();
            objPrescriptionItem.FormViewerDetails.BasicDetails.SequenceInfo.GroupSequenceNo =
              CommonSequentialHelper.GetSequenceGroupNo4Orderset(
                this.MedsResolve,
                objPrescriptionItem.FormViewerDetails.BasicDetails
                  .OrdersetSequence.OrderSetGropID
              );
            if (
              objPrescriptionItem.FormViewerDetails.BasicDetails.SequenceInfo
                .GroupSequenceNo > 0
            ) {
              IsSequenceSubsequentItem = true;
              objPrescriptionItem.FormViewerDetails.BasicDetails.IsenableStartdate =
                false;
              objPrescriptionItem.FormViewerDetails.BasicDetails.IsEnableStartTime =
                false;
            }
          }
          objPrescriptionItem.FormViewerDetails.BasicDetails.ReviewAfterVisible =
            Visibility.Collapsed;
        }
        if (
          objPrescriptionItem.FormViewerDetails.BasicDetails != null &&
          objPrescriptionItem.FormViewerDetails.BasicDetails.OrdersetSequence !=
            null
        ) {
          let dtNextSeqStartDTTM: DateTime = DateTime.MinValue;
          if (
            objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionType !=
              null &&
            !String.IsNullOrEmpty(
              objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionType
                .Value
            ) &&
            !objPrescriptionItem.FormViewerDetails.BasicDetails.InfusionType.Value.Equals(
              InfusionTypeCode.INTERMITTENT
            ) &&
            objPrescriptionItem.FormViewerDetails.BasicDetails
              .InfusionDetails != null
          ) {
            dtNextSeqStartDTTM =
              CSequentialHelper.GetStartDTTM4OrdersetNextItem(
                this.MedsResolve,
                objPrescriptionItem.FormViewerDetails.BasicDetails
                  .OrdersetSequence.OrderSetGropID,
                0,
                0
              );
          } else {
            dtNextSeqStartDTTM =
              CommonSequentialHelper.GetStartDTTM4OrdersetNextItem(
                this.MedsResolve,
                objPrescriptionItem.FormViewerDetails.BasicDetails
                  .OrdersetSequence.OrderSetGropID,
                0,
                0
              );
          }
          if (IsSequenceSubsequentItem) {
            objPrescriptionItem.ordersetItem.StartDTTM = dtNextSeqStartDTTM;
            objPrescriptionItem.ordersetItem.StartPrescriptionTime =
              dtNextSeqStartDTTM;
          } else if (
            DateTime.Equals(objPrescriptionItem.ordersetItem.StartDTTM, DateTime.MinValue)
          ) {
            let currDateTime: DateTime = CommonBB.GetServerDateTime();
            objPrescriptionItem.ordersetItem.StartDTTM = currDateTime;
            objPrescriptionItem.ordersetItem.StartPrescriptionTime =
              currDateTime;
          }
        }
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Clerking,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          objPrescriptionItem.FormViewerDetails.BasicDetails.Completedate =
            true;
          objPrescriptionItem.FormViewerDetails.BasicDetails.CompleteStartDTTM =
            objPrescriptionItem.ordersetItem.StartDTTM.Date;
          objPrescriptionItem.FormViewerDetails.BasicDetails.StartDTTM =
            objPrescriptionItem.ordersetItem.StartDTTM.Date;
          objPrescriptionItem.FormViewerDetails.BasicDetails.StartPrescriptionTime =
            objPrescriptionItem.ordersetItem.StartDTTM.Date;
          if (IsUpdateStartEndForOrderSetSV) {
            objPrescriptionItem.FormViewerDetails.BasicDetails.UpdateStartEndDateForNonInPatSteppedDose(
              false
            );
          }
        } else {
          if (
            !(
              objPrescriptionItem.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
                'S'
              ) ||
              objPrescriptionItem.FormViewerDetails.BasicDetails.FollowUpOrStat.Equals(
                'F'
              )
            )
          ) {
            objPrescriptionItem.FormViewerDetails.BasicDetails.StartDTTM =
              objPrescriptionItem.ordersetItem.StartDateTime;
            objPrescriptionItem.FormViewerDetails.BasicDetails.StartPrescriptionTime =
              this.RemoveDSTFlag(
                objPrescriptionItem.ordersetItem.StartDateTime
              );
          }
          if (IsUpdateStartEndForOrderSetSV) {
            objPrescriptionItem.FormViewerDetails.BasicDetails.UpdateStartEndDateForInPatSteppedDose(
              false,
              false,
              false
            );
          }
        }
      }
      if (
        objPrescriptionItem.FormViewerDetails.BasicDetails.FollowUpOrStat !=
        '\0' && objPrescriptionItem.FormViewerDetails.BasicDetails.FollowUpOrStat != ''
      ) {
        this.OrdersetStat = new CListItem();
        this.OrdersetStat =
          objPrescriptionItem.FormViewerDetails.BasicDetails.Ordersets;
        objPrescriptionItem.FormViewerDetails.BasicDetails.FollowUpOrStat =
          '\0';
        this.PrescribeNewItem(objDrugItemInputData);
      } else {
        if (objPrescriptionItem.PrescriptionItemOID == 0) {
          this.PrescribeNewItem(objDrugItemInputData, objPrescriptionItem);
        } else {
          this.PrescribeExistingItem(
            objPrescriptionItem,
            ActivityTypes.Reorder
          );
        }
      }
    }
  }
  public ResolveforReprescribe(objPrescriptionItem: PrescriptionItemVM): void {
    let objDrugItemInputData: DrugItemInputData;
    this.AddtoResolutionGriddone = false;
    if (
      objPrescriptionItem != null &&
      objPrescriptionItem.FormViewerDetails != null &&
      objPrescriptionItem.FormViewerDetails.BasicDetails != null
    ) {
      objDrugItemInputData = new DrugItemInputData();
      objDrugItemInputData.IdentifyingName =
        objPrescriptionItem.FormViewerDetails.BasicDetails.IdentifyingName;
      objDrugItemInputData.IdentifyingOID =
        objPrescriptionItem.FormViewerDetails.BasicDetails.IdentifyingOID;
      objDrugItemInputData.IdentifyingType =
        objPrescriptionItem.FormViewerDetails.BasicDetails.IdentifyingType;
      objDrugItemInputData.MCVersionNo = AppSessionInfo.AMCV;
      objDrugItemInputData.IsFormulary = true;
      objDrugItemInputData.FavouritesDetailOID = 0;
      objDrugItemInputData.ItemType = objPrescriptionItem.ItemMainType;
      objDrugItemInputData.ITMSUBTYP = objPrescriptionItem.ItemSubType;
      objDrugItemInputData.LorenzoID = objPrescriptionItem.LorenzoID;
      objDrugItemInputData.FormularyNote = String.Empty;
      if (
        objPrescriptionItem.FormViewerDetails.BasicDetails.FollowUpOrStat !=
        ""
      ) {
        this.PrescribeNewItem(objDrugItemInputData);
      } else {
        if (objPrescriptionItem.PrescriptionItemOID == 0) {
          this.PrescribeNewItem(objDrugItemInputData, objPrescriptionItem);
        } else {
          this.PrescribeExistingItem(
            objPrescriptionItem,
            ActivityTypes.Reorder
          );
        }
      }
    }
  }
  private DisposeVMEvents(): void {
    if (this.profile != null) {
      // this.profile.OnProfileLoaded -= this.profile_PrintLoaded;
      // this.profile.OnProfileLoaded -= this.AddPrescribingConfigData_OnProfileLoaded;
    }
    if (this.oItemVM != null) {
      // this.oItemVM.PrescribeThisItemEvent -= this.PrescribeExistingItem;
      // this.oItemVM.WarningsGenerationCompleted -= this.objNewItemVM_WarningsGenerationCompleted;
      this.oItemVM.DoCleanUP();
    }
    // CommonBB.PatientBSADataCompletedEvent -= this.CommonBB_PatientBSADataCompletedEvent;
    //Not Required for LHS. To be Re-Visited.
    /*
        if (ActivityConsideration != null) {
            // this.ActivityConsideration.OnPopupOpen -= this.ActivityConsideration_OnPopupOpen;
            // this.ActivityConsideration.OnNodeItemClick -= this.ActivityConsideration_OnNodeItemClick;
        }
        if (this.PrescribingConfig != null) {
            // this.PrescribingConfig.OnProfileLoaded -= this.PrescribingConfig_OnProfileLoaded;
        }
        if (this.PrescribingConfigPre != null) {
            // this.PrescribingConfigPre.OnProfileLoaded -= this.PrescribingConfig_OnProfileLoaded;
        }
        */
    if (this.objNewItemVM != null) {
      // this.objNewItemVM.FillPresItemDetailsEvent -= this.objFillPresItemDetailsDelegate_completed;
      // this.objNewItemVM.WarningsCompletedEvent -= this.objNewItemVM_WarningsCompletedEvent;
      // this.objNewItemVM.RegenerateConflictsForBrandEvent -= this.RegenerateConflictsForBrand;
      this.objNewItemVM.DoCleanUP();
    }
    this.packOptionItem = null;
    this.oBtnObsrvClick = null;
    this.OnSelectedReconcileReason = null;
    this.formViewerCloseEventhandler = null;
    this.GetProfileDataCompeletedEvent = null;
    this.oAppDialogWindow = null;
  }
  private DisposeVMObjects(): void {
    this.oLstItemReconcileCombo = null;
    this.medsReorder = null;
    this.medsPrint = null;
    this.quickSelectVM = null;
    this.prescriptionRes = null;
    //Not Required for LHS. To be Re-Visited.
    //this.oMeduserteam = null;
    this.PrescribingConfig = null;
    this.PrescribingConfigPre = null;
    this.objORSPresItmCollection = null;
    this.objRePresItmCollection = null;
    this.oTempPrescDisCancelItemVM = null;
    if ((this.IsFinish || this.IsFinishNow) && this.MedTabList != null) {
      this.MedTabList.Clear();
      this.MedTabList = null;
    }
  }
  public DoCleanUP(): void {
    if (this.IsFinish || this.IsFinishNow) {
      ConceptCodeData.RM_UNIT_MEASURE = null;
      CommonDomainValues.MedicationClerking = null;
      CommonDomainValues.BSAFormula = null;
      ConceptCodeData.NFREASON = null;
      this._MedTabList = null;
      this._defaultStationaryType = null;
      FormviewerComboValues.CompoundUOMs = null;
      DRCErrorCodeConceptCodeData.ConceptCodes = null;
      ReviewAfterUOMList.ConceptCodes = null;
    }
    this.DisposeVMEvents();
    this.DisposeVMObjects();
    GlobalVariable.MessageWin = null;
  }
  public IsAnyParacetamolMarkedAsAdministered(
    lSameItemUniqueID: number,
    dtSameItemAdminDTTM: DateTime
  ): boolean {
    let bRetValue: boolean = false;
    let dtLowerDTTM: DateTime, dtUpperDTTM;
    dtLowerDTTM =
      DateTime.NotEquals(dtSameItemAdminDTTM, DateTime.MinValue)
        ? dtSameItemAdminDTTM.AddHours(
            -CConstants.AnyParacetamolAdministrationCheckInHours
          )
        : DateTime.MinValue;
    dtUpperDTTM =
      DateTime.NotEquals(dtSameItemAdminDTTM, DateTime.MinValue)
        ? dtSameItemAdminDTTM.AddHours(
            CConstants.AnyParacetamolAdministrationCheckInHours
          )
        : DateTime.MinValue;
    if (this.MedsResolve != null) {
      bRetValue = this.MedsResolve.Any(
        (x) =>
          ObjectHelper.HasValue(x.IsParacetamolIngredient) &&
          x.IsParacetamolIngredient.Value &&
          x.PrescriptionItemOID == 0 &&
          x.UniqueRowItemID != lSameItemUniqueID &&
          x.FormViewerDetails != null &&
          x.FormViewerDetails.BasicDetails != null &&
          x.FormViewerDetails.BasicDetails.RecordAdmin != null &&
          x.FormViewerDetails.BasicDetails.IsRecordAdminTabEnabled &&
          x.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate !=
            DateTime.MinValue &&
          x.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate.AddTime(
            x.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime
          ) >= dtLowerDTTM &&
          x.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredDate.AddTime(
            x.FormViewerDetails.BasicDetails.RecordAdmin.AdministeredTime
          ) <= dtUpperDTTM
      );
    }
    return bRetValue;
  }
  //Revisit required, in silverlight there is no new instantiation.
  private _medsGPConnect: ObservableCollection<GPConnectItemVM> = new ObservableCollection<GPConnectItemVM>();
  public get MedsGPConnect(): ObservableCollection<GPConnectItemVM> {
    return this._medsGPConnect;
  }

  public GpConnectLoading = false;

  public set MedsGPConnect(value: ObservableCollection<GPConnectItemVM>) {
    if (this._medsGPConnect != value) {
      //this._medsGPConnect = value;
      this._medsGPConnect.CopyFrom(value);
      this.ChangeDetection.emit();
      //OnPropertyChanged("MedsGPConnect");
    }
  }
  private _TempmedsGPConnect: ObservableCollection<GPConnectItemVM>;
  public get TempMedsGPConnect(): ObservableCollection<GPConnectItemVM> {
    return this._TempmedsGPConnect;
  }
  public set TempMedsGPConnect(value: ObservableCollection<GPConnectItemVM>) {
    if (this._TempmedsGPConnect != value) {
      this._TempmedsGPConnect = value;
    }
  }
  private _selectedGPConnectItem: GPConnectItemVM;
  public get SelectedGPConnectItem(): GPConnectItemVM {
    return this._selectedGPConnectItem;
  }
  public set SelectedGPConnectItem(value: GPConnectItemVM) {
    if (this._selectedGPConnectItem != value) {
      this._selectedGPConnectItem = value;
      //OnPropertyChanged("SelectedGPConnectItem");
    }
  }
  private _GPConnectGridNoRecordsText: string;
  public get GPConnectGridNoRecordsText(): string {
    return this._GPConnectGridNoRecordsText;
  }
  public set GPConnectGridNoRecordsText(value: string) {
    if (this._GPConnectGridNoRecordsText != value) {
      this._GPConnectGridNoRecordsText = value;
      //OnPropertyChanged("GPConnectGridNoRecordsText");
    }
  }
  private _GPConnectWarningText: string;
  public get GPConnectWarningText(): string {
    return this._GPConnectWarningText;
  }
  public set GPConnectWarningText(value: string) {
    if (this._GPConnectWarningText != value) {
      this._GPConnectWarningText = value;
      //OnPropertyChanged("GPConnectWarningText");
      //OnPropertyChanged("GpConnectWarningVisible");
    }
  }
  public TmpGPConnectWarningTextShort: string;
  public TmpGPConnectWarningTextDetail: string;
  public GPConnectWarningTextShort: string;
  public GPConnectWarningTextDetail: string;
  public get GpConnectWarningVisible(): Visibility {
    return !String.IsNullOrEmpty(this.GPConnectWarningText)
      ? Visibility.Visible
      : Visibility.Collapsed;
  }
  private _GPCStopCompTxtVisibility: Visibility = Visibility.Collapsed;
  public get GPCStopCompTxtVisibility(): Visibility {
    return this._GPCStopCompTxtVisibility;
  }
  public set GPCStopCompTxtVisibility(value: Visibility) {
    this._GPCStopCompTxtVisibility = value;
    //OnPropertyChanged("GPCStopCompTxtVisibility");
  }
  public GPCStopCompTxtDisplay: boolean = false;
  public LaunchSecondaryScreenForQuickSelectORGPConnect(
    evalue: string,
    etext: string,
    IsCatalogue: number
  ): void {
    this.GpConnectMedicationItem = null;
    let arrValue: string[] = evalue.Split('~');
    if (arrValue instanceof Array && arrValue.length > 1) {
      if (IsCatalogue == 1) arrValue[7] = '0';
      if (
        String.Compare(
          arrValue[1],
          CConstants.NONCATALOGUEITEM,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        this.oDrugItemInputData = new DrugItemInputData();
        this.oDrugItemInputData.IdentifyingName =
          Resource.MedicationForm.TypeInValue;
        this.oDrugItemInputData.IdentifyingOID = Convert.ToInt64(arrValue[0]);
        this.oDrugItemInputData.IdentifyingType = arrValue[1];
        this.oDrugItemInputData.IsAccessContraint = arrValue[2];
        this.oDrugItemInputData.IsPrescribeByBrand = arrValue[3];
        this.oDrugItemInputData.MCVersionNo = AppSessionInfo.AMCV;
        this.oDrugItemInputData.FavouritesDetailOID = 0;
        this.oDrugItemInputData.ItemType = arrValue[5];
        this.oDrugItemInputData.IsFormulary = arrValue[7] == '1' ? true : false;
        this.oDrugItemInputData.LorenzoID = arrValue[8];
        this.oDrugItemInputData.ITMSUBTYP = arrValue[10];
        this.oDrugItemInputData.IsIndicationRequired = arrValue[12];
        this.IsTypeInDrug = true;
        if (this.DefaultStationaryType == null) this.GetStationaryType();
        this.PrescribeNonCatalogueItem(this.oDrugItemInputData);
      } else if (
        String.Compare(
          arrValue[1],
          CConstants.Orderset,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        iBusyIndicator.Start('Orderset', true);
        this.SelectedGPConnectItem = null;
        let orsname: string = arrValue.length > 9 ? arrValue[9] : etext;
        this.LaunchOrderSetMezzanine(arrValue[0], orsname);
      } else {
        if (
          String.Compare(
            arrValue[10],
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          this.SelectedGPConnectItem = null;
        }
        //Not Required for LHS. To be Re-Visited.
        //this.oSecChild = new MedSecondaryTabChild();
        if (this.oSecChild == undefined) 
        {
          this.oSecChild = new MedSecondaryTabChild();
        }
        if (this.SelectedGPConnectItem != null) {
          this.GpConnectMedicationItem = this.SelectedGPConnectItem;
          this.SelectedGPConnectItem = null;
        }
        //Not Required for LHS. To be Re-Visited.
      this.oSecChild.DataContext = this;
        this.SecondaryTabDetails = evalue;
        let IsForChecked: boolean =
          String.Compare(
            arrValue[7],
            '0',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
            ? true
            : false;
        if (
          this.PrescribedOption != null &&
          this.PrescribedOption.MedPrescribedOptionList != null
        ) {
          this.PrescribedOption.MedPrescribedOptionList = null;
        }
        if (
          this.PrescribedOption != null &&
          this.PrescribedOption._LstNonFormularyDOS != null
        ) {
          this.PrescribedOption._LstNonFormularyDOS = null;
        }
        this._bIsSearchCatalogueClicked = IsCatalogue == 1;
        this.TabIndex = 0;
        if (
          this.GpConnectMedicationItem != null &&
          !String.IsNullOrEmpty(this.GpConnectMedicationItem.GPConnectID)
        ) {
          this.IsFormularyChecked = this._bIsSearchCatalogueClicked;
        } else {
          this.IsFormularyChecked = IsForChecked;
        }
        this.IsFormularyCheckedRelated = IsForChecked;
        this.IsFormularyCheckedAlternativeOption = IsForChecked;
        if (
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          let oParam: string[] = new Array(3);
          if (
            arrValue[0] != null &&
            arrValue.length > 0 &&
            arrValue.length > 8 &&
            arrValue[8] != null
          ) {
            oParam[0] = arrValue[1];
            oParam[1] = arrValue[8];
            oParam[2] = AppSessionInfo.AMCV;
            this.Isauthorise = ObjectHelper.CreateType<string>(
              HtmlPage.Window.Invoke('GetIsItemAuthorise', oParam),
              'string'
            );
          }
        }
        //Not Required for LHS. To be Re-Visited.
        //this.oSecChild.sIsauthorise = this.Isauthorise;
        this.oSecChild.sDrugName = arrValue.length > 9 ? arrValue[9] : etext;
        this.sIsAccessContraint = arrValue[2];
        this.sIsIndicationRequired = arrValue[12];
        this.oDrugItemInputData = new DrugItemInputData();
        //Not Required for LHS. To be Re-Visited.
        //this.oDrugItemInputData.IdentifyingName = this.oSecChild.sDrugName;
        this.oDrugItemInputData.IdentifyingOID = Convert.ToInt64(arrValue[0]);
        this.oDrugItemInputData.IdentifyingType = arrValue[1];
        this.oDrugItemInputData.IsAccessContraint = '0';
        this.oDrugItemInputData.IsPrescribeByBrand = arrValue[3];
        this.oDrugItemInputData.MCVersionNo = AppSessionInfo.AMCV;
        this.oDrugItemInputData.FavouritesDetailOID = 0;
        this.oDrugItemInputData.ItemType = arrValue[5];
        this.oDrugItemInputData.IsFormulary = arrValue[7] == '1' ? true : false;
        this.oDrugItemInputData.LorenzoID = arrValue[8];
        this.oDrugItemInputData.ITMSUBTYP = arrValue[10];
        this.oDrugItemInputData.IsIndicationRequired = '0';
        let FormularyOID: number = 0;
        if (arrValue.length > 14) {
          Number.TryParse(arrValue[14], (o) => {
            FormularyOID = o;
          });
          this.oDrugItemInputData.FormularyOID = FormularyOID;
        }
        //Not Required for LHS. To be Re-Visited.
        this.oSecChild.objsecondary = new SecondaryScreenLinkPanel();
        this.oSecChild.objsecondary.DataContext = this;
        let sWindowTitle: string = String.Empty;
        if (
          this.GpConnectMedicationItem != null &&
          !String.IsNullOrEmpty(this.GpConnectMedicationItem.GPConnectID)
        ) {
          sWindowTitle = 'LORENZO -- Webpage Dialog';
        }
       
                else {
                    sWindowTitle = this.oSecChild.sDrugName + " - LORENZO -- Webpage Dialog";
                }                
		 //Not Required for LHS. To be Re-Visited.
        	/*
                if (!String.IsNullOrEmpty(arrValue[15])) {
                    let objLineItem: iPowerSearch.PSLineItem = new iPowerSearch.PSLineItem();
                    objLineItem.NotesData = arrValue[15];
                }*/
                let Callback = (s,e) =>{
		              if (s != null && e != null){
                  this.oSecChild = s;
                  this.oSecChild.objsecondary = e;}
                }
                // ObjectHelper.stopFinishAndCancelEvent(true);
                if (String.Equals(this.sIsAccessContraint, "0", StringComparison.CurrentCultureIgnoreCase) && String.Equals(this.sIsIndicationRequired, "1", StringComparison.CurrentCultureIgnoreCase)) {
                  let dialogWindowHeight = (750/window.devicePixelRatio);

                  if(!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformMedchart) &&
                     String.Equals(
                      QueryStringInfo.IsLaunchformMedchart,
                      'True',
                      StringComparison.InvariantCultureIgnoreCase
                    )) 
                    dialogWindowHeight = (670/window.devicePixelRatio);
                  AppActivity.OpenWindow(sWindowTitle, this.oSecChild, (s, e) => { this.oSecChild_Closed(s); }, "", false, dialogWindowHeight, 824, false, WindowButtonType.Close, this.oSecChild.objsecondary, null, null, Callback, 'secondardDialog');
                    this.DialogHeight = dialogWindowHeight;
                }
                else if (this.sIsAccessContraint == "1") {
                  let dialogWindowHeight = (670/window.devicePixelRatio); 
                   AppActivity.OpenWindow(sWindowTitle, this.oSecChild, (s, e) => { this.oSecChild_Closed(s); }, "", false, dialogWindowHeight, 824, false, WindowButtonType.Close, this.oSecChild.objsecondary, null, null, Callback, 'secondardDialog');
                    this.DialogHeight = dialogWindowHeight;
                }
                else {
                  let dialogWindowHeight = (450/window.devicePixelRatio); 
                    AppActivity.OpenWindow(sWindowTitle, this.oSecChild, (s, e) => { this.oSecChild_Closed(s); }, "", false, dialogWindowHeight, 824, false, WindowButtonType.Close, this.oSecChild.objsecondary, null, null, Callback, 'secondardDialog');
                    this.DialogHeight = dialogWindowHeight;
                } 
      }
    }
  }

    oSecChild_Closed(args: AppDialogEventargs): void {
        if (args != null && args.Content != null && args.Content.Component) {          
                    
            let oMedAccessConst: MedSecondaryTabChild = ObjectHelper.CreateType<MedSecondaryTabChild>(args.Content.Component, MedSecondaryTabChild);
            let oMedAccessConstVM : MedAccessConstraintsVM = ObjectHelper.CreateType<MedAccessConstraintsVM>(oMedAccessConst.objAcc, MedAccessConstraintsVM);             
           
            if (oMedAccessConst != null && oMedAccessConstVM != null && String.Equals(this.sIsAccessContraint, "0", StringComparison.CurrentCultureIgnoreCase) && String.Equals(this.sIsIndicationRequired, "1", StringComparison.CurrentCultureIgnoreCase)) {
                if (args.Result == AppDialogResult.Close && oMedAccessConstVM.IsChkOverrideIndication && (oMedAccessConstVM.IndicationOverrideReasonValue == null || String.IsNullOrEmpty(oMedAccessConstVM.IndicationOverrideReasonValue.Value))) {
                    let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
                        Title: "Lorenzo",
                        // OverlayBrush: new Windows.Media.SolidColorBrush(Windows.Media.Colors.Transparent),
                        MessageButton: MessageBoxButton.OK,
                        IconType: MessageBoxType.Exclamation,
                        Message: CConstants.ErrMsgOverrideIndicationRsn
                    });
                    iMsgBox.Show();
                }
                else if (args.Result == AppDialogResult.Close && oMedAccessConstVM.IsChkOverrideIndication && (oMedAccessConstVM.IndicationOverrideReasonValue != null && !String.IsNullOrEmpty(oMedAccessConstVM.IndicationOverrideReasonValue.Value))) {
                    this.oDrugItemInputData.IndicationOverrideReson = oMedAccessConstVM.IndicationOverrideReasonValue.Value;
                    this.oDrugItemInputData.IdentifyingName = oMedAccessConstVM.DrugName;
                    Busyindicator.SetStatusBusy("FormViewer");
                    this.PrescribeNewItemEvent = (s, e) => { this.oVM_PrescribeNewItemEvent(s); };
                    this.PrescribeNewItem(this.oDrugItemInputData);
                }
                else {
                  // ObjectHelper.stopFinishAndCancelEvent(false);
                    //this.oSecChild.appDialog.DialogResult = false;
                    this.oSecChild.dupDialogRef.close();
                    // oMedAccessConst.onDialogClose = null;
                    oMedAccessConst.appDialog = null;
                }
            }
            else {
              // ObjectHelper.stopFinishAndCancelEvent(false);
                this.oSecChild.dupDialogRef.close();
                // oMedAccessConst.onDialogClose = null;
                oMedAccessConst.appDialog = null;
            }
        }
    }   
    
    oVM_PrescribeNewItemEvent(IsChildWindowClosed: boolean): void {
        //this.oSecChild.appDialog.DialogResult = false;
        this.oSecChild.dupDialogRef.close();
    }

  private LaunchOrderSetMezzanine(ORSOID: string, ORSname: string): void {
    if (this.MedsResolve != null) {
      let NewItems = this.MedsResolve.Where(
        (Items) =>
          Items.PrescriptionItemStatus !=
            PrescriptionItemStatusCodes.CANCELLED &&
          Items.PrescriptionItemStatus !=
            PrescriptionItemStatusCodes.DISCONTINUED &&
          Items.PrescriptionItemStatus != PrescriptionItemStatusCodes.ONHOLD &&
          Items.PrescriptionItemStatus !=
            PrescriptionItemStatusCodes.COMPLETED &&
          Items.FormViewerDetails != null &&
          Items.FormViewerDetails.BasicDetails != null &&
          Items.FormViewerDetails.BasicDetails.Ordersets != null &&
          !String.IsNullOrEmpty(
            Items.FormViewerDetails.BasicDetails.Ordersets.Value
          ) &&
          Items.FormViewerDetails.BasicDetails.Ordersets.Value == ORSOID
      ).Select((Items) => Items);
      let associationOids: string[] = NewItems.Where(
        (x) =>
          x.FormViewerDetails.BasicDetails.Ordersets.Tag != null &&
          !String.IsNullOrEmpty(
            x.FormViewerDetails.BasicDetails.Ordersets.Tag.ToString()
          ) &&
          Number.Parse(
            x.FormViewerDetails.BasicDetails.Ordersets.Tag.ToString()
          ) > 0
      )
        .Select((x) =>
          x.FormViewerDetails.BasicDetails.Ordersets.Tag.ToString()
        )
        .ToArray();
      {
        //Not Required for LHS. To be Re-Visited.
        this.oORSChild = new OrderSetSecMezzanine();
        let ordersetOID: number = 0;
        Number.TryParse(ORSOID, (o) => {
          ordersetOID = o;
        });
        let orsname: string = ORSname;
        let objVM: OrderSetSecMezzanineVM = new OrderSetSecMezzanineVM(
          ordersetOID,
          orsname
        );
        objVM.IgnoreOrdetAssociations = associationOids;
        objVM.IsPartialPrescribe = NewItems != null && NewItems.Count() > 0;
        //Not Required for LHS. To be Re-Visited.
        this.oORSChild.objsecondary = new OrderSetChildfooter();
        this.oORSChild.objsecondary.DataContext = objVM;
        this.oORSChild.DataContext = objVM;
        let sWindowTitle: string = objVM.OrderSetName + ' - contents';
        //Not Required for LHS. To be Re-Visited.
        let _height;
        let Callback = (s,e) =>{
          if (s != null && e != null){
          this.oORSChild = s;
          this.oORSChild.objsecondary = e;}
        }
        let dialogWindowHeight;
        if(window.screen.height < 1000 && window.devicePixelRatio != 1.25){
          _height = 490;
        }else{
          _height = (700/window.devicePixelRatio);
          if (((!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformMedchart) &&
            String.Equals(
              QueryStringInfo.IsLaunchformMedchart,
              'True',
              StringComparison.InvariantCultureIgnoreCase
            )) || (!String.IsNullOrEmpty(QueryStringInfo.IsClinicalNote) &&
              String.Equals(
                QueryStringInfo.IsClinicalNote,
                'Yes',
                StringComparison.InvariantCultureIgnoreCase
              )) || (!String.IsNullOrEmpty(QueryStringInfo.FromPreschart) &&
                String.Equals(
                  QueryStringInfo.FromPreschart,
                  'True',
                  StringComparison.InvariantCultureIgnoreCase
                )) || (!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformPreschartReview) &&
                String.Equals(
                  QueryStringInfo.IsLaunchformPreschartReview,
                  'True',
                  StringComparison.InvariantCultureIgnoreCase
                )) || (!String.IsNullOrEmpty(QueryStringInfo.FromClinicalNote) &&
                String.Equals(
                  QueryStringInfo.FromClinicalNote,
                  'True',
                  StringComparison.InvariantCultureIgnoreCase
                ))) && window.devicePixelRatio == 1.25) {
                  _height = _height - 50;
            }
        }
        // ObjectHelper.stopFinishAndCancelEvent(true);
        AppActivity.OpenWindow(sWindowTitle, this.oORSChild, (s,e) => {this.oORSChild_Closed(s);}, "", false, _height, 1055, false, WindowButtonType.OkCancel, this.oORSChild.objsecondary, null, null, Callback);
      }
    }
  }
  //Not Required for LHS. To be Re-Visited.
  
  oORSChild_Closed(args: AppDialogEventargs): void {
    // ObjectHelper.stopFinishAndCancelEvent(false);
    if (args.Result == AppDialogResult.Ok) {
      let objmezz: OrderSetSecMezzanine = ObjectHelper.CreateType<OrderSetSecMezzanine>(args.Content.Component, OrderSetSecMezzanine);
      if (!Common.OssOkClick(objmezz)) {
        return;
      }
      let objItems: ObservableCollection<Object> = new ObservableCollection<Object>();
      objmezz.grdPatientSelect.GetSelectedRowsIndexByOrderNew().forEach((i) => {
        objItems.Add(objmezz.grdPatientSelect.GetRowData(i));
      });
      if (objItems.Count <= 0) {
        iMessageBox.Show("Lorenzo", Resource.ORSSecMezzanine.ORSOKClick_Text, MessageBoxType.Information, MessageBoxButton.OK);
      }
      else {
        Busyindicator.SetStatusIdle("Favourites");
        Busyindicator.SetStatusIdle("FormViewer");
        Busyindicator.SetStatusIdle("Orderset");
        Busyindicator.SetStatusBusy("OrderSetPrescribe1");
        let objPresItmCollection: ObservableCollection<PrescriptionItemVM> = new ObservableCollection<PrescriptionItemVM>();
        objItems.forEach((obj) => {
          let objassociation: PrescriptionItemAssociations = ObjectHelper.CreateType<PrescriptionItemAssociations>(obj, PrescriptionItemAssociations);
          if (objassociation != null && objassociation.PrescrptionItem != null) {
            if (objassociation.PrescrptionItem.OsInstance != null && objassociation.PrescrptionItem.OsInstance.OsIsGroupHeader) {
              // continue;
              console.log('End')
            }
            objassociation.PrescrptionItem.FormViewerDetails.BasicDetails.IsLoadingDataForOrderSentence = true;
            if (objassociation.PrescrptionItem.ActionCode == ActivityTypes.Prescribe) {
              objassociation.PrescrptionItem.ePrescribeSource = PrescribeSource.DOS;
            }
            objPresItmCollection.Add(objassociation.PrescrptionItem);
          }
          this.oORSChild.objsecondary = new OrderSetChildfooter();
          if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking) {
            if (objassociation.IsPresOpenFVVisiblity == Visibility.Visible)
              objassociation.PrescrptionItem.formViewerDetails.BasicDetails.IsDoNotOpenFVForOrderSet = !objassociation.IsPresOpenFVChecked;
            else objassociation.PrescrptionItem.formViewerDetails.BasicDetails.IsDoNotOpenFVForOrderSet = null;
          }
        });
        objPresItmCollection.Where(x => x.OsInstance != null && x.OsInstance.OsIsSequential && !x.OsInstance.OsIsProtected).GroupBy(x => x.OsInstance.OsSeqGroupNo).ForEach(x => {
          x.ForEach(y => {
            y.OsInstance.OsIsFirstItem = false;
            y.OsInstance.OsIsLastItem = false;
          });
          x.First().OsInstance.OsIsFirstItem = true;
          x.LastOrDefault().OsInstance.OsIsLastItem = true;
        });
        this.orsseqcount = 1;
        this.CallOrderSetSequence(objPresItmCollection, 0);
        // this.oORSChild.appDialog.DialogResult = false;
        args.AppChildWindow.DialogResult = true;
      }
    }
    else if (args.Result == AppDialogResult.Cancel) {
      //this.oORSChild.appDialog.DialogResult = false;
      args.AppChildWindow.DialogResult = true;
      Busyindicator.SetStatusIdle("Favourites");
      Busyindicator.SetStatusIdle("FormViewer");
      Busyindicator.SetStatusIdle("Orderset");
    }
  }
    
  itemValue: string = String.Empty;
  DrugName: string = String.Empty;
  public GPCTransformConversion(oGPConnectItemVM: GPConnectItemVM): void {
    let oService: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    let oRequest: IPPMAManagePrescSer.CReqMsgGetTransformConversion =
      new CReqMsgGetTransformConversion();
    oService.GetTransformConversionCompleted = (s, e) => {
      this.oService_GetTransformConversionCompleted(s, e);
      iBusyIndicator.Stop("gpConnect");
    };
    oRequest.oGPCDrugConRequestBC = new CGPCDrugConversionRequest();
    oRequest.oGPCDrugConRequestBC.DrugSnomedCode =
      oGPConnectItemVM != null &&
      !String.IsNullOrEmpty(oGPConnectItemVM.MedicationCode)
        ? oGPConnectItemVM.MedicationCode
        : String.Empty;
    oRequest.oGPCDrugConRequestBC.FormSnomedCode = String.Empty;
    oRequest.oGPCDrugConRequestBC.MCVersionNo = AppSessionInfo.AMCV;
    oRequest.oGPCDrugConRequestBC.IsTransformGPConRequired =
      ProfileData.IsTransformGPConRequired == 1 ? 1 : -1;
    oRequest.oContextInformation = Common.FillContext();
    oService.GetTransformConversionAsync(oRequest);
  }
  oService_GetTransformConversionCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetTransformConversionCompletedEventArgs
  ): void {
    this.ToAvoiddoubleClick = false;
    if (e.Result != null && e.Result.oCGPCDrugConResult != null) {
      let oDrugItem: IPPMAManagePrescSer.DrugItemBasicInfo =
        e.Result.oCGPCDrugConResult;
      let oDrugProperty: IPPMAManagePrescSer.DrugProperty;
      ProfileData.IsTransformGPConRequired = oDrugItem.IsTransformGPConRequired;
      if (oDrugItem != null) {
        let nLen: number = 0;
        let sFNoteDrugProps: string,
          sFormularyNotes,
          ocproduct,
          desc = String.Empty;
        let sPrescribingNote: string = String.Empty;
        let builder: StringBuilder = new StringBuilder();
        sFNoteDrugProps = String.Empty;
        sFormularyNotes = String.Empty;
        ocproduct = String.Empty;
        desc = String.Empty;
        builder.Clear();
        if (oDrugItem.DrugProperties != null) {
          nLen = oDrugItem.DrugProperties.Count;
          for (let fkey: number = 0; fkey < nLen; fkey++) {
            if (oDrugItem.DrugProperties[fkey] != null) {
              oDrugProperty = oDrugItem.DrugProperties[fkey];
              if (
                String.Equals(
                  oDrugProperty.DrugName,
                  CConstants.CATALOGUEITEM
                ) &&
                !String.Equals(oDrugItem.ITMSUBTYP, CConstants.SUBTYPE) &&
                !String.IsNullOrEmpty(oDrugProperty.DrugPropertyCode) &&
                String.Equals(
                  oDrugProperty.DrugPropertyCode,
                  CConstants.HighRisk_CC
                )
              ) {
                if (builder.Length > 0) {
                  builder.Append('^ ');
                  Common.IsConceptCodeExists(
                    oDrugProperty.DrugPropertyCode,
                    Common.ConceptCodes,
                    (o) => {
                      desc = o;
                    }
                  );
                  builder.Append(desc);
                } else {
                  builder.Append(' ');
                  Common.IsConceptCodeExists(
                    oDrugProperty.DrugPropertyCode,
                    Common.ConceptCodes,
                    (o) => {
                      desc = o;
                    }
                  );
                  builder.Append(desc);
                }
              } else if (
                String.Compare(
                  oDrugProperty.DrugName,
                  CConstants.CATALOGUEITEM
                ) == 0 &&
                String.Compare(
                  oDrugItem.ITMSUBTYP,
                  CConstants.SUBTYPE,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0 &&
                !String.IsNullOrEmpty(oDrugProperty.DrugPropertyCode) &&
                !String.IsNullOrEmpty(oDrugProperty.VMChildCode) &&
                oDrugProperty.VMChildCode.ToString() == CConstants.AllChild_CC
              ) {
                if (builder.Length > 0) {
                  builder.Append('^ ');
                  Common.IsConceptCodeExists(
                    oDrugProperty.DrugPropertyCode,
                    Common.ConceptCodes,
                    (o) => {
                      desc = o;
                    }
                  );
                  builder.Append(desc);
                } else {
                  builder.Append(' ');
                  Common.IsConceptCodeExists(
                    oDrugProperty.DrugPropertyCode,
                    Common.ConceptCodes,
                    (o) => {
                      desc = o;
                    }
                  );
                  builder.Append(desc);
                }
              } else if (
                String.Compare(
                  oDrugProperty.DrugName,
                  CConstants.CATALOGUEITEM
                ) == 0 &&
                String.Compare(
                  oDrugItem.ITMSUBTYP,
                  CConstants.SUBTYPE,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 &&
                !String.IsNullOrEmpty(oDrugProperty.DrugPropertyCode)
              ) {
                if (builder.Length > 0) {
                  builder.Append('^ ');
                  Common.IsConceptCodeExists(
                    oDrugProperty.DrugPropertyCode,
                    Common.ConceptCodes,
                    (o) => {
                      desc = o;
                    }
                  );
                  builder.Append(desc);
                } else {
                  builder.Append(' ');
                  Common.IsConceptCodeExists(
                    oDrugProperty.DrugPropertyCode,
                    Common.ConceptCodes,
                    (o) => {
                      desc = o;
                    }
                  );
                  builder.Append(desc);
                }
              } else if (
                String.Compare(
                  oDrugProperty.DrugName,
                  CConstants.CATALOGUEITEM
                ) != 0 &&
                !String.IsNullOrEmpty(oDrugProperty.DrugPropertyCode)
              ) {
                if (builder.Length > 0) {
                  builder.Append('^ ');
                  Common.IsConceptCodeExists(
                    oDrugProperty.DrugPropertyCode,
                    Common.ConceptCodes,
                    (o) => {
                      desc = o;
                    }
                  );
                  builder.Append(desc);
                } else {
                  builder.Append(' ');
                  Common.IsConceptCodeExists(
                    oDrugProperty.DrugPropertyCode,
                    Common.ConceptCodes,
                    (o) => {
                      desc = o;
                    }
                  );
                  builder.Append(desc);
                }
                if (
                  !oDrugProperty.DrugPropertyCode.StartsWith('###') &&
                  String.Compare(
                    oDrugProperty.DrugPropertyCode,
                    CConstants.HighRisk_CC
                  ) == 0 &&
                  !String.IsNullOrEmpty(oDrugProperty.HighRiskMsg)
                ) {
                  builder.Append(' - ');
                  builder.Append(oDrugProperty.HighRiskMsg);
                }
              }
              if (!String.Equals(oDrugItem.ITMSUBTYP, CConstants.SUBTYPE)) {
                if (
                  !oDrugProperty.DrugPropertyCode.StartsWith('###') &&
                  String.Compare(
                    oDrugProperty.DrugPropertyCode,
                    CConstants.HighRisk_CC
                  ) == 0 &&
                  !String.IsNullOrEmpty(oDrugProperty.HighRiskMsg) &&
                  !String.IsNullOrEmpty(oDrugProperty.VMChildCode) &&
                  (oDrugProperty.VMChildCode.ToString() ==
                    CConstants.AllChild_CC ||
                    String.Equals(
                      oDrugProperty.VMChildCode,
                      CConstants.SomeChild_CC,
                      StringComparison.CurrentCultureIgnoreCase
                    ))
                ) {
                  builder.Append(' - ');
                  builder.Append(oDrugProperty.HighRiskMsg);
                }
                if (
                  !oDrugProperty.DrugPropertyCode.StartsWith('###') &&
                  !String.IsNullOrEmpty(oDrugProperty.VMChildCode) &&
                  oDrugProperty.VMChildCode.ToString() ==
                    CConstants.AllChild_CC &&
                  !String.IsNullOrEmpty(oDrugProperty.DrugName) &&
                  oDrugProperty.DrugName.ToString() ==
                    CConstants.CATALOGUEITEM &&
                  String.Compare(
                    oDrugItem.ITMSUBTYP,
                    CConstants.SUBTYPE,
                    StringComparison.OrdinalIgnoreCase
                  ) != 0
                ) {
                  builder.Append(' - ');
                  ocproduct = CConstants.AllProducts;
                  builder.Append(ocproduct);
                } else if (
                  !oDrugProperty.DrugPropertyCode.StartsWith('###') &&
                  !String.IsNullOrEmpty(oDrugProperty.VMChildCode) &&
                  String.Equals(
                    oDrugProperty.VMChildCode,
                    CConstants.SomeChild_CC
                  ) &&
                  !String.IsNullOrEmpty(oDrugProperty.DrugName) &&
                  String.Equals(
                    oDrugProperty.DrugName,
                    CConstants.CATALOGUEITEM
                  ) &&
                  !String.Equals(oDrugItem.ITMSUBTYP, CConstants.SUBTYPE)
                ) {
                  builder.Append(' - ');
                  ocproduct = CConstants.SomeProducts;
                  builder.Append(ocproduct);
                }
              }
            }
          }
          if (!String.IsNullOrEmpty(oDrugItem.FormularyNote)) {
            sFormularyNotes = 'Formulary note - ' + oDrugItem.FormularyNote;
          }
          if (!String.IsNullOrEmpty(oDrugItem.PrescribingNote)) {
            sPrescribingNote = oDrugItem.PrescribingNote;
          }
          if (!String.IsNullOrEmpty(builder.ToString())) {
            sFNoteDrugProps =
              sFormularyNotes + '*' + 'Properties - ' + builder.ToString();
          }
        }
        this.itemValue =
          oDrugItem.IdentifyingOID +
          '~' +
          oDrugItem.IdentifyingType +
          '~' +
          (!String.IsNullOrWhiteSpace(oDrugItem.IsAccessContraint)
            ? Int32.Parse(oDrugItem.IsAccessContraint)
            : 0) +
          '~' +
          (!String.IsNullOrWhiteSpace(oDrugItem.IsPrescribeByBrand)
            ? Int32.Parse(oDrugItem.IsPrescribeByBrand)
            : 0) +
          '~' +
          oDrugItem.SourceDataProviderType +
          '~' +
          oDrugItem.ItemType +
          '~' +
          sFNoteDrugProps +
          '~' +
          oDrugItem.IsFormulary +
          '~' +
          oDrugItem.LorenzoID +
          '~' +
          oDrugItem.IdentifyingName +
          '~' +
          oDrugItem.ITMSUBTYP +
          '~' +
          oDrugItem.MultiComponentItems +
          '~' +
          oDrugItem.IsIndicationRequired +
          '~' +
          oDrugItem.SourceDataProviderType +
          '~' +
          oDrugItem.FormularyOID +
          '~' +
          sPrescribingNote;
        this.DrugName = oDrugItem.IdentifyingName;
        if (this.SelectedGPConnectItem != null) {
          this.SelectedGPConnectItem.GPCProductFormOID =
            oDrugItem.GPCProductFormOID;
        }
        if (oDrugItem.GPErrorCode == CConstants.GPC_ERRORCODEDRUGNOTEXISTS) {
          let sbGPCItemNotMappeddtl: StringBuilder = new StringBuilder();
          sbGPCItemNotMappeddtl.Append(
            Resource.MedicationForm.GPItemNotMapped_Title
          );
          sbGPCItemNotMappeddtl.Append(
            Environment.NewLine + Environment.NewLine
          );
          sbGPCItemNotMappeddtl.Append(
            Resource.MedicationForm.GPItemNotMapped_Details.Replace(
              '\\r\\n',
              Environment.NewLine + Environment.NewLine
            )
          );
          sbGPCItemNotMappeddtl.Append(
            Environment.NewLine + Environment.NewLine
          );
          sbGPCItemNotMappeddtl.Append(
            Resource.MedicationForm.GPItemNotMapped_Note
          );
          let oMsg: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
            Title: 'Lorenzo - Manage prescription',
            Message: sbGPCItemNotMappeddtl.ToString(),
            MessageButton: MessageBoxButton.OKCancel,
            IconType: MessageBoxType.Information,
            Width: 730,
            Height: 210,
          });
          oMsg.MessageBoxClose = (s, e) => {
            this.DrugIsNotExists_MessageBoxClose(s, e);
          };
          oMsg.Show();
        } else {
          if (!String.IsNullOrEmpty(this.itemValue)) {
            this.LaunchSecondaryScreenForQuickSelectORGPConnect(
              this.itemValue,
              oDrugItem.IdentifyingName,
              0
            );
          }
        }
      }
    }
  }
  DrugIsNotExists_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.OK) {
      this.IsGPConMatchFound = true;
      if (Common.LHSiTab != null) {
        Common.LHSiTab.ClickTab('Search', false);
      }
    } else if (e.MessageBoxResult == MessageBoxResult.Cancel) {
      this.GpConnectMedicationItem = this.SelectedGPConnectItem = null;
      this.IsGPConMatchFound = false;
    }
  }
  public IgnoreIfRequestExists: boolean = false;
  public lstDispensePendingItems: List<string> = null;
  public ProdOptExisting(objNewItemVM: PrescriptionItemVM): void {
    this.ProdOpt = null;
    if (
      objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems !=
        null &&
      objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems
        .Count > 0
    ) {
      let prodavail: boolean =
        objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Any(
          (x) =>
            x.IsDoseCombinationsDefined.Equals('1') &&
            (x.FluidPrescribableItemListOID == null || x.FluidPrescribableItemListOID == 0)
        );
      if (prodavail) {
        this.ProdOpt = new ProdOptBackup();
        let cnt: number =
          objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems
            .Count;
        let prodcnt: number =
          objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
            (x) =>
              x.IsDoseCombinationsDefined.Equals('1') &&
              (x.FluidPrescribableItemListOID == null || x.FluidPrescribableItemListOID == 0)
          ).Count();
        this.ProdOpt.Quantity = new Array(prodcnt);
        this.ProdOpt.QuantityUOMOID = new Array(prodcnt);
        this.ProdOpt.QuantityUOMName = new Array(prodcnt);
        this.ProdOpt.TotalQuantity = new Array(prodcnt);
        this.ProdOpt.TotalQuantityUOMOID = new Array(prodcnt);
        this.ProdOpt.TotalQuantityUOMName = new Array(prodcnt);
        this.ProdOpt.Supplycomments = new Array(prodcnt);
        this.ProdOpt.ProdSupplyInsWithComments = new Array(prodcnt);
        this.ProdOpt.IdentifyingOID = new Array(prodcnt);
        this.ProdOpt.PrescribableItemListOID = new Array(prodcnt);
        this.ProdOpt.FluidPrescribableItemListOID = new Array(prodcnt);
        this.ProdOpt.IdentifyingName = new Array(prodcnt);
        this.ProdOpt.IdentifyingType = new Array(prodcnt);
        this.ProdOpt.PrescriptionItemTechOID = new Array(prodcnt);
        this.ProdOpt.bMultiCompChilds = new Array(prodcnt);
        this.ProdOpt.SelectedSupplyinstruction = new Array(prodcnt);
        this.ProdOpt.Supplyinstruction = new Array(prodcnt);
        this.ProdOpt.OperationMode = new Array(prodcnt);
        this.ProdOpt.SupplyInstructionText = new Array(prodcnt);
        let runnum: number = 0;
        for (let i: number = 0; i < cnt; i++) {
          if (
            objNewItemVM.FormViewerDetails.TechValidateDetails
              .TechValidatedItems[i].IsDoseCombinationsDefined == '1' &&
            (objNewItemVM.FormViewerDetails.TechValidateDetails
              .TechValidatedItems[i].FluidPrescribableItemListOID == 0
             || objNewItemVM.FormViewerDetails.TechValidateDetails
             .TechValidatedItems[i].FluidPrescribableItemListOID == null) 
          ) {
            this.ProdOpt.Quantity[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].QuantityPerDose;
            if (
              objNewItemVM.FormViewerDetails.TechValidateDetails
                .TechValidatedItems[i].QuantityPerDoseUOM != null
            ) {
              this.ProdOpt.QuantityUOMOID[runnum] =
                objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                  i
                ].QuantityPerDoseUOM.OID;
              this.ProdOpt.QuantityUOMName[runnum] =
                objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                  i
                ].QuantityPerDoseUOM.Name;
            }
            this.ProdOpt.TotalQuantity[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].TotalQuantity;
            if (
              objNewItemVM.FormViewerDetails.TechValidateDetails
                .TechValidatedItems[i].TotalQuantityUOM != null
            ) {
              this.ProdOpt.TotalQuantityUOMOID[runnum] =
                objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                  i
                ].TotalQuantityUOM.OID;
              this.ProdOpt.TotalQuantityUOMName[runnum] =
                objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                  i
                ].TotalQuantityUOM.Name;
            }
            if (
              objNewItemVM.FormViewerDetails.TechValidateDetails
                .TechValidatedItems[i].SupplyInstruction != null &&
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].SupplyInstruction.Count > 0
            ) {
              let obs: ObservableCollection<CListItem> =
                new ObservableCollection<CListItem>();
              let Supcnt: number =
                objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                  i
                ].SupplyInstruction.Count;
              for (let j: number = 0; j < Supcnt; j++) {
                let cli: CListItem = new CListItem();
                cli.Value =
                  objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                    i
                  ].SupplyInstruction[j].Code;
                cli.DisplayText =
                  objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                    i
                  ].SupplyInstruction[j].Name;
                obs.Add(cli);
              }
              this.ProdOpt.Supplyinstruction[runnum] = obs;
            }
            this.ProdOpt.SupplyInstructionText[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].SupplyInstructionText;
            this.ProdOpt.SelectedSupplyinstruction[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].selectedSupplyInstruction;
            this.ProdOpt.Supplycomments[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].SupComments;
            this.ProdOpt.ProdSupplyInsWithComments[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].ProdSupplyInsWithComments;
            this.ProdOpt.IdentifyingOID[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].DrugItem.IdentifyingOID;
            this.ProdOpt.PrescribableItemListOID[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].DrugItem.PrescribableItemListOID;
            this.ProdOpt.FluidPrescribableItemListOID[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].FluidPrescribableItemListOID;
            this.ProdOpt.IdentifyingName[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].DrugItem.IdentifyingName;
            this.ProdOpt.IdentifyingType[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].DrugItem.IdentifyingType;
            this.ProdOpt.PrescriptionItemTechOID[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].PrescriptionItemTechOID;
            this.ProdOpt.bMultiCompChilds[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].bMultiCompChilds;
            this.ProdOpt.OperationMode[runnum] =
              objNewItemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems[
                i
              ].OperationMode;
            runnum++;
          }
        }
      }
    }
  }
}
export class Indicationdtl {
  public IsAccessConstriant: string;
  public IsIndicationRequired: string;
  public IsPrescribeByBrand: string;
  public ItemType: string;
  public IsFormulary: boolean = false;
  public LorenzoID: string;
  public ITMSUBTYP: string;
  public SourceDataProviderType: string;
}

export enum EnumVals {
  CC_EXPJAN = 1,
  CC_EXPFEB = 2,
  CC_EXPMAR = 3,
  CC_EXPAPR = 4,
  CC_EXPMAY = 5,
  CC_EXPJUNE = 6,
  CC_EXPJULY = 7,
  CC_EXPAUG = 8,
  CC_EXPSEP = 9,
  CC_EXPOCT = 10,
  CC_EXPNOV = 11,
  CC_EXPDEC = 12,
}

export enum AsyncCallStatus {
  YetToTrigger="YetToTrigger",

  InProgress="InProgress",

  Complete="Complete",
}
