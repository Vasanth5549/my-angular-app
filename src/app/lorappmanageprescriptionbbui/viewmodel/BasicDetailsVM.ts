import { Component, OnInit,EventEmitter } from '@angular/core';
import {
  StringBuilder,
  ProfileFactoryType,
  ContextManager,
  Convert,
  AppActivity,
  AMSHelper,
  DayOfWeek,
} from 'epma-platform/services';
import * as Application from 'src/app/lorappcommonbb/amshelper';
import {
  Level,
  ProfileContext,
  OnProfileResult,
  IProfileProp,
  Byte,
  Decimal,
  decimal,
  Double,
  Float,
  Int64,
  long,
  Long,
  StringComparison,
  ObservableCollection,
  List,
  Visibility,
  CListItem,
  AppDialogEventargs,
  AppDialogResult,
  DelegateArgs,
  DialogComponentArgs,
  WindowButtonType,
  ChildWindow,
  IEnumerable,
  Enum,
  ArrayOfString,
} from 'epma-platform/models';
import { AppDialog, GridLength, iTabItem } from 'epma-platform/controls';
import { HelperService } from '../../shared/epma-platform/soap-client/helper.service';
import 'epma-platform/stringextension';
import DateTime from 'epma-platform/DateTime';
import TimeSpan from 'epma-platform/TimeSpan';
import {
  MessageEventArgs,
  MessageBoxResult,
  iMessageBox,
  MessageBoxButton,
  MessageBoxType,
  MessageBoxDelegate,
} from 'epma-platform/services';
import { ObjectHelper as Helper, ObjectHelper } from 'epma-platform/helper';
import { Dictionary } from 'epma-platform/dictionary';
import { CustomTechValidatedItem } from './customtechvalidateditem';
import {
  InfContinousSequentail,
  PrescriptionItemVM,
} from './PrescriptionItemVM';
import { MultipleDoseDetail } from './MultipleDoseDetail';
import { TitratedDoseVM } from './TitratedDoseDetailsVM';
import { RecordAdminVM } from './RecordAdminVM';
import { MedicationCommonProfileData } from 'src/app/lorappmedicationcommonbb/utilities/profiledata';
import {
  CConstants,
  ConstDurationUOM,
  ControType,
  Conversion,
  DoseTypeCode,
  DRCDoseTypes,
  InfusionTypesCode,
  InfusionVolume,
  MedImage,
  MedImages,
  PrescriptionTypes,
  Roundoff,
} from '../utilities/constants';
import { AdminScheduleTime, AdminScheduleTimeVM } from './adminscheduletimevm';
import { Common } from '../utilities/common';
import { FormViewerDefaultsVM } from './formviewerdefaultsvm';
import { ActivityTypes, FormDefaults, RuleNames } from '../model/common';
import { Resource } from 'src/app/lorappmanageprescriptionbbui/resource';
import { ClonableViewModelBase } from 'src/app/lorappmedicationcommonbb/model/cloneviewmodel';
import { IViewModelBase } from 'src/app/lorappcommonbb/viewmodelbase';
import {
  AppSessionInfo,
  ClerkFormViewDeftBehaviour,
  ContextInfo,
  PatientContext,
} from 'src/app/lorappcommonbb/utilities/globalvariable';
import { InfusionTypeCode } from 'src/app/lorappmedicationcommonbb/utilities/constants';
import { ProfileData, UserPermissions } from '../utilities/profiledata';
import {
  FormviewerComboValues,
  FormviewerCommonData,
  QueryStringInfo,
} from '../utilities/globalvariable';
import { CommonBB } from 'src/app/lorappcommonbb/utilities/common';
import { SupplyDispensingInstructionsVM } from './SupplyDispensingInstructionsVM';
import {
  CReqMsgGetAllOptions,
  CReqMsgGetFormViewControls,
  CResMsgGetAllOptions,
  DrugProperty,
  FormViewCriteria,
  GetAllOptionsCompletedEventArgs,
  GetFormViewControlsCompletedEventArgs,
  ManagePrescriptionWSSoapClient,
} from '../../shared/epma-platform/soap-client/ManagePrescriptionWS';
import { CSequentialHelper } from '../utilities/CSequentialHelper';
import { CommonSequentialHelper } from '../utilities/CommonSequentialHelper';
import {
  GrdAdminstrativeTimesCols,
  ScheduleDetailsCols,
} from 'src/app/lorappmedicationcommonbb/viewmodel/prescriptionitemdetailsvm';
import { ScheduleDetailsSteppedVM } from 'src/app/lorappmedicationcommonbb/viewmodel/scheduledetailsvm';
import { MedChartData } from 'src/app/lorappmedicationcommonbb/utilities/globalvariable';
import * as IPPMAManagePrescSer from '../../shared/epma-platform/soap-client/IPPMAManagePrescriptionWS';
import * as MedicationCommon from 'src/app/lorappmedicationcommonbb/utilities/globalvariable';
import { CConstants as MedicationCommonConstant } from 'src/app/lorappmedicationcommonbb/utilities/constants';
import { TechValidateVM } from './TechValidateVM';
import { medTechvalProdOptVM } from './medTechvalProdOptVM';
import { MCommonBB } from 'src/app/lorappmedicationcommonbb/utilities/common';
import { PrescriptionHelper } from '../utilities/prescriptionhelper';
import { AdminstrativeTimesVM } from 'src/app/lorappmedicationcommonbb/viewmodel/adminstrativetimesvm';
import { ConditionalDosingVM } from './conditionaldosevm';
import { Busyindicator } from 'src/app/lorappcommonbb/busyindicator';
import { disconcan1 } from 'src/app/lorappmedicationcommonbb/resource/disconcan1.designer';
import {
  BitmapImage,
  Color,
  Colors,
  FontWeight,
  FontWeights,
  ImageSource,
  SolidColorBrush,
  Uri,
  UriKind,
} from 'src/app/shared/epma-platform/controls/Control';
import { GridUnitType } from 'src/app/shared/epma-platform/controls/GridExt';
import { Environment } from '../../product/shared/models/Common';
import 'epma-platform/booleanextension';
import 'epma-platform/numberextension';
import 'epma-platform/stringextension';
import {iMath as Math} from 'epma-platform/mathextension';
import 'epma-platform/arrayextension';
import { medsupplydispensinginstructionstab } from '../view/medsupplydispensinginstructionstab';
import { medsupplydispensinginstructions } from '../view/medsupplydispensinginstructions';
import { medtechvalProdOpt } from '../view/medtechvalprodopt';
import { ConditionalDose } from '../model/conditionaldose';
import { DialogRef } from '@progress/kendo-angular-dialog';

export class BasicDetailsVM
  extends ClonableViewModelBase
  implements IViewModelBase {
  bMultiDispSup: boolean = false;
  PropertyChanged: Function;
  public FrmViewloadCurrentDTTM: DateTime = DateTime.MinValue;
  public CustomTechValidatedItem: CustomTechValidatedItem;
  public DisplayFlag: boolean = false;
  public TimeMinValueFlag: boolean = true;
  public StartDateOnLaunch: DateTime = DateTime.MinValue;
  public LaunchedFromTechValidate: boolean = false;
  oItem: PrescriptionItemVM;
  private _infusionDetails: InfusionVM;
  private _additionalComments: string;
  private _otherComments: string;
  private _admMethod: CListItem;
  private _batchNumber: string;
  private installInst: ObservableCollection<CListItem> = null;
  private inetrBetInstall: number = 0;
  private legalCategory: string;
  private prescriBy: string;
  private primaryInd: string;
  private _startDTTMText: string;
  private _startDTTM: DateTime = DateTime.MinValue;
  private _startPrescriptionTime: DateTime = DateTime.MinValue;
  private _stopDate: DateTime = DateTime.MinValue;
  private _stopPrescriptionTime: DateTime = null;
  private modificationComOid: number = 0;
  private modificationComName: string;
  private _asRequired: boolean = false;
  private medicationclrkSrc: ObservableCollection<CListItem>;
  private _reasonforModification: CListItem = null;
  private _defaultDetails: FormViewerDefaultsVM;
  private _route: CListItem;
  private _routeselected: CListItem;
  private _routeRecorded: CListItem;
  private _bisAmend: boolean = false;
  private _quantityUOM: CListItem;
  private oldDosageForm: CListItem;
  private oldstrength: CListItem;
  private oldroute: CListItem;
  private _strength: CListItem;
  private _site: CListItem = null;
  private _dosageForm: CListItem;
  private _adminInstruction: CListItem;
  private _stationaryType: CListItem = null;
  private _TitratedDoseInstruction: CListItem;
  private _PrntstationaryType: CListItem;
  tmpReviewAfterUOM: CListItem = new CListItem();
  private _TechsupplyInstText: string;
  private _Supplycomments: string = '';
  private _endDTTM: DateTime = DateTime.MinValue;
  private _dateCommenced: string;
  private _treatmentToContinue: CListItem;
  private _doseType: CListItem = null;
  private _txtUpperDoseIsExists: boolean = false;
  private _selectedDoseDetail: MultipleDoseDetail;
  private _doseDetails: ObservableCollection<MultipleDoseDetail> = new ObservableCollection<MultipleDoseDetail>();
  private _tritrateddoseDetails: TitratedDoseVM;
  private _titratedDoseInstructions: string = '';
  private _titratedDoseAdtnlComments: string;
  private dupTitratedDoseVM: TitratedDoseVM;
  private _noOfInstallments: number = 0;
  private _medClerkModifyReason: CListItem;
  private _nonCatalogueReason: CListItem;
  private _otherNONCatalogueReason: string = '';
  private _isOtherNONCatReasonMandatory: boolean = false;
  private _expiryDate: DateTime = DateTime.MinValue;
  private _quantity: string;
  private _doseUOM: CListItem = null;
  private _durationUOM: CListItem;
  private _PRNInstructionFreeText: string = String.Empty;
  private _SiteFreeText: string;
  private _originalDose: string;
  private _originalDoseUOM: CListItem;
  private original_IdentifyingOID: number = 0;
  private original_IdentifyingType: string;
  private identifyingOID: number = 0;
  private identifyingType: string;
  private identifyingName: string;
  private mcichildidentifyingName: string;
  private _FrequencyUOM: string;
  public IsMultiRouteUnChecked: boolean = false;
  public isDoseadministeteredmsg: boolean = false;
  private isAdministeredinAdvance: boolean = false;
  private _IsinDefiniteOmit: boolean = false;
  private _OmittedBy: string;
  private _OmitComments: string;
  private _IsinDefiniteOmitDTTM: DateTime = DateTime.MinValue;
  private ItemSubType: string;
  private MCIItemDisplay: string;
  private MCChilditem: string;
  private mCIItemDrugprop: string;
  private sMCILorenzoID: string;
  private sNamewithoutQuantitys: string;
  private sNamewithoutUOM: string;
  private sIdentifyingoriginalname: string;
  private PrescribableItemListIdnOID: number = 0;
  private sItemswithQuantityZero: string;
  private mCIIdentifyingName: string;
  private recordadminDTTM: DateTime = DateTime.MinValue;
  private lastAdministeredDTTM: DateTime = DateTime.MinValue;
  private mCVersion: string;
  private _dose: string = String.Empty;
  private _frequency: CListItem = null;
  private _direction: string =String.Empty;
  private _problemIndication: string;
  private _IndicationOverrideReason: string;
  private _modificationComments: string;
  private _duration: string;
  private _BrandName: string = 'Select brand';
  private _IsClearEnabled: boolean = false;
  private _completedate: boolean = false;
  private _Partialdate: boolean = false;
  private _month: CListItem;
  private _year: number = Number.MinValue;
  private _intervalBetweenInstallmentUOM: CListItem;
  private _variableDoseInstructions: string;
  private _upperDoseWidth: GridLength;
  private _HifenWidth: GridLength;
  private _lowerDoseWidth: GridLength;
  private _lowerdose: number = 0;
  private isClinicallyVerified: boolean = false;
  private isIDSNewmeds: boolean = false;
  private isClinicallyVerifiedUserChecked: boolean = false;
  public IsFormViewerDisable: boolean = false;
  //public delegate void ClinicallyVerifiedMeEventhandler();
  public ClinicallyVerified: Function;
  //public delegate void ClinicallyAuthorisedEventhandler();
  public ClinicallyAuthorised: Function;
  //public delegate void EPrescribeRule();
  public PrescribeRuleCompleted: Function;
  private _iscontentVisible: Visibility = Visibility.Collapsed;
  private _iscontentAdminTimesVisible: Visibility = Visibility.Collapsed;
  private _iscontentAdditionalOptions: Visibility = Visibility.Collapsed;
  private _isSVcontentAdditionalOptions: Visibility = Visibility.Collapsed;
  private _IsRsnEnabForTechval: boolean = false;
  private _isenableRSNFORMOD: boolean = false;
  private _isMCenableRSNFORMOD: boolean = false;
  private _isTitratedRSNFORMOD: boolean = false;
  private _doselabelvalue: string;
  private _isMandatoryRSNFORMOD: boolean = false;
  private _isMandatorySupplyinstr: boolean = false;
  private _isMandatoryMedClekSource: boolean = false;
  private _isMandatoryReasonForMedClerkModify: boolean = false;
  private _isenableAdditionalcomments: boolean = true;
  private _isenableModificationcomments: boolean = false;
  private _isenableOnbehalfOf: boolean = false;
  private _isMandatoryUOM: boolean = true;
  private _isMandatoryFrequency: boolean = false;
  private _isMandatoryStartDTTM: boolean = false;
  private _isMandatoryStatType: boolean = false;
  private _isMultiIng: boolean = false;
  private _IsStrengthinProduct: boolean = false;
  private _isenableDose: boolean = true;
  private _isenableDoseUOM: boolean = true;
  private _isenableRoute: boolean = true;
  private _isenableMultiRoute: boolean = false;
  private _isenableMultiRoutechkBox: boolean = true;
  private _isAllowMultiRoute: boolean = true;
  private _isenableDoseType: boolean = true;
  private _isenableProblemIndication: boolean = true;
  private _isenableStationeryType: boolean = true;
  private _isenableSupplyInstruction: boolean = true;
  private _isvisibleSupplyInstruction: Visibility = Visibility.Visible;
  private _isenableTreatmentCont: boolean = true;
  private _isenableFrequency: boolean = true;
  private _isenableAsrequired: boolean = true;
  private _isenableDuration: boolean = true;
  private _isenableMonthYear: boolean = false;
  private _isenableStartdate: boolean = false;
  private _isValidateDose: boolean = false;
  private _isvisibletreatmentcontinue: Visibility = Visibility.Collapsed;
  private _completeStartDTTM: DateTime = DateTime.MinValue;
  private _isenableDosage: boolean = false;
  private _isVisibleClinicallyverify: Visibility;
  private _IsVisiblenewmeds: Visibility;
  private _verificationComments: string;
  private _isDoseMandatory: boolean = true;
  private _isDosageFormMandatory: boolean = false;
  private _isOldDosageFormMandatory: boolean = false;
  public _isStrengthMandatory: boolean = false;
  public isRuleexecuted: boolean = false;
  public isInfuERuleexecuted: boolean = false;
  public isRuleexecinprogress: boolean = false;
  public isConflictsgenerated: boolean = false;
  private _IsStrengthMandatoryAsPerRule: boolean = false;
  private _IsStrengthMandatoryByDoseUOMType: boolean = false;
  public _isBrandMandatory: Visibility = Visibility.Collapsed;
  public _DosageFormVisibility: Visibility;
  public _StrengthVisibility: Visibility;
  public _SiteVisibility: Visibility = Visibility.Visible;
  public _isSiteMandatory: boolean = false;
  public _isSiteEnabled: boolean = false;
  public _IsenableAdminMthd: boolean = true;
  private _IsenableStopDate: boolean = true;
  private _IsConflictExistSealInfo: boolean = false;
  private _isQuantityEnabled: boolean = true;
  private _isQuantityMandatory: boolean = false;
  private _replaceDrugActiveStatus: string;
  private _IsAlwaysuseDosecalc: boolean = false;
  private _prnInstruction: CListItem;
  private _isPRNInstructionMandatory: boolean = false;
  public lstAmendedFlds: List<string> = new List<string>();
  private isRecordAdminMsg1Visible: Visibility = Visibility.Collapsed;
  private recordAdminMsg1: string;
  private recordAdminMsg1_Tooltip: string;
  private isRecordAdminTabEnabled: boolean = false;
  private recordadmin: RecordAdminVM;
  private _ingredientWarning: string;
  //public delegate void RouteFormEventArgs();
  public RouteFormChangedEvent: Function;
  //public delegate void ClerkSVRegimePartialDateUpdEventArgs(DatedtPartialDT);
  public ClerkSVRegimePartialDateUpdEvent: Function;
  public _isRouteChanged: boolean = false;
  public _isDosageFormChanged: boolean = false;
  public IsRegenerateConflictsForBrand: boolean = false;
  public PrescibableItemOID: number = 0;
  public isFormViewDataLoaded: boolean = false;
  public isUptoprodrule: boolean = false;
  public itemlist: string;
  public MCuptoIdentifyingoid: number = 0;
  public MCuptoIdentifyingtype: string;
  private _isModificationReasonExists: boolean = false;
  private _followUpStatStartDTTM: DateTime = DateTime.MinValue;
  private _followUpStatFirstAdmnSchTime: DateTime = DateTime.MinValue;
  public oPrescitemVM: PrescriptionItemVM;
  public oOriginalValues: OriginalValues;
  private _firstscheduledatetime: DateTime = DateTime.MinValue;
  public IsUserUpdatedChangingDose: boolean = false;
  public isTechMCIUOM: boolean = false;
  public Formchanged: boolean = false;
  public IsDueNow: boolean = false;
  public Setflag: boolean = false;
  private _Ordersets: CListItem;
  private _PrescribingNote: string;
  private _sPrescribingNote: string;
  private _OrdersetAssociationOID: string;
  private _isOrderSetICONVisible: Visibility = Visibility.Collapsed;
  private _isPrescribingNoteICONVisible: Visibility = Visibility.Collapsed;
  private _isFormViewClick: boolean = false;
  private _highRiskMsg: string;
  private _DosageFormMoreClicked: boolean = false;
  public IsFluidAssociated: boolean = false;
  public IsMCIProduct: boolean = false;
  public InProgSchDTTM: DateTime = DateTime.MinValue;
  public _isCondDoseMonitoringPeriodReq: boolean = false;
  private _IsGetPresWithoutFrequency: boolean = false;
  public ParentMCIItem: PrescriptionItemVM = null;
  public PresInfusionItemForFluid: PrescriptionItemVM = null;
  private _reviewafter: string;
  public _ReviewAfterDTTM: DateTime = DateTime.MinValue;
  public _LastReviewedDTTM: DateTime = DateTime.MinValue;
  private _IsIgnoreAdminMethod: boolean = false;
  public IsChangingDoseContentModified: boolean = false;
  public bIsFlowRateAtRecAdmShown: boolean = true;
  private _IsPresItemIgnoreAdminMethod: boolean = false;
  private _IsReviewAlert: boolean = false;
  private originalIdentifyingName: string;
  private _GroupHeaderName: string;
  public launchsupplyinstrmezzanineCheck: boolean = false;
  public QuantTaboutFormClose: boolean = false;
  public IsCancelClick: boolean = false;
  //public delegate void TechCASupplyInstr(PrescriptionItemVM BasicVM);
  public TechCASupplyInstrClick: Function;
  private _IndentifyingDrugName: string;
  public TVMsgFormClose: boolean = false;
  private _IsDoNotOpenFVForOrderSet: boolean = null;
  public StopTVMsgFromStepVar: boolean = false;
  public PrnInstructionLoaded = new EventEmitter(); 
  public DynamicControlIsLoaded : boolean = false;
  public DynamicControlEndInstallLoaded = new EventEmitter();
  public get IsDoNotOpenFVForOrderSet(): boolean {
    return this._IsDoNotOpenFVForOrderSet;
  }
  public set IsDoNotOpenFVForOrderSet(value: boolean) {
    this._IsDoNotOpenFVForOrderSet = value;
  }
  private _DcIconTypeId: number = 0;
  public get DcIconTypeId(): number {
    return this._DcIconTypeId;
  }
  public set DcIconTypeId(value: number) {
    this._DcIconTypeId = value;
    // NotifyPropertyChanged("DcIconTypeId");
  }
  private _isEnableStartdtSeq: boolean = true;
  public get IsEnableStartdtSeq(): boolean {
    return (
      this._isEnableStartdtSeq &&
      (this == null ||
        (this != null && this.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsEnableStartdtSeq(value: boolean) {
    if (this._isEnableStartdtSeq != value) {
      this._isEnableStartdtSeq = value;
      if (this.InfusionDetails != null) {
        if (this.IsEnableStartdtSeq) {
          this.InfusionDetails.IsMandatoryStartdtSeq = true;
        } else {
          this.InfusionDetails.IsMandatoryStartdtSeq = false;
        }
      }
      // super.NotifyPropertyChanged("IsEnableStartdtSeq");
    }
  }
  private _IsDCIconVisible: Visibility = Visibility.Collapsed;
  public get IsDCIconVisible(): Visibility {
    return this._IsDCIconVisible;
  }
  public set IsDCIconVisible(value: Visibility) {
    if (this._IsDCIconVisible != value) {
      if (
        MedicationCommonProfileData.PrescribeConfig != null &&
        MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
      ) {
        this._IsDCIconVisible = value;
      } else {
        this._IsDCIconVisible = Visibility.Collapsed;
      }
      this.SetDCIconInFV();
      //NotifyPropertyChanged("IsDCIconVisible");
      if (
        this.InfusionType != null &&
        !String.IsNullOrEmpty(this.InfusionType.Value) &&
        String.Equals(
          this.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.IsDCIconVisibleForContInf = Visibility.Collapsed;
      } else {
        this.IsDCIconVisibleForContInf = this.IsDCIconVisible;
      }
      if (
        this.InfusionType != null &&
        !String.IsNullOrEmpty(this.InfusionType.Value) &&
        String.Equals(
          this.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.IsDCIconVisibleForIntInf = Visibility.Collapsed;
      } else {
        this.IsDCIconVisibleForIntInf = this.IsDCIconVisible;
      }
    }
  }
  private _IsDCIconVisibleForContInf: Visibility = Visibility.Collapsed;
  public get IsDCIconVisibleForContInf(): Visibility {
    return this._IsDCIconVisibleForContInf;
  }
  public set IsDCIconVisibleForContInf(value: Visibility) {
    if (this._IsDCIconVisibleForContInf != value) {
      if (
        MedicationCommonProfileData.PrescribeConfig != null &&
        MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
      ) {
        this._IsDCIconVisibleForContInf = value;
      } else {
        this._IsDCIconVisibleForContInf = Visibility.Collapsed;
      }
      this.SetDCIconInFV();
      // NotifyPropertyChanged("IsDCIconVisibleForContInf");
    }
  }
  private _IsDCIconVisibleForIntInf: Visibility = Visibility.Collapsed;
  public get IsDCIconVisibleForIntInf(): Visibility {
    return this._IsDCIconVisibleForIntInf;
  }
  public set IsDCIconVisibleForIntInf(value: Visibility) {
    if (this._IsDCIconVisibleForIntInf != value) {
      if (
        MedicationCommonProfileData.PrescribeConfig != null &&
        MedicationCommonProfileData.PrescribeConfig.EnableDoseCalc
      ) {
        this._IsDCIconVisibleForIntInf = value;
      } else {
        this._IsDCIconVisibleForIntInf = Visibility.Collapsed;
      }
      this.SetDCIconInFV();
      // NotifyPropertyChanged("IsDCIconVisibleForIntInf");
    }
  }
  private _DCIconName: string = MedImage.GetPath(MedImages.DCIcon);
  public get DCIconName(): string {
    return this._DCIconName;
  }
  public set DCIconName(value: string) {
    if (this._DCIconName != value) {
      this._DCIconName = value;
      // NotifyPropertyChanged("DCIconName");
    }
  }
  public DCCalDTTM: DateTime = DateTime.MinValue;
  public IsfrmViewBasicLoaded: boolean = false;
  public actualClerkingValues: ActualClerkingValues;
  public OriginalMultiDoseDetails: ObservableCollection<MultipleDoseDetail>;
  //Not Required for LHS. To be Re-Visited.
  //public omedtechvalProdOpt: medtechvalProdOpt;
  public IsInfusionRateChanged: boolean = false;
  private _FluidSupplyInstrText: string;
  public get FluidSupplyInstrText(): string {
    return this._FluidSupplyInstrText;
  }
  public set FluidSupplyInstrText(value: string) {
    if (value != this._FluidSupplyInstrText) {
      this._FluidSupplyInstrText = value;
    }
  }
  private _IsSequenceStartDTTMReset: boolean = false;
  public get IsSequenceStartDTTMReset(): boolean {
    return this._IsSequenceStartDTTMReset;
  }
  public set IsSequenceStartDTTMReset(value: boolean) {
    this._IsSequenceStartDTTMReset = value;
  }
  private _IsMCIChildcomponent: boolean = false;
  public get IsMCIChildcomponent(): boolean {
    return this._IsMCIChildcomponent;
  }
  public set IsMCIChildcomponent(value: boolean) {
    this._IsMCIChildcomponent = value;
  }
  private _IsFilledDoseRegime: boolean = false;
  public get IsFilledDoseRegime(): boolean {
    return this._IsFilledDoseRegime;
  }
  public set IsFilledDoseRegime(value: boolean) {
    this._IsFilledDoseRegime = value;
  }
  private _AmendedCurrDTTM: DateTime = DateTime.MinValue;
  public get AmendedCurrDTTM(): DateTime {
    return this._AmendedCurrDTTM;
  }
  public set AmendedCurrDTTM(value: DateTime) {
    this._AmendedCurrDTTM = value;
  }
  private _IsAmendedStopDTTMForAlternateDaysFreq: boolean = false;
  public get IsAmendedStopDTTMForAlternateDaysFreq(): boolean {
    return this._IsAmendedStopDTTMForAlternateDaysFreq;
  }
  public set IsAmendedStopDTTMForAlternateDaysFreq(value: boolean) {
    this._IsAmendedStopDTTMForAlternateDaysFreq = value;
  }
  private _NextSlotGenerateStartDTTM: DateTime = DateTime.MinValue;
  public get NextSlotGenerateStartDTTM(): DateTime {
    return this._NextSlotGenerateStartDTTM;
  }
  public set NextSlotGenerateStartDTTM(value: DateTime) {
    this._NextSlotGenerateStartDTTM = value;
  }
  private _isSequentiallinkvisi: Visibility = Visibility.Collapsed;
  public get IsSequentiallinkvisi(): Visibility {
    return this._isSequentiallinkvisi;
  }
  public set IsSequentiallinkvisi(value: Visibility) {
    if (this._isSequentiallinkvisi != value) {
      this._isSequentiallinkvisi = value;
      // super.NotifyPropertyChanged("IsSequentiallinkvisi");
    }
  }
  public oIndiactionProcessDetails: IndiactionProcessDetails;
  public TempDoseDtl: TempDoseDetail;
  public get FrequencyUOM(): string {
    return this._FrequencyUOM;
  }
  public set FrequencyUOM(value: string) {
    this._FrequencyUOM = value;
  }
  private _IsInfusionFormViewer: boolean = false;
  public get IsInfusionFormViewer(): boolean {
    if (
      PatientContext.IsINFUSIONON &&
      (this.InfusionType != null || this.IsInfContiniousFormLoaded)
    ) {
      this._IsInfusionFormViewer = true;
    } else {
      this._IsInfusionFormViewer = false;
    }
    return this._IsInfusionFormViewer;
  }
  public set IsInfusionFormViewer(value: boolean) {
    this._IsInfusionFormViewer = value;
  }
  private _IsLoadingDataForAmend: boolean = false;
  public get IsLoadingDataForAmend(): boolean {
    return this._IsLoadingDataForAmend;
  }
  public set IsLoadingDataForAmend(value: boolean) {
    this._IsLoadingDataForAmend = value;
  }
  private _IsGetAdhocMCIRuleFromGetPresItemDetls: boolean = false;
  public get IsGetAdhocMCIRuleFromGetPresItemDetls(): boolean {
    return this._IsGetAdhocMCIRuleFromGetPresItemDetls;
  }
  public set IsGetAdhocMCIRuleFromGetPresItemDetls(value: boolean) {
    this._IsGetAdhocMCIRuleFromGetPresItemDetls = value;
  }
  private _isAdhocitem: boolean = false;
  public get isAdhocitem(): boolean {
    return this._isAdhocitem;
  }
  public set isAdhocitem(value: boolean) {
    if (this._isAdhocitem != value) {
      this._isAdhocitem = value;
      // NotifyPropertyChanged("isAdhocitem");
    }
  }
  private _IsLoadingDataForOrderSentence: boolean = false;
  public get IsLoadingDataForOrderSentence(): boolean {
    return this._IsLoadingDataForOrderSentence;
  }
  public set IsLoadingDataForOrderSentence(value: boolean) {
    this._IsLoadingDataForOrderSentence = value;
  }
  //public delegate void VMRouteFormForCDChange(PrescriptionItemVM PresItemVM);
  public VMRouteFormForCDChangedEvent: Function;
  //public delegate void MultiRouteUnSubscribe();
  public MultiRouteUnSubscribeEvent: Function;
  public CallMultiRoutePropertyChanged: Function;
  public CallMultiSelectDosetypeChanged: Function;
  public IsSteppedDoseStartDTTMChanged: boolean = false;
  private _IsAdditionalDoseOpted: boolean = false;
  public get IsAdditionalDoseOpted(): boolean {
    return this._IsAdditionalDoseOpted;
  }
  public set IsAdditionalDoseOpted(value: boolean) {
    this._IsAdditionalDoseOpted = value;
  }
  public IsAdditionalDoseConfirmMsgShown: boolean = false;
  public IsStepDoseStartDTTMRestored: boolean = false;
  public IsOKButtonClicked: boolean = false;
  public OriginalFrequencyOID: number = 0;
  public OriginalAsRequired: boolean = false;
  public IsSteppedSTATDose: string;
  public IsSteppedSTATDoseUOM: CListItem;
  public IsFirstSteppedSchedDTTM: DateTime = DateTime.MinValue;
  public ParentUniqueIDofSTAT: number = 0;
  public IsRouteResetRequired: boolean = false;
  public IsCallFromRouteResetOnBrandSelection: boolean = false;
  private _IsEnableInfusionRateSteppedVariable: boolean = true;
  public get IsEnableInfusionRateSteppedVariable(): boolean {
    return this._IsEnableInfusionRateSteppedVariable;
  }
  public set IsEnableInfusionRateSteppedVariable(value: boolean) {
    this._IsEnableInfusionRateSteppedVariable = value;
    // NotifyPropertyChanged("IsEnableInfusionRateSteppedVariable");
  }
  private _IsEnableVariableInst: boolean = true;
  public get IsEnableVariableInst(): boolean {
    return this._IsEnableVariableInst && this.IsSteppedVariableFormEnabled;
  }
  public set IsEnableVariableInst(value: boolean) {
    this._IsEnableVariableInst = value;
    // NotifyPropertyChanged("IsEnableVariableInst");
  }
  private _IsSteppedVariableFormEnabled: boolean = true;
  public get IsSteppedVariableFormEnabled(): boolean {
    return this._IsSteppedVariableFormEnabled;
  }
  public set IsSteppedVariableFormEnabled(value: boolean) {
    this._IsSteppedVariableFormEnabled = value;
  }
  private _SelectedsupplyInstruction: ObservableCollection<CListItem>;
  public get SelectedsupplyInstruction(): ObservableCollection<CListItem> {
    return this._SelectedsupplyInstruction;
  }
  public set SelectedsupplyInstruction(value: ObservableCollection<CListItem>) {
    this._SelectedsupplyInstruction = value;
    // NotifyPropertyChanged("SelectedsupplyInstruction");
  }
  private _OriginalsupplyInstruction: ObservableCollection<CListItem>;
  public get OriginalsupplyInstruction(): ObservableCollection<CListItem> {
    return this._OriginalsupplyInstruction;
  }
  public set OriginalsupplyInstruction(value: ObservableCollection<CListItem>) {
    this._OriginalsupplyInstruction = value;
    // NotifyPropertyChanged("OriginalsupplyInstruction");
  }
  private _PrevSelectedsupplyInstruction: ObservableCollection<CListItem>;
  public get PrevSelectedsupplyInstruction(): ObservableCollection<CListItem> {
    return this._PrevSelectedsupplyInstruction;
  }
  public set PrevSelectedsupplyInstruction(
    value: ObservableCollection<CListItem>
  ) {
    this._PrevSelectedsupplyInstruction = value;
    //NotifyPropertyChanged("PrevSelectedsupplyInstruction");
  }
  private _SupplyInstructionfromTV: ObservableCollection<CListItem>;
  public get SupplyInstructionfromTV(): ObservableCollection<CListItem> {
    return this._SupplyInstructionfromTV;
  }
  public set SupplyInstructionfromTV(value: ObservableCollection<CListItem>) {
    this._SupplyInstructionfromTV = value;
  }
  public get IsReviewAlert(): boolean {
    return this._IsReviewAlert;
  }
  public set IsReviewAlert(value: boolean) {
    this._IsReviewAlert = value;
    //NotifyPropertyChanged("IsReviewAlert");
  }
  private _IsReviewHistoryVisible: Visibility = Visibility.Collapsed;
  public get IsReviewHistoryVisible(): Visibility {
    return this._IsReviewHistoryVisible;
  }
  public set IsReviewHistoryVisible(value: Visibility) {
    this._IsReviewHistoryVisible = value;
  }
  private _ReviewHistory: StringBuilder;
  public get ReviewHistory(): StringBuilder {
    return this._ReviewHistory;
  }
  public set ReviewHistory(value: StringBuilder) {
    this._ReviewHistory = value;
  }
  public get ReviewAfterDTTM(): DateTime {
    return this._ReviewAfterDTTM;
  }
  public set ReviewAfterDTTM(value: DateTime) {
    if (value != this._ReviewAfterDTTM) {
      this._ReviewAfterDTTM = value;
      //NotifyPropertyChanged("ReviewAfterDTTM");
    }
  }
  private _ReviewComments: string;
  public get ReviewComments(): string {
    return this._ReviewComments;
  }
  public set ReviewComments(value: string) {
    if (value != this._ReviewComments) {
      this._ReviewComments = value;
      //NotifyPropertyChanged("ReviewComments");
    }
  }
  private _ReviewRequestedBy: string;
  public get ReviewRequestedBy(): string {
    return this._ReviewRequestedBy;
  }
  public set ReviewRequestedBy(value: string) {
    if (value != this._ReviewRequestedBy) {
      this._ReviewRequestedBy = value;
      //NotifyPropertyChanged("ReviewRequestedBy");
    }
  }
  private _ReviewType: string;
  public get ReviewType(): string {
    return this._ReviewType;
  }
  public set ReviewType(value: string) {
    if (value != this._ReviewType) {
      this._ReviewType = value;
      //NotifyPropertyChanged("ReviewType");
    }
  }
  private _PreDefinedMCI: boolean = false;
  public get PreDefinedMCI(): boolean {
    return this._PreDefinedMCI;
  }
  public set PreDefinedMCI(value: boolean) {
    if (this._PreDefinedMCI != value) {
      this._PreDefinedMCI = value;
      //NotifyPropertyChanged("PreDefinedMCI");
    }
  }
  private _DisableConflictsMCI: boolean = false;
  public get DisableConflictsMCI(): boolean {
    return this._DisableConflictsMCI;
  }
  public set DisableConflictsMCI(value: boolean) {
    if (this._DisableConflictsMCI != value) {
      this._DisableConflictsMCI = value;
      //NotifyPropertyChanged("DisableConflictsMCI");
    }
  }
  public IsReviewAfterModifiedInAmend: boolean = false;
  public get LastReviewedDTTM(): DateTime {
    return this._LastReviewedDTTM;
  }
  public set LastReviewedDTTM(value: DateTime) {
    if (value != this._LastReviewedDTTM) {
      this._LastReviewedDTTM = value;
      //NotifyPropertyChanged("LastReviewedDTTM");
    }
  }
  private _CurrentReviewAfterVisible: Visibility = Visibility.Collapsed;
  public get CurrentReviewAfterVisible(): Visibility {
    return this._CurrentReviewAfterVisible;
  }
  public set CurrentReviewAfterVisible(value: Visibility) {
    this._CurrentReviewAfterVisible = value;
  }
  private _ReviewAfterVisible: Visibility = Visibility.Collapsed;
  public get ReviewAfterVisible(): Visibility {
    return this._ReviewAfterVisible;
  }
  public set ReviewAfterVisible(value: Visibility) {
    if (this._ReviewAfterVisible != value) {
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        this._ReviewAfterVisible = value;
      } else {
        this._ReviewAfterVisible = Visibility.Collapsed;
      }
      if (
        this._ReviewAfterVisible == Visibility.Visible &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails.SequenceInfo != null
      ) {
        this._ReviewAfterVisible = Visibility.Collapsed;
      }
      //super.NotifyPropertyChanged("ReviewAfterVisible");
    }
  }
  private _ReviewAfterCommentsVisible: Visibility = Visibility.Collapsed;
  public get ReviewAfterCommentsVisible(): Visibility {
    return this._ReviewAfterCommentsVisible;
  }
  public set ReviewAfterCommentsVisible(value: Visibility) {
    if (this._ReviewAfterCommentsVisible != value) {
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        this._ReviewAfterCommentsVisible = value;
      } else {
        this._ReviewAfterCommentsVisible = Visibility.Collapsed;
      }
      //super.NotifyPropertyChanged("ReviewAfterCommentsVisible");
    }
  }
  private _IsReviewAfterMandatoryByConfig: boolean = false;
  public get IsReviewAfterMandatoryByConfig(): boolean {
    return this._IsReviewAfterMandatoryByConfig;
  }
  public set IsReviewAfterMandatoryByConfig(value: boolean) {
    this._IsReviewAfterMandatoryByConfig = value;
  }
  private _ReviewAfterIconVisible: Visibility = Visibility.Collapsed;
  public get ReviewAfterIconVisible(): Visibility {
    return this._ReviewAfterIconVisible;
  }
  public set ReviewAfterIconVisible(value: Visibility) {
    if (this._ReviewAfterIconVisible != value) {
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) {
        this._ReviewAfterIconVisible = value;
      } else {
        this._ReviewAfterIconVisible = Visibility.Collapsed;
      }
      //super.NotifyPropertyChanged("ReviewAfterIconVisible");
    }
  }
  _ReviewAfterIconTooltip: string;
  public get ReviewAfterIconTooltip(): string {
    return this._ReviewAfterIconTooltip;
  }
  public set ReviewAfterIconTooltip(value: string) {
    this._ReviewAfterIconTooltip = value;
    //NotifyPropertyChanged("ReviewAfterIconTooltip");
  }
  _ReviewAfterDateTime: string;
  public get ReviewAfterDateTime(): string {
    return this._ReviewAfterDateTime;
  }
  public set ReviewAfterDateTime(value: string) {
    this._ReviewAfterDateTime = value;
    //NotifyPropertyChanged("ReviewAfterDateTime");
  }
  private _ReviewRequestComments: string;
  public get ReviewRequestComments(): string {
    return this._ReviewRequestComments;
  }
  public set ReviewRequestComments(value: string) {
    if (!this.lstAmendedFlds.Contains('ReviewRequestComments')) {
      this.lstAmendedFlds.Add('ReviewRequestComments');
      if (
        this.bIsAmend &&
        !this.IsFirstDoseClearForAmend &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        this.IsenableRSNFORMOD
      ) {
        this.DoChangesForAmend();
      }
    }
    this._ReviewRequestComments = value;
    //NotifyPropertyChanged("ReviewRequestComments");
  }
  public ManageReviewDetail: IPPMAManagePrescSer.ManageReviewPeriod;
  public ReviewAfterCalRequired: boolean = true;
  public DoReviewOutcomeGenerate: boolean = true;
  private _isenableReviewAfter: boolean = true;
  public get IsenableReviewAfter(): boolean {
    return this._isenableReviewAfter;
  }
  public set IsenableReviewAfter(value: boolean) {
    if (value != this._isenableReviewAfter) {
      this._isenableReviewAfter = value;
      //NotifyPropertyChanged("IsenableReviewAfter");
    }
  }
  private _ReviewAfterMandatory: boolean = false;
  public get ReviewAfterMandatory(): boolean {
    return this._ReviewAfterMandatory;
  }
  public set ReviewAfterMandatory(value: boolean) {
    this._ReviewAfterMandatory = value;
    //NotifyPropertyChanged("ReviewAfterMandatory");
  }
  public get IsCondDoseMonitoringPeriodReq(): boolean {
    return this._isCondDoseMonitoringPeriodReq;
  }
  public set IsCondDoseMonitoringPeriodReq(value: boolean) {
    if (this._isCondDoseMonitoringPeriodReq != value) {
      this._isCondDoseMonitoringPeriodReq = value;
      //NotifyPropertyChanged("IsCondDoseMonitoringPeriodReq");
    }
  }
  public get DosageFormMoreClicked(): boolean {
    return this._DosageFormMoreClicked;
  }
  public set DosageFormMoreClicked(value: boolean) {
    if (this._DosageFormMoreClicked != value) {
      this._DosageFormMoreClicked = value;
      //NotifyPropertyChanged("DosageFormMoreClicked");
    }
  }
  public lstDRCAmendedFlds: List<string> = new List<string>();
  public get IsRsnEnabForTechval(): boolean {
    return this._IsRsnEnabForTechval;
  }
  public set IsRsnEnabForTechval(value: boolean) {
    if (this._IsRsnEnabForTechval != value) {
      this._IsRsnEnabForTechval = value;
      // NotifyPropertyChanged("IsRsnEnabForTechval");
    }
  }
  private oSequenceDetail: SequenceDetail;
  public get SequenceInfo(): SequenceDetail {
    return this.oSequenceDetail;
  }
  public set SequenceInfo(value: SequenceDetail) {
    if (this.oSequenceDetail != value) {
      this.oSequenceDetail = value;
      //NotifyPropertyChanged("SequenceInfo");
    }
  }
  public DoseUOMTypeCode: Dictionary<string, string> = new Dictionary<
    string,
    string
  >();
  constructor();
  constructor(oPrescriptionItemVM?: PrescriptionItemVM);
  constructor(oPrescriptionItemVM?: PrescriptionItemVM) {
    super();
    switch (arguments.length) {
      case 1:
        this.oPrescitemVM = oPrescriptionItemVM;
        this.oOriginalValues = new OriginalValues();
        this.actualClerkingValues = new ActualClerkingValues();
        break;
    }
  }
  public InitializationAdminTimes(): void {
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) == 0
    ) {
      this.AdminTimes = new AdminScheduleTimeVM();
      this.AdminTimes.SlotModeChanged = (s,e) => {
        this.AdminTimes_SlotModeChanged();
      };
      if (this.oPrescitemVM != null && this.AdminTimes != null) {
        this.AdminTimes.OriginalFrequencyOID = this.OriginalFrequencyOID;
        this.AdminTimes.OriginalAsRequired = this.OriginalAsRequired;
        this.AdminTimes.Actioncode = Convert.ToString(this.oPrescitemVM.ActionCode);
      }
    }
  }
  public get IsIgnoreAdminMethod(): boolean {
    return this._IsIgnoreAdminMethod;
  }
  public set IsIgnoreAdminMethod(value: boolean) {
    this._IsIgnoreAdminMethod = value;
  }
  private _IsDOSMultipleRouteType: boolean = false;
  public get IsDOSMultipleRouteType(): boolean {
    return this._IsDOSMultipleRouteType;
  }
  public set IsDOSMultipleRouteType(value: boolean) {
    this._IsDOSMultipleRouteType = value;
  }
  public get IsPresItemIgnoreAdminMethod(): boolean {
    return this._IsPresItemIgnoreAdminMethod;
  }
  public set IsPresItemIgnoreAdminMethod(value: boolean) {
    this._IsPresItemIgnoreAdminMethod = value;
  }
  private _IsPrescribedWithAdminMethod: boolean = false;
  public get IsPrescribedWithAdminMethod(): boolean {
    return this._IsPrescribedWithAdminMethod;
  }
  public set IsPrescribedWithAdminMethod(value: boolean) {
    this._IsPrescribedWithAdminMethod = value;
  }
  private _IsClearIVtoNonIVformStopDateTime: boolean = false;
  public get IsClearIVtoNonIVformStopDateTime(): boolean {
    return this._IsClearIVtoNonIVformStopDateTime;
  }
  public set IsClearIVtoNonIVformStopDateTime(value: boolean) {
    this._IsClearIVtoNonIVformStopDateTime = value;
  }
  private _IsDRCPerfomedForAmendment: boolean = false;
  public get IsDRCPerfomedForAmendment(): boolean {
    return this._IsDRCPerfomedForAmendment;
  }
  public set IsDRCPerfomedForAmendment(value: boolean) {
    this._IsDRCPerfomedForAmendment = value;
  }
  private _IsMedsFromDOS: boolean = false;
  public get IsMedsFromDOS(): boolean {
    return this._IsMedsFromDOS;
  }
  public set IsMedsFromDOS(value: boolean) {
    this._IsMedsFromDOS = value;
  }
  private _IsDoseCalcExist: boolean = false;
  public get IsDoseCalcExist(): boolean {
    return this._IsDoseCalcExist;
  }
  public set IsDoseCalcExist(value: boolean) {
    this._IsDoseCalcExist = value;
    // NotifyPropertyChanged("IsDoseCalcExist");
  }
  private _DoseCalcExist: string = '';
  public get DoseCalcExist(): string {
    return this._DoseCalcExist;
  }
  public set DoseCalcExist(value: string) {
    this._DoseCalcExist = value;
    // NotifyPropertyChanged("DoseCalcExist");
  }
  private _PreviousDoseCalcExist: string=String.Empty;
  public get PreviousDoseCalcExist(): string {
    return this._PreviousDoseCalcExist;
  }
  public set PreviousDoseCalcExist(value: string) {
    this._PreviousDoseCalcExist = value;
  }
  public get ReviewAfter(): string {
    return this._reviewafter;
  }
  public set ReviewAfter(value: string) {
    if (!String.Equals(value, '0')) {
      if (!this.isFormViewDataLoaded) {
        this._reviewafter = value;
        //NotifyPropertyChanged("ReviewAfter");
      } else {
        if (!this.lstAmendedFlds.Contains('ReviewAfter')) {
          this.lstAmendedFlds.Add('ReviewAfter');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._reviewafter = value;
        //NotifyPropertyChanged("ReviewAfter");
        if (
          (this.ReviewAfter != null &&
            !String.IsNullOrEmpty(this.ReviewAfter) &&
            String.Compare(this.ReviewAfter, '-1.79769313486232E+308') != 0 &&
            String.Compare(this.ReviewAfter, '-2147483648.0') != 0 &&
            String.Compare(this.ReviewAfter, '-2147483648') != 0 &&
            Convert.ToDouble(this.ReviewAfter) != Number.MinValue) ||
          (this._ReviewafterUOM != null &&
            !String.IsNullOrEmpty(this._ReviewafterUOM.Value))
        ) {
          this.ReviewAfterCommentsVisible = Visibility.Visible;
        } else if (
          (this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
            this.IsReviewAfterModifiedInAmend) ||
          (this.oPrescitemVM.ActionCode != ActivityTypes.Amend &&
            !this.IsReviewAfterModifiedInAmend)
        ) {
          this.ReviewAfterCommentsVisible = Visibility.Collapsed;
          this.ReviewRequestComments = String.Empty;
        }
        if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.ReviewAfterVisible == Visibility.Visible &&
          this.oPrescitemVM != null &&
          this.ReviewAfterCalRequired
        ) {
          this.oPrescitemVM.GetReviewAfterDatetime();
        }
      }
    }
  }
  private _discontinuereason: string;
  public get DiscontinueReason(): string {
    return this._discontinuereason;
  }
  public set DiscontinueReason(value: string) {
    this._discontinuereason = value;
    //NotifyPropertyChanged("DiscontinueReason");
  }
  //Not Required for LHS. To be Re-Visited.
  //private oMedDoseReason: Meddosecalcreason;
  private oChildWindow: ChildWindow;
  public AccessContraintControls: List<string> = new List<string>();
  private IsFBLinkVisible: Visibility = Visibility.Collapsed;
  public get FBLinkVisible(): Visibility {
    return this.IsFBLinkVisible;
  }
  public set FBLinkVisible(value: Visibility) {
    if (this.IsFBLinkVisible != value) {
      this.IsFBLinkVisible = value;
      //NotifyPropertyChanged("FBLinkVisible");
    }
  }
  public get IsRecordAdminMsg1Visible(): Visibility {
    return this.isRecordAdminMsg1Visible;
  }
  public set IsRecordAdminMsg1Visible(value: Visibility) {
    if (this.isRecordAdminMsg1Visible != value) {
      this.isRecordAdminMsg1Visible = value;
      //NotifyPropertyChanged("IsRecordAdminMsg1Visible");
      this.SetAdditionalOptionsVisibility();
      if (this.isRecordAdminMsg1Visible == Visibility.Collapsed)
        this.IsRecordAdminTabEnabled = false;
    }
  }
  private SetAdditionalOptionsVisibility(): void {
    if (
      this.isRecordAdminMsg1Visible == Visibility.Visible ||
      this._followUpStatMessageVisibility == Visibility.Visible
    ) {
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
          'F'
        ) &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails.IsRecordAdminDone
      ) {
        this.IscontentAdditionalOptions = Visibility.Collapsed;
        this.IsSVcontentAdditionalOptions = Visibility.Collapsed;
        this.IsFollowUpStatEnabled = true;
      } else if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        (String.Equals(
          this.DoseType.Value,
          DoseTypeCode.STEPPED,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.VARIABLE,
            StringComparison.CurrentCultureIgnoreCase
          ) ||
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.CurrentCultureIgnoreCase
          ))
      ) {
        this.IsSVcontentAdditionalOptions = Visibility.Visible;
        this.IscontentAdditionalOptions = Visibility.Collapsed;
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ParentbaseVM != null &&
          this.oPrescitemVM.ParentbaseVM.MedsResolve != null &&
          this.oPrescitemVM.ParentbaseVM.MedsResolve.Count > 0
        ) {
          let bItem = this.oPrescitemVM.ParentbaseVM.MedsResolve.Where(
            (x) =>
              x != null &&
              x.FormViewerDetails != null &&
              x.FormViewerDetails.BasicDetails != null &&
              (x.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT ==
                this.oPrescitemVM.UniqueRowID ||
                x.FormViewerDetails.BasicDetails.ParentUniqueIDofSTAT ==
                  this.oPrescitemVM.UniqueRowItemID) &&
              x.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals('S')
          );
          if (bItem != null && bItem.Count() > 0) {
            this.IsFollowUpStat = true;
            this.IsFollowUpStatEnabled = false;
          }
        }
      } else {
        this.IscontentAdditionalOptions = Visibility.Visible;
        this.IsSVcontentAdditionalOptions = Visibility.Collapsed;
      }
    } else {
      this.IscontentAdditionalOptions = Visibility.Collapsed;
      this.IsSVcontentAdditionalOptions = Visibility.Collapsed;
      this.IsFollowUpStatEnabled = true;
    }
  }
  public get RecordAdminMsg1(): string {
    return this.recordAdminMsg1;
  }
  public set RecordAdminMsg1(value: string) {
    if (this.recordAdminMsg1 != value) {
      this.recordAdminMsg1 = value;
      //NotifyPropertyChanged("RecordAdminMsg1");
      if (this.bIsAmend == false)
        this.IsRecordAdminMsg1Visible = String.IsNullOrEmpty(
          this.recordAdminMsg1
        )
          ? Visibility.Collapsed
          : this.IsAuthorise || this.IsMCIAuthorise
          ? Visibility.Collapsed
          : Visibility.Visible;
      if (
        this.oPrescitemVM.FormViewerDetails.BasicDetails.OrdersetSequence !=
        null
      ) {
        this.IsRecordAdminMsg1Visible = Visibility.Collapsed;
      }
    }
  }
  public get RecordAdminMsg1_Tooltip(): string {
    return this.recordAdminMsg1_Tooltip;
  }
  public set RecordAdminMsg1_Tooltip(value: string) {
    if (this.recordAdminMsg1_Tooltip != value) {
      this.recordAdminMsg1_Tooltip = value;
      //NotifyPropertyChanged("RecordAdminMsg1_Tooltip");
    }
  }
  private _followUpStatMessage: string;
  public get FollowUpStatMessage(): string {
    return this._followUpStatMessage;
  }
  public set FollowUpStatMessage(value: string) {
    if (this._followUpStatMessage != value) {
      this._followUpStatMessage = value;
      //NotifyPropertyChanged("FollowUpStatMessage");
      this.FollowUpStatMessageVisibility = String.IsNullOrEmpty(
        this._followUpStatMessage
      )
        ? Visibility.Collapsed
        : Visibility.Visible;
      if (
        this.oPrescitemVM.FormViewerDetails.BasicDetails.OrdersetSequence !=
        null
      ) {
        this.FollowUpStatMessageVisibility = Visibility.Collapsed;
      }
    }
  }
  private _followUpStatMessage_Tooltip: string;
  public get FollowUpStatMessage_Tooltip(): string {
    return this._followUpStatMessage_Tooltip;
  }
  public set FollowUpStatMessage_Tooltip(value: string) {
    if (this._followUpStatMessage_Tooltip != value) {
      this._followUpStatMessage_Tooltip = value;
      //NotifyPropertyChanged("FollowUpStatMessage_Tooltip");
    }
  }
  private _followUpStatMessageVisibility: Visibility = Visibility.Collapsed;
  public get FollowUpStatMessageVisibility(): Visibility {
    return this._followUpStatMessageVisibility;
  }
  public set FollowUpStatMessageVisibility(value: Visibility) {
    this._followUpStatMessageVisibility = value;
    // NotifyPropertyChanged("FollowUpStatMessageVisibility");
    this.SetAdditionalOptionsVisibility();
  }

  public IsRecordAdminTabEnabledChangedEvent: Function;
  public get IsRecordAdminTabEnabled(): boolean {
    return this.isRecordAdminTabEnabled;
  }
  public set IsRecordAdminTabEnabled(value: boolean) {
    if (this.isRecordAdminTabEnabled != value) {
      this.isRecordAdminTabEnabled = value;
      let IsSteppedDoseType: boolean =
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        String.Equals(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.InvariantCultureIgnoreCase
        );
      let _Stat: string = 'FRC-003';
      if (!String.IsNullOrEmpty(Common.Frc003Childs))
        _Stat = Common.Frc003Childs;
      if (
        IsSteppedDoseType ||
        (this.Frequency != null &&
          this.Frequency.Tag != null &&
          typeof this.Frequency.Tag.Equals(typeof Array<string>) &&
          ((<string[]>this.Frequency.Tag).length <= 2 ||
            ((<string[]>this.Frequency.Tag).length > 2 &&
              !_Stat.Contains((<string[]>this.Frequency.Tag)[2]))))
      )
        this.IsFollowUpStatEnabled = value ? false : true;
      //NotifyPropertyChanged("IsRecordAdminTabEnabled");
      if (this.IsRecordAdminTabEnabledChangedEvent != null) {
        this.IsRecordAdminTabEnabledChangedEvent();
      }
    }
  }
  public get RecordAdmin(): RecordAdminVM {
    return this.recordadmin;
  }
  public set RecordAdmin(value: RecordAdminVM) {
    if (this.recordadmin != value) {
      this.recordadmin = value;
      //NotifyPropertyChanged("RecordAdmin");
    }
  }
  private _AdditionaloptinFontWeight: FontWeight;
  public get AdditionaloptinFontWeight(): FontWeight {
    return this._AdditionaloptinFontWeight;
  }
  public set AdditionaloptinFontWeight(value: FontWeight) {
    if (this._AdditionaloptinFontWeight != value) {
      this._AdditionaloptinFontWeight = value;
      //NotifyPropertyChanged("AdditionaloptinFontWeight");
    }
  }
  public ClinicallyVerifiedComments: string;
  public ClinicallyVerifiedBy: string;
  public ClinicallyVerifiedAt: DateTime = DateTime.MinValue;
  public get ISAlwaysuseDosecalc(): boolean {
    return this._IsAlwaysuseDosecalc;
  }
  public set ISAlwaysuseDosecalc(value: boolean) {
    if (value != this._IsAlwaysuseDosecalc) {
      this._IsAlwaysuseDosecalc = value;
      //super.NotifyPropertyChanged("ISAlwaysuseDosecalc");
    }
  }
  public get ReplaceDrugActiveStatus(): string {
    return this._replaceDrugActiveStatus;
  }
  public set ReplaceDrugActiveStatus(value: string) {
    if (value != this._replaceDrugActiveStatus) {
      this._replaceDrugActiveStatus = value;
      //super.NotifyPropertyChanged("ReplaceDrugActiveStatus");
    }
  }
  public _IsRecAdmSiteEnabled: boolean = true;
  public get IsRecAdmSiteEnabled(): boolean {
    return this._IsRecAdmSiteEnabled && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsRecAdmSiteEnabled(value: boolean) {
    if (!Helper.ReferenceEquals(this._IsRecAdmSiteEnabled, value)) {
      this._IsRecAdmSiteEnabled = value;
      //super.NotifyPropertyChanged("IsRecAdmSiteEnabled");
    }
  }
  public get VerificationComments(): string {
    return this._verificationComments;
  }
  public set VerificationComments(value: string) {
    if (value != this._verificationComments) {
      if (
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !String.IsNullOrEmpty(value) &&
        this.oPrescitemVM != null &&
        this.oPrescitemVM.PrescriptionItemStatus ==
          CConstants.CLINICALLYVERIFIED &&
        !this.isClinicallyVerified &&
        String.IsNullOrEmpty(this.oPrescitemVM.OperationMode)
      ) {
        this.oPrescitemVM.OperationMode = 'M';
      }
      this._verificationComments = value;
      //super.NotifyPropertyChanged("VerificationComments");
    }
  }
  public get IsVisibleClinicallyverify(): Visibility {
    return this._isVisibleClinicallyverify;
  }
  public set IsVisibleClinicallyverify(value: Visibility) {
    if (value != this._isVisibleClinicallyverify) {
      this._isVisibleClinicallyverify = value;
      //super.NotifyPropertyChanged("IsVisibleClinicallyverify");
    }
  }
  public get IsValidateDose(): boolean {
    return this._isValidateDose;
  }
  public set IsValidateDose(value: boolean) {
    if (value != this._isValidateDose) {
      this._isValidateDose = value;
      //super.NotifyPropertyChanged("IsValidateDose");
    }
  }
  public get CompleteStartDTTM(): DateTime {
    return this._completeStartDTTM;
  }
  public set CompleteStartDTTM(value: DateTime) {
    if (this._completeStartDTTM.Date != value.Date) {
      this._completeStartDTTM = value;
      this.StartDTTM = value;
      if (this.IsClearlstAmendedFlds) {
        this.StartPrescriptionTime = value;
      }
      //super.NotifyPropertyChanged("CompleteStartDTTM");
      if (
        this.StartDTTM == DateTime.MinValue &&
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        (String.Equals(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) ||
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.STEPPED,
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.VARIABLE,
            StringComparison.OrdinalIgnoreCase
          )) &&
        this.ClerkSVRegimePartialDateUpdEvent != null
      ) {
        this.StartDTTM = CommonBB.GetServerDateTime().Date;
        this.ClerkSVRegimePartialDateUpdEvent(this.StartDTTM);
      }
    }
  }
  private _DueNowScheduleDTTM: DateTime = DateTime.MinValue;
  public get DueNowScheduleDTTM(): DateTime {
    return this._DueNowScheduleDTTM;
  }
  public set DueNowScheduleDTTM(value: DateTime) {
    if (this._DueNowScheduleDTTM != value) {
      this._DueNowScheduleDTTM = value;
    }
  }
  public get IsenableStartdate(): boolean {
    return this._isenableStartdate && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableStartdate(value: boolean) {
    if (value != this._isenableStartdate) {
      this._isenableStartdate = value;
      //super.NotifyPropertyChanged("IsenableStartdate");
    }
  }
  private _IsAmendStartDTTMBlank: boolean = false;
  public get IsInfAmendStartDTTMBlank(): boolean {
    return this._IsAmendStartDTTMBlank;
  }
  public set IsInfAmendStartDTTMBlank(value: boolean) {
    if (value != this._IsAmendStartDTTMBlank) {
      this._IsAmendStartDTTMBlank = value;
    }
  }
  public get IsenableMonthYear(): boolean {
    return this._isenableMonthYear;
  }
  public set IsenableMonthYear(value: boolean) {
    if (value != this._isenableMonthYear) {
      this._isenableMonthYear = value;
      //super.NotifyPropertyChanged("IsenableMonthYear");
    }
  }
  public get IsModificationReasonExists(): boolean {
    return this._isModificationReasonExists;
  }
  public set IsModificationReasonExists(value: boolean) {
    if (value != this._isModificationReasonExists) {
      this._isModificationReasonExists = value;
      //super.NotifyPropertyChanged("IsModificationReasonExists");
    }
  }
  public get IsenableDuration(): boolean {
    return this._isenableDuration && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableDuration(value: boolean) {
    if (value != this._isenableDuration) {
      if (
        this.FrequencyUOM != null &&
        String.Compare(this.FrequencyUOM, 'CC_IPONCENLY') == 0
      ) {
        value = false;
      }
      this._isenableDuration = value;
      if (this._isenableDuration && this.FollowUpStatLaunch == 'S') {
        this._isenableDuration = false;
      }
      if (
        value &&
        this.AccessContraintControls != null &&
        (this.AccessContraintControls.Contains('udDuration') ||
          this.AccessContraintControls.Contains('cboDuration'))
      ) {
        this._isenableDuration = false;
      }
      //super.NotifyPropertyChanged("IsenableDuration");
    }
  }
  public get IsenableAsrequired(): boolean {
    return this._isenableAsrequired && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableAsrequired(value: boolean) {
    if (value != this._isenableAsrequired) {
      if (
        this.FrequencyUOM != null &&
        String.Compare(this.FrequencyUOM, 'CC_IPONCENLY') == 0
      ) {
        value = false;
      }
      if (
        value &&
        this.AccessContraintControls != null &&
        this.AccessContraintControls.Contains('chkPRN')
      ) {
        this._isenableAsrequired = false;
      } else {
        this._isenableAsrequired = value;
      }
      // super.NotifyPropertyChanged("IsenableAsrequired");
    }
  }
  private _IsEnabledNonCatalogItemName: boolean = true;
  public get IsEnabledNonCatalogItemName(): boolean {
    return this._IsEnabledNonCatalogItemName;
  }
  public set IsEnabledNonCatalogItemName(value: boolean) {
    if (this._IsEnabledNonCatalogItemName != value) {
      this._IsEnabledNonCatalogItemName = value;
      // NotifyPropertyChanged("IsEnabledNonCatalogItemName");
    }
  }
  private _IsEnabledNonCatalogItem: boolean = true;
  public get IsEnabledNonCatalogItem(): boolean {
    return this._IsEnabledNonCatalogItem;
  }
  public set IsEnabledNonCatalogItem(value: boolean) {
    if (this._IsEnabledNonCatalogItem != value) {
      this._IsEnabledNonCatalogItem = value;
      // NotifyPropertyChanged("IsEnabledNonCatalogItem");
    }
  }
  private _isEnablePRNInst: boolean = false;
  public get IsEnablePRNInst(): boolean {
    return this._isEnablePRNInst && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsEnablePRNInst(value: boolean) {
    if (value != this._isEnablePRNInst) {
      if (
        value &&
        this.AccessContraintControls != null &&
        (this.AccessContraintControls.Contains('cboPRNInstruction') ||
          this.AccessContraintControls.Contains('cboPRNInstruction'))
      ) {
        this._isEnablePRNInst = false;
      } else {
        this._isEnablePRNInst = value;
      }
      // super.NotifyPropertyChanged("IsEnablePRNInst");
    }
  }
  private _isEnableInstalInst: boolean = true;
  private _isEnableInterBwtInstalValue: boolean = true;
  private _isEnableInterBwtInstalUoM: boolean = true;
  private _isEnableNoOfInstal: boolean = true;
  private _isEnableStrength: boolean = true;
  public get IsEnableInstalInst(): boolean {
    return this._isEnableInstalInst && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsEnableInstalInst(value: boolean) {
    if (this._isEnableInstalInst != value) {
      this._isEnableInstalInst = value;
      // super.NotifyPropertyChanged("IsEnableInstalInst");
    }
  }
  public get IsEnableInterBwtInstalValue(): boolean {
    return (
      this._isEnableInterBwtInstalValue &&
      this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsEnableInterBwtInstalValue(value: boolean) {
    if (this._isEnableInterBwtInstalValue != value) {
      this._isEnableInterBwtInstalValue = value;
      // super.NotifyPropertyChanged("IsEnableInterBwtInstalValue");
    }
  }
  public get IsEnableInterBwtInstalUoM(): boolean {
    return (
      this._isEnableInterBwtInstalUoM && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsEnableInterBwtInstalUoM(value: boolean) {
    if (this._isEnableInterBwtInstalUoM != value) {
      this._isEnableInterBwtInstalUoM = value;
      // super.NotifyPropertyChanged("IsEnableInterBwtInstalUoM");
    }
  }
  public get IsEnableNoOfInstal(): boolean {
    return this._isEnableNoOfInstal && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsEnableNoOfInstal(value: boolean) {
    if (this._isEnableNoOfInstal != value) {
      this._isEnableNoOfInstal = value;
      // super.NotifyPropertyChanged("IsEnableNoOfInstal");
    }
  }
  public get IsEnableStrength(): boolean {
    return this._isEnableStrength && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsEnableStrength(value: boolean) {
    if (this._isEnableStrength != value) {
      if (
        value &&
        this.AccessContraintControls != null &&
        this.AccessContraintControls.Contains('cboStrength')
      ) {
        this._isEnableStrength = false;
      } else {
        this._isEnableStrength = value;
      }
      // super.NotifyPropertyChanged("IsEnableStrength");
    }
  }
  private _IsVisibleFrequency: Visibility = Visibility.Visible;
  public get IsVisibleFrequency(): Visibility {
    return this._IsVisibleFrequency;
  }
  public set IsVisibleFrequency(value: Visibility) {
    if (value != this._IsVisibleFrequency) {
      this._IsVisibleFrequency = value;
      // super.NotifyPropertyChanged("IsVisibleFrequency");
    }
  }
  private _IsVisiblePRNInstruction: Visibility = Visibility.Visible;
  public get IsVisiblePRNInstruction(): Visibility {
    return this._IsVisiblePRNInstruction;
  }
  public set IsVisiblePRNInstruction(value: Visibility) {
    if (value != this._IsVisiblePRNInstruction) {
      this._IsVisiblePRNInstruction = value;
      // super.NotifyPropertyChanged("IsVisiblePRNInstruction");
    }
  }
  private _IsVisiblechkPRN: Visibility = Visibility.Visible;
  public get IsVisiblechkPRN(): Visibility {
    return this._IsVisiblechkPRN;
  }
  public set IsVisiblechkPRN(value: Visibility) {
    if (value != this._IsVisiblechkPRN) {
      this._IsVisiblechkPRN = value;
      // super.NotifyPropertyChanged("IsVisiblechkPRN");
    }
  }
  private _IsVisibleDuration: Visibility = Visibility.Visible;
  public get IsVisibleDuration(): Visibility {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      !this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
    ) {
      if (
        PatientContext.IsINFUSIONON &&
        ((this.InfusionType != null &&
          (String.Equals(
            this.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS
          ) ||
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) ||
            String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID))) ||
          (this.InfusionType == null && this.IsInfContiniousFormLoaded))
      ) {
        this._IsVisibleDuration = Visibility.Collapsed;
      }
    }
    return this._IsVisibleDuration;
  }
  public set IsVisibleDuration(value: Visibility) {
    if (value != this._IsVisibleDuration) {
      this._IsVisibleDuration = value;
      //super.NotifyPropertyChanged("IsVisibleDuration");
    }
  }
  private _IsVisibleStopDate: Visibility = Visibility.Visible;
  public get IsVisibleStopDate(): Visibility {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      !this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
    ) {
      if (
        PatientContext.IsINFUSIONON &&
        ((this.InfusionType != null &&
          (String.Equals(
            this.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS
          ) ||
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) ||
            String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID))) ||
          (this.InfusionType == null && this.IsInfContiniousFormLoaded))
      ) {
        this._IsVisibleStopDate = Visibility.Collapsed;
      }
    }
    return this._IsVisibleStopDate;
  }
  public set IsVisibleStopDate(value: Visibility) {
    if (value != this._IsVisibleStopDate) {
      this._IsVisibleStopDate = value;
      // super.NotifyPropertyChanged("IsVisibleStopDate");
    }
  }
  private _IsVisibleCondFrequency: Visibility;
  public get IsVisibleCondFrequency(): Visibility {
    return this._IsVisibleCondFrequency;
  }
  public set IsVisibleCondFrequency(value: Visibility) {
    if (value != this._IsVisibleCondFrequency) {
      this._IsVisibleCondFrequency = value;
      // super.NotifyPropertyChanged("IsVisibleCondFrequency");
    }
  }
  private _IsVisibleCondPRNInstruction: Visibility;
  public get IsVisibleCondPRNInstruction(): Visibility {
    return this._IsVisibleCondPRNInstruction;
  }
  public set IsVisibleCondPRNInstruction(value: Visibility) {
    if (value != this._IsVisibleCondPRNInstruction) {
      this._IsVisibleCondPRNInstruction = value;
      // super.NotifyPropertyChanged("IsVisibleCondPRNInstruction");
    }
  }
  private _IsVisibleCondchkPRN: Visibility;
  public get IsVisibleCondchkPRN(): Visibility {
    return this._IsVisibleCondchkPRN;
  }
  public set IsVisibleCondchkPRN(value: Visibility) {
    if (value != this._IsVisibleCondchkPRN) {
      this._IsVisibleCondchkPRN = value;
      //super.NotifyPropertyChanged("IsVisibleCondchkPRN");
    }
  }
  private _IsVisibleCondAdminTimes: Visibility;
  public get IsVisibleCondAdminTimes(): Visibility {
    return this._IsVisibleCondAdminTimes;
  }
  public set IsVisibleCondAdminTimes(value: Visibility) {
    if (value != this._IsVisibleCondAdminTimes) {
      this._IsVisibleCondAdminTimes = value;
      //super.NotifyPropertyChanged("IsVisibleCondAdminTimes");
    }
  }
  public get IsenableFrequency(): boolean {
    return this._isenableFrequency && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableFrequency(value: boolean) {
    if (value != this._isenableFrequency) {
      if (value && this.FollowUpStatLaunch.Equals('S')) {
        this._isenableFrequency = false;
      } else {
        this._isenableFrequency = value;
      }
      //super.NotifyPropertyChanged("IsenableFrequency");
    }
  }
  public get IsenableDose(): boolean {
    return this._isenableDose && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableDose(value: boolean) {
    if (value != this._isenableDose) {
      this._isenableDose = value;
      if (
        value &&
        this.AccessContraintControls != null &&
        this.AccessContraintControls.Contains('cboAdminMethod') &&
        this.IsAdminMethodVisible == Visibility.Visible
      ) {
        this._isenableDose = false;
      }
      //super.NotifyPropertyChanged("IsenableDose");
    }
  }
  public get IsenableDoseUOM(): boolean {
    return this._isenableDoseUOM && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableDoseUOM(value: boolean) {
    if (value != this._isenableDoseUOM) {
      this._isenableDoseUOM = value;
      //super.NotifyPropertyChanged("IsenableDoseUOM");
    }
  }
  private _isSteppedEnableDose: boolean = false;
  public get IsSteppedEnableDose(): boolean {
    return this._isSteppedEnableDose && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsSteppedEnableDose(value: boolean) {
    if (value != this._isSteppedEnableDose) {
      this._isSteppedEnableDose = value;
      //super.NotifyPropertyChanged("IsSteppedEnableDose");
    }
  }
  public get IsMandatoryFrequency(): boolean {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
    ) {
      if (this._asRequired) {
        return true;
      } else {
        if (
          this.oPrescitemVM.FormViewerDetails.BasicControls != null &&
          this.oPrescitemVM.FormViewerDetails.BasicControls.Length > 0
        ) {
          let indexfreq: number = Array.IndexOf(
            this.oPrescitemVM.FormViewerDetails.BasicControls,
            'CC_FREQUENCY'
          );
          if (
            this.oPrescitemVM.FormViewerDetails.MandatoryControls != null &&
            this.oPrescitemVM.FormViewerDetails.MandatoryControls.Length >=
              indexfreq &&
            indexfreq != -1
          ) {
            return this.oPrescitemVM.FormViewerDetails.MandatoryControls[
              indexfreq
            ];
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
    } else {
      return this._isMandatoryFrequency;
    }
  }
  public set IsMandatoryFrequency(value: boolean) {
    if (value != this._isMandatoryFrequency) {
      this._isMandatoryFrequency = value;
      //super.NotifyPropertyChanged("IsMandatoryFrequency");
    }
  }
  public get IsMandatoryUOM(): boolean {
    return this._isMandatoryUOM;
  }
  public set IsMandatoryUOM(value: boolean) {
    if (value != this._isMandatoryUOM) {
      this._isMandatoryUOM = value;
      //super.NotifyPropertyChanged("IsMandatoryUOM");
    }
  }
  public get IsDoseMandatory(): boolean {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      !this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
    ) {
      if (
        PatientContext.IsINFUSIONON &&
        this.InfusionType != null &&
        !String.IsNullOrEmpty(this.InfusionType.Value)
      ) {
        if (
          String.Equals(
            this.InfusionType.Value,
            InfusionTypesCode.SINGLEDOSEVOLUME
          )
        ) {
          this._isDoseMandatory = true;
        }
      }
    }
    return this._isDoseMandatory;
  }
  public set IsDoseMandatory(value: boolean) {
    if (value != this._isDoseMandatory) {
      this._isDoseMandatory = value;
      //super.NotifyPropertyChanged("IsDoseMandatory");
    }
  }
  private _isdoseenable: boolean = true;
  public get Isdoseenable(): boolean {
    return (
      this._isdoseenable &&
      this.IsNotInPatientSteppedVariableAmend &&
      this.IsSteppedVariableFormEnabled
    );
  }
  public set Isdoseenable(value: boolean) {
    this._isdoseenable = value;
    //super.NotifyPropertyChanged("Isdoseenable");
  }
  private _isAdmintimesenable: boolean = true;
  public get IsAdmintimesenable(): boolean {
    return (
      this._isAdmintimesenable &&
      this.IsNotInPatientSteppedVariableAmend &&
      this.IsSteppedVariableFormEnabled
    );
  }
  public set IsAdmintimesenable(value: boolean) {
    this._isAdmintimesenable = value;
    //super.NotifyPropertyChanged("IsAdmintimesenable");
  }
  private _isAdmintimesenable1: boolean = true;
  public get IsAdmintimesenable1(): boolean {
    return this._isAdmintimesenable1 && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsAdmintimesenable1(value: boolean) {
    this._isAdmintimesenable1 = value;
    //super.NotifyPropertyChanged("IsAdmintimesenable1");
  }
  private _isfreqenable: boolean = true;
  public get IsFreqenable(): boolean {
    return (
      this._isfreqenable &&
      this.IsNotInPatientSteppedVariableAmend &&
      this.IsSteppedVariableFormEnabled
    );
  }
  public set IsFreqenable(value: boolean) {
    this._isfreqenable = value;
    //super.NotifyPropertyChanged("IsFreqenable");
  }
  private _isslottimesenable: boolean = true;
  public get IsSlottimesenable(): boolean {
    return this._isslottimesenable && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsSlottimesenable(value: boolean) {
    this._isslottimesenable = value;
    //super.NotifyPropertyChanged("IsSlottimesenable");
  }
  private _ischangingdoseenable: boolean = false;
  public get Ischangingdoseenable(): boolean {
    return (
      this._ischangingdoseenable && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set Ischangingdoseenable(value: boolean) {
    this._ischangingdoseenable = value;
    //super.NotifyPropertyChanged("Ischangingdoseenable");
  }
  private _continousformview: boolean = false;
  public get ContinousFormView(): boolean {
    return this._continousformview;
  }
  public set ContinousFormView(value: boolean) {
    this._continousformview = value;
    //super.NotifyPropertyChanged("ContinousFormView");
  }
  private _IsDTTMSetViaORSMezzanine: boolean = false;
  public get IsDTTMSetViaORSMezzanine(): boolean {
    return this._IsDTTMSetViaORSMezzanine;
  }
  public set IsDTTMSetViaORSMezzanine(value: boolean) {
    this._IsDTTMSetViaORSMezzanine = value;
    //super.NotifyPropertyChanged("IsDTTMSetViaORSMezzanine");
  }
  private _lblvariabletext: string;
  public get lblVariabletext(): string {
    return this._lblvariabletext;
  }
  public set lblVariabletext(value: string) {
    this._lblvariabletext = value;
    //super.NotifyPropertyChanged("lblVariabletext");
  }
  private _isflowratenmandatory: boolean = true;
  public get IsFlowratemandatory(): boolean {
    return this._isflowratenmandatory;
  }
  public set IsFlowratemandatory(value: boolean) {
    if (value != this._isflowratenmandatory) {
      this._isflowratenmandatory = value;
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      )
        this.IsFlowratemandatory = false;
      else this.IsFlowratemandatory = true;
      //super.NotifyPropertyChanged("IsFlowratemandatory");
    }
  }
  private _concentration: CListItem = new CListItem();
  public get Concentration(): CListItem {
    return this._concentration;
  }
  public set Concentration(value: CListItem) {
    if (value != this._concentration) {
      this._concentration = value;
      //super.NotifyPropertyChanged("Concentration");
    }
  }
  private _concentrationfreetext: string;
  public get ConcentrationFreeText(): string {
    return this._concentrationfreetext;
  }
  public set ConcentrationFreeText(value: string) {
    if (value != this._concentrationfreetext) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('ConcentrationFreeText')) {
        this.lstAmendedFlds.Add('ConcentrationFreeText');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._concentrationfreetext = value;
      //super.NotifyPropertyChanged("ConcentrationFreeText");
      this.FillDeliveryDevice();
    }
  }
  public FillDeliveryDevice(): void {
    if (ProfileData.InfusionPresConfig.objOxygenMasks.Count > 0) {
      for (
        let i: number = 0;
        i < ProfileData.InfusionPresConfig.objOxygenMasks.Count;
        i++
      ) {
        if (
          this.ConcentrationFreeText ==
          ProfileData.InfusionPresConfig.objOxygenMasks[
            i
          ].Concentration.ToString()
        )
          this.DeliveryDeviceFreetext =
            ProfileData.InfusionPresConfig.objOxygenMasks[
              i
            ].OxyDeviceName.ToString();
      }
    }
  }
  private _deliverydevicefreetext: string = String.Empty;
  public get DeliveryDeviceFreetext(): string {
    return this._deliverydevicefreetext;
  }
  public set DeliveryDeviceFreetext(value: string) {
    if (value != this._deliverydevicefreetext) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('DeliveryDeviceFreetext')) {
        this.lstAmendedFlds.Add('DeliveryDeviceFreetext');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._deliverydevicefreetext = value;
      //super.NotifyPropertyChanged("DeliveryDeviceFreetext");
    }
  }
  private _flowratetext: string;
  public get FlowRateText(): string {
    return this._flowratetext;
  }
  public set FlowRateText(value: string) {
    if (value != this._flowratetext) {
      this._flowratetext = value;
      //super.NotifyPropertyChanged("FlowRateText");
    }
  }
  public get IsDosageFormMandatory(): boolean {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
    ) {
      if (
        this.oPrescitemVM.FormViewerDetails.BasicControls != null &&
        this.oPrescitemVM.FormViewerDetails.BasicControls.Length > 0
      ) {
        let indexfreq: number = Array.IndexOf(
          this.oPrescitemVM.FormViewerDetails.BasicControls,
          'CC_FORM'
        );
        if (
          this.oPrescitemVM.FormViewerDetails.MandatoryControls != null &&
          this.oPrescitemVM.FormViewerDetails.MandatoryControls.Length >=
            indexfreq &&
          indexfreq != -1
        ) {
          return this.oPrescitemVM.FormViewerDetails.MandatoryControls[
            indexfreq
          ];
        } else {
          return this._isDosageFormMandatory;
        }
      } else {
        return this._isDosageFormMandatory;
      }
    } else {
      return this._isDosageFormMandatory;
    }
  }
  public set IsDosageFormMandatory(value: boolean) {
    if (value != this._isDosageFormMandatory) {
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BHasFormViewParams == false &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      )
        this._isDosageFormMandatory = false;
      else this._isDosageFormMandatory = value;
      if (
        this.IsDosageFormMandatory &&
        this.DosageFormVisibility == Visibility.Collapsed
      )
        this.DosageFormVisibility = Visibility.Visible;
      //super.NotifyPropertyChanged("IsDosageFormMandatory");
    }
  }
  public get IsOldDosageFormMandatory(): boolean {
    return this._isOldDosageFormMandatory;
  }
  public set IsOldDosageFormMandatory(value: boolean) {
    if (value != this._isOldDosageFormMandatory) {
      this._isOldDosageFormMandatory = value;
      //super.NotifyPropertyChanged("IsOldDosageFormMandatory");
    }
  }
  public get IsMandatoryStartDTTM(): boolean {
    return this._isMandatoryStartDTTM;
  }
  public set IsMandatoryStartDTTM(value: boolean) {
    if (value != this._isMandatoryStartDTTM) {
      this._isMandatoryStartDTTM = value;
      //super.NotifyPropertyChanged("IsMandatoryStartDTTM");
    }
  }
  public get IsMandatoryStatType(): boolean {
    return this._isMandatoryStatType;
  }
  public set IsMandatoryStatType(value: boolean) {
    if (value != this._isMandatoryStatType) {
      this._isMandatoryStatType = value;
      //super.NotifyPropertyChanged("IsMandatoryStatType");
    }
  }
  public get IsMultipleActiveIngredients(): boolean {
    return this._isMultiIng;
  }
  public set IsMultipleActiveIngredients(value: boolean) {
    if (value != this._isMultiIng) {
      this._isMultiIng = value;
    }
  }
  public get IsStrengthinProduct(): boolean {
    return this._IsStrengthinProduct;
  }
  public set IsStrengthinProduct(value: boolean) {
    if (value != this._IsStrengthinProduct) {
      this._IsStrengthinProduct = value;
    }
  }
  public get IsStrengthMandatory(): boolean {
    return this._isStrengthMandatory;
  }
  public set IsStrengthMandatory(value: boolean) {
    if (value != this._isStrengthMandatory) {
      let IsMultipleRouted: boolean = false;
      if (
        this.IsEnableStrength &&
        (((this.IsDoseVisible == Visibility.Visible ||
          (this.IsDoseVisible == Visibility.Collapsed &&
            (String.Equals(
              this._doseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                this._doseType.Value,
                DoseTypeCode.VARIABLE,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              String.Equals(
                this._doseType.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.InvariantCultureIgnoreCase
              )))) &&
          this.IsStrengthMandatoryByDoseUOMType) ||
          (this.IsStrengthMandatoryAsPerRule &&
            this.DefaultDetails != null &&
            this.DefaultDetails.Strengths != null &&
            this.DefaultDetails.Strengths.Count > 0) ||
          (!this.IsStrengthinProduct &&
            String.Equals(
              this.identifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.CurrentCultureIgnoreCase
            ) &&
            this.IsAdminMethodVisible == Visibility.Visible &&
            this.IsenableAdminMthd &&
            this.IsDoseVisible == Visibility.Collapsed))
      ) {
        this._isStrengthMandatory = true;
      } else {
        this._isStrengthMandatory = false;
      }
      if (
        value &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        this.IsAllowMultiRoute &&
        this.Route != null &&
        !String.IsNullOrEmpty(this.Route.Value) &&
        this.Route.Value.Contains(',')
      ) {
        value = false;
        IsMultipleRouted = true;
      }
      if (
        this.IsStrengthMandatoryAsPerRule &&
        this.StrengthVisibility == Visibility.Collapsed
      )
        this.StrengthVisibility = Visibility.Visible;
      if (
        !IsMultipleRouted &&
        this.IsStrengthMandatoryAsPerRule &&
        !this.IsEnableStrength &&
        this.StrengthVisibility == Visibility.Visible &&
        !String.Equals(
          this.itemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        )
      )
        this.IsEnableStrength = true;
      //super.NotifyPropertyChanged("IsStrengthMandatory");
    }
  }
  public get IsStrengthMandatoryAsPerRule(): boolean {
    return this._IsStrengthMandatoryAsPerRule;
  }
  public set IsStrengthMandatoryAsPerRule(value: boolean) {
    if (value != this._IsStrengthMandatoryAsPerRule) {
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BHasFormViewParams == false &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      )
        this._IsStrengthMandatoryAsPerRule = false;
      else this._IsStrengthMandatoryAsPerRule = value;
      this.IsStrengthMandatory = this._IsStrengthMandatoryAsPerRule;
      //super.NotifyPropertyChanged("IsStrengthMandatoryAsPerRule");
    }
  }
  public get IsStrengthMandatoryByDoseUOMType(): boolean {
    return this._IsStrengthMandatoryByDoseUOMType;
  }
  public set IsStrengthMandatoryByDoseUOMType(value: boolean) {
    if (value != this._IsStrengthMandatoryByDoseUOMType) {
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BHasFormViewParams == false &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this._IsStrengthMandatoryByDoseUOMType = false;
      } else {
        this._IsStrengthMandatoryByDoseUOMType = value;
      }
      this.IsStrengthMandatory = this._IsStrengthMandatoryByDoseUOMType;
      if (
        this.IsStrengthMandatoryByDoseUOMType &&
        this.StrengthVisibility == Visibility.Collapsed
      ) {
        this.StrengthVisibility = Visibility.Visible;
      }
      let IsMultipleRoute: boolean = false;
      if (this.IsAllowMultiRoute && this.IsMultiRouteChecked) {
        IsMultipleRoute =
          this.DefaultDetails.Routes.Where(
            (cl) => cl.IsSelected == true
          ).Count() > 0;
      }
      if (
        this.IsStrengthMandatoryByDoseUOMType &&
        !IsMultipleRoute &&
        !String.Equals(
          this.ItemSubType,
          CConstants.SUBTYPE,
          StringComparison.OrdinalIgnoreCase
        ) &&
        !this.IsEnableStrength &&
        this.StrengthVisibility == Visibility.Visible
      ) {
        this.IsEnableStrength = true;
      }
    }
  }
  public CheckStrengthMandatoryByDoseUOMType(): void {
    let isProductMandatory: boolean = false;
    let _sUOMTagValue: string = String.Empty;
    let UOMTypeCode: string = String.Empty;
    if (
      this.oPrescitemVM != null &&
      (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
        (this.IsNotInPatientSteppedVariableAmend &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend))) &&
      this.DoseType != null &&
      !String.IsNullOrEmpty(this.DoseType.Value) &&
      (String.Equals(
        this.DoseType.Value,
        DoseTypeCode.VARIABLE,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          this.DoseType.Value,
          DoseTypeCode.STEPPED,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.InvariantCultureIgnoreCase
        )) &&
      this.MultiDoseDetails != null &&
      this.MultiDoseDetails.Count > 0 &&
      this.MultiDoseDetails[0] != null &&
      this.MultiDoseDetails[0].DoseUOM != null &&
      this.MultiDoseDetails[0].DoseUOM.Tag != null
    ) {
      if (!this.IsDifferentDoseUOMFrmSourceForSV) {
        _sUOMTagValue = this.MultiDoseDetails[0].DoseUOM.Tag.ToString();
      } else {
        _sUOMTagValue = this.MultiDoseDetails.Where(
          (S) =>
            S.DoseUOM != null &&
            typeof S.DoseUOM.Tag === 'string' &&
            !String.IsNullOrEmpty(S.DoseUOM.Tag.ToString()) &&
            this.DoseUOMTypeCode != null &&
            this.DoseUOMTypeCode.Count() > 0 &&
            this.DoseUOMTypeCode.TryGetValue(S.DoseUOM.Tag.ToString(), (o) => {
              UOMTypeCode = o;
            }) &&
            (String.Equals(
              UOMTypeCode,
              CConstants.DoseUOM_Type_Each,
              StringComparison.OrdinalIgnoreCase
            ) ||
              String.Equals(
                UOMTypeCode,
                CConstants.DoseUOM_Type_Volumn,
                StringComparison.InvariantCultureIgnoreCase
              ))
        )
          .Select((S) => S.DoseUOM.Tag.ToString())
          .FirstOrDefault();
      }
    } else if (this.DoseUOM != null && this.DoseUOM.Tag != null) {
      _sUOMTagValue = this.DoseUOM.Tag.ToString();
    }
    if (!String.IsNullOrEmpty(_sUOMTagValue)) {
      let checkvalue: boolean = false;
      if (this.DoseUOMTypeCode != null && this.DoseUOMTypeCode.Count() > 0) {
        checkvalue = this.DoseUOMTypeCode.TryGetValue(_sUOMTagValue, (o) => {
          UOMTypeCode = o;
        });
      }
      if (
        (String.Equals(
          this.identifyingType,
          CConstants.CATALOGUEITEM,
          StringComparison.CurrentCultureIgnoreCase
        ) ||
          String.Equals(
            this.identifyingType,
            CConstants.ACTUALMOIETY,
            StringComparison.CurrentCultureIgnoreCase
          )) &&
        (this.Route != null || this.DosageForm != null)
      ) {
        if (
          (!this.IsStrengthinProduct ||
            (this.IsStrengthinProduct &&
              this.DefaultDetails != null &&
              this.DefaultDetails.Strengths != null &&
              this.DefaultDetails.Strengths.Count > 0)) &&
          checkvalue &&
          (String.Equals(UOMTypeCode, CConstants.DoseUOM_Type_Each) ||
            String.Equals(UOMTypeCode, CConstants.DoseUOM_Type_Volumn))
        ) {
          this.IsStrengthMandatoryByDoseUOMType = true;
          if (
            this.InfusionDetails != null &&
            !String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            String.Equals(
              this.InfusionDetails.SelProdName,
              CConstants.Selectproduct,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            isProductMandatory = true;
          } else {
            isProductMandatory = false;
          }
        } else {
          this.IsStrengthMandatoryAsPerRule = false;
          this.IsStrengthMandatoryByDoseUOMType = false;
          isProductMandatory = false;
        }
      } else {
        this.IsStrengthMandatoryByDoseUOMType = false;
        if (
          (checkvalue &&
            String.Equals(UOMTypeCode, CConstants.DoseUOM_Type_Each)) ||
          String.Equals(UOMTypeCode, CConstants.DoseUOM_Type_Volumn)
        ) {
          if (
            !String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            this.InfusionDetails != null &&
            String.Equals(
              this.InfusionDetails.SelProdName,
              CConstants.Selectproduct,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            isProductMandatory = true;
          } else {
            isProductMandatory = false;
          }
        } else {
          isProductMandatory = false;
        }
      }
    } else {
      this.IsStrengthMandatoryByDoseUOMType = false;
      if (
        this.InfusionDetails != null &&
        !String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        String.Equals(
          this.InfusionDetails.SelProdName,
          CConstants.Selectproduct,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        isProductMandatory = true;
      }
    }
    if (this.InfusionDetails != null) {
      this.InfusionDetails.isProductMandatory = isProductMandatory;
    }
  }
  //introduced new property to address 48836
  public get IsBrandEnabled():Boolean{
    if(this.IsBrandMandatory == Visibility.Visible)
    return true;
    else 
      return false;
  }
  
  public get IsBrandMandatory(): Visibility {
    return this._isBrandMandatory;
  }
  public set IsBrandMandatory(value: Visibility) {
    if (value != this._isBrandMandatory) {
      if (
        value == Visibility.Visible &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        this.IsMultiRouteChecked &&
        this.IsAllowMultiRoute
      ) {
        value = Visibility.Collapsed;
      }
      this._isBrandMandatory = value;
      //super.NotifyPropertyChanged("IsBrandMandatory");
      if (this._isBrandMandatory == Visibility.Visible) {
        if (
          String.IsNullOrEmpty(this._BrandName) ||
          String.Equals(this._BrandName, CConstants.SelectBrand)
        ) {
          this.IsClearEnabled = false;
        }
        if (this.InfusionDetails != null) {
          this.InfusionDetails.isProductVisible = Visibility.Collapsed;
          this.InfusionDetails.isProductMandatory = false;
        }
      }
    }
  }
  public get ISvisibletreatmentcontinue(): Visibility {
    return this._isvisibletreatmentcontinue;
  }
  public set ISvisibletreatmentcontinue(value: Visibility) {
    if (value != this._isvisibletreatmentcontinue) {
      this._isvisibletreatmentcontinue = value;
      //super.NotifyPropertyChanged("ISvisibletreatmentcontinue");
    }
  }
  public get DosageFormVisibility(): Visibility {
    return this._DosageFormVisibility;
  }
  public set DosageFormVisibility(value: Visibility) {
    if (value != this._DosageFormVisibility) {
      this._DosageFormVisibility = value;
      //super.NotifyPropertyChanged("DosageFormVisibility");
    }
  }
  public get StrengthVisibility(): Visibility {
    return this._StrengthVisibility;
  }
  public set StrengthVisibility(value: Visibility) {
    if (value != this._StrengthVisibility) {
      this._StrengthVisibility = value;
      //super.NotifyPropertyChanged("StrengthVisibility");
    }
  }
  public get SiteVisibility(): Visibility {
    return this._SiteVisibility;
  }
  public set SiteVisibility(value: Visibility) {
    if (value != this._SiteVisibility) {
      this._SiteVisibility = value;
      //super.NotifyPropertyChanged("SiteVisibility");
    }
  }
  public get IsSiteMandatory(): boolean {
    return this._isSiteMandatory;
  }
  public set IsSiteMandatory(value: boolean) {
    if (value != this._isSiteMandatory) {
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BHasFormViewParams == false &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      )
        this._isSiteMandatory = false;
      else this._isSiteMandatory = value;
      //super.NotifyPropertyChanged("IsSiteMandatory");
      if (this.IsSiteMandatory && this.SiteVisibility == Visibility.Collapsed)
        this.SiteVisibility = Visibility.Visible;
      //super.NotifyPropertyChanged("IsStrengthMandatory");
    }
  }
  public get IsSiteEnabled(): boolean {
    return this._isSiteEnabled && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsSiteEnabled(value: boolean) {
    if (value != this._isSiteEnabled) {
      if (
        value &&
        this.AccessContraintControls != null &&
        this.AccessContraintControls.Contains('cboSite')
      ) {
        this._isSiteEnabled = false;
      } else {
        this._isSiteEnabled = value;
      }
      //super.NotifyPropertyChanged("IsSiteEnabled");
    }
  }
  public get IsMandatorySupplyInstr(): boolean {
    return this._isMandatorySupplyinstr;
  }
  public set IsMandatorySupplyInstr(value: boolean) {
    if (value != this._isMandatorySupplyinstr) {
      this._isMandatorySupplyinstr = value;
    }
    //super.NotifyPropertyChanged("IsMandatorySupplyInstr");
  }
  public get IsMandatoryRSNFORMOD(): boolean {
    return this._isMandatoryRSNFORMOD;
  }
  public set IsMandatoryRSNFORMOD(value: boolean) {
    if (value != this._isMandatoryRSNFORMOD) {
      if (
        value &&
        this.IsMandatoryReasonForMedClerkModify &&
        this != null &&
        this.oPrescitemVM != null &&
        this.oPrescitemVM.IsReasonForMedicationClerkModifyVisible ==
          Visibility.Visible
      ) {
        this._isMandatoryRSNFORMOD = false;
      } else {
        this._isMandatoryRSNFORMOD = value;
      }
      //super.NotifyPropertyChanged("IsMandatoryRSNFORMOD");
    }
    if (
      !this.IsModificationReasonExists &&
      this._isMandatoryRSNFORMOD == true &&
      this.ReasonforModification != null &&
      String.IsNullOrEmpty(this.ReasonforModification.Value)
    ) {
      this.ReasonforModification = null;
      this.IsModificationReasonExists = false;
    } else if (
      !this.IsMandatoryReasonForMedClerkModify &&
      this._isMandatoryRSNFORMOD == false
    ) {
      this.IsenableRSNFORMOD = false;
      this.IsModificationReasonExists = false;
    }
    if (
      this._isMandatoryRSNFORMOD == true &&
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails.IsRsnForModAuthEnabled
    ) {
      this.oPrescitemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
        true;
      this.oPrescitemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
        false;
    }
  }
  public get IsMandatoryReasonForMedClerkModify(): boolean {
    return this._isMandatoryReasonForMedClerkModify;
  }
  public set IsMandatoryReasonForMedClerkModify(value: boolean) {
    if (
      value != this._isMandatoryReasonForMedClerkModify &&
      this.IsClearOnAdmissionAmended &&
      this.FormViewLoadingflag
    ) {
      this._isMandatoryReasonForMedClerkModify = value;
      //super.NotifyPropertyChanged("IsMandatoryReasonForMedClerkModify");
    }
    if (
      this._isMandatoryReasonForMedClerkModify &&
      this != null &&
      this.oPrescitemVM != null &&
      this.oPrescitemVM.IsReasonForMedicationClerkModifyVisible ==
        Visibility.Visible
    ) {
      this.IsMandatoryRSNFORMOD = false;
    }
    if (
      this._isMandatoryReasonForMedClerkModify &&
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BHasFormViewParams &&
      this.oPrescitemVM.FormViewerDetails.BasicControls != null &&
      this.oPrescitemVM.FormViewerDetails.BasicControls.Length > 0 &&
      this.oPrescitemVM.FormViewerDetails.BasicControls.Contains(
        'CC_MEDCLERK'
      ) &&
      this.oPrescitemVM.IsReasonForMedicationClerkModifyVisible ==
        Visibility.Visible
    ) {
      this.IsMandatoryRSNFORMOD = false;
    }
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.AuthoriseMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      this._isMandatoryReasonForMedClerkModify &&
      this != null &&
      this.oPrescitemVM != null &&
      this.oPrescitemVM.IsReasonForMedicationClerkModifyVisible ==
        Visibility.Visible
    ) {
      this.oPrescitemVM.FormViewerDetails.BasicDetails.IsClinicallyVerified =
        true;
      this.oPrescitemVM.FormViewerDetails.BasicDetails.IsEnableChkClinivallyVerify =
        this.oPrescitemVM.IsClinicallyVerifyEnable = false;
    }
  }
  public get IsMandatoryMedClekSource(): boolean {
    return this._isMandatoryMedClekSource;
  }
  public set IsMandatoryMedClekSource(value: boolean) {
    if (value != this._isMandatoryMedClekSource && this.FormViewLoadingflag) {
      this._isMandatoryMedClekSource = value;
      //super.NotifyPropertyChanged("IsMandatoryMedClekSource");
    }
  }
  public get Doselabelvalue(): string {
    return this._doselabelvalue;
  }
  public set Doselabelvalue(value: string) {
    if (value != this._doselabelvalue) {
      this._doselabelvalue = value;
      //super.NotifyPropertyChanged("Doselabelvalue");
      this.DoseCalcEnableDisable();
    }
  }
  public get IsenableAdditionalcomments(): boolean {
    return this._isenableAdditionalcomments;
  }
  public set IsenableAdditionalcomments(value: boolean) {
    if (value != this._isenableAdditionalcomments) {
      this._isenableAdditionalcomments = value;
      //super.NotifyPropertyChanged("IsenableAdditionalcomments");
    }
  }
  public get IsenableModificationcomments(): boolean {
    return this._isenableModificationcomments;
  }
  public set IsenableModificationcomments(value: boolean) {
    if (value != this._isenableModificationcomments) {
      this._isenableModificationcomments = value;
      //super.NotifyPropertyChanged("IsenableModificationcomments");
    }
  }
  public get IsenableOnbehalfOf(): boolean {
    return this._isenableOnbehalfOf;
  }
  public set IsenableOnbehalfOf(value: boolean) {
    if (value != this._isenableOnbehalfOf) {
      this._isenableOnbehalfOf = value;
      //super.NotifyPropertyChanged("IsenableOnbehalfOf");
    }
  }
  public DoClinicallyVerify(): void {
    if (
      String.Equals(
        ContextInfo.MenuCode,
        CConstants.ClinicallyVerifyMenuCode,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !this.IsClinicallyVerified &&
      ((this.oPrescitemVM != null &&
        this.oPrescitemVM.PrescriptionItemStatus != CConstants.AUTOVERIFIED) ||
        this.oPrescitemVM == null)
    ) {
      this.IsClinicallyVerified = true;
      if(this.oPrescitemVM != null)
        this.oPrescitemVM.IsClinicallyVerifyCommentsMandatory = false;
    }
  }
  private _IsClearlstAmendList: boolean = false;
  public get IsClearlstAmendList(): boolean {
    return this._IsClearlstAmendList;
  }
  public set IsClearlstAmendList(value: boolean) {
    if (value != this._IsClearlstAmendList) {
      this._IsClearlstAmendList = value;
      //super.NotifyPropertyChanged("IsClearlstAmendList");
    }
  }
  private _IsenableChkClinivallyVerify: boolean = false;
  public get IsEnableChkClinivallyVerify(): boolean {
    return this._IsenableChkClinivallyVerify;
  }
  public set IsEnableChkClinivallyVerify(value: boolean) {
    if (value != this._IsenableChkClinivallyVerify) {
      this._IsenableChkClinivallyVerify = value;
      //super.NotifyPropertyChanged("IsEnableChkClinivallyVerify");
    }
  }
  private _IsVisibleOnadmission: Visibility;
  public get IsVisibleOnadmission(): Visibility {
    if (
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          CConstants.ForadminPrescribeMenuCode
        )) &&
      PatientContext.ClerkFormViewDefaultBehavior !=
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      this._IsVisibleOnadmission = Visibility.Visible;
    } else {
      this._IsVisibleOnadmission = Visibility.Collapsed;
    }
    return this._IsVisibleOnadmission;
  }
  public set IsVisibleOnadmission(value: Visibility) {
    if (value != this._IsVisibleOnadmission) {
      this._IsVisibleOnadmission = value;
      //super.NotifyPropertyChanged("IsVisibleOnadmission");
    }
  }
  private _IsEnableOnadmission: boolean = false;
  public get IsEnableOnadmission(): boolean {
    return this._IsEnableOnadmission;
  }
  public set IsEnableOnadmission(value: boolean) {
    if (value != this._IsEnableOnadmission) {
      this._IsEnableOnadmission = value;
      //super.NotifyPropertyChanged("IsEnableOnadmission");
    }
  }
  private _IsOnadmission: boolean = false;
  public get IsOnadmission(): boolean {
    return this._IsOnadmission;
  }
  public set IsOnadmission(value: boolean) {
    if (this._IsOnadmission != value) {
      if (!this.isFormViewDataLoaded) {
        this._IsOnadmission = value;
        if (value == false) {
          this.IsClearOnAdmissionAmended = false;
        }
        //NotifyPropertyChanged("IsOnadmission");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('IsOnadmission')) {
          this.lstAmendedFlds.Add('IsOnadmission');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._IsOnadmission = value;
        //NotifyPropertyChanged("IsOnadmission");
      }
    }
  }
  private _IsExistsOnAdmission: string = '3';
  public get IsExistsOnAdmission(): string {
    return this._IsExistsOnAdmission;
  }
  public set IsExistsOnAdmission(value: string) {
    if (value != this._IsExistsOnAdmission) {
      this._IsExistsOnAdmission = value;
      //super.NotifyPropertyChanged("IsExistsOnAdmission");
    }
  }
  private _IsResetOnadmission: boolean = false;
  public get IsResetOnadmission(): boolean {
    return this._IsResetOnadmission;
  }
  public set IsResetOnadmission(value: boolean) {
    if (this._IsResetOnadmission != value) {
      this._IsResetOnadmission = value;
      //NotifyPropertyChanged("IsResetOnadmission");
    }
  }
  private _IsRecordedMedication: boolean = false;
  public get IsRecordedMedication(): boolean {
    return this._IsRecordedMedication;
  }
  public set IsRecordedMedication(value: boolean) {
    if (this._IsRecordedMedication != value) {
      this._IsRecordedMedication = value;
      // NotifyPropertyChanged("IsRecordedMedication");
    }
  }
  private _IsDispalyOnadmission: Visibility = Visibility.Collapsed;
  public get IsDispalyOnadmission(): Visibility {
    return this._IsDispalyOnadmission;
  }
  public set IsDispalyOnadmission(value: Visibility) {
    if (value != this._IsDispalyOnadmission) {
      this._IsDispalyOnadmission = value;
      //super.NotifyPropertyChanged("IsDispalyOnadmission");
    }
  }
  private _IsWardStockIconVisible: Visibility = Visibility.Collapsed;
  public get IsWardStockIconVisible(): Visibility {
    return this._IsWardStockIconVisible;
  }
  public set IsWardStockIconVisible(value: Visibility) {
    if (value != this._IsWardStockIconVisible) {
      this._IsWardStockIconVisible = value;
      //super.NotifyPropertyChanged("IsWardStockIconVisible");
    }
  }
  private _IsWardStockIconChildVisible: Visibility = Visibility.Collapsed;
  public get IsWardStockIconChildVisible(): Visibility {
    return this._IsWardStockIconChildVisible;
  }
  public set IsWardStockIconChildVisible(value: Visibility) {
    if (value != this._IsWardStockIconChildVisible) {
      this._IsWardStockIconChildVisible = value;
      //super.NotifyPropertyChanged("IsWardStockIconChildVisible");
    }
  }
  private _IsWardStock: boolean = false;
  public get IsWardStock(): boolean {
    return this._IsWardStock;
  }
  public set IsWardStock(value: boolean) {
    if (this._IsWardStock != value) {
      this._IsWardStock = value;
      //NotifyPropertyChanged("IsWardStock");
    }
  }
  private _IsClinicalEncounter: boolean = false;
  public get IsClinicalEncounter(): boolean {
    return this._IsClinicalEncounter;
  }
  public set IsClinicalEncounter(value: boolean) {
    if (this._IsClinicalEncounter != value) {
      this._IsClinicalEncounter = value;
      //NotifyPropertyChanged("IsClinicalEncounter");
    }
  }
  private _IsAddtoResolve: boolean = false;
  public get IsAddtoResolve(): boolean {
    return this._IsAddtoResolve;
  }
  public set IsAddtoResolve(value: boolean) {
    if (value != this._IsAddtoResolve) {
      this._IsAddtoResolve = value;
      //super.NotifyPropertyChanged("IsAddtoResolve");
    }
  }
  public get IsenableRSNFORMOD(): boolean {
    return this._isenableRSNFORMOD;
  }
  public set IsenableRSNFORMOD(value: boolean) {
    if (value != this._isenableRSNFORMOD) {
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
        value &&
        this.IsClearlstAmendedFlds
      ) {
        if ((this.ReasonforModification == null) || (this.ReasonforModification != null && String.IsNullOrEmpty(this.ReasonforModification.Value)))
        {
          if (this.MedClerkModifyReason != null 
              && !String.IsNullOrEmpty(this.MedClerkModifyReason.Value)
              && this.DefaultDetails != null
              && this.DefaultDetails.ReasonforModification != null
              && this.DefaultDetails.ReasonforModification.Count > 0)
          {
              var oDefItem = this.DefaultDetails.ReasonforModification.Where(
                                (otem) => otem.Value == this.MedClerkModifyReason.Value).Select((otem) => otem);
                              
              if (oDefItem != null && oDefItem.Count() > 0)
              {
                  this.ReasonforModification = oDefItem.FirstOrDefault();
              }
          }
        }        
        this.IsenableOnbehalfOf = true;
      }
      this._isenableRSNFORMOD = value;
      this.IsenableModificationcomments = value;
      // super.NotifyPropertyChanged("IsenableRSNFORMOD");
    }
  }
  public get IsMCenableRSNFORMOD(): boolean {
    return this._isMCenableRSNFORMOD;
  }
  public set IsMCenableRSNFORMOD(value: boolean) {
    if (value != this._isMCenableRSNFORMOD) {
      this._isMCenableRSNFORMOD = value;
      // super.NotifyPropertyChanged("IsMCenableRSNFORMOD");
    }
  }
  public get isTitratedRSNFORMOD(): boolean {
    return this._isTitratedRSNFORMOD;
  }
  public set isTitratedRSNFORMOD(value: boolean) {
    if (value != this._isTitratedRSNFORMOD) {
      this._isTitratedRSNFORMOD = value;
      //super.NotifyPropertyChanged("isTitratedRSNFORMOD");
    }
  }
  //public delegate void SteppedVairableVisibility(Visibility SteppedVairablePanelVisibility);
  public SteppedVairableVisibilityEvent: Function;
  public get IscontentForModificationVisible(): Visibility {
    return this._iscontentVisible;
  }
  public set IscontentForModificationVisible(value: Visibility) {
    if (value != this._iscontentVisible) {
      this._iscontentVisible = value;
      //super.NotifyPropertyChanged("IscontentForModificationVisible");
      if (this.SteppedVairableVisibilityEvent != null)
        this.SteppedVairableVisibilityEvent(this._iscontentVisible);
    }
  }
  public get IsOrderSetIconVisible(): Visibility {
    return this._isOrderSetICONVisible;
  }
  public set IsOrderSetIconVisible(value: Visibility) {
    if (value != this._isOrderSetICONVisible) {
      this._isOrderSetICONVisible = value;
      //super.NotifyPropertyChanged("IsOrderSetIconVisible");
    }
  }
  public get IsPrescribingNoteIconVisible(): Visibility {
    return this._isPrescribingNoteICONVisible;
  }
  public set IsPrescribingNoteIconVisible(value: Visibility) {
    if (value != this._isPrescribingNoteICONVisible) {
      this._isPrescribingNoteICONVisible = value;
      //super.NotifyPropertyChanged("IsPrescribingNoteIconVisible");
    }
  }
  public get IscontentAdminTimesVisible(): Visibility {
    return this._iscontentAdminTimesVisible;
  }
  public set IscontentAdminTimesVisible(value: Visibility) {
    if (value != this._iscontentAdminTimesVisible) {
      this._iscontentAdminTimesVisible = value;
      //super.NotifyPropertyChanged("IscontentAdminTimesVisible");
    }
  }
  public get IsSVcontentAdditionalOptions(): Visibility {
    return this._isSVcontentAdditionalOptions;
  }
  public set IsSVcontentAdditionalOptions(value: Visibility) {
    if (value != this.IsSVcontentAdditionalOptions) {
      this._isSVcontentAdditionalOptions = value;
      //super.NotifyPropertyChanged("IsSVcontentAdditionalOptions");
    }
  }
  public get IscontentAdditionalOptions(): Visibility {
    return this._iscontentAdditionalOptions;
  }
  public set IscontentAdditionalOptions(value: Visibility) {
    if (value != this._iscontentAdditionalOptions) {
      this._iscontentAdditionalOptions = value;
      //super.NotifyPropertyChanged("IscontentAdditionalOptions");
    }
  }
  private _isMultiRouteVisible: Visibility;
  public get IsMultiRouteVisible(): Visibility {
    return this._isMultiRouteVisible;
  }
  public set IsMultiRouteVisible(value: Visibility) {
    if (this._isMultiRouteVisible != value) {
      this._isMultiRouteVisible = value;
      // NotifyPropertyChanged("IsMultiRouteVisible");
    }
  }
  private _isRouteVisible: Visibility;
  public get IsRouteVisible(): Visibility {
    return this._isRouteVisible;
  }
  public set IsRouteVisible(value: Visibility) {
    if (this._isRouteVisible != value) {
      this._isRouteVisible = value;
      // NotifyPropertyChanged("IsRouteVisible");
    }
  }
  private _isRouteComboVisible: Visibility;
  public get IsRouteComboVisible(): Visibility {
    return this._isRouteComboVisible;
  }
  public set IsRouteComboVisible(value: Visibility) {
    if (this._isRouteComboVisible != value) {
      this._isRouteComboVisible = value;
      // NotifyPropertyChanged("IsRouteComboVisible");
    }
  }
  private _isMultiRouteDropDownVisible: Visibility;
  public get IsMultiRouteDropDownVisible(): Visibility {
    return this._isMultiRouteDropDownVisible;
  }
  public set IsMultiRouteDropDownVisible(value: Visibility) {
    if (this._isMultiRouteDropDownVisible != value) {
      this._isMultiRouteDropDownVisible = value;
      // NotifyPropertyChanged("IsMultiRouteDropDownVisible");
    }
  }
  private _isMultiRouteComboVisible: Visibility;
  public get IsMultiRouteComboVisible(): Visibility {
    return this._isMultiRouteComboVisible;
  }
  public set IsMultiRouteComboVisible(value: Visibility) {
    if (this._isMultiRouteComboVisible != value) {
      this._isMultiRouteComboVisible = value;
      // NotifyPropertyChanged("IsMultiRouteComboVisible");
    }
  }
  private _IsUnSelectMultipleRoutes: boolean = false;
  public get IsUnSelectMultipleRoutes(): boolean {
    return this._IsUnSelectMultipleRoutes;
  }
  public set IsUnSelectMultipleRoutes(value: boolean) {
    this._IsUnSelectMultipleRoutes = value;
  }
  private _isMultiRouteChecked: boolean = false;
  public get IsMultiRouteChecked(): boolean {
    return this._isMultiRouteChecked;
  }
  public set IsMultiRouteChecked(value: boolean) {
    if (this._isMultiRouteChecked != value) {
      this._isMultiRouteChecked = value;
      this.IsChangedmultiRoute = true;
      if (!this.IsRestoreOldValues) {
        if (value) {
          this.IsMultiRouteVisible = Visibility.Visible;
          this.IsMultiRouteDropDownVisible = Visibility.Visible;
          this.IsRouteVisible = Visibility.Collapsed;
          this.IsRouteComboVisible = Visibility.Collapsed;
          this.IsMultiRouteComboVisible = Visibility.Collapsed;
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.MultiRoutes != null &&
            this.DefaultDetails.MultiRoutes.Count > 0
          ) {
            this.DefaultDetails.Routes = this.DefaultDetails.MultiRoutes;
            this.IsUnSelectMultipleRoutes = true;
            if (
              this.DefaultDetails != null &&
              this.DefaultDetails.Routes != null &&
              this.DefaultDetails.Routes.Count > 0 &&
              this.DefaultDetails.Routes.Where((a) => a.IsSelected).Count() > 0
            ) {
              this.DefaultDetails.Routes.ForEach((a) => {
                let IsSel: boolean = a.IsSelected;
                if (IsSel) {
                  a.IsSelected = false;
                }
              });
            }
            this.DefaultDetails.MultiRoute2.Clear();
            this.Route = null;
            this.IsUnSelectMultipleRoutes = false;
            if (this.DosageForm != null) this.DosageForm = null;
          } else if (
            this.DefaultDetails != null &&
            this.IsClearlstAmendedFlds
          ) {
            this.RetriveNormalValues();
            if (
              this.DefaultDetails.Routes != null &&
              this.DefaultDetails.Routes.Count > 0
            ) {
              this.DefaultDetails.Routes.ForEach((a) => (a.IsSelected = false));
              this.RouteSelected = null;
            }
            this.oPrescitemVM.GetMultiRoutes(
              this.IdentifyingOID,
              this.IdentifyingType,
              this.MCVersion
            );
            this.oPrescitemVM.FormviewerLoadedEvent.subscribe(x => {
              if(this._isMultiRouteChecked)
              {
              this.IsMultiRouteVisible = Visibility.Visible;
          this.IsMultiRouteDropDownVisible = Visibility.Visible;
          this.IsRouteVisible = Visibility.Collapsed;
          this.IsRouteComboVisible = Visibility.Collapsed;
          this.IsMultiRouteComboVisible = Visibility.Collapsed;
              }
            })
          }
          if (this.MultiRouteUnSubscribeEvent != null) {
            this.MultiRouteUnSubscribeEvent();
          }
          this.IsMultiRouteUnChecked = false;
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend
          ) {
            this.IsMultiRouteCheckedforAmend = true;
          }
        } else {
          this.IsRouteVisible = Visibility.Visible;
          this.IsMultiRouteComboVisible = Visibility.Visible;
          this.IsRouteComboVisible = Visibility.Collapsed;
          this.IsMultiRouteDropDownVisible = Visibility.Collapsed;
          this.IsMultiRouteVisible = Visibility.Visible;
          this.IsenableRoute = true;
          this.InfusionType = null;
          let selectedroutesCount: number = 0;
          this.IsUnSelectMultipleRoutes = true;
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.Routes != null &&
            this.DefaultDetails.Routes.Count > 0 &&
            this.DefaultDetails.Routes.Where((a) => a.IsSelected).Count() > 0
          ) {
            this.DefaultDetails.Routes.ForEach((a) => {
              let IsSel: boolean = a.IsSelected;
              if (IsSel) {
                a.IsSelected = false;
              }
            });
          }
          this.IsUnSelectMultipleRoutes = false;
          this.Route = null;
          if (
            this.DefaultDetails.RoutesBC != null &&
            this.DefaultDetails.RoutesBC.Count > 0
          ) {
            this.DefaultDetails.RoutesBC.ForEach((a) => (a.IsSelected = false));
            this.RouteSelected = null;
            selectedroutesCount =
              this.DefaultDetails.Routes != null
                ? this.DefaultDetails.Routes.Where((a) => a.IsSelected).Count()
                : 0;
            this.DefaultDetails.Routes = new ObservableCollection<CListItem>();
            this.DefaultDetails.RoutesBC.forEach((objItem) => {
              let oitem: CListItem = new CListItem();
              oitem = ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: objItem.DisplayText,
                IsDefault: objItem.IsDefault,
                Level: objItem.Level,
                Tag: objItem.Tag,
                Value: objItem.Value,
              });
              this.DefaultDetails.Routes.Add(oitem);
            });
            if (this.MultiRouteUnSubscribeEvent != null) {
              this.MultiRouteUnSubscribeEvent();
            }
          }
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.MultiRoutes != null &&
            this.DefaultDetails.MultiRoutes.Count > 0
          ) {
            this.DefaultDetails.MultiRoutes.ForEach(
              (a) => (a.IsSelected = false)
            );          
              this.CallMultiRoutePropertyChanged();          
          }
          this.RetriveNormalValues();
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend
          ) {
            this.IsMultiRouteCheckedforAmend = false;
          }
        }
      }
      // NotifyPropertyChanged("IsMultiRouteChecked");
    }
  }
  public IsChangedmultiRoute: boolean = false;
  public CountforRouteSelect: number = 0;
  public IsRouteRetriveNormalValues: boolean = false;
  public RetriveNormalValues(): void {
    if (
      String.Compare(
        this.itemSubType,
        CConstants.SUBTYPE,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      this.IsenableDosage = false;
      this.IsEnableStrength = false;
    } else {
      this.IsenableDosage = true;
      this.IsEnableStrength = true;
    }
    this.IsRouteRetriveNormalValues = true;
    this.Route = null;
    this.IsRouteRetriveNormalValues = false;
    this.InfusionType = null;
    if (this.InfusionDetails != null) {
      this.InfusionDetails.IsenableInfusionType = true;
      this.InfusionDetails.IsInfusionRateReadOnly = false;
      this.InfusionDetails.IsenableInfusionRate = true;
      this.InfusionDetails.IsenableInfusionrateDenominatoruom = true;
      this.InfusionDetails.IsenableInfusionratenumuom = true;
    }
    this.IsenableRoute = true;
    this.IsSiteEnabled = false;
    this.IsenableDoseType = true;
    this.IsSiteMandatory = false;
    this.IsStrengthMandatory = false;
    if (!this.oPrescitemVM.FormViewerDetails.BHasFormViewParams) {
      this.IsDosageFormMandatory = true;
    }
    this.DosageForm = null;
    this.Site = null;
    this.Strength = null;
    this.IsBrandMandatory = Visibility.Collapsed;
    this.IsAdminMethodVisible = Visibility.Collapsed;
  }
  private _IsMultiRouteCheckedforAmend: boolean = false;
  public get IsMultiRouteCheckedforAmend(): boolean {
    return this._IsMultiRouteCheckedforAmend;
  }
  public set IsMultiRouteCheckedforAmend(value: boolean) {
    this._IsMultiRouteCheckedforAmend = value;
    // NotifyPropertyChanged("IsMultiRouteCheckedforAmend");
  }
  private _isAdminInsVisible: Visibility = Visibility.Collapsed;
  public get IsAdminInsVisible(): Visibility {
    return this._isAdminInsVisible;
  }
  public set IsAdminInsVisible(value: Visibility) {
    if (this._isAdminInsVisible != value) {
      this._isAdminInsVisible = value;
      // NotifyPropertyChanged("IsAdminInsVisible");
    }
  }
  private _IsNoAdminTimeForPRN: boolean = false;
  public get IsNoAdminTimeForPRN(): boolean {
    return this._IsNoAdminTimeForPRN;
  }
  public set IsNoAdminTimeForPRN(value: boolean) {
    this._IsNoAdminTimeForPRN = value;
    // NotifyPropertyChanged("IsNoAdminTimeForPRN");
  }
  public get IsClinicallyVerified(): boolean {
    return this.isClinicallyVerified;
  }
  public set IsClinicallyVerified(value: boolean) {
    if (this.isClinicallyVerified != value) {
      this.isClinicallyVerified = value;
      if (!value) {
        if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.PrescriptionItemStatus ==
            CConstants.CLINICALLYVERIFIED &&
          !this.oPrescitemVM.bFormViewerLoadOnCVUnCheck &&
          !this.oPrescitemVM.bCVFlagSetThroughCode
        ) {
          this.oPrescitemVM.bFormViewerLoadOnCVUnCheck = true;
          this.oPrescitemVM.FormViewerClick();
        }
      }
      // NotifyPropertyChanged("IsClinicallyVerified");
    }
  }
  public get IsIDSNewmeds(): boolean {
    return this.isIDSNewmeds;
  }
  public set IsIDSNewmeds(value: boolean) {
    if (this.isIDSNewmeds != value) {
      if (!this.lstAmendedFlds.Contains('IsIDSNewmeds')) {
        this.lstAmendedFlds.Add('IsIDSNewmeds');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this.isIDSNewmeds = value;
      // NotifyPropertyChanged("IsIDSNewmeds");
    }
  }
  public _isenableNewMed: boolean = true;
  public get IsenableNewMed(): boolean {
    return this._isenableNewMed && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableNewMed(value: boolean) {
    if (value != this._isenableNewMed) {
      this._isenableNewMed = value;
      // super.NotifyPropertyChanged("IsenableNewMed");
    }
  }
  public get IsQuantityEnabled(): boolean {
    return this._isQuantityEnabled;
  }
  public set IsQuantityEnabled(value: boolean) {
    if (this._isQuantityEnabled != value) {
      this._isQuantityEnabled = value;
      // NotifyPropertyChanged("IsQuantityEnabled");
    }
  }
  private _isEnableAdminInst: boolean = true;
  public get IsEnableAdminInst(): boolean {
    return this._isEnableAdminInst;
  }
  public set IsEnableAdminInst(value: boolean) {
    if (this._isEnableAdminInst != value) {
      this._isEnableAdminInst = value;
      // NotifyPropertyChanged("IsEnableAdminInst");
    }
  }
  public get IsQuantityMandatory(): boolean {
    return this._isQuantityMandatory;
  }
  public set IsQuantityMandatory(value: boolean) {
    if (this._isQuantityMandatory != value) {
      this._isQuantityMandatory = value;
      // NotifyPropertyChanged("IsQuantityMandatory");
    }
  }
  public get IsClinicallyVerifiedUserChecked(): boolean {
    return this.isClinicallyVerifiedUserChecked;
  }
  public set IsClinicallyVerifiedUserChecked(value: boolean) {
    if (!this.isFormViewDataLoaded) {
      this.isClinicallyVerifiedUserChecked = value;
      // NotifyPropertyChanged("IsClinicallyVerifiedUserChecked");
    } else {
      if (this.isClinicallyVerifiedUserChecked != value) {
        this.isClinicallyVerifiedUserChecked = value;
        // NotifyPropertyChanged("IsClinicallyVerifiedUserChecked");
        if (this.ClinicallyVerified != null) this.ClinicallyVerified();
      }
    }
  }
  public get LowerDose(): number {
    return this._lowerdose;
  }
  public set LowerDose(value: number) {
    if (this._lowerdose != value) {
      this.ReasonforModification = null;
      this._lowerdose = value;
      // NotifyPropertyChanged("LowerDose");
    }
  }
  public get UpperDoseWidth(): GridLength {
    return this._upperDoseWidth;
  }
  public set UpperDoseWidth(value: GridLength) {
    if (this._upperDoseWidth != value) {
      this._upperDoseWidth = value;
      // NotifyPropertyChanged("UpperDoseWidth");
    }
  }
  public get HifenWidth(): GridLength {
    return this._HifenWidth;
  }
  public set HifenWidth(value: GridLength) {
    if (this._HifenWidth != value) {
      this._HifenWidth = value;
      // NotifyPropertyChanged("HifenWidth");
    }
  }
  public get LowerDoseWidth(): GridLength {
    return this._lowerDoseWidth;
  }
  public set LowerDoseWidth(value: GridLength) {
    if (this._lowerDoseWidth != value) {
      this._lowerDoseWidth = value;
      // NotifyPropertyChanged("LowerDoseWidth");
    }
  }
  public get VariableDoseInstructions(): string {
    return this._variableDoseInstructions;
  }
  public set VariableDoseInstructions(value: string) {
    if (this._variableDoseInstructions != value) {
      this._variableDoseInstructions = value;
      // NotifyPropertyChanged("VariableDoseInstructions");
    }
  }
  private _currentItemReviewafter: string;
  public get currentItemReviewafter(): string {
    return this._currentItemReviewafter;
  }
  public set currentItemReviewafter(value: string) {
    if (this._currentItemReviewafter != value) {
      this._currentItemReviewafter = value;
      // NotifyPropertyChanged("currentItemReviewafter");
    }
  }
  private _currentItemReviewafterUOM: CListItem;
  public get currentItemReviewafterUOM(): CListItem {
    return this._currentItemReviewafterUOM;
  }
  public set currentItemReviewafterUOM(value: CListItem) {
    if (value != this._currentItemReviewafterUOM) {
      this._currentItemReviewafterUOM = value;
      // super.NotifyPropertyChanged("currentItemReviewafterUOM");
    }
  }
  public bDoseFromCal: boolean = false;
  public bDoseChange: boolean = false;
  public OldDose: string;
  public get Dose(): string {
    //Revisit Required
    return this._dose?.toString() || null;
    //return this._dose;
  }
  public set Dose(value: string) {
    if (this._dose != value) {
      if (!this.isFormViewDataLoaded) {
        this._dose = value;
        //super.NotifyPropertyChanged("Dose");
      } else {
        if (!String.IsNullOrEmpty(value)) {
          this.IsenableRSNFORMOD = true;
          this.IsMandatoryRSNFORMOD = true;
          if (
            (this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
              this.actualClerkingValues != null &&
              !String.IsNullOrEmpty(this.actualClerkingValues.Dose) &&
              String.Compare(this.actualClerkingValues.Dose, value) != 0) ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend
          ) {
            this.IsMandatoryReasonForMedClerkModify = true;
            this.SetOnadmissionValue(value, this._dose);
          }
        }
        if (!this.IsInfusionRateChanged) {
          this.IsInfusionRateChanged = true;
        }
        if (!this.lstAmendedFlds.Contains('Dose'))
          this.lstAmendedFlds.Add('Dose');
        if (!this.lstDRCAmendedFlds.Contains('Dose'))
          this.lstDRCAmendedFlds.Add('Dose');
        if (
          (String.IsNullOrEmpty(this._dose) && !String.IsNullOrEmpty(value)) ||
          (String.IsNullOrEmpty(value) && !String.IsNullOrEmpty(this._dose)) ||
          (!String.IsNullOrEmpty(this._dose) &&
            !String.IsNullOrEmpty(value) &&
            String.Compare(
              this._dose,
              value,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0)
        ) {
          this.oPrescitemVM.TechnicallyValidateMessage();
        }
        if (
          this.DoseType != null &&
          !String.IsNullOrEmpty(this.DoseType.Value) &&
          !String.Equals(this.DoseType.Value, DoseTypeCode.CONDITIONAL)
        ) {
          this.ClearPrescribedQuantity();
        }
        this._dose = value;
        if (
          this.InfusionType != null &&
          !String.IsNullOrEmpty(this.InfusionType.Value) &&
          (String.Compare(
            this.InfusionType.Value,
            InfusionTypesCode.SINGLEDOSEVOLUME
          ) == 0 ||
            String.Compare(this.InfusionType.Value, InfusionTypesCode.FLUID) ==
              0) &&
          this.IsClearlstAmendedFlds
        ) {
          //Not Required for LHS. To be Re-Visited.
          this.oPrescitemVM.LaunchInfusionrateCalculator(false);
        }
        //super.NotifyPropertyChanged("Dose");
        this.DCAmendMessage();
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
    }
  }
  public ClearPrescribedQuantity(): void {
    if (
      this.IsShowFormviwer &&
      this.oPrescitemVM != null &&
      !this.oPrescitemVM.IsAddedToResolveGrid &&
      !this.SupplyInstResetAmend &&
      this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
      this.IsClearlstAmendedFlds &&
      (!String.IsNullOrEmpty(this.Quantity) ||
        this.QuantityUOM != null ||
        (!String.IsNullOrEmpty(this.SupplyInsTextWithComments) &&
          !String.Equals(
            this.SupplyInsTextWithComments,
            Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
            StringComparison.InvariantCultureIgnoreCase
          )) ||
        (!String.IsNullOrEmpty(this.SupplyInsText) &&
          !String.Equals(
            this.SupplyInsText,
            Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
            StringComparison.InvariantCultureIgnoreCase
          )) ||
        DateTime.NotEquals(this.NextSupplyDate, DateTime.MinValue))
    ) {
      if (this.oPrescitemVM.FormViewerDetails.BasicDetails.IsQuantityEnabled) {
        this.Quantity = String.Empty;
        this.QuantityUOM = null;
      }
      if (
        this.oPrescitemVM.formViewerDetails != null &&
        !this.oPrescitemVM.formViewerDetails.BHasFormViewParams
      ) {
        this.IsMandatorySupplyInstr = false;
      }
      this.SupplyInsText = String.Empty;
      this.SupplyInsText =
        Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
      this.SupplyInsVal = String.Empty;
      this.SupplyInsTextWithComments =
        Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
      this.Supplycomments = String.Empty;
      this.NextSupplyDate = DateTime.MinValue;
      this.TechsupplyInstText = String.Empty;
      this.SelectedsupplyInstruction = null;
      this.PrevSelectedsupplyInstruction = null;
      this.SupplyInstResetAmend = true;
      this.TecValOperationMode = 'D';
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
          null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionDetails
          .FluidPrescribableItemListOID > 0 &&
        this.oPrescitemVM.PresTechValidatedItemsChild != null &&
        this.oPrescitemVM.PresTechValidatedItemsChild.Count == 1 &&
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails !=
          null &&
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails
          .BasicDetails != null
      ) {
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails.BasicDetails.SupplyInsText =
          Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails.BasicDetails.SupplyInsVal =
          String.Empty;
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails.BasicDetails.SupplyInsTextWithComments =
          Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails.BasicDetails.Supplycomments =
          String.Empty;
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails.BasicDetails.TechsupplyInstText =
          String.Empty;
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
          null;
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails.BasicDetails.PrevSelectedsupplyInstruction =
          null;
        this.oPrescitemVM.PresTechValidatedItemsChild[0].FormViewerDetails.BasicDetails.NextSupplyDate =
          DateTime.MinValue;
      }
      if (
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails != null &&
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails
          .PresTechValidatedItems != null &&
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails
          .PresTechValidatedItems.Count > 0 &&
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails
          .PresTechValidatedItems[0].FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails
          .PresTechValidatedItems[0].FormViewerDetails.BasicDetails != null
      ) {
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
          null;
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SupplyInsText =
          null;
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.SupplyInsVal =
          null;
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].FormViewerDetails.BasicDetails.Supplycomments =
          null;
      }
    } else if (
      this.IsShowFormviwer &&
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
      !this.oPrescitemVM.IsAddedToResolveGrid &&
      !this.SupplyInstResetAmend &&
      this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
      this.IsClearlstAmendedFlds &&
      !String.IsNullOrEmpty(this.oPrescitemVM.ItemSubType) &&
      String.Equals(
        this.oPrescitemVM.FormViewerDetails.BasicDetails.itemSubType,
        CConstants.SUBTYPE
      )
    ) {
      this.oPrescitemVM.IsAmendMCISupplyClear = true;
    }
  }
  oMedDoseReason_Closed(args: AppDialogEventargs): void {
    this.oChildWindow = args.AppChildWindow;
    if (args.Result == AppDialogResult.Ok && args.Content != null) {
      //Not Required for LHS. To be Re-Visited.
      /*
                this.oMedDoseReason = ObjectHelper.CreateType<Meddosecalcreason>(args.Content, Meddosecalcreason);
                if (this.oMedDoseReason.cmdOk_Click()) {
                    this.bDoseChange = false;
                    this.Dose = this.Dose;
                    this.oChildWindow.DialogResult = false;
                }
               */
    } else if (args.Result == AppDialogResult.Cancel && args.Content != null) {
      let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
        Title: 'LORENZO',
        Message: 'You are about to cancel this activity, are you sure?',
        MessageButton: MessageBoxButton.YesNo,
        IconType: MessageBoxType.Question,
      });
      iMsgBox.MessageBoxClose = (s, e) => {
        this.iMsgBox_MessageBoxClose(s, e);
      };
      iMsgBox.Show();
    }
    this.IsDoseOverrideViewOpen = false;
  }
  iMsgBox_MessageBoxClose(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.Yes) {
      this.bDoseChange = false;
      this.Dose = this.OldDose;
      this.oChildWindow.DialogResult = false;
    }
  }
  private _PrepStatus: CListItem;
  private _quantityUOMName: string;
  private _drugProperties: ObservableCollection<DrugProperty>;
  private _VMdrugProperties: DrugProperty;
  private _VMRouteFormForCD: boolean = false;
  public get VMRouteFormForCD(): boolean {
    return this._VMRouteFormForCD;
  }
  public set VMRouteFormForCD(value: boolean) {
    this._VMRouteFormForCD = value;
    //NotifyPropertyChanged("VMRouteFormForCD");
  }
  private _CDItemLevelVM: boolean = false;
  public get CDItemLevelVM(): boolean {
    return this._CDItemLevelVM;
  }
  public set CDItemLevelVM(value: boolean) {
    this._CDItemLevelVM = value;
    //NotifyPropertyChanged("CDItemLevelVM");
  }
  private _NonFDBRouteFlag: boolean = false;
  public get NonFDBRouteFlag(): boolean {
    return this._NonFDBRouteFlag;
  }
  public set NonFDBRouteFlag(value: boolean) {
    this._NonFDBRouteFlag = value;
    //NotifyPropertyChanged("NonFDBRouteFlag");
  }
  private _IsReviewAvailableBeforeSequence: boolean = false;
  public get IsReviewAvailableBeforeSequence(): boolean {
    return this._IsReviewAvailableBeforeSequence;
  }
  public set IsReviewAvailableBeforeSequence(value: boolean) {
    this._IsReviewAvailableBeforeSequence = value;
    //NotifyPropertyChanged("IsReviewAvailableBeforeSequence");
  }
  private _ReviewafterUOM: CListItem;
  public get ReviewafterUOM(): CListItem {
    return this._ReviewafterUOM;
  }
  public set ReviewafterUOM(value: CListItem) {
    if (value != this._ReviewafterUOM) {
      if (!this.isFormViewDataLoaded) {
        this._ReviewafterUOM = value;
      } else {
        if (!this.lstAmendedFlds.Contains('ReviewafterUOM')) {
          this.lstAmendedFlds.Add('ReviewafterUOM');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._ReviewafterUOM = value;
      }
    }
    if (
      this.DefaultDetails != null &&
      value != null &&
      this.DefaultDetails.ReviewAfterUOMList != null &&
      this.DefaultDetails.ReviewAfterUOMList.Count > 0
    ) {
      if (
        this.IsRestoreOldValues &&
        value != null &&
        !String.IsNullOrEmpty(value.Value) &&
        this.DefaultDetails.ReviewAfterUOMList != null &&
        this.DefaultDetails.ReviewAfterUOMList.IndexOf(value) < 0
      ) {
        this.DefaultDetails.ReviewAfterUOMList.Add(value);
      }
      this._ReviewafterUOM = this.GetReviewUOMComboValue(
        value,
        this.DefaultDetails.ReviewAfterUOMList
      );
    } else this._ReviewafterUOM = value;
    //NotifyPropertyChanged("ReviewafterUOM");
    if (
      (this.ReviewAfter != null &&
        !String.IsNullOrEmpty(this.ReviewAfter) &&
        String.Compare(this.ReviewAfter, '-1.79769313486232E+308') != 0 &&
        String.Compare(this.ReviewAfter, '-2147483648.0') != 0 &&
        String.Compare(this.ReviewAfter, '-2147483648') != 0 &&
        Convert.ToDouble(this.ReviewAfter) != Number.MinValue) ||
      (this._ReviewafterUOM != null &&
        !String.IsNullOrEmpty(this._ReviewafterUOM.Value))
    ) {
      this.ReviewAfterCommentsVisible = Visibility.Visible;
    } else if (
      (this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
        this.IsReviewAfterModifiedInAmend) ||
      (this.oPrescitemVM.ActionCode != ActivityTypes.Amend &&
        !this.IsReviewAfterModifiedInAmend)
    ) {
      this.ReviewAfterCommentsVisible = Visibility.Collapsed;
      this.ReviewRequestComments = String.Empty;
    }
    if (
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.ReviewAfterVisible == Visibility.Visible &&
      this.oPrescitemVM != null &&
      this.ReviewAfterCalRequired
    ) {
      this.oPrescitemVM.GetReviewAfterDatetime();
    }
  }
  public get InfusionDetails(): InfusionVM {
    return this._infusionDetails;
  }
  public set InfusionDetails(value: InfusionVM) {
    if (this._infusionDetails != value) {
      this._infusionDetails = value;
      // NotifyPropertyChanged("InfusionDetails");
    }
  }
  public get TechsupplyInstText(): string {
    return this._TechsupplyInstText;
  }
  public set TechsupplyInstText(value: string) {
    this._TechsupplyInstText = value;
    //NotifyPropertyChanged("TechsupplyInstText");
  }
  private _TechSupplyInstrItemLevel: string;
  public get TechSupplyInstrItemLevel(): string {
    return this._TechSupplyInstrItemLevel;
  }
  public set TechSupplyInstrItemLevel(value: string) {
    this._TechSupplyInstrItemLevel = value;
  }
  private _TechSupplyBy: string;
  public get TechSupplyBy(): string {
    return this._TechSupplyBy;
  }
  public set TechSupplyBy(value: string) {
    this._TechSupplyBy = value;
  }
  private _TechSupplyDTTM: DateTime = DateTime.MinValue;
  public get TechSupplyDTTM(): DateTime {
    return this._TechSupplyDTTM;
  }
  public set TechSupplyDTTM(value: DateTime) {
    this._TechSupplyDTTM = value;
    // NotifyPropertyChanged("TechSupplyDTTM");
  }
  private _TechSupplyByChild: string;
  public get TechSupplyByChild(): string {
    return this._TechSupplyByChild;
  }
  public set TechSupplyByChild(value: string) {
    this._TechSupplyByChild = value;
  }
  private _EditedGridID: number = 0;
  public get EditedGridID(): number {
    return this._EditedGridID;
  }
  public set EditedGridID(value: number) {
    this._EditedGridID = value;
  }
  public PreviousComments: string = '';
  private _PrevSupplyComments: string;
  public get PrevSupplyComments(): string {
    return this._PrevSupplyComments;
  }
  public set PrevSupplyComments(value: string) {
    this._PrevSupplyComments = value;
  }
  private _OriginalSupplyComments: string;
  public get OriginalSupplyComments(): string {
    return this._OriginalSupplyComments;
  }
  public set OriginalSupplyComments(value: string) {
    this._OriginalSupplyComments = value;
  }
  private _OriginalNextSupplyDate: DateTime = DateTime.MinValue;
  public get OriginalNextSupplyDate(): DateTime {
    return this._OriginalNextSupplyDate;
  }
  public set OriginalNextSupplyDate(value: DateTime) {
    this._OriginalNextSupplyDate = value;
  }
  private _OriginalFluidNextSupplyDate: DateTime = DateTime.MinValue;
  public get OriginalFluidNextSupplyDate(): DateTime {
    return this._OriginalFluidNextSupplyDate;
  }
  public set OriginalFluidNextSupplyDate(value: DateTime) {
    this._OriginalFluidNextSupplyDate = value;
  }
  private _FluidNextSupplyDate: DateTime = DateTime.MinValue;
  public get FluidNextSupplyDate(): DateTime {
    return this._FluidNextSupplyDate;
  }
  public set FluidNextSupplyDate(value: DateTime) {
    this._FluidNextSupplyDate = value;
  }
  private _NextSupplyDate: DateTime = DateTime.MinValue;
  public get NextSupplyDate(): DateTime {
    return this._NextSupplyDate;
  }
  public set NextSupplyDate(value: DateTime) {
    if (this._NextSupplyDate != value) {
      let dNextSupplyRemoved: DateTime = DateTime.MinValue;
      if (
        value == DateTime.MinValue &&
        this._NextSupplyDate != DateTime.MinValue
      ) {
        dNextSupplyRemoved = this._NextSupplyDate;
      }
      this._NextSupplyDate = value;
      this.IsenableRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('NextSupplyDates')) {
        this.lstAmendedFlds.Add('NextSupplyDates');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      if (value != DateTime.MinValue) {
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.PresTechValidatedItemsChild != null &&
          this.oPrescitemVM.PresTechValidatedItemsChild.Count > 0 &&
          this.oPrescitemVM.PresTechValidatedItemsChild.All(
            (x) => x.FluidPrescribableItemListOID == 0
          )
        ) {
          this.oPrescitemVM.PresTechValidatedItemsChild.forEach((child) => {
            child.EnableChildMCIComp = false;
          });
        } else if (
          this.ParentMCIItem != null &&
          this.ParentMCIItem.PresTechValidatedItemsChild != null &&
          this.ParentMCIItem.PresTechValidatedItemsChild.Count > 0 &&
          this.ParentMCIItem.FormViewerDetails != null &&
          ((this.ParentMCIItem.FormViewerDetails.MulticomponentDetails !=
            null &&
            this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo != null &&
            this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count > 0 &&
            this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count ==
              this.ParentMCIItem.PresTechValidatedItemsChild.Count) ||
            (!String.IsNullOrEmpty(ContextInfo.MenuCode) &&
              String.Equals(
                ContextInfo.MenuCode,
                CConstants.TechnicallyValidateMenuCode,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              (this.ParentMCIItem.PresTechValidatedItemsChild.Any(
                (x) =>
                  x.EditedGridID == 1 ||
                  x.FormViewerDetails.BasicDetails.EditedGridID == 1
              ) ||
                !String.Equals(value, this.OriginalNextSupplyDate))))
        ) {
          this.ParentMCIItem.EnableParentMCIItem = false;
          if (
            this.ParentMCIItem.PresTechValidatedItemsChild.All(
              (x) => x.bAvoidNextSupplyFirsttime == false
            )
          ) {
            this.ParentMCIItem.EnableParentMCIItem = true;
          }
          this.ParentMCIItem.PresTechValidatedItemsChild.forEach((child) => {
            if (
              child.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0 ||
              (child.FormViewerDetails.TechValidateDetails != null &&
                child.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems != null &&
                child.FormViewerDetails.TechValidateDetails.TechValidatedItems
                  .Count > 0 &&
                child.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[0] != null &&
                child.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[0].PrescriptionItemTechOID > 0) ||
              this.ParentMCIItem.ActionCode == ActivityTypes.Amend
            ) {
              child.FormViewerDetails.BasicDetails.TecValOperationMode = 'M';
            } else {
              child.FormViewerDetails.BasicDetails.TecValOperationMode = 'N';
            }
          });
        }
        if (value != this.OriginalNextSupplyDate) {
          this.EditedGridID = 1;
        }
      } else if (dNextSupplyRemoved != DateTime.MinValue) {
        if (
          this.ParentMCIItem != null &&
          this.ParentMCIItem.PresTechValidatedItemsChild != null &&
          this.ParentMCIItem.PresTechValidatedItemsChild.Count > 0
        ) {
          this.ParentMCIItem.PresTechValidatedItemsChild.forEach((child) => {
            if (
              this.identifyingOID ==
                child.FormViewerDetails.BasicDetails.identifyingOID &&
              String.Equals(
                this.IdentifyingName,
                child.FormViewerDetails.BasicDetails.IdentifyingName
              )
            ) {
              if (
                child.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0 ||
                this.ParentMCIItem.ActionCode == ActivityTypes.Amend
              ) {
                child.FormViewerDetails.BasicDetails.TecValOperationMode = 'D';
              }
            } else {
              if (
                child.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0 ||
                this.ParentMCIItem.ActionCode == ActivityTypes.Amend
              ) {
                child.FormViewerDetails.BasicDetails.TecValOperationMode = 'M';
              } else {
                child.FormViewerDetails.BasicDetails.TecValOperationMode = 'N';
              }
            }
          });
        }
      }
      if (
        DateTime.MinValue == value &&
        this.ParentMCIItem == null &&
        (String.IsNullOrEmpty(this.SupplyInsTextWithComments) ||
          String.Equals(
            this.SupplyInsTextWithComments,
            Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
            StringComparison.InvariantCultureIgnoreCase
          )) &&
        (this.SelectedsupplyInstruction == null ||
          (this.SelectedsupplyInstruction != null &&
            this.SelectedsupplyInstruction.Count == 0))
      ) {
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.PresTechValidatedItemsChild != null &&
          this.oPrescitemVM.PresTechValidatedItemsChild.Count > 0 &&
          this.oPrescitemVM.SelectedSupplyreq != null &&
          String.Equals(
            this.oPrescitemVM.SelectedSupplyreq.Value,
            Resource.TechValidate.Empty
          )
        ) {
          this.oPrescitemVM.PresTechValidatedItemsChild.forEach((child) => {
            child.EnableChildMCIComp = true;
          });
        }
      } else if (
        DateTime.MinValue == value &&
        this.ParentMCIItem != null &&
        !String.IsNullOrEmpty(this.ParentMCIItem.ItemSubType) &&
        String.Equals(
          this.ParentMCIItem.ItemSubType,
          'CC_MULCMPNTITM',
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        this.ParentMCIItem.PresTechValidatedItemsChild != null &&
        this.ParentMCIItem.PresTechValidatedItemsChild.Count > 0 &&
        ((this.ParentMCIItem.FormViewerDetails.MulticomponentDetails != null &&
          this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo != null &&
          this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo.Count > 0 &&
          this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo.Count ==
            this.ParentMCIItem.PresTechValidatedItemsChild.Count) ||
          (!String.IsNullOrEmpty(ContextInfo.MenuCode) &&
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.TechnicallyValidateMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ))) &&
        this.ParentMCIItem.PresTechValidatedItemsChild.All(
          (x) =>
            x.FormViewerDetails != null &&
            x.FormViewerDetails.BasicDetails != null &&
            String.IsNullOrEmpty(
              x.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            x.FormViewerDetails.BasicDetails.NextSupplyDate == DateTime.MinValue
        ) &&
        this.ParentMCIItem.PresTechValidatedItemsChild.All(
          (x) =>
            x.SelectedSupplyreq != null &&
            x.SelectedSupplyreq.Value.Equals(Resource.TechValidate.Empty)
        ) &&
        this.ParentMCIItem.PresTechValidatedItemsChild.All(
          (x) =>
            (x.FormViewerDetails != null &&
              x.FormViewerDetails.BasicDetails != null &&
              x.FormViewerDetails.BasicDetails.SelectedsupplyInstruction ==
                null) ||
            x.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count ==
              0
        )
      ) {
        this.ParentMCIItem.EnableParentMCIItem = true;
      }
      // NotifyPropertyChanged("NextSupplyDate");
    } else if (
      this._NextSupplyDate == DateTime.MinValue &&
      value == DateTime.MinValue
    ) {
      // NotifyPropertyChanged("NextSupplyDate");
    }
  }
  private _PrevNextSupplyDate: DateTime = DateTime.MinValue;
  public get PrevNextSupplyDate(): DateTime {
    return this._PrevNextSupplyDate;
  }
  public set PrevNextSupplyDate(value: DateTime) {
    this._PrevNextSupplyDate = value;
    // NotifyPropertyChanged("PrevNextSupplyDate");
  }
  private _RangeStartNextSupply: DateTime = DateTime.MinValue.Date;
  public get RangeStartNextSupply(): DateTime {
    return this._RangeStartNextSupply;
  }
  public set RangeStartNextSupply(value: DateTime) {
    this._RangeStartNextSupply = value;
    // NotifyPropertyChanged("RangeStartNextSupply");
  }
  private _RangeEndNextSupply: DateTime = DateTime.MaxValue.Date;
  public get RangeEndNextSupply(): DateTime {
    return this._RangeEndNextSupply;
  }
  public set RangeEndNextSupply(value: DateTime) {
    this._RangeEndNextSupply = value;
    // NotifyPropertyChanged("RangeEndNextSupply");
  }
  public get Supplycomments(): string {
    return this._Supplycomments;
  }
  public set Supplycomments(value: string) {
    if (this._Supplycomments != value) {
      let sCommentsRemoved: string = String.Empty;
      if (
        value == String.Empty &&
        !String.IsNullOrEmpty(this._Supplycomments)
      ) {
        sCommentsRemoved = this._Supplycomments;
        this.EditedGridID = 1;
      }
      this._Supplycomments = value;
      this.IsenableRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('Supplycomments')) {
        this.lstAmendedFlds.Add('Supplycomments');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      if (
        !String.Equals(
          this.SupplyInsText,
          Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !String.IsNullOrEmpty(value)
      ) {
        this.SupplyInsTextWithComments =
          this.SupplyInsText + Environment.NewLine + 'Comments:' + value;
      } else if (
        String.Equals(
          this.SupplyInsText,
          Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !String.IsNullOrEmpty(value)
      ) {
        this.SupplyInsTextWithComments = 'Comments:' + value;
      } else if (
        !String.Equals(
          this.SupplyInsText,
          Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        String.IsNullOrEmpty(value)
      ) {
        this.SupplyInsTextWithComments = this.SupplyInsText;
      } else {
        this.SupplyInsTextWithComments =
          Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
      }
      if (
        this.TechCASupplyInstrClick != null &&
        !String.IsNullOrEmpty(ContextInfo.MenuCode) &&
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.TechnicallyValidateMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.TechCASupplyInstrClick(this.oPrescitemVM);
      }
      if (!String.IsNullOrEmpty(value)) {
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.PresTechValidatedItemsChild != null &&
          this.oPrescitemVM.PresTechValidatedItemsChild.Count > 0 &&
          this.oPrescitemVM.PresTechValidatedItemsChild.All(
            (x) => x.FluidPrescribableItemListOID == 0
          )
        ) {
          this.oPrescitemVM.PresTechValidatedItemsChild.forEach((child) => {
            child.EnableChildMCIComp = false;
          });
        } else if (
          this.ParentMCIItem != null &&
          this.ParentMCIItem.PresTechValidatedItemsChild != null &&
          this.ParentMCIItem.PresTechValidatedItemsChild.Count > 0 &&
          this.ParentMCIItem.FormViewerDetails != null &&
          ((this.ParentMCIItem.FormViewerDetails.MulticomponentDetails !=
            null &&
            this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo != null &&
            this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count > 0 &&
            this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
              .oMCItemBasicInfo.Count ==
              this.ParentMCIItem.PresTechValidatedItemsChild.Count) ||
            (!String.IsNullOrEmpty(ContextInfo.MenuCode) &&
              String.Equals(
                ContextInfo.MenuCode,
                CConstants.TechnicallyValidateMenuCode,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              (this.ParentMCIItem.PresTechValidatedItemsChild.Any(
                (x) =>
                  x.EditedGridID == 1 ||
                  x.FormViewerDetails.BasicDetails.EditedGridID == 1
              ) ||
                !String.Equals(value, this.PrevSupplyComments))))
        ) {
          this.ParentMCIItem.EnableParentMCIItem = false;
          this.ParentMCIItem.PresTechValidatedItemsChild.forEach((child) => {
            if (
              child.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0 ||
              (child.FormViewerDetails.TechValidateDetails != null &&
                child.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems != null &&
                child.FormViewerDetails.TechValidateDetails.TechValidatedItems
                  .Count > 0 &&
                child.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[0] != null &&
                child.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[0].PrescriptionItemTechOID > 0) ||
              this.ParentMCIItem.ActionCode == ActivityTypes.Amend
            ) {
              child.FormViewerDetails.BasicDetails.TecValOperationMode = 'M';
            } else {
              child.FormViewerDetails.BasicDetails.TecValOperationMode = 'N';
            }
          });
        }
        if (!String.Equals(value, this.PrevSupplyComments)) {
          this.EditedGridID = 1;
        }
      } else if (!String.IsNullOrEmpty(sCommentsRemoved)) {
        if (
          this.ParentMCIItem != null &&
          this.ParentMCIItem.PresTechValidatedItemsChild != null &&
          this.ParentMCIItem.PresTechValidatedItemsChild.Count > 0
        ) {
          this.ParentMCIItem.PresTechValidatedItemsChild.forEach((child) => {
            if (
              this.identifyingOID ==
                child.FormViewerDetails.BasicDetails.identifyingOID &&
              String.Equals(
                this.IdentifyingName,
                child.FormViewerDetails.BasicDetails.IdentifyingName
              )
            ) {
              if (
                child.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0 ||
                this.ParentMCIItem.ActionCode == ActivityTypes.Amend
              ) {
                child.FormViewerDetails.BasicDetails.TecValOperationMode = 'D';
              }
            } else {
              if (
                child.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0 ||
                this.ParentMCIItem.ActionCode == ActivityTypes.Amend
              ) {
                child.FormViewerDetails.BasicDetails.TecValOperationMode = 'M';
              } else {
                child.FormViewerDetails.BasicDetails.TecValOperationMode = 'N';
              }
            }
          });
        }
      }
      if (
        String.IsNullOrEmpty(value) &&
        this.ParentMCIItem == null &&
        String.Equals(
          this.SupplyInsTextWithComments,
          Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        (this.SelectedsupplyInstruction == null ||
          (this.SelectedsupplyInstruction != null &&
            this.SelectedsupplyInstruction.Count == 0)) &&
        this.NextSupplyDate == DateTime.MinValue
      ) {
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.PresTechValidatedItemsChild != null &&
          this.oPrescitemVM.PresTechValidatedItemsChild.Count > 0 &&
          this.oPrescitemVM.SelectedSupplyreq != null &&
          String.Equals(
            this.oPrescitemVM.SelectedSupplyreq.Value,
            Resource.TechValidate.Empty
          )
        ) {
          this.oPrescitemVM.PresTechValidatedItemsChild.forEach((child) => {
            child.EnableChildMCIComp = true;
          });
        }
      } else if (
        String.IsNullOrEmpty(value) &&
        this.ParentMCIItem != null &&
        !String.IsNullOrEmpty(this.ParentMCIItem.ItemSubType) &&
        String.Equals(
          this.ParentMCIItem.ItemSubType,
          'CC_MULCMPNTITM',
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        this.ParentMCIItem.PresTechValidatedItemsChild != null &&
        this.ParentMCIItem.PresTechValidatedItemsChild.Count > 0 &&
        ((this.ParentMCIItem.FormViewerDetails.MulticomponentDetails != null &&
          this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo != null &&
          this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo.Count > 0 &&
          this.ParentMCIItem.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo.Count ==
            this.ParentMCIItem.PresTechValidatedItemsChild.Count) ||
          (!String.IsNullOrEmpty(ContextInfo.MenuCode) &&
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.TechnicallyValidateMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ))) &&
        this.ParentMCIItem.PresTechValidatedItemsChild.All(
          (x) =>
            x.FormViewerDetails != null &&
            x.FormViewerDetails.BasicDetails != null &&
            String.IsNullOrEmpty(
              x.FormViewerDetails.BasicDetails.Supplycomments
            )
        ) &&
        this.ParentMCIItem.PresTechValidatedItemsChild.All(
          (x) =>
            x.SelectedSupplyreq != null &&
            x.SelectedSupplyreq.Value.Equals(Resource.TechValidate.Empty)
        ) &&
        this.ParentMCIItem.PresTechValidatedItemsChild.All(
          (x) =>
            (x.FormViewerDetails != null &&
              x.FormViewerDetails.BasicDetails != null &&
              x.FormViewerDetails.BasicDetails.SelectedsupplyInstruction ==
                null) ||
            x.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count ==
              0
        )
      ) {
        this.ParentMCIItem.EnableParentMCIItem = true;
      }
      //NotifyPropertyChanged("Supplycomments");
    }
  }
  private _SupplyInsTextWithComments: string;
  public get SupplyInsTextWithComments(): string {
    return this._SupplyInsTextWithComments;
  }
  public set SupplyInsTextWithComments(value: string) {
    if (this._SupplyInsTextWithComments != value) {
      //R/f from 2.23 QC 235751
      if(String.IsNullOrEmpty(value))
      {
        value = Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
      }
      this._SupplyInsTextWithComments = value;
    }
    //super.NotifyPropertyChanged("SupplyInsTextWithComments");
  }
  private _SupplyInstResetAmend: boolean = false;
  public get SupplyInstResetAmend(): boolean {
    return this._SupplyInstResetAmend;
  }
  public set SupplyInstResetAmend(value: boolean) {
    this._SupplyInstResetAmend = value;
    //NotifyPropertyChanged("SupplyInstResetAmend");
  }
  private _TechvalMsgResetAmend: boolean = false;
  public get TechvalMsgResetAmend(): boolean {
    return this._TechvalMsgResetAmend;
  }
  public set TechvalMsgResetAmend(value: boolean) {
    this._TechvalMsgResetAmend = value;
    //NotifyPropertyChanged("TechvalMsgResetAmend");
  }
  private _RHSSupplyInstrIconTooltip: boolean = false;
  public get RHSSupplyInstrIconTooltip(): boolean {
    return this._RHSSupplyInstrIconTooltip;
  }
  public set RHSSupplyInstrIconTooltip(value: boolean) {
    this._RHSSupplyInstrIconTooltip = value;
    // NotifyPropertyChanged("RHSSupplyInstrIconTooltip");
  }
  private _ExistingSupplyinstruction: ObservableCollection<CListItem>;
  public get ExistingSupplyinstruction(): ObservableCollection<CListItem> {
    return this._ExistingSupplyinstruction;
  }
  public set ExistingSupplyinstruction(value: ObservableCollection<CListItem>) {
    this._ExistingSupplyinstruction = value;
    // NotifyPropertyChanged("ExistingSupplyinstruction");
  }
  private _InAmendSupplyinstrClear: boolean = false;
  public get InAmendSupplyinstrClear(): boolean {
    return this._InAmendSupplyinstrClear;
  }
  public set InAmendSupplyinstrClear(value: boolean) {
    this._InAmendSupplyinstrClear = value;
    // NotifyPropertyChanged("InAmendSupplyinstrClea");
  }
  private _IsSupplyinstrChanged: boolean = true;
  public get IsSupplyinstrChanged(): boolean {
    return this._IsSupplyinstrChanged;
  }
  public set IsSupplyinstrChanged(value: boolean) {
    this._IsSupplyinstrChanged = value;
    // NotifyPropertyChanged("IsSupplyinstrChanged");
  }
  private _ExistingSupplyComments: string;
  public get ExistingSupplyComments(): string {
    return this._ExistingSupplyComments;
  }
  public set ExistingSupplyComments(value: string) {
    this._ExistingSupplyComments = value;
    // super.NotifyPropertyChanged("ExistingSupplyComments");
  }
  private _ReviewDurMsgReset: boolean = false;
  public get ReviewDurMsgReset(): boolean {
    return this._ReviewDurMsgReset;
  }
  public set ReviewDurMsgReset(value: boolean) {
    this._ReviewDurMsgReset = value;
    // NotifyPropertyChanged("ReviewDurMsgReset");
  }
  public get IngredientWarning(): string {
    return this._ingredientWarning;
  }
  public set IngredientWarning(value: string) {
    this._ingredientWarning = value;
    // super.NotifyPropertyChanged("IngredientWarning");
  }
  public get HighRiskMsg(): string {
    return this._highRiskMsg;
  }
  public set HighRiskMsg(value: string) {
    this._highRiskMsg = value;
    // super.NotifyPropertyChanged("HighRiskMsg");
  }
  private _IsValidateDoseSafty: boolean = false;
  public get IsValidateDoseSafty(): boolean {
    return this._IsValidateDoseSafty;
  }
  public set IsValidateDoseSafty(value: boolean) {
    this._IsValidateDoseSafty = value;
    // NotifyPropertyChanged("IsValidateDoseSafty");
  }
  private _IsValidateBolusSafty: boolean = false;
  public get IsValidateBolusSafty(): boolean {
    return this._IsValidateBolusSafty;
  }
  public set IsValidateBolusSafty(value: boolean) {
    this._IsValidateBolusSafty = value;
    // NotifyPropertyChanged("IsValidateBolusSafty");
  }
  private _IsValidateBoosterSafty: boolean = false;
  public get IsValidateBoosterSafty(): boolean {
    return this._IsValidateBoosterSafty;
  }
  public set IsValidateBoosterSafty(value: boolean) {
    this._IsValidateBoosterSafty = value;
    // NotifyPropertyChanged("IsValidateBoosterSafty");
  }
  public get IsenableStopDate(): boolean {
    return this._IsenableStopDate;
  }
  public set IsenableStopDate(value: boolean) {
    if (value) {
      if (
        this.FrequencyUOM != null &&
        String.Compare(this.FrequencyUOM, 'CC_IPONCENLY') == 0
      ) {
        value = false;
      }
      if (
        this.DurationUOM != null &&
        String.Equals(this.DurationUOM.Value, 'CC_DOSES') &&
        !String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this._IsenableStopDate = false;
      } else {
        this._IsenableStopDate = value;
      }
    } else {
      this._IsenableStopDate = value;
    }
    //super.NotifyPropertyChanged("IsenableStopDate");
  }
  private _IsMultiRouteMessage: boolean = false;
  public get IsMultiRouteMessage(): boolean {
    return this._IsMultiRouteMessage;
  }
  public set IsMultiRouteMessage(value: boolean) {
    this._IsMultiRouteMessage = value;
  }
  public get IsConflictExistSealInfo(): boolean {
    return this._IsConflictExistSealInfo;
  }
  public set IsConflictExistSealInfo(value: boolean) {
    this._IsConflictExistSealInfo = value;
    if (value) {
      this.ConflictExistSealInfoVisible = Visibility.Visible;
    } else {
      this.ConflictExistSealInfoVisible = Visibility.Collapsed;
    }
    //super.NotifyPropertyChanged("IsConflictExistSealInfo");
  }
  private _IsConflictExistSealLock: boolean = false;
  public get IsConflictExistSealLock(): boolean {
    return this._IsConflictExistSealLock;
  }
  public set IsConflictExistSealLock(value: boolean) {
    this._IsConflictExistSealLock = value;
  }
  private _ConflictExistSealInfoVisible: Visibility;
  public get ConflictExistSealInfoVisible(): Visibility {
    return this._ConflictExistSealInfoVisible;
  }
  public set ConflictExistSealInfoVisible(value: Visibility) {
    if (this._ConflictExistSealInfoVisible != value) {
      this._ConflictExistSealInfoVisible = value;
      // NotifyPropertyChanged("ConflictExistSealInfoVisible");
    }
  }
  public OriginalMCVersion: string;
  public get OriginalIdentifyingOID(): number {
    return this.original_IdentifyingOID;
  }
  public set OriginalIdentifyingOID(value: number) {
    if (this.original_IdentifyingOID != value) {
      this.original_IdentifyingOID = value;
    }
  }
  public get OriginalIdentifyingType(): string {
    return this.original_IdentifyingType;
  }
  public set OriginalIdentifyingType(value: string) {
    if (this.original_IdentifyingType != value) {
      this.original_IdentifyingType = value;
    }
  }
  public get IdentifyingOID(): number {
    return this.identifyingOID;
  }
  public set IdentifyingOID(value: number) {
    if (this.identifyingOID != value) {
      this.identifyingOID = value;
      if (this.OriginalIdentifyingOID <= 0)
        this.OriginalIdentifyingOID = this.identifyingOID;
      //super.NotifyPropertyChanged("IdentifyingOID");
    }
  }
  public get IdentifyingType(): string {
    return this.identifyingType;
  }
  public set IdentifyingType(value: string) {
    if (this.identifyingType != value) {
      this.identifyingType = value;
      if (String.IsNullOrEmpty(this.OriginalIdentifyingType))
        this.OriginalIdentifyingType = this.identifyingType;
      //super.NotifyPropertyChanged("IdentifyingType");
    }
  }
  private _HasParentidset: boolean = false;
  public get HasParentidset(): boolean {
    return this._HasParentidset;
  }
  public set HasParentidset(value: boolean) {
    if (this._HasParentidset != value) {
      this._HasParentidset = value;
      //super.NotifyPropertyChanged("HasParentidset");
    }
  }
  private _ParentIdentifyingOID: number = 0;
  public get ParentIdentifyingOID(): number {
    return this._ParentIdentifyingOID;
  }
  public set ParentIdentifyingOID(value: number) {
    if (this._ParentIdentifyingOID != value) {
      this._ParentIdentifyingOID = value;
      //super.NotifyPropertyChanged("ParentIdentifyingOID");
    }
  }
  private _ParentIdentifyingType: string;
  public get ParentIdentifyingType(): string {
    return this._ParentIdentifyingType;
  }
  public set ParentIdentifyingType(value: string) {
    if (this._ParentIdentifyingType != value) {
      this._ParentIdentifyingType = value;
      //super.NotifyPropertyChanged("ParentIdentifyingType");
    }
  }
  private _ParentIdentifyingName: string;
  public get ParentIdentifyingName(): string {
    return this._ParentIdentifyingName;
  }
  public set ParentIdentifyingName(value: string) {
    if (Helper.ReferenceEquals(this._ParentIdentifyingName, value) != true) {
      this._ParentIdentifyingName = value;
      //super.NotifyPropertyChanged("ParentIdentifyingName");
    }
  }
  private _IsReloadedBasicTabContent: boolean = false;
  public get IsReloadedBasicTabContent(): boolean {
    return this._IsReloadedBasicTabContent;
  }
  public set IsReloadedBasicTabContent(value: boolean) {
    if (this._IsReloadedBasicTabContent != value) {
      this._IsReloadedBasicTabContent = value;
    }
  }
  public get IsinDefiniteOmit(): boolean {
    return this._IsinDefiniteOmit;
  }
  public set IsinDefiniteOmit(value: boolean) {
    if (this._IsinDefiniteOmit != value) {
      this._IsinDefiniteOmit = value;
      //super.NotifyPropertyChanged("IsinDefiniteOmit");
    }
  }
  public get OmittedBy(): string {
    return this._OmittedBy;
  }
  public set OmittedBy(value: string) {
    if (this._OmittedBy != value) {
      this._OmittedBy = value;
      //super.NotifyPropertyChanged("OmittedBy");
    }
  }
  public get OmitComments(): string {
    return this._OmitComments;
  }
  public set OmitComments(value: string) {
    if (this._OmitComments != value) {
      this._OmitComments = value;
      //super.NotifyPropertyChanged("OmitComments");
    }
  }
  public get IsinDefiniteOmitDTTM(): DateTime {
    return this._IsinDefiniteOmitDTTM;
  }
  public set IsinDefiniteOmitDTTM(value: DateTime) {
    if (this._IsinDefiniteOmitDTTM != value) {
      this._IsinDefiniteOmitDTTM = value;
      //super.NotifyPropertyChanged("IsinDefiniteOmitDTTM");
    }
  }
  public get itemSubType(): string {
    return this.ItemSubType;
  }
  public set itemSubType(value: string) {
    if (this.ItemSubType != value) {
      this.ItemSubType = value;
      //super.NotifyPropertyChanged("itemSubType");
    }
  }
  public get IsAdministeredinAdvance(): boolean {
    return this.isAdministeredinAdvance;
  }
  public set IsAdministeredinAdvance(value: boolean) {
    if (this.isAdministeredinAdvance != value) {
      this.isAdministeredinAdvance = value;
    }
  }
  public get LastAdministeredDTTM(): DateTime {
    return this.lastAdministeredDTTM;
  }
  public set LastAdministeredDTTM(value: DateTime) {
    if (this.lastAdministeredDTTM != value) {
      this.lastAdministeredDTTM = value;
    }
  }
  private seqInfusionStatus: string;
  public get SeqInfusionStatus(): string {
    return this.seqInfusionStatus;
  }
  public set SeqInfusionStatus(value: string) {
    this.seqInfusionStatus = value;
    //super.NotifyPropertyChanged("SeqInfusionStatus");
  }
  public get RecordedadminDTTM(): DateTime {
    return this.recordadminDTTM;
  }
  public set RecordedadminDTTM(value: DateTime) {
    if (this.recordadminDTTM != value) {
      this.recordadminDTTM = value;
      //super.NotifyPropertyChanged("RecordedadminDTTM");
    }
  }
  public get mCIItemDisplay(): string {
    return this.MCIItemDisplay;
  }
  public set mCIItemDisplay(value: string) {
    if (this.MCIItemDisplay != value) {
      this.MCIItemDisplay = value;
      //super.NotifyPropertyChanged("mCIItemDisplay");
    }
  }
  public get mCChilditem(): string {
    return this.MCChilditem;
  }
  public set mCChilditem(value: string) {
    if (this.MCChilditem != value) {
      this.MCChilditem = value;
      //super.NotifyPropertyChanged("mCChilditem");
    }
  }
  public get MCIItemDrugprop(): string {
    return this.mCIItemDrugprop;
  }
  public set MCIItemDrugprop(value: string) {
    if (this.mCIItemDrugprop != value) {
      this.mCIItemDrugprop = value;
      //super.NotifyPropertyChanged("MCIItemDrugprop");
    }
  }
  public get MCILorenzoID(): string {
    return this.sMCILorenzoID;
  }
  public set MCILorenzoID(value: string) {
    if (this.sMCILorenzoID != value) {
      this.sMCILorenzoID = value;
      //super.NotifyPropertyChanged("MCILorenzoID");
    }
  }
  public get IsenableDosage(): boolean {
    return this._isenableDosage && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableDosage(value: boolean) {
    if (value != this._isenableDosage) {
      this._isenableDosage = value;
      //super.NotifyPropertyChanged("IsenableDosage");
    }
  }
  public get IsenableRoute(): boolean {
    return this._isenableRoute && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableRoute(value: boolean) {
    if (value != this._isenableRoute) {
      this._isenableRoute = value;
      //super.NotifyPropertyChanged("IsenableRoute");
    }
  }
  public get IsenableMultiRoute(): boolean {
    return this._isenableMultiRoute && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableMultiRoute(value: boolean) {
    if (value != this._isenableMultiRoute) {
      this._isenableMultiRoute = value;
      //super.NotifyPropertyChanged("IsenableMultiRoute");
    }
  }
  public get IsenableMultiRouteChkBox(): boolean {
    return (
      this._isenableMultiRoutechkBox && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsenableMultiRouteChkBox(value: boolean) {
    if (value != this._isenableMultiRoutechkBox) {
      this._isenableMultiRoutechkBox = value;
      //super.NotifyPropertyChanged("IsenableMultiRouteChkBox");
    }
  }
  public get IsAllowMultiRoute(): boolean {
    return this._isAllowMultiRoute;
  }
  public set IsAllowMultiRoute(value: boolean) {
    if (value != this._isAllowMultiRoute) {
      this._isAllowMultiRoute = value;
      //super.NotifyPropertyChanged("IsAllowMultiRoute");
    }
  }
  private _IsAuthorise: boolean = false;
  public get IsAuthorise(): boolean {
    return this._IsAuthorise;
  }
  public set IsAuthorise(value: boolean) {
    if (value != this._IsAuthorise) {
      if (
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.ClinicallyVerifyMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.OrdinalIgnoreCase
        ) &&
        PatientContext.ClerkFormViewDefaultBehavior !=
          ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
        (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
      ) {
        if (value || this.IsFluidAuthorise || this.IsMCIAuthorise) {
          this.IsClinicallyVerified = false;
          this.IsEnableChkClinivallyVerify = false;
          this.oPrescitemVM.IsClinicallyVerifyEnable = false;
        } else {
          this.IsEnableChkClinivallyVerify = true;
          this.oPrescitemVM.IsClinicallyVerifyEnable = true;
        }
      }
      this._IsAuthorise = value;
      // super.NotifyPropertyChanged("IsAuthorise");
    }
  }
  private _IsFluidAuthorise: boolean = false;
  public get IsFluidAuthorise(): boolean {
    return this._IsFluidAuthorise;
  }
  public set IsFluidAuthorise(value: boolean) {
    if (value != this._IsFluidAuthorise) {
      this._IsFluidAuthorise = value;
      // super.NotifyPropertyChanged("IsFluidAuthorise");
    }
  }
  private _IsOrgAuthorise: boolean = false;
  public get IsOrgAuthorise(): boolean {
    return this._IsOrgAuthorise;
  }
  public set IsOrgAuthorise(value: boolean) {
    if (value != this._IsOrgAuthorise) {
      this._IsOrgAuthorise = value;
      //super.NotifyPropertyChanged("IsOrgAuthorise");
    }
  }
  private _IsMCIAuthorise: boolean = false;
  public get IsMCIAuthorise(): boolean {
    return this._IsMCIAuthorise;
  }
  public set IsMCIAuthorise(value: boolean) {
    if (value != this._IsMCIAuthorise) {
      this._IsMCIAuthorise = value;
      // super.NotifyPropertyChanged("IsMCIAuthorise");
    }
  }
  private _IsMCICtrlAuthorise: boolean = false;
  public get IsMCICtrlAuthorise(): boolean {
    return this._IsMCICtrlAuthorise;
  }
  public set IsMCICtrlAuthorise(value: boolean) {
    if (value != this._IsMCICtrlAuthorise) {
      this._IsMCICtrlAuthorise = value;
      // super.NotifyPropertyChanged("IsMCICtrlAuthorise");
    }
  }
  private _IsRsnForModAuthEnabled: boolean = false;
  public get IsRsnForModAuthEnabled(): boolean {
    return this._IsRsnForModAuthEnabled;
  }
  public set IsRsnForModAuthEnabled(value: boolean) {
    if (value != this._IsRsnForModAuthEnabled) {
      this._IsRsnForModAuthEnabled = value;
      // super.NotifyPropertyChanged("IsRsnForModAuthEnabled");
    }
  }
  public get IsenableAdminMthd(): boolean {
    return this._IsenableAdminMthd && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableAdminMthd(value: boolean) {
    if (value != this._IsenableAdminMthd) {
      this._IsenableAdminMthd = value;
      // super.NotifyPropertyChanged("IsenableAdminMthd");
    }
  }
  private _IsenableInfusionVolume: boolean = true;
  public get IsenableInfusionVolume(): boolean {
    return (
      this._IsenableInfusionVolume && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsenableInfusionVolume(value: boolean) {
    if (value != this._IsenableInfusionVolume) {
      this._IsenableInfusionVolume = value;
      // super.NotifyPropertyChanged("IsenableInfusionVolume");
    }
  }
  private _IsenableInfusionPeriod: boolean = true;
  public get IsenableInfusionPeriod(): boolean {
    return (
      this._IsenableInfusionPeriod && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsenableInfusionPeriod(value: boolean) {
    if (value != this._IsenableInfusionPeriod) {
      this._IsenableInfusionPeriod = value;
      // super.NotifyPropertyChanged("IsenableInfusionPeriod");
    }
  }
  private _IsenableInfusionLumen: boolean = true;
  public get IsenableInfusionLumen(): boolean {
    return (
      this._IsenableInfusionLumen && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsenableInfusionLumen(value: boolean) {
    if (value != this._IsenableInfusionLumen) {
      this._IsenableInfusionLumen = value;
      // super.NotifyPropertyChanged("IsenableInfusionLumen");
    }
  }
  private _IsenableBoosterdose: boolean = true;
  public get IsenableBoosterdose(): boolean {
    return this._IsenableBoosterdose && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableBoosterdose(value: boolean) {
    if (value != this._IsenableBoosterdose) {
      this._IsenableBoosterdose = value;
      // super.NotifyPropertyChanged("IsenableBoosterdose");
    }
  }
  private _IsenableMoniteringperiod: boolean = true;
  public get IsenableMoniteringperiod(): boolean {
    return (
      this._IsenableMoniteringperiod && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsenableMoniteringperiod(value: boolean) {
    if (value != this._IsenableMoniteringperiod) {
      this._IsenableMoniteringperiod = value;
      //super.NotifyPropertyChanged("IsenableMoniteringperiod");
    }
  }
  private _IsenableFluid: boolean = true;
  public get IsenableFluid(): boolean {
    return this._IsenableFluid && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableFluid(value: boolean) {
    if (value != this._IsenableFluid) {
      this._IsenableFluid = value;
      if (
        this._IsenableFluid &&
        this.AccessContraintControls != null &&
        this.AccessContraintControls.Contains('cboFluid')
      ) {
        this._IsenableFluid = false;
      }
      //super.NotifyPropertyChanged("IsenableFluid");
    }
  }
  private _IsenableBolus: boolean = true;
  public get IsenableBolus(): boolean {
    return this._IsenableBolus && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableBolus(value: boolean) {
    if (value != this._IsenableBolus) {
      this._IsenableBolus = value;
      // super.NotifyPropertyChanged("IsenableBolus");
    }
  }
  private _IsenableLockoutPeriod: boolean = true;
  public get IsenableLockoutPeriod(): boolean {
    return (
      this._IsenableLockoutPeriod && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsenableLockoutPeriod(value: boolean) {
    if (value != this._IsenableLockoutPeriod) {
      this._IsenableLockoutPeriod = value;
      // super.NotifyPropertyChanged("IsenableLockoutPeriod");
    }
  }
  private _IsenableMaxDose: boolean = true;
  public get IsenableMaxDose(): boolean {
    return this._IsenableMaxDose && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableMaxDose(value: boolean) {
    if (value != this._IsenableMaxDose) {
      this._IsenableMaxDose = value;
      // super.NotifyPropertyChanged("IsenableMaxDose");
    }
  }
  private _IsenableTargetsaturation: boolean = true;
  public get IsenableTargetsaturation(): boolean {
    return (
      this._IsenableTargetsaturation && this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IsenableTargetsaturation(value: boolean) {
    if (value != this._IsenableTargetsaturation) {
      this._IsenableTargetsaturation = value;
      // super.NotifyPropertyChanged("IsenableTargetsaturation");
    }
  }
  public get IsenableDoseType(): boolean {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      !this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
    ) {
      if (
        PatientContext.IsINFUSIONON &&
        this.InfusionType != null &&
        !String.IsNullOrEmpty(this.InfusionType.Value) &&
        (String.Equals(
          this.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        ) ||
          String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID))
      ) {
        this._isenableDoseType = false;
      }
    }
    return this._isenableDoseType && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsenableDoseType(value: boolean) {
    if (value != this._isenableDoseType) {
      if (value && this.FollowUpStatLaunch.Equals('S')) {
        this._isenableDoseType = false;
      } else {
        this._isenableDoseType = value;
        if (
          value &&
          this.AccessContraintControls != null &&
          this.AccessContraintControls.Contains('cboDoseType')
        ) {
          this._isenableDoseType = false;
        }
      }
      // super.NotifyPropertyChanged("IsenableDoseType");
    }
  }
  public get IsEnableProblemIndication(): boolean {
    return this._isenableProblemIndication;
  }
  public set IsEnableProblemIndication(value: boolean) {
    if (value != this._isenableProblemIndication) {
      this._isenableProblemIndication = value;
      // super.NotifyPropertyChanged("IsEnableProblemIndication");
    }
  }
  public get IsEnableStationeryType(): boolean {
    if(this.DoseType != null && !String.IsNullOrEmpty(this.DoseType.Value) 
        && String.Equals(this.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE, StringComparison.OrdinalIgnoreCase)
        && this.MultiDoseDetails != null && this.MultiDoseDetails.Count > 1 
        && this.oPrescitemVM != null && this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
    {
      return this._isenableStationeryType;  
    }
    else
    {
      return (
        this._isenableStationeryType && this.IsNotInPatientSteppedVariableAmend
      );  
    }
  }
  public set IsEnableStationeryType(value: boolean) {
    if (value != this._isenableStationeryType) {
      this._isenableStationeryType = value;
      // super.NotifyPropertyChanged("IsEnableStationeryType");
    }
  }
  public get IsenableSupplyInstruction(): boolean {
    return this._isenableSupplyInstruction;
  }
  public set IsenableSupplyInstruction(value: boolean) {
    if (value != this._isenableSupplyInstruction) {
      this._isenableSupplyInstruction = value;
      // super.NotifyPropertyChanged("IsenableSupplyInstruction");
    }
  }
  public get IsVisibleSupplyInstr(): Visibility {
    return this._isvisibleSupplyInstruction;
  }
  public set IsVisibleSupplyInstr(value: Visibility) {
    if (value != this._isvisibleSupplyInstruction) {
      this._isvisibleSupplyInstruction = value;
      // super.NotifyPropertyChanged("IsVisibleSupplyInstr");
    }
  }
  public get IsEnableTreatmentCont(): boolean {
    return (
      this._isenableTreatmentCont &&
      (this.IsNotInPatientSteppedVariableAmend ||
        (this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder))
    );
  }
  public set IsEnableTreatmentCont(value: boolean) {
    if (value != this._isenableTreatmentCont) {
      this._isenableTreatmentCont = value;
      // super.NotifyPropertyChanged("IsEnableTreatmentCont");
    }
  }
  private _isPromptDeactivatedMsg: boolean = false;
  public get IsPromptDeactivatedMsg(): boolean {
    return this._isPromptDeactivatedMsg;
  }
  public set IsPromptDeactivatedMsg(value: boolean) {
    if (value != this._isPromptDeactivatedMsg) {
      this._isPromptDeactivatedMsg = value;
      // super.NotifyPropertyChanged("IsPromptDeactivatedMsg");
    }
  }
  private _isShowFormviwer: boolean = false;
  public get IsShowFormviwer(): boolean {
    return this._isShowFormviwer;
  }
  public set IsShowFormviwer(value: boolean) {
    if (value != this._isShowFormviwer) {
      this._isShowFormviwer = value;
      // super.NotifyPropertyChanged("IsShowFormviwer");
    }
  }
  private _isSun: boolean = false;
  private _isSunEnable: boolean = true;
  private _isMon: boolean = false;
  private _isMonEnable: boolean = true;
  private _isTue: boolean = false;
  private _isTueEnable: boolean = true;
  private _isWed: boolean = false;
  private _isWedEnable: boolean = true;
  private _isThu: boolean = false;
  private _isThuEnable: boolean = true;
  private _isFri: boolean = false;
  private _isFriEnable: boolean = true;
  private _isSat: boolean = false;
  private _isSatEnable: boolean = true;
  public get IsSun(): boolean {
    return this._isSun;
  }
  public set IsSun(value: boolean) {
    if (this._isSun != value) {
      if (!this.isFormViewDataLoaded) {
        this._isSun = value;
        // NotifyPropertyChanged("IsSun");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('DaysOfWeek')) {
          this.lstAmendedFlds.Add('DaysOfWeek');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._isSun = value;
        // NotifyPropertyChanged("IsSun");
      }
    }
    this.CheckAndSetDaysOfWeekState();
  }
  public get IsSunEnable(): boolean {
    return this._isSunEnable && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsSunEnable(value: boolean) {
    if (this._isSunEnable != value) {
      this._isSunEnable = value;
      // NotifyPropertyChanged("IsSunEnable");
    }
  }
  public get IsMon(): boolean {
    return this._isMon;
  }
  public set IsMon(value: boolean) {
    if (this._isMon != value) {
      if (!this.isFormViewDataLoaded) {
        this._isMon = value;
        // NotifyPropertyChanged("IsMon");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('DaysOfWeek')) {
          this.lstAmendedFlds.Add('DaysOfWeek');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._isMon = value;
        // NotifyPropertyChanged("IsMon");
      }
    }
    this.CheckAndSetDaysOfWeekState();
  }
  public get IsMonEnable(): boolean {
    return this._isMonEnable && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsMonEnable(value: boolean) {
    if (this._isMonEnable != value) {
      this._isMonEnable = value;
      // NotifyPropertyChanged("IsMonEnable");
    }
  }
  public get IsTue(): boolean {
    return this._isTue;
  }
  public set IsTue(value: boolean) {
    if (this._isTue != value) {
      if (!this.isFormViewDataLoaded) {
        this._isTue = value;
        //NotifyPropertyChanged("IsTue");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('DaysOfWeek')) {
          this.lstAmendedFlds.Add('DaysOfWeek');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._isTue = value;
        //NotifyPropertyChanged("IsTue");
      }
    }
    this.CheckAndSetDaysOfWeekState();
  }
  public get IsTueEnable(): boolean {
    return this._isTueEnable && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsTueEnable(value: boolean) {
    if (this._isTueEnable != value) {
      this._isTueEnable = value;
      //NotifyPropertyChanged("IsTueEnable");
    }
  }
  public get IsWed(): boolean {
    return this._isWed;
  }
  public set IsWed(value: boolean) {
    if (this._isWed != value) {
      if (!this.isFormViewDataLoaded) {
        this._isWed = value;
        //NotifyPropertyChanged("IsWed");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('DaysOfWeek')) {
          this.lstAmendedFlds.Add('DaysOfWeek');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._isWed = value;
        // NotifyPropertyChanged("IsWed");
      }
    }
    this.CheckAndSetDaysOfWeekState();
  }
  public get IsWedEnable(): boolean {
    return this._isWedEnable && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsWedEnable(value: boolean) {
    if (this._isWedEnable != value) {
      this._isWedEnable = value;
      // NotifyPropertyChanged("IsWedEnable");
    }
  }
  public get IsThu(): boolean {
    return this._isThu;
  }
  public set IsThu(value: boolean) {
    if (this._isThu != value) {
      if (!this.isFormViewDataLoaded) {
        this._isThu = value;
        // NotifyPropertyChanged("IsThu");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('DaysOfWeek')) {
          this.lstAmendedFlds.Add('DaysOfWeek');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._isThu = value;
        //NotifyPropertyChanged("IsThu");
      }
    }
    this.CheckAndSetDaysOfWeekState();
  }
  public get IsThuEnable(): boolean {
    return this._isThuEnable && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsThuEnable(value: boolean) {
    if (this._isThuEnable != value) {
      this._isThuEnable = value;
      // NotifyPropertyChanged("IsThuEnable");
    }
  }
  public get IsFri(): boolean {
    return this._isFri;
  }
  public set IsFri(value: boolean) {
    if (this._isFri != value) {
      if (!this.isFormViewDataLoaded) {
        this._isFri = value;
        //NotifyPropertyChanged("IsFri");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('DaysOfWeek')) {
          this.lstAmendedFlds.Add('DaysOfWeek');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._isFri = value;
        // NotifyPropertyChanged("IsFri");
      }
    }
    this.CheckAndSetDaysOfWeekState();
  }
  public get IsFriEnable(): boolean {
    return this._isFriEnable && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsFriEnable(value: boolean) {
    if (this._isFriEnable != value) {
      this._isFriEnable = value;
      // NotifyPropertyChanged("IsFriEnable");
    }
  }
  public get IsSat(): boolean {
    return this._isSat;
  }
  public set IsSat(value: boolean) {
    if (this._isSat != value) {
      if (!this.isFormViewDataLoaded) {
        this._isSat = value;
        // NotifyPropertyChanged("IsSat");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('DaysOfWeek')) {
          this.lstAmendedFlds.Add('DaysOfWeek');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._isSat = value;
        // NotifyPropertyChanged("IsSat");
      }
    }
    this.CheckAndSetDaysOfWeekState();
  }
  public get IsSatEnable(): boolean {
    return this._isSatEnable && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsSatEnable(value: boolean) {
    if (this._isSatEnable != value) {
      this._isSatEnable = value;
      // NotifyPropertyChanged("IsSatEnable");
    }
  }
  private _daysOfWeekVisibility: Visibility = Visibility.Collapsed;
  public get DaysOfWeekVisibility(): Visibility {
    return this._daysOfWeekVisibility;
  }
  public set DaysOfWeekVisibility(value: Visibility) {
    if (this._daysOfWeekVisibility != value) {
      if (
        value == Visibility.Visible &&
        !String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.IsDaysOfWeekMandatory = true;
      } else {
        this.IsDaysOfWeekMandatory = false;
      }
      this._daysOfWeekVisibility = value;
      // NotifyPropertyChanged("DaysOfWeekVisibility");
    }
  }
  private _IsDaysOfWeekMandatory: boolean = false;
  public get IsDaysOfWeekMandatory(): boolean {
    return this._IsDaysOfWeekMandatory;
  }
  public set IsDaysOfWeekMandatory(value: boolean) {
    if (this._IsDaysOfWeekMandatory != value) {
      this._IsDaysOfWeekMandatory = value;
      //NotifyPropertyChanged("IsDaysOfWeekMandatory");
    }
  }
  private _FrequencyLowEvent: number = 0;
  public get FrequencyLowEvent(): number {
    return this._FrequencyLowEvent;
  }
  public set FrequencyLowEvent(value: number) {
    this._FrequencyLowEvent = value;
  }
  private CheckAndSetDaysOfWeekState(): void {
    if (this._daysOfWeekVisibility == Visibility.Visible) {
      let nCheckedCount: number = 0;
      let nLowEvent: number = this.FrequencyLowEvent;
      if (this._isSun) nCheckedCount++;
      if (this._isMon) nCheckedCount++;
      if (this._isTue) nCheckedCount++;
      if (this._isWed) nCheckedCount++;
      if (this._isThu) nCheckedCount++;
      if (this._isFri) nCheckedCount++;
      if (this._isSat) nCheckedCount++;
      this.EnableDisableDaysOfWeek(nCheckedCount, nLowEvent);
    }
  }
  private EnableDisableDaysOfWeek(
    nCheckedCount: number,
    nLowEvent: number
  ): void {
    if (nCheckedCount >= nLowEvent) {
      if (!this._isSun) this.IsSunEnable = false;
      else this.IsSunEnable = true;
      if (!this._isMon) this.IsMonEnable = false;
      else this.IsMonEnable = true;
      if (!this._isTue) this.IsTueEnable = false;
      else this.IsTueEnable = true;
      if (!this._isWed) this.IsWedEnable = false;
      else this.IsWedEnable = true;
      if (!this._isThu) this.IsThuEnable = false;
      else this.IsThuEnable = true;
      if (!this._isFri) this.IsFriEnable = false;
      else this.IsFriEnable = true;
      if (!this._isSat) this.IsSatEnable = false;
      else this.IsSatEnable = true;
    } else {
      this.IsSunEnable =
        this.IsMonEnable =
        this.IsTueEnable =
        this.IsWedEnable =
        this.IsThuEnable =
        this.IsFriEnable =
        this.IsSatEnable =
          true;
    }
  }
  private _DaysOfWeeks: string;
  public get DaysOfWeeks(): string {
    return this._DaysOfWeeks;
  }
  public set DaysOfWeeks(value: string) {
    if (!Helper.ReferenceEquals(this._DaysOfWeeks, value)) {
      this._DaysOfWeeks = value;
      //super.NotifyPropertyChanged("DaysOfWeeks");
    }
  }
  private _DrugFreqUOMCode: string;
  public get DrugFreqUOMCode(): string {
    return this._DrugFreqUOMCode;
  }
  public set DrugFreqUOMCode(value: string) {
    if (!Helper.ReferenceEquals(this._DrugFreqUOMCode, value)) {
      this._DrugFreqUOMCode = value;
      //super.NotifyPropertyChanged("DrugFreqUOMCode");
    }
  }
  public get IdentifyingName(): string {
    return this.identifyingName;
  }
  public set IdentifyingName(value: string) {
    if (Helper.ReferenceEquals(this.identifyingName, value) != true) {
      this.identifyingName = value;
      this.IndentifyingDrugName = this.identifyingName;
      if (
        this != null &&
        this.oPrescitemVM != null &&
        (this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
      ) {
        this.IsEnabledNonCatalogItemName = false;
      }
      //super.NotifyPropertyChanged("IdentifyingName");
    }
  }
  public get IndentifyingDrugName(): string {
    return this._IndentifyingDrugName;
  }
  public set IndentifyingDrugName(value: string) {
    this._IndentifyingDrugName = value;
    //super.NotifyPropertyChanged("IndentifyingDrugName");
  }
  public get MCIchildIdentifyingName(): string {
    return this.mcichildidentifyingName;
  }
  public set MCIchildIdentifyingName(value: string) {
    if (value != this.mcichildidentifyingName) {
      this.mcichildidentifyingName = value;
      //super.NotifyPropertyChanged("MCIchildIdentifyingName");
    }
  }
  public get MCIIdentifyingName(): string {
    return this.mCIIdentifyingName;
  }
  public set MCIIdentifyingName(value: string) {
    if (Helper.ReferenceEquals(this.mCIIdentifyingName, value) != true) {
      this.mCIIdentifyingName = value;
      //super.NotifyPropertyChanged("MCIIdentifyingName");
    }
  }
  public get MCVersion(): string {
    return this.mCVersion;
  }
  public set MCVersion(value: string) {
    if (this.mCVersion != value) {
      this.mCVersion = value;
      // NotifyPropertyChanged("MCVersion");
    }
  }
  public get IsFormViewClick(): boolean {
    return this._isFormViewClick;
  }
  public set IsFormViewClick(value: boolean) {
    this._isFormViewClick = value;
  }
  public get DefaultDetails(): FormViewerDefaultsVM {
    return this._defaultDetails;
  }
  public set DefaultDetails(value: FormViewerDefaultsVM) {
    if (this._defaultDetails != value) {
      this._defaultDetails = value;
      // NotifyPropertyChanged("DefaultDetails");
    }
  }
  _RouteReloadedOnAMSelection: boolean = false;
  public get RouteReloadedOnAMSelection(): boolean {
    return this._RouteReloadedOnAMSelection;
  }
  public set RouteReloadedOnAMSelection(value: boolean) {
    if (this._RouteReloadedOnAMSelection != value) {
      this._RouteReloadedOnAMSelection = value;
      // NotifyPropertyChanged("RouteReloadedOnAMSelection");
    }
  }
  public get SNamewithoutQuantitys(): string {
    return this.sNamewithoutQuantitys;
  }
  public set SNamewithoutQuantitys(value: string) {
    if (Helper.ReferenceEquals(this.sNamewithoutQuantitys, value) != true) {
      this.sNamewithoutQuantitys = value;
      //super.NotifyPropertyChanged("SNamewithoutQuantitys");
    }
  }
  public get SNamewithoutUOM(): string {
    return this.sNamewithoutUOM;
  }
  public set SNamewithoutUOM(value: string) {
    if (Helper.ReferenceEquals(this.sNamewithoutUOM, value) != true) {
      this.sNamewithoutUOM = value;
      // super.NotifyPropertyChanged("SNamewithoutUOM");
    }
  }
  public get SIdentifyingoriginalname(): string {
    return this.sIdentifyingoriginalname;
  }
  public set SIdentifyingoriginalname(value: string) {
    if (Helper.ReferenceEquals(this.sIdentifyingoriginalname, value) != true) {
      this.sIdentifyingoriginalname = value;
      // super.NotifyPropertyChanged("SIdentifyingoriginalname");
    }
  }
  public get prescribableItemListIdnOID(): number {
    return this.PrescribableItemListIdnOID;
  }
  public set prescribableItemListIdnOID(value: number) {
    if (this.PrescribableItemListIdnOID != value) {
      this.PrescribableItemListIdnOID = value;
      // super.NotifyPropertyChanged("prescribableItemListIdnOID");
    }
  }
  public get SItemswithQuantityZero(): string {
    return this.sItemswithQuantityZero;
  }
  public set SItemswithQuantityZero(value: string) {
    if (Helper.ReferenceEquals(this.sItemswithQuantityZero, value) != true) {
      this.sItemswithQuantityZero = value;
      // super.NotifyPropertyChanged("SItemswithQuantityZero");
    }
  }
  public get Month(): CListItem {
    return this._month;
  }
  public set Month(value: CListItem) {
    this.IsenableRSNFORMOD = true;
    this.IsMandatoryRSNFORMOD = true;
    this.IsenableModificationcomments = true;
    if (this._month != value) {
      if (!this.lstAmendedFlds.Contains('Month')) {
        this.lstAmendedFlds.Add('Month');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._month = value;
      if (this.DoseType != null && !String.IsNullOrEmpty(this.DoseType.Value)) {
        let sDoseType: string = this.DoseType.Value;
        if (
          String.Compare(sDoseType, DoseTypeCode.STEPPEDVARIABLE) == 0 ||
          String.Compare(sDoseType, DoseTypeCode.STEPPED) == 0 ||
          String.Compare(sDoseType, DoseTypeCode.VARIABLE) == 0
        ) {
          let tmpDatetime: DateTime = this.GetClerkingParialDate();
          if (tmpDatetime != DateTime.MinValue) {
            this.StartDTTM = this.StartPrescriptionTime = tmpDatetime;
          }
        }
      }
      // super.NotifyPropertyChanged("Month");
    }
  }
  public get Year(): number {
    return this._year;
  }
  public set Year(value: number) {
    this.IsenableRSNFORMOD = true;
    this.IsMandatoryRSNFORMOD = true;
    this.IsenableModificationcomments = true;
    if (this._year != value) {
      if (!this.lstAmendedFlds.Contains('Year')) {
        this.lstAmendedFlds.Add('Year');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._year = value;
      if (this.DoseType != null && !String.IsNullOrEmpty(this.DoseType.Value)) {
        let sDoseType: string = this.DoseType.Value;
        if (
          String.Compare(sDoseType, DoseTypeCode.STEPPEDVARIABLE) == 0 ||
          String.Compare(sDoseType, DoseTypeCode.STEPPED) == 0 ||
          String.Compare(sDoseType, DoseTypeCode.VARIABLE) == 0
        ) {
          let tmpDatetime: DateTime = this.GetClerkingParialDate();
          if (tmpDatetime != DateTime.MinValue) {
            this.StartDTTM = this.StartPrescriptionTime = tmpDatetime;
          }
        }
      }
      // super.NotifyPropertyChanged("Year");
    }
  }
  public get Completedate(): boolean {
    return this._completedate;
  }
  public set Completedate(value: boolean) {
    this.IsenableRSNFORMOD = true;
    this.IsMandatoryRSNFORMOD = true;
    this.IsenableModificationcomments = true;
    if (value) {
      this.IsenableStartdate = true;
      this.IsenableMonthYear = false;
    } else {
      this.IsenableStartdate = false;
    }
    this.DateCommenced = 'CC_COMPLETE';
    if (this._completedate != value) {
      if (!this.lstAmendedFlds.Contains('Completedate')) {
        this.lstAmendedFlds.Add('Completedate');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._completedate = value;
      // super.NotifyPropertyChanged("Completedate");
      if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        (String.Equals(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) ||
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.STEPPED,
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.VARIABLE,
            StringComparison.OrdinalIgnoreCase
          )) &&
        this.ClerkSVRegimePartialDateUpdEvent != null
      ) {
        this.ClerkSVRegimePartialDateUpdEvent(
          CommonBB.GetServerDateTime().Date
        );
      }
    }
    if (this.Completedate == true) {
      this.Month = null;
      this.Year = Number.MinValue;
    }
  }
  public get Partialdate(): boolean {
    return this._Partialdate;
  }
  public set Partialdate(value: boolean) {
    this.IsenableRSNFORMOD = true;
    this.IsMandatoryRSNFORMOD = true;
    this.IsenableModificationcomments = true;
    if (value) {
      this.IsenableStartdate = false;
      this.IsenableMonthYear = true;
    } else {
      this.IsenableMonthYear = false;
    }
    if (this._Partialdate != value) {
      if (!this.lstAmendedFlds.Contains('Partialdate')) {
        this.lstAmendedFlds.Add('Partialdate');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._Partialdate = value;
      // super.NotifyPropertyChanged("Partialdate");
    }
    if (this.Partialdate == true) {
      this.CompleteStartDTTM = DateTime.MinValue;
      this.StartDTTM = DateTime.MinValue;
    }
  }
  public get ProblemIndication(): string {
    return this._problemIndication;
  }
  public set ProblemIndication(value: string) {
    if (
      String.IsNullOrEmpty(this._problemIndication) &&
      String.IsNullOrEmpty(value)
    )
      return;
    if (this._problemIndication != value) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstDRCAmendedFlds.Contains('ProblemIndication'))
        this.lstDRCAmendedFlds.Add('ProblemIndication');
      if (!this.lstAmendedFlds.Contains('ProblemIndication')) {
        this.lstAmendedFlds.Add('ProblemIndication');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._problemIndication = value;
      // super.NotifyPropertyChanged("ProblemIndication");
    }
  }
  public get IndicationOverrideReason(): string {
    return this._IndicationOverrideReason;
  }
  public set IndicationOverrideReason(value: string) {
    if (Helper.ReferenceEquals(this._IndicationOverrideReason, value) != true) {
      this._IndicationOverrideReason = value;
      // super.NotifyPropertyChanged("IndicationOverrideReason");
    }
  }
  public get ModificationComments(): string {
    return this._modificationComments;
  }
  public set ModificationComments(value: string) {
    if (this._modificationComments != value) {
      if (!this.isFormViewDataLoaded) {
        this._modificationComments = value;
        // super.NotifyPropertyChanged("ModificationComments");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('ModificationComments')) {
          this.lstAmendedFlds.Add('ModificationComments');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._modificationComments = value;
        // super.NotifyPropertyChanged("ModificationComments");
      }
    }
  }
  public OldDuration: string;
  public get Duration(): string {
    //Revisit Required
//    return this._duration;
return this._duration?.toString() || null;
  }
  public set Duration(value: string) {
    if (this._duration != value) {
      if (value == '- 2147483648' || value == '-2147483648' || value == null) {
        //let currentValue = value;
        value = '';
        this._duration = value;
        if(this.IsClearlstAmendedFlds){
          this.IsChangeFromDurationOrStartDTTM = true;
         }
        // super.NotifyPropertyChanged("Duration");
        if (this._duration != null && this.oPrescitemVM != null)
          this.oPrescitemVM.CheckReviewAfterManadatory();
        if (this.oPrescitemVM != null) {
          this.oPrescitemVM.TechnicallyValidateMessage();
        }
        //if(currentValue != null)
          return;
      }
      if (!this.isFormViewDataLoaded) {
        if (value != null && value.Contains('-')) value = '';
        this._duration = value;
        if(this.IsClearlstAmendedFlds){
          this.IsChangeFromDurationOrStartDTTM = true;
         }
        // super.NotifyPropertyChanged("Duration");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('Duration')) {
          this.lstAmendedFlds.Add('Duration');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        if (value != null && value.Contains('-')) value = '';
        if (
          (!String.IsNullOrEmpty(this._duration) &&
            !String.IsNullOrEmpty(value)) ||
          (!String.IsNullOrEmpty(this._duration) &&
            String.IsNullOrEmpty(value)) ||
          (String.IsNullOrEmpty(this._duration) && !String.IsNullOrEmpty(value))
        ) {
          this.ClearPrescribedQuantity();
          this.oPrescitemVM.TechnicallyValidateMessage();
        }
        this._duration = value;
        if(this.IsClearlstAmendedFlds){
          this.IsChangeFromDurationOrStartDTTM = true;
         }
        // super.NotifyPropertyChanged("Duration");
        if (
          this.itemSubType == null ||
          String.IsNullOrEmpty(this.itemSubType) ||
          (!String.IsNullOrEmpty(this.itemSubType) &&
            String.Compare(this.itemSubType, CConstants.SUBTYPE_GAS) != 0) ||
          (String.Compare(this.itemSubType, CConstants.SUBTYPE_GAS) == 0 &&
            !String.IsNullOrEmpty(PatientContext.PrescriptionType))
        ) {
          if (
            !String.IsNullOrEmpty(this._duration) &&
            Convert.ToInt64(this._duration) > 0
          )
            this.SetStopDTTM();
          else this.StopDate = DateTime.MinValue;
        }
      }
    }
    else{
      this.StopDate = DateTime.MinValue;
    }

    if (
      (this.SequenceInfo != null && this.SequenceInfo.GroupSequenceNo > 0) ||
      (this.oPrescitemVM != null &&
        this.oPrescitemVM.OsInstance != null &&
        this.oPrescitemVM.OsInstance.OsIsSequential == true)
    ) {
      CommonSequentialHelper.EnableDisbaleStartDateTimeForNonIVSeq(
        this.oPrescitemVM
      );
    }
  }
  public get BrandName(): string {
    return this._BrandName;
  }
  public set BrandName(value: string) {
    if (this._BrandName != value) {
      this._BrandName = value;
      if (
        String.Compare(
          this._BrandName,
          'Select brand',
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.IsClearEnabled = false;
        this.IsenableMultiRoute = this.IsAllowMultiRoute ? true : false;
      } else {
        this.IsClearEnabled = true;
        this.IsenableMultiRoute = this.IsAllowMultiRoute ? true : false;
      }
      if(this.DynamicControlIsLoaded)
        this.DynamicControlEndInstallLoaded.emit(true);
      // super.NotifyPropertyChanged("BrandName");
    }
  }
  public get IsClearEnabled(): boolean {
    return this._IsClearEnabled && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsClearEnabled(value: boolean) {
    if (
      String.Equals(
        this.BrandName,
        CConstants.SelectBrand,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this._IsClearEnabled = false;
    } else {
      this._IsClearEnabled = value;
    }
    // super.NotifyPropertyChanged("IsClearEnabled");
  }
  public get RouteRecorded(): CListItem {
    return this._routeRecorded;
  }
  public set RouteRecorded(value: CListItem) {
    this._routeRecorded = value;
    // super.NotifyPropertyChanged("RouteRecorded");
  }
  private _DurationInfo: CListItem;
  public get DurationInfo(): CListItem {
    return this._DurationInfo;
  }
  public set DurationInfo(value: CListItem) {
    this._DurationInfo = value;
    // super.NotifyPropertyChanged("DurationInfo");
  }
  public get bIsAmend(): boolean {
    return this._bisAmend;
  }
  public set bIsAmend(value: boolean) {
    this._bisAmend = value;
    // super.NotifyPropertyChanged("bIsAmend");
  }
  private _IsGetPresItemSVDoseType: boolean = false;
  public get IsGetPresItemSVDoseType(): boolean {
    return this._IsGetPresItemSVDoseType;
  }
  public set IsGetPresItemSVDoseType(value: boolean) {
    this._IsGetPresItemSVDoseType = value;
  }
  private _bIsForAmendLaunchNewItem: boolean = false;
  public get bIsForAmendLaunchNewItem(): boolean {
    return this._bIsForAmendLaunchNewItem;
  }
  public set bIsForAmendLaunchNewItem(value: boolean) {
    this._bIsForAmendLaunchNewItem = value;
  }
  private _DeactivatedRouteCollection: ObservableCollection<CListItem>;
  public get DeactivatedRouteCollection(): ObservableCollection<CListItem> {
    return this._DeactivatedRouteCollection;
  }
  public set DeactivatedRouteCollection(
    value: ObservableCollection<CListItem>
  ) {
    if (this._DeactivatedRouteCollection != value) {
      this._DeactivatedRouteCollection = value;
      // NotifyPropertyChanged("DeactivatedRouteCollection");
    }
  }
  private _DeactivatedFormList: CListItem;
  public get DeactivatedFormList(): CListItem {
    return this._DeactivatedFormList;
  }
  public set DeactivatedFormList(value: CListItem) {
    if (this._DeactivatedFormList != value) {
      this._DeactivatedFormList = value;
      // NotifyPropertyChanged("DeactivatedFormList");
    }
  }
  private _DeactivatedStrength: CListItem;
  public get DeactivatedStrength(): CListItem {
    return this._DeactivatedStrength;
  }
  public set DeactivatedStrength(value: CListItem) {
    if (this._DeactivatedStrength != value) {
      this._DeactivatedStrength = value;
      // NotifyPropertyChanged("DeactivatedStrength");
    }
  }
  private _DeactivatedSiteList: CListItem;
  public get DeactivatedSiteList(): CListItem {
    return this._DeactivatedSiteList;
  }
  public set DeactivatedSiteList(value: CListItem) {
    if (this._DeactivatedSiteList != value) {
      this._DeactivatedSiteList = value;
      // NotifyPropertyChanged("DeactivatedSiteList");
    }
  }
  private _DeactivatedQuantityList: CListItem;
  public get DeactivatedQuantityList(): CListItem {
    return this._DeactivatedQuantityList;
  }
  public set DeactivatedQuantityList(value: CListItem) {
    if (this._DeactivatedQuantityList != value) {
      this._DeactivatedQuantityList = value;
      // NotifyPropertyChanged("DeactivatedQuantityList");
    }
  }
  private _DeactivatedDoseUOMList: CListItem;
  public get DeactivatedDoseUOMList(): CListItem {
    return this._DeactivatedDoseUOMList;
  }
  public set DeactivatedDoseUOMList(value: CListItem) {
    if (this._DeactivatedDoseUOMList != value) {
      this._DeactivatedDoseUOMList = value;
      // NotifyPropertyChanged("DeactivatedDoseUOMList");
    }
  }
  private _MCDeactivatedDoseUOM: ObservableCollection<CListItem>;
  public get MCDeactivatedDoseUOM(): ObservableCollection<CListItem> {
    return this._MCDeactivatedDoseUOM;
  }
  public set MCDeactivatedDoseUOM(value: ObservableCollection<CListItem>) {
    if (this._MCDeactivatedDoseUOM != value) {
      this._MCDeactivatedDoseUOM = value;
      // NotifyPropertyChanged("MCDeactivatedDoseUOM");
    }
  }
  private _DeactivatedRateNumUOMList: CListItem;
  public get DeactivatedRateNumUOMList(): CListItem {
    return this._DeactivatedRateNumUOMList;
  }
  public set DeactivatedRateNumUOMList(value: CListItem) {
    if (this._DeactivatedRateNumUOMList != value) {
      this._DeactivatedRateNumUOMList = value;
      // NotifyPropertyChanged("DeactivatedRateNumUOMList");
    }
  }
  private _DeactivatedRateDinoUOMList: CListItem;
  public get DeactivatedRateDinoUOMList(): CListItem {
    return this._DeactivatedRateDinoUOMList;
  }
  public set DeactivatedRateDinoUOMList(value: CListItem) {
    if (this._DeactivatedRateDinoUOMList != value) {
      this._DeactivatedRateDinoUOMList = value;
      // NotifyPropertyChanged("DeactivatedRateDinoUOMList");
    }
  }
  private _DeactivatedBoosterUOMList: CListItem;
  public get DeactivatedBoosterUOMList(): CListItem {
    return this._DeactivatedBoosterUOMList;
  }
  public set DeactivatedBoosterUOMList(value: CListItem) {
    if (this._DeactivatedBoosterUOMList != value) {
      this._DeactivatedBoosterUOMList = value;
      // NotifyPropertyChanged("DeactivatedBoosterUOMList");
    }
  }
  private _DeactivatedBolusUOMList: CListItem;
  public get DeactivatedBolusUOMList(): CListItem {
    return this._DeactivatedBolusUOMList;
  }
  public set DeactivatedBolusUOMList(value: CListItem) {
    if (this._DeactivatedBolusUOMList != value) {
      this._DeactivatedBolusUOMList = value;
      // NotifyPropertyChanged("DeactivatedBolusUOMList");
    }
  }
  private _infusions: boolean = false;
  public get Infusions(): boolean {
    return this._infusions;
  }
  public set Infusions(value: boolean) {
    this._infusions = value;
    // super.NotifyPropertyChanged("Infusions");
  }
  private _infused: string;
  public get Infused(): string {
    return this._infused;
  }
  public set Infused(value: string) {
    this._infused = value;
    // super.NotifyPropertyChanged("Infused");
  }
  private mCIUoms: string;
  public get MCIUoms(): string {
    return this.mCIUoms;
  }
  public set MCIUoms(value: string) {
    if (this.mCIUoms != value) {
      this.mCIUoms = value;
      // NotifyPropertyChanged("MCIUoms");
    }
  }
  private mcIsformulary: string;
  public get McIsformulary(): string {
    return this.mcIsformulary;
  }
  public set McIsformulary(value: string) {
    if (this.mcIsformulary != value) {
      this.mcIsformulary = value;
      // NotifyPropertyChanged("McIsformulary");
    }
  }
  private _IsFormulary: string;
  public get IsFormulary(): string {
    return this._IsFormulary;
  }
  public set IsFormulary(value: string) {
    if (this._IsFormulary != value) {
      this._IsFormulary = value;
      // NotifyPropertyChanged("IsFormulary");
    }
  }
  public get IsVisiblenewmeds(): Visibility {
    return this._IsVisiblenewmeds;
  }
  public set IsVisiblenewmeds(value: Visibility) {
    if (value != this._IsVisiblenewmeds) {
      this._IsVisiblenewmeds = value;
      // super.NotifyPropertyChanged("IsVisiblenewmeds");
    }
  }
  public IsMultipleRouteValues: boolean = false;
  isMoreClickedinRoute: boolean = false;
  public get Route(): CListItem {
    return this._route;
  }
  public set Route(value: CListItem) {
    if (
      this._route != value ||
      (this.IsRouteRetriveNormalValues && !this.bIsAmend)
    ) {
      if (!this.isFormViewDataLoaded) {
        this._route = value;
        // super.NotifyPropertyChanged("Route");
      } else {
        if (this.IsMultiRouteUnChecked && this.IsAllowMultiRoute) {
          value = null;
          this.IsMultiRouteUnChecked = false;
        } else {
          this.IsMultiRouteUnChecked = false;
        }
        let _IsRouteChangedFromInfToNonInfORViceVersa: boolean = false;
        if (
          value != null &&
          value.DisplayText != null &&
          value.DisplayText == 'More'
        ) {
         value.DisplayText = '';
	 //50620 to retain Nasal related data in basic details on change of route 'more' is clicked
         //this._route = null;   
          this.isMoreClickedinRoute = true;   
          //this.IsenableRSNFORMOD = true;
          //this.IsMandatoryRSNFORMOD = true;
          if (
            (!String.IsNullOrEmpty(this.ItemSubType) &&
              !String.Equals(this.ItemSubType, CConstants.SUBTYPE)) ||
            String.IsNullOrEmpty(this.ItemSubType)
          ) {
            this.DosageForm = null;
          }
          this.MoreOptionCode = CConstants.RouteOptionCode;
          this.GetMoreComboOption();
        } else {
          this.isMoreClickedinRoute = false;
          this.IsenableRSNFORMOD = true;
          this.IsMandatoryRSNFORMOD = true;
          this.IsenableModificationcomments = true;
          this.ClearPrescribedQuantity();
          if (
            value != null &&
            value.Tag != null &&
            value.Tag.ToString() == '0'
          ) {
            if (
              this.DefaultDetails != null &&
              !this.RouteReloadedOnAMSelection
            ) {
              this.DefaultDetails.ParamsDefaulted = true;
            }
          }
          if (
            this.DoseType != null &&
            (String.Compare(
              this.DoseType.Value,
              DoseTypeCode.CONDITIONAL,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0) &&
            this.bIsAmend &&
            value != null &&
            value.DisplayText != null &&
            this._route != null &&
            String.Compare(
              this._route.DisplayText,
              value.DisplayText,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0
          ) {
            if (!this.lstAmendedFlds.Contains('Route')) {
              this.lstAmendedFlds.Add('Route');
              if (
                this.bIsAmend &&
                !this.IsFirstDoseClearForAmend &&
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.ForAdministration &&
                this.IsenableRSNFORMOD
              ) {
                this.DoChangesForAmend();
              }
            }
            if (!this.lstDRCAmendedFlds.Contains('Route'))
              this.lstDRCAmendedFlds.Add('Route');
          }
          if (
            value == null &&
            this.bIsAmend &&
            this.IsClearlstAmendedFlds &&
            this.DoseType != null
          ) {
            this.DoseType.Tag = 'Amend';
          }
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
            value != null &&
            value.DisplayText != null &&
            this.IsClearlstAmendList
          ) {
            if (!this.lstAmendedFlds.Contains('Route')) {
              this.lstAmendedFlds.Add('Route');
              if (
                this.bIsAmend &&
                !this.IsFirstDoseClearForAmend &&
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.ForAdministration &&
                this.IsenableRSNFORMOD
              ) {
                this.DoChangesForAmend();
              }
            }
            if (!this.lstDRCAmendedFlds.Contains('Route'))
              this.lstDRCAmendedFlds.Add('Route');
          }
          if (
            this.bIsAmend &&
            value != null &&
            value.DisplayText != null &&
            this.IsClearlstAmendedFlds
          ) {
            if (!this.lstAmendedFlds.Contains('Route')) {
              this.lstAmendedFlds.Add('Route');
              if (
                this.bIsAmend &&
                !this.IsFirstDoseClearForAmend &&
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.ForAdministration &&
                this.IsenableRSNFORMOD
              ) {
                this.DoChangesForAmend();
              }
            }
            if (!this.lstDRCAmendedFlds.Contains('Route'))
              this.lstDRCAmendedFlds.Add('Route');
          }
          if (
            this.actualClerkingValues != null &&
            ((this.actualClerkingValues.Route == null &&
              value != null &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              this.oPrescitemVM != null &&
              this.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
              (this.actualClerkingValues.Route != null &&
                !String.IsNullOrEmpty(
                  this.actualClerkingValues.Route.DisplayText
                ) &&
                value == null) ||
              (this.actualClerkingValues.Route != null &&
                value != null &&
                !String.IsNullOrEmpty(
                  this.actualClerkingValues.Route.DisplayText
                ) &&
                String.Compare(
                  this.actualClerkingValues.Route.DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0))
          ) {
            this.IsMandatoryReasonForMedClerkModify = true;
            this.SetOnadmissionValue(value);
          }
          if (
            (this._route == null && value != null) ||
            (value == null && this._route != null) ||
            (this._route != null &&
              value != null &&
              String.Compare(
                this._route.DisplayText,
                value.DisplayText,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0)
          ) {
            this._isRouteChanged = true;
            this.bIsMCIrule = true;
            this.oPrescitemVM.TechnicallyValidateMessage();
            if (
              !this.bIsForAmendLaunchNewItem &&
              ((this._route == null && value != null) ||
                (value == null && this._route != null) ||
                (this._route != null &&
                  value != null &&
                  this._route.Tag != null &&
                  value.Tag != null &&
                  !String.Equals(this._route.Tag, value.Tag)))
            ) {
              _IsRouteChangedFromInfToNonInfORViceVersa = true;
            }
          }
          let IsAmendMRLoading: boolean = false;
          let IsSingleRouteValue: boolean = false;
          if (
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.bIsAmend &&
            !this.IsAllowMultiRoute &&
            value != null &&
            !String.IsNullOrEmpty(value.Value) &&
            !value.Value.Contains(',') &&
            this.IsMultiRouteCheckedforAmend
          ) {
            IsSingleRouteValue = true;
          }
          if (
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.bIsAmend &&
            !this.IsClearlstAmendedFlds &&
            this.IsMultiRouteCheckedforAmend &&
            !IsSingleRouteValue
          ) {
            IsAmendMRLoading = true;
          }
          if (
            this.DefaultDetails != null &&
            !this.IsMultipleRouteValues &&
            !IsAmendMRLoading
          )
            this._route = this.GetComboValue(value, this.DefaultDetails.Routes);
          else this._route = value;
          IsAmendMRLoading = false;
          let InfusionFlag: boolean = false;
          if (this.IsAllowMultiRoute) {
            if (this.DefaultDetails != null) {
              InfusionFlag = Common.IsInfusionMultiRoutes(
                this.DefaultDetails.Routes
              );
            }
          } else if (
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            InfusionFlag = true;
          }
          if (this.IsMultiRouteChecked) {
            if (InfusionFlag) {
              if (
                this.oPrescitemVM.sOriginalValue == '0' &&
                String.Equals(
                  this.oPrescitemVM.sOriginalType,
                  InfusionTypeCode.INTERMITTENT,
                  StringComparison.InvariantCultureIgnoreCase
                )
              )
                this.InfusionDetails.ChckSingleActionMedChart = false;
              else this.InfusionDetails.ChckSingleActionMedChart = true;
            } else {
              this.InfusionDetails.ChckSingleActionMedChart = true;
            }
          }
          if (
            this.InfusionDetails != null &&
            this.InfusionDetails.ItemSequenceNo > 0 &&
            (this.bIsAmend ||
              this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
              this.oPrescitemVM.ActionCode == ActivityTypes.Reorder) &&
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            this.ReviewAfterVisible = Visibility.Collapsed;
          }
          if (
            this.InfusionDetails != null &&
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Equals(this.Route.Tag.ToString(), '1') &&
            this.InfusionDetails.GroupSequenceNo > 0 &&
            this.IsSequenceStartDTTMReset
          ) {
            CSequentialHelper.SetStartDTTMWhenRouteOrInfTypeChange(this);
          }
          if (
            this._route != null &&
            !String.IsNullOrEmpty(this._route.DisplayText) &&
            this.DefaultDetails != null &&
            this.DefaultDetails.Routes != null &&
            this.DefaultDetails.Routes.Where((s) =>
              String.Equals(s.Value, this._route.Value)
            ).ToList().Count == 0 &&
            !this._route.DisplayText.Contains(
              MedicationCommonConstant.MULTIROUTE_ROUTE
            ) &&
            !this._route.DisplayText.Contains(
              MedicationCommonConstant.MULTIROUTEDILIMITER
            )
          ) {
            this.DefaultDetails.Routes.Add(this._route);
          }
          if (this.MCVersion == null) this.MCVersion = AppSessionInfo.AMCV;
          if (!this.lstDRCAmendedFlds.Contains('Route'))
            this.lstDRCAmendedFlds.Add('Route');
          // super.NotifyPropertyChanged("Route");
          if (this._isRouteChanged && this.RouteFormChangedEvent != null) {
            this._isDosageFormChanged = true;
            this.RouteFormChangedEvent();
          }
          if (
            PatientContext.IsINFUSIONON &&
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            if (
              this.InfusionDetails != null &&
              !String.IsNullOrEmpty(this.InfusionDetails.FluidLorenzoID) &&
              !String.IsNullOrEmpty(this.InfusionDetails.FluidItemType) &&
              this.InfusionDetails.FluidIdentifyingOID > 0
            ) {
              this.InfusionDetails.IsFluidConflictGen = '1';
              this.oPrescitemVM.AllergenCheck = false;
              this.oPrescitemVM.GenerateConflictsForInpatient(
                this.oPrescitemVM.objItems
              );
            }
          }
          if (
            PatientContext.IsINFUSIONON &&
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            if (
              UserPermissions.CanViewFBChart &&
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration
              ) == 0
            ) {
              let bFromChart: boolean = false;
              if (
                (!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformchart) &&
                  String.Equals(QueryStringInfo.IsLaunchformchart, 'True', StringComparison.CurrentCultureIgnoreCase)) ||
                (!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformInfchart) &&
                  String.Equals(QueryStringInfo.IsLaunchformInfchart, 'True', StringComparison.CurrentCultureIgnoreCase))
              ) {
                bFromChart = true;
              }
              if (!bFromChart) this.FBLinkVisible = Visibility.Visible;
            } else {
              this.FBLinkVisible = Visibility.Collapsed;
            }
          } else {
            this.FBLinkVisible = Visibility.Collapsed;
          }
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.ParamsDefaulted
          ) {
            if (
              this.Route != null &&
              !String.IsNullOrEmpty(this.Route.Value) &&
              !this.isAdhocitem &&
              !this.isUptoprodrule
            ) {
              if (
                !this.IsLoadingDataForAmend &&
                !this.IsLoadingDataForOrderSentence &&
                !this.bIsForAmendLaunchNewItem
              ) {
                if (
                  !String.IsNullOrEmpty(this.ItemSubType) &&
                  String.Equals(this.ItemSubType, CConstants.SUBTYPE) &&
                  this.DosageForm != null &&
                  !String.IsNullOrEmpty(this.DosageForm.Value)
                )
                  this.GetFormDefaults(
                    this.IdentifyingOID,
                    this.IdentifyingType,
                    this.Route.Value,
                    this.DosageForm.Value,
                    this.MCVersion,
                    FormDefaults.ALL.ToString(),
                    'ROUTE',
                    true,
                    this.IsFormViewerDisable
                  );
                else
                  this.GetFormDefaults(
                    this.IdentifyingOID,
                    this.IdentifyingType,
                    this.Route.Value,
                    String.Empty,
                    this.MCVersion,
                    FormDefaults.ALL.ToString(),
                    'ROUTE',
                    true,
                    this.IsFormViewerDisable
                  );
                this.bIsBrandRuleExecuted = false;
                if (this.OnEPrescribeRuleExecution != null)
                  this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Started);
              }
              this.bIsForAmendLaunchNewItem = false;
            } else if (
              this.Route != null &&
              !String.IsNullOrEmpty(this.Route.Value) &&
              (this.isAdhocitem == true || this.isUptoprodrule == true)
            ) {
              if (this.bRouteLoad) return;
              if (this.bIsMCIrule == true) {
                if (this.oPrescitemVM.IsFormViewDataLoaded) {
                  if (
                    this.DosageForm != null &&
                    this.DosageForm.Value != null
                  ) {
                    this.GetAdhocMCIFormDefaults(
                      this.itemlist,
                      this.Route.Value,
                      this.DosageForm.Value,
                      this.MCVersion,
                      FormDefaults.ALL.ToString(),
                      this.MCuptoIdentifyingoid,
                      this.MCuptoIdentifyingtype
                    );
                  } else {
                    this._isRouteChanged = false;
                  }
                }
              }
            } else {
              this._isRouteChanged = false;
            }
          } else if (
            this.DefaultDetails != null &&
            (this.isAdhocitem == true || this.isUptoprodrule == true)
          ) {
            if (this.bRouteLoad) return;
            if (this.Route != null && !String.IsNullOrEmpty(this.Route.Value)) {
              if (this.bIsMCIrule == true) {
                if (this.oPrescitemVM.IsFormViewDataLoaded) {
                  if (
                    this.DosageForm != null &&
                    this.DosageForm.Value != null
                  ) {
                    this.GetAdhocMCIFormDefaults(
                      this.itemlist,
                      this.Route.Value,
                      this.DosageForm.Value,
                      this.MCVersion,
                      FormDefaults.ALL.ToString(),
                      this.MCuptoIdentifyingoid,
                      this.MCuptoIdentifyingtype
                    );
                  }
                }
              }
            }
          } else {
            this._isRouteChanged = false;
          }
          if (
            this.IdentifyingType != null &&
            String.Compare(
              this.IdentifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0 &&
            this.Route != null &&
            this.Route.Level == 1 &&
            this.IsBrandMandatory == Visibility.Collapsed &&
            this.itemSubType != 'CC_MULCMPNTITM'
          ) {
            this.InfusionDetails.isProductVisible = Visibility.Collapsed;
          }
        }
        let InfusionFlag1: boolean = false;
        if (
          this.IsAllowMultiRoute &&
          this.DefaultDetails != null &&
          this.DefaultDetails.Routes != null &&
          this.DefaultDetails.Routes.Where((x) => x.IsSelected).Count() > 0
        ) {
          InfusionFlag1 = Common.IsInfusionMultiRoutes(
            this.DefaultDetails.Routes
          );
          let SelInfMultiInfRoutes = this.DefaultDetails.Routes.Where(
            (SelInfRoutes) =>
              SelInfRoutes.IsSelected &&
              SelInfRoutes.Tag != null &&
              String.Compare(
                SelInfRoutes.Tag.ToString(),
                '1',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
          ).Select((SelInfRoutes) => SelInfRoutes);
          let SelnonInfMultiRoutes = this.DefaultDetails.Routes.Where(
            (SelInfRoutes) =>
              SelInfRoutes.IsSelected &&
              ((SelInfRoutes.Tag != null &&
                String.Compare(
                  SelInfRoutes.Tag.ToString(),
                  '0',
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0) ||
                SelInfRoutes.Tag == null)
          ).Select((SelInfRoutes) => SelInfRoutes);
          if (
            SelnonInfMultiRoutes != null &&
            SelnonInfMultiRoutes.Count() > 0 &&
            (SelInfMultiInfRoutes == null || SelInfMultiInfRoutes.Count() == 0)
          ) {
            this.RestoreDoseUOMList(false);
          } else if (
            SelInfMultiInfRoutes != null &&
            SelInfMultiInfRoutes.Count() > 0 &&
            (SelnonInfMultiRoutes == null || SelnonInfMultiRoutes.Count() == 0)
          ) {
            this.RestoreDoseUOMList(true);
          } else if (
            SelnonInfMultiRoutes != null &&
            SelnonInfMultiRoutes.Count() > 0 &&
            SelInfMultiInfRoutes != null &&
            SelInfMultiInfRoutes.Count() > 0
          ) {
            this.RestoreMultiInfDoseUOMList();
          }
        } else if (
          this.Route != null &&
          this.Route.Tag != null &&
          !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
          String.Compare(this.Route.Tag.ToString(), '1') == 0
        ) {
          InfusionFlag1 = true;
          if (_IsRouteChangedFromInfToNonInfORViceVersa) {
            this.RestoreDoseUOMList(true);
          }
          if (
            this.InfusionType != null &&
            this.InfusionType.Value != null &&
            (String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS
            ) ||
              String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID))
          ) {
            this.IsDoseVisible = Visibility.Collapsed;
          }
        } else {
          this.IsInfContiniousFormLoaded = false;
          this.IsDoseVisible = Visibility.Visible;
          this.IsVisibleStopDate = Visibility.Visible;
          this.IsVisibleDuration = Visibility.Visible;
          if (
            !(
              this.IdentifyingType.Equals(
                'ACTUALPRODUCT',
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              this.IdentifyingType.Equals(
                'ACTUALMOIETY',
                StringComparison.InvariantCultureIgnoreCase
              )
            )
          ) {
            this.IsBrandMandatory = Visibility.Collapsed;
          }
          if (this.IsAdminMethodVisible == Visibility.Collapsed) {
            this.Doselabelvalue = 'Dose';
          } else {
            this.Doselabelvalue = 'Administration method';
          }
          if (_IsRouteChangedFromInfToNonInfORViceVersa) {
            this.RestoreDoseUOMList(false);
          }
        }
        if (
          PatientContext.IsINFUSIONON &&
          this.Route != null &&
          this.Route.Tag != null &&
          !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
          (String.Equals(this.Route.Tag.ToString(), '1') ||
            !this.Route.Tag.ToString().Contains('0'))
        ) {
          if (
            this.InfusionType != null &&
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.INTERMITTENT
            ) &&
            this.DefaultDetails != null &&
            this.DefaultDetails.Duration != null &&
            this.DefaultDetails.DurationOriginal != null &&
            this.DefaultDetails.Duration.Count !=
              this.DefaultDetails.DurationOriginal.Count
          ) {
            if (!this.AsRequired) {
              this.SetDefaultDurationValues();
            }
            //if (String.Equals(this.ReviewAfterVisible, Visibility.Visible))
            if (this.ReviewAfterVisible == Visibility.Visible)
              this.SetDefaultReviewAfterUOMValues();
          } else {
            if (
              this.InfusionType != null &&
              this.InfusionType.Value != null &&
              (String.Equals(
                this.InfusionType.Value,
                InfusionTypesCode.CONTINUOUS,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
                String.Equals(
                  this.InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                String.Equals(
                  this.InfusionType.Value,
                  InfusionTypesCode.FLUID,
                  StringComparison.InvariantCultureIgnoreCase
                ) ||
                String.Equals(
                  this.InfusionType.Value,
                  InfusionTypesCode.PCA,
                  StringComparison.InvariantCultureIgnoreCase
                ))
            ) {
              this.RemoveDoseFromDuration();
            }
            if (
              this.ReviewAfterVisible == Visibility.Visible &&
              (this.InfusionType == null ||
                (this.InfusionType != null &&
                  this.InfusionType.Value != null &&
                  (String.Equals(
                    this.InfusionType.Value,
                    InfusionTypesCode.CONTINUOUS
                  ) ||
                    String.Equals(
                      this.InfusionType.Value,
                      InfusionTypesCode.SINGLEDOSEVOLUME
                    ) ||
                    String.Equals(
                      this.InfusionType.Value,
                      InfusionTypesCode.FLUID
                    ) ||
                    String.Equals(
                      this.InfusionType.Value,
                      InfusionTypesCode.PCA
                    ))))
            )
              this.RemoveDoseFromReviewAfterUOM();
          }
        } else if (
          PatientContext.IsINFUSIONON &&
          !String.IsNullOrEmpty(this.ItemSubType) &&
          String.Equals(this.ItemSubType, CConstants.SUBTYPE_GAS)
        ) {
          this.RemoveDoseFromDuration();
          if (this.ReviewAfterVisible == Visibility.Visible)
            this.RemoveDoseFromReviewAfterUOM();
        } else {
          if (!this.AsRequired) {
            this.SetDefaultDurationValues();
          }
          if (this.ReviewAfterVisible == Visibility.Visible) {
            if (
              this.InfusionType != null &&
              this.InfusionType.Value != null &&
              (String.Equals(
                this.InfusionType.Value,
                InfusionTypesCode.CONTINUOUS
              ) ||
                String.Equals(
                  this.InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME
                ) ||
                String.Equals(
                  this.InfusionType.Value,
                  InfusionTypesCode.FLUID
                ) ||
                String.Equals(this.InfusionType.Value, InfusionTypesCode.PCA))
            )
              this.RemoveDoseFromReviewAfterUOM();
            else this.SetDefaultReviewAfterUOMValues();
          }
        }
        if (_IsRouteChangedFromInfToNonInfORViceVersa) {
          this.DoseCalcEnableDisable();
        }
      }
      this.CheckStrengthMandatoryByDoseUOMType();
      if (this.DoseType != null) {
        this.CheckReviewUOM4SteppedVariable();
      }
      if (
        this.SequenceInfo != null &&
        this.Route != null &&
        this.Route.Tag != null &&
        !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
        String.Equals(this.Route.Tag.ToString(), '0') &&
        this.SequenceInfo.GroupSequenceNo > 0 &&
        this.IsSequenceStartDTTMReset &&
        this.oPrescitemVM != null
      ) {
        CommonSequentialHelper.SetStartDateDTTMOnRouteChange(this);
      }
    }
    this.IsMultipleRouteValues = false;
  }
  public get RouteSelected(): CListItem {
    return this._routeselected;
  }
  public set RouteSelected(value: CListItem) {
    if (this._routeselected != value) {
      this._routeselected = value;
      // super.NotifyPropertyChanged("RouteSelected");
    }
  }
  public RemoveDoseFromDuration(): void {
    if (
      this.DefaultDetails != null &&
      this.DefaultDetails.Duration != null &&
      this.DefaultDetails.DurationOriginal != null
    ) {
      if (
        this.DefaultDetails.Duration.Count ==
        this.DefaultDetails.DurationOriginal.Count
      ) {
        let bDurationUOMretain: boolean = true;
        let tmpDurationUOM: CListItem = new CListItem();
        if (
          this._durationUOM != null &&
          !String.IsNullOrEmpty(this._durationUOM.Value) &&
          String.Equals(this._durationUOM.Value, 'CC_DOSES')
        ) {
          this.Duration = String.Empty;
          bDurationUOMretain = false;
        } else if (this._durationUOM == null) {
          bDurationUOMretain = false;
        } else {
          tmpDurationUOM = this._durationUOM;
        }
        let DurationValues = this.DefaultDetails.Duration.Where(
          (x) => x.Value == 'CC_DOSES'
        );
        if (DurationValues != null && DurationValues.Count() > 0) {
          this.DefaultDetails.Duration.Remove(DurationValues.First());
        }
        if (
          bDurationUOMretain &&
          tmpDurationUOM != null &&
          !String.IsNullOrEmpty(tmpDurationUOM.Value)
        ) {
          this.DurationUOM = tmpDurationUOM;
        }
      }
    }
  }
  private SetPropertiesForcontinuous(): void {
    if (
      this._doseType != null &&
      String.Compare(
        this._doseType.Value,
        DoseTypeCode.CONDITIONAL,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      this.IsVisibleCondFrequency = Visibility.Collapsed;
      this.IsVisibleCondchkPRN = Visibility.Collapsed;
      this.IsVisibleCondPRNInstruction = Visibility.Collapsed;
      this.IsVisibleCondAdminTimes = Visibility.Collapsed;
      if (this.ConditionalDosingDetails != null) {
        this.ConditionalDosingDetails.DoseVisibility = Visibility.Collapsed;
        this.ConditionalDosingDetails.DoseDetails = null;
        this.ConditionalDosingDetails.SelectedObservationResult = null;
        if (
          this.ConditionalDosingDetails.ObservationsResults != null &&
          this.ConditionalDosingDetails.ObservationsResults.Count > 0
        ) {
          this.ConditionalDosingDetails.ObservationsResults.ForEach(
            (ReInsert) => {
              if (ReInsert.Selected) {
                ReInsert.Selected = false;
              }
            }
          );
        }
      }
    }
    this.Dose = String.Empty;
    this.UpperDose = String.Empty;
    this.DoseUOM = null;
    this.IsDoseVisible = Visibility.Collapsed;
    if (this.InfusionDetails != null) {
      if (!this.InfusionDetails.isDoseTypeMandatory) {
        this.InfusionDetails.isDoseTypeMandatory = true;
      }
      this.InfusionDetails.FluidVolume = String.Empty;
      this.InfusionDetails.VolumeUOM = null;
      this.InfusionDetails.FluidFreetext = String.Empty;
      this.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
      this.InfusionDetails.IsInfusionPeriodMandatory = false;
      this.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
      this.InfusionDetails.IsInfRateCalculatorButtonVisible =
        Visibility.Collapsed;
      this.InfusionDetails.InfusionPeriod = String.Empty;
      this.InfusionDetails.InfusionPeriodUom = null;
      this.InfusionDetails.Rate = String.Empty;
      this.InfusionDetails.UpperRate = String.Empty;
      this.InfusionDetails.DeliveryDevice = null;
      this.InfusionDetails.DeliveryDeviceFreetext = String.Empty;
      this.InfusionDetails.Boosterdose = String.Empty;
      this.InfusionDetails.Boosterdoseuom = null;
      this.InfusionDetails.InfRateDinominatorUom = null;
      this.InfusionDetails.InfRateNumeratorUom = null;
      this.InfusionDetails.IsenableInfusionrateCalculator = false;
      this.IsDoseMandatory = false;
      if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.InfusionDetails.IsInfusionRateReadOnly = false;
        this.InfusionDetails.IsenableInfusionRate = true;
        this.InfusionDetails.IsenableInfusionRateforLabel = true;
        this.InfusionDetails.IsenableInfusionratenumuom = true;
        this.InfusionDetails.IsenableInfusionratenumuomlbl = true;
        this.InfusionDetails.IsenableInfusionrateDenominatoruom = true;
      } else if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value)
      ) {
        this.InfusionDetails.IsenableInfusionRate = false;
        this.InfusionDetails.IsenableInfusionRateforLabel = false;
        this.InfusionDetails.IsEnableInfUpperRate = false;
        this.InfusionDetails.IsenableInfusionratenumuom = false;
        this.InfusionDetails.IsenableInfusionratenumuomlbl = false;
        this.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
      }
      if (String.Equals(this.IsInfusionFluid, '1')) {
        this.InfusionDetails.LowConcentration = String.Empty;
        this.InfusionDetails.UpperConcentration = String.Empty;
        this.InfusionDetails.LowConcentrationUOM = null;
        this.InfusionDetails.UpperConcentrationUOM = null;
        this.InfusionDetails.isFluidVisible = Visibility.Collapsed;
        this.InfusionDetails.isFluidMandatory = false;
        this.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
      } else {
        this.InfusionDetails.isFluidVisible =
          this != null &&
          this.itemSubType != null &&
          String.Equals(
            this.itemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          )
            ? Visibility.Collapsed
            : Visibility.Visible;
        this.InfusionDetails.IsConcentrationVisible = !String.IsNullOrEmpty(
          this.InfusionDetails.FluidFreetext
        )
          ? Visibility.Visible
          : Visibility.Collapsed;
        this.InfusionDetails.IsConcentrationMandatory = false;
      }
      if (this.InfusionDetails.IsinfusRateBasedOnDD) {
        this.InfusionDetails.IsConcentrationVisible = Visibility.Visible;
        this.InfusionDetails.IsConcentrationMandatory = false;
      }
      if (
        this.InfusionDetails.InfRateDenominatorUOM != null &&
        this.InfusionDetails.InfRateDenominatorUOM.Count > 0
      ) {
        let count: number = 0;
        count = this.InfusionDetails.InfRateDenominatorUOM.Where((c) =>
          c.DisplayText.Contains(Conversion.day)
        ).Count();
        if (count >= 1) {
          let toRemove = this.InfusionDetails.InfRateDenominatorUOM.Where(
            (x) => x.DisplayText == Conversion.day
          ).ToList();
          toRemove.forEach((item) => {
            this.InfusionDetails.InfRateDenominatorUOM.Remove(item);
          });
        }
      }
      if (this.InfusionDetails.IsAddSequentialPresitem == Visibility.Visible) {
        this.InfusionDetails.IsenableChksequentialPresitem = false;
        this.InfusionDetails.IsChksequentialPresitem = false;
      }
      if (this.InfusionDetails.IsManageSequenceVisible == Visibility.Visible) {
        this.ClearSequenceClists(this.InfusionDetails);
      }
    }
    this.IsenableDoseType = true;
  }
  public ClearSequenceClists(oInfusionDetails: InfusionVM): void {
    if (
      oInfusionDetails.SelectedSequenceName != null &&
      this.oPrescitemVM != null &&
      !this.oPrescitemVM.IsAddedToResolveGrid
    ) {
      oInfusionDetails.SelectedSequenceName = null;
      oInfusionDetails.SelectedPrecedingInfusionItem = null;
    }
  }
  private SetPropertiesForSingleDoseVolume(): void {
    this.IsDoseVisible = Visibility.Visible;
    if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking) {
      this.IsDoseMandatory = true;
    }
    if (
      this.DoseType != null &&
      !String.Equals(this.DoseType.Value, DoseTypeCode.NORMAL)
    ) {
      let citem: CListItem = new CListItem();
      citem.IsSelected = true;
      citem.Value = DoseTypeCode.NORMAL;
      citem.DisplayText = CConstants.sNormalDisplaytext;
      this.DoseType = citem;
    }
    this.IsenableDoseType = false;
    if (this.InfusionDetails != null) {
      this.InfusionDetails.isDoseTypeMandatory = false;
      this.InfusionDetails.LowConcentration = String.Empty;
      this.InfusionDetails.UpperConcentration = String.Empty;
      this.InfusionDetails.LowConcentrationUOM = null;
      this.InfusionDetails.UpperConcentrationUOM = null;
      this.InfusionDetails.Rate = String.Empty;
      this.InfusionDetails.UpperRate = String.Empty;
      this.InfusionDetails.InfRateDinominatorUom = null;
      this.InfusionDetails.InfRateNumeratorUom = null;
      this.InfusionDetails.InfusionPeriod = String.Empty;
      this.InfusionDetails.InfusionPeriodUom = null;
      this.InfusionDetails.DeliveryDevice = null;
      this.InfusionDetails.DeliveryDeviceFreetext = String.Empty;
      this.InfusionDetails.Boosterdose = String.Empty;
      this.InfusionDetails.Boosterdoseuom = null;
      this.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
      this.InfusionDetails.IsInfRateCalculatorButtonVisible =
        Visibility.Visible;
      this.InfusionDetails.FluidFreetext = String.Empty;
      this.InfusionDetails.FluidVolume = String.Empty;
      this.InfusionDetails.VolumeUOM = null;
      if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.InfusionDetails.IsInfusionRateReadOnly = false;
        this.InfusionDetails.IsenableInfusionRate = true;
        this.InfusionDetails.IsenableInfusionRateforLabel = true;
        this.InfusionDetails.IsenableInfusionrateCalculator = true;
        this.InfusionDetails.IsenableInfusionratenumuom = true;
        this.InfusionDetails.IsenableInfusionratenumuomlbl = true;
        this.InfusionDetails.IsenableInfusionrateDenominatoruom = true;
      } else if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value)
      ) {
        this.InfusionDetails.IsenableInfusionRate = false;
        this.InfusionDetails.IsenableInfusionRateforLabel = false;
        this.InfusionDetails.IsenableInfusionrateCalculator = false;
        this.InfusionDetails.IsEnableInfUpperRate = false;
        this.InfusionDetails.IsenableInfusionratenumuom = false;
        this.InfusionDetails.IsenableInfusionratenumuomlbl = false;
        this.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
      }
      if (String.Equals(this.IsInfusionFluid, '1')) {
        this.InfusionDetails.isFluidVisible = Visibility.Collapsed;
        this.InfusionDetails.isFluidMandatory = false;
        this.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
      } else {
        this.InfusionDetails.isFluidVisible =
          this != null &&
          this.itemSubType != null &&
          String.Equals(
            this.itemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          )
            ? Visibility.Collapsed
            : Visibility.Visible;
        this.InfusionDetails.IsVolumeVisible = !String.IsNullOrEmpty(
          this.InfusionDetails.FluidFreetext
        )
          ? Visibility.Visible
          : Visibility.Collapsed;
        this.InfusionDetails.IsVolumeMandatory = false;
      }
      this.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
      this.InfusionDetails.IsInfusionPeriodMandatory = false;
      if (
        this.InfusionDetails != null &&
        this.InfusionDetails.IsAddSequentialPresitem == Visibility.Visible
      ) {
        this.InfusionDetails.IsenableChksequentialPresitem = true;
        this.InfusionDetails.IsChksequentialPresitem = false;
      }
      if (this.InfusionDetails.IsinfusRateBasedOnDD) {
        this.InfusionDetails.IsVolumeVisible = Visibility.Visible;
        this.InfusionDetails.IsVolumeMandatory = true;
      }
      if (this.InfusionDetails.IsManageSequenceVisible == Visibility.Visible) {
        this.ClearSequenceClists(this.InfusionDetails);
      }
    }
  }
  private SetPropertiesForFluid(): void {
    if (
      this._doseType != null &&
      String.Compare(
        this._doseType.Value,
        DoseTypeCode.CONDITIONAL,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      if (this.ConditionalDosingDetails != null) {
        this.ConditionalDosingDetails.DoseVisibility = Visibility.Collapsed;
        this.ConditionalDosingDetails.DoseDetails = null;
        this.ConditionalDosingDetails.SelectedObservationResult = null;
      }
    }
    this.Dose = String.Empty;
    this.UpperDose = String.Empty;
    this.DoseUOM = null;
    this.IsDoseVisible = Visibility.Collapsed;
    this.IsenableDoseType = true;
    if (this.InfusionDetails != null) {
      this.InfusionDetails.IsVolumeVisible = Visibility.Visible;
      this.InfusionDetails.Rate = String.Empty;
      this.InfusionDetails.UpperRate = String.Empty;
      this.InfusionDetails.InfRateDinominatorUom = null;
      this.InfusionDetails.InfRateNumeratorUom = null;
      this.InfusionDetails.InfusionPeriod = String.Empty;
      this.InfusionDetails.InfusionPeriodUom = null;
      this.InfusionDetails.isDoseTypeMandatory = false;
      this.InfusionDetails.FluidFreetext = String.Empty;
      this.InfusionDetails.isFluidVisible = Visibility.Collapsed;
      this.InfusionDetails.FluidVolume = String.Empty;
      this.InfusionDetails.VolumeUOM = null;
      this.InfusionDetails.DeliveryDevice = null;
      this.InfusionDetails.DeliveryDeviceFreetext = String.Empty;
      this.InfusionDetails.Boosterdose = String.Empty;
      this.InfusionDetails.Boosterdoseuom = null;
      this.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
      this.InfusionDetails.IsInfRateCalculatorButtonVisible =
        Visibility.Collapsed;
      this.InfusionDetails.IsenableInfusionRate = false;
      this.InfusionDetails.IsEnableInfUpperRate = false;
      this.InfusionDetails.IsenableInfusionratenumuom = false;
      this.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
      this.InfusionDetails.IsenableInfusionrateCalculator = false;
      this.IsDoseMandatory = false;
      if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.InfusionDetails.IsenableInfusionRateforLabel = true;
        this.InfusionDetails.IsenableInfusionratenumuomlbl = true;
      } else if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value)
      ) {
        this.InfusionDetails.IsenableInfusionRateforLabel = false;
        this.InfusionDetails.IsenableInfusionratenumuomlbl = false;
      }
    }
    if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking) {
      this.InfusionDetails.IsVolumeMandatory = true;
      this.InfusionDetails.IsInfusionPeriodMandatory = true;
    }
    if (
      this.DoseType != null &&
      !String.Equals(this.DoseType.Value, DoseTypeCode.NORMAL)
    ) {
      let citem: CListItem = new CListItem();
      citem.IsSelected = true;
      citem.Value = DoseTypeCode.NORMAL;
      citem.DisplayText = CConstants.sNormalDisplaytext;
      this.DoseType = citem;
    }
    this.IsenableDoseType = false;
    this.InfusionDetails.LowConcentration = String.Empty;
    this.InfusionDetails.UpperConcentration = String.Empty;
    this.InfusionDetails.LowConcentrationUOM = null;
    this.InfusionDetails.UpperConcentrationUOM = null;
    this.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
    if (this.InfusionDetails != null) {
      if (
        this.InfusionDetails != null &&
        this.InfusionDetails.IsAddSequentialPresitem == Visibility.Visible
      ) {
        this.InfusionDetails.IsenableChksequentialPresitem = true;
        this.InfusionDetails.IsChksequentialPresitem = false;
      }
      if (this.InfusionDetails.IsManageSequenceVisible == Visibility.Visible) {
        this.ClearSequenceClists(this.InfusionDetails);
      }
    }
  }
  private SetPropertiesForIntermittent(): void {
    if (
      !this._asRequired &&
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking
      ) != 0
    ) {
      this.IsMandatoryFrequency = true;
    }
    if (
      String.Compare(
        this.itemSubType,
        CConstants.SUBTYPE_BLOOD,
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      this.IsenableDoseType = false;
    }
    if (
      this.FollowUpStatLaunch != '\0' &&
      this.FollowUpStatLaunch.Equals('S') &&
      this.SelectedFrequencyDetails != null &&
      String.Equals(
        this.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      )
    ) {
      this.IsenableStopDate = false;
    } else {
      if (
        this.SelectedFrequencyDetails != null &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        !String.IsNullOrEmpty(this.SelectedFrequencyDetails.UOM) &&
        String.Equals(
          this.SelectedFrequencyDetails.UOM,
          'CC_IPONCENLY',
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        this.IsenableStopDate = false;
      } else {
        this.IsenableStopDate = true;
      }
    }
    if (
      !this.bIsAmend &&
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking
      ) != 0
    )
      this.SetInfusionrate();
    if (this.DoseType != null) {
      if (
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.STEPPED,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.VARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        this.InfusionDetails.IsInfusRateMand = false;
        this.IsMandatoryFrequency = false;
        this.IsenableFrequency = false;
        this.IscontentAdminTimesVisible = Visibility.Collapsed;
      }
    }
    this.RecordAdminMsg1 = String.Empty;
    if (
      this._doseType != null &&
      (String.Compare(
        this._doseType.Value,
        DoseTypeCode.STEPPED,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.VARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0)
    ) {
      this.SteppedVariablePanelHeader =
        Resource.MedicationForm.VariableDoseRegime_Header;
      this.IscontentForModificationVisible = Visibility.Visible;
      this.lblVariabletext = 'Variable dose instructions';
      this.InfusionDetails.IsenableInfusionRate = false;
    }
    if (this.InfusionDetails.IsManageSequenceVisible == Visibility.Visible) {
      this.ClearSequenceClists(this.InfusionDetails);
    }
    this.SetAdditionalOptionMessage();
    if (
      this.DoseType != null &&
      String.Compare(
        this.DoseType.Value,
        DoseTypeCode.CONDITIONAL,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this.IsVisibleCondFrequency = Visibility.Visible;
      this.IsVisibleCondchkPRN = Visibility.Visible;
      if (
        String.Compare(
          this.identifyingType,
          'NONCATALOGUEITEM',
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 &&
        PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration
      )
        this.IsVisibleCondPRNInstruction = Visibility.Collapsed;
      else this.IsVisibleCondPRNInstruction = Visibility.Visible;
      this.InfusionDetails.IsInfMedClerkIntermitVisible = Visibility.Collapsed;
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        this.IscontentAdminTimesVisible = Visibility.Collapsed;
        this.IsVisibleCondAdminTimes = Visibility.Visible;
      } else {
        this.IsVisibleCondAdminTimes = Visibility.Collapsed;
      }
      if (PatientContext.PrescriptionType == PrescriptionTypes.Clerking) {
        this.IsMandatoryFrequency = false;
      }
    }
    if (!this.IsRestoreOldValues) {
      this.Dose = String.Empty;
      this.UpperDose = String.Empty;
      this.DoseUOM = null;
    }
    this.IsDoseVisible = Visibility.Visible;
    this.IsDoseMandatory = true;
    this.IsVisibleDuration = Visibility.Visible;
    this.IsVisibleStopDate = Visibility.Visible;
    if (this.InfusionDetails != null) {
      if (!this.InfusionDetails.isDoseTypeMandatory) {
        this.InfusionDetails.isDoseTypeMandatory = true;
      }
      this.InfusionDetails.FluidFreetext = String.Empty;
      this.InfusionDetails.FluidVolume = String.Empty;
      this.InfusionDetails.VolumeUOM = null;
      this.InfusionDetails.IsVolumeMandatory = false;
      this.InfusionDetails.Rate = String.Empty;
      this.InfusionDetails.UpperRate = String.Empty;
      this.InfusionDetails.InfusionPeriod = String.Empty;
      this.InfusionDetails.InfusionPeriodUom = null;
      this.InfusionDetails.LowConcentration = String.Empty;
      this.InfusionDetails.UpperConcentration = String.Empty;
      this.InfusionDetails.LowConcentrationUOM = null;
      this.InfusionDetails.UpperConcentrationUOM = null;
      this.InfusionDetails.IsConcentrationVisible = Visibility.Collapsed;
      this.InfusionDetails.IsInfusionPeriodMandatory = false;
      this.InfusionDetails.DeliveryDevice = null;
      this.InfusionDetails.DeliveryDeviceFreetext = String.Empty;
      this.InfusionDetails.Boosterdose = String.Empty;
      this.InfusionDetails.Boosterdoseuom = null;
      if (!this.InfusionDetails.IsenableInfusionRate) {
        this.InfusionDetails.IsenableInfusionRate = true;
      }
      if (this.InfusionDetails.IsInfusionRateReadOnly) {
        this.InfusionDetails.IsInfusionRateReadOnly = false;
      }
      if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
        this.InfusionDetails.IsInfRateCalculatorButtonVisible =
          Visibility.Visible;
        this.InfusionDetails.InfRateDinominatorUom = null;
        this.InfusionDetails.InfRateNumeratorUom = null;
        this.InfusionDetails.IsenableInfusionRate = true;
        this.InfusionDetails.IsenableInfusionRateforLabel = true;
        this.InfusionDetails.IsenableInfusionrateCalculator = true;
        this.InfusionDetails.IsEnableInfUpperRate = false;
        this.InfusionDetails.IsenableInfusionratenumuom = true;
        this.InfusionDetails.IsenableInfusionratenumuomlbl = true;
        this.InfusionDetails.IsenableInfusionrateDenominatoruom = true;
      } else if (
        this.DoseType != null &&
        !String.IsNullOrEmpty(this.DoseType.Value)
      ) {
        this.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
        this.InfusionDetails.IsInfRateCalculatorButtonVisible =
          Visibility.Visible;
        this.InfusionDetails.InfRateDinominatorUom = null;
        this.InfusionDetails.InfRateNumeratorUom = null;
        this.InfusionDetails.IsenableInfusionRate = false;
        this.InfusionDetails.IsenableInfusionRateforLabel = false;
        this.InfusionDetails.IsenableInfusionrateCalculator = false;
        this.InfusionDetails.IsEnableInfUpperRate = false;
        this.InfusionDetails.IsenableInfusionratenumuom = false;
        this.InfusionDetails.IsenableInfusionratenumuomlbl = false;
        this.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
      }
      if (String.Equals(this.IsInfusionFluid, '1')) {
        this.InfusionDetails.isFluidVisible = Visibility.Collapsed;
        this.InfusionDetails.isFluidMandatory = false;
        this.InfusionDetails.IsVolumeVisible = Visibility.Collapsed;
      } else {
        this.InfusionDetails.IsVolumeVisible = !String.IsNullOrEmpty(
          this.InfusionDetails.FluidFreetext
        )
          ? Visibility.Visible
          : Visibility.Collapsed;
        this.InfusionDetails.isFluidVisible =
          this != null &&
          this.itemSubType != null &&
          String.Equals(
            this.itemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          )
            ? Visibility.Collapsed
            : Visibility.Visible;
      }
    }
  }
  private SetPropertiesForPCA(): void {
    this.IsMandatoryFrequency = false;
    if (
      ProfileData.InfusionPresConfig != null &&
      ProfileData.InfusionPresConfig.IsInfusionRatePCA
    )
      this.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
    else this.InfusionDetails.InfInfusionRateVisi = Visibility.Collapsed;
    this.FollowUpStatMessage = String.Empty;
    this.IsenableStopDate = false;
    if (
      !this.bIsAmend &&
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking
      ) != 0
    )
      this.SetInfusionrate();
    this.IsenableBolus = true;
    this.IsenableLockoutPeriod = true;
    this.IsenableDuration = true;
    this.IsDoseVisible = Visibility.Visible;
    this.IsVisibleDuration = Visibility.Visible;
    this.IsVisibleStopDate = Visibility.Visible;
    this.Dose = String.Empty;
    this.UpperDose = String.Empty;
    this.DoseUOM = null;
    if (this.InfusionDetails != null) {
      if (this.InfusionDetails.isDoseTypeMandatory) {
        this.InfusionDetails.isDoseTypeMandatory = false;
      }
      this.InfusionDetails.InfInfusionRateVisi = Visibility.Visible;
      this.InfusionDetails.IsInfRateCalculatorButtonVisible =
        Visibility.Collapsed;
      this.InfusionDetails.IsConcentrationVisible = Visibility.Visible;
      this.InfusionDetails.IsInfusionPeriodMandatory = false;
      this.InfusionDetails.IsVolumeVisible = Visibility.Visible;
      this.InfusionDetails.Rate = String.Empty;
      this.InfusionDetails.LockOutPeriod = String.Empty;
      this.InfusionDetails.LockoutDuration = null;
      this.InfusionDetails.UpperRate = String.Empty;
      this.InfusionDetails.InfRateDinominatorUom = null;
      this.InfusionDetails.InfRateNumeratorUom = null;
      this.InfusionDetails.InfusionPeriod = String.Empty;
      this.InfusionDetails.InfusionPeriodUom = null;
      this.InfusionDetails.DeliveryDevice = null;
      this.InfusionDetails.DeliveryDeviceFreetext = String.Empty;
      this.InfusionDetails.Boosterdose = String.Empty;
      this.InfusionDetails.Boosterdoseuom = null;
      this.InfusionDetails.IsChksequentialPresitem = false;
      this.InfusionDetails.IsConcentrationMandatory = false;
      this.InfusionDetails.IsVolumeMandatory = false;
      this.InfusionDetails.LowConcentration = String.Empty;
      this.InfusionDetails.UpperConcentration = String.Empty;
      this.InfusionDetails.LowConcentrationUOM = null;
      this.InfusionDetails.UpperConcentrationUOM = null;
      this.InfusionDetails.FluidVolume = String.Empty;
      this.InfusionDetails.VolumeUOM = null;
      this.InfusionDetails.FluidFreetext = String.Empty;
      this.IsDoseMandatory = false;
      this.InfusionDetails.IsenableInfusionRate = true;
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.InfusionDetails.IsenableInfusionRateforLabel = true;
        this.InfusionDetails.IsenableInfusionratenumuom = true;
        this.InfusionDetails.IsenableInfusionrateDenominatoruom = true;
      }
      if (String.Equals(this.IsInfusionFluid, '1')) {
        this.InfusionDetails.isFluidVisible = Visibility.Collapsed;
        this.InfusionDetails.isFluidMandatory = false;
      } else {
        this.InfusionDetails.isFluidVisible =
          this != null &&
          this.itemSubType != null &&
          String.Equals(
            this.itemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          )
            ? Visibility.Collapsed
            : Visibility.Visible;
      }
      if (this.InfusionDetails.IsManageSequenceVisible == Visibility.Visible) {
        this.ClearSequenceClists(this.InfusionDetails);
      }
    }
  }
  public RemoveDoseFromReviewAfterUOM(): void {
    if (
      this.DefaultDetails != null &&
      this.DefaultDetails.ReviewAfterUOMList != null &&
      this.DefaultDetails.ReviewAfterUOMListOriginal != null
    ) {
      if (
        this.DefaultDetails.ReviewAfterUOMList.Count ==
        this.DefaultDetails.ReviewAfterUOMListOriginal.Count
      ) {
        let bReviewAfterUOMretain: boolean = true;
        if (
          this._ReviewafterUOM != null &&
          !String.IsNullOrEmpty(this._ReviewafterUOM.Value) &&
          String.Equals(this._ReviewafterUOM.Value, 'CC_DOSES')
        ) {
          bReviewAfterUOMretain = false;
          this.tmpReviewAfterUOM = null;
        } else if (this._ReviewafterUOM == null) {
          bReviewAfterUOMretain = false;
        } else {
          this.tmpReviewAfterUOM = this._ReviewafterUOM;
        }
        let ReviewAfterDoses = this.DefaultDetails.ReviewAfterUOMList.Where(
          (x) => x.Value == 'CC_DOSES'
        );
        if (ReviewAfterDoses != null && ReviewAfterDoses.Count() > 0) {
          this.DefaultDetails.ReviewAfterUOMList.Remove(
            ReviewAfterDoses.First()
          );
          if (
            this._ReviewafterUOM != null &&
            !String.IsNullOrEmpty(this._ReviewafterUOM.Value) &&
            String.Equals(this._ReviewafterUOM.Value, 'CC_DOSES')
          ) {
            this.ReviewafterUOM = null;
          }
        }
        if (
          bReviewAfterUOMretain &&
          this.tmpReviewAfterUOM != null &&
          !String.IsNullOrEmpty(this.tmpReviewAfterUOM.Value)
        ) {
          this.ReviewafterUOM = this.tmpReviewAfterUOM;
        }
      }
    }
  }
  public RestoreMultiInfDoseUOMList(): void {
    if (PatientContext.IsINFUSIONON && this.DefaultDetails != null) {
      let oCurrentUOM: CListItem = this.DoseUOM;
      this.DefaultDetails.Uoms = new ObservableCollection<CListItem>();
      if (this.DefaultDetails.OriginalInfUOM != null) {
        this.DefaultDetails.OriginalInfUOM.forEach((objItem) => {
          if (
            this.DefaultDetails.Uoms.Where((x) =>
              String.Equals(
                x.Value,
                objItem.Value,
                StringComparison.InvariantCultureIgnoreCase
              )
            ).Count() == 0
          ) {
            this.DefaultDetails.Uoms.Add(objItem);
          }
        });
      }
      if (this.DefaultDetails.OriginalUOM != null) {
        this.DefaultDetails.OriginalUOM.forEach((objItem) => {
          let bResult: boolean = false;
          let sUOMTypeCode: string = String.Empty;
          if (
            objItem != null &&
            objItem.Tag != null &&
            this.DoseUOMTypeCode != null &&
            this.DoseUOMTypeCode.Count() > 0
          ) {
            bResult = this.DoseUOMTypeCode.TryGetValue(
              objItem.Tag.ToString(),
              (o) => {
                sUOMTypeCode = o;
              }
            );
          }
          if (
            bResult &&
            !String.Equals(
              sUOMTypeCode,
              CConstants.CompositeUOM,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            if (
              this.DefaultDetails.Uoms.Where((x) =>
                String.Equals(
                  x.Value,
                  objItem.Value,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ).Count() == 0
            ) {
              this.DefaultDetails.Uoms.Add(objItem);
            }
          }
        });
      }
      if (
        oCurrentUOM != null &&
        this.DefaultDetails.Uoms != null &&
        this.DefaultDetails.Uoms.Count > 0
      ) {
        this.DoseUOM = this.DefaultDetails.Uoms.Where((s) =>
          String.Equals(s.Value, oCurrentUOM.Value)
        )
          .ToList()
          .FirstOrDefault();
      }
      this.DefaultDetails.Uoms.Where(
        (x) => !String.Equals(x.Value, CConstants.CONST_MORE)
      ).OrderBy((x) => x.DisplayText);
    }
  }
  public RestoreDoseUOMList(IsInfusion: boolean): void {
    let oCurrentUOM: CListItem = this.DoseUOM;
    if (
      IsInfusion &&
      PatientContext.IsINFUSIONON &&
      this.DefaultDetails != null &&
      this.DefaultDetails.OriginalInfUOM != null
    ) {
      this.DefaultDetails.Uoms = new ObservableCollection<CListItem>(
        this.DefaultDetails.OriginalInfUOM
      );
      let bResult: boolean = false;
      let sUOMTypeCode: string;
      if (
        oCurrentUOM != null &&
        oCurrentUOM.Tag != null &&
        this.DoseUOMTypeCode != null &&
        this.DoseUOMTypeCode.Count() > 0
      ) {
        bResult = this.DoseUOMTypeCode.TryGetValue(
          oCurrentUOM.Tag.ToString(),
          (o) => {
            sUOMTypeCode = o;
          }
        );
        if (
          bResult &&
          !String.Equals(
            sUOMTypeCode,
            CConstants.CompositeUOM,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.DoseUOM = oCurrentUOM;
        }
      }
    } else if (
      this.DefaultDetails != null &&
      this.DefaultDetails.OriginalUOM != null
    ) {
      this.DefaultDetails.Uoms = new ObservableCollection<CListItem>(
        this.DefaultDetails.OriginalUOM
      );
      if (oCurrentUOM != null) {
        this.DoseUOM = oCurrentUOM;
      }
    }
  }
  public SetDefaultDurationValues(): void {
    let bMedicalGas: boolean = false;
    let bSteppedDose: boolean = false;
    if (
      this.itemSubType != null &&
      String.Equals(this.itemSubType, CConstants.SUBTYPE_GAS)
    )
      bMedicalGas = true;
    if (
      this.DoseType != null &&
      !String.IsNullOrEmpty(this.DoseType.Value) &&
      (String.Equals(this.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE) ||
        String.Equals(this.DoseType.Value, DoseTypeCode.STEPPED) ||
        String.Equals(this.DoseType.Value, DoseTypeCode.VARIABLE))
    ) {
      bSteppedDose = true;
    }
    if (
      this.DefaultDetails != null &&
      this.DefaultDetails.Duration != null &&
      this.DefaultDetails.DurationOriginal != null &&
      !bMedicalGas &&
      !bSteppedDose
    ) {
      if (
        this.DefaultDetails.Duration.Count !=
        this.DefaultDetails.DurationOriginal.Count
      ) {
        this.DefaultDetails.Duration = new ObservableCollection<CListItem>(
          this.DefaultDetails.DurationOriginal
        );
      }
    }
  }
  public SetDefaultReviewAfterUOMValues(): void {
    let bMedicalGas: boolean = false;
    if (
      this.itemSubType != null &&
      String.Equals(this.itemSubType, CConstants.SUBTYPE_GAS)
    )
      bMedicalGas = true;
    if (
      this.DefaultDetails != null &&
      this.DefaultDetails.ReviewAfterUOMList != null &&
      this.DefaultDetails.ReviewAfterUOMListOriginal != null &&
      !bMedicalGas
    ) {
      if (
        this.DefaultDetails.ReviewAfterUOMList.Count !=
        this.DefaultDetails.ReviewAfterUOMListOriginal.Count
      ) {
        if (
          this.DefaultDetails != null &&
          this.DefaultDetails.ReviewAfterUOMList != null &&
          this.DefaultDetails.ReviewAfterUOMListOriginal != null
        ) {
          let ReviewAfterOriginalValues =
            this.DefaultDetails.ReviewAfterUOMListOriginal.Where(
              (x) => x.Value == 'CC_DOSES'
            );
          if (
            ReviewAfterOriginalValues != null &&
            ReviewAfterOriginalValues.Count() > 0
          ) {
            this.DefaultDetails.ReviewAfterUOMList.Add(
              ReviewAfterOriginalValues.First()
            );
          }
        }
      }
    }
  }
  public _WitnessByList: List<CListItem>;
  public get WitnessByList(): List<CListItem> {
    return this._WitnessByList;
  }
  public set WitnessByList(value: List<CListItem>) {
    if (!Helper.ReferenceEquals(this._WitnessByList, value)) {
      this._WitnessByList = value;
      // NotifyPropertyChanged("WitnessByList");
    }
  }
  private _WitnessMandatory: boolean = false;
  public get WitnessMandatory(): boolean {
    return this._WitnessMandatory;
  }
  public set WitnessMandatory(value: boolean) {
    if (this._WitnessMandatory != value) {
      this._WitnessMandatory = value;
      // super.NotifyPropertyChanged("WitnessMandatory");
    }
  }
  private _ClinicalIncidentForm: string;
  public get ClinicalIncidentForm(): string {
    return this._ClinicalIncidentForm;
  }
  public set ClinicalIncidentForm(value: string) {
    if (this._ClinicalIncidentForm != value) {
      this._ClinicalIncidentForm = value;
      // super.NotifyPropertyChanged("ClinicalIncidentForm");
    }
  }
  private _UserName: string;
  public get UserName(): string {
    return this._UserName;
  }
  public set UserName(value: string) {
    if (this._UserName != value) {
      this._UserName = value;
      // NotifyPropertyChanged("UserName");
    }
  }
  private _WitnessByOID: string;
  public get WitnessByOID(): string {
    return this._WitnessByOID;
  }
  public set WitnessByOID(value: string) {
    if (!Helper.ReferenceEquals(this._WitnessByOID, value)) {
      this._WitnessByOID = value;
      // NotifyPropertyChanged("WitnessByOID");
    }
  }
  private _WitnessBy: string;
  public get WitnessBy(): string {
    return this._WitnessBy;
  }
  public set WitnessBy(value: string) {
    if (!Helper.ReferenceEquals(this._WitnessBy, value)) {
      this._WitnessBy = value;
      // NotifyPropertyChanged("WitnessBy");
    }
  }
  private _IsNoWitnessAvialable: boolean = false;
  public get IsNoWitnessAvialable(): boolean {
    return this._IsNoWitnessAvialable;
  }
  public set IsNoWitnessAvialable(value: boolean) {
    if (!Helper.ReferenceEquals(this._IsNoWitnessAvialable, value)) {
      this._IsNoWitnessAvialable = value;
      // NotifyPropertyChanged("IsNoWitnessAvialable");
    }
  }
  public OnBehalfOf: CListItem;
  public OnBehalfOfReason: CListItem;
  public CommunicationMode: CListItem;
  public get AdminInstruction(): CListItem {
    return this._adminInstruction;
  }
  public set AdminInstruction(value: CListItem) {
    if (!this.isFormViewDataLoaded) {
      this._adminInstruction = value;
      // super.NotifyPropertyChanged("AdminInstruction");
    } else {
      if (value != null && value.DisplayText == 'More') {
        value.DisplayText = "";     
        this.MoreOptionCode = CConstants.AdminOptionCode;
        this.GetMoreComboOption();
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (this.DefaultDetails != null)
          this._adminInstruction = this.GetComboValue(
            value,
            this.DefaultDetails.AdminInstructions
          );
        else this._adminInstruction = value;
        // super.NotifyPropertyChanged("AdminInstruction");
        if (
          this._adminInstruction != null &&
          !String.IsNullOrEmpty(this._adminInstruction.DisplayText) &&
          this.DefaultDetails != null &&
          this.DefaultDetails.AdminInstructions != null &&
          !this.DefaultDetails.AdminInstructions.Contains(
            this._adminInstruction
          )
        ) {
          this.DefaultDetails.AdminInstructions.Add(this._adminInstruction);
        }
        if (
          this.IsClearlstAmendedFlds &&
          (this._adminInstruction == null ||
            (this._adminInstruction != null &&
              !String.Equals(this._adminInstruction.Value, 'CC_Other')))
        ) {
          this.OtherAdminiInstruction = String.Empty;
        }
        if (
          this._adminInstruction != null &&
          String.Compare(this._adminInstruction.Value, 'CC_Other') == 0
        ) {
          if (
            this.IsAdminInsVisible == Visibility.Visible &&
            this.oPrescitemVM != null &&
            (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
              this.oPrescitemVM.ActionCode == ActivityTypes.Amend) &&
            PatientContext.PrescriptionType !=
              PrescriptionTypes.ForAdministration &&
            String.IsNullOrEmpty(this.OtherAdminiInstruction)
          ) {
            this.OtherAdminiInstVisibility = Visibility.Visible;
          }
          if (
            this.IsAdminInsVisible == Visibility.Visible &&
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
            PatientContext.PrescriptionType !=
              PrescriptionTypes.ForAdministration &&
            !String.IsNullOrEmpty(this.OtherAdminiInstruction)
          ) {
            this.OtherAdminiInstVisibility = Visibility.Visible;
          }
        } else {
          if (
            PatientContext.PrescriptionType !=
            PrescriptionTypes.ForAdministration
          ) {
            this.OtherAdminiInstVisibility = Visibility.Collapsed;
          }
        }
      }
    }
  }
  SetCombovalue: boolean = false;
  public get Site(): CListItem {
    return this._site;
  }
  public set Site(value: CListItem) {
    if (!this.isFormViewDataLoaded) {
      this._site = value;
      // super.NotifyPropertyChanged("Site");
    } else {
      if (
        !(
          this._site != null &&
          this._site.Tag != null &&
          this._site.Tag.ToString().Equals('ERule')
        ) &&
        !(
          value != null &&
          value.Tag != null &&
          value.Tag.ToString().Equals('ERule')
        )
      ) {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
      }
      if (value != null && value.Value == CConstants.CONST_MORE) {
        value.DisplayText = '';
        value.Value = '';
        this._SiteFreeText = '';
        this.MoreOptionCode = CConstants.SiteOptionCode;
        this.GetMoreComboOption();
      } else {
        if (
          (this._site == null && value != null) ||
          (this._site != null && value == null) ||
          (this._site != null &&
            value != null &&
            String.Compare(
              this._site.DisplayText,
              value.DisplayText,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0)
        ) {
          if (
            !(
              this._site != null &&
              this._site.Tag != null &&
              this._site.Tag.ToString().Equals('ERule')
            ) &&
            !(
              value != null &&
              value.Tag != null &&
              value.Tag.ToString().Equals('ERule')
            )
          ) {
            if (!this.lstAmendedFlds.Contains('Site')) {
              this.lstAmendedFlds.Add('Site');
              if (
                this.bIsAmend &&
                !this.IsFirstDoseClearForAmend &&
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.ForAdministration &&
                this.IsenableRSNFORMOD
              ) {
                this.DoChangesForAmend();
              }
            }
          }
        }
        if (
          value == null &&
          this._site != null &&
          !String.IsNullOrEmpty(this._site.DisplayText) &&
          !String.IsNullOrEmpty(this.SiteFreeText) &&
          String.Equals(
            this._site.DisplayText,
            this.SiteFreeText,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          this.SiteFreeText = null;
        }
        this._site = value;
        this.SetCombovalue = true;
        if (this.DefaultDetails != null)
          this._site = this.GetComboPRNOrSiteValue(
            value,
            this.DefaultDetails.Sites,
            this.SetCombovalue
          );
        else this._site = value;
        // super.NotifyPropertyChanged("Site");
        if (
          this._site != null &&
          !String.IsNullOrEmpty(this._site.DisplayText) &&
          this.DefaultDetails != null &&
          this.DefaultDetails.Sites != null &&
          !this.DefaultDetails.Sites.Contains(this._site)
        ) {
          this.DefaultDetails.Sites.Add(this._site);
        }
      }
    }
  }
  public get SiteFreeText(): string {
    return this._SiteFreeText;
  }
  public set SiteFreeText(value: string) {
    if (value != this._SiteFreeText) {
      if (!this.isFormViewDataLoaded) {
        this._SiteFreeText = value;
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (
          (this._SiteFreeText == null && value != null) ||
          (this._SiteFreeText != null && value == null) ||
          (this._site != null &&
            value != null &&
            String.Compare(
              this._SiteFreeText,
              value,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0)
        ) {
          if (!this.lstAmendedFlds.Contains('Site')) {
            this.lstAmendedFlds.Add('Site');
            if (
              this.bIsAmend &&
              !this.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.IsenableRSNFORMOD
            ) {
              this.DoChangesForAmend();
            }
          }
        }
        this._SiteFreeText = value;
      }
      // super.NotifyPropertyChanged("SiteFreeText");
    }
  }
  public FrequencyAlert(): void {
    let oMsg: iMessageBox = new iMessageBox();
    oMsg.Title = Resource.prescribedrugs.Title;
    oMsg.Message = Resource.prescribedrugs.FrequencyAlert;
    oMsg.MessageButton = MessageBoxButton.YesNo;
    oMsg.IconType = MessageBoxType.Information;
    oMsg.MessageBoxClose = (s, e) => {
      this.oMsg_AlertBoxPromtClose(s, e);
    };
    oMsg.Show();
  }
  private _FreqAlerFlag: boolean = false;
  public get FreqAlerFlag(): boolean {
    return this._FreqAlerFlag;
  }
  public set FreqAlerFlag(value: boolean) {
    if (value != this._FreqAlerFlag) {
      this._FreqAlerFlag = value;
      // super.NotifyPropertyChanged("FreqAlerFlag");
    }
  }
  public oMsg_AlertBoxPromtClose(sender: Object, e: MessageEventArgs): void {
    if (e.MessageBoxResult == MessageBoxResult.Yes) {
      this.FreqAlerFlag = false;
      this.GetMoreComboOption();
    } else {
      this.FreqAlerFlag = true;      
    }
    //this.oPrescitemVM.FormViewerDetails.BasicDetails.Frequency = null;
    this.Frequency = null;
  }
  private _SteppedDoseAdminTimes: string;
  public get SteppedDoseAdminTimes(): string {
    return this._SteppedDoseAdminTimes;
  }
  public set SteppedDoseAdminTimes(value: string) {
    if (this._SteppedDoseAdminTimes != value) {
      this._SteppedDoseAdminTimes = value;
      // super.NotifyPropertyChanged("SteppedDoseAdminTimes");
    }
  }
  public IsFreqFilledForDOS: boolean = false;
  public get Frequency(): CListItem {
    return this._frequency;
  }
  public set Frequency(value: CListItem) {
    let oOldListItem: CListItem = this._frequency;
    let IsFormCancelled: boolean = false;
    if (this.oPrescitemVM != null && this.oPrescitemVM.IsFormCancelled) {
      IsFormCancelled = true;
    }
    if (value == null && this._frequency == null && this.FreqAlerFlag) {
      this._frequency = null;
      // super.NotifyPropertyChanged("Frequency");
    }
    if (this.IsDifferent(this._frequency, value)) {
      if (value == null && this._frequency != null && this.FreqAlerFlag) {
        value = this._frequency;
        // super.NotifyPropertyChanged("Frequency");
      }
      if (
        !IsFormCancelled &&
        this.bIsAmend &&
        this.OriginalFrequency != null &&
        (value == null || value.Value != this.OriginalFrequency.Value) &&
        this.IsChangedFrequencyValueInAmend.Equals('N')
      ) {
        this.IsChangedFrequencyValueInAmend = 'Y';
      }
      if (!this.isFormViewDataLoaded) {
        this._frequency = value;
        // super.NotifyPropertyChanged("Frequency");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        this.oPrescitemVM.TechnicallyValidateMessage();
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.FormViewerDetails != null &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails != null
        ) {
          this.oPrescitemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
            false;
        }
        if (
          value != null &&
          value.DisplayText == CConstants.More &&
          String.Compare(
            this.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.OrdinalIgnoreCase
          ) != 0 &&
          String.Compare(
            this.DoseType.Value,
            DoseTypeCode.TITRATED,
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.FormViewerDetails != null &&
            this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
          ) {
            this.StopDate = DateTime.MinValue;
            this.IsenableStopDate = true;
          }
          this.MoreOptionCode = CConstants.FrequencyOptionCode;
          if (
            MedicationCommonProfileData.PrescribeConfig.PromptFreqMoreOption &&
            this.DefaultDetails.Frequencys.Count != 1 &&
            String.Equals(
              this.GetComboValue(value, this.DefaultDetails.Frequencys, true),
              CConstants.More
            )
          ) {
            this.FrequencyAlert();            
          } else {
            if (
              value != null &&
              value.DisplayText != null &&
              value.DisplayText == 'More'
            ) {
              this._frequency = null;
              value.DisplayText = null;
              this.GetMoreComboOption();
            }
          }
          if (this.DaysOfWeekVisibility == Visibility.Visible)
            this.DaysOfWeekVisibility = Visibility.Collapsed;
        } else if (
          value != null &&
          value.DisplayText == CConstants.More &&
          this.DoseType != null &&
          (String.Compare(
            this.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            String.Compare(
              this.DoseType.Value,
              DoseTypeCode.TITRATED,
              StringComparison.OrdinalIgnoreCase
            ) == 0)
        ) {
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.FormViewerDetails != null &&
            this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
          ) {
            this.StopDate = DateTime.MinValue;
            this.IsenableStopDate = true;
          }
          this.MoreOptionCode = CConstants.FrequencyOptionCode;          
          if (
            value != null &&
            value.DisplayText != null &&
            value.DisplayText == 'More'
          ) {
            value.DisplayText = null;
            this._frequency = null;
            this.GetMoreComboOption();
          }
          if (this.DaysOfWeekVisibility == Visibility.Visible)
            this.DaysOfWeekVisibility = Visibility.Collapsed;
        } else {
          if (
            value == null &&
            this._frequency != null &&
            this._frequency.Tag != null &&
            this._frequency.Tag instanceof Array
          ) {
            if (
              (ObjectHelper.CreateType<string[]>(
                this._frequency.Tag,
                Array<string>
              ) != null &&
                ObjectHelper.CreateType<string[]>(
                  this._frequency.Tag,
                  Array<string>
                ).length > 1 &&
                String.Equals(
                  ObjectHelper.CreateType<string[]>(
                    this._frequency.Tag,
                    Array<string>
                  )[1],
                  CConstants.OnceOnlyFrequency,
                  StringComparison.CurrentCultureIgnoreCase
                )) ||
              (this.SelectedFrequencyDetails != null &&
                String.Equals(
                  this.SelectedFrequencyDetails.UOM,
                  CConstants.OnceOnlyFrequency,
                  StringComparison.CurrentCultureIgnoreCase
                ))
            ) {
              this.FrequencyUOM = String.Empty;
              this.IsenableDuration = true;
              this.SelectedFrequencyDetails = null;
              this.IsenableStopDate = true;
              this.StopDate = DateTime.MinValue;
              this.StopPrescriptionTime = DateTime.MinValue;
            }
            if (
              value == null &&
              !String.IsNullOrEmpty(this.DrugFreqUOMCode) &&
              String.Equals(
                this.DrugFreqUOMCode,
                'CC_MEDDRSN2',
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              this.DaysOfWeekVisibility = Visibility.Collapsed;
            }
          }
          let bChange: boolean = false;
          if (
            (this._frequency == null && value != null) ||
            (this._frequency != null && value == null) ||
            (this._frequency != null &&
              value != null &&
              String.Compare(
                this._frequency.DisplayText,
                value.DisplayText,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0)
          ) {
            this.GivenFixedTime = null;
            bChange = true;
          }
          if (
            this.actualClerkingValues != null &&
            ((this.actualClerkingValues.Frequency == null &&
              value != null &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              this.oPrescitemVM != null &&
              this.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
              (this.actualClerkingValues.Frequency != null &&
                !String.IsNullOrEmpty(
                  this.actualClerkingValues.Frequency.DisplayText
                ) &&
                value == null) ||
              (this.actualClerkingValues.Frequency != null &&
                value != null &&
                !String.IsNullOrEmpty(
                  this.actualClerkingValues.Frequency.DisplayText
                ) &&
                String.Compare(
                  this.actualClerkingValues.Frequency.DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0))
          ) {
            if (!this.AsRequired) {
              this.IsMandatoryReasonForMedClerkModify = true;
              this.SetOnadmissionValue(value);
            }
          }
          if (!this.lstAmendedFlds.Contains('Frequency')) {
            this.lstAmendedFlds.Add('Frequency');
            if (
              this.bIsAmend &&
              !this.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.IsenableRSNFORMOD
            ) {
              this.DoChangesForAmend();
            }
          }
          if (!this.lstDRCAmendedFlds.Contains('Frequency'))
            this.lstDRCAmendedFlds.Add('Frequency');
          this.ClearPrescribedQuantity();
          if (this.DefaultDetails != null) {
            this._frequency = this.GetComboValue(
              value,
              this.DefaultDetails.Frequencys,
              true
            );
            this.GetComboValue(
              value,
              this.DefaultDetails.MasterFrequencys,
              true
            );
            this.SetFrequencyForTitrated(value);
          } else this._frequency = value;
          // super.NotifyPropertyChanged("Frequency");
          if (bChange && !this.FreqDefItemSource && !IsFormCancelled) {
            this.CheckAndSetPRNInstFrequencyMandatory();
          }
          if (bChange && !this.FreqDefItemSource && !IsFormCancelled)
            this.SetAsRequiredState();
          if (
            value == null &&
            this.oPrescitemVM.FormViewerDetails.BHasFormViewParams &&
            oOldListItem != null &&
            oOldListItem.Tag != null &&
            ObjectHelper.GetType(oOldListItem.Tag).Equals(typeof Array<string>) &&
            (<string[]>oOldListItem.Tag).length > 1 &&
            (<string[]>oOldListItem.Tag)[1] == CConstants.OnceOnlyFrequency
          ) {
            this.StopDate = DateTime.MinValue;
            this.StopPrescriptionTime = DateTime.MinValue;
          }
        }
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.FormViewerDetails != null &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails != null
        ) {
          this.oPrescitemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
            true;
        }
        if (
          value == null &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.ReviewAfterVisible == Visibility.Visible &&
          this.oPrescitemVM != null
        ) {
          this.oPrescitemVM.GetReviewAfterDatetime();
        }
        if (
          this.StartDTTM != DateTime.MinValue &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.DurationUOM != null &&
          !String.IsNullOrEmpty(this.DurationUOM.Value) &&
          this.DurationUOM.Value.Equals('CC_DOSES')
        ) {
          let dtStopDTTM: DateTime = DateTime.MinValue;
          let dtStartDTTM: DateTime = this.StartDTTM.DateTime.AddTime(
            this.StartPrescriptionTime
          );
          dtStopDTTM =
            this.oPrescitemVM.GetEnddatetimeforDoseDuration(dtStartDTTM);
          dtStopDTTM =
            dtStopDTTM == DateTime.MinValue
              ? dtStopDTTM
              : dtStopDTTM.AddMinutes(1);
          this.StopDate = dtStopDTTM;
          this.StopPrescriptionTime = dtStopDTTM;
        }
        if (
          this.IsClearlstAmendedFlds &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.DoseCalculationDetails != null &&
          this.oPrescitemVM.DoseCalculationDetails.FrequencyOID > 0 &&
          this.oPrescitemVM.IsDoseCalcPerformed &&
          this.oPrescitemVM.bFormViwerOpened
        ) {
          this.DCAmendMessage();
        }
      }
      if (this.AsRequired && this.AdminTimes != null) {
        this.AdminTimes.AsRequired = this.AsRequired;
      }
      this.FreqDefItemSource = false;
      if (this.isRecordAdminMsg1Visible == Visibility.Collapsed) {
        let _Stat: string = 'FRC-003';
        if (!String.IsNullOrEmpty(Common.Frc003Childs))
          _Stat = Common.Frc003Childs;
        if (
          this.Frequency != null &&
          this.Frequency.Tag != null &&
          ObjectHelper.GetType(this.Frequency.Tag).Equals(typeof Array<string>) &&
          ((<string[]>this.Frequency.Tag).length <= 2 ||
            ((<string[]>this.Frequency.Tag).length > 2 &&
              !_Stat.Contains((<string[]>this.Frequency.Tag)[2])))
        ) {
          this.IsFollowUpStatEnabled = this.IsRecordAdminTabEnabled
            ? false
            : true;
        }
      }
    }
  }
  private IsDifferent(obj1: CListItem, obj2: CListItem): boolean {
    if (obj1 == null && obj2 == null) return obj1 != obj2;
    if (obj1 == null || obj2 == null) return obj1 != obj2;
    if (obj1.Tag == null && obj2.Tag == null) return obj1 != obj2;
    if (obj1.Tag == null || obj2.Tag == null) return obj1 != obj2;
    let s1: string[] = ObjectHelper.CreateType<string[]>(
      obj1.Tag,
      Array<string>
    );
    let s2: string[] = ObjectHelper.CreateType<string[]>(
      obj2.Tag,
      Array<string>
    );
    if (
      s1 == null ||
      s1.length < 6 ||
      s2 == null ||
      s2.length < 6 ||
      this.IsFreqFilledForDOS
    ) {
      if (this.IsFreqFilledForDOS) {
        this.IsFreqFilledForDOS = false;
      }
      return obj1 != obj2;
    }
    else if(obj1.Value || obj2.Value){
      return obj1.Value != obj2.Value;
    } 
    else return s1[5] != s2[5];
  }
  private _FreqDefItemSource: boolean = false;
  public get FreqDefItemSource(): boolean {
    return this._FreqDefItemSource;
  }
  public set FreqDefItemSource(value: boolean) {
    this._FreqDefItemSource = value;
    // super.NotifyPropertyChanged("FreqDefItemSource");
  }
  private _IsRecalculateEndDTTMInReordeSV: boolean = false;
  public get IsRecalculateEndDTTMInReordeSV(): boolean {
    return this._IsRecalculateEndDTTMInReordeSV;
  }
  public set IsRecalculateEndDTTMInReordeSV(value: boolean) {
    this._IsRecalculateEndDTTMInReordeSV = value;
  }
  private _IsDifferentDoseUOMFrmSourceForSV: boolean = false;
  public get IsDifferentDoseUOMFrmSourceForSV(): boolean {
    return this._IsDifferentDoseUOMFrmSourceForSV;
  }
  public set IsDifferentDoseUOMFrmSourceForSV(value: boolean) {
    this._IsDifferentDoseUOMFrmSourceForSV = value;
  }
  public SetAsRequiredState(): void {
    let lnFreqOID: number = 0;
    if (
      this._frequency != null && !String.IsNullOrEmpty(this._frequency.Value) &&
      Number.TryParse(this._frequency.Value, (o) => (lnFreqOID = o))
    ) {
      if (this.oPrescitemVM != null) {
        if (this.oPrescitemVM.IsPrescriptionItemVMLoading) {
          if (!this.oPrescitemVM.IsFrequencyLoadingForGetpresItemDetails) {
            this.oPrescitemVM.IsFrequencyLoadingForGetpresItemDetails = true;
            this.GetFrequencyDetails(lnFreqOID);
          }
        } else {
          this.GetFrequencyDetails(lnFreqOID);
        }
      } else {
        this.GetFrequencyDetails(lnFreqOID);
      }
    } else {
      this.SetIsPRNState(false);
      if (this.AdminTimes != null) {
        this.AdminTimes.FreqDetails = null;
        this.AdminTimes.Clear();
      }
      this.SetAdditionalOptionMessage();
    }
  }
  private _ValMinStartTimePopup: boolean = false;
  public get ValMinStartTimePopup(): boolean {
    return this._ValMinStartTimePopup;
  }
  public set ValMinStartTimePopup(value: boolean) {
    this._ValMinStartTimePopup = value;
    // super.NotifyPropertyChanged("ValMinStartTimePopup");
  }
  public GetFrequencyDetails(lnFreqOID: number): void {
    if (!this.IsDrugRoundTimesAvailForAmendGetFrequency) {
      if (this.AdminTimes != null) {
        this._TempAdminScheduleTimes = null;
        this.AdminTimes.AdminType = 'F';
        this.AdminTimes.IsDrugroundEnable = false;
        this.AdminTimes.IsFixedTime = true;
        this.AdminTimes.AdminSchedule_Time = null;
        this.AdminTimes.FreqDetails = null;
        //this.AdminTimes.AdministrationScheduleTimes = null;
      }
      this.DaysOfWeekVisibility = Visibility.Collapsed;
    }
    let oReq: IPPMAManagePrescSer.CReqMsgGetAdministrationTimes =
      ObjectHelper.CreateObject(
        new IPPMAManagePrescSer.CReqMsgGetAdministrationTimes(),
        {
          oContextInformation: Common.FillContext(),
          lnFrequencyOIDBC: lnFreqOID,
          sMCVersionBC: AppSessionInfo.AMCV,
          lnEncounterOIDBC: PatientContext.EncounterOid,
        }
      );
    if (this.ForAmendGetFrequencyByPresItemOID && this.oPrescitemVM != null) {
      oReq.PrescriptionItemOIDBC = this.oPrescitemVM.PrescriptionItemOID;
    }
    if (oReq.oContextInformation != null) {
      oReq.oContextInformation.PageInfo = Convert.ToString(lnFreqOID);
    }
    let FreqOnChange: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    // FreqOnChange.GetAdministrationTimesCompleted -= this.FreqOnChange_GetAdministrationTimesCompleted;
    FreqOnChange.GetAdministrationTimesCompleted = (s, e) => {
      this.FreqOnChange_GetAdministrationTimesCompleted(s, e);
    };
    FreqOnChange.GetAdministrationTimesAsync(oReq);
  }
  private SetIsPRNState(IsPRNFrequencySelected: boolean): void {
    let IsValidDoseTypeSelected: boolean = false;
    if (this._doseType != null) {
      IsValidDoseTypeSelected =
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.DOSAGERANGE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.CONDITIONAL,
          StringComparison.OrdinalIgnoreCase
        ) == 0;
    }
    if (!IsValidDoseTypeSelected) {
      this.AsRequired = false;
    } else if (IsPRNFrequencySelected) {
      this.AsRequired = true;
    } else {
      if (
        (!this.IsenableAsrequired && this.AccessContraintControls == null) ||
        (!this.IsenableAsrequired &&
          this.AccessContraintControls != null &&
          !this.AccessContraintControls.Contains('chkPRN'))
      ) {
        this.AsRequired = false;
      }
    }
    this.IsenableAsrequired =
      !IsPRNFrequencySelected && IsValidDoseTypeSelected;
    if (this.FollowUpStatLaunch == 'S') {
      this.IsenableAsrequired = false;
    }
  }
  private _selectedFrequencyDetails: IPPMAManagePrescSer.IPPFrequency;
  public get SelectedFrequencyDetails(): IPPMAManagePrescSer.IPPFrequency {
    return this._selectedFrequencyDetails;
  }
  public set SelectedFrequencyDetails(value: IPPMAManagePrescSer.IPPFrequency) {
    if (this._selectedFrequencyDetails != value) {
      this._selectedFrequencyDetails = value;
      this.SetStartTime(ControType.Frequency);
      this.SetControlsStateWithFrequencyDetails();
    }
  }
  private _PrescribedByWithRoleName: string;
  public get PrescribedByWithRoleName(): string {
    return this._PrescribedByWithRoleName;
  }
  public set PrescribedByWithRoleName(value: string) {
    if (this._PrescribedByWithRoleName != value) {
      this._PrescribedByWithRoleName = value;
      // super.NotifyPropertyChanged("PrescribedByWithRoleName");
    }
  }
  private _IsAdminTypeFlag: string;
  public get IsAdminTypeFlag(): string {
    return this._IsAdminTypeFlag;
  }
  public set IsAdminTypeFlag(value: string) {
    if (this._IsAdminTypeFlag != value) {
      this._IsAdminTypeFlag = value;
    }
  }
  public SetControlsStateWithFrequencyDetails(): void {
    if (this._selectedFrequencyDetails == null) return;
    let bIsPRNFreq: boolean =
      (this._frequency != null &&
        this._frequency.Tag instanceof Array &&
        String.Compare((<string[]>this._frequency.Tag)[0], '1') == 0) ||
      this._selectedFrequencyDetails.HighEvent > 1 ||
      this._selectedFrequencyDetails.HighPeriod > 1;
    if (this.AdminTimes != null) this.AdminTimes.bIsPRNFreq = bIsPRNFreq;
    this.SetIsPRNState(bIsPRNFreq);
    if (
      String.Compare(
        this._selectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      if (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe) {
        this.Duration = String.Empty;
        this.DurationUOM = null;
        this.StopDate = DateTime.MinValue;
        if (
          String.Compare(
            this._selectedFrequencyDetails.Type,
            'CC_INTERVAL',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          if (
            this.oPrescitemVM.FormViewerDetails != null &&
            this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
            this.oPrescitemVM.FormViewerDetails.BasicDetails.Ordersets == null
          ) {
            if (this.StartDTTM.Year > CConstants.DateTimeMinYear)
              this.StartPrescriptionTime = CommonBB.GetServerDateTime();
          }
          if (this.StartPrescriptionTime.Year > CConstants.DateTimeMinYear) {
            this.StopPrescriptionTime = null;
          }
        } else {
          this.StopPrescriptionTime = null;
        }
        this.IsenableDuration = false;
        this.IsenableStopDate = false;
        this.IsenableAsrequired = false;
        this.AsRequired = false;
      } else if (
        this.IsClearlstAmendList &&
        (this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
      ) {
        this.Duration = String.Empty;
        this.DurationUOM = null;
        this.IsenableDuration = false;
        this.IsenableStopDate = false;
        this.IsenableAsrequired = false;
        this.AsRequired = false;
        this.SetStopDTTM();
      } else if (
        this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder
      ) {
        if (DateTime.Equals(this.StopPrescriptionTime, DateTime.MinValue)) {
          this.StopPrescriptionTime = null;
        }
      }
    } else {
      if (
        DateTime.Equals(this.StartDTTM.Date, this.StopDate.Date) &&
        ObjectHelper.HasValue(this.StopPrescriptionTime) &&
        String.Compare(
          this.StartPrescriptionTime.ToString('HH:mm'),
          this.StopPrescriptionTime.Value.ToString('HH:mm')
        ) == 0
      ) {
        this.StopDate = DateTime.MinValue;
        this.StopPrescriptionTime = DateTime.MinValue;
      }
      this.setStopDateDurationEnabledorDisabled();
    }
    this.DaysOfWeekVisibility = Visibility.Collapsed;
    if (
      PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration &&
      this.Frequency != null &&
      String.Compare(
        this._selectedFrequencyDetails.UOM,
        'CC_MEDDRSN2',
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.DaysOfWeekVisibility = Visibility.Visible;
    }
    if (this.AdminTimes == null) return;
    this.AdminTimes.SetSlotTimeModeState(/*FreqType:*/ String.Empty);
    this.AdminTimes.DaysOfWeekVisibility = Visibility.Collapsed;
    if (
      String.Compare(
        this._selectedFrequencyDetails.UOM,
        'CC_MEDDRSN2',
        StringComparison.InvariantCultureIgnoreCase
      ) == 0
    ) {
      this.AdminTimes.DaysOfWeekVisibility = Visibility.Visible;
    }
    this.AdminTimes.SetSlotTimeModeState(this._selectedFrequencyDetails.Type);
  }
  FreqOnChange_GetAdministrationTimesCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetAdministrationTimesCompletedEventArgs
  ): void {
    if (
      this.IsDrugRoundTimesAvailForAmendGetFrequency &&
      e.Error == null &&
      e.Result != null
    ) {
      if (
        e.Result.oDrugRoundTimes == null ||
        (e.Result.oDrugRoundTimes != null &&
          e.Result.oDrugRoundTimes.Count == 0)
      ) {
        return;
      } else {
        if (
          this.SelectedFrequencyDetails != null &&
          String.Equals(
            this.SelectedFrequencyDetails.UOM,
            'CC_MEDDRSN2',
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          e.Result.oFrequency != null &&
          this.AdminTimes != null &&
          this.AdminTimes.FreqDetails != null &&
          this.AdminTimes.FreqDetails.oFrequency != null
        ) {
          e.Result.oFrequency.IsFriday =
            this.AdminTimes.FreqDetails.oFrequency.IsFriday;
          e.Result.oFrequency.IsMonday =
            this.AdminTimes.FreqDetails.oFrequency.IsMonday;
          e.Result.oFrequency.IsTuesday =
            this.AdminTimes.FreqDetails.oFrequency.IsTuesday;
          e.Result.oFrequency.IsWednesday =
            this.AdminTimes.FreqDetails.oFrequency.IsWednesday;
          e.Result.oFrequency.IsThursday =
            this.AdminTimes.FreqDetails.oFrequency.IsThursday;
          e.Result.oFrequency.IsSaturday =
            this.AdminTimes.FreqDetails.oFrequency.IsSaturday;
          e.Result.oFrequency.IsSunday =
            this.AdminTimes.FreqDetails.oFrequency.IsSunday;
        }
        if (this.AdminTimes != null) {
          this._TempAdminScheduleTimes = null;
          this.AdminTimes.AdminType = 'F';
          this.AdminTimes.IsDrugroundEnable = false;
          this.AdminTimes.IsFixedTime = true;
          this.AdminTimes.AdminSchedule_Time = null;
          this.AdminTimes.FreqDetails = null;
          this.AdminTimes.AdministrationScheduleTimes = null;
        }
        this.DaysOfWeekVisibility = Visibility.Collapsed;
      }
    } else {
      this.IsDrugRoundTimesAvailForAmendGetFrequency = false;
    }
    if (
      this.SelectedFrequencyDetails != null &&
      String.Compare(
        this.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      if (
        String.IsNullOrEmpty(this.Duration) &&
        (this.DurationUOM == null ||
          (this.DurationUOM != null &&
            String.IsNullOrEmpty(this.DurationUOM.Value)))
      ) {
        this.StopPrescriptionTime = DateTime.MinValue;
        this.StopDate = DateTime.MinValue;
        if (this.oPrescitemVM != null) {
          this.oPrescitemVM.FocusControl = 'cboFrequency';
        }
      }
    }
    this.SelectedFrequencyDetails = null;
    let dtCurrentDate: DateTime = CommonBB.GetServerDateTime();
    let oRes: IPPMAManagePrescSer.CResMsgGetAdministrationTimes = null;
    if (e.Error == null && e.Result != null) {
      oRes = e.Result;
      if (
        oRes != null &&
        oRes.oContextInformation != null &&
        !String.IsNullOrEmpty(oRes.oContextInformation.PageInfo) &&
        this.Frequency != null &&
        !String.IsNullOrEmpty(this.Frequency.Value)
      ) {
        if (
          !String.Equals(
            this.Frequency.Value,
            oRes.oContextInformation.PageInfo
          ) &&
          this.AdminTimes != null
        ) {
          if (
            this.AdminTimes.FreqDetails != null &&
            this.AdminTimes.FreqDetails.oFrequency != null &&
            this.AdminTimes.FreqDetails.oFrequency.FrequencyId > 0 &&
            String.Equals(
              this.Frequency.Value,
              this.AdminTimes.FreqDetails.oFrequency.FrequencyId.ToString()
            )
          ) {
            return;
          } else {
            this.AdminTimes.FreqDetails = null;
            this.AdminTimes.AdministrationScheduleTimes = null;
            return;
          }
        }
      }
      if (
        oRes != null &&
        oRes.oFrequency != null &&
        !String.IsNullOrEmpty(oRes.oFrequency.UOM) &&
        !String.Equals(
          oRes.oFrequency.UOM,
          'CC_IPONCENLY',
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        this.FrequencyUOM = oRes.oFrequency.UOM;
      }
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails != null
      ) {
        this.oPrescitemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
          false;
      }
      this.SelectedFrequencyDetails = oRes.oFrequency;
      this.ValMinStartTimePopup = false;
      if (oRes.oFrequency != null) {
        this.FrequencyLowEvent = oRes.oFrequency.LowEvent;
        if (
          PatientContext.PrescriptionType != PrescriptionTypes.ForAdministration
        )
          this.DrugFreqUOMCode = oRes.oFrequency.UOM;
        let DoNotDefaultDaysOfweek: boolean = false;
        if (
          this.oPrescitemVM != null &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Reorder) &&
          !this.IsClearlstAmendList
        ) {
          DoNotDefaultDaysOfweek = true;
        }
        if (
          !String.IsNullOrEmpty(this.DrugFreqUOMCode) &&
          !String.Equals(
            this.DrugFreqUOMCode,
            'CC_MEDDRSN2',
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          this.IsSun =
            this.IsMon =
            this.IsTue =
            this.IsWed =
            this.IsThu =
            this.IsFri =
            this.IsSat =
              false;
          this.IsSunEnable =
            this.IsMonEnable =
            this.IsTueEnable =
            this.IsWedEnable =
            this.IsThuEnable =
            this.IsFriEnable =
            this.IsSatEnable =
              true;
        } else if (
          !DoNotDefaultDaysOfweek &&
          oRes.oFrequency != null &&
          PatientContext.PrescriptionType !=
            PrescriptionTypes.ForAdministration &&
          !String.IsNullOrEmpty(this.DrugFreqUOMCode) &&
          String.Equals(
            this.DrugFreqUOMCode,
            'CC_MEDDRSN2',
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          this.IsSun = oRes.oFrequency.IsSunday;
          this.IsMon = oRes.oFrequency.IsMonday;
          this.IsTue = oRes.oFrequency.IsTuesday;
          this.IsWed = oRes.oFrequency.IsWednesday;
          this.IsThu = oRes.oFrequency.IsThursday;
          this.IsFri = oRes.oFrequency.IsFriday;
          this.IsSat = oRes.oFrequency.IsSaturday;
        }
      }
    }
    let bDontOverrideOffsetDate: boolean = true;
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails.Ordersets != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails.Ordersets.Tag != null &&
      !String.IsNullOrEmpty(
        this.oPrescitemVM.FormViewerDetails.BasicDetails.Ordersets.Tag.ToString()
      ) &&
      !this.IsClearlstAmendedFlds
    ) {
      bDontOverrideOffsetDate = false;
    }
    let IsSubsequentSequenceItem: boolean =
      CommonSequentialHelper.IsSequeneSubsequentItem(this.oPrescitemVM);
    if (
      !IsSubsequentSequenceItem &&
      (DateTime.Equals(this.StartDTTM, DateTime.MinValue )||
        (this.bIsAmend &&
          this.IsClearlstAmendedFlds &&
          (DateTime.NotEquals(this.StartDTTM.Date, dtCurrentDate.Date) ||
            (DateTime.Equals(this.StartDTTM.Date, dtCurrentDate.Date) &&
              DateTime.NotEquals(this.StartPrescriptionTime, dtCurrentDate)))) ||
        (this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
          (DateTime.NotEquals(this.StartDTTM.Date, dtCurrentDate.Date) ||
            (DateTime.Equals(this.StartDTTM.Date, dtCurrentDate.Date) &&
              DateTime.NotEquals(this.StartPrescriptionTime, dtCurrentDate)))) ||
        (this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe &&
          (DateTime.NotEquals(this.StartDTTM.Date, dtCurrentDate.Date) ||
            (DateTime.Equals(this.StartDTTM.Date, dtCurrentDate.Date) &&
              DateTime.NotEquals(this.StartPrescriptionTime, dtCurrentDate))))) &&
      this.SelectedFrequencyDetails != null &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      !String.IsNullOrEmpty(this.SelectedFrequencyDetails.UOM) &&
      String.Equals(
        this.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) &&
      bDontOverrideOffsetDate
    ) {
      this.StartDTTM = this.StartPrescriptionTime = dtCurrentDate;
    }
    if (this.AdminTimes != null && !this.AdminTimes.bIsPRNFreq) {
      this.AdminTimes.FreqDetails = oRes;
      if (
        this.AdminTimes.FreqDetails != null &&
        this.AdminTimes.FreqDetails.oFrequency != null &&
        this.Frequency != null &&
        !String.IsNullOrEmpty(this.Frequency.Value)
      )
        this.AdminTimes.FreqDetails.oFrequency.FrequencyId = Convert.ToInt64(
          this.Frequency.Value
        );
    }
    if (
      this.SelectedFrequencyDetails != null &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      !String.Equals(
        this.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) &&
      (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
        this.IsClearlstAmendedFlds)
    ) {
      let isNonIVSubsequentSequenceItem: boolean = false;
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.ParentbaseVM != null &&
        this.SequenceInfo != null &&
        this.SequenceInfo.GroupSequenceNo > 0
      ) {
        isNonIVSubsequentSequenceItem =
          CommonSequentialHelper.IsSequeneSubsequentItem(this.oPrescitemVM);
      }
      if (
        String.Compare(this.SelectedFrequencyDetails.Type, 'CC_INTERVAL') ==
          0 &&
        !this._asRequired &&
        !this.IsDTTMSetViaORSMezzanine &&
        !isNonIVSubsequentSequenceItem
      ) {
        this.StartDTTM = this.StartPrescriptionTime = DateTime.MinValue;
        if (
          !String.IsNullOrEmpty(this.Duration) &&
          this.DurationUOM != null &&
          !String.IsNullOrEmpty(this.DurationUOM.Value)
        ) {
          this.StopDate = DateTime.MinValue;
          this.StopPrescriptionTime = DateTime.MinValue;
        }
      } else {
        if (DateTime.Equals(this.StartDTTM, DateTime.MinValue)) {
          this.StartDTTM = this.StartPrescriptionTime = dtCurrentDate;
        }
      }
    }
    if (
      this.oPrescitemVM != null &&
      String.Equals(
        this.oPrescitemVM.ItemMainType,
        'CC_APPLIANCE',
        StringComparison.OrdinalIgnoreCase
      ) &&
      this.SelectedFrequencyDetails != null &&
      (PatientContext.PrescriptionType == PrescriptionTypes.Clerking ||
        PatientContext.PrescriptionType == PrescriptionTypes.Discharge ||
        PatientContext.PrescriptionType == PrescriptionTypes.Outpatient ||
        PatientContext.PrescriptionType == PrescriptionTypes.Leave) &&
      !String.Equals(
        this.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) &&
      this.IsClearlstAmendedFlds
    ) {
      if (DateTime.Equals(this.StartDTTM, DateTime.MinValue)) {
        this.StartDTTM = this.StartPrescriptionTime = dtCurrentDate;
      }
    }
    if (
      DateTime.NotEquals(this._startDTTM.Date, DateTime.MinValue) &&
      this.AdminTimes != null &&
      this.AdminTimes.bIsPRNFreq
    ) {
      if (
        this.SelectedFrequencyDetails != null &&
        String.Compare(this.SelectedFrequencyDetails.Type, 'CC_INTERVAL') ==
          0 &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        !String.Equals(
          this.SelectedFrequencyDetails.UOM,
          'CC_IPONCENLY',
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        this.AdminTimes.FreqDetails = oRes;
        if (
          this.AdminTimes.FreqDetails != null &&
          this.AdminTimes.FreqDetails.oFrequency != null &&
          this.Frequency != null &&
          !String.IsNullOrEmpty(this.Frequency.Value)
        )
          this.AdminTimes.FreqDetails.oFrequency.FrequencyId = Convert.ToInt64(
            this.Frequency.Value
          );
        if (this.IsClearlstAmendedFlds) {
          this.StopDate = DateTime.MinValue;
          this.StopPrescriptionTime = DateTime.MinValue;
        } else if (
          !this.IsClearlstAmendedFlds &&
          this.oPrescitemVM != null &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe) &&
          DateTime.Equals(this.StartDTTM, DateTime.MinValue)
        ) {
          this.StopDate = DateTime.MinValue;
          this.StopPrescriptionTime = DateTime.MinValue;
        }
      }
    } else if (
      DateTime.NotEquals(this._startDTTM.Date, DateTime.MinValue) &&
      this.AdminTimes != null &&
      !this.AdminTimes.bIsPRNFreq
    ) {
      if (
        this.SelectedFrequencyDetails != null &&
        String.Compare(this.SelectedFrequencyDetails.Type, 'CC_INTERVAL') ==
          0 &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        !String.Equals(
          this.SelectedFrequencyDetails.UOM,
          'CC_IPONCENLY',
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        if (this.IsClearlstAmendedFlds && DateTime.Equals(this.StartDTTM, DateTime.MinValue)) {
          this.StopDate = DateTime.MinValue;
          this.StopPrescriptionTime = DateTime.MinValue;
        } else if (
          !this.IsClearlstAmendedFlds &&
          this.oPrescitemVM != null &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe) &&
          !(
            !String.IsNullOrEmpty(this.Duration) &&
            this.DurationUOM != null &&
            !String.IsNullOrEmpty(this.DurationUOM.Value) &&
            DateTime.NotEquals(this.StartDTTM, DateTime.MinValue)
          )
        ) {
          this.StopDate = DateTime.MinValue;
          this.StopPrescriptionTime = DateTime.MinValue;
        }
      }
      if (this.GivenFixedTime != null && this.GivenFixedTime.Count > 0) {
        if (this.AdminTimes.FreqDetails == null)
          this.AdminTimes.FreqDetails =
            new IPPMAManagePrescSer.CResMsgGetAdministrationTimes();
        if (
          this.AdminTimes.FreqDetails != null &&
          this.AdminTimes.FreqDetails.oFixedTimes == null
        )
          this.AdminTimes.FreqDetails.oFixedTimes =
            new ObservableCollection<IPPMAManagePrescSer.IPPScheduledetails>();
        this.AdminTimes.FreqDetails.oFixedTimes = this.GivenFixedTime;
      }
      if (
        this.AdminTimes != null &&
        this.oPrescitemVM != null &&
        this.oPrescitemVM.IsFrequencyLoadingForGetpresItemDetails &&
        this.oPrescitemVM.IsFrequencyLoadingForGetpresItemDetails &&
        oRes != null &&
        oRes.oFrequency != null &&
        String.Equals(
          oRes.oFrequency.UOM,
          'CC_MEDDRSN2',
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.AdminTimes.FreqDetails.oFrequency.IsSunday = this.AdminTimes.IsSun;
        this.AdminTimes.FreqDetails.oFrequency.IsMonday = this.AdminTimes.IsMon;
        this.AdminTimes.FreqDetails.oFrequency.IsTuesday =
          this.AdminTimes.IsTue;
        this.AdminTimes.FreqDetails.oFrequency.IsWednesday =
          this.AdminTimes.IsWed;
        this.AdminTimes.FreqDetails.oFrequency.IsThursday =
          this.AdminTimes.IsThu;
        this.AdminTimes.FreqDetails.oFrequency.IsFriday = this.AdminTimes.IsFri;
        this.AdminTimes.FreqDetails.oFrequency.IsSaturday =
          this.AdminTimes.IsSat;
        this.AdminTimes.CheckAndSetDaysOfWeekState();
      }
      if (DateTime.Equals(this.AdminTimes.StartDTTM, DateTime.MinValue)) {
        if (!this.IsDTTMSetViaORSMezzanine) {
          this.AdminTimes.StartDTTM = this.StartDTTM;
        } else {
          this.AdminTimes.StartDTTM = this.StartPrescriptionTime;
        }
      }
      let _isvalidTime: boolean = false;
      if (this.oTempFrequency == null) {
        this.oTempFrequency = this.Frequency;
      }
      if (this.MultiDoseDetails != null) {
        let oTempadmin = this.MultiDoseDetails.Where(
          (c) => c.AdminTimesData != null && c.AdminTimesData.Count > 0
        )
          .Select((s) => s.AdminTimesData)
          .FirstOrDefault();
        if (oTempadmin != null && oTempadmin.Count > 0) _isvalidTime = true;
      }
      let IsFilledAdminTimes: boolean = false;
      if (
        (_isvalidTime &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
        this.oTempFrequency != this.Frequency ||
        (this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
          this.AsRequired &&
          this.oTempFrequency == this.Frequency) ||
        (this.oPrescitemVM != null &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Reorder))
      ) {
        if (
          this.oTempFrequency != this.Frequency ||
          (this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode != ActivityTypes.Amend) ||
          (this.AsRequired &&
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
            this.oTempFrequency == this.Frequency &&
            this.AdminTimes != null &&
            this.AdminTimes.AdministrationScheduleTimes != null &&
            this.AdminTimes.AdministrationScheduleTimes.Count == 0)
        )
          this.AdminTimes.IsVaildORInvaildTime = true;
        else this.AdminTimes.IsVaildORInvaildTime = false;
        if (
          (this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode != ActivityTypes.Amend) ||
          ((this.ScheduledTimes || this.AsRequired) &&
            this.oPrescitemVM != null &&
            ((this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
              (!this.IsNoAdminTimeForPRN || !this.AsRequired)) ||
              this.oPrescitemVM.ActionCode == ActivityTypes.Reorder))
        ) {
          IsFilledAdminTimes = true;
          this.AdminTimes.FillAdministrationTimes(
            null,
            this.bIsAmend,
            this.IsClearlstAmendedFlds,
            bDontOverrideOffsetDate
          );
        }
      }
      if (!IsFilledAdminTimes) {
        if (
          this.IsGetPresWithoutFrequency &&
          this.oPrescitemVM != null &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
        ) {
          if (this.AsRequired) this.AdminTimes.IsVaildORInvaildTime = true;
          this.AdminTimes.FillAdministrationTimes();
        } else if (
          !this.IsGetPresWithoutFrequency &&
          !this.ScheduledTimes &&
          !this.AsRequired
        ) {
          this.AdminTimes.FillAdministrationTimes();
        }
      }
      this.AdminTimes.CheckAndSortScheduleTime();
      this.BackupFrequencyTimes();
      if (this.AsRequired && this.AdminTimes != null)
        this.AdminTimes.AsRequired = this._asRequired;
      this.PRNUnCheckAdminTimes(this.AsRequired);
      let TmpScheduletime: DateTime = DateTime.MinValue;
      if (this.IsDueNow != true && this.Setflag != true) {
        if (
          this.AdminTimes != null &&
          this.AdminTimes.AdministrationScheduleTimes != null &&
          this.AdminTimes.AdministrationScheduleTimes.Count > 0
        ) {
          if (this.AdminTimes.AdminType == 'F') {
            this.AdminTimes.AdminSchedule_Time =
              new ObservableCollection<AdminScheduleTime>(
                this.AdminTimes.AdministrationScheduleTimes.OrderBy(
                  (x) => x.ScheduleDTTM
                )
              );
          } else if (this.AdminTimes.AdminType == 'D') {
            this.AdminTimes.AdminSchedule_Time =
              new ObservableCollection<AdminScheduleTime>(
                this.AdminTimes.AdministrationScheduleTimes.OrderBy(
                  (x) => x.DrugroundDTTM
                )
              );
          }
          if (this.AdminTimes.AdminSchedule_Time != null) {
            let nlen: number = this.AdminTimes.AdminSchedule_Time.Count;
            for (let i: number = 0; i < nlen; i++) {
              if (this.AdminTimes.AdminType == 'F') {
                TmpScheduletime = Convert.ToDateTime(
                  this.AdminTimes.AdminSchedule_Time[i].ScheduleDTTM.ToShortTimeString()
                );
              } else if (this.AdminTimes.AdminType == 'D') {
                TmpScheduletime = Convert.ToDateTime(
                  this.AdminTimes.AdminSchedule_Time[
                    i
                  ].DrugroundDTTM.ToShortTimeString()
                );
              }
              if (DateTime.LessThanOrEqualTo(this.StartDTTM.Date, dtCurrentDate.Date)) {
                if (DateTime.GreaterThanOrEqualTo(TmpScheduletime, this.StartDTTM)) {
                  if (
                    DateTime.GreaterThanOrEqualTo(dtCurrentDate,
                      TmpScheduletime.AddMinutes(
                        -MedicationCommon.MedChartData.DuenessThreshold
                      )) &&
                   DateTime.LessThanOrEqualTo( dtCurrentDate,
                      TmpScheduletime.AddMinutes(
                        MedicationCommon.MedChartData.DuenessThreshold
                      ))
                  ) {
                    this.Scheduletime = TmpScheduletime;
                    this.IsDueNow = true;
                    break;
                  }
                  if (this.IsDueNow == false) {
                    if (DateTime.GreaterThan(dtCurrentDate, TmpScheduletime)) {
                      this.Scheduletime = TmpScheduletime;
                    }
                  }
                }
                this.Setflag = true;
              }
            }
            if (DateTime.Equals(this.Scheduletime, DateTime.MinValue)) {
              let tmpLastDoseDTTM: DateTime = TmpScheduletime.AddDays(-1);
              if (DateTime.GreaterThanOrEqualTo(tmpLastDoseDTTM, this.StartDTTM)) {
                this.Scheduletime = tmpLastDoseDTTM;
              }
            }
          }
        }
      }
      if (this.AdminTimes.AdminType == 'F') {
        this.AdminTimes.IsDrugroundTime = false;
        if (this.AsRequired) {
          this.AdminTimes.IsPRN = this.AsRequired;
          this.AdminTimes.UpdateMandatoryPRN(false);
        }
        this.AdminTimes.IsFixedTime = true;
      } else if (this.AdminTimes.AdminType == 'D') {
        this.AdminTimes.IsDrugroundTime = true;
        if (this.AsRequired) {
          this.AdminTimes.IsPRN = this.AsRequired;
          this.AdminTimes.UpdateMandatoryPRN(false);
        }
        this.AdminTimes.IsFixedTime = false;
      }
      this.SetAdditionalOptionMessage();
      if (this.AdminTimes != null && this.AdminTimes.AsRequired)
        this.AdminTimes.UpdateMandatory();
      let isAllFixedTimeEmpty: boolean = true;
      if (
        this.AdminTimes.AdministrationScheduleTimes != null &&
        this.AdminTimes.AdministrationScheduleTimes.Count > 0
      ) {
        let nCount: number = this.AdminTimes.AdministrationScheduleTimes.Count;
        for (let i: number = 0; i < nCount; i++) {
          if (
            !String.Equals(
              this.AdminTimes.AdministrationScheduleTimes[
                i
              ].ScheduleDTTM.ToString('HH:mm'),
              '00:00'
            )
          ) {
            isAllFixedTimeEmpty = false;
            break;
          }
        }
      }
      if (
        (this.AdminTimes.AdministrationScheduleTimes == null || // this.AdminTimes.AdministrationScheduleTimes.Count == 0 ||
          (!this.IsGetPresWithoutFrequency &&
            !this.ScheduledTimes &&
            !isAllFixedTimeEmpty)) &&
        this.AsRequired &&
        oRes.oFrequency.LowEvent > 0 &&
        this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
        (!this.IsNoAdminTimeForPRN || !this.AsRequired)
      ) {
        //if (this.AdminTimes.AdministrationScheduleTimes == null || this.AdminTimes.AdministrationScheduleTimes.Count == 0) {
        if (this.AdminTimes.AdministrationScheduleTimes == null) {
          this.AdminTimes.AdministrationScheduleTimes =
            new ObservableCollection<AdminScheduleTime>();
          let oAdminScheduleTime: AdminScheduleTime;
          let nCount: number = oRes.oFrequency.LowEvent;
          for (let i: number = 0; i < nCount; i++) {
            oAdminScheduleTime = new AdminScheduleTime(this.AdminTimes);
            oAdminScheduleTime.IsFixedEnable = true;
            oAdminScheduleTime.ScheduleDTTM =
              this.StartDTTM.DateTime.AddHours(0).AddMinutes(0);
            oAdminScheduleTime.FixedSchDTTMChanged = (s,e) => {
              this.AdminTimes.oAdminSchdTime_FixedSchDTTMChanged();
            };
            this.AdminTimes.AdministrationScheduleTimes.Add(oAdminScheduleTime);
          }
        } else {
          let nCount: number =
            this.AdminTimes.AdministrationScheduleTimes.Count;
          for (let i: number = 0; i < nCount; i++) {
            this.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM =
              this.StartDTTM.DateTime.AddHours(0).AddMinutes(0);
          }
        }
        this.AdminTimes.IsSlotTimeModeEnable = true;
      }
    }
    if (this.oPrescitemVM != null) {
      this.oPrescitemVM.IsFrequencyLoadingForGetpresItemDetails = false;
      this.oPrescitemVM.IsPrescriptionItemVMLoading = false;
      if (
        PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
      ) {
        this.CheckReviewUOM4SteppedVariable();
      }
      if (
        DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        this.DurationUOM != null &&
        !String.IsNullOrEmpty(this.DurationUOM.Value) &&
        this.DurationUOM.Value.Equals('CC_DOSES')
      ) {
        let dtStopDTTM: DateTime = DateTime.MinValue;
        let dtStartDTTM: DateTime = this.StartDTTM.DateTime.AddTime(
          this.StartPrescriptionTime
        );
        dtStopDTTM =
          this.oPrescitemVM.GetEnddatetimeforDoseDuration(dtStartDTTM);
        dtStopDTTM =
          DateTime.Equals(dtStopDTTM, DateTime.MinValue)
            ? dtStopDTTM
            : dtStopDTTM.AddMinutes(1);
        this.StopDate = dtStopDTTM;
        this.StopPrescriptionTime = dtStopDTTM;
      }
      if (
        DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        this.ReviewAfterVisible == Visibility.Visible &&
        this.oPrescitemVM != null &&
        this.ReviewafterUOM != null &&
        !String.IsNullOrEmpty(this.ReviewafterUOM.Value) &&
        this.ReviewafterUOM.Value.Equals('CC_DOSES')
      ) {
        this.oPrescitemVM.GetReviewAfterDatetime();
      } else if (
        PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration
      ) {
        let IsReviewAfterHasValue: boolean =
          !String.IsNullOrEmpty(this.ReviewAfter) &&
          String.Compare(this.ReviewAfter, '-1.79769313486232E+308') != 0 &&
          String.Compare(this.ReviewAfter, '-2147483648.0') != 0 &&
          String.Compare(this.ReviewAfter, '-2147483648') != 0 &&
          Convert.ToDouble(this.ReviewAfter) != Number.MinValue;
        let IsReviewAfterUOMHasValue: boolean = this.ReviewafterUOM != null;
        if (IsReviewAfterHasValue && !IsReviewAfterUOMHasValue) {
          this.ReviewAfterDTTM = DateTime.MinValue;
          this.ReviewAfterDateTime = String.Empty;
        }
      }
    }
    if (
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails != null
    ) {
      this.oPrescitemVM.FormViewerDetails.BasicDetails.ReviewAfterCalRequired =
        true;
    }
  }
  private TempFrequency: CListItem;
  public get oTempFrequency(): CListItem {
    return this.TempFrequency;
  }
  public set oTempFrequency(value: CListItem) {
    this.TempFrequency = value;
  }
  private setStopDateDurationEnabledorDisabled(): void {
    if (
      this.DoseType != null &&
      String.Compare(
        this.DoseType.Value,
        DoseTypeCode.STEPPED,
        StringComparison.OrdinalIgnoreCase
      ) != 0 &&
      String.Compare(
        this.DoseType.Value,
        DoseTypeCode.VARIABLE,
        StringComparison.OrdinalIgnoreCase
      ) != 0 &&
      String.Compare(
        this.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.OrdinalIgnoreCase
      ) != 0
    ) {
      if (this.SelectedFrequencyDetails == null) {
        if (
          this.InfusionType == null ||
          (this.InfusionType != null &&
            String.Compare(
              this.InfusionType.Value,
              InfusionTypesCode.PCA,
              StringComparison.OrdinalIgnoreCase
            ) != 0)
        )
          this.IsenableStopDate = true;
      } else {
        this.IsenableStopDate =
          String.Compare(
            this.SelectedFrequencyDetails.UOM,
            'CC_IPONCENLY',
            StringComparison.OrdinalIgnoreCase
          ) != 0;
      }
      if (
        this.InfusionDetails != null &&
        (this.InfusionDetails.IsOngoingChecked ||
          !this.InfusionDetails.IsOngoingChecked)
      ) {
        this.IsenableDuration = true;
      }
    } else {
      this.IsenableDuration = false;
      this.IsenableStopDate = false;
    }
    if (this.SequenceInfo != null) {
      CommonSequentialHelper.EnableDisbaleStartDateTimeForNonIVSeq(
        this.oPrescitemVM
      );
    }
  }
  public IsRestoreOldValues: boolean = false;
  public get DosageForm(): CListItem {
    return this._dosageForm;
  }
  public set DosageForm(value: CListItem) {
    let IsRemoveMCIDosageValNull: boolean = false;
    if (this._dosageForm != value) {
      if (
        this._dosageForm != null &&
        this._dosageForm.Tag != null &&
        String.Compare(this._dosageForm.Tag.ToString(), 'MCR') == 0
      ) {
        IsRemoveMCIDosageValNull = true;
      }
      if (!this.isFormViewDataLoaded) {
        this._dosageForm = value;
        // super.NotifyPropertyChanged("DosageForm");
      } else {
        if (!(this._dosageForm == null && value != null))
          if (this.bDoseFormLoad) return;
        if (
          this.actualClerkingValues != null &&
          !this.isMoreClickedinRoute &&
          this.DosageFormVisibility == Visibility.Visible &&
          ((this.actualClerkingValues.DosageForm == null &&
            value != null &&
            !String.IsNullOrEmpty(value.DisplayText) &&
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
            (this.actualClerkingValues.DosageForm != null &&
              !String.IsNullOrEmpty(
                this.actualClerkingValues.DosageForm.DisplayText
              ) &&
              value == null) ||
            (this.actualClerkingValues.DosageForm != null &&
              value != null &&
              !String.IsNullOrEmpty(
                this.actualClerkingValues.DosageForm.DisplayText
              ) &&
              String.Compare(
                this.actualClerkingValues.DosageForm.DisplayText,
                value.DisplayText,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0))
        ) {
          this.IsMandatoryReasonForMedClerkModify = true;
          this.SetOnadmissionValue(value);
          this.ClearPrescribedQuantity();
        } else if (
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
          this.actualClerkingValues.DosageForm != null &&
          value != null &&
          !String.IsNullOrEmpty(
            this.actualClerkingValues.DosageForm.DisplayText
          ) &&
          String.Compare(
            this.actualClerkingValues.DosageForm.DisplayText,
            value.DisplayText,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          this.IsMandatoryReasonForMedClerkModify = false;
        }
        if (value != null && value.DisplayText == 'More') {
          value.DisplayText = "";     
          value.Value = ""; 
          this._dosageForm = null;
          this.DosageFormMoreClicked = true;
          this.MoreOptionCode = CConstants.FormOptionCode;
          this.GetMoreComboOption();
          if (!this.lstDRCAmendedFlds.Contains('DosageForm'))
            this.lstDRCAmendedFlds.Add('DosageForm');
        } else {
          if (!this._isRouteChanged) {
            if (
              (this._dosageForm == null && value != null) ||
              (value == null && this._dosageForm != null) ||
              (this._dosageForm != null &&
                value != null &&
                String.Compare(
                  this._dosageForm.DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0)
            ) {
              if (!this._isDosageFormChanged) {
                this._isDosageFormChanged = true;
                this.oPrescitemVM.TechnicallyValidateMessage();
              }
            }
          }
          if (
            this._isDosageFormChanged ||
            (PatientContext.IsINFUSIONON &&
              !String.IsNullOrEmpty(this.ItemSubType) &&
              String.Equals(this.ItemSubType, CConstants.SUBTYPE_GAS))
          ) {
            if (
              !this.IsInfusionFormViewer &&
              value != null &&
              ((value.Tag != null &&
                String.Compare(value.Tag.ToString(), 'ERule') != 0) ||
                value.Tag == null)
            ) {
              this.IsenableRSNFORMOD = true;
              this.IsMandatoryRSNFORMOD = true;
              this.IsenableModificationcomments = true;
              if (!this.lstAmendedFlds.Contains('DosageForm')) {
                this.lstAmendedFlds.Add('DosageForm');
                if (
                  this.bIsAmend &&
                  !this.IsFirstDoseClearForAmend &&
                  PatientContext.PrescriptionType ==
                    PrescriptionTypes.ForAdministration &&
                  this.IsenableRSNFORMOD
                ) {
                  this.DoChangesForAmend();
                }
              }
              if (!this.lstDRCAmendedFlds.Contains('DosageForm'))
                this.lstDRCAmendedFlds.Add('DosageForm');
            }
          }
          this._dosageForm = value;
          if (this.DefaultDetails != null)
            this._dosageForm = this.GetComboValue(
              value,
              this.DefaultDetails.Forms
            );
          else this._dosageForm = value;
          if (
            this._dosageForm != null &&
            !String.IsNullOrEmpty(this._dosageForm.DisplayText) &&
            !String.IsNullOrEmpty(this._dosageForm.Value) &&
            this.DefaultDetails != null &&
            this.DefaultDetails.Forms != null &&
            !this.DefaultDetails.Forms.Contains(this._dosageForm)
          ) {
            this.DefaultDetails.Forms.Add(this._dosageForm);
          }
          // super.NotifyPropertyChanged("DosageForm");
          if (
            this._isDosageFormChanged &&
            this.RouteFormChangedEvent != null &&
            !IsRemoveMCIDosageValNull
          ) {
            this.RouteFormChangedEvent();
          }
          IsRemoveMCIDosageValNull = false;
          if (this.MCVersion == null) this.MCVersion = AppSessionInfo.AMCV;
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.ParamsDefaulted
          ) {
            this.bIsBrandRuleExecuted = false;
            if (!this.isAdhocitem) {
              if (
                !(
                  this.bIsAmend &&
                  value != null &&
                  value.Tag != null &&
                  typeof value.Tag === 'string' &&
                  ObjectHelper.CreateType<string>(value.Tag, 'string') !=
                    null &&
                  String.Equals(value.Tag, 'ERule')
                )
              ) {
                if (this.Route == null && this.DosageForm == null) {
                  this.GetFormDefaults(
                    this.IdentifyingOID,
                    this.IdentifyingType,
                    String.Empty,
                    String.Empty,
                    this.MCVersion,
                    FormDefaults.ALL.ToString(),
                    'ROUTE',
                    true,
                    this.IsFormViewerDisable
                  );
                  if (this.OnEPrescribeRuleExecution != null)
                    this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Started);
                } else if (
                  this.Route != null &&
                  !String.IsNullOrEmpty(this.Route.Value) &&
                  this.DosageForm == null
                ) {
                  this.GetFormDefaults(
                    this.IdentifyingOID,
                    this.IdentifyingType,
                    this.Route.Value,
                    String.Empty,
                    this.MCVersion,
                    FormDefaults.ALL.ToString(),
                    'ROUTE',
                    true,
                    this.IsFormViewerDisable
                  );
                  if (this.OnEPrescribeRuleExecution != null)
                    this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Started);
                } else if (
                  (this.Route == null ||
                    (this.Route != null &&
                      String.IsNullOrEmpty(this.Route.Value))) &&
                  this.DosageForm != null
                ) {
                  this.GetFormDefaults(
                    this.IdentifyingOID,
                    this.IdentifyingType,
                    String.Empty,
                    this.DosageForm.Value,
                    this.MCVersion,
                    FormDefaults.ALL.ToString(),
                    'ROUTE',
                    true,
                    this.IsFormViewerDisable
                  );
                  if (this.OnEPrescribeRuleExecution != null)
                    this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Started);
                } else if (
                  this.Route != null &&
                  !String.IsNullOrEmpty(this.Route.Value) &&
                  this.DosageForm != null
                ) {
                  this.GetFormDefaults(
                    this.IdentifyingOID,
                    this.IdentifyingType,
                    this.Route.Value,
                    this.DosageForm.Value,
                    this.MCVersion,
                    FormDefaults.ALL.ToString(),
                    'ROUTE',
                    true,
                    this.IsFormViewerDisable
                  );
                  if (this.OnEPrescribeRuleExecution != null)
                    this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Started);
                } else {
                  this._isDosageFormChanged = false;
                }
              }
            } else {
              this._isDosageFormChanged = false;
            }
          } else {
            this._isDosageFormChanged = false;
          }
        }
      }
      this.CheckStrengthMandatoryByDoseUOMType();
    }
  }
  private mCIDosageForm: CListItem;
  public get MCIDosageForm(): CListItem {
    return this.mCIDosageForm;
  }
  public set MCIDosageForm(value: CListItem) {
    this.mCIDosageForm = value;
    // super.NotifyPropertyChanged("MCIDosageForm");
  }
  public get PreviousDosageForm(): CListItem {
    return this.oldDosageForm;
  }
  public set PreviousDosageForm(value: CListItem) {
    this.oldDosageForm = value;
    // super.NotifyPropertyChanged("PreviousDosageForm");
  }
  public get PreviousOldstrength(): CListItem {
    return this.oldstrength;
  }
  public set PreviousOldstrength(value: CListItem) {
    this.oldstrength = value;
    // super.NotifyPropertyChanged("PreviousOldstrength");
  }
  public get PreviousOldRoute(): CListItem {
    return this.oldroute;
  }
  public set PreviousOldRoute(value: CListItem) {
    this.oldroute = value;
    // super.NotifyPropertyChanged("PreviousOldRoute");
  }
  public get QuantityUOM(): CListItem {
    return this._quantityUOM;
  }
  public set QuantityUOM(value: CListItem) {
    if (
      value != null &&
      value.DisplayText != null &&
      value.DisplayText == 'More'
    ) {
      value.DisplayText = "";      
      this.MoreOptionCode = CConstants.QtyUOMoptioncode;
      this.GetMoreComboOption();
    }
    if (!this.IsGetAdhocMCIRuleFromGetPresItemDetls) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('QuantityUOM')) {
        this.lstAmendedFlds.Add('QuantityUOM');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
    }
    if (this.DefaultDetails != null)
      this._quantityUOM = this.GetComboValue(
        value,
        this.DefaultDetails.Quantitys
      );
    else this._quantityUOM = value;
    // super.NotifyPropertyChanged("QuantityUOM");
  }
  public get Strength(): CListItem {
    return this._strength;
  }
  public set Strength(value: CListItem) {
    if (!this.isFormViewDataLoaded) {
      this._strength = value;
      // super.NotifyPropertyChanged("Strength");
    } else {
      if (
        (this._strength == null && value != null && value.Tag == null) ||
        (this._strength != null &&
          this._strength.Tag == null &&
          value == null) ||
        (this._strength != null &&
          value != null &&
          String.Compare(
            this._strength.DisplayText,
            value.DisplayText,
            StringComparison.CurrentCultureIgnoreCase
          ) != 0)
      ) {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('Strength')) {
          this.lstAmendedFlds.Add('Strength');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        if (!this.lstDRCAmendedFlds.Contains('Strength'))
          this.lstDRCAmendedFlds.Add('Strength');
        this.ClearPrescribedQuantity();
        this.oPrescitemVM.TechnicallyValidateMessage();
      }
      if (
        this.actualClerkingValues != null &&
        ((this.actualClerkingValues.Strength == null &&
          value != null &&
          !String.IsNullOrEmpty(value.DisplayText) &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
          (this.actualClerkingValues.Strength != null &&
            !String.IsNullOrEmpty(
              this.actualClerkingValues.Strength.DisplayText
            ) &&
            value == null) ||
          (this.actualClerkingValues.Strength != null &&
            value != null &&
            !String.IsNullOrEmpty(
              this.actualClerkingValues.Strength.DisplayText
            ) &&
            String.Compare(
              this.actualClerkingValues.Strength.DisplayText,
              value.DisplayText,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0))
      ) {
        if (
          !(
            value == null &&
            this._strength != null &&
            this._strength.Tag != null &&
            String.Compare(this._strength.Tag.ToString(), 'OKVAL') == 0
          )
        ) {
          this.IsMandatoryReasonForMedClerkModify = true;
          this.SetOnadmissionValue(value);
        }
      }
      if (this.DefaultDetails != null)
        this._strength = this.GetComboValue(
          value,
          this.DefaultDetails.Strengths
        );
      else this._strength = value;
      // super.NotifyPropertyChanged("Strength");
      let IsNonCatItem: boolean =
        String.Compare(this.identifyingType, CConstants.NONCATALOGUEITEM) ==
          0 || String.Compare(this.identifyingType, CConstants.Precatalog) == 0;
      if (this.DefaultDetails != null && this.DefaultDetails.ParamsDefaulted) {
        this.bIsBrandRuleExecuted = false;
        {
          if (
            !(
              this.IdentifyingType.Equals(
                CConstants.ACTUALPRODUCT,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              this.IdentifyingType.Equals(
                CConstants.ACTUALMOIETY,
                StringComparison.InvariantCultureIgnoreCase
              )
            )
          ) {
            if (
              this.IdentifyingOID > 0 &&
              this.Route != null &&
              !String.IsNullOrEmpty(this.Route.Value) &&
              this.Strength != null &&
              !String.IsNullOrEmpty(this.Strength.Value) &&
              !IsNonCatItem
            ) {
              if (this.OnEPrescribeRuleExecution != null)
                this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Started);
              this.ApplyEFrameworkRule(
                this.IdentifyingOID,
                this.IdentifyingType,
                this.Route.Value,
                this.DosageForm == null ? String.Empty : this.DosageForm.Value,
                this.Strength.Value,
                this.MCVersion,
                RuleNames.BRAND.ToString()
              );
            }
          } else if (
            !this.bIsAdminmethodRuleExecuted &&
            !String.Equals(this.IdentifyingType, 'ACTUALPRODUCT') &&
            this.IdentifyingOID > 0 &&
            this.Route != null &&
            !String.IsNullOrEmpty(this.Route.Value) &&
            this.DosageForm != null &&
            !String.IsNullOrEmpty(this.DosageForm.Value) &&
            (this.Strength == null ||
              String.IsNullOrEmpty(this.Strength.Value)) &&
            !IsNonCatItem
          ) {
            if (this.OnEPrescribeRuleExecution != null)
              this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Started);
            this.ApplyEFrameworkRule(
              this.IdentifyingOID,
              this.IdentifyingType,
              this.Route.Value,
              this.DosageForm == null ? String.Empty : this.DosageForm.Value,
              String.Empty,
              this.MCVersion,
              RuleNames.ADMINMETHOD.ToString()
            );
          }
          if (
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            !(
              PatientContext.ClerkFormViewDefaultBehavior ==
              ClerkFormViewDeftBehaviour.LaunchFormMandatory
            ) &&
            this.RouteFormChangedEvent != null
          ) {
            this.RouteFormChangedEvent();
          }
        }
      }
    }
  }
  private TempTitratedDoseUom: CListItem;
  public get DoseUOM(): CListItem {
    return this._doseUOM;
  }
  public set DoseUOM(value: CListItem) {
    let bDoseUOMChangd: boolean = false;
    if (this.bDoseUOMLoad) return;
    if (value != null && value.DisplayText == 'More') {
      value.DisplayText = "";     
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      this.MoreOptionCode = CConstants.DoseUOMOptionCode;
      this.GetMoreComboOption();
      bDoseUOMChangd = true;
    } else {
      if (
        (this._doseUOM == null && value != null) ||
        (this._doseUOM != null && value == null) ||
        (this._doseUOM != null &&
          value != null &&
          String.Compare(
            this._doseUOM.DisplayText,
            value.DisplayText,
            StringComparison.CurrentCultureIgnoreCase
          ) != 0)
      ) {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('DoseUOM')) {
          this.lstAmendedFlds.Add('DoseUOM');
        }
        if (!this.lstDRCAmendedFlds.Contains('DoseUOM'))
          this.lstDRCAmendedFlds.Add('DoseUOM');
        if (
          this.DoseType != null &&
          !String.IsNullOrEmpty(this.DoseType.Value) &&
          !String.Equals(
            this.DoseType.Value,
            DoseTypeCode.CONDITIONAL,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.ClearPrescribedQuantity();
        }
        if (!this.IsInfusionRateChanged) {
          this.IsInfusionRateChanged = true;
        }
        bDoseUOMChangd = true;
      }
      if (
        this.actualClerkingValues != null &&
        ((this.actualClerkingValues.DoseUOM == null &&
          value != null &&
          !String.IsNullOrEmpty(value.DisplayText) &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
          (this.actualClerkingValues.DoseUOM != null &&
            !String.IsNullOrEmpty(
              this.actualClerkingValues.DoseUOM.DisplayText
            ) &&
            value == null) ||
          (this.actualClerkingValues.DoseUOM != null &&
            value != null &&
            !String.IsNullOrEmpty(
              this.actualClerkingValues.DoseUOM.DisplayText
            ) &&
            String.Compare(
              this.actualClerkingValues.DoseUOM.DisplayText,
              value.DisplayText,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0))
      ) {
        if (!this.IsRestoreOldValues) {
          this.IsMandatoryReasonForMedClerkModify = true;
        }
        this.SetOnadmissionValue(value);
      }
      if (
        this.DoseType != null &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.TITRATED,
          StringComparison.OrdinalIgnoreCase
        ) == 0 &&
        (this.TempTitratedDoseUom == null ||
          (this.TempTitratedDoseUom != null &&
            this._doseUOM != null &&
            this.TempTitratedDoseUom != this._doseUOM))
      ) {
        this.TempTitratedDoseUom = this._doseUOM;
      }
      if (
        (this._doseUOM == null && value != null) ||
        (value == null && this._doseUOM != null) ||
        (this._doseUOM != null &&
          value != null &&
          String.Compare(
            this._doseUOM.DisplayText,
            value.DisplayText,
            StringComparison.CurrentCultureIgnoreCase
          ) != 0)
      ) {
        this.oPrescitemVM.TechnicallyValidateMessage();
      }
      if (
        this.TitratedDoseDetails != null &&
        this.TitratedDoseDetails.DoseUOM != null &&
        this.TitratedDoseDetails.TitratedUOMCancel
      ) {
        this._doseUOM = this.DefaultDetails.Uoms.Where(
          (x) => x.DisplayText == this.TitratedDoseDetails.DoseUOM
        ).SingleOrDefault();
        this.TitratedDoseDetails.TitratedUOMCancel = false;
      } else if (
        this.DefaultDetails != null &&
        this.DefaultDetails.OriginalUOM != null
      ) {
        let cDefaultDoseUOM: CListItem = this.GetComboValue(
          value,
          this.DefaultDetails.OriginalUOM
        );
        if (
          cDefaultDoseUOM != null &&
          Helper.ReferenceEquals(cDefaultDoseUOM, value)
        ) {
          this._doseUOM = cDefaultDoseUOM;
        } else {
          this._doseUOM = value;
        }
      } else this._doseUOM = value;
      if (
        this._doseUOM != null &&
        this.TitratedDoseDetails != null &&
        String.IsNullOrEmpty(this.TitratedDoseDetails.DoseUOM) &&
        PatientContext.PrescriptionType !=
          PrescriptionTypes.ForAdministration &&
        this.DoseType != null &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.TITRATED,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        this.TitratedDoseDetails.DoseUOM = this._doseUOM.DisplayText;
      } else if (
        this.TitratedDoseDetails != null &&
        !this.TitratedDoseDetails.IsCancelTitratedDoseUom &&
        this._doseUOM != null &&
        !String.IsNullOrEmpty(this.TitratedDoseDetails.DoseUOM) &&
        !String.IsNullOrEmpty(this._doseUOM.DisplayText) &&
        !String.IsNullOrEmpty(this.DoseType.Value) &&
        !String.Equals(
          this.TitratedDoseDetails.DoseUOM,
          this._doseUOM.DisplayText,
          StringComparison.CurrentCultureIgnoreCase
        ) &&
        PatientContext.PrescriptionType !=
          PrescriptionTypes.ForAdministration &&
        this.DoseType != null &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.TITRATED,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        this.TitratedDoseDetails.DoseUOM = this._doseUOM.DisplayText;
        this.TitratedDoseDetails.OnUpdateTitratedDosedetailsEvent = (s,e) => {
          this.OnUpdateTitratedDosedetailsEvent();
        };
      }
      if (Helper.ReferenceEquals(this._doseUOM, value) != true) {
        // super.NotifyPropertyChanged("DoseUOM");
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      if (
        this.InfusionType != null &&
        !String.IsNullOrEmpty(this.InfusionType.Value) &&
        (String.Compare(
          this.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        ) == 0 ||
          String.Compare(this.InfusionType.Value, InfusionTypesCode.FLUID) ==
            0) &&
        this.IsClearlstAmendedFlds &&
        (this.lstAmendedFlds == null ||
          (this.lstAmendedFlds != null &&
            this.lstAmendedFlds.Contains('DoseUOM')))
      ) {
        //Not Required for LHS. To be Re-Visited.
        this.oPrescitemVM.LaunchInfusionrateCalculator(false);
      }
    }
    this.CheckStrengthMandatoryByDoseUOMType();
    // super.NotifyPropertyChanged("DoseUOM");
    if (
      this.bIsAmend &&
      !this.IsFirstDoseClearForAmend &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.IsenableRSNFORMOD
    ) {
      this.DoChangesForAmend();
    }
    if (bDoseUOMChangd) {
      this.DCAmendMessage();
    }
  }
  private _IsFirstDoseClearForAmend: boolean = false;
  public get IsFirstDoseClearForAmend(): boolean {
    return this._IsFirstDoseClearForAmend;
  }
  public set IsFirstDoseClearForAmend(value: boolean) {
    this._IsFirstDoseClearForAmend = value;
  }
  public get OriginalDoseUOM(): CListItem {
    return this._originalDoseUOM;
  }
  public set OriginalDoseUOM(value: CListItem) {
    this._originalDoseUOM = value;
  }
  public get OriginalDose(): string {
    return this._originalDose;
  }
  public set OriginalDose(value: string) {
    this._originalDose = value;
  }
  OnUpdateTitratedDosedetailsEvent(): void {
    if (
      this.TempTitratedDoseUom != null &&
      this.TempTitratedDoseUom != this.DoseUOM
    ) {
      this.DoseUOM = this.TempTitratedDoseUom;
      this.TempTitratedDoseUom = null;
      this.TitratedDoseDetails.IsCancelTitratedDoseUom = false;
      // this.TitratedDoseDetails.OnUpdateTitratedDosedetailsEvent -= this.OnUpdateTitratedDosedetailsEvent;
    }
  }
  public get StationaryType(): CListItem {
    return this._stationaryType;
  }
  public set StationaryType(value: CListItem) {
    if (!Helper.ReferenceEquals(this._stationaryType, value)) {
      if (!this.isFormViewDataLoaded) {
        this._stationaryType = value;
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('StationaryType')) {
          this.lstAmendedFlds.Add('StationaryType');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        if (this.DefaultDetails != null)
          this._stationaryType = this.GetComboValue(
            value,
            this.DefaultDetails.Stationarys
          );
        else this._stationaryType = value;
      }
      // super.NotifyPropertyChanged("StationaryType");
    }
  }
  public get PrintStationaryType(): CListItem {
    return this._PrntstationaryType;
  }
  public set PrintStationaryType(value: CListItem) {
    if (!Helper.ReferenceEquals(this._PrntstationaryType, value)) {
      this._PrntstationaryType = value;
      // super.NotifyPropertyChanged("PrintStationaryType");
    }
  }
  public GetComboPRNOrSiteValue(
    oListItem: CListItem,
    oListCollection: ObservableCollection<CListItem>,
    SetValue: boolean
  ): CListItem {
    if (oListItem != null && oListCollection != null) {
      let selectedVal: CListItem = null;
      for (let i = 0; i< oListCollection.Count; i++){
        let oItem : CListItem = oListCollection[i];
        if (oItem.DisplayText == oListItem.DisplayText) {
          selectedVal = oItem;
          break;
        }
      }
      if (oListItem != null && !String.IsNullOrEmpty(oListItem.DisplayText)) {
        if (SetValue == true) this.SiteFreeText = oListItem.DisplayText;
        else this.PRNInstructionFreeText = oListItem.DisplayText;
      }
    } else {
      if (oListItem != null && !String.IsNullOrEmpty(oListItem.DisplayText)) {
        if (SetValue == true) this.SiteFreeText = oListItem.DisplayText;
        else this.PRNInstructionFreeText = oListItem.DisplayText;
      }
    }
    return oListItem;
  }
  public GetReviewUOMComboValue(
    oListItem: CListItem,
    oListCollection: ObservableCollection<CListItem>
  ): CListItem {
    let selectedVal: CListItem = new CListItem();
    if (oListItem != null && oListCollection != null) {
      for (let i=0; i < oListCollection.Count; i++ ){
        let oItem: CListItem = oListCollection[i];
        if (oItem.Value == oListItem.Value) {
          selectedVal = oItem;
          break;
        }
      }
    }
    return selectedVal;
  }
  public GetComboValue(
    oListItem: CListItem,
    oListCollection: ObservableCollection<CListItem>,
    isCallFromFreq?: boolean
  ): CListItem {
    if (oListItem != null && oListCollection != null) {
      let selectedVal: CListItem = null;
      let FreqListTag: string[] = null;
      if (
        ObjectHelper.HasValue(isCallFromFreq) &&
        isCallFromFreq.Value &&
        oListItem.Tag != null
      ) {
        FreqListTag = ObjectHelper.CreateType<string[]>(
          oListItem.Tag,
          Array<string>
        );
      }
      for (let i=0; i< oListCollection.Count; i++){
        let oItem : CListItem = oListCollection[i];
      
        let FreqListCollTag: string[] = null;
        if (
          ObjectHelper.HasValue(isCallFromFreq) &&
          isCallFromFreq.Value &&
          oItem.Tag != null &&
          FreqListTag != null
        ) {
          FreqListCollTag = ObjectHelper.CreateType<string[]>(
            oItem.Tag,
            Array<string>
          );
        }
        if (
          oItem.Value == oListItem.Value ||
          (ObjectHelper.HasValue(isCallFromFreq) &&
            isCallFromFreq.Value &&
            FreqListCollTag != null &&
            FreqListTag != null &&
            String.Equals(
              oItem.DisplayText,
              oListItem.DisplayText,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            FreqListCollTag.length > 5 &&
            FreqListTag.length > 5 &&
            FreqListCollTag[5] != null &&
            FreqListTag[5] != null &&
            String.Equals(
              FreqListCollTag[5],
              FreqListTag[5],
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          selectedVal = oItem;
          break;
        }
      }
      if (
        !String.IsNullOrEmpty(oListItem.DisplayText) &&
        !oListItem.DisplayText.Contains(
          MedicationCommonConstant.MULTIROUTE_ROUTE
        ) &&
        !oListItem.DisplayText.Contains(
          MedicationCommonConstant.MULTIROUTEDILIMITER
        )
      ) {
        if (selectedVal != null) {
          oListItem = selectedVal;
        } else if (!String.IsNullOrEmpty(oListItem.DisplayText)) {
          let x = oListCollection.Where((e) => e.Value == 'CC_More');
          if (x != null && oListCollection.Count == 1) {
            oListCollection.Insert(0, oListItem);
          } else if (x != null && oListCollection.Count > 1) {
            oListCollection.Insert(oListCollection.Count - 1, oListItem);
          } else oListCollection.Add(oListItem);
        }
      }
    }
    return oListItem;
  }
  private _OriginalSupplyInstructionText: CListItem;
  public get OriginalSupplyInstructionText(): CListItem {
    return this._OriginalSupplyInstructionText;
  }
  public set OriginalSupplyInstructionText(value: CListItem) {
    if (value != this._OriginalSupplyInstructionText) {
      this._OriginalSupplyInstructionText = value;
      // super.NotifyPropertyChanged("OriginalSupplyInstructionText");
    }
  }
  public get Ordersets(): CListItem {
    return this._Ordersets;
  }
  public set Ordersets(value: CListItem) {
    if (value != this._Ordersets) {
      this._Ordersets = value;
      // super.NotifyPropertyChanged("Ordersets");
    }
  }
  private _OrdersetSequence: OrderSetSequenceDetail;
  public get OrdersetSequence(): OrderSetSequenceDetail {
    return this._OrdersetSequence;
  }
  public set OrdersetSequence(value: OrderSetSequenceDetail) {
    if (value != this._OrdersetSequence) {
      this._OrdersetSequence = value;
      // super.NotifyPropertyChanged("OrdersetSequence");
    }
  }
  public get PrescribingNote(): string {
    return this._PrescribingNote;
  }
  public set PrescribingNote(value: string) {
    if (value != this._PrescribingNote) {
      this._PrescribingNote = value;
      if (this._PrescribingNote.length > 200)
        this._sPrescribingNote =
          this._PrescribingNote.Substring(0, 199) + '...';
      else this._sPrescribingNote = this._PrescribingNote;
      // super.NotifyPropertyChanged("PrescribingNote");
    }
  }
  public get PrescribingNote_ToolTip(): string {
    return this._sPrescribingNote;
  }
  public set PrescribingNote_ToolTip(value: string) {
    if (value != this._sPrescribingNote) {
      this._sPrescribingNote = value;
      // super.NotifyPropertyChanged("PrescribingNote_ToolTip");
    }
  }
  private _NoteIconSource: ImageSource = new BitmapImage(
    new Uri('./assets/images/iCareEventsNOR16.png', UriKind.RelativeOrAbsolute)
  );
  public get NoteIconSource(): ImageSource {
    return this._NoteIconSource;
  }
  public set NoteIconSource(value: ImageSource) {
    if (value != this._NoteIconSource) {
      this._NoteIconSource = value;
      // super.NotifyPropertyChanged("NoteIconSource");
    }
  }
  private _PRNChkColorVisible: SolidColorBrush = new SolidColorBrush(
    CommonBB.ToColor('#C2E2E3')    
  );
  public get PRNChkColorVisible(): SolidColorBrush {
    return this._PRNChkColorVisible;
  }
  public set PRNChkColorVisible(value: SolidColorBrush) {
    if (!Helper.ReferenceEquals(this._PRNChkColorVisible, value)) {
      this._PRNChkColorVisible = value;
      // NotifyPropertyChanged("PRNChkColorVisible");
    }
  }
  private _NoteIconColor: SolidColorBrush = new SolidColorBrush(Colors.Yellow);
  public get NoteIconColor(): SolidColorBrush {
    return this._NoteIconColor;
  }
  public set NoteIconColor(value: SolidColorBrush) {
    if (value != this._NoteIconColor) {
      this._NoteIconColor = value;
      // super.NotifyPropertyChanged("NoteIconColor");
    }
  }
  public get OrdersetAssociationOID(): string {
    return this._OrdersetAssociationOID;
  }
  public set OrdersetAssociationOID(value: string) {
    if (value != this._OrdersetAssociationOID) {
      this._OrdersetAssociationOID = value;
      // super.NotifyPropertyChanged("OrdersetAssociationOID");
    }
  }
  public IsChangeFromDurationOrStartDTTM: boolean = false;


  public get DurationUOM(): CListItem {
    return this._durationUOM;
  }
  public set DurationUOM(value: CListItem) {
    let bDosetypeStepped: boolean = false;
    if (
      (this._durationUOM == null && value != null) ||
      (this._durationUOM != null && value == null) ||
      (this._durationUOM != null &&
        value != null &&
        String.Compare(
          this._durationUOM.DisplayText,
          value.DisplayText,
          StringComparison.CurrentCultureIgnoreCase
        ) != 0)
    ) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.oPrescitemVM.TechnicallyValidateMessage();
      this.IsenableModificationcomments = true;
    }
    if (value != this._durationUOM) {
      if (!this.lstAmendedFlds.Contains('DurationUOM')) {
        this.lstAmendedFlds.Add('DurationUOM');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this.ClearPrescribedQuantity();
      if (this.DefaultDetails != null)
      {
        this._durationUOM = this.GetComboValue(
          value,
          this.DefaultDetails.Duration
        );
        if(this.IsClearlstAmendedFlds){
          this.IsChangeFromDurationOrStartDTTM = true;
        }
      }
      else{
         this._durationUOM = value;
         if(this.IsClearlstAmendedFlds){
          this.IsChangeFromDurationOrStartDTTM = true;
         }
      }
        

      // super.NotifyPropertyChanged("DurationUOM");
      if (
        this._doseType != null &&
        !String.IsNullOrEmpty(this._doseType.Value) &&
        String.Equals(this._doseType.Value, DoseTypeCode.STEPPEDVARIABLE)
      )
        bDosetypeStepped = true;
      if (
        this._durationUOM != null &&
        String.Equals(this._durationUOM.Value, 'CC_DOSES') &&
        !String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.IsenableStopDate = false;
      } else if (
        !bDosetypeStepped &&
        (this.InfusionType == null ||
          (this.InfusionType != null &&
            !String.IsNullOrEmpty(this.InfusionType.Value) &&
            !String.Equals(this.InfusionType.Value, InfusionTypesCode.PCA)))
      )
        this.IsenableStopDate = true;
      if (
        this.itemSubType == null ||
        String.IsNullOrEmpty(this.itemSubType) ||
        (!String.IsNullOrEmpty(this.itemSubType) &&
          !String.IsNullOrEmpty(PatientContext.PrescriptionType))
      ) {
        if (
          !String.IsNullOrEmpty(this._duration) &&
          Convert.ToInt64(this._duration) > 0
        ) {
          this.SetStopDTTM();
        } else {
          this.StopDate = DateTime.MinValue;
        }
      }
    }
    if (
      (this.SequenceInfo != null && this.SequenceInfo.GroupSequenceNo > 0) ||
      (this.oPrescitemVM != null &&
        this.oPrescitemVM.OsInstance != null &&
        this.oPrescitemVM.OsInstance.OsIsSequential == true)
    ) {
      CommonSequentialHelper.EnableDisbaleStartDateTimeForNonIVSeq(
        this.oPrescitemVM
      );
    }
  }
  public ReasonforModificationIP: string;
  public ReasonforModificationDis: string;
  public get ReasonforModification(): CListItem {
    return this._reasonforModification;
  }
  public set ReasonforModification(value: CListItem) {
    if (value != this._reasonforModification) {
      if (
        value != null &&
        String.Compare(
          value.Value,
          'CC_MEDALLADVRECTINTO',
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        this.oPrescitemVM.AllergylaunchfromFORMVIEW = false;
      }
      if (!this.isFormViewDataLoaded) {
        {
          this._reasonforModification = value;
          // super.NotifyPropertyChanged("ReasonforModification");
        }
      } else {
        if (!this.lstAmendedFlds.Contains('ReasonforModification')) {
          this.lstAmendedFlds.Add('ReasonforModification');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._reasonforModification = value;
        if (
          this._reasonforModification != null &&
          !String.IsNullOrEmpty(this._reasonforModification.Value)
        ) {
          this.PopulateAction(this._reasonforModification.Value);
          this.IsModificationReasonExists = true;
        } else {
          if (
            !(
              this._reasonforModification != null &&
              String.Equals(
                this._reasonforModification.DisplayText,
                'Select reason',
                StringComparison.CurrentCultureIgnoreCase
              )
            )
          ) {
            this._reasonforModification = ObjectHelper.CreateObject(
              new CListItem(),
              { DisplayText: 'Select reason' }
            );
          }
          this.ModificationAction = String.Empty;
        }
        // super.NotifyPropertyChanged("ReasonforModification");
      }
      if (
        this._reasonforModification != null &&
        this._reasonforModification.DisplayText == 'Select reason' &&
        ProfileData.AdditionalPrescConfig != null &&
        ProfileData.AdditionalPrescConfig.ReconcileMandatory
      ) {
        this.ReasonMandatory = true;
      } else {
        this.ReasonMandatory = false;
      }
    }
  }
  public Launchallgergyonceonly: boolean = false;
  //public delegate void AdminMethodForDynForm();
  public AdminMethodForDynFormEvent: Function;
  private _isAdminMethodVisible: Visibility = Visibility.Collapsed;
  public get IsAdminMethodVisible(): Visibility {
    return this._isAdminMethodVisible;
  }
  public set IsAdminMethodVisible(value: Visibility) {
    if (this._isAdminMethodVisible != value) {
      this._isAdminMethodVisible = value;
      if (this._isAdminMethodVisible == Visibility.Visible) {
        if (
          this.oOriginalValues.AdminMethod != null &&
          !String.IsNullOrEmpty(this.oOriginalValues.AdminMethod.DisplayText) &&
          !String.IsNullOrEmpty(this.oOriginalValues.AdminMethod.Value)
        ) {
          this.AdminMethod = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: this.oOriginalValues.AdminMethod.DisplayText,
            Value: this.oOriginalValues.AdminMethod.Value,
          });
        }
        this.Doselabelvalue = Resource.MedicationForm.sAdminMethod;
        this.IsDoseVisible = Visibility.Collapsed;
        if (
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.NORMAL,
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.DOSAGERANGE,
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.TITRATED,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.IsenableDose = true;
          if(this.DynamicControlIsLoaded)
          this.DynamicControlEndInstallLoaded.emit(true);
        }
        if (
          this.AccessContraintControls != null &&
          this.AccessContraintControls.Count > 0 &&
          this.AccessContraintControls.Contains('cboAdminMethod')
        ) {
          this.IsenableDose = false;
        }
        if (!String.IsNullOrEmpty(this.UpperDose)) this.UpperDose = '';
        if (!String.IsNullOrEmpty(this.Dose)) {
          this.Dose = '';
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend
          ) {
            this.DoseUOM = null;
          }
        }
        if (this.DoseType != null) {
          if (
            String.Compare(this.DoseType.Value, DoseTypeCode.NORMAL) == 0 ||
            String.Compare(this.DoseType.Value, DoseTypeCode.DOSAGERANGE) == 0
          ) {
            this.RemoveTitratedDoseType(false);
          } else if (
            String.Compare(this.DoseType.Value, DoseTypeCode.TITRATED) == 0
          ) {
            this.RemoveTitratedDoseType(true);
          } else {
            this.RemoveTitratedDoseType(false);
          }
        }
        if (
          !String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Clerking,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.IsStrengthMandatory = !this.IsStrengthinProduct;
        }
      } else {
        if (this.DoseType != null) {
          if (
            String.Compare(
              this.DoseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              this.DoseType.Value,
              DoseTypeCode.VARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              this.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              this.DoseType.Value,
              DoseTypeCode.CONDITIONAL,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              this.DoseType.Value,
              DoseTypeCode.NORMAL,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            this.Doselabelvalue = Resource.MedicationForm.sDose;
          } else if (
            String.Compare(
              this.DoseType.Value,
              DoseTypeCode.DOSAGERANGE,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            this.Doselabelvalue = Resource.MedicationForm.sDoserange;
          } else if (
            String.Compare(
              this.DoseType.Value,
              DoseTypeCode.TITRATED,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            this.Doselabelvalue = Resource.MedicationForm.sFirstdose;
          }
          this.IsDoseVisible = Visibility.Visible;
        }
        if (
          this.AccessContraintControls != null &&
          this.AccessContraintControls.Contains('Dose') &&
          !String.IsNullOrEmpty(this.Dose)
        ) {
          this.IsenableDose = false;
        } else {
          this.IsenableDose = true;
        }
        if(this.DynamicControlIsLoaded)
        this.DynamicControlEndInstallLoaded.emit(true);
        if (
          this.AccessContraintControls != null &&
          this.AccessContraintControls.Contains('cboUOM') &&
          this.DoseUOM != null &&
          !String.IsNullOrEmpty(this.DoseUOM.Value)
        ) {
          this.IsenableDoseUOM = false;
        } else {
          this.IsenableDoseUOM = true;
        }
        let bFound: boolean = false;
        if (
          this.DefaultDetails != null &&
          this.DefaultDetails.DoseType != null
        ) {
          for (let i: number = 0; i < this.DefaultDetails.DoseType.Count; i++) {
            if (
              String.Compare(
                this.DefaultDetails.DoseType[i].Value,
                DoseTypeCode.TITRATED
              ) == 0
            ) {
              bFound = true;
              break;
            }
          }
          if (!bFound && this.DefaultDetails.IsTitrated)
            this.DefaultDetails.DoseType.Insert(
              this.indTitrated,
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: CConstants.sTitratedDisplaytext,
                Value: DoseTypeCode.TITRATED,
              })
            );
        }
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
          this.IsAdminMethodVisible == Visibility.Collapsed
        ) {
          this.AdminMethod = null;
        }
      }
      if (this.AdminMethodForDynFormEvent != null)
        this.AdminMethodForDynFormEvent();
      // super.NotifyPropertyChanged("IsAdminMethodVisible");
    }
  }
  public indTitrated: number = 0;
  public RemoveTitratedDoseType(bDefaultRequired: boolean): void {
    if (this.DefaultDetails != null && this.DefaultDetails.DoseType != null) {
      let nTitIdx: number = -1;
      for (let i: number = 0; i < this.DefaultDetails.DoseType.Count; i++) {
        if (
          String.Compare(
            this.DefaultDetails.DoseType[i].Value,
            DoseTypeCode.TITRATED
          ) == 0
        ) {
          nTitIdx = i;
          break;
        }
      }
      if (nTitIdx != -1) {
        this.DefaultDetails.DoseType.RemoveAt(nTitIdx);
        this.indTitrated = nTitIdx;
      }
      if (bDefaultRequired) {
        this.DoseType = this.GetComboValue(
          ObjectHelper.CreateObject(new CListItem(), {
            Value: DoseTypeCode.NORMAL,
            DisplayText: CConstants.sNormalDisplaytext,
          }),
          this.DefaultDetails.DoseType
        );
      }
    }
  }
  private _isDoseVisible: Visibility = Visibility.Visible;
  public get IsDoseVisible(): Visibility {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null
    ) {
      if (!this.oPrescitemVM.FormViewerDetails.BHasFormViewParams) {
        if (
          PatientContext.IsINFUSIONON &&
          this.InfusionType != null &&
          !String.IsNullOrEmpty(this.InfusionType.Value) &&
          this.Route != null &&
          this.Route.Tag != null &&
          !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
          this.Route.Tag.ToString().Contains('1')
        ) {
          if (
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS
            ) ||
            String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID)
          ) {
            this._isDoseVisible = Visibility.Collapsed;
          } else if (
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            )
          ) {
            this._isDoseVisible = Visibility.Visible;
          }
        } else if (
          this.InfusionType == null &&
          this.IsInfContiniousFormLoaded
        ) {
          this._isDoseVisible = Visibility.Collapsed;
        } else if (
          this.InfusionType != null &&
          (String.Equals(
            this.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS
          ) ||
            String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID))
        ) {
          this._isDoseVisible = Visibility.Collapsed;
        } else {
          if (this._isAdminMethodVisible == Visibility.Collapsed) {
            this._isDoseVisible = Visibility.Visible;
          } else if (this._isAdminMethodVisible == Visibility.Visible) {
            this._isDoseVisible = Visibility.Collapsed;
          }
        }
      } else if (this.IsAdminMethodVisible == Visibility.Visible) {
        this._isDoseVisible = Visibility.Collapsed;
      } else {
        return this._isDoseVisible;
      }
    }
    return this._isDoseVisible;
  }
  public set IsDoseVisible(value: Visibility) {
    this._isDoseVisible = value;
    // super.NotifyPropertyChanged("IsDoseVisible");
  }
  public ModificationAction: string;
  public PopulateAction(sRsnModCode: string): void {
    switch (sRsnModCode) {
      case 'CC_MEDCOURLENCORR':
      case 'CC_MEDDOSCORR':
      case 'CC_MEDUOMCORR':
      case 'CC_FREQCORR':
      case 'CC_ROUTCORR':
      case 'CC_FORCORR':
      case 'CC_SUPPLY':
      case 'CC_CORRECTSTRTDAT':
      case 'CC_MEDSINDIADD':
      case 'CC_MEDSDURCOURAMEND':
      case 'CC_MEDREWDTADDORND':
      case 'CC_MEDSCONFLMEDS':
        this.ModificationAction = CConstants.Activity_Discontinue;
        break;
      case 'CC_PRESINERR':
      case 'CC_MEDWRNGDOSE':
      case 'CC_MEDWRNGFREQNCY':
      case 'CC_MEDENTEREDINERROR':
        this.ModificationAction = CConstants.Activity_Cancel;
        break;
      default:
        this.ModificationAction = CConstants.Activity_Discontinue;
        break;
    }
  }
  public get EndDTTM(): DateTime {
    return this._endDTTM;
  }
  public set EndDTTM(value: DateTime) {
    if (Helper.ReferenceEquals(this._endDTTM, value) != true) {
      this._endDTTM = value;
      // NotifyPropertyChanged("EndDTTM");
    }
  }
  public get DateCommenced(): string {
    return this._dateCommenced;
  }
  public set DateCommenced(value: string) {
    if (
      String.Compare(this.DateCommenced, 'CC_MONTH') == 0 ||
      String.Compare(this.DateCommenced, 'CC_YEAR') == 0
    )
      this.Partialdate = true;
    if (Helper.ReferenceEquals(this._dateCommenced, value) != true) {
      this._dateCommenced = value;
      // NotifyPropertyChanged("DateCommenced");
    }
  }
  public get BatchNumber(): string {
    return this._batchNumber;
  }
  public set BatchNumber(value: string) {
    if (value != this._batchNumber) {
      this._batchNumber = value;
      // super.NotifyPropertyChanged("BatchNo");
    }
  }
  public get Direction(): string {
    return this._direction;
  }
  public set Direction(value: string) {
    if (this._direction != value) {
      this._direction = value;
      // super.NotifyPropertyChanged("Direction");
    }
  }
  public get PRNInstruction(): CListItem {
    return this._prnInstruction;
  }
  public set PRNInstruction(value: CListItem) {
    if (this._prnInstruction != value) {
      if (!this.isFormViewDataLoaded) {
        this._prnInstruction = value;
      } else {
        this.SetCombovalue = false;
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (this.DefaultDetails != null)
          this._prnInstruction = this.GetComboPRNOrSiteValue(
            value,
            this.DefaultDetails.PRNInstructions,
            this.SetCombovalue
          );
        else this._prnInstruction = value;
      }
      //NotifyPropertyChanged("PRNInstruction");
    }
  }
  public get PRNInstructionFreeText(): string {
    return this._PRNInstructionFreeText;
  }
  public set PRNInstructionFreeText(value: string) {
    if (value != this._PRNInstructionFreeText) {
      if (!this.isFormViewDataLoaded) {
        this._PRNInstructionFreeText = value;
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('PRNInstructionFreeText')) {
          this.lstAmendedFlds.Add('PRNInstructionFreeText');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._PRNInstructionFreeText = value;
        if (String.IsNullOrEmpty(value) && this.PRNInstruction != null) {
          this.PRNInstruction = null;
        }
      }
      //super.NotifyPropertyChanged("PRNInstructionFreeText");
    }
  }
  public get IsPRNInstructionMandatory(): boolean {
    return this._isPRNInstructionMandatory;
  }
  public set IsPRNInstructionMandatory(value: boolean) {
    if (this._isPRNInstructionMandatory != value) {
      this._isPRNInstructionMandatory = value;
      //super.NotifyPropertyChanged("IsPRNInstructionMandatory");
    }
  }
  private CheckAndSetPRNInstFrequencyMandatory(): void {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BHasFormViewParams &&
      !(
        this.InfusionType != null &&
        String.Equals(
          this.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT,
          StringComparison.OrdinalIgnoreCase
        )
      )
    ) {
      //super.NotifyPropertyChanged("IsMandatoryFrequency");
    } else {
      if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking)
        this.IsMandatoryFrequency = true;
    }
    if (this._doseType != null) {
      if (
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.STEPPED,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.VARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        this.IsMandatoryFrequency = false;
      }
    }
    if (
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.oTempAdminScheduleTimes == null &&
      this.AsRequired &&
      this.DoseType != null &&
      !String.Equals(
        this.DoseType.Value,
        DoseTypeCode.TITRATED,
        StringComparison.OrdinalIgnoreCase
      )
    )
      this.SetAsRequiredState();
    if (this.AdminTimes != null) this.AdminTimes.UpdateMandatory();
  }
  private Setstartdatetimeforinterval(): void {
    let dtCurrentDate: DateTime = CommonBB.GetServerDateTime();
    if (
      this.SelectedFrequencyDetails != null &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      this.DoseType != null &&
      !String.Equals(
        this.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !String.Equals(
        this.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) &&
      (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
        this.IsClearlstAmendedFlds)
    ) {
      let isNonIVSubsequentSequenceItem: boolean = false;
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.ParentbaseVM != null &&
        this.SequenceInfo != null &&
        this.SequenceInfo.GroupSequenceNo > 0
      ) {
        isNonIVSubsequentSequenceItem =
          CommonSequentialHelper.IsSequeneSubsequentItem(this.oPrescitemVM);
      }
      if (
        String.Compare(this.SelectedFrequencyDetails.Type, 'CC_INTERVAL') ==
          0 &&
        !this._asRequired &&
        !isNonIVSubsequentSequenceItem
      ) {
        this.StartDTTM = this.StartPrescriptionTime = DateTime.MinValue;
        if (
          !String.IsNullOrEmpty(this.Duration) &&
          this.DurationUOM != null &&
          !String.IsNullOrEmpty(this.DurationUOM.Value)
        ) {
          this.StopDate = DateTime.MinValue;
          this.StopPrescriptionTime = DateTime.MinValue;
        }
      } else {
        if (DateTime.Equals(this.StartDTTM, DateTime.MinValue)) {
          this.StartDTTM = this.StartPrescriptionTime = dtCurrentDate;
        }
      }
    }
  }
  public get AdminMethod(): CListItem {
    return this._admMethod;
  }
  public set AdminMethod(value: CListItem) {
    if (this._admMethod != value) {
      if (!this.isFormViewDataLoaded) {
        this._admMethod = value;
        //super.NotifyPropertyChanged("AdminMethod");
      } else {
        this.ClearPrescribedQuantity();
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        this.oPrescitemVM.TechnicallyValidateMessage();
        this._admMethod = value;
        if (this.DefaultDetails != null)
          this._admMethod = this.GetComboValue(
            value,
            this.DefaultDetails.AdminMethods
          );
        else this._admMethod = value;
        if (!this.lstAmendedFlds.Contains('AdminMethod')) {
          this.lstAmendedFlds.Add('AdminMethod');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        //super.NotifyPropertyChanged("AdminMethod");
        if (
          this._admMethod != null &&
          !String.IsNullOrEmpty(this._admMethod.DisplayText) &&
          this.DefaultDetails != null &&
          this.DefaultDetails.AdminMethods != null &&
          !this.DefaultDetails.AdminMethods.Contains(this._admMethod)
        ) {
          this.DefaultDetails.AdminMethods.Add(this._admMethod);
        }
      }
    }
  }
  public get InstalmentInstructions(): ObservableCollection<CListItem> {
    return this.installInst;
  }
  public set InstalmentInstructions(value: ObservableCollection<CListItem>) {
    if (this.installInst != value) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('InstalmentInstructions')) {
        this.lstAmendedFlds.Add('InstalmentInstructions');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this.installInst = value;
      //super.NotifyPropertyChanged("InstalmentInstructions");
    }
  }
  public get IntervalBetweenInstallment(): number {
    return this.inetrBetInstall;
  }
  public set IntervalBetweenInstallment(value: number) {
    if (this.inetrBetInstall != value) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('IntervalBetweenInstallment')) {
        this.lstAmendedFlds.Add('IntervalBetweenInstallment');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this.inetrBetInstall = value;
      //super.NotifyPropertyChanged("IntervalBetweenInstallment");
    }
  }
  public get IntervalBetweenInstallmentUOM(): CListItem {
    return this._intervalBetweenInstallmentUOM;
  }
  public set IntervalBetweenInstallmentUOM(value: CListItem) {
    if (!Helper.ReferenceEquals(this._intervalBetweenInstallmentUOM, value)) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('IntervalBetweenInstallmentUOM')) {
        this.lstAmendedFlds.Add('IntervalBetweenInstallmentUOM');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      if (this.DefaultDetails != null)
        this._intervalBetweenInstallmentUOM = this.GetComboValue(
          value,
          this.DefaultDetails.IntervalInstalmentsUoM
        );
      else this._intervalBetweenInstallmentUOM = value;
      //NotifyPropertyChanged("IntervalBetweenInstallmentUOM");
    }
  }
  public get AdditionalComments(): string {
    return this._additionalComments;
  }
  public set AdditionalComments(value: string) {
    if (this._additionalComments != value) {
      if (this.isFormViewDataLoaded) {
        this.IsenableRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('AdditionalComments')) {
          this.lstAmendedFlds.Add('AdditionalComments');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
      }
      this._additionalComments = value;
      //super.NotifyPropertyChanged("AdditionalComments");
    }
  }
  public get OtherComments(): string {
    return this._otherComments;
  }
  public set OtherComments(value: string) {
    if (this._otherComments != value) {
      if (this.isFormViewDataLoaded) {
        this.IsenableRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('OtherComments')) {
          this.lstAmendedFlds.Add('OtherComments');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        if (!this.lstAmendedFlds.Contains('MedicationClerkingSource')) {
          this.lstAmendedFlds.Add('MedicationClerkingSource');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
      }
      this._otherComments = value;
      //super.NotifyPropertyChanged("OtherComments");
    }
  }
  public get GroupHeaderName(): string {
    return this._GroupHeaderName;
  }
  public set GroupHeaderName(value: string) {
    if (this._GroupHeaderName != value) {
      this._GroupHeaderName = value;
      //super.NotifyPropertyChanged("GroupHeaderName");
    }
  }
  public get LegalCategory(): string {
    return this.legalCategory;
  }
  public set LegalCategory(value: string) {
    if (this.legalCategory != value) {
      this.legalCategory = value;
      //super.NotifyPropertyChanged("LegalCategory");
    }
  }
  public get PrimaryInd(): string {
    return this.primaryInd;
  }
  public set PrimaryInd(value: string) {
    if (this.primaryInd != value) {
      this.primaryInd = value;
      //super.NotifyPropertyChanged("PrimaryInd");
    }
  }
  public get PrescriBy(): string {
    return this.prescriBy;
  }
  public set PrescriBy(value: string) {
    if (this.prescriBy != value) {
      this.prescriBy = value;
      //super.NotifyPropertyChanged("PrescriBy");
    }
  }
  public get StartDTTMText(): string {
    return this._startDTTMText;
  }
  public set StartDTTMText(value: string) {
    if (this._startDTTMText != value) {
      this._startDTTMText = value;
      //super.NotifyPropertyChanged("StartDTTMText");
    }
  }
  public StartDTTMDisplay(): string {
    let Months: string[] = [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ];
    let sDTTM: string = String.Empty;
    let StartDate: DateTime = this.StartDTTM;
    if (DateTime.Equals(StartDate.Date, DateTime.MinValue.Date))
      StartDate = this.CompleteStartDTTM;
    if (DateTime.Equals(StartDate.Date, DateTime.MinValue.Date) && !this.Partialdate)
      return String.Empty;
    else if (this.Completedate || this.Partialdate) {
      if (this.Completedate) {
        return StartDate.ToString(CConstants.ShortDateFormat);
      } else {
        let sStartDate: string = String.Empty;
        let MonthNo: number = 0;
        if (this.Month != null) {
          MonthNo = Convert.ToInt32(
            Enum.Parse(EnumVals, this.Month.Value, true)
          );
        }
        if (this.Year > 0) {
          if (MonthNo != 0)
            sStartDate = Months[MonthNo - 1] + '-' + this.Year.ToString();
          else sStartDate = this.Year.ToString();
        }
        return sStartDate;
      }
    } else if (
      String.Compare(
        this.DateCommenced,
        'CC_Month',
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
      String.Compare(
        this.DateCommenced,
        'CC_Year',
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
      String.Compare(
        this.DateCommenced,
        'CC_Complete',
        StringComparison.OrdinalIgnoreCase
      ) == 0
    ) {
      if (
        String.Compare(
          this.DateCommenced,
          'CC_Month',
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        return StartDate.ToString('MMM-yyyy');
      } else if (
        String.Compare(
          this.DateCommenced,
          'CC_Year',
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        return StartDate.ToString('yyyy');
      } else if (
        String.Compare(
          this.DateCommenced,
          'CC_Complete',
          StringComparison.OrdinalIgnoreCase
        ) == 0
      ) {
        return StartDate.ToString(CConstants.ShortDateFormat);
      } else return String.Empty;
    } else return StartDate.ToString(CConstants.ShortDateFormat);
  }
  public StartDTTM_DST_Display(): string {
    let sPresStartDTTM: string = String.Empty;
    if (DateTime.NotEquals(this.StartDTTM, DateTime.MinValue)) {
      let IsDST: boolean, IsAmbiguous, IsInvalid;
      sPresStartDTTM = this.StartDTTM.ConvertToUser(
        (o1) => {
          IsDST = o1;
        },
        (o2) => {
          IsAmbiguous = o2;
        },
        (o3) => {
          IsInvalid = o3;
        }
      ).ToDateTimeString(IsDST, IsAmbiguous, CConstants.DateHMFormat);
    }
    return sPresStartDTTM;
  }
  private _RangeStartDTTM: DateTime = DateTime.MinValue;
  public get RangeStartDTTM(): DateTime {
    return this._RangeStartDTTM;
  }
  public set RangeStartDTTM(value: DateTime) {
    if (this._RangeStartDTTM != value) {
      this._RangeStartDTTM = value;
      //super.NotifyPropertyChanged("RangeStartDTTM");
    }
  }
  private _RangeEndDTTM: DateTime = DateTime.MinValue;
  public get RangeEndDTTM(): DateTime {
    return this._RangeEndDTTM;
  }
  public set RangeEndDTTM(value: DateTime) {
    if (this._RangeEndDTTM != value) {
      this._RangeEndDTTM = value;
      //super.NotifyPropertyChanged("RangeEndDTTM");
    }
  }
  public _IsClerkingStartDTTMBlank: boolean = false;
  public get IsClerkingStartDTTMBlank(): boolean {
    return (
      this.bIsAmend &&
      PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
      this.DoseType != null &&
      !String.IsNullOrEmpty(this.DoseType.Value) &&
      String.Equals(this.DoseType.Value, DoseTypeCode.STEPPEDVARIABLE) &&
      this.MultiDoseDetails != null &&
      this.MultiDoseDetails.Count > 0 &&
      !this.Partialdate &&
      !this.Completedate
    );
  }
  public set IsClerkingStartDTTMBlank(value: boolean) {
    if (this._IsClerkingStartDTTMBlank != value) {
      this._IsClerkingStartDTTMBlank = value;
    }
  }
  public ResetDTTMForDoseType: boolean = false;
  public get StartDTTM(): DateTime {
    return this._startDTTM;
  }
  public set StartDTTM(value: DateTime) {
//revisit required
    value = value ? value : DateTime.MinValue;
    if (
      DateTime.NotEquals(this._startDTTM.DateTime,value.Date) ||
      this.ResetDTTMForDoseType
    ) {
      let IsLaunchFromDoseType: boolean = this.ResetDTTMForDoseType;
      this.ResetDTTMForDoseType = false;
      this.RouteChangeAmendStartDTM = false;
      if (!this.isFormViewDataLoaded) {
        this._startDTTM = value;
        if(this.IsClearlstAmendedFlds){
          this.IsChangeFromDurationOrStartDTTM = true;
         }
        this.StartDTTMText = this.StartDTTMDisplay();
        //super.NotifyPropertyChanged("StartDTTM");
      } else {
        if (!this.IsClerkingStartDTTMBlank) {
          this.IsenableRSNFORMOD = true;
          this.IsMandatoryRSNFORMOD = true;
          this.IsenableModificationcomments = true;
          if (!this.lstAmendedFlds.Contains('StartDTTM')) {
            this.lstAmendedFlds.Add('StartDTTM');
            if (
              this.bIsAmend &&
              !this.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.IsenableRSNFORMOD
            ) {
              this.DoChangesForAmend();
            }
          }
        }
        let PrevStartDateMindate: boolean = false;
        if (
          this._startDTTM == DateTime.MinValue &&
          value != DateTime.MinValue
        ) {
          PrevStartDateMindate = true;
        }
        this.ClearPrescribedQuantity();
        this._startDTTM = value;
        if(this.IsClearlstAmendedFlds){
          this.IsChangeFromDurationOrStartDTTM = true;
         }
        //super.NotifyPropertyChanged("StartDTTM");
        if (
          IsLaunchFromDoseType &&
          this._startDTTM.DateTime.Equals(value.Date)
        ) {
          this.SetStartTime(ControType.DoseType);
        } else {
          this.SetStartTime(ControType.StartDate);
        }
        this.SetStopDTTM();
        if (this.AdminTimes != null) {
          this.AdminTimes.StartDTTM = this._startDTTM.DateTime.AddMinutes(
            this._startPrescriptionTime.TimeOfDay.TotalMinutes
          );
          if (
            (ProfileData.ScheduleConfig == null ||
              (ProfileData.ScheduleConfig != null &&
                ProfileData.ScheduleConfig.AdminTimeReqforPRN) ||
              (ProfileData.ScheduleConfig != null &&
                !ProfileData.ScheduleConfig.AdminTimeReqforPRN &&
                !this.AdminTimes.AsRequired &&
                (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
                  this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
                  (this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
                    (!this.IsNoAdminTimeForPRN || !this.AsRequired))))) &&
            PrevStartDateMindate &&
            this.AdminTimes.AdministrationScheduleTimes != null &&
            this.AdminTimes.AdministrationScheduleTimes.Count == 0 &&
            !this.AdminTimes.bIsPRNFreq
          ) {
            this.AdminTimes.FillAdministrationTimes();
          }
          this.SetAdditionalOptionMessage();
        }
        if (
          !this.bIsAmend &&
          !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0 &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          if (
            (this.InfusionDetails != null &&
              this.InfusionType != null &&
              (String.Compare(
                this.InfusionType.Value,
                InfusionTypesCode.CONTINUOUS
              ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME
                ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.FLUID
                ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.PCA
                ) == 0)) ||
            (this.InfusionDetails != null &&
              this.itemSubType != null &&
              !String.IsNullOrEmpty(this.itemSubType) &&
              String.Compare(this.itemSubType, CConstants.SUBTYPE_GAS) == 0)
          ) {
            let dtStartDTTM: DateTime =
              this.StartDTTM != DateTime.MinValue
                ? this.StartDTTM.DateTime.AddTime(this.StartPrescriptionTime)
                : DateTime.MinValue;
            let dtCurrent: DateTime = CommonBB.GetServerDateTime();
            if (
              String.Compare(
                ContextInfo.MenuCode,
                CConstants.ClinicallyVerifyMenuCode
              ) != 0 &&
              dtStartDTTM >= dtCurrent &&
              dtStartDTTM.AddMinutes(
                -MedicationCommon.MedChartData.DuenessThreshold
              ) <= dtCurrent &&
              dtCurrent <=
                dtStartDTTM.AddMinutes(
                  MedicationCommon.MedChartData.DuenessThreshold
                ) &&
              this.InfusionDetails.SelectedSequenceName == null
            ) {
              this.DueNowScheduleDTTM = dtStartDTTM;
              this.RecordAdminMsg1 = String.Format(
                Resource.MedicationForm.RecordAdminDueNowMessage,
                dtStartDTTM.ToUserDateTimeString('HH:mm')
              );
              this.RecordAdminMsg1_Tooltip =
                Resource.MedicationForm.RecordAdminDueNowMessage_Tooltip;
              this.InfusionDetails.ContinousAddOptions =
                Resource.Infusion.Additionaloptions_Msg;
            }
          }
        }
        this.UpdateSteppedDoseAdminTimes();
        if (this.DoseType != null) {
          if (
            PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
            PatientContext.PrescriptionType !=
              PrescriptionTypes.ForAdministration &&
            this.DoseType != null &&
            this.oPrescitemVM.ActionCode != ActivityTypes.Amend &&
            String.Equals(
              this.DoseType.Value,
              DoseTypeCode.TITRATED,
              StringComparison.OrdinalIgnoreCase
            )
          ) {
            if (this.TitratedDoseDetails != null) {
              this.TitratedDoseDetails.CalculateDates(this._startDTTM, this);
            }
          }
          if (
            PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
            PatientContext.PrescriptionType !=
              PrescriptionTypes.ForAdministration &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
            this.DoseType != null &&
            !String.IsNullOrEmpty(this.DoseType.Value) &&
            String.Equals(
              this.DoseType.Value,
              DoseTypeCode.TITRATED,
              StringComparison.OrdinalIgnoreCase
            )
          ) {
            this.IsTitratedAmendStartDTTMChanged = true;
          } else {
            this.IsTitratedAmendStartDTTMChanged = false;
          }
        }
        if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.ReviewAfterVisible == Visibility.Visible &&
          this.ReviewAfterCalRequired &&
          this.oPrescitemVM != null &&
          this.ReviewafterUOM != null &&
          !String.IsNullOrEmpty(this.ReviewafterUOM.Value)
        ) {
          this.oPrescitemVM.GetReviewAfterDatetime();
        }
      }
    }
  }
  public UpdateStartEndDateForInPatSteppedDose(
    IsDaywiseViewEnabled: boolean,
    CanAddAdditionalDose: boolean,
    IsUpdateStepForSTAT: boolean,
    isSteppedDoseStartDTTMAlertShown: boolean = false
  ): void {
    if (
      DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
      this.MultiDoseDetails != null &&
      this.MultiDoseDetails.Count > 0
    ) {
      let nCount: number = 0;
      let nCountOnceonlyDoses: number = 0;
      nCountOnceonlyDoses = this.MultiDoseDetails.Where(
        (x) => x.IsAdditionalDose
      ).Count();
      while (nCount < this.MultiDoseDetails.Count) {
        if (!this.MultiDoseDetails[nCount].IsAdditionalDose) {
          {
            if (nCount == 0) {
              if (!this.IsAdditionalDoseOpted) {
                this.MultiDoseDetails[nCount].StartDTTM =
                  this.StartDTTM.DateTime.AddMinutes(
                    this.StartPrescriptionTime.TimeOfDay.TotalMinutes
                  );
              }
            } else {
              if (nCountOnceonlyDoses > 0 && nCount == nCountOnceonlyDoses) {
                if (this.IsAdditionalDoseOpted) {
                  let _IsMonthlyFrequency: boolean = false;
                  let sDurationUOM: string = String.Empty;
                  if (
                    this.MultiDoseDetails[nCount] != null &&
                    this.MultiDoseDetails[nCount].FreqDetails != null &&
                    this.MultiDoseDetails[nCount].FreqDetails.oFrequency !=
                      null &&
                    !String.IsNullOrEmpty(
                      this.MultiDoseDetails[nCount].FreqDetails.oFrequency.UOM
                    )
                  ) {
                    _IsMonthlyFrequency = String.Equals(
                      this.MultiDoseDetails[nCount].FreqDetails.oFrequency.UOM,
                      CConstants.UOMType3,
                      StringComparison.CurrentCultureIgnoreCase
                    );
                    if (this.MultiDoseDetails[nCount].DurationUOM != null) {
                      sDurationUOM =
                        this.MultiDoseDetails[nCount].DurationUOM.Value;
                    }
                  }
                  if (_IsMonthlyFrequency) {
                    let dtEndDttm: DateTime = DateTime.MinValue;
                    if (this.oPrescitemVM != null) {
                      dtEndDttm = this.oPrescitemVM.CalculateEndDTTM(
                        this.StartDTTM,
                        this.MultiDoseDetails[nCount].Duration,
                        sDurationUOM,
                        this.MultiDoseDetails[nCount]
                      );
                    }
                    if (
                      (DateTime.NotEquals(dtEndDttm, DateTime.MinValue )&&
                       DateTime.LessThanOrEqualTo( this.StartDTTM.DateTime.AddDays(
                          CConstants.NoOfDaysInMonth
                        ), dtEndDttm)) ||
                     DateTime.Equals( dtEndDttm, DateTime.MinValue)
                    ) {
                      this.MultiDoseDetails[nCount].StartDTTM =
                        this.StartDTTM.DateTime.AddDays(
                          CConstants.NoOfDaysInMonth
                        );
                    } else {
                      this.MultiDoseDetails[nCount].StartDTTM = this.StartDTTM;
                    }
                  } else {
                    this.MultiDoseDetails[nCount].StartDTTM =
                      this.StartDTTM.DateTime.AddDays(1);
                  }
                } else {
                  this.MultiDoseDetails[nCount].StartDTTM =
                    this.MultiDoseDetails[nCount - 1].EndDTTM.AddMinutes(1);
                }
              } else {
                this.MultiDoseDetails[nCount].StartDTTM =
                  this.MultiDoseDetails[nCount - 1].EndDTTM.AddMinutes(1);
                if (this.MultiDoseDetails[nCount].IsStartFromNextDay) {
                  let _TempPrevStepEndDTTM: DateTime,
                    _TempNewStepStartDTTM = DateTime.MinValue;
                  let _IsPartiallyCrossedStartDate: boolean,
                    _IsDayCrossedStartDate;
                  let _IsFixedTime: boolean = this.MultiDoseDetails[
                    nCount
                  ].SlotTimeMode && this.MultiDoseDetails[
                    nCount
                  ].SlotTimeMode.Equals('F')
                    ? true
                    : false;
                  _TempPrevStepEndDTTM =
                    this.MultiDoseDetails[nCount - 1].EndDTTM;
                  _TempNewStepStartDTTM = _TempPrevStepEndDTTM.AddMinutes(1);
                  if (
                    DateTime.Equals(_TempPrevStepEndDTTM.Date, _TempNewStepStartDTTM.Date) &&
                    this.IsAnyScheduleExistInLastDayOfStep(nCount - 1)
                  ) {
                    {
                      this.MultiDoseDetails[nCount].StartDTTM =
                        this.MultiDoseDetails[
                          nCount
                        ].StartDTTM.DateTime.AddDays(1);
                    }
                  }
                }
              }
            }
          }
          let currDuration: number = this.MultiDoseDetails[nCount].Duration;
          let currDurationType: string = String.Empty;
          if (this.MultiDoseDetails[nCount].DurationUOM != null) {
            currDurationType = this.MultiDoseDetails[nCount].DurationUOM.Value;
          }
          let StartDTTM: DateTime = DateTime.MinValue;
          let StopDTTM: DateTime = DateTime.MinValue;
          switch (currDurationType) {
            case 'CC_MINUTES':
              this.MultiDoseDetails[nCount].EndDTTM =
                this.MultiDoseDetails[nCount].StartDTTM.AddMinutes(
                  currDuration
                ).AddMinutes(-1);
              break;
            case 'CC_HOURS':
              this.MultiDoseDetails[nCount].EndDTTM =
                this.MultiDoseDetails[nCount].StartDTTM.AddHours(
                  currDuration
                ).AddMinutes(-1);
              break;
            case 'CC_MEDDRSN1':
              this.MultiDoseDetails[nCount].IsfixedTime = this.MultiDoseDetails[
                nCount
              ].SlotTimeMode && this.MultiDoseDetails[
                nCount
              ].SlotTimeMode.Equals('F')
                ? true
                : false;
              MCommonBB.CalculateEndDTTMForDaysDuration(
                this.MultiDoseDetails[nCount].AdminTimesData,
                this.MultiDoseDetails[nCount].StartDTTM,
                DateTime.MinValue,
                this.MultiDoseDetails[nCount].IsfixedTime,
                Convert.ToInt32(currDuration),
                (o1) => {
                  StartDTTM = o1;
                },
                (o2) => {
                  StopDTTM = o2;
                }
              );
              this.MultiDoseDetails[nCount].EndDTTM = StopDTTM;
              break;
            case 'CC_MEDDRSN2':
              this.MultiDoseDetails[nCount].EndDTTM = this.MultiDoseDetails[
                nCount
              ].StartDTTM.AddDays(currDuration * 7).AddMinutes(-1);
              break;
            case 'CC_MEDRSN3':
              this.MultiDoseDetails[nCount].EndDTTM = this.MultiDoseDetails[
                nCount
              ].StartDTTM.AddMonths(Convert.ToInt32(currDuration)).AddMinutes(
                -1
              );
              break;
            case 'CC_MEDRSN4':
              this.MultiDoseDetails[nCount].EndDTTM = this.MultiDoseDetails[
                nCount
              ].StartDTTM.AddYears(Convert.ToInt32(currDuration)).AddMinutes(
                -1
              );
              break;
            case 'CC_DOSES':
              this.MultiDoseDetails[nCount].EndDTTM =
                PrescriptionHelper.EndDTTMforDurationDose(
                  this.MultiDoseDetails[nCount],
                  null
                );
              break;
            default:
              this.MultiDoseDetails[nCount].EndDTTM = this.MultiDoseDetails[
                nCount
              ].StartDTTM.AddDays(3)
                .DateTime.AddHours(23)
                .AddMinutes(59)
                .AddSeconds(59);
              break;
          }
          if (
            isSteppedDoseStartDTTMAlertShown &&
            this.MultiDoseDetails[nCount].oAdminTimesVM == null &&
            this._bisAmend &&
            this.MultiDoseDetails[nCount].FreqDetails != null &&
            this.MultiDoseDetails[nCount].FreqDetails.oFrequency != null &&
            String.Equals(
              this.MultiDoseDetails[nCount].FreqDetails.oFrequency.Type,
              'CC_INTERVAL',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.MultiDoseDetails[nCount].oAdminTimesVM =
              new AdminstrativeTimesVM();
            if (
              this.MultiDoseDetails[nCount].FreqDetails != null &&
              this.MultiDoseDetails[nCount].FreqDetails.oFrequency != null
            ) {
              this.MultiDoseDetails[nCount].oAdminTimesVM.FrequencyLowEvent =
                this.MultiDoseDetails[nCount].FreqDetails.oFrequency.LowEvent;
            } else if (
              this.MultiDoseDetails[nCount].AdminTimesData != null &&
              this.MultiDoseDetails[nCount].AdminTimesData.Count > 0
            ) {
              this.MultiDoseDetails[nCount].oAdminTimesVM.FrequencyLowEvent =
                this.MultiDoseDetails[nCount].AdminTimesData[0].FreqLowEvent;
            }
            this.MultiDoseDetails[nCount].oAdminTimesVM.FreqDetails =
              this.MultiDoseDetails[nCount].FreqDetails;
          }
          if (
            this.MultiDoseDetails[nCount].oAdminTimesVM != null &&
            this.MultiDoseDetails[nCount].FreqDetails != null &&
            this.MultiDoseDetails[nCount].FreqDetails.oFrequency != null &&
            String.Equals(
              this.MultiDoseDetails[nCount].FreqDetails.oFrequency.Type,
              'CC_INTERVAL',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.MultiDoseDetails[nCount].oAdminTimesVM.dtStartDate =
              this.MultiDoseDetails[nCount].StartDTTM;
            this.MultiDoseDetails[nCount].oAdminTimesVM.dtEndDate =
              this.MultiDoseDetails[nCount].EndDTTM;
            this.MultiDoseDetails[nCount].oAdminTimesVM.FreqDetails =
              this.MultiDoseDetails[nCount].FreqDetails;
            if (this.MultiDoseDetails[nCount].AdminTimesData != null) {
              this.MultiDoseDetails[nCount].AdminTimesData.Clear();
            } else {
              this.MultiDoseDetails[nCount].AdminTimesData =
                new ObservableCollection<GrdAdminstrativeTimesCols>();
            }
            this.MultiDoseDetails[nCount].oAdminTimesVM.FillAdministrationTimes(
              true,
              this.MultiDoseDetails[nCount].AdminTimesData
            );
          }
          if (
            this.MultiDoseDetails[nCount] != null &&
            this.MultiDoseDetails[nCount].LowerDose > 0 &&
            this.MultiDoseDetails[nCount].DoseUOM != null &&
            DateTime.NotEquals(this.MultiDoseDetails[nCount].StartDTTM, DateTime.MinValue) &&
            DateTime.NotEquals(this.MultiDoseDetails[nCount].EndDTTM, DateTime.MinValue) &&
            this.MultiDoseDetails[nCount].AdminTimesData != null
          ) {
            this.MultiDoseDetails[nCount] = this.UpdateScheduleDetailsForInpat(
              this.MultiDoseDetails[nCount]
            );
          } else {
            if (
              this.MultiDoseDetails[nCount] != null &&
              this.MultiDoseDetails[nCount].ScheduleDetailsData != null
            ) {
              this.UpdateChangingDoseData(this.MultiDoseDetails[nCount]);
            }
          }
        }
        nCount++;
      }
      if (
        IsUpdateStepForSTAT &&
        this.MultiDoseDetails != null &&
        this.MultiDoseDetails.Count > 0 &&
        this.MultiDoseDetails[0] != null &&
        this.oPrescitemVM != null &&
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        !(
          PatientContext.ClerkFormViewDefaultBehavior ==
          ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) &&
        (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
      ) {
        this.SetAdditionalOptionMessage();
        this.SetAdditionalOptionMessageForSV(this.MultiDoseDetails[0]);
      }
    }
  }
  public IsAnyScheduleExistInLastDayOfStep(StepIndex: number): boolean {
    let bReturnValue: boolean = false;
    if (
      StepIndex > -1 &&
      this.MultiDoseDetails != null &&
      this.MultiDoseDetails.Count > 0 &&
      StepIndex <= this.MultiDoseDetails.Count - 1 &&
      DateTime.NotEquals(this.MultiDoseDetails[StepIndex].StartDTTM, DateTime.MinValue) &&
      DateTime.NotEquals(this.MultiDoseDetails[StepIndex].EndDTTM, DateTime.MinValue) &&
      this.MultiDoseDetails[StepIndex].SlotTimeMode != String.MinValue &&
      this.MultiDoseDetails[StepIndex].AdminTimesData != null &&
      this.MultiDoseDetails[StepIndex].AdminTimesData.Count > 0
    ) {
      let _IsFixedTime: boolean =
        this.MultiDoseDetails[StepIndex].SlotTimeMode && this.MultiDoseDetails[StepIndex].SlotTimeMode.Equals('F');
      let nAdminTimesCount: number =
        this.MultiDoseDetails[StepIndex].AdminTimesData.Count;
      let oIPPFrequency: IPPMAManagePrescSer.IPPFrequency =
        this.MultiDoseDetails[StepIndex].FreqDetails != null &&
        this.MultiDoseDetails[StepIndex].FreqDetails.oFrequency != null
          ? this.MultiDoseDetails[StepIndex].FreqDetails.oFrequency
          : null;
      let _StepEndDTTM: DateTime = this.MultiDoseDetails[StepIndex].EndDTTM;
      if (
        oIPPFrequency != null &&
        !String.IsNullOrEmpty(oIPPFrequency.UOM) &&
        String.Equals(
          oIPPFrequency.UOM,
          ConstDurationUOM.Months,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        let _tmpLastValidScheduleDate: DateTime =
          this.MultiDoseDetails[StepIndex].StartDTTM.Date;
        while (DateTime.LessThanOrEqualTo(_tmpLastValidScheduleDate, _StepEndDTTM)) {
          _tmpLastValidScheduleDate = _tmpLastValidScheduleDate.AddDays(
            CConstants.NoOfDaysInMonth
          );
        }
        if (DateTime.NotEquals(_tmpLastValidScheduleDate.Date, _StepEndDTTM.Date)) {
          return false;
        }
      }
      for (
        let nAdminTimeIdx: number = 0;
        nAdminTimeIdx < nAdminTimesCount;
        nAdminTimeIdx++
      ) {
        let sAdminTime: string = String.Empty;
        if (_IsFixedTime) {
          sAdminTime =
            this.MultiDoseDetails[StepIndex].AdminTimesData[nAdminTimeIdx]
              .FixedTimes;
        } else {
          sAdminTime =
            this.MultiDoseDetails[StepIndex].AdminTimesData[nAdminTimeIdx]
              .DruRoundTimes;
        }
        if (!String.IsNullOrEmpty(sAdminTime)) {
          let _tsAdminTime: TimeSpan;
          let _bResult: boolean = TimeSpan.TryParse(sAdminTime, (o) => {
            _tsAdminTime = o;
          });
          if (_bResult) {
            if (
              oIPPFrequency != null &&
              !String.IsNullOrEmpty(oIPPFrequency.UOM) &&
              String.Equals(
                oIPPFrequency.UOM,
                ConstDurationUOM.Weeks,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              _StepEndDTTM = _StepEndDTTM.DateTime.Add(_tsAdminTime);
              if (
                ((_StepEndDTTM.DayOfWeek == DayOfWeek.Sunday &&
                  oIPPFrequency.IsSunday) ||
                  (_StepEndDTTM.DayOfWeek == DayOfWeek.Monday &&
                    oIPPFrequency.IsMonday) ||
                  (_StepEndDTTM.DayOfWeek == DayOfWeek.Tuesday &&
                    oIPPFrequency.IsTuesday) ||
                  (_StepEndDTTM.DayOfWeek == DayOfWeek.Wednesday &&
                    oIPPFrequency.IsWednesday) ||
                  (_StepEndDTTM.DayOfWeek == DayOfWeek.Thursday &&
                    oIPPFrequency.IsThursday) ||
                  (_StepEndDTTM.DayOfWeek == DayOfWeek.Friday &&
                    oIPPFrequency.IsFriday) ||
                  (_StepEndDTTM.DayOfWeek == DayOfWeek.Saturday &&
                    oIPPFrequency.IsSaturday)) &&
               DateTime.LessThanOrEqualTo( _StepEndDTTM, this.MultiDoseDetails[StepIndex].EndDTTM)
              ) {
                bReturnValue = true;
                break;
              }
            } else if (
              _tsAdminTime <= this.MultiDoseDetails[StepIndex].EndDTTM.TimeOfDay
            ) {
              bReturnValue = true;
              break;
            }
          }
        }
      }
    }
    return bReturnValue;
  }
  public GetChangingDoseValues(objgrddata: MultipleDoseDetail): string[] {
    let sDoseValues: string[] = null;
    if (
      objgrddata != null &&
      objgrddata.IsDaywiseView &&
      objgrddata.ScheduleDetailsData != null &&
      objgrddata.ScheduleDetailsData.Count > 0 &&
      objgrddata.ScheduleDetailsData[0].ScheduleDoseValue != null &&
      objgrddata.ScheduleDetailsData[0].ScheduleDoseValue.Count() > 0
    ) {
      let nDays: number =
        objgrddata.ScheduleDetailsData[0].ScheduleDoseValue.Count();
      let nDoseCount: number =
        objgrddata.ScheduleDetailsData.Count *
        objgrddata.ScheduleDetailsData[0].ScheduleDoseValue.Count();
      sDoseValues = new Array(nDoseCount);
      let nNoOfDoses: number = 0;
      for (let i: number = 0; i < nDays; i++) {
        let nTimes: number = objgrddata.ScheduleDetailsData.Count;
        for (let j: number = 0; j < nTimes; j++) {
          if (
            !String.IsNullOrEmpty(
              objgrddata.ScheduleDetailsData[j].ScheduleDoseValue[i]
            )
          ) {
            sDoseValues[nNoOfDoses] =
              objgrddata.ScheduleDetailsData[j].ScheduleDoseValue[i];
            nNoOfDoses++;
          }
        }
      }
    }
    return sDoseValues;
  }
  private SetChangingDoseValues(
    sDoseValues: string[],
    objgrddata: MultipleDoseDetail,
    IsDaywiseViewEnabled: boolean
  ): void {
    if (
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      )
    ) {
      IsDaywiseViewEnabled = true;
    }
    if (
      IsDaywiseViewEnabled &&
      sDoseValues != null &&
      objgrddata != null &&
      objgrddata.IsDaywiseView &&
      objgrddata.ScheduleDetailsData != null &&
      objgrddata.ScheduleDetailsData.Count > 0 &&
      objgrddata.ScheduleDetailsData[0].ScheduleDoseValue != null &&
      objgrddata.ScheduleDetailsData[0].ScheduleDoseValue.Count() > 0
    ) {
      let nDays: number =
        objgrddata.ScheduleDetailsData[0].ScheduleDoseValue.Count();
      let nTotalNoOfDoses: number = sDoseValues.Count();
      let nNoOfDoses: number = 0;
      for (let i: number = 0; i < nDays; i++) {
        let nTimes: number = objgrddata.ScheduleDetailsData.Count;
        for (let j: number = 0; j < nTimes; j++) {
          let stempSchDate: DateTime =
            objgrddata.ScheduleDetailsData[j].ScheduleDate[i];
          if (
            DateTime.GreaterThanOrEqualTo(stempSchDate, objgrddata.StartDTTM) &&
            DateTime.LessThan(stempSchDate, objgrddata.EndDTTM) &&
            nNoOfDoses < nTotalNoOfDoses
          ) {
            objgrddata.ScheduleDetailsData[j].ScheduleDoseValue[i] =
              sDoseValues[nNoOfDoses];
            nNoOfDoses++;
          } else
            objgrddata.ScheduleDetailsData[j].ScheduleDoseValue[i] =
              String.Empty;
        }
      }
    }
  }
  private UpdateScheduleDetailsForInpat(
    objgrddata: MultipleDoseDetail
  ): MultipleDoseDetail {
    let oScheduleDetVM: ScheduleDetailsSteppedVM = null;
    let IsFixedTime: boolean = false;
    if (objgrddata.SlotTimeMode == 'F') IsFixedTime = true;
    if (
      objgrddata.AdminTimesData != null &&
      objgrddata.AdminTimesData.Count > 0 &&
      objgrddata.AdminTimesData[0] != null &&
      String.Compare(
        objgrddata.AdminTimesData[0].FrequencyType,
        'CC_INTERVAL',
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      let nLen: number = objgrddata.AdminTimesData.Count;
      let dtStartDttm: DateTime = objgrddata.StartDTTM;
      for (let i: number = 0; i < nLen; i++) {
        objgrddata.AdminTimesData[i].FixedTimes = dtStartDttm.ToString(
          CConstants.ShortDateFormat
        );
        objgrddata.AdminTimesData[i].DruRoundTimes = dtStartDttm.ToString(
          CConstants.TimeFormat
        );
        dtStartDttm = dtStartDttm.AddMinutes(
          objgrddata.AdminTimesData[i].LowPreiodInMinitus
        );
      }
      objgrddata.AdministrationTimes =
        objgrddata.AdminTimesData[0].FixedTimes +
        ' ' +
        objgrddata.AdminTimesData[0].DruRoundTimes +
        ' repeats ' +
        (objgrddata.Frequency != null
          ? objgrddata.Frequency.DisplayText
          : String.Empty);
    }
    return objgrddata;
  }
  public GetClerkingParialDate(): DateTime {
    let tempStartDatetime: DateTime = DateTime.MinValue;
    if (
      String.Equals(PatientContext.PrescriptionType, PrescriptionTypes.Clerking)
    ) {
      let dtCurrentDateTime: DateTime = CommonBB.GetServerDateTime();
      if (this.Partialdate) {
        let MonthNo: number = 1;
        let nYear: number = 0;
        if (this.Month != null && this.Year > 0) {
          MonthNo = Convert.ToInt32(
            Enum.Parse(typeof EnumMonthVals, this.Month.Value, true)
          );
          nYear = Convert.ToInt32(this.Year);
          tempStartDatetime = new DateTime(nYear, MonthNo, 1);
        } else if (this.Month != null) {
          MonthNo = Convert.ToInt32(
            Enum.Parse(typeof EnumMonthVals, this.Month.Value, true)
          );
          nYear = dtCurrentDateTime.Year;
          tempStartDatetime = new DateTime(nYear, MonthNo, 1);
        } else if (this.Year > 0) {
          nYear = Convert.ToInt32(this.Year);
          tempStartDatetime = new DateTime(nYear, MonthNo, 1);
        } else {
          tempStartDatetime = dtCurrentDateTime.Date;
        }
        if (
          DateTime.NotEquals(tempStartDatetime, DateTime.MinValue) &&
          tempStartDatetime.Year > CConstants.DateTimeMinYear &&
          this.ClerkSVRegimePartialDateUpdEvent != null
        ) {
          this.ClerkSVRegimePartialDateUpdEvent(tempStartDatetime);
        } else if (this.ClerkSVRegimePartialDateUpdEvent != null) {
          this.ClerkSVRegimePartialDateUpdEvent(dtCurrentDateTime.Date);
        }
      } else {
        tempStartDatetime = dtCurrentDateTime.Date;
      }
    }
    return tempStartDatetime;
  }
  public UpdateStartEndDateForNonInPatSteppedDose(
    IsDaywiseViewEnabled: boolean
  ): void {
    let dtBaseStartDTTM: DateTime = DateTime.MinValue;
    if (DateTime.NotEquals(this.StartDTTM, DateTime.MinValue)) {
      dtBaseStartDTTM = this.StartDTTM;
    } else {
      dtBaseStartDTTM = CommonBB.GetServerDateTime().Date;
    }
    if (DateTime.NotEquals(dtBaseStartDTTM, DateTime.MinValue)) {
      let nCount: number = 0;
      let sAllDoseValues: string[];
      while (nCount < this.MultiDoseDetails.Count) {
        if (nCount == 0) {
          this.MultiDoseDetails[nCount].StartDTTM = dtBaseStartDTTM;
        } else {
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
            !String.Equals(
              this.oPrescitemVM.SourcePrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            this.MultiDoseDetails[nCount - 1].IsAdditionalDose &&
            !this.MultiDoseDetails[nCount].IsAdditionalDose
          ) {
            this.MultiDoseDetails[nCount].StartDTTM =
              this.MultiDoseDetails[nCount - 1].EndDTTM.DateTime.AddDays(1);
          } else if (!this.MultiDoseDetails[nCount].IsAdditionalDose) {
            this.MultiDoseDetails[nCount].StartDTTM =
              this.MultiDoseDetails[nCount - 1].EndDTTM.AddMinutes(1);
          }
          sAllDoseValues = null;
        }
        let currDuration: number = this.MultiDoseDetails[nCount].Duration;
        let currDurationType: string = String.Empty;
        if (this.MultiDoseDetails[nCount].DurationUOM != null) {
          currDurationType = this.MultiDoseDetails[nCount].DurationUOM.Value;
        }
        let _StartDTTM: DateTime = DateTime.MinValue;
        let _StopDTTM: DateTime = DateTime.MinValue;
        switch (currDurationType) {
          case 'CC_MINUTES':
            this.MultiDoseDetails[nCount].EndDTTM =
              this.MultiDoseDetails[nCount].StartDTTM.AddMinutes(
                currDuration
              ).AddMinutes(-1);
            break;
          case 'CC_HOURS':
            this.MultiDoseDetails[nCount].EndDTTM =
              this.MultiDoseDetails[nCount].StartDTTM.AddHours(
                currDuration
              ).AddMinutes(-1);
            break;
          case 'CC_MEDDRSN1':
            this.MultiDoseDetails[nCount].IsfixedTime = this.MultiDoseDetails[
              nCount
            ].SlotTimeMode && this.MultiDoseDetails[
              nCount
            ].SlotTimeMode.Equals('F')
              ? true
              : false;
            MCommonBB.CalculateEndDTTMForDaysDuration(
              this.MultiDoseDetails[nCount].AdminTimesData,
              this.MultiDoseDetails[nCount].StartDTTM,
              DateTime.MinValue,
              this.MultiDoseDetails[nCount].IsfixedTime,
              Convert.ToInt32(currDuration),
              (o1) => {
                _StartDTTM = o1;
              },
              (o2) => {
                _StopDTTM = o2;
              }
            );
            this.MultiDoseDetails[nCount].EndDTTM = _StopDTTM;
            break;
          case 'CC_MEDDRSN2':
            this.MultiDoseDetails[nCount].EndDTTM = this.MultiDoseDetails[
              nCount
            ].StartDTTM.AddDays(currDuration * 7).AddMinutes(-1);
            break;
          case 'CC_MEDRSN3':
            this.MultiDoseDetails[nCount].EndDTTM = this.MultiDoseDetails[
              nCount
            ].StartDTTM.AddMonths(Convert.ToInt32(currDuration)).AddMinutes(-1);
            break;
          case 'CC_MEDRSN4':
            this.MultiDoseDetails[nCount].EndDTTM = this.MultiDoseDetails[
              nCount
            ].StartDTTM.AddYears(Convert.ToInt32(currDuration)).AddMinutes(-1);
            break;
          case 'CC_DOSES':
            this.MultiDoseDetails[nCount].EndDTTM =
              PrescriptionHelper.EndDTTMforDurationDose(
                this.MultiDoseDetails[nCount],
                null
              );
            break;
        }
        if (
          this.MultiDoseDetails[nCount] != null &&
          this.MultiDoseDetails[nCount].Duration > 0 &&
          this.MultiDoseDetails[nCount].LowerDose > 0 &&
          this.MultiDoseDetails[nCount].DoseUOM != null &&
         DateTime.NotEquals(this.MultiDoseDetails[nCount].StartDTTM, DateTime.MinValue) &&
          DateTime.NotEquals(this.MultiDoseDetails[nCount].EndDTTM, DateTime.MinValue) &&
          this.MultiDoseDetails[nCount].AdminTimesData != null
        ) {
          this.MultiDoseDetails[nCount] = this.UpdateScheduleDetailsForNonInPat(
            this.MultiDoseDetails[nCount]
          );
        } else {
          if (
            this.MultiDoseDetails[nCount] != null &&
            this.MultiDoseDetails[nCount].ScheduleDetailsData != null
          ) {
            this.UpdateChangingDoseData(this.MultiDoseDetails[nCount]);
          }
        }
        nCount++;
      }
    }
  }
  private UpdateChangingDoseData(objgrddata: MultipleDoseDetail): void {
    let oScheduleDetVM: ScheduleDetailsSteppedVM = ObjectHelper.CreateObject(
      new ScheduleDetailsSteppedVM(),
      {
        DoseUOM:
          objgrddata.DoseUOM != null &&
          !String.IsNullOrEmpty(objgrddata.DoseUOM.DisplayText)
            ? objgrddata.DoseUOM.DisplayText
            : String.Empty,
        StartDate: objgrddata.StartDTTM,
        EndDate: objgrddata.EndDTTM,
        FreqDetails: objgrddata.FreqDetails,
        DurationValue: objgrddata.Duration,
        DurationUOM:
          objgrddata.DurationUOM != null &&
          !String.IsNullOrEmpty(objgrddata.DurationUOM.Value)
            ? objgrddata.DurationUOM.Value
            : String.Empty,
        IsDaywiseView: objgrddata.IsDaywiseView,
        PresType: PatientContext.PrescriptionType,
        AdminTimeGrdData: objgrddata.AdminTimesData,
        IsFixedTime: objgrddata.IsfixedTime
          ? true
          : objgrddata.SlotTimeMode && objgrddata.SlotTimeMode.Equals('F'),
        ActionCode:
          this.oPrescitemVM != null
            ? this.oPrescitemVM.ActionCode.ToString()
            : String.Empty,
      }
    );
    if (
      objgrddata.ScheduleDetailsData != null &&
      objgrddata.ScheduleDetailsData.Count > 0
    ) {
      oScheduleDetVM.ReassignDosesForStartDTTMChange(
        objgrddata.ScheduleDetailsData,
        objgrddata.LstOriginalDoseValues
      );
      objgrddata.ScheduleDetailsData =
        new ObservableCollection<ScheduleDetailsCols>(
          oScheduleDetVM.GrdData.AsEnumerable()
        );
    }
  }
  private UpdateScheduleDetailsForNonInPat(
    objgrddata: MultipleDoseDetail
  ): MultipleDoseDetail {
    let oScheduleDetVM: ScheduleDetailsSteppedVM = ObjectHelper.CreateObject(
      new ScheduleDetailsSteppedVM(),
      {
        DoseValue: objgrddata.LowerDose.ToString(),
        DoseUOM: objgrddata.DoseUOM.DisplayText,
        StartDate: objgrddata.StartDTTM.Date,
        EndDate: objgrddata.EndDTTM,
        FreqDetails: objgrddata.FreqDetails,
      }
    );
    if (
      objgrddata.ScheduleDetailsData != null &&
      objgrddata.ScheduleDetailsData.Count > 0
    ) {
      oScheduleDetVM.ReassignDosesForStartDTTMChange(
        objgrddata.ScheduleDetailsData,
        objgrddata.LstOriginalDoseValues
      );
      objgrddata.ScheduleDetailsData =
        new ObservableCollection<ScheduleDetailsCols>(
          oScheduleDetVM.GrdData.AsEnumerable()
        );
    }
    return objgrddata;
  }
  public get FollowUpStatStartDTTM(): DateTime {
    return this._followUpStatStartDTTM;
  }
  public set FollowUpStatStartDTTM(value: DateTime) {
    if (this._followUpStatStartDTTM != value) {
      this._followUpStatStartDTTM = value;
      //NotifyPropertyChanged("FollowUpStatStartDTTM");
    }
  }
  public get Firstscheduledatetime(): DateTime {
    return this._firstscheduledatetime;
  }
  public set Firstscheduledatetime(value: DateTime) {
    if (this._firstscheduledatetime != value) {
      this._firstscheduledatetime = value;
      //NotifyPropertyChanged("Firstscheduledatetime");
    }
  }
  public get FollowUpStatFirstAdmnSchTime(): DateTime {
    return this._followUpStatFirstAdmnSchTime;
  }
  public set FollowUpStatFirstAdmnSchTime(value: DateTime) {
    if (this._followUpStatFirstAdmnSchTime != value) {
      this._followUpStatFirstAdmnSchTime = value;
      //NotifyPropertyChanged("FollowUpStatFirstAdmnSchTime");
    }
  }
  private _orginalEndDTTM: DateTime = DateTime.MinValue;
  public get OrginalEndDTTM(): DateTime {
    return this._orginalEndDTTM;
  }
  public set OrginalEndDTTM(value: DateTime) {
    this._orginalEndDTTM = value;
  }
  private _orginalStartDTTM: DateTime = DateTime.MinValue;
  public get OrginalStartDTTM(): DateTime {
    return this._orginalStartDTTM;
  }
  public set OrginalStartDTTM(value: DateTime) {
    this._orginalStartDTTM = value;
  }
  private _AmendorginalStartDTTM: DateTime = DateTime.MinValue;
  public get AmendOrginalStartDTTM(): DateTime {
    return this._AmendorginalStartDTTM;
  }
  public set AmendOrginalStartDTTM(value: DateTime) {
    this._AmendorginalStartDTTM = value;
  }
  private _isEnableStartTime: boolean = true;
  public get IsEnableStartTime(): boolean {
    return this._isEnableStartTime && this.IsNotInPatientSteppedVariableAmend;
  }
  public set IsEnableStartTime(value: boolean) {
    if (this._isEnableStartTime != value) {
      this._isEnableStartTime = value;
      //NotifyPropertyChanged("IsEnableStartTime");
    }
  }
  private _isFollowUpStat: boolean = false;
  public get IsFollowUpStat(): boolean {
    return this._isFollowUpStat;
  }
  public set IsFollowUpStat(value: boolean) {
    this._isFollowUpStat = value;
    let _Stat: string = 'FRC-003';
    if (!String.IsNullOrEmpty(Common.Frc003Childs)) _Stat = Common.Frc003Childs;
    let IsSteppedDoseType: boolean =
      this.DoseType != null &&
      !String.IsNullOrEmpty(this.DoseType.Value) &&
      String.Equals(
        this.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.InvariantCultureIgnoreCase
      );
      
    if (
      IsSteppedDoseType || (typeof(this.Frequency) != "undefined" && this.Frequency != null
      && typeof(this.Frequency.Tag) != "undefined" && this.Frequency.Tag != null 
        && this.Frequency?.Tag?.length <= 2 || this.Frequency?.Tag?.length > 2 
        && !_Stat.Contains(this.Frequency?.Tag[2]))      
    )
      this.IsRecordAdminEnabled = value ? false : true;
    //NotifyPropertyChanged("IsFollowUpStat");
  }
  private _IsRecordAdminEnabled: boolean = true;
  public get IsRecordAdminEnabled(): boolean {
    return (
      this._IsRecordAdminEnabled &&
      (this.IsNotInPatientSteppedVariableAmend ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
    );
  }
  public set IsRecordAdminEnabled(value: boolean) {
    this._IsRecordAdminEnabled = value;
    //NotifyPropertyChanged("IsRecordAdminEnabled");
  }
  private _IsFollowUpStatEnabled: boolean = true;
  public get IsFollowUpStatEnabled(): boolean {
    return (
      this._IsFollowUpStatEnabled &&
      (this.IsNotInPatientSteppedVariableAmend ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
    );
  }
  public set IsFollowUpStatEnabled(value: boolean) {
    this._IsFollowUpStatEnabled = value;
    //NotifyPropertyChanged("IsFollowUpStatEnabled");
  }
  private _statForeground: SolidColorBrush = new SolidColorBrush(Colors.Black);
  public get StatForeground(): SolidColorBrush {
    return this._statForeground;
  }
  public set StatForeground(value: SolidColorBrush) {
    this._statForeground = value;
    //NotifyPropertyChanged("StatForeground");
  }
  private SetStartTime(ControlType: string): void {
    this.IsEnableStartTime = true;
    let IsSubsequentSequenceItem: boolean =
      CommonSequentialHelper.IsSequeneSubsequentItem(this.oPrescitemVM);
    if (
      !IsSubsequentSequenceItem &&
      this != null &&
      this.SelectedFrequencyDetails != null &&
      String.Compare(
        this.SelectedFrequencyDetails.UOM,
        CConstants.OnceOnlyFrequency
      ) == 0 &&
      String.Compare(
        this.SelectedFrequencyDetails.Type,
        'CC_PERIOD',
        StringComparison.InvariantCultureIgnoreCase
      ) == 0 &&
      this._isClearlstAmendedFlds
    ) {
      let dtCurrent: DateTime = CommonBB.GetServerDateTime();
      if (DateTime.GreaterThan(this._startDTTM.Date, dtCurrent.Date)) {
        this.StartPrescriptionTime = this._startDTTM.Date;
        this.IsEnableStartTime = true;
      } else if (DateTime.LessThan(this._startDTTM.Date, dtCurrent.Date)) {
        this.StartPrescriptionTime = dtCurrent;
        this.IsEnableStartTime = true;
      } else if (DateTime.Equals(this._startDTTM.Date, dtCurrent.Date)) {
        this.StartPrescriptionTime = dtCurrent;
        this.IsEnableStartTime = true;
      }
    } else {
      if (DateTime.NotEquals(this._startDTTM.Date, DateTime.MinValue)) {
        if (
          DateTime.Equals(this._startPrescriptionTime, DateTime.MinValue) &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder
        ) {
          this._startPrescriptionTime = this._startDTTM;
        }
        let IsGetPresItemDetailsloading: boolean = false;
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
          this.IsRecordedMedication &&
          PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
          this.IsGetPresItemSVDoseType
        ) {
          IsGetPresItemDetailsloading = true;
          if (DateTime.NotEquals(this._startPrescriptionTime, DateTime.MinValue)) {
            this.StartPrescriptionTime = this._startDTTM.DateTime.AddTime(
              this._startPrescriptionTime
            );
          }
        }
        if (!IsGetPresItemDetailsloading) {
          if (
            DateTime.Equals(this.StartDateOnLaunch, DateTime.MinValue) &&
            DateTime.NotEquals(this.StartPrescriptionTime, DateTime.MinValue)
          ) {
            this.StartDateOnLaunch = this.StartPrescriptionTime;
          }
          if (
            String.Equals(
              ControlType,
              ControType.StartDate,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            let dtCurrent: DateTime = CommonBB.GetServerDateTime();
            if (
              DateTime.NotEquals(this.StartDTTM.Date, PatientContext.EncounterStartDate.Date) &&
              DateTime.NotEquals(PatientContext.EncounterStartDate.Date, DateTime.MinValue)
            ) {
              if (
                this.oPrescitemVM != null &&
                this.oPrescitemVM.FormViewerDetails != null &&
                this.oPrescitemVM.FormViewerDetails.BasicDetails != null
              ) {
                if (
                  this.oPrescitemVM.ActionCode != ActivityTypes.Amend ||
                  (this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
                    (DateTime.NotEquals(this.StartDTTM.Date, this.StartDateOnLaunch.Date) ||
                      !this.TimeMinValueFlag) &&
                    DateTime.NotEquals(this.StartDateOnLaunch, DateTime.MinValue) &&
                    DateTime.NotEquals(this._startDTTM.Date, DateTime.MinValue.Date))
                ) {
                  if (
                    DateTime.GreaterThan(this._startDTTM.Date, dtCurrent.Date) ||
                    DateTime.LessThan(this._startDTTM.Date, dtCurrent.Date)
                  ) {
                    this.StartPrescriptionTime = DateTime.MinValue;
                  } else if (DateTime.Equals(this._startDTTM.Date, dtCurrent.Date)) {
                    this.StartPrescriptionTime = this.StartDTTM = dtCurrent;
                  }
                }
              }
            } else if (
              DateTime.Equals(PatientContext.EncounterStartDate.Date, this.StartDTTM.Date) &&
              DateTime.NotEquals(PatientContext.EncounterStartDate.Date, DateTime.MinValue) &&
              DateTime.NotEquals(this.StartDTTM.Date, DateTime.MinValue.Date) &&
              DateTime.NotEquals(this.StartDateOnLaunch, DateTime.MinValue) &&
              (DateTime.NotEquals(this.StartDTTM.Date, this.StartDateOnLaunch.Date) ||
                !this.TimeMinValueFlag)
            ) {
              if (DateTime.NotEquals(this.StartDTTM.Date, dtCurrent.Date)) {
                if (
                  DateTime.NotEquals(PatientContext.EncounterStartDateTime, DateTime.MinValue) &&
                  (DateTime.NotEquals(this.StartDateOnLaunch.Date,
                    PatientContext.EncounterStartDate.Date) ||
                    !this.TimeMinValueFlag)
                ) {
                  if(PatientContext.EncounterStartDateTime!=undefined )
                  {
                    this.StartPrescriptionTime =
                    PatientContext.EncounterStartDateTime;
                  }
                } else if (
                  DateTime.NotEquals(PatientContext.EncounterStartDate, DateTime.MinValue) &&
                  (DateTime.NotEquals(this.StartDateOnLaunch.Date,
                    PatientContext.EncounterStartDate.Date)||
                    !this.TimeMinValueFlag)
                ) {
                  this.StartPrescriptionTime =
                    PatientContext.EncounterStartDate;
                }
              } else if (DateTime.Equals(this.StartDTTM.Date, dtCurrent.Date)) {
                this.StartPrescriptionTime = dtCurrent;
              }
            }
            if (
              this.Frequency != null &&
              this.Frequency.Tag != null &&
              !this.TimeMinValueFlag
            ) {
              let FreqTag: Array<string> = ObjectHelper.CreateType<
                Array<string>
              >(this.Frequency.Tag, Array<string>);
              if (FreqTag != null && FreqTag.length > 0) {
                if (
                  FreqTag.Any((x) =>
                    String.Equals(
                      x,
                      CConstants.IntervalFreq,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) &&
                  !FreqTag.Any((x) =>
                    String.Equals(
                      x,
                      'CC_IPONCENLY',
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ) &&
                  !this._asRequired
                ) {
                  this.StartPrescriptionTime = DateTime.MinValue;
                }
              }
            }
          }      
          this.StartPrescriptionTime = this._startDTTM.DateTime.AddTime(
            this._startPrescriptionTime
          );
        }
      }
    }
  }
  AdminTimes_SlotModeChanged(): void {
    this.SetAdditionalOptionMessage();
  }
  public SetAdditionalOptionMessage(): void {
    if (
      !(
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      ) &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      this.oPrescitemVM != null &&
      this.oPrescitemVM.ActionCode != ActivityTypes.Amend
    ) {
      if (this.AdminTimes == null) return;
      if(this.RecordAdmin != null && !this.RecordAdmin.TabVisited)
      this.RecordAdminMsg1 = String.Empty;
      if (this.StartDTTM.Year <= CConstants.DateTimeMinYear) return;
      let sDoseType: string =
        this._doseType != null ? this._doseType.Value : String.Empty;
      if (
        !String.Equals(
          sDoseType,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.StatForeground = new SolidColorBrush(Colors.Black);
      }
      if (
        PatientContext.IsINFUSIONON &&
        this.InfusionDetails != null &&
        !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration
        ) == 0 &&
        this.oPrescitemVM != null &&
        (this.oPrescitemVM.ActionCode as ActivityTypes) !=
          ActivityTypes.Amend &&
        ((this.InfusionType != null &&
          !String.IsNullOrEmpty(this.InfusionType.Value) &&
          (String.Compare(
            this.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS
          ) == 0 ||
            String.Compare(
              this.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) == 0 ||
            String.Compare(this.InfusionType.Value, InfusionTypesCode.FLUID) ==
              0 ||
            String.Compare(this.InfusionType.Value, InfusionTypesCode.PCA) ==
              0)) ||
          String.Compare(this.itemSubType, CConstants.SUBTYPE_GAS) == 0)
      ) {
        let dtStartDTTM: DateTime =
          DateTime.NotEquals(this.StartDTTM, DateTime.MinValue)
            ? this.StartDTTM.DateTime.AddTime(this.StartPrescriptionTime)
            : DateTime.MinValue;
        let dtCurrent: DateTime = CommonBB.GetServerDateTime();
        if (
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode
          ) != 0 &&
        DateTime.LessThanOrEqualTo(dtStartDTTM.AddMinutes(
            -MedicationCommon.MedChartData.DuenessThreshold
          ), dtCurrent) &&
          DateTime.LessThanOrEqualTo(dtCurrent,
            dtStartDTTM.AddMinutes(
              MedicationCommon.MedChartData.DuenessThreshold
            )) &&
          this.InfusionDetails.SelectedSequenceName == null
        ) {
          this.DueNowScheduleDTTM = dtStartDTTM;
          this.RecordAdminMsg1 = String.Format(
            Resource.MedicationForm.RecordAdminDueNowMessage,
            dtStartDTTM.ToUserDateTimeString('HH:mm')
          );
          this.RecordAdminMsg1_Tooltip =
            Resource.MedicationForm.RecordAdminDueNowMessage_Tooltip;
          this.InfusionDetails.ContinousAddOptions =
            Resource.Infusion.Additionaloptions_Msg;
        }
      } else if (
        String.Compare(sDoseType, DoseTypeCode.STEPPEDVARIABLE) == 0 ||
        String.Compare(sDoseType, DoseTypeCode.STEPPED) == 0 ||
        String.Compare(sDoseType, DoseTypeCode.VARIABLE) == 0
      ) {
        if (
          String.Compare(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode
          ) != 0 &&
          this.MultiDoseDetails != null &&
          this.MultiDoseDetails.Count > 0
        ) {
          let sTime: string = String.Empty;
          let dtDueNowDTTM: DateTime = DateTime.MinValue;
          if (
            PrescriptionHelper.CheckIsDueNow(
              this,
              undefined,
              (o1) => {
                sTime = o1;
              },
              (o2) => {
                dtDueNowDTTM = o2;
              }
            )
          ) {
            this.DueNowScheduleDTTM = dtDueNowDTTM;
            this.RecordAdminMsg1 = String.Format(
              Resource.MedicationForm.RecordAdminDueNowMessage,
              sTime
            );
            this.RecordAdminMsg1_Tooltip =
              Resource.MedicationForm.RecordAdminDueNowMessage_Tooltip;
            this.InfusionDetails.ContinousAddOptions =
              Resource.Infusion.Additionaloptions_Msg;
          }
        }
      } else if (
        !this._asRequired &&
        this.Frequency != null &&
        this.SelectedFrequencyDetails != null &&
        !String.IsNullOrEmpty(this.SelectedFrequencyDetails.Type) &&
        this.AdminTimes.AdministrationScheduleTimes != null &&
        this.AdminTimes.AdministrationScheduleTimes.Count > 0
      ) {
        this.FollowUpStatMessage = String.Empty;
        this.RecordAdminMsg1 = String.Empty;
        this.FollowUpOrStat = '\0';
        let sFreqType: string = this.SelectedFrequencyDetails.Type;
        let sFreqUOM: string = this.SelectedFrequencyDetails.UOM;
        let nAdminCnt: number =
          this.AdminTimes.AdministrationScheduleTimes.Count;
        let dtStartDTTM: DateTime = DateTime.MinValue;
        if (
          DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
          DateTime.NotEquals(this.StartPrescriptionTime, DateTime.MinValue)
        ) {
          dtStartDTTM = this.StartDTTM.DateTime.AddTime(
            this.StartPrescriptionTime
          );
        } else if (DateTime.NotEquals(this.StartDTTM, DateTime.MinValue)) {
          dtStartDTTM = this.StartDTTM;
        }
        let dtCurrent: DateTime = CommonBB.GetServerDateTime();
        dtCurrent = dtCurrent.DateTime.AddTime(dtCurrent);
        let dtSchDTTM: DateTime = DateTime.MinValue;
        let dtOldSchDTTM: DateTime = DateTime.MinValue;
        if (String.Compare(sFreqType, 'CC_PERIOD') == 0) {
          let dtEndDTTM: DateTime = this.EndDTTM;
          let tmpStartDTTM: DateTime = DateTime.MinValue;
          let tmpEndDTTM: DateTime = DateTime.MinValue;
          let arrDaysOfWeek: string[] = null;
          if (
            String.Equals(
              sFreqUOM,
              'CC_MEDDRSN2',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            if (this.AdminTimes != null) {
              if (DateTime.NotEquals(this.AdminTimes.StartDTTM, DateTime.MinValue)) {
                dtEndDTTM = this.AdminTimes.StopDTTM;
              }
            }
            tmpStartDTTM = dtStartDTTM;
            tmpEndDTTM = dtStartDTTM
              .AddDays(6)
              .DateTime.AddHours(23)
              .AddMinutes(59);
            if (DateTime.LessThan(tmpStartDTTM.Date, dtCurrent.Date)) {
              let CurrDatePlus6: DateTime = dtCurrent.DateTime.AddDays(6)
                .DateTime.AddHours(23)
                .AddMinutes(59);
              if (
                DateTime.Equals(dtEndDTTM, DateTime.MinValue) ||
                DateTime.GreaterThan(dtEndDTTM.Date, CurrDatePlus6.Date)
              )
                tmpEndDTTM = CurrDatePlus6;
              else if (
                DateTime.NotEquals(dtEndDTTM, DateTime.MinValue) &&
                DateTime.LessThanOrEqualTo(dtEndDTTM.Date, CurrDatePlus6.Date)
              )
                tmpEndDTTM = dtEndDTTM;
            }
            arrDaysOfWeek = new Array(7);
            if (this.AdminTimes.DaysOfWeekVisibility == Visibility.Visible) {
              arrDaysOfWeek[0] = this.AdminTimes.IsSun.ToString();
              arrDaysOfWeek[1] = this.AdminTimes.IsMon.ToString();
              arrDaysOfWeek[2] = this.AdminTimes.IsTue.ToString();
              arrDaysOfWeek[3] = this.AdminTimes.IsWed.ToString();
              arrDaysOfWeek[4] = this.AdminTimes.IsThu.ToString();
              arrDaysOfWeek[5] = this.AdminTimes.IsFri.ToString();
              arrDaysOfWeek[6] = this.AdminTimes.IsSat.ToString();
            }
          }
          let diffTime: TimeSpan;
          for (let i: number = 0; i < nAdminCnt; i++) {
            let FirstDateOfWeek: DateTime = DateTime.MinValue;
            if (
              String.Equals(
                sFreqUOM,
                'CC_MEDDRSN2',
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              FirstDateOfWeek = PrescriptionHelper.GetFirstDateOfweek(
                tmpStartDTTM,
                tmpEndDTTM,
                arrDaysOfWeek
              );
              if (DateTime.Equals(FirstDateOfWeek, DateTime.MinValue)) {
                tmpStartDTTM = tmpStartDTTM.AddDays(1);
                continue;
              }
              dtSchDTTM = this.AdminTimes.IsFixedTime
                ? FirstDateOfWeek.DateTime.AddTime(
                    this.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM
                  )
                : FirstDateOfWeek.DateTime.AddTime(
                    this.AdminTimes.AdministrationScheduleTimes[i].DrugroundDTTM
                  );
              dtOldSchDTTM = this.AdminTimes.IsFixedTime
                ? FirstDateOfWeek.DateTime.AddTime(
                    this.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM
                  )
                : FirstDateOfWeek.DateTime.AddTime(
                    this.AdminTimes.AdministrationScheduleTimes[i].DrugroundDTTM
                  );
            } else {
              dtSchDTTM = this.AdminTimes.IsFixedTime
                ? this.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM
                : this.AdminTimes.AdministrationScheduleTimes[i].DrugroundDTTM;
              dtOldSchDTTM = this.AdminTimes.IsFixedTime
                ? this.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM
                : this.AdminTimes.AdministrationScheduleTimes[i].DrugroundDTTM;
            }
            let isValid: boolean = false;
            for (let j: number = 0; j < nAdminCnt; j++) {
              let dtSchDateTime: DateTime = DateTime.MinValue;
              if (
                String.Equals(
                  sFreqUOM,
                  'CC_MEDDRSN2',
                  StringComparison.CurrentCultureIgnoreCase
                )
              ) {
                dtSchDateTime = this.AdminTimes.IsFixedTime
                  ? FirstDateOfWeek.DateTime.AddTime(
                      this.AdminTimes.AdministrationScheduleTimes[j]
                        .ScheduleDTTM
                    )
                  : FirstDateOfWeek.DateTime.AddTime(
                      this.AdminTimes.AdministrationScheduleTimes[j]
                        .DrugroundDTTM
                    );
              } else {
                dtSchDateTime = this.AdminTimes.IsFixedTime
                  ? this.AdminTimes.AdministrationScheduleTimes[j].ScheduleDTTM
                  : this.AdminTimes.AdministrationScheduleTimes[j]
                      .DrugroundDTTM;
              }
              if (
                DateTime.GreaterThanOrEqualTo(dtSchDateTime.Date.AddHours(dtSchDateTime.Hour).AddMinutes(
                  dtSchDateTime.Minute
                ),
                dtStartDTTM.Date.AddHours(dtStartDTTM.Hour).AddMinutes(
                  dtStartDTTM.Minute
                ))
              ) {
                if (DateTime.LessThan(dtSchDateTime, dtOldSchDTTM)) {
                  dtOldSchDTTM = dtSchDateTime;
                }
                isValid = true;
              }
            }
            dtSchDTTM = dtOldSchDTTM;
            if (!isValid) dtSchDTTM = dtSchDTTM.AddDays(1);
            diffTime = dtSchDTTM
              .ToUniversalTime()
              .Subtract(dtCurrent.ToUniversalTime());
            let IsONCEONLY: boolean =
              this.Frequency != null &&
              this.Frequency.Tag != null &&
              this.Frequency.Tag instanceof Array &&
              ObjectHelper.CreateType<string[]>(
                this.Frequency.Tag,
                Array<string>
              ).length > 1 &&
              String.Equals(
                ObjectHelper.CreateType<string[]>(
                  this.Frequency.Tag,
                  Array<string>
                )[1],
                CConstants.OnceOnlyFrequency,
                StringComparison.CurrentCultureIgnoreCase
              );
            if (
              String.Compare(
                ContextInfo.MenuCode,
                CConstants.ClinicallyVerifyMenuCode
              ) != 0 &&
              DateTime.GreaterThanOrEqualTo(dtSchDTTM.Date.AddHours(dtSchDTTM.Hour).AddMinutes(
                dtSchDTTM.Minute
              ),
                dtStartDTTM.Date.AddHours(dtStartDTTM.Hour).AddMinutes(
                  dtStartDTTM.Minute
                )) &&
              DateTime.LessThanOrEqualTo(dtSchDTTM.AddMinutes(
                -MedicationCommon.MedChartData.DuenessThreshold
              ), dtCurrent) &&
              DateTime.LessThanOrEqualTo(dtCurrent,
                dtSchDTTM.AddMinutes(
                  MedicationCommon.MedChartData.DuenessThreshold
                )) &&
              String.IsNullOrEmpty(this.RecordAdminMsg1)
            ) {
              this.DueNowScheduleDTTM = dtSchDTTM;
              if (this.Frequency.DisplayText == 'STAT') {
                this.RecordAdminMsg1 =
                  Resource.MedicationForm.RecordAdminDueNowNormalMessage;
                this.RecordAdminMsg1_Tooltip =
                  Resource.MedicationForm.RecordAdminDueNowNormalMessage_Tooltip;
              } else {
                this.RecordAdminMsg1 = String.Format(
                  Resource.MedicationForm.RecordAdminDueNowMessage,
                  dtSchDTTM.ToUserDateTimeString('HH:mm')
                );
                this.RecordAdminMsg1_Tooltip =
                  Resource.MedicationForm.RecordAdminDueNowMessage_Tooltip;
              }
            } else if (
              IsONCEONLY &&
              String.Compare(
                ContextInfo.MenuCode,
                CConstants.ClinicallyVerifyMenuCode
              ) != 0 &&
             DateTime.GreaterThanOrEqualTo( dtSchDTTM.Date.AddHours(dtSchDTTM.Hour).AddMinutes(
                dtSchDTTM.Minute
              ),
                dtStartDTTM.Date.AddHours(dtStartDTTM.Hour).AddMinutes(
                  dtStartDTTM.Minute
                )) &&
            DateTime.LessThanOrEqualTo(dtOldSchDTTM.AddMinutes(
                -MedicationCommon.MedChartData.DuenessThreshold
              ), dtCurrent) &&
              String.IsNullOrEmpty(this.RecordAdminMsg1)
            ) {
              this.RecordAdminMsg1 =
                Resource.MedicationForm.RecordAdminDueNowNormalMessage;
              this.RecordAdminMsg1_Tooltip =
                Resource.MedicationForm.RecordAdminDueNowNormalMessage_Tooltip;
            }
            if (
              (this.IsExistingItem &&
                (this.oPrescitemVM.ActionCode as ActivityTypes) ==
                  ActivityTypes.Amend) ||
              nAdminCnt > 4 ||
              String.Compare(
                sFreqUOM,
                'CC_IPONCENLY',
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
              String.Compare(
                sFreqUOM,
                'CC_MEDDRSN2',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                sFreqUOM,
                'CC_MEDRSN3',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                sFreqUOM,
                'CC_MEDRSN4',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              !(
                String.Compare(sDoseType, DoseTypeCode.NORMAL) == 0 ||
                String.Compare(sDoseType, DoseTypeCode.DOSAGERANGE) == 0
              )
            ) {
              continue;
            }
            if (dtSchDTTM.Year < CConstants.DateTimeMinYear) continue;
            if (DateTime.LessThan(dtStartDTTM.Date, dtCurrent.Date)) break;
            if (DateTime.Equals(dtSchDTTM, dtStartDTTM) && DateTime.Equals(dtStartDTTM.Date, dtCurrent.Date))
              continue;
            if (this.bIsAmend) break;
            else if (
              DateTime.GreaterThanOrEqualTo(dtSchDTTM, dtStartDTTM) &&
              String.IsNullOrEmpty(this.FollowUpStatMessage) &&
              this.FollowUpStatLaunch == '\0'
            ) {
              this.FollowUpStatMessage = String.Format(
                Resource.MedicationForm.RecordAdminPresAddStatDoseMsg,
                dtSchDTTM.ToUserDateTimeString('dd-MMM-yyyy HH:mm'),
                this.GetTimeDiffInWords(diffTime)
              );
              this.Firstscheduledatetime = dtSchDTTM;
              this.FollowUpStatMessage_Tooltip =
                Resource.MedicationForm.RecordAdminPresAddStatDoseMsg_Tooltip;
              this.FollowUpOrStat = 'S';
              let nTotalDiffHours: number = diffTime.Days * 24 + diffTime.Hours;
              if (
                ProfileData.ScheduleConfig != null &&
                nTotalDiffHours >=
                  ProfileData.ScheduleConfig.TimeParamForAlerting
              ) {
                this.StatForeground = new SolidColorBrush(
                  Color.FromArgb(0xff, 0x5d, 0x07, 0x0a)
                );
                this.AdditionaloptinFontWeight = FontWeights.Bold;
              } else {
                this.AdditionaloptinFontWeight = FontWeights.Normal;
              }
            }
            if (
              !String.IsNullOrEmpty(this.FollowUpStatMessage) &&
              !String.IsNullOrEmpty(this.RecordAdminMsg1)
            )
              break;
          }
        } else if (String.Compare(sFreqType, 'CC_INTERVAL') == 0) {
          dtSchDTTM =
            this.AdminTimes.AdministrationScheduleTimes[0].ScheduleDTTM;
          let IsStatFreq: boolean =
            this.Frequency != null &&
            this.Frequency.Tag != null &&
            this.Frequency.Tag instanceof Array &&
            ObjectHelper.CreateType<string[]>(this.Frequency.Tag, Array<string>)
              .length > 1 &&
            String.Equals(
              ObjectHelper.CreateType<string[]>(
                this.Frequency.Tag,
                Array<string>
              )[1],
              CConstants.OnceOnlyFrequency,
              StringComparison.CurrentCultureIgnoreCase
            );
          if (
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode
            ) != 0 &&
            DateTime.GreaterThanOrEqualTo(dtSchDTTM, dtStartDTTM )&&
           DateTime.LessThanOrEqualTo( dtSchDTTM.AddMinutes(
              -MedicationCommon.MedChartData.DuenessThreshold
            ), dtCurrent) &&
           DateTime.LessThanOrEqualTo( dtCurrent,
              dtSchDTTM.AddMinutes(
                MedicationCommon.MedChartData.DuenessThreshold
              ))
          ) {
            this.DueNowScheduleDTTM = dtSchDTTM;
            if (this.Frequency.DisplayText == 'STAT') {
              this.RecordAdminMsg1 =
                Resource.MedicationForm.RecordAdminDueNowNormalMessage;
              this.RecordAdminMsg1_Tooltip =
                Resource.MedicationForm.RecordAdminDueNowNormalMessage_Tooltip;
            } else {
              this.RecordAdminMsg1 = String.Format(
                Resource.MedicationForm.RecordAdminDueNowMessage,
                dtSchDTTM.ToUserDateTimeString('HH:mm')
              );
              this.RecordAdminMsg1_Tooltip =
                Resource.MedicationForm.RecordAdminDueNowMessage_Tooltip;
            }
          } else if (
            IsStatFreq &&
            String.Compare(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode
            ) != 0 &&
            DateTime.GreaterThanOrEqualTo(dtSchDTTM, dtStartDTTM) &&
           DateTime.LessThanOrEqualTo( dtSchDTTM.AddMinutes(
              -MedicationCommon.MedChartData.DuenessThreshold
            ), dtCurrent)
          ) {
            this.RecordAdminMsg1 =
              Resource.MedicationForm.RecordAdminDueNowNormalMessage;
            this.RecordAdminMsg1_Tooltip =
              Resource.MedicationForm.RecordAdminDueNowNormalMessage_Tooltip;
          }
          if (
            String.Compare(
              this.SelectedFrequencyDetails.UOM,
              'CC_IPONCENLY',
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            this.FollowUpStatLaunch == '\0' &&
            !this.IsFormViewerDisable
          ) {
            this.FollowUpStatMessage =
              'Do you wish to add a regularly scheduled administration of this drug to follow the STAT dose?';
            this.AdditionaloptinFontWeight = FontWeights.Normal;
            this.FollowUpStatMessage_Tooltip =
              'Select to add a regularly scheduled administration of this drug';
            this.FollowUpOrStat = 'F';
          }
        }
      } else {
        this.FollowUpStatMessage = String.Empty;
        this.RecordAdminMsg1 = String.Empty;
        this.FollowUpOrStat = '\0';
        this.IsFollowUpStat = false;
      }
    }
    let IsSubsequentSequenteItem: boolean = false;
    IsSubsequentSequenteItem =
      this != null && this.oPrescitemVM != null
        ? CommonSequentialHelper.IsSequeneSubsequentItem(this.oPrescitemVM)
        : false;
    if (!IsSubsequentSequenteItem) {
      this.SetStartDateTimeForAppliance();
    }
  }
  public SetStartDateTimeForAppliance(): void {
    let dtCurrentDate: DateTime = CommonBB.GetServerDateTime();
    if (
      this.SelectedFrequencyDetails != null &&
      (PatientContext.PrescriptionType == PrescriptionTypes.Clerking ||
        PatientContext.PrescriptionType == PrescriptionTypes.Discharge ||
        PatientContext.PrescriptionType == PrescriptionTypes.Outpatient ||
        PatientContext.PrescriptionType == PrescriptionTypes.Leave) &&
      !String.Equals(
        this.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      ) &&
      (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
        this.IsClearlstAmendedFlds)
    ) {
      if (DateTime.Equals(this.StartDTTM, DateTime.MinValue)) {
        if (
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.Clerking,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.StartDTTM = dtCurrentDate.Date;
          this.StartPrescriptionTime = this.StartDTTM;
        } else {
          this.StartDTTM = this.StartPrescriptionTime = dtCurrentDate;
        }
      }
    }
  }
  public SetAdditionalOptionsVisibilityForSV(
    CurrentDTTM: DateTime,
    ScheduleDTTM: DateTime
  ): boolean {
    let _IsSetAdditionalOptionsVisibilityForSV: boolean = false;
    if (DateTime.NotEquals(ScheduleDTTM, DateTime.MinValue) && DateTime.NotEquals(CurrentDTTM, DateTime.MinValue)) {
      let diffTime: TimeSpan = ScheduleDTTM.ToUniversalTime().Subtract(
        CurrentDTTM.ToUniversalTime()
      );
      if (diffTime != TimeSpan.MinValue) {
        this.FollowUpStatMessage = String.Format(
          Resource.MedicationForm.RecordAdminPresAddStatDoseMsg,
          ScheduleDTTM.ToUserDateTimeString('dd-MMM-yyyy HH:mm'),
          this.GetTimeDiffInWords(diffTime)
        );
        this.Firstscheduledatetime = ScheduleDTTM;
        this.FollowUpStatMessage_Tooltip =
          Resource.MedicationForm.RecordAdminPresAddStatDoseMsg_Tooltip;
        this.FollowUpOrStat = 'S';
        let nTotalDiffHours: number = diffTime.Days * 24 + diffTime.Hours;
        if (
          ProfileData.ScheduleConfig != null &&
          nTotalDiffHours >= ProfileData.ScheduleConfig.TimeParamForAlerting
        ) {
          this.StatForeground = new SolidColorBrush(
            Color.FromArgb(0xff, 0x5d, 0x07, 0x0a)
          );
          this.AdditionaloptinFontWeight = FontWeights.Bold;
        } else {
          this.StatForeground = new SolidColorBrush(Colors.Black);
          this.AdditionaloptinFontWeight = FontWeights.Normal;
        }
        this.FollowUpStatMessageVisibility = Visibility.Visible;
        _IsSetAdditionalOptionsVisibilityForSV = true;
      }
    }
    return _IsSetAdditionalOptionsVisibilityForSV;
  }
  private GetTimeDiffInWords(diffTime: TimeSpan): string {
    let strBuild: StringBuilder = new StringBuilder();
    if (diffTime.Days >= 1) {
      strBuild.Append(diffTime.Days);
      strBuild.Append(' day(s)');
    }
    if (diffTime.Hours > 0) {
      if (strBuild.Length > 0) strBuild.Append(', ');
      strBuild.Append(diffTime.Hours);
      strBuild.Append(' hour(s)');
    }
    if (diffTime.Minutes > 0) {
      if (strBuild.Length > 0) strBuild.Append(', ');
      strBuild.Append(diffTime.Minutes);
      strBuild.Append(' minute(s)');
    }
    if (diffTime.Days <= 0 && diffTime.Hours <= 0 && diffTime.Minutes == 0) {
      strBuild.Append('less than a minute');
    }
    if (diffTime.Days <= 0 && diffTime.Hours <= 0 && diffTime.Minutes < 0) {
      strBuild.Append('less than current time');
    }
    return strBuild.ToString();
  }
  private _IsStopDTTMAutoUpdate: boolean = false;
  public get IsStopDTTMAutoUpdate(): boolean {
    return this._IsStopDTTMAutoUpdate;
  }
  public set IsStopDTTMAutoUpdate(value: boolean) {
    this._IsStopDTTMAutoUpdate = value;
    //NotifyPropertyChanged("IsStopDTTMAutoUpdate");
  }
  private _IsRequiredUpdateAdmintimes: boolean = false;
  public get IsRequiredUpdateAdmintimes(): boolean {
    return this._IsRequiredUpdateAdmintimes;
  }
  public set IsRequiredUpdateAdmintimes(value: boolean) {
    this._IsRequiredUpdateAdmintimes = value;
  }
  public get StartPrescriptionTime(): DateTime {
    return this._startPrescriptionTime;
  }

  public StartPresTimeEvent = new EventEmitter();
  
  public set StartPrescriptionTime(value: DateTime) {
    if (!this._startPrescriptionTime.Equals(value)) {
      let StartpresOldValue = this._startPrescriptionTime;      
      this.RouteChangeAmendStartDTM = false;
      this.ClearPrescribedQuantity();
      if (!this.isFormViewDataLoaded) {
        this._startPrescriptionTime =
          this._startDTTM != DateTime.MinValue
            ? this._startDTTM.DateTime.AddTime(value)
            : DateTime.MinValue;
            if(this.IsClearlstAmendedFlds){
              this.IsChangeFromDurationOrStartDTTM = true;
            }
            this.StartPresTimeEvent.emit({OldValue:StartpresOldValue, NewValue:value});
        //super.NotifyPropertyChanged("StartPrescriptionTime");
      } else {
        if (!this.IsClerkingStartDTTMBlank) {
          this.IsenableRSNFORMOD = true;
          this.IsMandatoryRSNFORMOD = true;
          this.IsenableModificationcomments = true;
          if (!this.lstAmendedFlds.Contains('StartPrescriptionTime')) {
            this.lstAmendedFlds.Add('StartPrescriptionTime');
            if (
              this.bIsAmend &&
              !this.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.IsenableRSNFORMOD
            ) {
              this.DoChangesForAmend();
            }
          }
        }
        if (value != DateTime.MinValue) {
          this._startPrescriptionTime = this._startDTTM.DateTime.AddTime(value);
          if(this.IsClearlstAmendedFlds){
            this.IsChangeFromDurationOrStartDTTM = true;
           }
        } else {
          this._startPrescriptionTime = DateTime.MinValue;
        }
        this.StartPresTimeEvent.emit({OldValue:StartpresOldValue, NewValue:value});
        //super.NotifyPropertyChanged("StartPrescriptionTime");
        this.UpdateSteppedDoseAdminTimes();
      }
      this.SetStopDTTM();
      if (this.AdminTimes != null) {
        this.AdminTimes.IsDaylightSavingTime = value.IsDaylightSavingTime();
        if (this.bIsAmend) {
          if (
            this._selectedFrequencyDetails != null &&
            String.Compare(
              this._selectedFrequencyDetails.Type,
              'CC_INTERVAL',
              StringComparison.InvariantCultureIgnoreCase
            ) != 0
          ) {
            let oTempStartDTTM: DateTime = this.OrginalStartDTTM;
            if (this.AdminTimes.AdministrationScheduleTimes != null) {
              let oTimes = this.AdminTimes.AdministrationScheduleTimes.Select(
                (s) => s.ScheduleDTTM.TimeOfDay
              );
              for ( let j=0; j< oTimes.Count(); j++){
                let i : TimeSpan = oTimes[j];
                if (
                  this._startPrescriptionTime.TimeOfDay.TotalMinutes <=
                  i.TotalMinutes
                ) {
                  oTempStartDTTM =
                    this._startPrescriptionTime.DateTime.AddMinutes(
                      i.TotalMinutes
                    );
                  break;
                }
              }
            }
            this.AdminTimes.StartDTTM = oTempStartDTTM;
            let IsPRNAdmin: boolean = true;
            if (
              ProfileData.ScheduleConfig != null &&
              !ProfileData.ScheduleConfig.AdminTimeReqforPRN &&
              this.AsRequired
            ) {
              IsPRNAdmin = false;
            }
            if (IsPRNAdmin && !this.IsRequiredUpdateAdmintimes) {
              this.SetAdminTimes();
            }
          } else if (this._startPrescriptionTime.Year > 0) {
            this.AdminTimes.StartDTTM = this._startPrescriptionTime;
          }
        } else {
          this.AdminTimes.StartDTTM = this._startPrescriptionTime;
          let IsPRNAdmin: boolean = true;
          if (
            ProfileData.ScheduleConfig != null &&
            !ProfileData.ScheduleConfig.AdminTimeReqforPRN &&
            this.AsRequired
          ) {
            IsPRNAdmin = false;
          }
          if (IsPRNAdmin) {
            this.SetAdminTimes();
          }
        }
        this.SetAdditionalOptionMessage();
      }
      if (
        PatientContext.PrescriptionType ==
          PrescriptionTypes.ForAdministration &&
        this.ReviewAfterVisible == Visibility.Visible &&
        this.oPrescitemVM != null &&
        this.ReviewAfterCalRequired
      )
        this.oPrescitemVM.GetReviewAfterDatetime();
    }
  }
  public SetAdminTimes(): void {
    if (
      this.SelectedFrequencyDetails != null &&
      !String.IsNullOrEmpty(this.SelectedFrequencyDetails.Type) &&
      String.Equals(
        this.SelectedFrequencyDetails.Type,
        'CC_PERIOD',
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration &&
      !String.IsNullOrEmpty(this.SelectedFrequencyDetails.UOM) &&
      String.Equals(
        this.SelectedFrequencyDetails.UOM,
        'CC_IPONCENLY',
        StringComparison.OrdinalIgnoreCase
      )
    ) {
      this.AdminTimes.FillAdministrationTimes(
        DateTime.NotEquals(this.StartPrescriptionTime, DateTime.MinValue)
          ? this.StartPrescriptionTime
          : DateTime.MinValue,
        this.bIsAmend,
        this.IsClearlstAmendedFlds
      );
    }
  }
  public get StopDate(): DateTime {
    return this._stopDate;
  }
  public set StopDate(value: DateTime) {
    if (DateTime.NotEquals(this._stopDate,value)) {
      if (this._stopDate != DateTime.MinValue && value != DateTime.MinValue) {
        this.ClearPrescribedQuantity();
      }
      if (!this.StopTVMsgFromStepVar && this.oPrescitemVM != null) {
        this.oPrescitemVM.TechnicallyValidateMessage();
      }
      if (
        !String.IsNullOrEmpty(this.Duration) &&
        this.Duration != '0' &&
        this.DurationUOM != null &&
        !String.IsNullOrEmpty(this.DurationUOM.Value) &&
        String.Compare(this.DurationUOM.Value, 'CC_DOSES') == 0 &&
        !String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Inpatient,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        this.EndDTTM = DateTime.MinValue;
        this._stopDate = DateTime.MinValue;
      } else {
        this._stopDate = value;
        this.EndDTTM = value;
        if (
          ObjectHelper.HasValue(this.StopPrescriptionTime) &&
          this.StopPrescriptionTime.Value != DateTime.MinValue &&
          value != DateTime.MinValue
        ) {
          this.EndDTTM = this.EndDTTM.DateTime.AddTime(
            this.StopPrescriptionTime.Value
          );
        }
      }
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      //super.NotifyPropertyChanged("StopDate");
      if (
        this._stopDate != DateTime.MinValue &&
        ObjectHelper.HasValue(this._stopPrescriptionTime) &&
        this._stopPrescriptionTime.Value.Year > CConstants.DateTimeMinYear
      ) {
        this.StopPrescriptionTime = this._stopDate.DateTime.AddTime(
          this._stopPrescriptionTime.Value
        );
      }
      if (this._stopDate == DateTime.MinValue)
        this.StopPrescriptionTime = DateTime.MinValue;
      else if (
        this._stopDate != DateTime.MinValue &&
        this.StopPrescriptionTime == DateTime.MinValue
      )
        this.StopPrescriptionTime =
        //  DateTime.MinValue.AddHours(23).AddMinutes(59);
        this._stopDate.DateTime.AddHours(23).AddMinutes(59);
    } else {
      if (
        this.StopDate != DateTime.MinValue &&
        this.StopDate.Year > CConstants.DateTimeMinYear
      ) {
        this.EndDTTM = this.StopDate;
        if (
          ObjectHelper.HasValue(this.StopPrescriptionTime) &&
          this.StopPrescriptionTime.Value != DateTime.MinValue &&
          this.StopPrescriptionTime.Value.Year > CConstants.DateTimeMinYear
        ) {
          this.EndDTTM = this.EndDTTM.DateTime.AddTime(
            this.StopPrescriptionTime.Value
          );
        }
      }
    }
    if (this.oPrescitemVM != null)
      this.oPrescitemVM.CheckReviewAfterManadatory();
  }
  public get StopPrescriptionTime(): DateTime {
    return this._stopPrescriptionTime;
  }
  public set StopPrescriptionTime(value: DateTime) {
    if (DateTime.NotEquals(this._stopPrescriptionTime,value)) {
      if (!this.StopTVMsgFromStepVar && this.oPrescitemVM != null) {
        this.oPrescitemVM.TechnicallyValidateMessage();
      }
      if (
        this._stopPrescriptionTime != DateTime.MinValue &&
        value != DateTime.MinValue
      ) {
        this.ClearPrescribedQuantity();
      }
      if (!this._stopDate.Equals(DateTime.MinValue)) {
        if (ObjectHelper.HasValue(value)) {
          if (value.Value != DateTime.MinValue)
            this._stopPrescriptionTime = this._stopDate.DateTime.AddTime(
              value.Value
            );
          else this._stopPrescriptionTime = this._stopDate.Date;
        }
      } else {
        this._stopPrescriptionTime = value;
      }
      if (
        this.isFormViewDataLoaded &&
        this.oPrescitemVM != null &&
        this.oPrescitemVM.ActionCode == ActivityTypes.Amend
      ) {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
      }
      //super.NotifyPropertyChanged("StopPrescriptionTime");
      if (this.AdminTimes != null && this._stopPrescriptionTime != null) {
        if (
          ObjectHelper.HasValue(this._stopPrescriptionTime) &&
          this._stopPrescriptionTime.Value.Year > CConstants.DateTimeMinYear
        )
          this.AdminTimes.StopDTTM = this._stopPrescriptionTime.Value;
        else this.AdminTimes.StopDTTM = DateTime.MinValue;
      }
    }
  }
  public UpdateSteppedDoseAdminTimes(
    isSteppedDoseStartDTTMAlertShown: boolean = false, IsOverriteFVdataLoad: boolean = false
  ): void {
    if (
      this.oPrescitemVM != null &&
      (this.oPrescitemVM.IsFormViewDataLoaded || IsOverriteFVdataLoad) &&
      !this.IsSteppedDoseStartDTTMChanged &&
      this.MultiDoseDetails != null &&
      this.MultiDoseDetails.Count > 0 &&
      this.DoseType != null &&
      (String.Compare(
        this.DoseType.Value,
        DoseTypeCode.VARIABLE,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.STEPPED,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0)
    ) {
      this.UpdateStartEndDateForInPatSteppedDose(
        isSteppedDoseStartDTTMAlertShown,
        false,
        true
      );
    }
  }
  SetInfusionrate(): void {
    let sDevDevice: CListItem = this.InfusionDetails.DeliveryDevice;
    let BoosterDose: string = this.InfusionDetails.Boosterdose;
    let BoosterDoseUOM: CListItem = this.InfusionDetails.Boosterdoseuom;
    if (this.InfusionDetails.DeliveryDevice != null)
      this.InfusionDetails.DeliveryDevice = null;
    if (this.InfusionDetails.DeliveryDevice == null) {
      this.InfusionDetails.DeliveryDevice = sDevDevice;
      this.InfusionDetails.Boosterdose = BoosterDose;
      this.InfusionDetails.Boosterdoseuom = BoosterDoseUOM;
    }
  }
  SetStopDTTM(): void {
    if (
      this._startDTTM.Year > CConstants.DateTimeMinYear &&
      this._startDTTM.Year != 9999
    ) {
      if (
        this._selectedFrequencyDetails != null &&
        String.Compare(
          this._selectedFrequencyDetails.UOM,
          CConstants.OnceOnlyFrequency
        ) == 0
      ) {
        this.StopDate = DateTime.MinValue;
        if (
          String.Compare(
            this._selectedFrequencyDetails.Type,
            'CC_INTERVAL',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          this.StopDate = DateTime.MinValue;
          this.StopPrescriptionTime = null;
        } else {
          this.StopPrescriptionTime = null;
        }
      } else {
        let nDurVal: number = 0;
        let sMinutes: string = String.Empty;
        if (
          Number.TryParse(this._duration, (o) => (nDurVal = o)) &&
          this._durationUOM != null &&
          !String.IsNullOrEmpty(this._durationUOM.Value)
        ) {
          let dtStopDTTM: DateTime = DateTime.MinValue;
          let dtStartDTTM: DateTime = this._startDTTM.DateTime.AddTime(
            this._startPrescriptionTime
          );
          switch (this._durationUOM.Value) {
            case 'CC_MINUTES':
              sMinutes = 'CC_MINUTES';
              dtStopDTTM = dtStartDTTM
                .ToUniversalTime()
                .AddMinutes(nDurVal)
                .ToLocalTime();
              break;
            case 'CC_HOURS':
              dtStopDTTM = dtStartDTTM
                .ToUniversalTime()
                .AddHours(nDurVal)
                .ToLocalTime();
              break;
            case 'CC_MEDDRSN1':
              dtStopDTTM = dtStartDTTM.AddDays(nDurVal);
              break;
            case 'CC_MEDDRSN2':
              dtStopDTTM = dtStartDTTM.AddDays(7 * nDurVal);
              break;
            case 'CC_MEDRSN3':
              dtStopDTTM = dtStartDTTM.AddDays(28 * nDurVal);
              break;
            case 'CC_MEDRSN4':
              dtStopDTTM = dtStartDTTM.AddYears(nDurVal);
              break;
            case 'CC_DOSES':
              if (
                String.Equals(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Inpatient,
                  StringComparison.CurrentCultureIgnoreCase
                )
              ) {
                dtStopDTTM =
                  this.oPrescitemVM.GetEnddatetimeforDoseDuration(dtStartDTTM);
              } else {
                dtStopDTTM = DateTime.MinValue;
                this.StopDate = DateTime.MinValue;
                this.StopPrescriptionTime = DateTime.MinValue;
              }
              break;
          }
          if (DateTime.NotEquals(dtStopDTTM, DateTime.MinValue)) {
            if (String.Equals(sMinutes, 'CC_MINUTES')) {
              dtStopDTTM =
                DateTime.GreaterThan(dtStopDTTM, dtStartDTTM)
                  ? dtStopDTTM.ToUniversalTime().ToLocalTime()
                  : dtStopDTTM;
            } else if (
              String.Equals(this._durationUOM.Value, 'CC_DOSES') &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Inpatient,
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              dtStopDTTM =
                DateTime.GreaterThan(dtStopDTTM, dtStartDTTM)
                  ? dtStopDTTM.ToUniversalTime().AddMinutes(1).ToLocalTime()
                  : dtStopDTTM;
            } else {
              dtStopDTTM =
                DateTime.GreaterThan(dtStopDTTM, dtStartDTTM)
                  ? dtStopDTTM.ToUniversalTime().AddMinutes(-1).ToLocalTime()
                  : dtStopDTTM;
            }
            sMinutes = String.Empty;
            this.StopPrescriptionTime = dtStopDTTM;
            this.StopDate = dtStopDTTM;
          }
        }
      }
    }
  }
  private _scheduletime: DateTime = DateTime.MinValue;
  public get Scheduletime(): DateTime {
    return this._scheduletime;
  }
  public set Scheduletime(value: DateTime) {
    if (this._scheduletime != value) {
      this._scheduletime = value;
    }
  }
  public get ModificationComName(): string {
    return this.modificationComName;
  }
  public set ModificationComName(value: string) {
    if (this.modificationComName != value) {
      this.modificationComName = value;
      //super.NotifyPropertyChanged("ModificationComName");
    }
  }
  public get ModificationComOid(): number {
    return this.modificationComOid;
  }
  public set ModificationComOid(value: number) {
    if (this.modificationComOid != value) {
      this.modificationComOid = value;
      //super.NotifyPropertyChanged("ModificationComOid");
    }
  }
  //public delegate void IsPRNCheckedDelegate();
  public IsPRNCheckedEvent: Function;
  private _IscontentAdminTimesEnabled: boolean = true;
  public get IscontentAdminTimesEnabled(): boolean {
    return (
      this._IscontentAdminTimesEnabled &&
      this.IsNotInPatientSteppedVariableAmend
    );
  }
  public set IscontentAdminTimesEnabled(value: boolean) {
    this._IscontentAdminTimesEnabled = value;
    //super.NotifyPropertyChanged("IscontentAdminTimesEnabled");
    if (this.IsPRNCheckedEvent != null) this.IsPRNCheckedEvent();
  }
  public get AsRequired(): boolean {
    return this._asRequired;
  }
  public set AsRequired(value: boolean) {
    if (this._asRequired != value) {
      if (!this.lstAmendedFlds.Contains('AsRequired')) {
        this.lstAmendedFlds.Add('AsRequired');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      if (!this.lstDRCAmendedFlds.Contains('AsRequired'))
        this.lstDRCAmendedFlds.Add('AsRequired');
      this.oPrescitemVM.TechnicallyValidateMessage();
      this.ClearPrescribedQuantity();
      if (
        !(
          this.actualClerkingValues != null &&
          (this.actualClerkingValues.Frequency == null ||
            (this.actualClerkingValues.Frequency != null &&
              String.IsNullOrEmpty(
                this.actualClerkingValues.Frequency.Value
              ))) &&
          !this.actualClerkingValues.AsRequired &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder
        )
      ) {
        this.IsMandatoryReasonForMedClerkModify = true;
      }
      this.SetOnadmissionValue(
        Convert.ToString(value),
        Convert.ToString(this._asRequired)
      );
      this._asRequired = value;
      //super.NotifyPropertyChanged("AsRequired");
      if (this._asRequired) {
        this.Direction = 'As needed';
      } else {
        this.Direction = String.Empty;
        this.PRNInstructionFreeText = String.Empty;
        this._PRNInstructionFreeText = String.Empty;
        this.PRNInstruction = null;
        this.PrnInstructionLoaded.emit(true);
      }
      this.IsEnablePRNInst = this._asRequired;
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (this.AdminTimes != null) {
        this.AdminTimes.AsRequired = this._asRequired;
      }
      this.CheckAndSetPRNInstFrequencyMandatory();
      this.Setstartdatetimeforinterval();
      if (value) {
        this.IsRecordAdminTabEnabled = false;
        this.RemoveDoseFromDuration();
        if (this.ReviewAfterVisible == Visibility.Visible)
          this.RemoveDoseFromReviewAfterUOM();
      } else if (!value) {
        if (!String.Equals(this.itemSubType, CConstants.SUBTYPE_GAS)) {
          this.SetDefaultDurationValues();
          if (this.ReviewAfterVisible == Visibility.Visible)
            this.SetDefaultReviewAfterUOMValues();
        }
      }
      if (
        !String.IsNullOrEmpty(this.itemSubType) &&
        String.Equals(this.itemSubType, CConstants.SUBTYPE_GAS) &&
        this.AsRequired
      ) {
        this.IscontentAdditionalOptions = Visibility.Collapsed;
      }
      if (this.AdminTimes != null)
        this.AdminTimes.IsVaildORInvaildTime = this._asRequired;
    } else {
      if (
        this.AdminTimes != null &&
        this.AdminTimes.bIsPRNFreq &&
        this.AsRequired
      ) {
        this.AdminTimes.Clear();
      }
    }
    if (!this.AsRequired) {
      this.PRNChkColorVisible = new SolidColorBrush(
        CommonBB.ToColor('#C2E2E3')
      );
    } else {
      this.PRNChkColorVisible = new SolidColorBrush(
        MedChartData.AsRequiredSlotsColor 
      );
       
    }
    this.PRNUnCheckAdminTimes(this._asRequired);
    this.SetAdditionalOptionMessage();
    if (
      !String.IsNullOrEmpty(this.itemSubType) &&
      String.Equals(this.itemSubType, CConstants.SUBTYPE_GAS)
    ) {
      this.IscontentAdditionalOptions = Visibility.Collapsed;        
    }
  }
  oTempAdminScheduleTimes: List<DateTime>;
  public get _TempAdminScheduleTimes(): List<DateTime> {
    return this.oTempAdminScheduleTimes;
  }
  public set _TempAdminScheduleTimes(value: List<DateTime>) {
    this.oTempAdminScheduleTimes = value;
  }
  private BackupFrequencyTimes(): void {
    if (
      this.AdminTimes != null &&
      this.AdminTimes.AdministrationScheduleTimes != null &&
      this.AdminTimes.AdministrationScheduleTimes.Count > 0
    ) {
      this.oTempAdminScheduleTimes = new List<DateTime>();
      for (
        let j: number = 0;
        j < this.AdminTimes.AdministrationScheduleTimes.Count;
        j++
      ) {
        this.oTempAdminScheduleTimes.Add(
          this.AdminTimes.AdministrationScheduleTimes[j].ScheduleDTTM
        );
      }
    }
  }
  private PRNUnCheckAdminTimes(AsRequired: boolean): void {
    if (
      ProfileData.ScheduleConfig != null &&
      !ProfileData.ScheduleConfig.AdminTimeReqforPRN &&
      (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
        (this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
          (this.OriginalAsRequired != AsRequired ||
            (this._selectedFrequencyDetails != null &&
              this._selectedFrequencyDetails.FrequencyId !=
                this.OriginalFrequencyOID)))) &&
      this.AdminTimes != null
    ) {
      if (this.oPrescitemVM.ActionCode == ActivityTypes.Amend) {
        this.OriginalAsRequired = AsRequired;
        if (this._selectedFrequencyDetails != null)
          this.OriginalFrequencyOID =
            this._selectedFrequencyDetails.FrequencyId;
      }
      if (AsRequired) {
        this.AdminTimes.SetSlotTimeModeState(String.Empty);
        this.AdminTimes.AdministrationScheduleTimes =
          new ObservableCollection<AdminScheduleTime>();
        this.AdminTimes.IsSlotTimeModeEnable = false;
        this.AdminTimes.IsDrugroundEnable = false;
        if (
          this._selectedFrequencyDetails != null &&
          String.Equals(
            this._selectedFrequencyDetails.UOM,
            CConstants.WeeklyFreq
          )
        ) {
          this.AdminTimes.IsSun =
            this.AdminTimes.IsMon =
            this.AdminTimes.IsTue =
            this.AdminTimes.IsWed =
            this.AdminTimes.IsThu =
            this.AdminTimes.IsFri =
            this.AdminTimes.IsSat =
              false;
          this.AdminTimes.IsSunEnable =
            this.AdminTimes.IsMonEnable =
            this.AdminTimes.IsTueEnable =
            this.AdminTimes.IsWedEnable =
            this.AdminTimes.IsThuEnable =
            this.AdminTimes.IsFriEnable =
            this.AdminTimes.IsSatEnable =
              false;
          this.AdminTimes.IsDaysOfWeekMandatory = false;
          this.AdminTimes.isDayOfWeekEnable = false;
        }
        this.AdminTimes.IsAdminTimelblEnable = false;
      } else {
        if (
          this._selectedFrequencyDetails != null &&
          String.Equals(
            this._selectedFrequencyDetails.UOM,
            CConstants.WeeklyFreq
          )
        ) {
          this.AdminTimes.IsDaysOfWeekMandatory = true;
          this.AdminTimes.isDayOfWeekEnable = true;
          this.IsDaysOfWeekMandatory = this.AdminTimes.IsDaysOfWeekMandatory;
          this.AdminTimes.IsSunEnable =
            this.AdminTimes.IsMonEnable =
            this.AdminTimes.IsTueEnable =
            this.AdminTimes.IsWedEnable =
            this.AdminTimes.IsThuEnable =
            this.AdminTimes.IsFriEnable =
            this.AdminTimes.IsSatEnable =
              true;
          this.AdminTimes.CheckAndSetDaysOfWeekState();
        }
        this.AdminTimes.IsAdminTimelblEnable = true;
        if (
          DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
          this.oTempAdminScheduleTimes != null &&
          this.oTempAdminScheduleTimes.Count > 0 &&
          this.AdminTimes.AdminType == 'F'
        ) {
          let nTotCnt: number = this.oTempAdminScheduleTimes.Count;
          this.AdminTimes.AdministrationScheduleTimes =
            new ObservableCollection<AdminScheduleTime>();
          let oAdminSchdTime: AdminScheduleTime;
          let IsAmendUILoaded: boolean = true;
          if (this.bIsAmend && !this.IsClearlstAmendedFlds) {
            IsAmendUILoaded = false;
          }
          let drStartDTTM: DateTime = DateTime.MinValue;
          for (let iCnt: number = 0; iCnt < nTotCnt; iCnt++) {
            oAdminSchdTime = new AdminScheduleTime(this.AdminTimes);
            if (
              IsAmendUILoaded &&
              this.SelectedFrequencyDetails != null &&
              !String.IsNullOrEmpty(this.SelectedFrequencyDetails.Type) &&
              String.Equals(
                this.SelectedFrequencyDetails.Type,
                'CC_PERIOD',
                StringComparison.CurrentCultureIgnoreCase
              ) &&
              !String.IsNullOrEmpty(this.SelectedFrequencyDetails.UOM) &&
              String.Equals(
                this.SelectedFrequencyDetails.UOM,
                'CC_IPONCENLY',
                StringComparison.OrdinalIgnoreCase
              )
            ) {
              oAdminSchdTime.ScheduleDTTM = this._startPrescriptionTime;
            } else {
              if (DateTime.NotEquals(this.StartDTTM, DateTime.MinValue)) {
                drStartDTTM = this.StartDTTM.AddTime(
                  this.oTempAdminScheduleTimes[iCnt]
                );
              }
              if (DateTime.NotEquals(drStartDTTM, DateTime.MinValue)) {
                oAdminSchdTime.ScheduleDTTM = drStartDTTM;
              } else {
                oAdminSchdTime.ScheduleDTTM =
                  this.oTempAdminScheduleTimes[iCnt];
              }
            }
            oAdminSchdTime.FixedSchDTTMChanged = (s,e) => {
              this.AdminTimes.oAdminSchdTime_FixedSchDTTMChanged();
            };
            this.AdminTimes.AdministrationScheduleTimes.Add(oAdminSchdTime);
          }
          this.AdminTimes.UpdateMandatory();
        } else if (
          DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
          this.AdminTimes != null &&
          this.AdminTimes.FreqDetails != null &&
          this.AdminTimes.FreqDetails.oFrequency != null &&
          !this.AdminTimes.bIsPRNFreq
        ) {
          this.AdminTimes.FillAdministrationTimes(
            DateTime.NotEquals(this.StartPrescriptionTime, DateTime.MinValue)
              ? this.StartPrescriptionTime
              : DateTime.MinValue,
            this.bIsAmend,
            this.IsClearlstAmendedFlds
          );
          this.BackupFrequencyTimes();
          this.SetAdditionalOptionMessage();
        }
      }
    } else {
      if (this.AdminTimes != null) {
        if (
          this._selectedFrequencyDetails != null &&
          String.Equals(
            this._selectedFrequencyDetails.UOM,
            CConstants.WeeklyFreq
          )
        ) {
          if (
            this.IsNoAdminTimeForPRN &&
            AsRequired &&
            this.oPrescitemVM.ActionCode != ActivityTypes.Reorder
          ) {
            this.AdminTimes.IsSun =
              this.AdminTimes.IsMon =
              this.AdminTimes.IsTue =
              this.AdminTimes.IsWed =
              this.AdminTimes.IsThu =
              this.AdminTimes.IsFri =
              this.AdminTimes.IsSat =
                false;
            this.AdminTimes.IsSunEnable =
              this.AdminTimes.IsMonEnable =
              this.AdminTimes.IsTueEnable =
              this.AdminTimes.IsWedEnable =
              this.AdminTimes.IsThuEnable =
              this.AdminTimes.IsFriEnable =
              this.AdminTimes.IsSatEnable =
                false;
            this.AdminTimes.IsDaysOfWeekMandatory = false;
            this.AdminTimes.isDayOfWeekEnable = false;
          } else {
            this.AdminTimes.IsDaysOfWeekMandatory = true;
            this.AdminTimes.isDayOfWeekEnable = true;
            this.IsDaysOfWeekMandatory = true;
          }
        }
        if (
          this.IsNoAdminTimeForPRN &&
          AsRequired &&
          this.oPrescitemVM.ActionCode != ActivityTypes.Reorder
        )
          this.AdminTimes.IsAdminTimelblEnable = false;
        else this.AdminTimes.IsAdminTimelblEnable = true;
      }
      if (
        this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
        (this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
          (!this.IsNoAdminTimeForPRN || !AsRequired))
      ) {
        if (
          this.SelectedFrequencyDetails != null &&
          !String.IsNullOrEmpty(this.SelectedFrequencyDetails.Type) &&
          !String.Equals(
            this.SelectedFrequencyDetails.Type,
            'CC_INTERVAL',
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          if (AsRequired) {
            if (
              this.AdminTimes != null &&
              this.AdminTimes.AdministrationScheduleTimes != null &&
              this.AdminTimes.AdministrationScheduleTimes.Count > 0
            ) {
              for (
                let j: number = 0;
                j < this.AdminTimes.AdministrationScheduleTimes.Count;
                j++
              ) {
                if (this.AdminTimes.IsVaildORInvaildTime) {
                  this.AdminTimes.AdministrationScheduleTimes[j].ScheduleDTTM =
                    new DateTime();
                  this.AdminTimes.AdministrationScheduleTimes[j].ScheduleDTTM =
                    this.StartDTTM.DateTime.AddHours(0).AddMinutes(0);
                } else if (
                  String.Equals(
                    this.IsAdminTypeFlag,
                    'D',
                    StringComparison.CurrentCultureIgnoreCase
                  )
                ) {
                  this.AdminTimes.AdministrationScheduleTimes[j].ScheduleDTTM =
                    new DateTime();
                  this.AdminTimes.AdministrationScheduleTimes[j].ScheduleDTTM =
                    this.StartDTTM.DateTime.AddHours(0).AddMinutes(0);
                }
              }
            } else {
              if (
                this.oTempAdminScheduleTimes != null &&
                this.AdminTimes != null &&
                this.AdminTimes.AdministrationScheduleTimes != null &&
                this.oTempAdminScheduleTimes.Count > 0 &&
                this.AdminTimes.AdministrationScheduleTimes.Count > 0 &&
                this.oTempAdminScheduleTimes.Count ==
                  this.AdminTimes.AdministrationScheduleTimes.Count &&
                !String.Equals(
                  this.IsAdminTypeFlag,
                  'D',
                  StringComparison.CurrentCultureIgnoreCase
                )
              ) {
                for (
                  let i: number = 0;
                  i < this.oTempAdminScheduleTimes.Count;
                  i++
                ) {
                  this.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM =
                    this.oTempAdminScheduleTimes[i];
                }
              }
            }
            if (this.AdminTimes != null) {
              this.AdminTimes.IsAdminTimeReqORNonForPRN =
                this.GetAdminTimeRequiredForPRN();
            }
          } else {
            if (
              this.oTempAdminScheduleTimes != null &&
              this.AdminTimes != null &&
              this.AdminTimes.AdministrationScheduleTimes != null &&
              this.oTempAdminScheduleTimes.Count > 0 &&
              this.AdminTimes.AdministrationScheduleTimes.Count > 0 &&
              this.oTempAdminScheduleTimes.Count ==
                this.AdminTimes.AdministrationScheduleTimes.Count
            ) {
              let IsAmendUILoaded: boolean = true;
              if (this.bIsAmend && !this.IsClearlstAmendedFlds) {
                IsAmendUILoaded = false;
              }
              for (
                let i: number = 0;
                i < this.oTempAdminScheduleTimes.Count;
                i++
              ) {
                if (
                  IsAmendUILoaded &&
                  this.SelectedFrequencyDetails != null &&
                  !String.IsNullOrEmpty(this.SelectedFrequencyDetails.Type) &&
                  String.Equals(
                    this.SelectedFrequencyDetails.Type,
                    'CC_PERIOD',
                    StringComparison.CurrentCultureIgnoreCase
                  ) &&
                  !String.IsNullOrEmpty(this.SelectedFrequencyDetails.UOM) &&
                  String.Equals(
                    this.SelectedFrequencyDetails.UOM,
                    'CC_IPONCENLY',
                    StringComparison.OrdinalIgnoreCase
                  )
                ) {
                  this.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM =
                    this._startPrescriptionTime;
                } else {
                  this.AdminTimes.AdministrationScheduleTimes[i].ScheduleDTTM =
                    this.oTempAdminScheduleTimes[i];
                }
              }
            } else if (
              DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
              this.AdminTimes != null &&
              this.AdminTimes.FreqDetails != null &&
              this.AdminTimes.FreqDetails.oFrequency != null &&
              !this.AdminTimes.bIsPRNFreq
            ) {
              this.AdminTimes.FillAdministrationTimes();
              this.SetAdditionalOptionMessage();
            }
            if (this.AdminTimes != null) {
              this.AdminTimes.IsAdminTimeReqORNonForPRN = false;
            }
          }
        } else {
          if (this.AdminTimes != null) {
            if (
              this.AdminTimes.AsRequired &&
              this.oPrescitemVM != null &&
              this.oPrescitemVM.ActionCode != ActivityTypes.Amend
            ) {
              this.AdminTimes.Clear();
            } else if (
              DateTime.NotEquals(this.StartDTTM, DateTime.MinValue )&&
              this.AdminTimes != null &&
              this.AdminTimes.FreqDetails != null &&
              this.AdminTimes.FreqDetails.oFrequency != null &&
              !this.AdminTimes.bIsPRNFreq
            ) {
              this.AdminTimes.FillAdministrationTimes();
              this.SetAdditionalOptionMessage();
            }
          }
        }
      }
    }
  }
  public get MedicationClerkingSource(): ObservableCollection<CListItem> {
    return this.medicationclrkSrc;
  }
  public set MedicationClerkingSource(value: ObservableCollection<CListItem>) {
    if (this.medicationclrkSrc != value) {
      if (this.isFormViewDataLoaded) {
        this.IsenableRSNFORMOD = true;
        if (!this.lstAmendedFlds.Contains('MedicationClerkingSource')) {
          this.lstAmendedFlds.Add('MedicationClerkingSource');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
      }
      this.medicationclrkSrc = value;
      //super.NotifyPropertyChanged("MedicationClerkingSource");
    }
  }
  private _steppedVariablePanelHeader: string =
    Resource.MedicationForm.VariableDoseRegime_Header;
  public get SteppedVariablePanelHeader(): string {
    return this._steppedVariablePanelHeader;
  }
  public set SteppedVariablePanelHeader(value: string) {
    this._steppedVariablePanelHeader = value;
    //super.NotifyPropertyChanged("SteppedVariablePanelHeader");
  }
  private _isClearlstAmendedFlds: boolean = false;
  public get IsClearlstAmendedFlds(): boolean {
    return this._isClearlstAmendedFlds;
  }
  public set IsClearlstAmendedFlds(value: boolean) {
    this._isClearlstAmendedFlds = value;
    this.IsClearOnAdmissionAmended = value;
    if (value) {
      if (this.IsDTTMSetViaORSMezzanine) {
        this.IsDTTMSetViaORSMezzanine = false;
      }
    }
    //super.NotifyPropertyChanged("IsClearlstAmendedFlds");
  }
  private _isClearOnAdmissionAmended: boolean = false;
  public get IsClearOnAdmissionAmended(): boolean {
    return this._isClearOnAdmissionAmended;
  }
  public set IsClearOnAdmissionAmended(value: boolean) {
    this._isClearOnAdmissionAmended = value;
    //super.NotifyPropertyChanged("IsClearOnAdmissionAmended");
  }
  private _isInfContiniousFormLoaded: boolean = false;
  public get IsInfContiniousFormLoaded(): boolean {
    return this._isInfContiniousFormLoaded;
  }
  public set IsInfContiniousFormLoaded(value: boolean) {
    this._isInfContiniousFormLoaded = value;
  }
  private _IsFormviwerChangedIVtoNonIV: boolean = false;
  public get IsFormviwerChangedIVtoNonIV(): boolean {
    return this._IsFormviwerChangedIVtoNonIV;
  }
  public set IsFormviwerChangedIVtoNonIV(value: boolean) {
    this._IsFormviwerChangedIVtoNonIV = value;
  }
  private _IsInfSeqTypeChangedToNonSeqType: boolean = false;
  public get IsInfSeqTypeChangedToNonSeqType(): boolean {
    return this._IsInfSeqTypeChangedToNonSeqType;
  }
  public set IsInfSeqTypeChangedToNonSeqType(value: boolean) {
    this._IsInfSeqTypeChangedToNonSeqType = value;
  }
  private _InfusionType: CListItem;
  public get InfusionType(): CListItem {
    return this._InfusionType;
  }
  public set InfusionType(value: CListItem) {
    if (this._InfusionType != value) {
      if (!this.isFormViewDataLoaded) {
        this._InfusionType = value;
        //NotifyPropertyChanged("InfusionType");
      } else {
        if (this._InfusionType != value) {
          this.ClearPrescribedQuantity();
        }
        let sPreviousInfusionType: string = String.Empty;
        if (this._InfusionType != null) {
          sPreviousInfusionType = this._InfusionType.Value;
        }
        if (
          this.actualClerkingValues != null &&
          ((this.actualClerkingValues.InfusionType == null &&
            value != null &&
            !String.IsNullOrEmpty(value.DisplayText) &&
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
            (this.actualClerkingValues.InfusionType != null &&
              !String.IsNullOrEmpty(
                this.actualClerkingValues.InfusionType.Value
              ) &&
              value == null) ||
            (this.actualClerkingValues.InfusionType != null &&
              value != null &&
              !String.IsNullOrEmpty(
                this.actualClerkingValues.InfusionType.Value
              ) &&
              String.Compare(
                this.actualClerkingValues.InfusionType.Value,
                value.Value,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0))
        ) {
          this.IsMandatoryReasonForMedClerkModify = true;
          this.SetOnadmissionValue(value);
        }
        this._InfusionType = value;
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('InfusionType')) {
          this.lstAmendedFlds.Add('InfusionType');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        let IsFormCancelled: boolean = false;
        if (this.oPrescitemVM != null && this.oPrescitemVM.IsFormCancelled) {
          IsFormCancelled = true;
        }
        if (!IsFormCancelled) {
          if (!this.lstDRCAmendedFlds.Contains('InfusionType'))
            this.lstDRCAmendedFlds.Add('InfusionType');
        }
        let SingleActionMedChartVal: boolean =
          this._InfusionType != null &&
          !String.IsNullOrEmpty(this._InfusionType.Value) &&
          this._InfusionType.Value == InfusionTypesCode.INTERMITTENT
            ? true
            : false;
        if (this.InfusionDetails != null) {
          if (
            SingleActionMedChartVal &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Inpatient
            )
          ) {
            this.InfusionDetails.SingleActionMedChartVisible =
              Visibility.Visible;
          } else {
            this.InfusionDetails.SingleActionMedChartVisible =
              Visibility.Collapsed;
          }
        }
        if (
          this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder
        ) {
          if (
            this.oPrescitemVM != null &&
            !String.Equals(
              this.oPrescitemVM.sOriginalType,
              InfusionTypesCode.INTERMITTENT
            ) &&
            this._InfusionType != null &&
            !String.IsNullOrEmpty(this._InfusionType.Value) &&
            this._InfusionType.Value == InfusionTypesCode.INTERMITTENT
          ) {
            this.InfusionDetails.ChckSingleActionMedChart = true;
          }
        }
        if (this.oPrescitemVM.ActionCode == ActivityTypes.Amend) {
          if (
            this.oPrescitemVM != null &&
            String.Equals(
              this.oPrescitemVM.sOriginalType,
              InfusionTypesCode.INTERMITTENT
            ) &&
            this._InfusionType != null &&
            !String.IsNullOrEmpty(this._InfusionType.Value) &&
            this._InfusionType.Value == InfusionTypesCode.INTERMITTENT
          ) {
            if (this.oPrescitemVM.sOriginalValue == '1')
              this.InfusionDetails.ChckSingleActionMedChart = true;
            else this.InfusionDetails.ChckSingleActionMedChart = false;
          } else if (
            this.oPrescitemVM != null &&
            !String.Equals(
              this.oPrescitemVM.sOriginalType,
              InfusionTypesCode.INTERMITTENT
            ) &&
            this._InfusionType != null &&
            !String.IsNullOrEmpty(this._InfusionType.Value) &&
            this._InfusionType.Value == InfusionTypesCode.INTERMITTENT
          ) {
            this.InfusionDetails.ChckSingleActionMedChart = true;
          } else if (this.InfusionDetails != null) {
            this.InfusionDetails.ChckSingleActionMedChart = false;
          }
        }
        if (
          this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder
        ) {
          if (
            this.InfusionDetails != null &&
            this._InfusionType != null &&
            !String.IsNullOrEmpty(this._InfusionType.Value) &&
            String.Equals(
              this._InfusionType.Value,
              InfusionTypesCode.CONTINUOUS,
              StringComparison.CurrentCultureIgnoreCase
            ) &&
            this.DoseType != null &&
            !String.IsNullOrEmpty(this.DoseType.Value) &&
            String.Equals(
              this.DoseType.Value,
              DoseTypeCode.NORMAL,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            if (!this.InfusionDetails.IsenableInfusionRate) {
              this.InfusionDetails.IsInfusionRateReadOnly = false;
              this.InfusionDetails.IsenableInfusionRate = true;
              this.InfusionDetails.IsenableInfusionratenumuom = true;
              this.InfusionDetails.IsenableInfusionrateDenominatoruom = true;
            }
          }
        }
        if (this.IsClearlstAmendList) {
          if (
            (this._InfusionType != null &&
              (String.Equals(
                this._InfusionType.Value,
                InfusionTypesCode.CONTINUOUS
              ) ||
                String.Equals(
                  this._InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME
                ) ||
                String.Equals(
                  this._InfusionType.Value,
                  InfusionTypesCode.FLUID
                ))) ||
            (this._InfusionType == null && this.IsInfContiniousFormLoaded)
          ) {
            if (
              this._doseType != null &&
              String.Compare(
                this._doseType.Value,
                DoseTypeCode.CONDITIONAL,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              this.IsVisibleCondFrequency = Visibility.Collapsed;
              this.IsVisibleCondchkPRN = Visibility.Collapsed;
              this.IsVisibleCondPRNInstruction = Visibility.Collapsed;
              this.IsVisibleCondAdminTimes = Visibility.Collapsed;
            }
            if (
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
              this._doseType != null &&
              String.Compare(
                this._doseType.Value,
                DoseTypeCode.CONDITIONAL,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              if (
                this.InfusionDetails != null &&
                this.InfusionType != null &&
                (String.Equals(
                  this.InfusionType.Value,
                  InfusionTypesCode.CONTINUOUS
                ) ||
                  String.Equals(
                    this.InfusionType.Value,
                    InfusionTypesCode.FLUID
                  ))
              ) {
                this.InfusionDetails.InfMonitoringperiodVisi =
                  Visibility.Visible;
                if (this.IsCondDoseMonitoringPeriodReq)
                  this.InfusionDetails.IsMandatoryMonitoringPeriod = true;
                else this.InfusionDetails.IsMandatoryMonitoringPeriod = false;
              }
            }
            if (PatientContext.PrescriptionType != PrescriptionTypes.Clerking)
              this.InfusionDetails.IsFrmInfusRateMand = true;
            if (
              String.Compare(
                this.itemSubType,
                CConstants.SUBTYPE_BLOOD,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              this.IsenableDoseType = false;
            }
            this.IsenableStopDate = false;
            if (
              !this.bIsAmend &&
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking
              ) != 0 &&
              this.InfusionDetails != null &&
              this.InfusionDetails.CurrentSequentialOrder == 0
            )
              this.SetInfusionrate();
            if (
              this._doseType != null &&
              (String.Compare(
                this._doseType.Value,
                DoseTypeCode.STEPPED,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
                String.Compare(
                  this._doseType.Value,
                  DoseTypeCode.VARIABLE,
                  StringComparison.OrdinalIgnoreCase
                ) == 0 ||
                String.Compare(
                  this._doseType.Value,
                  DoseTypeCode.STEPPEDVARIABLE,
                  StringComparison.OrdinalIgnoreCase
                ) == 0)
            ) {
              this.SteppedVariablePanelHeader =
                Resource.Infusion.VariableDoseRegime_Header;
              this.lblVariabletext = 'Instructions';
            }
            this.IsenableDuration = false;
            this.Duration = String.Empty;
            this.DurationUOM = null;
            this.IsVisibleDuration = Visibility.Collapsed;
            this.StopDate = DateTime.MinValue;
            this.IsVisibleStopDate = Visibility.Collapsed;
          }
          let IsMultiInfusionRoutes: boolean = false;
          if (
            this._InfusionType == null &&
            this.IsAllowMultiRoute &&
            this.DefaultDetails != null &&
            this.DefaultDetails.Routes != null
          ) {
            if (this.Route != null) {
              IsMultiInfusionRoutes = !Common.IsNonInfusionMultiRoutes(
                this.DefaultDetails.Routes
              );
            }
          }
          let IsInfTypeChanged: boolean = false;
          if (
            ((this._InfusionType != null &&
              !String.IsNullOrEmpty(this._InfusionType.Value) &&
              this._InfusionType.Value == InfusionTypesCode.CONTINUOUS &&
              !String.IsNullOrEmpty(sPreviousInfusionType)) ||
              (this._InfusionType == null &&
                !this.IsAllowMultiRoute &&
                this.IsInfContiniousFormLoaded == true) ||
              (this._InfusionType == null &&
                this.IsAllowMultiRoute &&
                IsMultiInfusionRoutes)) &&
            ((!String.IsNullOrEmpty(sPreviousInfusionType) &&
              !String.Equals(
                sPreviousInfusionType,
                InfusionTypesCode.CONTINUOUS
              ) &&
              this.Route != null &&
              this.Route.Tag != null &&
              !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
              String.Compare(this.Route.Tag.ToString(), '1') == 0) ||
              String.IsNullOrEmpty(sPreviousInfusionType))
          ) {
            this.SetPropertiesForcontinuous();
            IsInfTypeChanged = true;
          } else if (
            this._InfusionType != null &&
            !String.IsNullOrEmpty(this._InfusionType.Value) &&
            this._InfusionType.Value == InfusionTypesCode.SINGLEDOSEVOLUME
          ) {
            this.SetPropertiesForSingleDoseVolume();
            IsInfTypeChanged = true;
          } else if (
            this._InfusionType != null &&
            !String.IsNullOrEmpty(this._InfusionType.Value) &&
            this._InfusionType.Value == InfusionTypesCode.FLUID
          ) {
            this.SetPropertiesForFluid();
            IsInfTypeChanged = true;
          } else if (
            this._InfusionType != null &&
            !String.IsNullOrEmpty(this._InfusionType.Value) &&
            this._InfusionType.Value == InfusionTypesCode.INTERMITTENT &&
            this.oPrescitemVM != null &&
            this.oPrescitemVM.FormViewerDetails != null &&
            this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
            !this.oPrescitemVM.FormViewerDetails.BasicDetails.FollowUpStatLaunch.Equals(
              'S'
            )
          ) {
            this.SetPropertiesForIntermittent();
            IsInfTypeChanged = true;
          } else if (
            this._InfusionType != null &&
            !String.IsNullOrEmpty(this._InfusionType.Value) &&
            this._InfusionType.Value == InfusionTypesCode.PCA
          ) {
            this.SetPropertiesForPCA();
            IsInfTypeChanged = true;
          }
          if (
            IsInfTypeChanged &&
            this.InfusionDetails.IsManageSequenceVisible ==
              Visibility.Collapsed &&
            ((this.InfusionDetails != null &&
              this.InfusionDetails.GroupSequenceNo > 0) ||
              (this.SequenceInfo != null &&
                this.SequenceInfo.GroupSequenceNo > 0))
          ) {
            this.IsInfSeqTypeChangedToNonSeqType = true;
          }
        }
        if (
          !this.bIsAmend &&
          !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0 &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          if (
            (this.InfusionDetails != null &&
              this.InfusionType != null &&
              (String.Compare(
                this.InfusionType.Value,
                InfusionTypesCode.CONTINUOUS
              ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME
                ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.FLUID
                ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.PCA
                ) == 0)) ||
            (this.InfusionDetails != null &&
              this.itemSubType != null &&
              !String.IsNullOrEmpty(this.itemSubType) &&
              !String.Equals(
                this.itemSubType,
                'CC_MULCMPNTITM',
                StringComparison.CurrentCultureIgnoreCase
              ))
          ) {
            if (
              this.StartDTTM != DateTime.MinValue &&
              this.StartPrescriptionTime != DateTime.MinValue
            ) {
              let dtStartDTTM: DateTime =
                this.StartDTTM != DateTime.MinValue
                  ? this.StartDTTM.DateTime.AddTime(this.StartPrescriptionTime)
                  : DateTime.MinValue;
              let dtCurrent: DateTime = CommonBB.GetServerDateTime();
              if (
                String.Compare(
                  ContextInfo.MenuCode,
                  CConstants.ClinicallyVerifyMenuCode
                ) != 0 &&
                dtStartDTTM.AddMinutes(
                  -MedicationCommon.MedChartData.DuenessThreshold
                ) <= dtCurrent &&
                dtCurrent <=
                  dtStartDTTM.AddMinutes(
                    MedicationCommon.MedChartData.DuenessThreshold
                  ) &&
                this.InfusionDetails.SelectedSequenceName == null
              ) {
                this.DueNowScheduleDTTM = dtStartDTTM;
                this.RecordAdminMsg1 = String.Format(
                  Resource.MedicationForm.RecordAdminDueNowMessage,
                  dtStartDTTM.ToUserDateTimeString('HH:mm')
                );
                this.RecordAdminMsg1_Tooltip =
                  Resource.MedicationForm.RecordAdminDueNowMessage_Tooltip;
                this.InfusionDetails.ContinousAddOptions =
                  Resource.Infusion.Additionaloptions_Msg;
                if (
                  this.IsAuthorise ||
                  this.oPrescitemVM.FormViewerDetails.BasicDetails
                    .OrdersetSequence != null
                ) {
                  this.IsRecordAdminMsg1Visible = Visibility.Collapsed;
                  this.IscontentAdditionalOptions = Visibility.Collapsed;
                } else {
                  this.IsRecordAdminMsg1Visible = Visibility.Visible;
                  this.IscontentAdditionalOptions = Visibility.Visible;
                }
                if (this.InfusionDetails.IsChkNextSequencePrescribing) {
                  this.IscontentAdditionalOptions = Visibility.Collapsed;
                } else if (
                  this.IscontentAdditionalOptions == Visibility.Collapsed
                ) {
                  if (this.isRecordAdminMsg1Visible != Visibility.Collapsed)
                    this.IscontentAdditionalOptions = Visibility.Visible;
                  else this.IscontentAdditionalOptions = Visibility.Collapsed;
                }
              } else if (
                this.IscontentAdditionalOptions == Visibility.Visible
              ) {
                this.IscontentAdditionalOptions = Visibility.Collapsed;
              }
            }
          }
        }
        if (
          this._InfusionType != null &&
          !String.IsNullOrEmpty(this._InfusionType.Value) &&
          this._InfusionType.Value == InfusionTypesCode.PCA
        ) {
          this.IsMandatoryFrequency = false;
        }
        if (
          this.InfusionType != null &&
          !String.IsNullOrEmpty(this._InfusionType.Value) &&
          String.Equals(this.InfusionType.Value, InfusionTypesCode.INTERMITTENT)
        ) {
          if (!this.AsRequired) {
            this.SetDefaultDurationValues();
          }
        } else if (
          this.Route != null &&
          this.Route.Tag != null &&
          !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
          String.Compare(this.Route.Tag.ToString(), '1') == 0 &&
          this.DefaultDetails != null &&
          this.DefaultDetails.Duration != null &&
          this.DefaultDetails.DurationOriginal != null &&
          this.DefaultDetails.Duration.Count ==
            this.DefaultDetails.DurationOriginal.Count
        ) {
          this.RemoveDoseFromDuration();
        }
        let InfusionFlag: boolean = false;
        if (
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) &&
          this.DefaultDetails != null &&
          this.DefaultDetails.Routes != null
        ) {
          if (this.IsAllowMultiRoute && this.IsMultiRouteChecked) {
            if (this.DefaultDetails != null) {
              InfusionFlag = Common.IsInfusionMultiRoutes(
                this.DefaultDetails.Routes
              );
            }
          } else if (
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            InfusionFlag = true;
          }
        }
        if (
          (this.InfusionType != null &&
            String.Equals(this.InfusionType.Value, InfusionTypesCode.PCA)) ||
          (this.InfusionType != null &&
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.INTERMITTENT
            ))
        ) {
          this.ReviewAfterVisible = this.CurrentReviewAfterVisible;
        } else if (
          InfusionFlag &&
          this.InfusionDetails != null &&
          this.InfusionType != null &&
          (String.Equals(
            this.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
            String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID) ||
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.InvariantCultureIgnoreCase
            )) &&
          ((this.InfusionDetails.GroupSequenceNo > 0 &&
            this.InfusionDetails.ItemSequenceNo > 0) ||
            (this.InfusionDetails.SelectedSequenceName != null &&
              !String.IsNullOrEmpty(
                this.InfusionDetails.SelectedSequenceName.Value
              )))
        ) {
          this.ReviewAfterVisible = Visibility.Collapsed;
          this.ReviewAfterCommentsVisible = Visibility.Collapsed;
        }
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
          this.InfusionDetails != null &&
          this.InfusionDetails.IsChksequentialPresitem &&
          (String.Equals(
            this.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS
          ) ||
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) ||
            String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID)) &&
          InfusionFlag
        ) {
          this.ReviewAfterVisible = Visibility.Collapsed;
          this.ReviewAfterCommentsVisible = Visibility.Collapsed;
        }
        if (
          this.InfusionType != null &&
          String.Equals(
            this.InfusionType.Value,
            InfusionTypesCode.INTERMITTENT
          ) &&
          this.ReviewAfterVisible == Visibility.Visible
        ) {
          this.SetDefaultReviewAfterUOMValues();
        } else if (
          this.ReviewAfterVisible == Visibility.Visible &&
          this.DefaultDetails != null &&
          this.DefaultDetails.ReviewAfterUOMList != null &&
          this.DefaultDetails.ReviewAfterUOMListOriginal != null &&
          this.DefaultDetails.ReviewAfterUOMList.Count ==
            this.DefaultDetails.ReviewAfterUOMListOriginal.Count &&
          (InfusionFlag ||
            (!String.IsNullOrEmpty(this.itemSubType) &&
              String.Compare(
                this.itemSubType,
                CConstants.SUBTYPE_BLOOD,
                StringComparison.OrdinalIgnoreCase
              ) == 0))
        ) {
          this.RemoveDoseFromReviewAfterUOM();
        }
        //NotifyPropertyChanged("InfusionType");
        if (
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.ReviewAfterVisible == Visibility.Visible
        ) {
          this.CheckReviewUOM4SteppedVariable();
        }
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.FormViewerDetails != null &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
          (this.oPrescitemVM.FormViewerDetails.BasicDetails.Ordersets == null ||
            (this.oPrescitemVM.FormViewerDetails.BasicDetails.Ordersets !=
              null &&
              String.IsNullOrEmpty(
                this.oPrescitemVM.FormViewerDetails.BasicDetails.Ordersets.Value
              )))
        ) {
          if (
            this.InfusionDetails != null &&
            this.InfusionDetails.SequenceNamelst == null
          ) {
            CSequentialHelper.LoadSequenceNameCombo(this, false);
            if (
              this.oPrescitemVM.FormViewerDetails.BasicDetails
                .InfusionDetails != null
            ) {
              this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionDetails.IsClearSequenceEnabled =
                false;
            }
          }
        }
        this.DoseCalcEnableDisable();
        let bCallDCAmendMsg: boolean = true;
        if (
          this.Route != null &&
          this.Route.Tag != null &&
          !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
          String.Equals(this.Route.Tag.ToString(), '1') &&
          ((String.IsNullOrEmpty(sPreviousInfusionType) &&
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS
            )) ||
            (!String.IsNullOrEmpty(sPreviousInfusionType) &&
              String.Equals(
                sPreviousInfusionType,
                InfusionTypesCode.CONTINUOUS
              ) &&
              this.InfusionType == null))
        ) {
          bCallDCAmendMsg = false;
        }
        if (bCallDCAmendMsg) {
          this.DCAmendMessage();
        }
      }
    }
    if (
      this.InfusionType != null &&
      !String.IsNullOrEmpty(this.InfusionType.Value) &&
      String.Equals(
        this.InfusionType.Value,
        InfusionTypesCode.INTERMITTENT,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.IsDCIconVisibleForContInf = Visibility.Collapsed;
    } else {
      this.IsDCIconVisibleForContInf = this.IsDCIconVisible;
    }
    if (
      this.InfusionType != null &&
      !String.IsNullOrEmpty(this.InfusionType.Value) &&
      String.Equals(
        this.InfusionType.Value,
        InfusionTypesCode.CONTINUOUS,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this.IsDCIconVisibleForIntInf = Visibility.Collapsed;
    } else {
      this.IsDCIconVisibleForIntInf = this.IsDCIconVisible;
    }
    if (this.IsInfSeqTypeChangedToNonSeqType) {
      if (
        this.InfusionDetails != null &&
        this.InfusionDetails.GroupSequenceNo > 0
      ) {
        CSequentialHelper.SetStartDTTMWhenRouteOrInfTypeChange(this);
      } else if (
        this.SequenceInfo != null &&
        this.SequenceInfo.GroupSequenceNo > 0
      ) {
        CommonSequentialHelper.SetStartDateDTTMOnRouteChange(this);
      }
    }
  }
  public get txtUpperDoseIsExists(): boolean {
    return this._txtUpperDoseIsExists;
  }
  public set txtUpperDoseIsExists(value: boolean) {
    this._txtUpperDoseIsExists = value;
    //NotifyPropertyChanged("txtUpperDoseIsExists");
  }
  public DischargeDoseTypeForTitrated: string;
  public get DoseType(): CListItem {
    if (this._doseType == null) {
      this.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
      this.HifenWidth = new GridLength(0);
      this.UpperDoseWidth = new GridLength(0);
      this.Doselabelvalue = 'Dose';
    }
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      !this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
    ) {
      if (
        PatientContext.IsINFUSIONON &&
        this.InfusionType != null &&
        !String.IsNullOrEmpty(this.InfusionType.Value) &&
        String.Equals(this.InfusionType.Value, InfusionTypesCode.FLUID)
      ) {
        if (this._doseType == null) {
          let citem: CListItem = new CListItem();
          citem.IsSelected = true;
          citem.Value = DoseTypeCode.NORMAL;
          citem.DisplayText = CConstants.sNormalDisplaytext;
          this._doseType = citem;
        }
        this._isenableDoseType = false;
      }
    }
    return this._doseType;
  }
  public set DoseType(value: CListItem) {
    if (!Helper.ReferenceEquals(this._doseType, value)) {
      let PrevDosetype: CListItem = null;
      if (!this.isFormViewDataLoaded) {
        this._doseType = value;
        //NotifyPropertyChanged("DoseType");
      } else {
        if (
          this._doseType != null &&
          !String.IsNullOrEmpty(this._doseType.Value)
        ) {
          PrevDosetype = ObjectHelper.CreateObject(new CListItem(), {
            Value: this._doseType.Value,
            DisplayText: this._doseType.DisplayText,
          });
        }
        if (
          (this._doseType == null && value != null) ||
          (this._doseType != null && value == null) ||
          (this._doseType != null &&
            value != null &&
            String.Compare(
              this._doseType.DisplayText,
              value.DisplayText,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0)
        ) {
          this.IsenableDose = true;
          this.IsDoseVisible = Visibility.Visible;
          this.IsenableDoseUOM = true;
          if(this.DynamicControlIsLoaded)
            this.DynamicControlEndInstallLoaded.emit(true);
          if (
            this.AccessContraintControls != null &&
            this.AccessContraintControls.Count > 0 &&
            this.AccessContraintControls.Contains('cboFrequency')
          ) {
            this.IsenableFrequency = false;
          } else {
            this.IsenableFrequency = true;
          }
          this.IsVisibleFrequency = Visibility.Visible;
          this.IsVisiblechkPRN = Visibility.Visible;
          this.IsVisiblePRNInstruction = Visibility.Visible;
          this.IsVisibleStopDate = Visibility.Visible;
          if (
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            if (
              value != null &&
              (String.Equals(value.Value, DoseTypeCode.VARIABLE) ||
                String.Equals(value.Value, DoseTypeCode.STEPPED) ||
                String.Equals(value.Value, DoseTypeCode.STEPPEDVARIABLE))
            ) {
              this.IscontentAdminTimesVisible = Visibility.Collapsed;
            } else {
              this.IscontentAdminTimesVisible = Visibility.Visible;
            }
          }
          if (
            this.InfusionDetails != null &&
            this.InfusionType != null &&
            this.InfusionType.Value == InfusionTypesCode.INTERMITTENT
          ) {
            this.InfusionDetails.IsInfMedClerkIntermitVisible =
              Visibility.Visible;
          }
          if (
            !(
              PatientContext.IsINFUSIONON &&
              ((this.InfusionType != null &&
                (String.Equals(
                  this.InfusionType.Value,
                  InfusionTypesCode.CONTINUOUS
                ) ||
                  String.Equals(
                    this.InfusionType.Value,
                    InfusionTypesCode.SINGLEDOSEVOLUME
                  ) ||
                  String.Equals(
                    this.InfusionType.Value,
                    InfusionTypesCode.FLUID
                  ))) ||
                (this.InfusionType == null && this.IsInfContiniousFormLoaded))
            )
          ) {
            this.IsenableDuration = true;
            this.IsVisibleDuration = Visibility.Visible;
          }
          this.IsMandatoryUOM = true;
        }
        if (
          this.actualClerkingValues != null &&
          ((this.actualClerkingValues.DoseType == null &&
            value != null &&
            !String.IsNullOrEmpty(value.DisplayText) &&
            String.Compare(
              value.Value,
              DoseTypeCode.NORMAL,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0 &&
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
            (this.actualClerkingValues.DoseType != null &&
              !String.IsNullOrEmpty(this.actualClerkingValues.DoseType.Value) &&
              value == null) ||
            (this.actualClerkingValues.DoseType != null &&
              value != null &&
              !String.IsNullOrEmpty(this.actualClerkingValues.DoseType.Value) &&
              String.Compare(
                this.actualClerkingValues.DoseType.Value,
                value.Value,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0))
        ) {
          this.IsMandatoryReasonForMedClerkModify = true;
          this.SetOnadmissionValue(value);
        }
        if (!this.lstAmendedFlds.Contains('DoseType')) {
          this.lstAmendedFlds.Add('DoseType');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        if (!this.lstDRCAmendedFlds.Contains('DoseType'))
          this.lstDRCAmendedFlds.Add('DoseType');
        this.ClearPrescribedQuantity();
        if (
          (this._doseType == null && value != null) ||
          (value == null && this._doseType != null) ||
          (this._doseType != null &&
            value != null &&
            String.Compare(
              this._doseType.DisplayText,
              value.DisplayText,
              StringComparison.CurrentCultureIgnoreCase
            ) != 0)
        ) {
          this.oPrescitemVM.TechnicallyValidateMessage();
        }
        if (this.DefaultDetails != null)
          this._doseType = this.GetComboValue(
            value,
            this.DefaultDetails.DoseType
          );
        else this._doseType = value;
        //NotifyPropertyChanged("DoseType");
        if (
          this.InfusionType != null &&
          !String.IsNullOrEmpty(this.InfusionType.Value) &&
          String.Compare(this.InfusionType.Value, InfusionTypesCode.PCA) != 0 &&
          value != null &&
          String.Compare(
            value.Value,
            DoseTypeCode.NORMAL,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 &&
          this.IsClearlstAmendedFlds &&
          !this.IsfrmViewBasicLoaded
        ) {
          this.oPrescitemVM.ResetValues();
          this.InfusionDetails.FillInfusionRateBasedOnDD();
          //Not Required for LHS. To be Re-Visited.
          this.oPrescitemVM.LaunchInfusionrateCalculator(false);
        }
        this.txtUpperDoseIsExists =
          this._doseType != null &&
          !String.IsNullOrEmpty(this._doseType.Value) &&
          String.Equals(
            this._doseType.Value,
            DoseTypeCode.DOSAGERANGE,
            StringComparison.CurrentCultureIgnoreCase
          )
            ? true
            : false;
        if (
          this.bIsAmend &&
          this.DoseType != null &&
          this.DoseType.Tag != null &&
          !String.Equals(this.DoseType.Tag, 'Amend')
        ) {
          if (this.ReasonforModification != null) {
            this.ReasonforModification.IsSelected = false;
            this.ReasonforModification = null;
          }
        }
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (
          this._frequency == null ||
          String.IsNullOrEmpty(this._frequency.Value)
        ) {
          this.SetIsPRNState(false);
          if (this.AdminTimes != null) {
            this.AdminTimes.FreqDetails = null;
            this.AdminTimes.Clear();
          }
          this.SetAdditionalOptionMessage();
        }
        if (
          PatientContext.IsINFUSIONON &&
          !this.bIsAmend &&
          !String.IsNullOrEmpty(PatientContext.PrescriptionType) &&
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration
          ) == 0 &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory
        ) {
          if (
            (this.InfusionDetails != null &&
              this.InfusionType != null &&
              (String.Compare(
                this.InfusionType.Value,
                InfusionTypesCode.CONTINUOUS
              ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME
                ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.FLUID
                ) == 0 ||
                String.Compare(
                  this.InfusionType.Value,
                  InfusionTypesCode.PCA
                ) == 0)) ||
            (this.InfusionDetails != null &&
              this.itemSubType != null &&
              !String.IsNullOrEmpty(this.itemSubType) &&
              String.Compare(this.itemSubType, CConstants.SUBTYPE_GAS) == 0)
          ) {
            if (
              this.StartDTTM != DateTime.MinValue &&
              this.StartPrescriptionTime != DateTime.MinValue
            ) {
              let dtStartDTTM: DateTime =
                this.StartDTTM != DateTime.MinValue
                  ? this.StartDTTM.DateTime.AddTime(this.StartPrescriptionTime)
                  : DateTime.MinValue;
              let dtCurrent: DateTime = CommonBB.GetServerDateTime();
              if (
                String.Compare(
                  ContextInfo.MenuCode,
                  CConstants.ClinicallyVerifyMenuCode
                ) != 0 &&
                dtStartDTTM.AddMinutes(
                  -MedicationCommon.MedChartData.DuenessThreshold
                ) <= dtCurrent &&
                dtCurrent <=
                  dtStartDTTM.AddMinutes(
                    MedicationCommon.MedChartData.DuenessThreshold
                  ) &&
                this.InfusionDetails.SelectedSequenceName == null
              ) {
                this.DueNowScheduleDTTM = dtStartDTTM;
                this.RecordAdminMsg1 = String.Format(
                  Resource.MedicationForm.RecordAdminDueNowMessage,
                  dtStartDTTM.ToUserDateTimeString('HH:mm')
                );
                this.RecordAdminMsg1_Tooltip =
                  Resource.MedicationForm.RecordAdminDueNowMessage_Tooltip;
                this.InfusionDetails.ContinousAddOptions =
                  Resource.Infusion.Additionaloptions_Msg;
              }
            }
          }
        }
        this.RecordAdmin = new RecordAdminVM();
        this.RecordAdmin.IsLoaded = false;
        let bSetNonPRNFreq: boolean = false;
        if (this._doseType != null && this._doseType.Value != null) {
          if (
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.VARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            if (
              (this.InfusionDetails != null &&
                this.InfusionType != null &&
                this.InfusionType.Value == InfusionTypesCode.CONTINUOUS) ||
              this.IsInfContiniousFormLoaded
            ) {
              this.IscontentForModificationVisible = Visibility.Visible;
              this.InfusionDetails.IsFrmInfusRateMand = true;
              this.InfusionDetails.IsenableInfusionRate = true;
              this.InfusionDetails.IsenableInfusionRateforLabel = true;
              this.InfusionDetails.IsenableInfusionrateDenominatoruom = true;
              this.InfusionDetails.IsenableInfusionratenumuom = true;
              this.InfusionDetails.IsenableInfusionratenumuomlbl = true;
              this.InfusionDetails.IsenableInfusionrateCalculator = true;
              this.IsVisibleDuration = Visibility.Collapsed;
              this.IsVisibleFrequency = Visibility.Collapsed;
              this.IsVisiblechkPRN = Visibility.Collapsed;
              this.IsVisiblePRNInstruction = Visibility.Collapsed;
            } else if (
              this.InfusionDetails != null &&
              this.InfusionType != null &&
              this.InfusionType.Value == InfusionTypesCode.INTERMITTENT
            ) {
              this.SteppedVariablePanelHeader =
                Resource.MedicationForm.VariableDoseRegime_Header;
              this.IscontentForModificationVisible = Visibility.Visible;
              this.lblVariabletext = 'Variable dose instructions';
              this.IscontentAdminTimesVisible = Visibility.Collapsed;
              this.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
              this.HifenWidth = new GridLength(0);
              this.UpperDoseWidth = new GridLength(0);
              this.IsenableDose = false;
              this.IsenableDoseUOM = false;
              this.Isdoseenable = true;
              // this.Dose = String.Empty;             
              // this.DoseUOM = null;         
              this.IsenableFrequency = false;
              this.IsenableDuration = false;
              this.IsVisibleDuration = Visibility.Collapsed;
              this.IsVisibleFrequency = Visibility.Collapsed;
              this.IsVisiblechkPRN = Visibility.Collapsed;
              this.IsVisiblePRNInstruction = Visibility.Collapsed;
              this.InfusionDetails.IsInfMedClerkIntermitVisible =
                Visibility.Collapsed;
              this.IsMandatoryUOM = false;
              this.IsDoseMandatory = false;
              this.InfusionDetails.InfusRateVisi = Visibility.Visible;
              this.InfusionDetails.IsfreqVisible = Visibility.Visible;
              bSetNonPRNFreq = true;
              this.InfusionDetails.IsInfusRateMand = false;
              this.IsSlottimesenable = true;
              this.IsAdmintimesenable = true;
              this.IsAdmintimesenable1 = true;
              this.InfusionDetails.IsenableInfusionRate = false;
              this.InfusionDetails.IsenableInfusionRateforLabel = false;
              this.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
              this.InfusionDetails.IsenableInfusionratenumuom = false;
              this.InfusionDetails.IsenableInfusionrateCalculator = false;
              if (!this.IsenableInfusionPeriod) {
                this.IsenableInfusionPeriod = true;
              }
              if (!this.IsEnableInfusionRateSteppedVariable) {
                this.IsEnableInfusionRateSteppedVariable = true;
              }
              if (
                !String.IsNullOrEmpty(this.InfusionDetails.InfusionPeriod) &&
                this.InfusionDetails.InfusionPeriodUom != null &&
                !String.IsNullOrEmpty(this.InfusionDetails.Rate) &&
                this.InfusionDetails.InfRateNumeratorUom != null &&
                this.InfusionDetails.InfRateDinominatorUom != null
              ) {
                this.InfusionDetails.InfusionPeriod = null;
                this.InfusionDetails.InfusionPeriodUom = null;
                this.IsenableInfusionPeriod = false;
              }
              if (
                this.IsenableInfusionPeriod &&
                !String.IsNullOrEmpty(this.InfusionDetails.Rate) &&
                this.InfusionDetails.InfRateNumeratorUom != null &&
                this.InfusionDetails.InfRateDinominatorUom != null
              ) {
                this.IsenableInfusionPeriod = false;
                if (
                  !String.IsNullOrEmpty(this.InfusionDetails.InfusionPeriod)
                ) {
                  this.InfusionDetails.InfusionPeriod = String.Empty;
                }
                if (this.InfusionDetails.InfusionPeriodUom != null) {
                  this.InfusionDetails.InfusionPeriodUom = null;
                }
              }
              if (
                this.IsEnableInfusionRateSteppedVariable &&
                String.IsNullOrEmpty(this.InfusionDetails.Rate) &&
                this.InfusionDetails.InfRateNumeratorUom == null &&
                this.InfusionDetails.InfRateDinominatorUom == null &&
                this.IsenableInfusionPeriod &&
                !String.IsNullOrEmpty(this.InfusionDetails.InfusionPeriod) &&
                this.InfusionDetails.InfusionPeriodUom != null
              ) {
                this.IsEnableInfusionRateSteppedVariable = false;
              }
            } else {
              this.SteppedVariablePanelHeader =
                Resource.MedicationForm.VariableDoseRegime_Header;
              this.IscontentForModificationVisible = Visibility.Visible;
              this.lblVariabletext = 'Variable dose instructions';
              this.IscontentAdminTimesVisible = Visibility.Collapsed;
              this.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
              this.HifenWidth = new GridLength(0);
              this.UpperDoseWidth = new GridLength(0);
              if (this.IsAdminMethodVisible == Visibility.Collapsed)
                this.Doselabelvalue = 'Dose';
              else this.Doselabelvalue = 'Administration method';
              this.IsenableDose = false;
              this.IsenableDoseUOM = false;
              this.IsenableFrequency = false;
              this.IsenableDuration = false;
              this.IsVisibleDuration = Visibility.Collapsed;
              this.IsVisibleFrequency = Visibility.Collapsed;
              this.IsVisiblechkPRN = Visibility.Collapsed;
              this.IsVisiblePRNInstruction = Visibility.Collapsed;
              this.IsMandatoryUOM = false;
              this.IsDoseMandatory = false;
              this.IsenableAdminMthd = false;
              this.InfusionDetails.InfusRateVisi = Visibility.Collapsed;
              this.InfusionDetails.IsfreqVisible = Visibility.Visible;
              bSetNonPRNFreq = true;
              this.InfusionDetails.IsMandatoryFluid = false;
            }
            this.InfusionDetails.InfMonitoringperiodVisi = Visibility.Collapsed;
            this.InfusionDetails.IsMandatoryMonitoringPeriod = false;
            if (
              this.oPrescitemVM != null &&
              this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe &&
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              if (this.StartDTTM == DateTime.MinValue) {
                this.StartDTTM = CommonBB.GetServerDateTime();
              }
            }
            if (
              String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking
              ) &&
              this.Partialdate
            ) {
              this.StartDTTM = this.StartPrescriptionTime =
                this.GetClerkingParialDate();
            }
          } else if (
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.CONDITIONAL,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            this.IsEnableStartTime = true;
            this.SteppedVariablePanelHeader =
              Resource.MedicationForm.ConditionalDoseRegime_Header;
            if (
              PrevDosetype != null &&
              String.Equals(
                PrevDosetype.Value,
                DoseTypeCode.TITRATED,
                StringComparison.CurrentCultureIgnoreCase
              ) &&
              !String.Equals(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              this.IsenableAsrequired = true;
            }
            if (
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            ) {
              this.IscontentAdminTimesVisible = Visibility.Collapsed;
              this.IsVisibleCondAdminTimes = Visibility.Visible;
              this.IsenableAsrequired = true;
            } else {
              this.IsVisibleCondAdminTimes = Visibility.Collapsed;
            }
            if (
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            ) {
              this.IsMandatoryFrequency = false;
              this.IsPRNInstructionMandatory = false;
            }
            this.IscontentForModificationVisible = Visibility.Visible;
            this.InfusionDetails.IsMandatoryFluid = true;
            if (
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            ) {
              if (
                this.InfusionDetails != null &&
                this.InfusionType != null &&
                (this.InfusionType.Value == InfusionTypesCode.CONTINUOUS ||
                  this.InfusionType.Value ==
                    InfusionTypesCode.SINGLEDOSEVOLUME ||
                  this.InfusionType.Value == InfusionTypesCode.FLUID)
              ) {
                this.InfusionDetails.InfMonitoringperiodVisi =
                  Visibility.Visible;
                if (this.IsCondDoseMonitoringPeriodReq)
                  this.InfusionDetails.IsMandatoryMonitoringPeriod = true;
                else this.InfusionDetails.IsMandatoryMonitoringPeriod = false;
              }
            }
            this.IsMandatoryUOM = false;
            this.IsDoseMandatory = false;
            this.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
            this.HifenWidth = new GridLength(0);
            this.UpperDoseWidth = new GridLength(0);
            if (this.IsAdminMethodVisible == Visibility.Collapsed) {
              this.Doselabelvalue = 'Dose';
            } else {
              this.Doselabelvalue = 'Administration method';
            }
            this.Dose = String.Empty;
            this.DoseUOM = null;
            this.IsenableDose = false;
            this.IsenableDoseUOM = false;
            this.IsenableStopDate = true;
            if (
              (this.InfusionDetails != null &&
                this.InfusionType != null &&
                (this.InfusionType.Value == InfusionTypesCode.CONTINUOUS ||
                  this.InfusionType.Value ==
                    InfusionTypesCode.SINGLEDOSEVOLUME ||
                  this.InfusionType.Value == InfusionTypesCode.FLUID)) ||
              this.IsInfContiniousFormLoaded
            ) {
              this.IsVisibleCondFrequency = Visibility.Collapsed;
              this.IsVisibleCondchkPRN = Visibility.Collapsed;
              this.IsVisibleCondPRNInstruction = Visibility.Collapsed;
              this.IsVisibleCondAdminTimes = Visibility.Collapsed;
              this.IsenableStopDate = false;
            } else if (
              this.InfusionDetails != null &&
              this.InfusionType != null &&
              this.InfusionType.Value == InfusionTypesCode.INTERMITTENT
            ) {
              this.IsVisibleCondFrequency = Visibility.Visible;
              this.IsVisibleCondchkPRN = Visibility.Visible;
              if (
                String.Compare(
                  this.identifyingType,
                  'NONCATALOGUEITEM',
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 &&
                PatientContext.PrescriptionType !=
                  PrescriptionTypes.ForAdministration
              )
                this.IsVisibleCondPRNInstruction = Visibility.Collapsed;
              else this.IsVisibleCondPRNInstruction = Visibility.Visible;
              this.InfusionDetails.IsInfMedClerkIntermitVisible =
                Visibility.Collapsed;
              if (!this.IsenableInfusionPeriod) {
                this.IsenableInfusionPeriod = true;
              }
              if (
                !String.IsNullOrEmpty(this.InfusionDetails.InfusionPeriod) &&
                this.InfusionDetails.InfusionPeriodUom != null
              ) {
                if (this.ConditionalDosingDetails != null) {
                  if (
                    this.InfusionType != null &&
                    !String.IsNullOrEmpty(this.InfusionType.Value) &&
                    String.Equals(
                      this.InfusionType.Value,
                      InfusionTypesCode.INTERMITTENT,
                      StringComparison.OrdinalIgnoreCase
                    )
                  ) {
                    this.ConditionalDosingDetails.IsCondInfusionRateEnable =
                      false;
                  }
                }
              }
            }
            if (!this.IsInfContiniousFormLoaded) {
              this.IsVisibleDuration = Visibility.Visible;
              this.IsVisibleStopDate = Visibility.Visible;
            }
            this.IsVisibleFrequency = Visibility.Collapsed;
            this.IsVisiblechkPRN = Visibility.Collapsed;
            this.IsVisiblePRNInstruction = Visibility.Collapsed;
            if (
              String.Compare(
                this.identifyingType,
                'NONCATALOGUEITEM',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 &&
              PatientContext.PrescriptionType !=
                PrescriptionTypes.ForAdministration
            ) {
              this.IsVisibleCondPRNInstruction = Visibility.Collapsed;
            }
            this.InfusionDetails.IsInfusRateMand = true;
            this.InfusionDetails.IsFrmInfusRateMand = false;
            this.InfusionDetails.IsenableInfusionRate = false;
            this.InfusionDetails.IsenableInfusionRateforLabel = false;
            this.InfusionDetails.IsenableInfusionrateDenominatoruom = false;
            this.InfusionDetails.IsenableInfusionratenumuom = false;
            this.InfusionDetails.IsenableInfusionratenumuomlbl = false;
            this.InfusionDetails.IsenableInfusionrateCalculator = false;
          } else if (
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.DOSAGERANGE,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            this.IsEnableStartTime = true;
            this.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
            this.HifenWidth = new GridLength(1, GridUnitType.Auto);
            this.UpperDoseWidth = new GridLength(1, GridUnitType.Star);
            this.IscontentForModificationVisible = Visibility.Collapsed;
            if (
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            )
              this.IscontentAdminTimesVisible = Visibility.Visible;
            if (this.IsAdminMethodVisible == Visibility.Collapsed)
              this.Doselabelvalue = 'Dose range';
            else this.Doselabelvalue = 'Administration method';
            this.IsenableDose = true;
            this.IsenableDoseUOM = true;
            if(this.DynamicControlIsLoaded)
              this.DynamicControlEndInstallLoaded.emit(true);
            if (
              this.AccessContraintControls != null &&
              this.AccessContraintControls.Count > 0 &&
              this.AccessContraintControls.Contains('cboFrequency')
            ) {
              this.IsenableFrequency = false;
            } else {
              this.IsenableFrequency = true;
            }
            this.setStopDateDurationEnabledorDisabled();
            this.IsMandatoryUOM = true;
            if (
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            )
              this.IsDoseMandatory = false;
            else this.IsDoseMandatory = true;
            this.InfusionDetails.IsMandatoryFluid = false;
            this.InfusionDetails.InfMonitoringperiodVisi = Visibility.Collapsed;
            this.InfusionDetails.IsMandatoryMonitoringPeriod = false;
            if (
              PrevDosetype != null &&
              String.Equals(
                PrevDosetype.Value,
                DoseTypeCode.TITRATED,
                StringComparison.CurrentCultureIgnoreCase
              )
            ) {
              this.IsenableAsrequired = true;
            }
          } else if (
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.NORMAL,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            (String.Compare(
              this._doseType.Value,
              DoseTypeCode.TITRATED,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration
              ) == 0)
          ) {
            this.IsEnableStartTime = true;
            this.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
            this.HifenWidth = new GridLength(0);
            this.UpperDoseWidth = new GridLength(0);
            this.IscontentForModificationVisible = Visibility.Collapsed;
            this.setStopDateDurationEnabledorDisabled();
            let bIsPRNFrequency: boolean =
              (this._frequency != null &&
                this._frequency.Tag != null &&
                this._frequency.Tag instanceof Array &&
                (<string[]>this._frequency.Tag).length > 0 &&
                String.Compare((<string[]>this._frequency.Tag)[0], '1') == 0) ||
              (this.Frequency != null &&
                this._selectedFrequencyDetails != null &&
                (this._selectedFrequencyDetails.HighEvent > 1 ||
                  this._selectedFrequencyDetails.HighPeriod > 1));
            this.SetIsPRNState(bIsPRNFrequency);
            if (
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            )
              this.IscontentAdminTimesVisible = Visibility.Visible;
            if (
              String.Compare(
                this._doseType.Value,
                DoseTypeCode.TITRATED,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              if (this.IsAdminMethodVisible == Visibility.Collapsed) {
                this.Doselabelvalue = Resource.MedicationForm.sFirstdose;
              } else {
                this.Doselabelvalue = Resource.MedicationForm.sAdminMethod;
              }
              this.IsDoseMandatory = false;
              if (
                this.AccessContraintControls != null &&
                this.AccessContraintControls.Count > 0 &&
                this.AccessContraintControls.Contains('cboFrequency')
              ) {
                this.IsenableFrequency = false;
              } else {
                this.IsenableFrequency = true;
              }
              this.AsRequired = false;
              this.IsenableAsrequired = false;
              bSetNonPRNFreq = true;
              this.oTempAdminScheduleTimes = null;
              this.UpperDose = String.Empty;
            } else {
              if (this.IsAdminMethodVisible == Visibility.Collapsed)
                this.Doselabelvalue = Resource.MedicationForm.sDose;
              else this.Doselabelvalue = Resource.MedicationForm.sAdminMethod;
              if (
                String.Compare(
                  PatientContext.PrescriptionType,
                  PrescriptionTypes.Clerking,
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0
              )
                this.IsDoseMandatory = false;
              else this.IsDoseMandatory = true;
            }
            if (this.InfusionDetails != null) {
              this.InfusionDetails.InfMonitoringperiodVisi =
                Visibility.Collapsed;
              this.InfusionDetails.IsMandatoryMonitoringPeriod = false;
              this.InfusionDetails.IsMandatoryFluid = false;
              if (
                this.InfusionType != null &&
                this.InfusionType.Value == InfusionTypesCode.INTERMITTENT
              ) {
                this.InfusionDetails.IsenableInfusionRate = true;
                this.InfusionDetails.IsenableInfusionRateforLabel = true;
                this.InfusionDetails.IsenableInfusionrateCalculator = true;
              } else if (
                PatientContext.IsINFUSIONON &&
                this.Route != null &&
                this.Route.Tag != null &&
                !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
                (String.Equals(this.Route.Tag.ToString(), '1') ||
                  this.Route.Tag.ToString().Contains('1')) &&
                (this.InfusionDetails.DeliveryDevice == null ||
                  (this.InfusionDetails.DeliveryDevice != null &&
                    String.IsNullOrEmpty(
                      this.InfusionDetails.DeliveryDevice.DisplayText
                    )))
              ) {
                this.InfusionDetails.IsenableInfusionRate = true;
                this.InfusionDetails.IsenableInfusionratenumuom = true;
                this.InfusionDetails.IsenableInfusionrateDenominatoruom = true;
                this.InfusionDetails.IsenableInfusionRateforLabel = true;
                this.InfusionDetails.IsenableInfusionratenumuomlbl = true;
              }
            }
            if (!this.IsenableInfusionPeriod) {
              this.IsenableInfusionPeriod = true;
            }
          } else if (
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.TITRATED,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
            String.Compare(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration
            ) != 0
          ) {
            if (this.IsAdminMethodVisible == Visibility.Collapsed) {
              this.Doselabelvalue = Resource.MedicationForm.sDose;
            } else {
              this.Doselabelvalue = Resource.MedicationForm.sAdminMethod;
            }
            this.IscontentForModificationVisible = Visibility.Visible;
            this.IsenableDose = false;
            this.IsVisibleFrequency = Visibility.Collapsed;
            if (
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
            )
              this.IsDoseMandatory = false;
            else this.IsDoseMandatory = true;
            this.LowerDoseWidth = new GridLength(1, GridUnitType.Star);
            this.HifenWidth = new GridLength(0);
            this.UpperDoseWidth = new GridLength(0);
            this.Dose = String.Empty;
            this.AsRequired = false;
            this.IsenableAsrequired = false;
            this.IsenableStopDate = true;
            bSetNonPRNFreq = true;
          } else {
            this.IscontentForModificationVisible = Visibility.Collapsed;
            this.IscontentAdminTimesVisible = Visibility.Collapsed;
          }
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.MasterFrequencys != null
          ) {
            let Freqs: IEnumerable<CListItem>;
            if (bSetNonPRNFreq) {
              Freqs = this.DefaultDetails.MasterFrequencys.Where(
                (freq) =>
                  freq.Value == 'CC_More' ||
                  (freq.Tag != null &&
                    (ObjectHelper.GetType(freq.Tag).Equals("Array<String>")
                      ? String.Compare((freq.Tag)[0], '0') == 0
                      : String.Compare(freq.Tag.toString(), '0') == 0))
              ).Select((freq) => freq);
            } else {
              Freqs = this.DefaultDetails.MasterFrequencys.AsEnumerable();
            }
            if (
              String.Compare(
                this._doseType.Value,
                DoseTypeCode.NORMAL,
                StringComparison.OrdinalIgnoreCase
              ) != 0 &&
              String.Compare(
                this._doseType.Value,
                DoseTypeCode.DOSAGERANGE,
                StringComparison.OrdinalIgnoreCase
              ) != 0 &&
              String.Compare(
                this._doseType.Value,
                DoseTypeCode.CONDITIONAL,
                StringComparison.OrdinalIgnoreCase
              ) != 0
            ) {
              Freqs = Freqs.Where(
                (freq) =>
                  freq.Value == 'CC_More' ||
                  (freq.Tag != null &&
                    ObjectHelper.GetType(freq.Tag).Equals("Array<String>") &&
                    (freq.Tag).Length >= 2 &&
                    !String.Equals((freq.Tag)[1], 'CC_IPONCENLY'))
              ).Select((freq) => freq);
            }
            this.DefaultDetails.Frequencys =
              new ObservableCollection<CListItem>(Freqs);
              if(Freqs!=null && this.Frequency !=null && Freqs.Where(x=>x.Value==this.Frequency.Value).Count()==0)
              {
                this.Frequency =null;
              }
              
          }
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.NonPRNFrequencies != null
          ) {
            let Freqs: IEnumerable<CListItem>;
            if (bSetNonPRNFreq) {
              Freqs = this.DefaultDetails.NonPRNFrequencies.Where(
                (freq) =>
                  freq.Value == 'CC_More' ||
                  (freq.Tag != null &&
                    (ObjectHelper.GetType(freq.Tag).Equals("Array<String>")
                      ? String.Compare((freq.Tag)[0], '0') == 0
                      : String.Compare(freq.Tag.toString(), '0') == 0))
              ).Select((freq) => freq);
            } else {
              Freqs = this.DefaultDetails.NonPRNFrequencies.AsEnumerable();
            }
            if (
              String.Compare(
                this._doseType.Value,
                DoseTypeCode.TITRATED,
                StringComparison.OrdinalIgnoreCase
              ) == 0 &&
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.ForAdministration
              ) != 0
            ) {
              Freqs = Freqs.Where(
                (freq) =>
                  freq.Value == 'CC_More' ||
                  (freq.Tag != null &&
                    ObjectHelper.GetType(freq.Tag).Equals("Array<String>") &&
                    (freq.Tag).Length >= 2 &&
                    String.Compare(
                      (freq.Tag)[1],
                      'CC_IPONCENLY'
                    ) != 0)
              ).Select((freq) => freq);
            }
            this.DefaultDetails.NonPRNFrequencies =
              new ObservableCollection<CListItem>(Freqs);
          }
        }
        this.CheckAndSetPRNInstFrequencyMandatory();
        this.Setstartdatetimeforinterval();
        this.DCAmendMessage();
      }
      if (
        this._doseType != null &&
        !String.IsNullOrEmpty(this._doseType.Value)
      ) {
        if (
          String.Compare(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 &&
          String.Compare(
            this._doseType.Value,
            DoseTypeCode.TITRATED,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          this.ToolTipForDose = Resource.MedicationForm.sFirstDose_ToolTip;
        } else if (
          String.Compare(
            this._doseType.Value,
            DoseTypeCode.TITRATED,
            StringComparison.OrdinalIgnoreCase
          ) != 0
        ) {
          this.ToolTipForDose = Resource.MedicationForm.txtLowerDose_Tooltip;
        }
      }
      let IsDoseAmndMCI: boolean = false;
      if (
        this.DoseType != null &&
        this.DoseType.Tag != null &&
        this.DoseType.Tag.Equals('Amend')
      ) {
        IsDoseAmndMCI = true;
      }
      if (
        !IsDoseAmndMCI &&
        this.IsClearlstAmendList == true &&
        this.StartDTTM != DateTime.MinValue
      ) {
        if (
          this.oPrescitemVM != null &&
          this._doseType != null &&
          (String.Compare(
            this._doseType.Value,
            DoseTypeCode.VARIABLE,
            StringComparison.OrdinalIgnoreCase
          ) == 0 ||
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.OrdinalIgnoreCase
            ) == 0 ||
            String.Compare(
              this._doseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0)
        ) {
          if (
            PrevDosetype != null &&
            !(
              String.Compare(
                PrevDosetype.Value,
                DoseTypeCode.VARIABLE,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
              String.Compare(
                PrevDosetype.Value,
                DoseTypeCode.STEPPED,
                StringComparison.OrdinalIgnoreCase
              ) == 0 ||
              String.Compare(
                PrevDosetype.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            )
          ) {
            this.MultiDoseDetails =
              new ObservableCollection<MultipleDoseDetail>();
            this.SetAdditionalOptionMessage();
          }
          if (
            !String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.Clerking,
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            this.StartPrescriptionTime = this.StartDTTM;
          } else {
            this.StartPrescriptionTime = this.StartDTTM.Date;
          }
        } else {
          if (
            !this.IsFormviwerChangedIVtoNonIV &&
            !this.IsfrmViewBasicLoaded &&
            this.StartDTTM.Date <= CommonBB.GetServerDateTime().Date
          ) {
            if (this.IsEnableStartdtSeq) {
              this.ResetDTTMForDoseType = true;
              this.StartPrescriptionTime = CommonBB.GetServerDateTime();
              this.StartDTTM = this.StartDTTM.DateTime.AddTime(
                CommonBB.GetServerDateTime()
              );
            }
          } else {
            this.IsFormviwerChangedIVtoNonIV = false;
          }
        }
      }
      if (this.DoseType != null) this.DoseCalcEnableDisable();
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.ForAdministration,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        if (
          this.DoseType != null &&
          !String.IsNullOrEmpty(this.DoseType.Value) &&
          this.oPrescitemVM.bSourceTitratedDoseType &&
          String.Equals(
            this.DoseType.Value,
            DoseTypeCode.TITRATED,
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          !this.oPrescitemVM.bIsReprescribe
        ) {
          this.IsReviewtiratedosesLinkVisibility = Visibility.Visible;
        } else {
          this.IsReviewtiratedosesLinkVisibility = Visibility.Collapsed;
        }
      }
      if (
        value != null &&
        (String.Equals(value.Value, DoseTypeCode.VARIABLE) ||
          String.Equals(value.Value, DoseTypeCode.STEPPED))
      ) {
        this.RemoveDoseFromDuration();
      } else {
        if (!this.AsRequired) {
          this.SetDefaultDurationValues();
        }
      }
      this.RemoveOnceOnlyForSV();
      if (this.DoseType != null) {
        this.CheckReviewUOM4SteppedVariable();
      }
    }
  }
  private _ToolTipForDose: string;
  public get ToolTipForDose(): string {
    return this._ToolTipForDose;
  }
  public set ToolTipForDose(value: string) {
    if (this._ToolTipForDose != value) {
      this._ToolTipForDose = value;
      // NotifyPropertyChanged("ToolTipForDose");
    }
  }
  public DoseCalcEnableDisable(): void {
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails != null
    ) {
      if (
        this.oPrescitemVM.FormViewerDetails.BasicDetails.DoseType != null &&
        !String.IsNullOrEmpty(
          this.oPrescitemVM.FormViewerDetails.BasicDetails.DoseType.Value
        ) &&
        String.Equals(
          this.oPrescitemVM.FormViewerDetails.BasicDetails.DoseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        this.oPrescitemVM.IsDoseCalcEnabled = true;
        if (
          !String.IsNullOrEmpty(this.oPrescitemVM.ItemMainType) &&
          String.Equals(
            this.oPrescitemVM.ItemMainType,
            CConstants.Formulary_Appliance,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          this.oPrescitemVM.IsDoseCalcEnabled = false;
        } else if (
          this.oPrescitemVM.FormViewerDetails != null &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails != null
        ) {
          if (
            !String.IsNullOrEmpty(
              this.oPrescitemVM.FormViewerDetails.BasicDetails.itemSubType
            ) &&
            (String.Equals(
              this.oPrescitemVM.FormViewerDetails.BasicDetails.itemSubType,
              CConstants.SUBTYPE_GAS,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
              String.Equals(
                this.oPrescitemVM.FormViewerDetails.BasicDetails.itemSubType,
                CConstants.SUBTYPE,
                StringComparison.InvariantCultureIgnoreCase
              ) ||
              String.Equals(
                this.oPrescitemVM.FormViewerDetails.BasicDetails.itemSubType,
                CConstants.SUBTYPE_BLOOD,
                StringComparison.InvariantCultureIgnoreCase
              ))
          ) {
            this.oPrescitemVM.IsDoseCalcEnabled = false;
          } else if (
            String.Equals(
              this.oPrescitemVM.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.NONCATALOGUEITEM,
              StringComparison.InvariantCultureIgnoreCase
            ) ||
            String.Equals(
              this.oPrescitemVM.FormViewerDetails.BasicDetails.IdentifyingType,
              CConstants.Precatalog,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.oPrescitemVM.IsDoseCalcEnabled = false;
          } else if (
            this.oPrescitemVM.FormViewerDetails.BasicDetails.Route != null &&
            this.oPrescitemVM.FormViewerDetails.BasicDetails.Route.Tag !=
              null &&
            !String.IsNullOrEmpty(
              this.oPrescitemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString()
            ) &&
            (String.Equals(
              this.oPrescitemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString(),
              '1'
            ) ||
              !this.oPrescitemVM.FormViewerDetails.BasicDetails.Route.Tag.ToString().Contains(
                '0'
              ))
          ) {
            if (
              this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionType !=
                null &&
              this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionType
                .Value != null &&
              (String.Equals(
                this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionType
                  .Value,
                InfusionTypesCode.FLUID
              ) ||
                String.Equals(
                  this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.PCA
                ) ||
                String.Equals(
                  this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionType
                    .Value,
                  InfusionTypesCode.SINGLEDOSEVOLUME
                ))
            ) {
              this.oPrescitemVM.IsDoseCalcEnabled = false;
            }
          }
        }
        let bContInfType: boolean = false;
        let bDynamicWithoutDose: boolean = false;
        if (
          this.Route != null &&
          this.Route.Tag != null &&
          !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
          String.Equals(this.Route.Tag.ToString(), '1') &&
          ((this.InfusionType != null &&
            !String.IsNullOrEmpty(this.InfusionType.Value) &&
            String.Equals(
              this.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS
            )) ||
            this.InfusionType == null)
        ) {
          bContInfType = true;
        }
        if (
          this.oPrescitemVM.FormViewerDetails.BHasFormViewParams &&
          this.oPrescitemVM.FormViewerDetails.BasicControls != null &&
          !this.oPrescitemVM.FormViewerDetails.BasicControls.Contains(
            CConstants.CONST_DOSE
          )
        ) {
          bDynamicWithoutDose = true;
        }
        if (
          this.oPrescitemVM.FormViewerDetails.BasicDetails
            .IsAdminMethodVisible == Visibility.Visible ||
          String.Equals(
            this.oPrescitemVM.FormViewerDetails.BasicDetails.Doselabelvalue,
            Resource.MedicationForm.sAdminMethod,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          !this.oPrescitemVM.FormViewerDetails.BasicDetails.IsenableDose ||
          (this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionDetails !=
            null &&
            !this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionDetails
              .IsenableInfusionRate &&
            bContInfType) ||
          bDynamicWithoutDose
        ) {
          this.oPrescitemVM.IsDoseCalcEnabled = false;
        }
      } else this.oPrescitemVM.IsDoseCalcEnabled = false;
    }
  }
  public get SelectedDoseDetail(): MultipleDoseDetail {
    return this._selectedDoseDetail;
  }
  public set SelectedDoseDetail(value: MultipleDoseDetail) {
    this._selectedDoseDetail = value;
    // NotifyPropertyChanged("SelectedDoseDetail");
  }
  public get MultiDoseDetails(): ObservableCollection<MultipleDoseDetail> {
    return this._doseDetails;
  }
  public set MultiDoseDetails(value: ObservableCollection<MultipleDoseDetail>) {
    if(this._doseDetails && value){
      this._doseDetails.Clear();
      value.forEach(item=>{this._doseDetails.Add(item)})
    }
    else{
        this._doseDetails = value;
    }
    /*if (!Helper.ReferenceEquals(this._doseDetails, value)) {
      this._doseDetails = value;
      // NotifyPropertyChanged("MultiDoseDetails");
    }*/
  }
  public get TitratedDoseDetails(): TitratedDoseVM {
    return this._tritrateddoseDetails;
  }
  public set TitratedDoseDetails(value: TitratedDoseVM) {
    if (!Helper.ReferenceEquals(this._tritrateddoseDetails, value)) {
      this._tritrateddoseDetails = value;
      // NotifyPropertyChanged("TitratedDoseDetails");
    }
  }
  public get DupTitratedDoseVM(): TitratedDoseVM {
    return this.dupTitratedDoseVM;
  }
  public set DupTitratedDoseVM(value: TitratedDoseVM) {
    if (this.dupTitratedDoseVM != value) {
      this.dupTitratedDoseVM = value;
      // NotifyPropertyChanged("DupTitratedDoseVM");
    }
  }
  public get TitratedDoseInstructions(): string {
    return this._titratedDoseInstructions;
  }
  public set TitratedDoseInstructions(value: string) {
    if (this._titratedDoseInstructions != value) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      if (!this.lstAmendedFlds.Contains('TitratedDoseInstructions')) {
        this.lstAmendedFlds.Add('TitratedDoseInstructions');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this.IsenableModificationcomments = true;
      this._titratedDoseInstructions = value;
      //NotifyPropertyChanged("TitratedDoseInstructions");
    }
  }
  private _odefTitratedDoseInstruction: CListItem;
  public get odefTitratedDoseInstruction(): CListItem {
    return this._odefTitratedDoseInstruction;
  }
  public set odefTitratedDoseInstruction(value: CListItem) {
    this._odefTitratedDoseInstruction = value;
  }
  public get TitratedDoseAdtnlComments(): string {
    return this._titratedDoseAdtnlComments;
  }
  public set TitratedDoseAdtnlComments(value: string) {
    if (this._titratedDoseAdtnlComments != value) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      if (!this.lstAmendedFlds.Contains('TitratedDoseAdtnlComments')) {
        this.lstAmendedFlds.Add('TitratedDoseAdtnlComments');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this.IsenableModificationcomments = true;
      this._titratedDoseAdtnlComments = value;
      // NotifyPropertyChanged("TitratedDoseAdtnlComments");
    }
  }
  public get TitratedDoseInstruction(): CListItem {
    return this._TitratedDoseInstruction;
  }
  public set TitratedDoseInstruction(value: CListItem) {
    if (!Helper.ReferenceEquals(this._TitratedDoseInstruction, value)) {
      if (!this.isFormViewDataLoaded) {
        this._TitratedDoseInstruction = value;
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('TitratedDoseInstructions')) {
          this.lstAmendedFlds.Add('TitratedDoseInstructions');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._TitratedDoseInstruction = value;
      }
      // super.NotifyPropertyChanged("TitratedDoseInstructions");
    }
  }
  public get TreatmentToContinue(): CListItem {
    return this._treatmentToContinue;
  }
  public set TreatmentToContinue(value: CListItem) {
    if (Helper.ReferenceEquals(this._treatmentToContinue, value) != true) {
      if (!this.isFormViewDataLoaded) {
        this._treatmentToContinue = value;
        // NotifyPropertyChanged("TreatmentToContinue");
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('TreatmentToContinue')) {
          this.lstAmendedFlds.Add('TreatmentToContinue');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this._treatmentToContinue = value;
        if (this.DefaultDetails != null)
          this._treatmentToContinue = this.GetComboValue(
            value,
            this.DefaultDetails.TreatToContinue
          );
        else this._treatmentToContinue = value;
        // NotifyPropertyChanged("TreatmentToContinue");
        if (
          this._treatmentToContinue != null &&
          !String.IsNullOrEmpty(this._treatmentToContinue.DisplayText) &&
          this.DefaultDetails != null &&
          this.DefaultDetails.TreatToContinue != null &&
          !this.DefaultDetails.TreatToContinue.Contains(
            this._treatmentToContinue
          )
        ) {
          this.DefaultDetails.TreatToContinue.Add(this._treatmentToContinue);
        }
      }
    }
  }
  public get NoOfInstallments(): number {
    return this._noOfInstallments;
  }
  public set NoOfInstallments(value: number) {
    if (!Helper.ReferenceEquals(this._noOfInstallments, value)) {
      this.ClearPrescribedQuantity();
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('NoOfInstallments')) {
        this.lstAmendedFlds.Add('NoOfInstallments');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._noOfInstallments = value;
      // NotifyPropertyChanged("NoOfInstallments");
    }
  }
  public get MedClerkModifyReason(): CListItem {
    return this._medClerkModifyReason;
  }
  public set MedClerkModifyReason(value: CListItem) {
    if (!Helper.ReferenceEquals(this._medClerkModifyReason, value)) {
      if (!this.isFormViewDataLoaded) {
        this._medClerkModifyReason = value;
      } else {
        if (this.DefaultDetails != null)
          this._medClerkModifyReason = this.GetComboValue(
            value,
            this.DefaultDetails.ClerkingReasonforModification
          );
        else this._medClerkModifyReason = value;
        if (
          this.IsMandatoryReasonForMedClerkModify &&
          this != null &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.IsReasonForMedicationClerkModifyVisible ==
            Visibility.Visible &&
          this.oPrescitemVM.IsReasonForModificationVisible ==
            Visibility.Visible &&
          this._bisAmend
        ) {
          if (
            value != null &&
            !String.IsNullOrEmpty(value.Value) &&
            this.DefaultDetails != null &&
            this.DefaultDetails.ReasonforModification != null &&
            this.DefaultDetails.ReasonforModification.Count > 0
          ) {
            let oDefItem = this.DefaultDetails.ReasonforModification.Where(
              (otem) => otem.Value == value.Value
            ).Select((otem) => otem);
            if (
              oDefItem != null &&
              oDefItem.Count() > 0 &&
              !this.IsRestoreOldValues
            ) {
              this.ReasonforModification = oDefItem.FirstOrDefault();
            }
          }
        }
      }
      // NotifyPropertyChanged("MedClerkModifyReason");
    }
  }
  public get NONCatalogueReason(): CListItem {
    return this._nonCatalogueReason;
  }
  public set NONCatalogueReason(value: CListItem) {
    if (value != this._nonCatalogueReason) {
      if (this.DefaultDetails != null)
        this._nonCatalogueReason = this.GetComboValue(
          value,
          this.DefaultDetails.NONCatalogueReasons
        );
      else this._nonCatalogueReason = value;
      if (!this.lstAmendedFlds.Contains('NONCatalogueReason')) {
        this.lstAmendedFlds.Add('NONCatalogueReason');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      // NotifyPropertyChanged("NONCatalogueReason");
      this.IsOtherNONCatReasonMandatory =
        this._nonCatalogueReason != null &&
        String.Compare(
          this._nonCatalogueReason.Value,
          'CC_Other',
          StringComparison.OrdinalIgnoreCase
        ) == 0;
    }
  }
  public get OtherNONCatalogueReason(): string {
    return this._otherNONCatalogueReason;
  }
  public set OtherNONCatalogueReason(value: string) {
    this._otherNONCatalogueReason = value;
    // NotifyPropertyChanged("OtherNONCatalogueReason");
  }
  public get IsOtherNONCatReasonMandatory(): boolean {
    return this._isOtherNONCatReasonMandatory;
  }
  public set IsOtherNONCatReasonMandatory(value: boolean) {
    this._isOtherNONCatReasonMandatory = value;
    // NotifyPropertyChanged("IsOtherNONCatReasonMandatory");
  }
  public get ExpiryDate(): DateTime {
    return this._expiryDate;
  }
  public set ExpiryDate(value: DateTime) {
    if (!Helper.ReferenceEquals(this._expiryDate, value)) {
      this._expiryDate = value;
      // NotifyPropertyChanged("ExpiryDate");
    }
  }
  public DischargeLeaveDate: DateTime = DateTime.MinValue;
  public getpreviousquantity: string;
  public get Quantity(): string {
    return this._quantity;
  }
  public IsQuantityMessageBoxValidation:boolean = false;
  public IsCheckQuantityValidation:boolean = false;
  public set Quantity(value: string) {
    if (!Helper.ReferenceEquals(this._quantity, value)) {
      if (this.isFormViewDataLoaded) {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('Quantity')) {
          this.lstAmendedFlds.Add('Quantity');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
      }
      this.getpreviousquantity = this._quantity;
      this._quantity = !String.IsNullOrEmpty(value)
        ? Convert.ToDouble(value).ToString()
        : String.Empty;
      if (this.QuantTaboutFormClose) {
        return;
      }
      if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Discharge,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Outpatient,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Leave,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        let dynamicsupplyman: boolean = false;
        this.launchsupplyinstrmezzanineCheck = false;
        if (this.oPrescitemVM.FormViewerDetails.BasicControls != null) {
          let indexsupply: number = Array.IndexOf(
            this.oPrescitemVM.FormViewerDetails.BasicControls,
            this.oPrescitemVM.FormViewerDetails.BasicControls.Where((x) =>
              x.Contains('CC_SUPLYINSTR')
            ).FirstOrDefault()
          );
          if (
            this.oPrescitemVM.FormViewerDetails.MandatoryControls != null &&
            this.oPrescitemVM.FormViewerDetails.MandatoryControls.Length >=
              indexsupply &&
            indexsupply != -1
          ) {
            dynamicsupplyman =
              this.oPrescitemVM.FormViewerDetails.MandatoryControls[
                indexsupply
              ];
          }
        }
        if (
          this.oPrescitemVM.FormViewerDetails.BasicDetails
            .IsenableSupplyInstruction &&
          !String.IsNullOrEmpty(this.getpreviousquantity) &&
          Convert.ToDouble(this.getpreviousquantity) == 0 &&
          !String.IsNullOrEmpty(this._quantity) &&
          Convert.ToDouble(this._quantity) != 0 &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails.SupplyInsText !=
            Resource.TechValProdOpt.SelectSupInstrution
        ) {
          this.launchsupplyinstrmezzanineCheck = true;
        }
        if (
          !String.IsNullOrEmpty(this._quantity) &&
          Convert.ToDouble(this._quantity) == 0 &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails
            .IsVisibleSupplyInstr == Visibility.Visible &&
          !this.oPrescitemVM.FormViewerDetails.BasicDetails
            .IsenableSupplyInstruction &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails
            .AccessContraintControls != null &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails
            .AccessContraintControls.Count > 0 &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails.AccessContraintControls.Contains(
            'cboSupplyInstruction'
          )
        ) {
          this.oPrescitemVM.FormViewerDetails.BasicDetails.IsenableSupplyInstruction =
            true;
          this.oPrescitemVM.FormViewerDetails.BasicDetails.AccessContraintControls.Remove(
            'cboSupplyInstruction'
          );
          this.IsMandatorySupplyInstr = true;
        } else if (
          (this.oPrescitemVM.FormViewerDetails.BHasFormViewParams &&
            dynamicsupplyman) ||
          (this.oPrescitemVM.FormViewerDetails.BasicDetails
            .IsenableSupplyInstruction &&
            !String.IsNullOrEmpty(this._quantity) &&
            Convert.ToDouble(this._quantity) == 0)
        ) {
          this.IsMandatorySupplyInstr = true;
        } else {
          this.IsMandatorySupplyInstr = false;
        }
        if (
          this.launchsupplyinstrmezzanineCheck &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails
            .IsenableSupplyInstruction
        ) {
          if(!this.IsCheckQuantityValidation){
            let objTech: iMessageBox = new iMessageBox();
            objTech.Title = Resource.MedicationForm.MsgBoxTitleName;
            objTech.MessageButton = MessageBoxButton.YesNo;
            objTech.IconType = MessageBoxType.Question;
            objTech.MessageBoxClose = (s, e) => {
              this.objmsgtech_Close(s, e);
            };
            objTech.Message = Resource.MedicationForm.SupplyinstrModify_Message;
            objTech.Show();
          }else{
            this.IsQuantityMessageBoxValidation = true;
          }
        }
      }
      // NotifyPropertyChanged("Quantity");
    }
  }
  public QuantityMessageBoxValidation(){
    if(this.IsQuantityMessageBoxValidation){
          let objTech: iMessageBox = new iMessageBox();
          objTech.Title = Resource.MedicationForm.MsgBoxTitleName;
          objTech.MessageButton = MessageBoxButton.YesNo;
          objTech.IconType = MessageBoxType.Question;
          objTech.MessageBoxClose = (s, e) => {
            this.objmsgtech_Close(s, e);
          };
          objTech.Message = Resource.MedicationForm.SupplyinstrModify_Message;
          objTech.Show();
        }
    this.IsQuantityMessageBoxValidation = false;
    }

  public dialogRefCustom: DialogRef;
  public dialogRefCustomInstance: medsupplydispensinginstructionstab;
  public launchsupplyinstrmezzanine(temp?: any, isTVCA?: boolean): void {
    // Busyindicator.SetStatusBusy('AddSupplyInstructionChildClicked');
    if (this.oPrescitemVM != null) {
      //Not Required for LHS. To be Re-Visited.
      let oSupInst: medsupplydispensinginstructionstab = new medsupplydispensinginstructionstab();
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails
          .LaunchedFromTechValidate == false
      ) {
        this.oPrescitemVM.FormViewerDetails.BasicDetails.DisplayFlag = false;
      } else {
        this.oPrescitemVM.FormViewerDetails.BasicDetails.DisplayFlag = true;
      }
      oSupInst.PrescriptionItemVM = this.oPrescitemVM;
      let dialogWindowHeight = (750/window.devicePixelRatio);
      let Callback = (s, e) => {
        if (s != null) {
          this.dialogRefCustom = s;
          this.dialogRefCustomInstance = e;
        }
      }

      if (((!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformMedchart) &&
        String.Equals(
          QueryStringInfo.IsLaunchformMedchart,
          'True',
          StringComparison.InvariantCultureIgnoreCase
        )) || (!String.IsNullOrEmpty(QueryStringInfo.IsClinicalNote) &&
          String.Equals(
            QueryStringInfo.IsClinicalNote,
            'Yes',
            StringComparison.InvariantCultureIgnoreCase
          )) || (!String.IsNullOrEmpty(QueryStringInfo.FromPreschart) &&
            String.Equals(
              QueryStringInfo.FromPreschart,
              'True',
              StringComparison.InvariantCultureIgnoreCase
            )) || (!String.IsNullOrEmpty(QueryStringInfo.IsLaunchformPreschartReview) &&
            String.Equals(
              QueryStringInfo.IsLaunchformPreschartReview,
              'True',
              StringComparison.InvariantCultureIgnoreCase
            ))) && window.devicePixelRatio == 1.25) {
        dialogWindowHeight = dialogWindowHeight - 45;
      }
      
      if (isTVCA) {
        // ObjectHelper.stopFinishAndCancelEvent(true);
        AppActivity.OpenWindowTVCA(
          Resource.TechValidate.Supply_Title, 
          medsupplydispensinginstructionstab, 
          880, 
          dialogWindowHeight, 
          this.oPrescitemVM,
          (s, e) => { this.supplydispensinginstruction_Close(s, isTVCA); },
          WindowButtonType.OkCancel,
          temp,
          this.dialogRefCustom,
          Callback
        );
      }
      else {
        // ObjectHelper.stopFinishAndCancelEvent(true);
        AppActivity.OpenWindow(
          Resource.TechValidate.Supply_Title,
          oSupInst,
          (s, e) => {
            this.supplydispensinginstruction_Close(s);
          },
          Resource.TechValidate.SupplyDisp_Update_Text,
          false,
          dialogWindowHeight,
          880,
          false,
          WindowButtonType.OkCancel,
          null
        );
      }
    }
  }

  supplydispensinginstruction_Close(args: AppDialogEventargs, isTVCA?: boolean): void {
    this.oChildWindow = args.AppChildWindow;
    if (args.Result == AppDialogResult.Cancel) {
      let iMsgBox: iMessageBox = ObjectHelper.CreateObject(new iMessageBox(), {
        Title: Resource.TechValidate.Titles,
        Message: disconcan1.Cancel_Error_Message,
        MessageButton: MessageBoxButton.YesNo,
        IconType: MessageBoxType.Question,
      });
      iMsgBox.MessageBoxClose = (s, e) => {
        this.iMsgBox_MessageBoxClose_App(s, e, isTVCA);
      };
      iMsgBox.Show();
    } else if (args.Result == AppDialogResult.Ok) {
      if (isTVCA) this.SetTabContents(args);
      let oContent = ObjectHelper.CreateType<medsupplydispensinginstructionstab>(args.Content.Component, medsupplydispensinginstructionstab);
      let oSupplyDispensingInstructionsVM: SupplyDispensingInstructionsVM = null;
      let oMedProductoptionsVM: medTechvalProdOptVM = null;
      this.oPrescitemVM.IsProdAvailForChild = false;
      if (oContent != null && oContent.tab1 != null && oContent.tab1.Items.Count > 0) {
          if (String.Compare(oContent.tab1.SelectedKey, Resource.TechValidate.SupDet) == 0) {
              if (oContent.tab1.SelectedContent != null && (ObjectHelper.CreateType<medsupplydispensinginstructions>(oContent.tab1.SelectedContent, medsupplydispensinginstructions)) != null && (ObjectHelper.CreateType<medsupplydispensinginstructions>(oContent.tab1.SelectedContent, medsupplydispensinginstructions)).DataContext != null) {
                  oSupplyDispensingInstructionsVM = ObjectHelper.CreateType<SupplyDispensingInstructionsVM>((ObjectHelper.CreateType<medsupplydispensinginstructions>(oContent.tab1.SelectedContent, medsupplydispensinginstructions)).DataContext, SupplyDispensingInstructionsVM);
              }
          }
          else {
              oSupplyDispensingInstructionsVM = ObjectHelper.CreateType<SupplyDispensingInstructionsVM>((ObjectHelper.CreateType<medsupplydispensinginstructions>((ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[0], iTabItem)).Content, medsupplydispensinginstructions)).DataContext, SupplyDispensingInstructionsVM);
          }
          if (oSupplyDispensingInstructionsVM != null && this.oPrescitemVM != null) {
              if (this.bMultiDispSup && this.oPrescitemVM != null && this.oPrescitemVM.FormViewerDetails != null && this.oPrescitemVM.FormViewerDetails.TechvalidateCADetails != null && this.oPrescitemVM.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems != null) {
                  let nPrescItemsCount: number = this.oPrescitemVM.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems.Count;
                  for (let i: number = 0; i < nPrescItemsCount; i++) {
                      if (this.oPrescitemVM.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[i].IsSupDispEnable)
                          this.oPrescitemVM.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[i] = this.SetSupplyDispensingInstructions(this.oPrescitemVM.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems[i], oSupplyDispensingInstructionsVM);
                  }
              }
              else {
                  this.oPrescitemVM = this.SetSupplyDispensingInstructions(this.oPrescitemVM, oSupplyDispensingInstructionsVM);
              }
              if (String.Compare(oContent.tab1.SelectedKey, Resource.TechValidate.ReqHis, StringComparison.OrdinalIgnoreCase) == 0) {
                  oContent.tab1.Click(Resource.TechValidate.SupDet, true);
              }
              if (String.Compare(oContent.tab1.SelectedKey, Resource.TechValidate.ProdOpt) == 0) {
                  if ((ObjectHelper.CreateType<medtechvalProdOpt>(oContent.tab1.SelectedContent, medtechvalProdOpt)) != null) {
                      oMedProductoptionsVM = ObjectHelper.CreateType<medTechvalProdOptVM>((ObjectHelper.CreateType<medtechvalProdOpt>(oContent.tab1.SelectedContent, medtechvalProdOpt)).DataContext, medTechvalProdOptVM);
                      if (oMedProductoptionsVM != null && oMedProductoptionsVM.oitems != null && oMedProductoptionsVM.oitems.FormViewerDetails != null && oMedProductoptionsVM.oitems.FormViewerDetails.TechValidateDetails != null) {
                          oMedProductoptionsVM.oitems.FormViewerDetails.TechValidateDetails.TechValidatedItems = oMedProductoptionsVM.TechValidatedItems;
                      }
                  }
              }
              else {
                  if (oContent != null && oContent.tab1 != null && oContent.tab1.Items != null && oContent.tab1.Items.Count > 1 && (ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem)) != null && (ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem)).Content != null && (ObjectHelper.CreateType<medtechvalProdOpt>((ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem)).Content, medtechvalProdOpt)) != null && (ObjectHelper.CreateType<medtechvalProdOpt>((ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem)).Content, medtechvalProdOpt)).DataContext != null) {
                      oMedProductoptionsVM = ObjectHelper.CreateType<medTechvalProdOptVM>((ObjectHelper.CreateType<medtechvalProdOpt>((ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem)).Content, medtechvalProdOpt)).DataContext, medTechvalProdOptVM);
                      if (oMedProductoptionsVM != null && oMedProductoptionsVM.oitems != null && oMedProductoptionsVM.oitems.FormViewerDetails != null && oMedProductoptionsVM.oitems.FormViewerDetails.TechValidateDetails != null) {
                          oMedProductoptionsVM.oitems.FormViewerDetails.TechValidateDetails.TechValidatedItems = oMedProductoptionsVM.TechValidatedItems;
                      }
                  }
              }
              // ObjectHelper.stopFinishAndCancelEvent(false);
              if (isTVCA) this.oChildWindow['TVCAdupDialogRef'].close();
              this.oChildWindow.DialogResult = true;
              let ParentItem: PrescriptionItemVM = null;
              if (this.oPrescitemVM != null && this.oPrescitemVM.FormViewerDetails != null && this.oPrescitemVM.FormViewerDetails.BasicDetails != null) {
                  let nCount: number = 0;
                  let childsOfMCIItem: ObservableCollection<PrescriptionItemVM> = null;
                  if (this.oPrescitemVM.FormViewerDetails.BasicDetails != null && this.oPrescitemVM.FormViewerDetails.BasicDetails.ParentMCIItem != null) {
                      ParentItem = this.oPrescitemVM.FormViewerDetails.BasicDetails.ParentMCIItem;
                      if (this.oPrescitemVM.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild != null && this.oPrescitemVM.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild.Count > 0) {
                          childsOfMCIItem = this.oPrescitemVM.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild;
                          nCount = this.oPrescitemVM.FormViewerDetails.BasicDetails.ParentMCIItem.PresTechValidatedItemsChild.Count;
                      }
                  }
                  let enabledSupplyInst: boolean = false;
                  for (let i: number = 0; i <= nCount - 1; i++) {
                      if (childsOfMCIItem[i] != null && ((childsOfMCIItem[i].FormViewerDetails.BasicDetails.SelectedsupplyInstruction != null && childsOfMCIItem[i].FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Count > 0) || !String.IsNullOrEmpty(childsOfMCIItem[i].FormViewerDetails.BasicDetails.Supplycomments) || !String.IsNullOrEmpty(childsOfMCIItem[i].FormViewerDetails.BasicDetails.SupplyInsVal) || (childsOfMCIItem[i].SelectedSupplyreq != null && !String.Equals(childsOfMCIItem[i].SelectedSupplyreq.Value, Resource.TechValidate.Empty)) || (DateTime.NotEquals(childsOfMCIItem[i].FormViewerDetails.BasicDetails.NextSupplyDate, DateTime.MinValue)) || (childsOfMCIItem[i].FormViewerDetails.BasicDetails.TechValSupplyInst != null && !String.IsNullOrEmpty(childsOfMCIItem[i].FormViewerDetails.BasicDetails.TechValSupplyInst.Value)) || (childsOfMCIItem[i].FormViewerDetails.TechValidateDetails != null && childsOfMCIItem[i].FormViewerDetails.TechValidateDetails.TechValidatedItems != null && childsOfMCIItem[i].FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0))) {
                          this.EnableDisableSupplyLinks(ParentItem, false);
                          enabledSupplyInst = true;
                      }
                      else {
                          if (ParentItem != null && !enabledSupplyInst) {
                              this.EnableDisableSupplyLinks(ParentItem, true);
                          }
                      }
                  }
                  if (!String.IsNullOrEmpty(this.oPrescitemVM.ItemSubType) && String.Equals(this.oPrescitemVM.ItemSubType, "CC_MULCMPNTITM", StringComparison.CurrentCultureIgnoreCase) && this.oPrescitemVM.PresTechValidatedItemsChild != null && this.oPrescitemVM.PresTechValidatedItemsChild.Count > 0 && this.oPrescitemVM.FormViewerDetails.TechValidateDetails != null && this.oPrescitemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems != null && this.oPrescitemVM.FormViewerDetails.TechValidateDetails.TechValidatedItems.Count > 0) {
                      this.oPrescitemVM.PresTechValidatedItemsChild.forEach( (child)=> {
                          child.EnableChildMCIComp = false;
                      });
                  }
              }
              if (String.Compare(oContent.tab1.SelectedKey, Resource.TechValidate.ProdOpt, StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(oContent.tab1.SelectedKey, Resource.TechValidate.SupDet, StringComparison.OrdinalIgnoreCase) == 0) {
                  if (oContent.tab1.Items != null && oContent.tab1.Items.Count > 1 && (ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem)) != null && (ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem)).Content != null  && String.Compare((ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem)).Key, Resource.TechValidate.ProdOpt, StringComparison.OrdinalIgnoreCase) == 0) {
                      (ObjectHelper.CreateType<medtechvalProdOpt>((ObjectHelper.CreateType<iTabItem>(oContent.tab1.Items[1], iTabItem))?.Content, medtechvalProdOpt))?.okButtonClick();
                      if (this.TechCASupplyInstrClick != null) {
                          this.TechCASupplyInstrClick(this.oPrescitemVM);
                      }
                  }
              }
              if (ParentItem != null && ParentItem.PresTechValidatedItemsChild != null && ParentItem.PresTechValidatedItemsChild.Count > 0 && ParentItem.FormViewerDetails != null && ParentItem.FormViewerDetails.TechValidateDetails != null && ParentItem.FormViewerDetails.TechValidateDetails.PresTechValidatedItems != null && ParentItem.FormViewerDetails.TechValidateDetails.PresTechValidatedItems.Count > 0 && ParentItem.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild != null && ParentItem.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild.Count > 0 && this.oPrescitemVM != null && this.oPrescitemVM.FormViewerDetails != null && this.oPrescitemVM.FormViewerDetails.TechValidateDetails != null) {
                  for (let iCnt: number = 0; iCnt < ParentItem.PresTechValidatedItemsChild.Count; iCnt++) {
                      if (ParentItem.PresTechValidatedItemsChild[iCnt].FormViewerDetails.BasicDetails.IdentifyingOID == this.oPrescitemVM.FormViewerDetails.BasicDetails.IdentifyingOID && ParentItem.PresTechValidatedItemsChild[iCnt].FormViewerDetails.BasicDetails.IdentifyingName.Equals(this.oPrescitemVM.FormViewerDetails.BasicDetails.IdentifyingName, StringComparison.InvariantCultureIgnoreCase)) {
                          ParentItem.PresTechValidatedItemsChild[iCnt] = this.oPrescitemVM;
                          ParentItem.FormViewerDetails.TechValidateDetails.PresTechValidatedItems[0].PresTechValidatedItemsChild[iCnt] = this.oPrescitemVM;
                      }
                      if (ParentItem.FormViewerDetails.TechValidateDetails.SelectedPrescItem != null && ParentItem.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild != null && ParentItem.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild.Count > 0 && ParentItem.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[iCnt].FormViewerDetails.BasicDetails.IdentifyingOID == this.oPrescitemVM.FormViewerDetails.BasicDetails.IdentifyingOID) {
                          ParentItem.FormViewerDetails.TechValidateDetails.SelectedPrescItem.PresTechValidatedItemsChild[iCnt] = this.oPrescitemVM;
                      }
                  }
              }
          }
      }
                
    }
    this.bMultiDispSup = false;
    Busyindicator.SetStatusIdle('AddSupplyInstructionChildClicked');
    Busyindicator.SetStatusIdle('TechParentSelect');
  }

  private SetTabContents(args: AppDialogEventargs) {
    let items = args.Content.tab1.Items;
    args.Content.Component = args.Content;
    for (let i = 0; i < items.Count; i++) {
      if (items[i].IsSelected) {
        args.Content.tab1.SelectedKey = items[i].Key;
        args.Content.tab1.SelectedIndex = i;
        args.Content.tab1.SelectedContent = items[i].Content;
      }
    }
  }


  private EnableDisableSupplyLinks(
    ParentItem: PrescriptionItemVM,
    isEnable: boolean
  ): void {
    if (ParentItem != null) ParentItem.EnableParentMCIItem = isEnable;
    else if (
      this.oPrescitemVM.PresTechValidatedItemsChild != null &&
      this.oPrescitemVM.PresTechValidatedItemsChild.Count > 0 &&
      !this.oPrescitemVM.PresTechValidatedItemsChild.Any(
        (x) => x.FluidPrescribableItemListOID > 0
      )
    ) {
      this.oPrescitemVM.PresTechValidatedItemsChild.forEach((child) => {
        child.EnableChildMCIComp = isEnable;
      });
    }
  }
  SetSupplyDispensingInstructions(
    oSelectedItem: PrescriptionItemVM,
    oSupplyDispensingInstructionsVM: SupplyDispensingInstructionsVM
  ): PrescriptionItemVM {
    let bSupDisp: boolean = false;
    if (
      oSelectedItem != null &&
      oSelectedItem.FormViewerDetails != null &&
      oSelectedItem.FormViewerDetails.BasicDetails != null
    )
      oSelectedItem.FormViewerDetails.BasicDetails.TechsupplyInstText = null;
    let sSuppToolTipText: string = String.Empty;
    if (
      oSupplyDispensingInstructionsVM != null &&
      oSelectedItem != null &&
      oSelectedItem.FormViewerDetails != null &&
      oSelectedItem.FormViewerDetails.BasicDetails != null
    ) {
      if (
        oSelectedItem.FormViewerDetails.BasicDetails.TechValSupplyInst != null
      )
        oSelectedItem.FormViewerDetails.BasicDetails.TechsupplyInstText =
          oSelectedItem.FormViewerDetails.BasicDetails.TechValSupplyInst.Value;
      else {
      }
      if (
        oSelectedItem != null &&
        oSelectedItem.FormViewerDetails != null &&
        oSelectedItem.FormViewerDetails.BasicDetails != null
      ) {
        oSelectedItem.FormViewerDetails.BasicDetails.DoClinicallyVerify();
        oSelectedItem.bIsSupplyDispensingInstructionSet = false;
      }
      let oSupplyInstrItems: ObservableCollection<CListItem> =
        oSupplyDispensingInstructionsVM.SupplyInstructionsList;
      if (
        oSelectedItem.iSSupplyrequest == null &&
        oSupplyDispensingInstructionsVM.iSupplyrequest != null
      ) {
        oSelectedItem.iSSupplyrequest = new ObservableCollection<CListItem>();
        oSupplyDispensingInstructionsVM.iSupplyrequest.forEach((item) => {
          oSelectedItem.iSSupplyrequest.Add(item);
        });
      }
      oSelectedItem.SelectedSupplyreq =
        oSupplyDispensingInstructionsVM.SelectedSupplyrequest;
      oSelectedItem.SupplyreqDisplay =
        oSupplyDispensingInstructionsVM.SupplyreqDisplay;
      oSelectedItem.FormViewerDetails.BasicDetails.NextSupplyDate =
        oSupplyDispensingInstructionsVM.NextSupDTTM;
      if (oSupplyInstrItems != null && oSupplyInstrItems.Count > 0) {
        oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction =
          new ObservableCollection<CListItem>(
            oSupplyInstrItems
              .Where((c) => c.IsSelected)
              .Select((s) => s)
              .Distinct()
          );
       
        if (
          oSelectedItem.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction != null &&
          oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
            .Count > 0
        ) {
          bSupDisp = true;
          let oSupplyInstTxt: string = String.Empty;
          let oSupplyInstVal: string = String.Empty;
          oSelectedItem.FormViewerDetails.BasicDetails.TechValiadteSupplyInstWithConactSemiColon(
            oSelectedItem.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction,
            (o1) => {
              oSupplyInstTxt = o1;
            },
            (o2) => {
              oSupplyInstVal = o2;
            }
          );
          this.SupplyInsText = oSupplyInstTxt;
          sSuppToolTipText = oSupplyInstTxt;
          oSelectedItem.FormViewerDetails.BasicDetails.SupplyInsVal =
            oSupplyInstVal;
            //-- Sai Added for Parent value to child--
            // if (!oSelectedItem.FormViewerDetails.TechValidateDetails.IslaunchedFromProductOptions){
            //   oSelectedItem.FormViewerDetails.TechValidateDetails.ProductSelectedsupplyInstruction =
            //   oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction;
            // }
            if(this.DynamicControlIsLoaded)
            this.DynamicControlEndInstallLoaded.emit(true);
          if (oSelectedItem.FormViewerDetails.TechValidateDetails != null) {
            oSelectedItem.FormViewerDetails.TechValidateDetails.supplyinstrtext =
              oSupplyInstTxt;
            oSelectedItem.FormViewerDetails.TechValidateDetails.supplyinstrvalue =
              oSupplyInstVal;
          }
          if (
            !String.IsNullOrEmpty(oSelectedItem.ItemSubType) &&
            String.Equals(
              oSelectedItem.ItemSubType,
              'CC_MULCMPNTITM',
              StringComparison.CurrentCultureIgnoreCase
            )
          ) {
            if (
              oSelectedItem != null &&
              oSelectedItem.PresTechValidatedItemsChild != null &&
              oSelectedItem.PresTechValidatedItemsChild.Count > 0
            ) {
              oSelectedItem.PresTechValidatedItemsChild.forEach((child) => {
                child.EnableChildMCIComp = false;
              });
            } else if (
              oSelectedItem != null &&
              !String.IsNullOrEmpty(oSelectedItem.ItemSubType) &&
              String.Equals(
                this.ItemSubType,
                'CC_MULCMPNTITM',
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              oSelectedItem.FormViewerDetails != null &&
              oSelectedItem.FormViewerDetails.TechvalidateCADetails != null &&
              oSelectedItem.FormViewerDetails.TechvalidateCADetails
                .PresTechValidatedItems != null &&
              oSelectedItem.FormViewerDetails.TechvalidateCADetails
                .PresTechValidatedItems.Count > 0
            ) {
              let parentItem: PrescriptionItemVM =
                oSelectedItem.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems.Where(
                  (x) =>
                    x.PrescriptionItemOID == oSelectedItem.PrescriptionItemOID
                ).First();
              if (parentItem != null) {
                parentItem.EnableParentMCIItem = false;
              }
            }
          } else if (
            oSelectedItem != null &&
            oSelectedItem.FormViewerDetails != null &&
            oSelectedItem.FormViewerDetails.TechValidateDetails != null
          ) {
            let ParentItem: PrescriptionItemVM =
              oSelectedItem.FormViewerDetails.BasicDetails.ParentMCIItem;
            if (ParentItem != null) {
              ParentItem.EnableParentMCIItem = false;
            }
          }
        } else {
          if (!String.IsNullOrEmpty(this.SupplyInsVal)) {
            sSuppToolTipText = Resource.TechValidate.SupplyDisp_Add_Text;
            this.SupplyInsText =
              Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
            this.SupplyInsVal = String.Empty;
            this.SupplyInsTextWithComments =
              Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
            this.Supplycomments = String.Empty;
            this.SelectedsupplyInstruction = null;
            this.PrevSelectedsupplyInstruction = null;
            this.TechValSupplyInst = null;
          }
          if (oSelectedItem.FormViewerDetails.TechValidateDetails != null) {
            oSelectedItem.FormViewerDetails.TechValidateDetails.supplyinstrtext =
              Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
            oSelectedItem.FormViewerDetails.TechValidateDetails.supplyinstrvalue =
              String.Empty;
            oSelectedItem.FormViewerDetails.TechValidateDetails.SupplyComments =
              String.Empty;
            oSelectedItem.FormViewerDetails.TechValidateDetails.SupplyInsTextWithComments =
              Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
          }
          if (
            oSelectedItem != null &&
            oSelectedItem.PresTechValidatedItemsChild != null &&
            oSelectedItem.PresTechValidatedItemsChild.Count > 0 &&
            oSelectedItem.SelectedSupplyreq != null &&
            String.Equals(
              oSelectedItem.SelectedSupplyreq.Value,
              Resource.TechValidate.Empty
            ) &&
            String.IsNullOrEmpty(
              oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
            ) &&
            DateTime.Equals(oSelectedItem.FormViewerDetails.BasicDetails.NextSupplyDate,
              DateTime.MinValue)
          ) {
            oSelectedItem.PresTechValidatedItemsChild.forEach((child) => {
              child.EnableChildMCIComp = true;
            });
          } else if (
            oSelectedItem != null &&
            oSelectedItem.FormViewerDetails != null &&
            oSelectedItem.FormViewerDetails.TechvalidateCADetails != null &&
            oSelectedItem.FormViewerDetails.TechvalidateCADetails
              .PresTechValidatedItems != null &&
            oSelectedItem.FormViewerDetails.TechvalidateCADetails
              .PresTechValidatedItems.Count > 0 &&
            oSelectedItem.SelectedSupplyreq != null &&
            String.Equals(
              oSelectedItem.SelectedSupplyreq.Value,
              Resource.TechValidate.Empty
            )
          ) {
            let parentItem: PrescriptionItemVM =
              oSelectedItem.FormViewerDetails.TechvalidateCADetails.PresTechValidatedItems.Where(
                (x) =>
                  x.PrescriptionItemOID == oSelectedItem.PrescriptionItemOID
              ).First();
            if (parentItem != null) {
              parentItem.EnableParentMCIItem = true;
            }
          }
        }
        if (
          oSelectedItem.FormViewerDetails.BasicDetails
            .SelectedsupplyInstruction != null &&
          oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
            .Count == 0
        ) {
          oSelectedItem.FormViewerDetails.BasicDetails.PrevSelectedsupplyInstruction =
            oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction;
        }
      }
      if (
        !String.Equals(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments,
          oSupplyDispensingInstructionsVM.Supplycomments
        )
      ) {
        oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments =
          oSupplyDispensingInstructionsVM.Supplycomments;
        oSelectedItem.FormViewerDetails.BasicDetails.PrevSupplyComments =
          oSupplyDispensingInstructionsVM.Supplycomments;
      }
      if (oSelectedItem.FormViewerDetails.TechValidateDetails != null) {
        oSelectedItem.FormViewerDetails.TechValidateDetails.SupplyComments =
          String.Empty;
        if (
          !String.IsNullOrEmpty(oSupplyDispensingInstructionsVM.Supplycomments)
        ) {
          oSelectedItem.FormViewerDetails.TechValidateDetails.SupplyComments =
            oSupplyDispensingInstructionsVM.Supplycomments;
        }
      }
      if (
        oSelectedItem.FormViewerDetails.BasicDetails.NextSupplyDate !=
        oSupplyDispensingInstructionsVM.NextSupDTTM
      ) {
        oSelectedItem.FormViewerDetails.BasicDetails.NextSupplyDate =
          oSupplyDispensingInstructionsVM.NextSupDTTM;
      }
    }
    if (
      oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction !=
        null &&
      oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction
        .Count > 0 &&
      ((oSelectedItem.FormViewerDetails.BasicDetails
        .SelectedsupplyInstruction != null &&
        oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
          .Count > 0 &&
        oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction
          .Count !=
          oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
            .Count) ||
        oSelectedItem.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction == null)
    ) {
      oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 1;
    } else if (
      oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction !=
        null &&
      oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction
        .Count > 0 &&
      oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction !=
        null &&
      oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
        .Count > 0 &&
      oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction
        .Count ==
        oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
          .Count
    ) {
      let existsupplyinstcount: number =
        oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction
          .Count;
      let existsupplyvalue: string = String.Empty;
      for (let i: number = 0; i < existsupplyinstcount; i++) {
        existsupplyvalue =
          oSelectedItem.FormViewerDetails.BasicDetails
            .ExistingSupplyinstruction[i].Value;
        if (
          oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
            (c) => c.Value == existsupplyvalue
          ).Count() > 0
        ) {
        } else {
          oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 1;
          break;
        }
      }
    } else if (
      (oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction ==
        null ||
        (oSelectedItem.FormViewerDetails.BasicDetails
          .ExistingSupplyinstruction != null &&
          oSelectedItem.FormViewerDetails.BasicDetails.ExistingSupplyinstruction
            .Count == 0)) &&
      oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction !=
        null &&
      oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
        .Count > 0
    ) {
      oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 1;
    }
    if (
      oSelectedItem.ActionCode != ActivityTypes.Amend &&
      oSelectedItem.FluidPrescribableItemListOID == 0 &&
      (oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction ==
        null ||
        oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
          .Count == 0) &&
      String.IsNullOrEmpty(
        oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
      ) &&
      String.Equals(
        oSelectedItem.SelectedSupplyreq.Value,
        Resource.TechValidate.Empty,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      DateTime.Equals(oSelectedItem.FormViewerDetails.BasicDetails.NextSupplyDate,
        DateTime.MinValue) &&
     DateTime.Equals(oSelectedItem.FormViewerDetails.BasicDetails.NextSupplyDate,
        oSelectedItem.FormViewerDetails.BasicDetails.OriginalNextSupplyDate )&&
      oSelectedItem.FormViewerDetails.TechValidateDetails != null &&
      (oSelectedItem.FormViewerDetails.TechValidateDetails.TechValidatedItems ==
        null ||
        oSelectedItem.FormViewerDetails.TechValidateDetails.TechValidatedItems
          .Count == 0)
    ) {
      oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 0;
      oSelectedItem.EditedGridID = 0;
    } else if (
      oSelectedItem.ActionCode == ActivityTypes.Amend &&
      oSelectedItem.FluidPrescribableItemListOID == 0
    ) {
      if (
        !String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
        ) &&
        String.Equals(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments,
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalSupplyComments
        ) &&
        oSelectedItem.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction != null &&
        oSelectedItem.FormViewerDetails.BasicDetails
          .OriginalsupplyInstruction != null &&
        oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
          .Count ==
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalsupplyInstruction
            .Count
      ) {
        let existsupplyinstcount: number =
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalsupplyInstruction
            .Count;
        let existsupplyvalue: string = String.Empty;
        for (let i: number = 0; i < existsupplyinstcount; i++) {
          existsupplyvalue =
            oSelectedItem.FormViewerDetails.BasicDetails
              .OriginalsupplyInstruction[i].Value;
          if (
            oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
              (c) => c.Value == existsupplyvalue
            ).Count() > 0 &&
            String.Equals(
              oSelectedItem.SelectedSupplyreq.Value,
              Resource.TechValidate.Empty,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 0;
            oSelectedItem.EditedGridID = 0;
          } else {
            oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 1;
            oSelectedItem.EditedGridID = 1;
            break;
          }
        }
      } else if (
        !String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
        ) &&
        String.Equals(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments,
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalSupplyComments
        ) &&
        oSelectedItem.FormViewerDetails.BasicDetails
          .OriginalsupplyInstruction == null &&
        (oSelectedItem.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction == null ||
          oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
            .Count == 0) &&
        String.Equals(
          oSelectedItem.SelectedSupplyreq.Value,
          Resource.TechValidate.Empty,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 0;
        oSelectedItem.EditedGridID = 0;
      } else if (
        String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
        ) &&
        String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalSupplyComments
        ) &&
        oSelectedItem.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction != null &&
        oSelectedItem.FormViewerDetails.BasicDetails
          .OriginalsupplyInstruction != null &&
        oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
          .Count ==
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalsupplyInstruction
            .Count
      ) {
        let existsupplyinstcount: number =
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalsupplyInstruction
            .Count;
        let existsupplyvalue: string = String.Empty;
        for (let i: number = 0; i < existsupplyinstcount; i++) {
          existsupplyvalue =
            oSelectedItem.FormViewerDetails.BasicDetails
              .OriginalsupplyInstruction[i].Value;
          if (
            oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction.Where(
              (c) => c.Value == existsupplyvalue
            ).Count() > 0 &&
            String.Equals(
              oSelectedItem.SelectedSupplyreq.Value,
              Resource.TechValidate.Empty,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 0;
            oSelectedItem.EditedGridID = 0;
          } else {
            oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 1;
            oSelectedItem.EditedGridID = 1;
            break;
          }
        }
      } else if (
        String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalSupplyComments
        ) &&
        String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
        ) &&
        (oSelectedItem.FormViewerDetails.BasicDetails
          .OriginalsupplyInstruction == null ||
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalsupplyInstruction
            .Count == 0) &&
        (oSelectedItem.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction == null ||
          oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
            .Count == 0)
      ) {
        if (
          !String.Equals(
            oSelectedItem.SelectedSupplyreq.Value,
            Resource.TechValidate.Empty,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 1;
          oSelectedItem.EditedGridID = 1;
        } else if (
          String.Equals(
            oSelectedItem.SelectedSupplyreq.Value,
            Resource.TechValidate.Empty,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 0;
          oSelectedItem.EditedGridID = 0;
        }
        if (
          oSelectedItem.EditedGridID == 0 &&
          DateTime.NotEquals(oSelectedItem.FormViewerDetails.BasicDetails.OriginalNextSupplyDate,
            oSelectedItem.FormViewerDetails.BasicDetails.NextSupplyDate)
        ) {
          oSelectedItem.FormViewerDetails.BasicDetails.EditedGridID = 1;
          oSelectedItem.EditedGridID = 1;
        }
      }
    }
    if (
      this.ParentMCIItem != null &&
      this.ParentMCIItem.PresTechValidatedItemsChild != null &&
      this.ParentMCIItem.PresTechValidatedItemsChild.Count > 0
    ) {
      this.ParentMCIItem.PresTechValidatedItemsChild.forEach((child) => {
        if (
          this.identifyingOID ==
            child.FormViewerDetails.BasicDetails.identifyingOID &&
          String.Equals(
            this.IdentifyingName,
            child.FormViewerDetails.BasicDetails.IdentifyingName,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          if (
            (oSelectedItem.FormViewerDetails.BasicDetails
              .SelectedsupplyInstruction != null &&
              oSelectedItem.FormViewerDetails.BasicDetails
                .SelectedsupplyInstruction.Count > 0) ||
            !String.IsNullOrEmpty(
              oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
            )
          ) {
            if (
              oSelectedItem.FormViewerDetails.BasicDetails.TechPresItemTechOID >
                0 ||
              (oSelectedItem.FormViewerDetails.TechValidateDetails != null &&
                oSelectedItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems != null &&
                oSelectedItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems.Count > 0 &&
                oSelectedItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[0] != null &&
                oSelectedItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[0].PrescriptionItemTechOID > 0)
            )
              oSelectedItem.FormViewerDetails.BasicDetails.TecValOperationMode =
                'M';
            else
              oSelectedItem.FormViewerDetails.BasicDetails.TecValOperationMode =
                'N';
          } else {
            if (
              oSelectedItem.FormViewerDetails.BasicDetails.TechPresItemTechOID >
                0 ||
              (oSelectedItem.FormViewerDetails.TechValidateDetails != null &&
                oSelectedItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems != null &&
                oSelectedItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems.Count > 0 &&
                oSelectedItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[0] != null &&
                oSelectedItem.FormViewerDetails.TechValidateDetails
                  .TechValidatedItems[0].PrescriptionItemTechOID > 0)
            )
              oSelectedItem.FormViewerDetails.BasicDetails.TecValOperationMode =
                'D';
            else
              oSelectedItem.FormViewerDetails.BasicDetails.TecValOperationMode =
                'N';
          }
        } else {
          if (
            child.FormViewerDetails.BasicDetails.TechPresItemTechOID > 0 ||
            (child.FormViewerDetails.TechValidateDetails != null &&
              child.FormViewerDetails.TechValidateDetails.TechValidatedItems !=
                null &&
              child.FormViewerDetails.TechValidateDetails.TechValidatedItems
                .Count > 0 &&
              child.FormViewerDetails.TechValidateDetails
                .TechValidatedItems[0] != null &&
              child.FormViewerDetails.TechValidateDetails.TechValidatedItems[0]
                .PrescriptionItemTechOID > 0)
          )
            child.FormViewerDetails.BasicDetails.TecValOperationMode = 'M';
          else child.FormViewerDetails.BasicDetails.TecValOperationMode = 'N';
        }
      });
    }
    if (oSelectedItem.FormViewerDetails.TechvalidateCADetails != null)
      oSelectedItem.FormViewerDetails.TechvalidateCADetails.Technicalvalidateupdate =
        true;
    oSelectedItem.RequisitionCACode = Resource.TechValidate.ReqCACode;
    oSelectedItem.FormViewerDetails.BasicDetails.IsDoseCombDefTech = '0';
    if (bSupDisp && oSelectedItem != null) {
      if (
        oSelectedItem.FormViewerDetails != null &&
        oSelectedItem.FormViewerDetails.BasicDetails != null &&
        oSelectedItem.FormViewerDetails.BasicDetails.InfusionDetails != null &&
        oSelectedItem.FormViewerDetails.BasicDetails.InfusionDetails
          .FluidPrescribableItemListOID <= 0 &&
        !String.Equals(
          oSelectedItem.FormViewerDetails.BasicDetails.itemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        if (oSelectedItem.FormViewerDetails.TechvalidateCADetails == null) {
          oSelectedItem.SupDisText =
            Resource.TechValidate.SupplyDisp_Update_Text;
          oSelectedItem.supToolTipDisText =
            Resource.TechValidate.Supplyinst + sSuppToolTipText;
          if (
            oSelectedItem.FormViewerDetails != null &&
            oSelectedItem.FormViewerDetails.TechValidateDetails != null
          ) {
            oSelectedItem.FormViewerDetails.TechValidateDetails.supplyhyperlinktext =
              oSelectedItem.SupDisText;
          }
        } else if (
          oSelectedItem.FormViewerDetails.TechvalidateCADetails != null
        ) {
          oSelectedItem.supToolTipDisText =
            Resource.TechValidate.Supplyinst + sSuppToolTipText;
        }
      } else {
        oSelectedItem.supToolTipDisText =
          Resource.TechValidate.SupplyIns_ToolTip;
      }
    } else if (!bSupDisp && oSelectedItem != null) {
      if (oSelectedItem.FormViewerDetails.TechvalidateCADetails == null) {
        oSelectedItem.SupDisText = Resource.TechValidate.SupplyDisp_Add_Text;
        oSelectedItem.supToolTipDisText = Resource.TechValidate.Addsupinst;
      } else {
        oSelectedItem.SupDisText =
          Resource.TechValidate.SupplyDispChild_Add_Text;
        oSelectedItem.supToolTipDisText = Resource.TechValidate.AddsupinstChild;
      }
    }
    if (
      oSelectedItem.FormViewerDetails.TechValidateDetails != null &&
      oSelectedItem.FormViewerDetails.TechValidateDetails.TechValidatedItems !=
        null
    ) {
      let TechValidatItems =
        oSelectedItem.FormViewerDetails.TechValidateDetails.TechValidatedItems.Where(
          (TechValItems) => TechValItems.IsDoseCombinationsDefined == '1'
        ).Select((TechValItems) => TechValItems);
      oSelectedItem.FormViewerDetails.TechValidateDetails.TechValidatedItems =
        new ObservableCollection<CustomTechValidatedItem>(TechValidatItems);
    }
    if (this.TechCASupplyInstrClick != null) {
      this.TechCASupplyInstrClick(oSelectedItem);
    }
    if (
      oSelectedItem.IsLoadBasicFaxTab &&
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Leave,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Outpatient,
          StringComparison.InvariantCultureIgnoreCase
        )) &&
      oSelectedItem != null &&
      oSelectedItem.FormViewerDetails != null &&
      oSelectedItem.FormViewerDetails.BasicDetails != null &&
      ((oSelectedItem.FormViewerDetails.BasicDetails
        .SelectedsupplyInstruction != null &&
        oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
          .Count > 0) ||
        !String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
        ) ||
        !String.Equals(
          oSelectedItem.SelectedSupplyreq.Value,
          Resource.TechValidate.Empty,
          StringComparison.InvariantCultureIgnoreCase
        ))
    ) {
      oSelectedItem.LoadParentSupplyDetailsForFluid = true;
    } else if (
      !oSelectedItem.IsLoadBasicFaxTab &&
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Leave,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Outpatient,
          StringComparison.InvariantCultureIgnoreCase
        )) &&
      oSelectedItem != null &&
      oSelectedItem.FormViewerDetails != null &&
      oSelectedItem.FormViewerDetails.BasicDetails != null &&
      ((oSelectedItem.FormViewerDetails.BasicDetails
        .SelectedsupplyInstruction != null &&
        oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
          .Count > 0) ||
        !String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
        ) ||
        !String.Equals(
          oSelectedItem.SelectedSupplyreq.Value,
          Resource.TechValidate.Empty,
          StringComparison.InvariantCultureIgnoreCase
        )) &&
      oSelectedItem.FormViewerDetails.BasicDetails.PresInfusionItemForFluid !=
        null
    ) {
      oSelectedItem.FormViewerDetails.BasicDetails.PresInfusionItemForFluid.LoadParentSupplyDetailsForFluid =
        false;
    } else if (
      oSelectedItem.IsLoadBasicFaxTab &&
      oSelectedItem.ActionCode == ActivityTypes.Amend &&
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Discharge,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Leave,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Outpatient,
          StringComparison.InvariantCultureIgnoreCase
        )) &&
      oSelectedItem != null &&
      oSelectedItem.FormViewerDetails != null &&
      oSelectedItem.FormViewerDetails.BasicDetails != null &&
      String.Equals(
        oSelectedItem.SelectedSupplyreq.Value,
        Resource.TechValidate.Empty,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      if (
        ((oSelectedItem.FormViewerDetails.BasicDetails
          .SelectedsupplyInstruction == null ||
          oSelectedItem.FormViewerDetails.BasicDetails.SelectedsupplyInstruction
            .Count == 0) &&
          oSelectedItem.FormViewerDetails.BasicDetails
            .OriginalsupplyInstruction != null &&
          oSelectedItem.FormViewerDetails.BasicDetails.OriginalsupplyInstruction
            .Count > 0) ||
        (String.IsNullOrEmpty(
          oSelectedItem.FormViewerDetails.BasicDetails.Supplycomments
        ) &&
          !String.IsNullOrEmpty(
            oSelectedItem.FormViewerDetails.BasicDetails.OriginalSupplyComments
          ))
      ) {
        oSelectedItem.LoadParentSupplyDetailsForFluid = true;
      }
    }
    return oSelectedItem;
  }
  iMsgBox_MessageBoxClose_App(sender: Object, e: MessageEventArgs, isTVCA?: boolean): void {
    if (e.MessageBoxResult == MessageBoxResult.Yes) {
      //this.oChildWindow.DialogResult = false;
      // ObjectHelper.stopFinishAndCancelEvent(false);
      if (isTVCA) this.oChildWindow['TVCAdupDialogRef'].close();
      this.oChildWindow.DialogResult = true;
      this.SelectedsupplyInstruction = this.PrevSelectedsupplyInstruction;
      this.Supplycomments = this.PrevSupplyComments;
    }
    Busyindicator.SetStatusIdle('AddSupplyInstructionChildClicked');
  }
  objmsgtech_Close(sender: Object, e: MessageEventArgs): void {
    this.launchsupplyinstrmezzanineCheck = false;
    if (e.MessageBoxResult == MessageBoxResult.Yes) {
      if (
        this.oPrescitemVM != null &&
        this.oPrescitemVM.FormViewerDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
        this.oPrescitemVM.FormViewerDetails.BasicDetails
          .IsenableSupplyInstruction
      ) {
        if (this.oPrescitemVM.FormViewerDetails.TechValidateDetails != null) {
          this.oPrescitemVM.FormViewerDetails.TechValidateDetails.FetchfrombasicDetails =
            true;
        } else {
          this.oPrescitemVM.FormViewerDetails.TechValidateDetails =
            new TechValidateVM();
          this.oPrescitemVM.FormViewerDetails.TechValidateDetails.FetchfrombasicDetails =
            true;
        }
        this.oPrescitemVM.FormViewerDetails.BasicDetails.LaunchedFromTechValidate =
          false;
        this.oPrescitemVM.FormViewerDetails.TechValidateDetails.IslaunchedFromProductOptions =
          false;
        this.oPrescitemVM.FormViewerDetails.BasicDetails.launchsupplyinstrmezzanine();
      }
    } else if (e.MessageBoxResult == MessageBoxResult.No) {
    }
  }
  private _otherAdminiInstruction: string;
  private _otherAdminiInstVisibility: Visibility = Visibility.Collapsed;
  public get OtherAdminiInstruction(): string {
    return this._otherAdminiInstruction;
  }
  public set OtherAdminiInstruction(value: string) {
    if (String.Compare(this._otherAdminiInstruction, value) != 0) {
      this.IsenableRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('OtherAdminiInstruction')) {
        this.lstAmendedFlds.Add('OtherAdminiInstruction');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._otherAdminiInstruction = value;
      // NotifyPropertyChanged("OtherAdminiInstruction");
    }
  }
  public get OtherAdminiInstVisibility(): Visibility {
    if (PatientContext.PrescriptionType == PrescriptionTypes.ForAdministration && !this.oPrescitemVM.FormViewerDetails.BHasFormViewParams)         
      return Visibility.Visible;
    else
      return this._otherAdminiInstVisibility;
  }
  public set OtherAdminiInstVisibility(value: Visibility) {
    if (this._otherAdminiInstVisibility != value) {
      this._otherAdminiInstVisibility = value;
      // NotifyPropertyChanged("OtherAdminiInstVisibility");
    }
  }
  public PatientProblemCode: string;
  public ProblemIndicationTerm: string;
  /*[System.Xml.Serialization.XmlIgnoreAttribute]*/
  public SelectedDispensingInstruction: ObservableCollection<CListItem>;
  private _OriginalDispensingInstruction: ObservableCollection<CListItem>;
  public get OriginalDispensingInstruction(): ObservableCollection<CListItem> {
    return this._OriginalDispensingInstruction;
  }
  public set OriginalDispensingInstruction(
    value: ObservableCollection<CListItem>
  ) {
    if (!Helper.ReferenceEquals(this._OriginalDispensingInstruction, value)) {
      this._OriginalDispensingInstruction = value;
      // NotifyPropertyChanged("OriginalDispensingInstruction");
    }
  }
  private _dispensingInstruction: ObservableCollection<CListItem> = null;
  public get DispensingInstruction(): ObservableCollection<CListItem> {
    return this._dispensingInstruction;
  }
  public set DispensingInstruction(value: ObservableCollection<CListItem>) {
    this.IsenableRSNFORMOD = true;
    this.IsMandatoryRSNFORMOD = true;
    this.IsenableModificationcomments = true;
    if (!Helper.ReferenceEquals(this._dispensingInstruction, value)) {
      if (!this.lstAmendedFlds.Contains('DispensingInstruction')) {
        this.lstAmendedFlds.Add('DispensingInstruction');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._dispensingInstruction = value;
      // NotifyPropertyChanged("DispensingInstruction");
    }
  }
  private _SelecteddispInstruction: ObservableCollection<CListItem>;
  public get SelecteddispInstruction(): ObservableCollection<CListItem> {
    return this._SelecteddispInstruction;
  }
  public set SelecteddispInstruction(value: ObservableCollection<CListItem>) {
    if (!Helper.ReferenceEquals(this._SelecteddispInstruction, value)) {
      this._SelecteddispInstruction = value;
      // NotifyPropertyChanged("SelecteddispInstruction");
    }
  }
  private _OtherDispensingInstruction: string;
  public get OtherDispensingInstruction(): string {
    return this._OtherDispensingInstruction;
  }
  public set OtherDispensingInstruction(value: string) {
    if (!Helper.ReferenceEquals(this._OtherDispensingInstruction, value)) {
      this._OtherDispensingInstruction = value;
      // NotifyPropertyChanged("OtherDispensingInstruction");
    }
  }
  private _DispensingAdditionalComments: string;
  public get DispensingAdditionalComments(): string {
    return this._DispensingAdditionalComments;
  }
  public set DispensingAdditionalComments(value: string) {
    if (!Helper.ReferenceEquals(this._DispensingAdditionalComments, value)) {
      this._DispensingAdditionalComments = value;
      // NotifyPropertyChanged("DispensingAdditionalComments");
    }
  }
  private _endorsementProperties: ObservableCollection<CListItem> = null;
  public get EndorsementProperties(): ObservableCollection<CListItem> {
    return this._endorsementProperties;
  }
  public set EndorsementProperties(value: ObservableCollection<CListItem>) {
    if (!Helper.ReferenceEquals(this._endorsementProperties, value)) {
      this.IsenableRSNFORMOD = true;
      this.IsMandatoryRSNFORMOD = true;
      this.IsenableModificationcomments = true;
      if (!this.lstAmendedFlds.Contains('EndorsementProperties')) {
        this.lstAmendedFlds.Add('EndorsementProperties');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      this._endorsementProperties = value;
      // NotifyPropertyChanged("EndorsementProperties");
    }
  }
  /*[System.Xml.Serialization.XmlIgnoreAttribute]*/
  public SelectedEndorsment: ObservableCollection<CListItem>;
  public get QuantityUOMName(): string {
    return this._quantityUOMName;
  }
  public set QuantityUOMName(value: string) {
    if (!Helper.ReferenceEquals(this._quantityUOMName, value)) {
      this._quantityUOMName = value;
      // NotifyPropertyChanged("QuantityUOMName");
    }
  }
  public get PrepStatus(): CListItem {
    return this._PrepStatus;
  }
  public set PrepStatus(value: CListItem) {
    if (!Helper.ReferenceEquals(this._PrepStatus, value)) {
      this._PrepStatus = value;
      // NotifyPropertyChanged("PrepStatus");
    }
  }
  private _IsSetPharmPrepStatus: boolean = false;
  public get IsSetPharmPrepStatus(): boolean {
    return this._IsSetPharmPrepStatus;
  }
  public set IsSetPharmPrepStatus(value: boolean) {
    this._IsSetPharmPrepStatus = value;
  }
  public get DrugProperties(): ObservableCollection<DrugProperty> {
    return this._drugProperties;
  }
  public set DrugProperties(value: ObservableCollection<DrugProperty>) {
    if (this._drugProperties != value) {
      this._drugProperties = value;
      // super.NotifyPropertyChanged("DrugProperties");
    }
  }
  public get VMDrugProperties(): DrugProperty {
    return this._VMdrugProperties;
  }
  public set VMDrugProperties(value: DrugProperty) {
    if (this._VMdrugProperties != value) {
      this._VMdrugProperties = value;
      // super.NotifyPropertyChanged("VMDrugProperties");
    }
  }
  private _TecValoperationMode: string;
  public get TecValOperationMode(): string {
    return this._TecValoperationMode;
  }
  public set TecValOperationMode(value: string) {
    if (Helper.ReferenceEquals(this._TecValoperationMode, value) != true) {
      this._TecValoperationMode = value;
      // NotifyPropertyChanged("TecValOperationMode");
    }
  }
  private _TechPresItemTechOID: number = 0;
  public get TechPresItemTechOID(): number {
    return this._TechPresItemTechOID;
  }
  public set TechPresItemTechOID(value: number) {
    this._TechPresItemTechOID = value;
    // super.NotifyPropertyChanged("TechPresItemTechOID");
  }
  private _TechValSupplyInst: CListItem;
  public get TechValSupplyInst(): CListItem {
    return this._TechValSupplyInst;
  }
  public set TechValSupplyInst(value: CListItem) {
    this._TechValSupplyInst = value;
    // NotifyPropertyChanged("TechValSupplyInst");
  }
  private _TechValDispensingInst: ObservableCollection<CListItem>;
  public get TechValDispensingInst(): ObservableCollection<CListItem> {
    return this._TechValDispensingInst;
  }
  public set TechValDispensingInst(value: ObservableCollection<CListItem>) {
    this._TechValDispensingInst = value;
    // NotifyPropertyChanged("TechValDispensingInst");
  }
  private _TechValOtherInst: string;
  public get TechValOtherInst(): string {
    return this._TechValOtherInst;
  }
  public set TechValOtherInst(value: string) {
    this._TechValOtherInst = value;
    // NotifyPropertyChanged("TechValOtherInst");
  }
  private _IsDoseCombDefTech: string = "";
  public get IsDoseCombDefTech(): string {
    return this._IsDoseCombDefTech;
  }
  public set IsDoseCombDefTech(value: string) {
    this._IsDoseCombDefTech = value;
    // super.NotifyPropertyChanged("IsDoseCombDefTech");
  }
  private _isprinted: string;
  public get Isprinted(): string {
    return this._isprinted;
  }
  public set Isprinted(value: string) {
    this._isprinted = value;
    // super.NotifyPropertyChanged("Isprinted");
  }
  private _sDefaultTechValSuppInstTxt: string;
  public get sDefaultTechValSuppInstTxt(): string {
    return this._sDefaultTechValSuppInstTxt;
  }
  public set sDefaultTechValSuppInstTxt(value: string) {
    if (this._sDefaultTechValSuppInstTxt != value) {
      this._sDefaultTechValSuppInstTxt = value;
      // NotifyPropertyChanged("sDefaultTechValSuppInstTxt");
    }
  }
  private _sDefaultTechValDispInstText: string;
  public get sDefaultTechValDispInstTxt(): string {
    return this._sDefaultTechValDispInstText;
  }
  public set sDefaultTechValDispInstTxt(value: string) {
    if (this._sDefaultTechValDispInstText != value) {
      this._sDefaultTechValDispInstText = value;
      // NotifyPropertyChanged("sDefaultTechValDispInstTxt");
    }
  }
  public MoreOptionCode: string;
  public GetMoreComboOption(): void {
    if (
      String.Compare(CConstants.FrequencyOptionCode, this.MoreOptionCode) == 0
    ) {
      let oReq: IPPMAManagePrescSer.CReqMsgGetIPPFrequency =
        new IPPMAManagePrescSer.CReqMsgGetIPPFrequency();
      oReq.MCVersionBC = AppSessionInfo.AMCV;
      oReq.cIsDefaultBC = '0';
      oReq.oContextInformation = Common.FillContext();
      let serviceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      serviceProxy.GetIPPFrequencyCompleted = (s, e) => {
        this.serviceProxy_GetIPPFrequencyCompleted(s, e);
      };
      serviceProxy.GetIPPFrequencyAsync(oReq);
    } else {
      let objService: ManagePrescriptionWSSoapClient =
        new ManagePrescriptionWSSoapClient();
      objService.GetAllOptionsCompleted = (s, e) => {
        this.objService_GetAllOptionsCompleted(s, e);
      };
      let objAllRequest: CReqMsgGetAllOptions = new CReqMsgGetAllOptions();
      objAllRequest.IdentifyingOIDBC = this.identifyingOID;
      objAllRequest.IdentifyingTypeBC = this.identifyingType;
      if (
        String.Compare(
          CConstants.RecordAdminSiteOptionCode,
          this.MoreOptionCode
        ) == 0
      ) {
        objAllRequest.sOptionCodeBC = CConstants.SiteOptionCode;
      } else if (
        String.Compare(
          CConstants.RecordadminDoseUOMOptionCode,
          this.MoreOptionCode
        ) == 0
      ) {
        objAllRequest.sOptionCodeBC = CConstants.DoseUOMOptionCode;
      } else {
        objAllRequest.sOptionCodeBC = this.MoreOptionCode;
      }
      objAllRequest.MCVersionNoBC = AppSessionInfo.AMCV;
      objAllRequest.oContextInformation = Common.FillContext();
      objService.GetAllOptionsAsync(objAllRequest);
    }
  }
  public SetOnadmissionValue(
    value: CListItem | string,
    Originalvalue?: string
  ): void {
    if (value instanceof CListItem) {
      this.SetOnadmissionValue1(value);
    } else {
      this.SetOnadmissionValue2(<string>value, Originalvalue);
    }
  }
  private SetOnadmissionValue1(value: CListItem): void {
    if (
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          CConstants.ForadminPrescribeMenuCode
        )) &&
      !this.IsResetOnadmission &&
      ((!this.IsEnableOnadmission &&
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder) ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
        this.oPrescitemVM.bIsReprescribe) &&
      this.IsMandatoryReasonForMedClerkModify &&
      !this.IsRecordedMedication &&
      this.IsClearOnAdmissionAmended
    ) {
      this.IsResetOnadmission = true;
      this.IsOnadmission = false;
      this.IsEnableOnadmission = true;
      this.IsExistsOnAdmission = '0';
    }
  }
  private SetOnadmissionValue2(value: string, Originalvalue: string): void {
    if (
      (String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration
      ) ||
        String.Equals(
          PatientContext.PrescriptionType,
          CConstants.ForadminPrescribeMenuCode
        )) &&
      !this.IsResetOnadmission &&
      ((!this.IsEnableOnadmission &&
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder) ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
        this.oPrescitemVM.bIsReprescribe) &&
      this.IsMandatoryReasonForMedClerkModify &&
      !String.Equals(
        Originalvalue,
        value,
        StringComparison.CurrentCultureIgnoreCase
      ) &&
      !this.IsRecordedMedication &&
      this.IsClearOnAdmissionAmended
    ) {
      this.IsResetOnadmission = true;
      this.IsOnadmission = false;
      this.IsEnableOnadmission = true;
      this.IsExistsOnAdmission = '0';
    }
  }
  serviceProxy_GetIPPFrequencyCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetIPPFrequencyCompletedEventArgs
  ): void {
    this._defaultDetails.Frequencys = new ObservableCollection<CListItem>();
    this._defaultDetails.MasterFrequencys =
      new ObservableCollection<CListItem>();
    if (this.DefaultDetails != null) {
      this.DefaultDetails.QualifiedFrequencies =
        new ObservableCollection<CListItem>();
    }
    if (e.Error != null) return;
    let oRes: IPPMAManagePrescSer.CResMsgGetIPPFrequency = e.Result;
    if (
      oRes == null ||
      oRes.objFrequencyDetails == null ||
      oRes.objFrequencyDetails.Count == 0
    )
      return;
    let nFreqCnt: number = oRes.objFrequencyDetails.Count;
    for (let i: number = 0; i < nFreqCnt; i++) {
      if (!String.IsNullOrEmpty(oRes.objFrequencyDetails[i].Name)) {
        this._defaultDetails.MasterFrequencys.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: oRes.objFrequencyDetails[i].Name,
            Value: oRes.objFrequencyDetails[i].OID.ToString(),
            Tag: (!String.IsNullOrEmpty(oRes.objFrequencyDetails[i].Code)
              ? oRes.objFrequencyDetails[i].Code
              : '0~'
            ).Split('~'),
          })
        );
        if (this.DefaultDetails != null) {
          let sQualifiedFreqTag: string[] = null;
          let oQualifiedList: CListItem = null;
          if (
            oRes.objFrequencyDetails[i] != null &&
            !String.IsNullOrEmpty(oRes.objFrequencyDetails[i].Name)
          ) {
            sQualifiedFreqTag = (
              !String.IsNullOrEmpty(oRes.objFrequencyDetails[i].Code)
                ? oRes.objFrequencyDetails[i].Code
                : '0~'
            ).Split('~');
            let Check: number = 3;
            if (
              sQualifiedFreqTag.Count() > Check &&
              sQualifiedFreqTag[3] != null &&
              String.Equals(sQualifiedFreqTag[3], '1')
            ) {
              oQualifiedList = ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: oRes.objFrequencyDetails[i].Name,
                Value: Convert.ToString(oRes.objFrequencyDetails[i].OID),
                Tag: oRes.objFrequencyDetails[i].Code,
              });
              this.DefaultDetails.QualifiedFrequencies.Add(oQualifiedList);
            }
          }
        }
      }
    }
    let Freqs: IEnumerable<CListItem> = null;
    let SteppedFreqs: IEnumerable<CListItem> = null;
    if (
      this._defaultDetails != null &&
      this._defaultDetails.MasterFrequencys != null
    ) {
      let _AsDirectedLZOID: string = CConstants.AsDirectedLZOID;
      if (!String.IsNullOrEmpty(Common.Frc001Childs))
        _AsDirectedLZOID = Common.Frc001Childs;
      let _WhenRequiredLZOID: string = CConstants.WhenRequiredLZOID;
      if (!String.IsNullOrEmpty(Common.Frq88Childs))
        _WhenRequiredLZOID = Common.Frq88Childs;
      SteppedFreqs = this._defaultDetails.MasterFrequencys.Where(
        (freq) =>
          freq.Tag != null &&
          !String.Equals(
            (freq.Tag)[0],
            '1',
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.Equals(
            (freq.Tag)[4],
            CConstants.IntervalFreq,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !_WhenRequiredLZOID.Contains((freq.Tag)[2]) &&
          !_AsDirectedLZOID.Contains((freq.Tag)[2])
      ).Select((freq) => freq);
      if (SteppedFreqs != null) {
        this.DefaultDetails.SteppedFrequencies =
          new ObservableCollection<CListItem>(SteppedFreqs);
        this.RemoveOnceOnlyForSV();
      }
    }
    if (
      this.DoseType != null &&
      this.DoseType.Value != null &&
      (String.Compare(
        this.DoseType.Value,
        DoseTypeCode.TITRATED,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.STEPPED,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.VARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0) &&
      this._defaultDetails != null &&
      this._defaultDetails.MasterFrequencys != null
    ) {
      Freqs = this._defaultDetails.MasterFrequencys.Where(
        (freq) =>
          freq.Tag != null &&
          String.Compare((freq.Tag)[0], '0') == 0 &&
          String.Compare((freq.Tag)[1], 'CC_IPONCENLY') != 0
      ).Select((freq) => freq);
      if (Freqs != null) {
        this.DefaultDetails.NonPRNFrequencies =
          new ObservableCollection<CListItem>(Freqs);
      }
    } else if (
      (this.DoseType == null ||
        (this.DoseType != null &&
          this.DoseType.Value != null &&
          String.Compare(
            this.DoseType.Value,
            DoseTypeCode.TITRATED,
            StringComparison.OrdinalIgnoreCase
          ) != 0)) &&
      this._defaultDetails != null &&
      this._defaultDetails.MasterFrequencys != null
    ) {
      Freqs = this._defaultDetails.MasterFrequencys.AsEnumerable();
    }
    if (
      this._doseType == null ||
      (this._doseType != null &&
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.NORMAL,
          StringComparison.OrdinalIgnoreCase
        ) != 0 &&
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.DOSAGERANGE,
          StringComparison.OrdinalIgnoreCase
        ) != 0)
    ) {
      Freqs = Freqs.Where(
        (freq) =>
          freq.Tag != null &&
          String.Compare((freq.Tag)[1], 'CC_IPONCENLY') != 0
      ).Select((freq) => freq);
    }
    if (this.FollowUpStatLaunch.Equals('F')) {
      Freqs = Freqs.Where(
        (freq) =>
          freq.Tag != null &&
          String.Compare((freq.Tag)[1], 'CC_IPONCENLY') != 0
      ).Select((freq) => freq);
    }
    this.DefaultDetails.Frequencys = new ObservableCollection<CListItem>(Freqs);
  }
  objService_GetAllOptionsCompleted(
    sender: Object,
    e: GetAllOptionsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000046;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:BasicDetailsVM, Method:objService_GetAllOptionsCompleted()';
    if (e.Error == null) {
      try {
        let objResponse: CResMsgGetAllOptions = e.Result;
        if (
          objResponse != null &&
          objResponse.oValues != null &&
          objResponse.oValues.Count > 0
        ) {
          switch (this.MoreOptionCode) {
            case CConstants.RouteOptionCode:
              this._defaultDetails.Routes =
                new ObservableCollection<CListItem>();
                let emptyroute : CListItem = new CListItem();
              emptyroute.DisplayText = '';
              emptyroute.Value = '';
              this.Route = emptyroute;
	      //50620 When route - more is clicked not to show Admin method
              this.IsAdminMethodVisible=Visibility.Collapsed;
              objResponse.oValues.ForEach((dbroute) => {
                objResponse.oValues.Where(
                  (rname) => rname.Name != String.Empty
                );
              });
              objResponse.oValues.ForEach((res) => {
                this._defaultDetails.Routes.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: res.Name,
                    Value: res.Code.ToString(),
                    Level: !String.IsNullOrEmpty(res.OperationMode)
                      ? Convert.ToInt32(res.OperationMode)
                      : 0,
                    Tag: res.OID > 0 ? res.OID.ToString() : '0',
                  })
                );
              });
              break;
            case CConstants.DoseUOMOptionCode:
              this._defaultDetails.Uoms = new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
                  if (
                    PatientContext.IsINFUSIONON &&
                    this.Route != null &&
                    this.Route.Tag != null &&
                    !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
                    (String.Compare(this.Route.Tag.ToString(), '1') == 0 ||
                      this.Route.Tag.ToString().Contains('1'))
                  ) {
                    if (
                      !String.Equals(
                        objResponse.oValues[i].SealImageList,
                        CConstants.CompositeUOM
                      )
                    ) {
                      this._defaultDetails.Uoms.Add(
                        ObjectHelper.CreateObject(new CListItem(), {
                          DisplayText: objResponse.oValues[i].Name,
                          Value: objResponse.oValues[i].Code.ToString(),
                          Tag: objResponse.oValues[i].OperationMode.ToString(),
                        })
                      );
                    }
                  } else {
                    this._defaultDetails.Uoms.Add(
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: objResponse.oValues[i].Name,
                        Value: objResponse.oValues[i].Code.ToString(),
                        Tag: objResponse.oValues[i].OperationMode.ToString(),
                      })
                    );
                  }
                }
                if (
                  !this.DoseUOMTypeCode.ContainsKey(
                    objResponse.oValues[i].OperationMode.ToString()
                  )
                ) {
                  this.DoseUOMTypeCode.Add(
                    objResponse.oValues[i].OperationMode.ToString(),
                    objResponse.oValues[i].SealImageList
                  );
                }
              }
              break;
            case CConstants.FormOptionCode:
              this._defaultDetails.Forms =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
                  this._defaultDetails.Forms.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                    })
                  );
                }
              }
              break;
            case CConstants.FrequencyOptionCode:
              this._defaultDetails.Frequencys =
                new ObservableCollection<CListItem>();
              this._defaultDetails.MasterFrequencys =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
                  this._defaultDetails.MasterFrequencys.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code,
                      Tag: objResponse.oValues[i].OID.ToString(),
                    })
                  );
                }
              }
              if (
                this.DoseType != null &&
                this.DoseType.Value != null &&
                (String.Compare(
                  this.DoseType.Value,
                  DoseTypeCode.TITRATED,
                  StringComparison.OrdinalIgnoreCase
                ) == 0 ||
                  String.Compare(
                    this.DoseType.Value,
                    DoseTypeCode.STEPPED,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0 ||
                  String.Compare(
                    this.DoseType.Value,
                    DoseTypeCode.VARIABLE,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0 ||
                  String.Compare(
                    this.DoseType.Value,
                    DoseTypeCode.STEPPEDVARIABLE,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0) &&
                this._defaultDetails != null &&
                this._defaultDetails.MasterFrequencys != null
              ) {
                let Freqs: IEnumerable<CListItem> =
                  this._defaultDetails.MasterFrequencys.Where(
                    (freq) => freq.Tag.toString() == '0'
                  ).Select((freq) => freq);
                if (Freqs != null) {
                  this.DefaultDetails.Frequencys =
                    new ObservableCollection<CListItem>(Freqs);
                  this.DefaultDetails.NonPRNFrequencies =
                    new ObservableCollection<CListItem>(Freqs);
                }
              } else if (
                this.DoseType != null &&
                this.DoseType.Value != null &&
                String.Compare(
                  this.DoseType.Value,
                  DoseTypeCode.TITRATED,
                  StringComparison.OrdinalIgnoreCase
                ) != 0 &&
                this._defaultDetails != null &&
                this._defaultDetails.MasterFrequencys != null
              ) {
                this.DefaultDetails.Frequencys =
                  this._defaultDetails.MasterFrequencys;
              }
              break;
            case CConstants.AdminOptionCode:
              this._defaultDetails.AdminInstructions =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
                  this._defaultDetails.AdminInstructions.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                    })
                  );
                }
              }
              this._defaultDetails.AdminInstructions.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Other',
                  Value: 'CC_Other',
                })
              );
              break;
            case CConstants.SiteOptionCode:
              this._defaultDetails.Sites =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
                  this._defaultDetails.Sites.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                    })
                  );
                }
              }
              break;
            case CConstants.QtyUOMoptioncode:
              this._defaultDetails.Quantitys =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
                  this._defaultDetails.Quantitys.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                    })
                  );
                }
              }
              break;
            case CConstants.RecordAdminSiteOptionCode:
              if (this.RecordAdmin != null) {
                this.RecordAdmin.Sites = new ObservableCollection<CListItem>();
                for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                  if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
                    this.RecordAdmin.Sites.Add(
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: objResponse.oValues[i].Name,
                        Value: objResponse.oValues[i].Code.ToString(),
                      })
                    );
                  }
                }
              }
              break;
            case CConstants.RecordadminDoseUOMOptionCode:
              if (this.RecordAdmin != null) {
                this.RecordAdmin.DoseUoM =
                  new ObservableCollection<CListItem>();
                for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                  if (!String.IsNullOrEmpty(objResponse.oValues[i].Name)) {
                    this.RecordAdmin.DoseUoM.Add(
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: objResponse.oValues[i].Name,
                        Value: objResponse.oValues[i].Code.ToString(),
                      })
                    );
                  }
                }
                //--Sai--BugId -- 50069 --
                this.RecordAdmin.SelectedDoseUoM = new CListItem();
                setTimeout(() => {
                  this.RecordAdmin.SelectedDoseUoM = null;
                }, 0);
              }
              break;
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private _upperDose: string = String.Empty;
  public get UpperDose(): string {
    //Revisit Required
    return this._upperDose?.toString() || null;
  }
  public set UpperDose(value: string) {
    if (!Helper.ReferenceEquals(this._upperDose, value)) {
      let temp: number = 0;
      if (
        String.IsNullOrEmpty(value) ||
        !Number.TryParse(value, (o) => (temp = o))
      ) {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsMandatoryRSNFORMOD = true;
        if (
          (this.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
            this.actualClerkingValues != null &&
            !String.IsNullOrEmpty(this.actualClerkingValues.Dose) &&
            !String.IsNullOrEmpty(this.actualClerkingValues.UpperDose) &&
            String.Compare(this.actualClerkingValues.UpperDose, value) != 0) ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Amend
        ) {
          this.IsMandatoryReasonForMedClerkModify = true;
          this.SetOnadmissionValue(value, this._upperDose);
        }
      }
      if (!this.lstDRCAmendedFlds.Contains('UpperDose'))
        this.lstDRCAmendedFlds.Add('UpperDose');
      if (!this.lstAmendedFlds.Contains('UpperDose')) {
        this.lstAmendedFlds.Add('UpperDose');
        if (
          this.bIsAmend &&
          !this.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.IsenableRSNFORMOD
        ) {
          this.DoChangesForAmend();
        }
      }
      if (!this.IsNotTriggerAmendUpperDoseClearSupplyQuantity) {
        this.ClearPrescribedQuantity();
      } else {
        this.IsNotTriggerAmendUpperDoseClearSupplyQuantity = false;
      }
      if (
        (String.IsNullOrEmpty(this._upperDose) &&
          !String.IsNullOrEmpty(value)) ||
        (String.IsNullOrEmpty(value) &&
          !String.IsNullOrEmpty(this._upperDose)) ||
        (!String.IsNullOrEmpty(this._upperDose) &&
          !String.IsNullOrEmpty(value) &&
          String.Compare(
            this._upperDose,
            value,
            StringComparison.CurrentCultureIgnoreCase
          ) != 0)
      ) {
        this.oPrescitemVM.TechnicallyValidateMessage();
      }
      this._upperDose = value;
      // NotifyPropertyChanged("UpperDose");
    }
  }
  public IsPresItemLevelDispense: string;
  private _conditionalDosingDetails: ConditionalDosingVM;
  public get ConditionalDosingDetails(): ConditionalDosingVM {
    return this._conditionalDosingDetails;
  }
  public set ConditionalDosingDetails(value: ConditionalDosingVM) {
    if (!Helper.ReferenceEquals(this._conditionalDosingDetails, value)) {
      this._conditionalDosingDetails = value;
      // NotifyPropertyChanged("ConditionalDosingDetails");
    }
  }
  public GetFormDefaults(
    lnIdentifyingOID: number,
    strIdentifyingType: string,
    lnRouteOID: string,
    lnFormOID: string,
    strMCVersion: string,
    strParamType: string,
    strProperty: string,
    bIsCalledProp: boolean,
    isformviewdisable: boolean,
    bAmendFormValueExists: boolean = false
  ): void {
    if (
      (this.IsLoadingDataForAmend &&
        (this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)) ||
      (this.IsLoadingDataForOrderSentence &&
        this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe)
    )
      return;
    if (!this.IsRestoreOldValues) {
      let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      objServiceProxy.GetFormViewDefaultParamsCompleted = (s, e) => {
        this.objServiceProxy_GetFormViewDefaultParamsCompleted(s, e);
      };
      this.bIsCalledFromProperty = bIsCalledProp;
      this.strCalledProperty = strProperty;
      this.IsFormViewerDisable = isformviewdisable;
      let objReq: IPPMAManagePrescSer.CReqMsgGetFormViewDefaultParams =
        new IPPMAManagePrescSer.CReqMsgGetFormViewDefaultParams();
      objReq.objFormViewParamsBC = new IPPMAManagePrescSer.IPPFormViewParams();
      objReq.objFormViewParamsBC.IdentifyingOID = lnIdentifyingOID;
      objReq.objFormViewParamsBC.IdentifyingType = strIdentifyingType;
      objReq.objFormViewParamsBC.RouteOID =
        !String.IsNullOrEmpty(lnRouteOID) && !lnRouteOID.Contains(',')
          ? Convert.ToInt64(lnRouteOID)
          : 0;
      objReq.objFormViewParamsBC.RouteOIDs = lnRouteOID;
      objReq.objFormViewParamsBC.FormOID = !String.IsNullOrEmpty(lnFormOID)
        ? Convert.ToInt64(lnFormOID)
        : 0;
      objReq.objFormViewParamsBC.MCVersion = strMCVersion;
      objReq.objFormViewParamsBC.ParamType = strParamType;
      objReq.oContextInformation = Common.FillContext();
      objServiceProxy.GetFormViewDefaultParamsAsync(objReq);
    }
  }
  bIsCalledFromProperty: boolean = false;
  strCalledProperty: string = String.Empty;
  FormViewLoadingflag: Boolean = true;
  public Formset: boolean = false;
  IsApplyFrameworkRule: boolean = false;
  private _IsGetFomviewDefaultDataIsFilling: boolean = false;
  public get IsGetFomviewDefaultParamsCallbackInProgress(): boolean {
    return this._IsGetFomviewDefaultDataIsFilling;
  }
  public set IsGetFomviewDefaultParamsCallbackInProgress(value: boolean) {
    this._IsGetFomviewDefaultDataIsFilling = value;
  }
  objServiceProxy_GetFormViewDefaultParamsCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetFormViewDefaultParamsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000047;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:BasicDetailsVM, Method:objServiceProxy_GetFormViewDefaultParamsCompleted()';
    this.FormViewLoadingflag = false;
    this.IsApplyFrameworkRule = false;
    this.bIsAdminmethodRuleExecuted = false;
    this.IsGetFomviewDefaultParamsCallbackInProgress = false;
    if (e.Error == null && this.DefaultDetails != null) {
      try {
        let oDefBoosterUOMValue: CListItem = null;
        let oDefLowConcentrationUOMvalue: CListItem = null;
        let objRes: IPPMAManagePrescSer.CResMsgGetFormViewDefaultParams =
          e.Result;
        if (objRes != null) {
          let Istypeindrug: boolean =
            String.Compare(this.identifyingType, CConstants.NONCATALOGUEITEM) ==
              0 ||
            String.Compare(this.identifyingType, CConstants.Precatalog) == 0
              ? true
              : false;
          let IsMCI: boolean =
            !String.IsNullOrEmpty(this.ItemSubType) &&
            String.Equals(
              this.ItemSubType,
              'CC_MULCMPNTITM',
              StringComparison.CurrentCultureIgnoreCase
            )
              ? true
              : false;
          let IsForAmendFormViewLoading: boolean = false;
          if (this.bIsAmend && !this.IsClearlstAmendedFlds) {
            IsForAmendFormViewLoading = true;
          }
          this.NonFDBRouteFlag = objRes.techvalmandatory;
          if (
            this.CDItemLevelVM &&
            !Istypeindrug &&
            this.oPrescitemVM != null
          ) {
            this.oPrescitemVM.IsFormviewTechValtabMandatory = true;
          } else {
            this.oPrescitemVM.IsFormviewTechValtabMandatory =
              objRes.techvalmandatory;
            if (
              !IsForAmendFormViewLoading &&
              !Istypeindrug &&
              !IsMCI &&
              (String.Equals(
                this.identifyingType,
                CConstants.CATALOGUEITEM,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
                String.Equals(
                  this.identifyingType,
                  CConstants.ACTUALMOIETY,
                  StringComparison.CurrentCultureIgnoreCase
                ))
            ) {
              if (
                objRes.techvalmandatory &&
                ((this.DosageForm != null &&
                  !String.IsNullOrEmpty(this.DosageForm.Value)) ||
                  (this.Route != null &&
                    !String.IsNullOrEmpty(this.Route.Value)))
              ) {
                if (this.oPrescitemVM.FormViewerDetails.BasicDetails != null) {
                  if (
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties == null
                  ) {
                    this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties =
                      new ObservableCollection<DrugProperty>();
                  }
                  if (
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties != null &&
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties.Count > 0 &&
                    this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                      (x) =>
                        String.Equals(
                          x.DrugPropertyCode,
                          CConstants.DrugPropertyCNTRLDDRUG,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                    ).Count() > 0
                  ) {
                    let toRemove =
                      this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                        (c) =>
                          String.Equals(
                            c.DrugPropertyCode,
                            CConstants.DrugPropertyCNTRLDDRUG
                          )
                      ).ToList();
                    toRemove.forEach((item) => {
                      this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Remove(
                        item
                      );
                    });
                  }
                  this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Add(
                    ObjectHelper.CreateObject(new DrugProperty(), {
                      DrugPropertyCode: CConstants.DrugPropertyCNTRLDDRUG,
                      OccuranceCode: CConstants.AllChild_CC,
                      VMChildCode: CConstants.AllChild_CC,
                    })
                  );
                  this.VMRouteFormForCD = true;
                }
              } else if (
                (this.DosageForm != null &&
                  !String.IsNullOrEmpty(this.DosageForm.Value)) ||
                (this.Route != null && !String.IsNullOrEmpty(this.Route.Value))
              ) {
                if (this.oPrescitemVM.FormViewerDetails.BasicDetails != null) {
                  if (
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties == null
                  ) {
                    this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties =
                      new ObservableCollection<DrugProperty>();
                  }
                  if (
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties != null &&
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties.Count > 0 &&
                    this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                      (x) =>
                        String.Equals(
                          x.DrugPropertyCode,
                          CConstants.DrugPropertyCNTRLDDRUG,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                    ).Count() > 0
                  ) {
                    let toRemove =
                      this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                        (c) =>
                          String.Equals(
                            c.DrugPropertyCode,
                            CConstants.DrugPropertyCNTRLDDRUG
                          )
                      ).ToList();
                    toRemove.forEach((item) => {
                      this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Remove(
                        item
                      );
                    });
                    this.VMRouteFormForCD = false;
                  }
                }
              } else if (
                (this.DosageForm == null ||
                  (this.DosageForm != null &&
                    String.IsNullOrEmpty(this.DosageForm.Value))) &&
                (this.Route == null ||
                  (this.Route != null &&
                    String.IsNullOrEmpty(this.Route.Value)))
              ) {
                if (this.oPrescitemVM.FormViewerDetails.BasicDetails != null) {
                  if (
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties == null
                  ) {
                    this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties =
                      new ObservableCollection<DrugProperty>();
                  }
                  if (
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .VMDrugProperties != null &&
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties != null &&
                    this.oPrescitemVM.FormViewerDetails.BasicDetails
                      .DrugProperties.Count > 0 &&
                    this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                      (x) =>
                        String.Equals(
                          x.DrugPropertyCode,
                          CConstants.DrugPropertyCNTRLDDRUG,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                    ).Count() == 0
                  ) {
                    this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Add(
                      this.oPrescitemVM.FormViewerDetails.BasicDetails
                        .VMDrugProperties
                    );
                  }
                  if (
                    this.VMRouteFormForCD &&
                    this.DosageForm == null &&
                    this.Route == null &&
                    !String.Equals(
                      PatientContext.PrescriptionType,
                      PrescriptionTypes.Clerking
                    )
                  ) {
                    if (
                      this.oPrescitemVM.FormViewerDetails.BasicDetails
                        .DrugProperties != null &&
                      this.oPrescitemVM.FormViewerDetails.BasicDetails
                        .DrugProperties.Count > 0 &&
                      this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                        (x) =>
                          String.Equals(
                            x.DrugPropertyCode,
                            CConstants.DrugPropertyCNTRLDDRUG,
                            StringComparison.InvariantCultureIgnoreCase
                          )
                      ).Count() > 0
                    ) {
                      let toRemove =
                        this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Where(
                          (c) =>
                            String.Equals(
                              c.DrugPropertyCode,
                              CConstants.DrugPropertyCNTRLDDRUG
                            )
                        ).ToList();
                      toRemove.forEach((item) => {
                        this.oPrescitemVM.FormViewerDetails.BasicDetails.DrugProperties.Remove(
                          item
                        );
                      });
                      this.VMRouteFormForCD = false;
                    }
                  }
                }
              }
              if (
                this.VMRouteFormForCDChangedEvent != null &&
                this.oPrescitemVM != null
              ) {
                this.VMRouteFormForCDChangedEvent(this.oPrescitemVM);
              }
            }
          }
        }
        this.oPrescitemVM.SetTechvalImageStatus();
        this.IsGetFomviewDefaultParamsCallbackInProgress = true;
        if (
          this.RouteReloadedOnAMSelection &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Reorder) &&
          !String.IsNullOrEmpty(this.IdentifyingType) &&
          this.IdentifyingType.Equals(CConstants.ACTUALMOIETY) &&
          objRes.objDefaults.Route != null
        ) {
          let lstRoute: ObservableCollection<CListItem> =
            new ObservableCollection<CListItem>();
          let SelRoute: CListItem = new CListItem();
          objRes.objDefaults.Route.forEach((r) => {
            if (!String.IsNullOrEmpty(r.RouteName)) {
              let oRoute: CListItem = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText: r.RouteName,
                  Value: r.RouteId.ToString(),
                  Tag: r.bInfusion,
                  Level: !String.IsNullOrEmpty(r.IsStrengthReqd)
                    ? Convert.ToInt32(r.IsStrengthReqd)
                    : 0,
                }
              );
              lstRoute.Add(oRoute);
              if (
                !String.IsNullOrEmpty(r.bInfusion) &&
                this.Infusions != true
              ) {
                if (PatientContext.IsINFUSIONON && r.bInfusion == '1')
                  this.Infusions = true;
                else this.Infusions = false;
              }
              if (
                this.Route != null &&
                String.Compare(
                  this.Route.Value,
                  oRoute.Value,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
              ) {
                SelRoute = oRoute;
              }
            }
          });
          if (lstRoute != null && lstRoute.Count > 0) {
            this.IsCallFromRouteResetOnBrandSelection = true;
            this.DefaultDetails.ParamsDefaulted = false;
            this.DefaultDetails.Routes = lstRoute;
            this.IsCallFromRouteResetOnBrandSelection = false;
            this.Route = SelRoute;
            if (this.DefaultDetails.Routes != null) {
              let ncount: number = this.DefaultDetails.Routes.Count;
              if (
                ncount > 0 &&
                this.DefaultDetails.Routes != null &&
                !this.DefaultDetails.Routes[ncount - 1].DisplayText.Contains(
                  'More'
                )
              ) {
                this.DefaultDetails.Routes.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
              } else if (ncount == 0 && this.DefaultDetails.Routes != null) {
                this.DefaultDetails.Routes.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
              }
            }
            this.RouteReloadedOnAMSelection = false;
            this.DefaultDetails.ParamsDefaulted = true;
          }
        }
        if (
          objRes.objDefaults != null &&
          objRes.objDefaults.DosageForm != null
        ) {
          this.bDoseFormLoad = true;
          let lstForm: ObservableCollection<CListItem> =
            new ObservableCollection<CListItem>();
          let SelDoseForm: CListItem = new CListItem();
          let oDefValue: CListItem = null;
          let oDefValue1: CListItem = null;
          objRes.objDefaults.DosageForm.forEach((objForm) => {
            if (
              String.Compare(
                this.itemSubType,
                CConstants.SUBTYPE,
                StringComparison.OrdinalIgnoreCase
              ) == 0 &&
              this.DefaultDetails.Forms != null &&
              this.isAdhocitem == true
            ) {
              if (!String.IsNullOrEmpty(objForm.FormName)) {
                this.DefaultDetails.Forms.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: objForm.FormName,
                    Value: objForm.FormId.ToString(),
                  })
                );
              }
            } else {
              if (
                this.DosageForm != null &&
                !String.IsNullOrEmpty(this.DosageForm.Value) &&
                ((this.Route == null && this.RouteRecorded == null) ||
                  (this.Route != null &&
                    this.RouteRecorded != null &&
                    this.Route.Value == this.RouteRecorded.Value))
              ) {
                SelDoseForm = ObjectHelper.CreateObject(new CListItem(), {
                  Value: this.DosageForm.Value,
                  DisplayText: this.DosageForm.DisplayText,
                  Tag: this.DosageForm.Tag,
                });
              } else if (
                !String.IsNullOrEmpty(this.IdentifyingType) &&
                this.IdentifyingType.Equals(CConstants.ACTUALMOIETY) &&
                this.DosageForm != null &&
                !String.IsNullOrEmpty(this.DosageForm.Value)
              ) {
                SelDoseForm = ObjectHelper.CreateObject(new CListItem(), {
                  Value: this.DosageForm.Value,
                  DisplayText: this.DosageForm.DisplayText,
                  Tag: this.DosageForm.Tag,
                });
              } else {
                this._dosageForm = null;
              }
              if (!String.IsNullOrEmpty(objForm.FormName)) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: objForm.FormName,
                    Value: objForm.FormId.ToString(),
                  }
                );
                if (
                  oList != null &&
                  lstForm
                    .Where((x) =>
                      String.Equals(
                        x.Value,
                        oList.Value,
                        StringComparison.InvariantCultureIgnoreCase
                      )
                    )
                    .Count() == 0
                )
                  lstForm.Add(oList);
                if (
                  this.DosageForm != null &&
                  this.Route != null &&
                  this.RouteRecorded != null &&
                  this.Route.Value == this.RouteRecorded.Value &&
                  lstForm
                    .Where((x) =>
                      String.Equals(
                        x.Value,
                        this.DosageForm.Value,
                        StringComparison.InvariantCultureIgnoreCase
                      )
                    )
                    .Count() == 0
                )
                  lstForm.Add(this.DosageForm);
                if (
                  this.DosageForm != null &&
                  String.Compare(
                    this.DosageForm.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0 &&
                  this.Route != null &&
                  this.RouteRecorded != null &&
                  this.Route.Value == this.RouteRecorded.Value
                )
                  oDefValue = oList;
              }
              this.DefaultDetails.Forms = lstForm;
              if (
                this.DosageForm == null &&
                SelDoseForm != null &&
                !String.IsNullOrEmpty(SelDoseForm.Value)
              ) {
                this.DosageForm = ObjectHelper.CreateObject(new CListItem(), {
                  Value: SelDoseForm.Value,
                  DisplayText: SelDoseForm.DisplayText,
                  Tag: SelDoseForm.Tag,
                });
              } else if (
                oDefValue == null &&
                SelDoseForm != null &&
                !String.IsNullOrEmpty(SelDoseForm.Value)
              ) {
                if (
                  SelDoseForm != null &&
                  this.DefaultDetails.Forms.Where((x) =>
                    String.Equals(
                      x.Value,
                      SelDoseForm.Value,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ).Count() == 0
                ) {
                  this.DefaultDetails.Forms.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      Value: SelDoseForm.Value,
                      DisplayText: SelDoseForm.DisplayText,
                      Tag: SelDoseForm.Tag,
                    })
                  );
                }
                if (
                  this.DosageForm != null &&
                  String.Compare(
                    this.DosageForm.Value,
                    SelDoseForm.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue1 = SelDoseForm;
              }
            }
          });
          if (
            this.DosageForm != null &&
            !String.IsNullOrEmpty(this.DosageForm.Value)
          ) {
            let oTemp: CListItem = lstForm
              .Where((x) => x.Value == this.DosageForm.Value)
              .FirstOrDefault();
            if (
              this.oPrescitemVM != null &&
              (this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
                this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
                this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe) &&
              this.DeactivatedFormList != null &&
              !String.IsNullOrEmpty(this.DeactivatedFormList.Value) &&
              this.DosageForm != null &&
              !String.IsNullOrEmpty(this.DosageForm.Value) &&
              this.DosageForm.Tag != null
            ) {
              if (this.DefaultDetails.Forms == null)
                this.DefaultDetails.Forms =
                  new ObservableCollection<CListItem>();
              if (
                typeof this.DosageForm.Tag === 'boolean' &&
                <boolean>this.DosageForm.Tag
              ) {
                if (
                  this.DefaultDetails.Forms.Where((x) =>
                    String.Equals(
                      x.Value,
                      this.DosageForm.Value,
                      StringComparison.InvariantCultureIgnoreCase
                    )
                  ).Count() == 0
                ) {
                  if (
                    this.Route != null &&
                    this.RouteRecorded != null &&
                    this.Route.Value == this.RouteRecorded.Value
                  )
                    this.DefaultDetails.Forms.Add(this.DosageForm);
                }
              }
            } else if (
              oTemp == null &&
              this.DeactivatedFormList == null &&
              this.DosageForm == null
            ) {
              this._dosageForm = null;
            } else if (oTemp != null) {
              this.bDoseFormLoad = false;
              this.DosageForm = ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: oTemp.DisplayText,
                Value: oTemp.Value,
                Tag: 'ERule',
              });
            }
          }
          this.bDoseFormLoad = false;
          if (
            this.Route != null &&
            this.Route.Value != null &&
            !this.Route.Value.Contains(',')
          ) {
            if (
              this.DefaultDetails.Forms != null &&
              this.DefaultDetails.Forms.Count == 1 &&
              !this.DefaultDetails.Forms[0].DisplayText.Contains('More')
            ) {
              let OdefRM: CListItem = new CListItem();
              OdefRM = this.DefaultDetails.Forms.First();
              if (OdefRM != null && !this.bIsAmend) {
                OdefRM.Tag = 'ERule';
              }
              this.DosageForm = OdefRM;
            } else if (oDefValue != null) {
              if (!this.IsClearlstAmendedFlds && !this.bIsAmend)
                oDefValue.Tag = 'ERule';
              this.DosageForm = oDefValue;
            } else if (oDefValue1 != null) {
              this.DosageForm = oDefValue1;
            } else {
              if (
                this.DosageForm != null &&
                !String.IsNullOrEmpty(this.DosageForm.Value) &&
                this.DosageForm.Tag != null &&
                typeof this.DosageForm.Tag === 'boolean' &&
                <boolean>this.DosageForm.Tag &&
                this.DefaultDetails.Forms != null &&
                !this.DefaultDetails.Forms.Contains(this.DosageForm) &&
                this.Route != null &&
                this.RouteRecorded != null &&
                this.Route.Value == this.RouteRecorded.Value
              ) {
                if (
                  oDefValue1 != null &&
                  this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
                  SelDoseForm != null &&
                  !String.IsNullOrEmpty(SelDoseForm.Value)
                ) {
                  let ncount: number = this.DefaultDetails.Forms.Count;
                  if (
                    ncount > 0 &&
                    this.DefaultDetails.Forms != null &&
                    !this.DefaultDetails.Forms[ncount - 1].DisplayText.Contains(
                      this.DosageForm.DisplayText
                    )
                  ) {
                    this.DefaultDetails.Forms.Add(this.DosageForm);
                  }
                } else {
                  this.DefaultDetails.Forms.Add(this.DosageForm);
                }
              }
            }
          }
          if (
            String.Compare(
              this.itemSubType,
              CConstants.SUBTYPE,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            if (
              this.DefaultDetails.Forms != null &&
              this.DefaultDetails.Forms.Count == 1 &&
              !this.DefaultDetails.Forms[0].DisplayText.Contains('More')
            ) {
              this.DosageForm = this.DefaultDetails.Forms.First();
            }
          }
          if (
            this.oPrescitemVM.ActionCode != ActivityTypes.Amend &&
            !String.IsNullOrEmpty(this.IdentifyingType) &&
            !(
              this.IdentifyingType.Equals(CConstants.CATALOGUEITEM) ||
              this.IdentifyingType.Equals(CConstants.ACTUALMOIETY)
            ) &&
            this.DefaultDetails.Forms != null &&
            this.DefaultDetails.Forms.Count > 0
          ) {
            this.DosageForm = this.DefaultDetails.Forms[0];
          }
          if (this.DefaultDetails.Forms != null) {
            let ncount: number = this.DefaultDetails.Forms.Count;
            if (
              ncount > 0 &&
              this.DefaultDetails.Forms != null &&
              !this.DefaultDetails.Forms[ncount - 1].DisplayText.Contains(
                'More'
              )
            ) {
              this.DefaultDetails.Forms.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
            } else if (ncount == 0 && this.DefaultDetails.Forms != null) {
              this.DefaultDetails.Forms.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
            }
          }
        }
        if (
          this.Formset == true &&
          String.Compare(
            this.itemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          PatientContext.IsINFUSIONON &&
          this.Route != null &&
          this.Route.Tag != null &&
          String.Compare(this.Route.Tag.ToString(), '1') == 0
        ) {
          this.oPrescitemVM.GetMcchilditemDisplay();
        }
        let TempSteppedDoseUOM: CListItem = null;
        if (this.SteppedDoseUOM != null) {
          TempSteppedDoseUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: this.SteppedDoseUOM.DisplayText,
            Value: this.SteppedDoseUOM.Value,
            Tag: this.SteppedDoseUOM.Tag,
          });
        }
        this.bDoseUOMLoad = true;
        let oDefUOMValue: CListItem = null;
        let isOriginalUOMAlreadyContains: boolean = false;
        let isOriginalInfUOMAlreadyContains: boolean = false;
        if (objRes.objDefaults != null && objRes.objDefaults.DoseUOM != null) {
          this.DefaultDetails.OriginalUOM =
            new ObservableCollection<CListItem>();
          this.DefaultDetails.OriginalInfUOM =
            new ObservableCollection<CListItem>();
          objRes.objDefaults.DoseUOM.forEach((objUOM) => {
            if (!String.IsNullOrEmpty(objUOM.UOMName)) {
              let oList: CListItem = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText: objUOM.UOMName,
                  Value: objUOM.UOMId.ToString(),
                  Tag: objUOM.UOMCode.ToString(),
                }
              );
              if (this.DefaultDetails.OriginalUOM.Count > 0) {
                this.DefaultDetails.OriginalUOM.forEach((UOM) => {
                  if (UOM.Value == oList.Value) {
                    isOriginalUOMAlreadyContains = true;
                  }
                });
              }
              if (!isOriginalUOMAlreadyContains) {
                this.DefaultDetails.OriginalUOM.Add(oList);
              }
              if (
                PatientContext.IsINFUSIONON &&
                !String.Equals(objUOM.UOMTypeCode, CConstants.CompositeUOM)
              ) {
                if (this.DefaultDetails.OriginalInfUOM.Count > 0) {
                  this.DefaultDetails.OriginalInfUOM.forEach((UOM) => {
                    if (UOM.Value == oList.Value) {
                      isOriginalInfUOMAlreadyContains = true;
                    }
                  });
                }
                if (!isOriginalInfUOMAlreadyContains) {
                  this.DefaultDetails.OriginalInfUOM.Add(oList);
                }
              }
              if (!this.DoseUOMTypeCode.ContainsKey(objUOM.UOMCode)) {
                this.DoseUOMTypeCode.Add(objUOM.UOMCode, objUOM.UOMTypeCode);
              }
              if (
                this.DoseUOM != null &&
                String.Compare(
                  this.DoseUOM.Value,
                  oList.Value,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
              )
                oDefUOMValue = oList;
            }
          });
        }
        if (
          this.bIsAmend ||
          (!String.IsNullOrEmpty(this.itemSubType) &&
            String.Compare(
              this.itemSubType,
              CConstants.SUBTYPE,
              StringComparison.OrdinalIgnoreCase
            ) == 0) ||
          (this.DefaultDetails != null &&
            this.DefaultDetails.OriginalUOM != null &&
            this.DefaultDetails.OriginalUOM.Count == 0)
        ) {
          if (
            oDefUOMValue == null &&
            this.DoseUOM != null &&
            !String.IsNullOrEmpty(this.DoseUOM.Value) &&
            !String.IsNullOrEmpty(this.DoseUOM.DisplayText)
          ) {
            if (this.DefaultDetails.OriginalUOM == null) {
              this.DefaultDetails.OriginalUOM =
                new ObservableCollection<CListItem>();
            }
            if (this.DefaultDetails.OriginalUOM.Count > 0) {
              this.DefaultDetails.OriginalUOM.forEach((UOM) => {
                if (UOM.Value == this.DoseUOM.Value) {
                  isOriginalUOMAlreadyContains = true;
                }
              });
            }
            if (!isOriginalUOMAlreadyContains) {
              this.DefaultDetails.OriginalUOM.Add(this.DoseUOM);
            }
            if (PatientContext.IsINFUSIONON) {
              if (this.DefaultDetails.OriginalInfUOM == null)
                this.DefaultDetails.OriginalInfUOM =
                  new ObservableCollection<CListItem>();
              if (this.DefaultDetails.OriginalInfUOM.Count > 0) {
                this.DefaultDetails.OriginalInfUOM.forEach((UOM) => {
                  if (UOM.Value == this.DoseUOM.Value) {
                    isOriginalInfUOMAlreadyContains = true;
                  }
                });
              }
              if (!isOriginalInfUOMAlreadyContains) {
                this.DefaultDetails.OriginalInfUOM.Add(this.DoseUOM);
              }
            }
            oDefUOMValue = this.DoseUOM;
          }
        }
        if (
          this.DefaultDetails != null &&
          (this.DefaultDetails.Uoms == null ||
            (this.DefaultDetails.Uoms != null &&
              this.DefaultDetails.Uoms.Count == 0)) &&
          this.DoseUOM != null &&
          (this.bIsAmend ||
            (this.oPrescitemVM != null &&
              this.oPrescitemVM.ActionCode == ActivityTypes.Reorder))
        ) {
          if (this.DefaultDetails.OriginalUOM == null) {
            this.DefaultDetails.OriginalUOM =
              new ObservableCollection<CListItem>();
          }
          if (this.DefaultDetails.OriginalUOM.Count > 0) {
            this.DefaultDetails.OriginalUOM.forEach((UOM) => {
              if (UOM.Value == this.DoseUOM.Value) {
                isOriginalUOMAlreadyContains = true;
              }
            });
          }
          if (!isOriginalUOMAlreadyContains) {
            this.DefaultDetails.OriginalUOM.Add(this.DoseUOM);
          }
          if (
            PatientContext.IsINFUSIONON &&
            this.DefaultDetails.OriginalInfUOM != null
          ) {
            if (this.DefaultDetails.OriginalInfUOM.Count > 0) {
              this.DefaultDetails.OriginalInfUOM.forEach((UOM) => {
                if (UOM.Value == this.DoseUOM.Value) {
                  isOriginalInfUOMAlreadyContains = true;
                }
              });
            }
            if (!isOriginalInfUOMAlreadyContains) {
              this.DefaultDetails.OriginalInfUOM.Add(this.DoseUOM);
            }
          }
        }
        if (
          this.DefaultDetails != null &&
          this.DefaultDetails.OriginalUOM != null
        ) {
          let sorteduoms = this.DefaultDetails.OriginalUOM.Where(
            (item) =>
              !String.Equals(
                item.Value,
                'cc_more',
                StringComparison.CurrentCultureIgnoreCase
              )
          )
            .OrderBy((item) => item.DisplayText)
            .Select((item) => item);
          if (sorteduoms != null && sorteduoms.Count() > 0) {
            let sortedUOMList: ObservableCollection<CListItem> =
              new ObservableCollection<CListItem>();
            sorteduoms.forEach((item) => {
              sortedUOMList.Add(item);
            });
            if (
              this.DefaultDetails.OriginalUOM.Where((c) =>
                String.Equals(
                  c.Value,
                  'cc_more',
                  StringComparison.CurrentCultureIgnoreCase
                )
              ).Count() > 0
            ) {
              sortedUOMList.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
            }
            this.DefaultDetails.OriginalUOM = sortedUOMList;
          }
        }
        if (
          this.DefaultDetails != null &&
          this.DefaultDetails.OriginalInfUOM != null
        ) {
          let sorteduoms = this.DefaultDetails.OriginalInfUOM.Where(
            (item) =>
              !String.Equals(
                item.Value,
                'cc_more',
                StringComparison.CurrentCultureIgnoreCase
              )
          )
            .OrderBy((item) => item.DisplayText)
            .Select((item) => item);
          if (sorteduoms != null && sorteduoms.Count() > 0) {
            let sortedUOMList: ObservableCollection<CListItem> =
              new ObservableCollection<CListItem>();
            sorteduoms.forEach((item) => {
              sortedUOMList.Add(item);
            });
            if (
              this.DefaultDetails.OriginalUOM.Where((c) =>
                String.Equals(
                  c.Value,
                  'cc_more',
                  StringComparison.CurrentCultureIgnoreCase
                )
              ).Count() > 0
            ) {
              sortedUOMList.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
            }
            this.DefaultDetails.OriginalInfUOM = sortedUOMList;
          }
        }
        if (
          this.IsAllowMultiRoute &&
          this.DefaultDetails != null &&
          this.DefaultDetails.Routes != null &&
          this.DefaultDetails.Routes.Where((x) => x.IsSelected).Count() > 0 &&
          this.IsMultiRouteChecked
        ) {
          let SelInfMultiInfRoutes = this.DefaultDetails.Routes.Where(
            (SelInfRoutes) =>
              SelInfRoutes.IsSelected &&
              SelInfRoutes.Tag != null &&
              PatientContext.IsINFUSIONON &&
              String.Compare(
                SelInfRoutes.Tag.ToString(),
                '1',
                StringComparison.CurrentCultureIgnoreCase
              ) == 0
          ).Select((SelInfRoutes) => SelInfRoutes);
          let SelnonInfMultiRoutes = this.DefaultDetails.Routes.Where(
            (SelInfRoutes) =>
              SelInfRoutes.IsSelected &&
              ((SelInfRoutes.Tag != null &&
                (String.Compare(
                  SelInfRoutes.Tag.ToString(),
                  '0',
                  StringComparison.CurrentCultureIgnoreCase
                ) == 0 ||
                  (!PatientContext.IsINFUSIONON &&
                    String.Compare(
                      SelInfRoutes.Tag.ToString(),
                      '1',
                      StringComparison.CurrentCultureIgnoreCase
                    ) == 0))) ||
                SelInfRoutes.Tag == null)
          ).Select((SelInfRoutes) => SelInfRoutes);
          if (
            SelnonInfMultiRoutes != null &&
            SelnonInfMultiRoutes.Count() > 0 &&
            (SelInfMultiInfRoutes == null || SelInfMultiInfRoutes.Count() == 0)
          ) {
            this.RestoreDoseUOMList(false);
          } else if (
            SelInfMultiInfRoutes != null &&
            SelInfMultiInfRoutes.Count() > 0 &&
            (SelnonInfMultiRoutes == null || SelnonInfMultiRoutes.Count() == 0)
          ) {
            this.RestoreDoseUOMList(true);
          } else if (
            SelnonInfMultiRoutes != null &&
            SelnonInfMultiRoutes.Count() > 0 &&
            SelInfMultiInfRoutes != null &&
            SelInfMultiInfRoutes.Count() > 0
          ) {
            this.RestoreMultiInfDoseUOMList();
          }
        } else {
          if (
            PatientContext.IsINFUSIONON &&
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            this.DefaultDetails.Uoms = this.DefaultDetails.OriginalInfUOM;
          } else {
            this.DefaultDetails.Uoms = this.DefaultDetails.OriginalUOM;
          }
        }
        if (
          (String.Compare(this.IdentifyingType, CConstants.NONCATALOGUEITEM) ==
            0 ||
            String.Compare(this.IdentifyingType, CConstants.Precatalog) == 0) &&
          this.DefaultDetails.Uoms != null &&
          this.DefaultDetails.Uoms.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.DefaultDetails.Uoms.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (
          (String.Compare(this.IdentifyingType, CConstants.NONCATALOGUEITEM) ==
            0 ||
            String.Compare(this.IdentifyingType, CConstants.Precatalog) == 0) &&
          this.InfusionDetails != null &&
          this.InfusionDetails.InfRateNumeratorUOM != null &&
          this.InfusionDetails.InfRateNumeratorUOM.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.InfusionDetails.RestoreInfusionNumerator(false, true);
          this.InfusionDetails.InfRateNumeratorUOM.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (
          (String.Compare(this.IdentifyingType, CConstants.NONCATALOGUEITEM) ==
            0 ||
            String.Compare(this.IdentifyingType, CConstants.Precatalog) == 0) &&
          this.InfusionDetails.BoosterDoseUOMList == null
        ) {
          this.InfusionDetails.BoosterDoseUOMList =
            new ObservableCollection<CListItem>();
        }
        if (
          this.oPrescitemVM != null &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
            this.FollowUpStatLaunch.Equals('S')) &&
          this.DoseUOM != null &&
          !String.IsNullOrEmpty(this.DoseUOM.Value)
        ) {
          if (this.DefaultDetails.Uoms == null)
            this.DefaultDetails.Uoms = new ObservableCollection<CListItem>();
          if (
            this.DefaultDetails.Uoms.Where((x) =>
              String.Equals(
                x.Value,
                this.DoseUOM.Value,
                StringComparison.InvariantCultureIgnoreCase
              )
            ).Count() == 0
          ) {
            oDefUOMValue = this.DoseUOM;
            this.DefaultDetails.Uoms.Add(this.DoseUOM);
          } else {
            oDefUOMValue = this.DoseUOM;
          }
        }
        this.bDoseUOMLoad = false;
        if (oDefUOMValue != null) {
          this.DoseUOM = oDefUOMValue;
        } else {
          if (this._isRouteChanged) this.DoseUOM = null;
          else {
            if (this.DoseUOM != null) {
              if (
                this.DefaultDetails != null &&
                this.DefaultDetails.Uoms == null
              ) {
                this.DefaultDetails.Uoms =
                  new ObservableCollection<CListItem>();
              }
              if (
                this.DefaultDetails.Uoms.Where((x) =>
                  String.Equals(
                    x.Value,
                    this.DoseUOM.Value,
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ).Count() == 0
              ) {
                this.DefaultDetails.Uoms.Add(this.DoseUOM);
              }
            }
          }
        }
        if (
          this.DoseUOM != null &&
          !String.IsNullOrEmpty(this.DoseUOM.DisplayText) &&
          this.DefaultDetails != null &&
          this.DefaultDetails.Uoms != null
        )
          this.DoseUOM = this.GetComboValue(
            this.DoseUOM,
            this.DefaultDetails.Uoms
          );
        if (this.ConditionalDosingDetails != null) {
          this.ConditionalDosingDetails.DoseUOMs = this.DefaultDetails.Uoms;
        }
        if (TempSteppedDoseUOM != null) {
          if (
            this.DoseType != null &&
            !String.IsNullOrEmpty(this.DoseType.Value) &&
            (String.Equals(
              this.DoseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.CurrentCultureIgnoreCase
            ) ||
              String.Equals(
                this.DoseType.Value,
                DoseTypeCode.VARIABLE,
                StringComparison.CurrentCultureIgnoreCase
              ) ||
              String.Equals(
                this.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE,
                StringComparison.CurrentCultureIgnoreCase
              ))
          ) {
            let oSelectedSteppedDoseUOM = this.DefaultDetails.Uoms.Where((x) =>
              String.Equals(
                x.Value,
                TempSteppedDoseUOM.Value,
                StringComparison.InvariantCultureIgnoreCase
              )
            );
            if (
              oSelectedSteppedDoseUOM != null &&
              oSelectedSteppedDoseUOM.Count() > 0
            ) {
              this.SteppedDoseUOM = oSelectedSteppedDoseUOM.First();
            } else {
              this.DefaultDetails.Uoms.Add(TempSteppedDoseUOM);
              this.SteppedDoseUOM = TempSteppedDoseUOM;
            }
            TempSteppedDoseUOM = null;
          }
        }
        let SelectedInfNumRate: CListItem = null;
        let SeleectedLowConcentration: CListItem = null;
        let oDefLowConcentration: CListItem = new CListItem();
        let IsMedGas: boolean = false;
        if (
          !String.IsNullOrEmpty(this.ItemSubType) &&
          String.Compare(
            this.ItemSubType,
            CConstants.SUBTYPE_GAS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          IsMedGas = true;
        }
        if (this.bIsAmend && !IsMedGas) {
          let oDefBolusUOM: CListItem = new CListItem();
          if (this.InfusionDetails.BolusUOM != null) {
            oDefBolusUOM = ObjectHelper.CreateObject(new CListItem(), {
              Value: this.InfusionDetails.BolusUOM.Value,
              DisplayText: this.InfusionDetails.BolusUOM.DisplayText,
              Tag: 'ERule',
            });
          }
          let oDefLowConcentrationUOM: CListItem = new CListItem();
          if (this.InfusionDetails.LowConcentrationUOM != null) {
            oDefLowConcentrationUOM = ObjectHelper.CreateObject(
              new CListItem(),
              {
                Value: this.InfusionDetails.LowConcentrationUOM.Value,
                DisplayText:
                  this.InfusionDetails.LowConcentrationUOM.DisplayText,
                Tag: 'ERule',
              }
            );
          }
          let oDefBoosterUOM: CListItem = new CListItem();
          let oDefInfRate: CListItem = new CListItem();
          if (this.InfusionDetails.Boosterdoseuom != null) {
            oDefBoosterUOM = ObjectHelper.CreateObject(new CListItem(), {
              Value: this.InfusionDetails.Boosterdoseuom.Value,
              DisplayText: this.InfusionDetails.Boosterdoseuom.DisplayText,
              Tag: this.InfusionDetails.Boosterdoseuom.Tag,
            });
          }
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.Uoms != null &&
            this.DefaultDetails.Uoms.Count > 0
          ) {
            if (
              this.InfusionDetails.LowConcentrationUOM != null &&
              !String.IsNullOrEmpty(
                this.InfusionDetails.LowConcentrationUOM.Value
              )
            ) {
              SeleectedLowConcentration = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText:
                    this.InfusionDetails.LowConcentrationUOM.DisplayText,
                  Value: this.InfusionDetails.LowConcentrationUOM.Value,
                  Tag: this.InfusionDetails.LowConcentrationUOM.Tag,
                }
              );
            }
            if (
              this.InfusionDetails.BolusUOMList == null ||
              (this.DefaultDetails != null &&
                this.DefaultDetails.OriginalInfUOM != null &&
                this.InfusionDetails.BolusUOMList != null &&
                this.InfusionDetails.BolusUOMList.Where(
                  (x) => x.Value != CConstants.CONST_MORE
                ).Count() != this.DefaultDetails.OriginalInfUOM.Count)
            ) {
              this.InfusionDetails.BolusUOMList =
                new ObservableCollection<CListItem>();
            }
            if (
              this.InfusionDetails.BoosterDoseUOMList == null ||
              (this.DefaultDetails != null &&
                this.DefaultDetails.OriginalInfUOM != null &&
                this.InfusionDetails.BoosterDoseUOMList != null &&
                this.InfusionDetails.BoosterDoseUOMList.Where(
                  (x) => x.Value != CConstants.CONST_MORE
                ).Count() != this.DefaultDetails.OriginalInfUOM.Count)
            ) {
              this.InfusionDetails.BoosterDoseUOMList =
                new ObservableCollection<CListItem>();
            }
            if (
              this.InfusionDetails.LowConcentrationUOMlist == null ||
              (this.DefaultDetails != null &&
                this.DefaultDetails.OriginalInfUOM != null &&
                this.InfusionDetails.LowConcentrationUOMlist != null &&
                this.InfusionDetails.LowConcentrationUOMlist.Where(
                  (x) => x.Value != CConstants.CONST_MORE
                ).Count() != this.DefaultDetails.OriginalInfUOM.Count)
            ) {
              this.InfusionDetails.LowConcentrationUOMlist =
                new ObservableCollection<CListItem>();
            }
            if (
              this.InfusionDetails.InfRateNumeratorUom != null &&
              !String.IsNullOrEmpty(
                this.InfusionDetails.InfRateNumeratorUom.Value
              )
            ) {
              SelectedInfNumRate = ObjectHelper.CreateObject(new CListItem(), {
                DisplayText:
                  this.InfusionDetails.InfRateNumeratorUom.DisplayText,
                Value: this.InfusionDetails.InfRateNumeratorUom.Value,
                Tag: this.InfusionDetails.InfRateNumeratorUom.Tag,
              });
              this.InfusionDetails.InfRateNumeratorUom.Tag =
                this.InfusionDetails.InfRateNumeratorUom.Tag != null
                  ? this.InfusionDetails.InfRateNumeratorUom.Tag.ToString() +
                    ',ERule'
                  : 'ERule';
            }
            this.InfusionDetails.InfRateNumeratorUOM =
              new ObservableCollection<CListItem>();
            let Istypeindrug: boolean =
              String.Compare(
                this.IdentifyingType,
                CConstants.NONCATALOGUEITEM
              ) == 0 ||
              String.Compare(this.IdentifyingType, CConstants.Precatalog) == 0
                ? true
                : false;
            if (!Istypeindrug) {
              if (
                this.InfusionDetails.VolumeUOMList != null &&
                this.InfusionDetails.VolumeUOMList.Count > 0
              ) {
                this.InfusionDetails.VolumeUOMList.forEach((Otem) => {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: Otem.DisplayText,
                      Value: Otem.Value.ToString(),
                      Tag: Otem.Tag,
                    }
                  );
                  if (
                    this.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        x.Tag != null &&
                        Otem.Tag != null &&
                        x.Tag.ToString().Contains(Otem.Tag.ToString())
                    ).Count() == 0
                  ) {
                    this.InfusionDetails.InfRateNumeratorUOM.Add(oList);
                  }
                });
              }
            } else {
              if (
                SelectedInfNumRate != null &&
                !String.IsNullOrEmpty(SelectedInfNumRate.Value) &&
                this.InfusionDetails.InfRateNumeratorUOM != null &&
                (this.InfusionDetails.InfRateNumeratorUOM.Count == 0 ||
                  (this.InfusionDetails.InfRateNumeratorUOM.Count > 0 &&
                    this.InfusionDetails.InfRateNumeratorUOM.Where((x) =>
                      String.Equals(x.Value, SelectedInfNumRate.Value)
                    ).Count() == 0))
              ) {
                this.InfusionDetails.InfRateNumeratorUOM.Add(
                  SelectedInfNumRate
                );
              }
              if (
                this.InfusionDetails.InfRateNumeratorUOM.Where((x) =>
                  String.Equals(
                    x.Value,
                    CConstants.CONST_MORE,
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ).Count() == 0
              ) {
                this.InfusionDetails.InfRateNumeratorUOM.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
              }
            }
            if (
              !(
                String.Equals(
                  this.IdentifyingType,
                  CConstants.NONCATALOGUEITEM
                ) || String.Equals(this.IdentifyingType, CConstants.Precatalog)
              )
            ) {
              if (
                this.DefaultDetails.OriginalInfUOM != null &&
                this.DefaultDetails.OriginalInfUOM.Count > 0
              ) {
                this.DefaultDetails.OriginalInfUOM.forEach((objBolusUOM) => {
                  if (!String.IsNullOrEmpty(objBolusUOM.DisplayText)) {
                    let oList: CListItem = ObjectHelper.CreateObject(
                      new CListItem(),
                      {
                        DisplayText: objBolusUOM.DisplayText,
                        Value: objBolusUOM.Value.ToString(),
                      }
                    );
                    let UOMTypeCode: string = String.Empty;
                    let checkvalue: boolean = false;
                    if (
                      this.DoseUOMTypeCode != null &&
                      this.DoseUOMTypeCode.Count() > 0 &&
                      objBolusUOM.Tag != null
                    ) {
                      checkvalue = this.DoseUOMTypeCode.TryGetValue(
                        objBolusUOM.Tag.ToString(),
                        (o) => {
                          UOMTypeCode = o;
                        }
                      );
                    }
                    if (
                      this.InfusionDetails.BolusUOMList.Where((x) =>
                        String.Equals(
                          x.Value,
                          oList.Value,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                      ).Count() == 0
                    ) {
                      if (
                        checkvalue &&
                        !String.Equals(UOMTypeCode, CConstants.CompositeUOM)
                      ) {
                        this.InfusionDetails.BolusUOMList.Add(oList);
                      }
                    }
                    if (
                      this.InfusionDetails.BoosterDoseUOMList.Where((x) =>
                        String.Equals(
                          x.Value,
                          oList.Value,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                      ).Count() == 0
                    ) {
                      if (
                        checkvalue &&
                        !String.Equals(UOMTypeCode, CConstants.CompositeUOM)
                      ) {
                        this.InfusionDetails.BoosterDoseUOMList.Add(oList);
                      }
                    }
                    let oConcentrationUOMList: CListItem =
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: objBolusUOM.DisplayText,
                        Value: objBolusUOM.Value.ToString(),
                        Tag: objBolusUOM.Tag,
                      });
                    if (
                      this.InfusionDetails.LowConcentrationUOMlist.Where((x) =>
                        String.Equals(
                          x.Value,
                          oList.Value,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                      ).Count() == 0
                    ) {
                      if (
                        checkvalue &&
                        !String.Equals(UOMTypeCode, CConstants.CompositeUOM)
                      ) {
                        this.InfusionDetails.LowConcentrationUOMlist.Add(oList);
                      }
                    }
                    if (
                      this.InfusionDetails.LowConcentrationUOM != null &&
                      !String.IsNullOrEmpty(
                        this.InfusionDetails.LowConcentrationUOM.Value
                      ) &&
                      String.Equals(
                        this.InfusionDetails.LowConcentrationUOM.Value,
                        oConcentrationUOMList.Value
                      )
                    ) {
                      oDefLowConcentration = oConcentrationUOMList;
                    } else if (
                      SeleectedLowConcentration != null &&
                      !String.IsNullOrEmpty(SeleectedLowConcentration.Value) &&
                      String.Equals(
                        SeleectedLowConcentration.Value,
                        oConcentrationUOMList.Value
                      )
                    ) {
                      oDefLowConcentration = oConcentrationUOMList;
                    }
                    if (this.InfusionDetails.InfRateNumeratorUOM == null)
                      this.InfusionDetails.InfRateNumeratorUOM =
                        new ObservableCollection<CListItem>();
                    if (
                      !String.IsNullOrEmpty(
                        oConcentrationUOMList.DisplayText
                      ) &&
                      !oConcentrationUOMList.DisplayText.Contains('hour') &&
                      !oConcentrationUOMList.DisplayText.Contains('minute') &&
                      !oConcentrationUOMList.DisplayText.Contains('day') &&
                      !oConcentrationUOMList.DisplayText.Contains('More') &&
                      oConcentrationUOMList.Tag != null &&
                      !String.Equals(oConcentrationUOMList.Tag, CConstants.ml)
                    ) {
                      if (
                        this.InfusionDetails.InfRateNumeratorUOM.Where(
                          (x) =>
                            x.Tag != null &&
                            x.Tag.ToString().Contains(
                              oConcentrationUOMList.Tag.ToString()
                            )
                        ).Count() == 0
                      ) {
                        this.InfusionDetails.InfRateNumeratorUOM.Add(
                          oConcentrationUOMList
                        );
                      }
                      if (
                        this.InfusionDetails.InfRateNumeratorUom != null &&
                        !String.IsNullOrEmpty(
                          this.InfusionDetails.InfRateNumeratorUom.Value
                        ) &&
                        String.Equals(
                          this.InfusionDetails.InfRateNumeratorUom.Value,
                          oConcentrationUOMList.Value
                        )
                      ) {
                        oDefInfRate = oConcentrationUOMList;
                      } else if (
                        this.InfusionDetails.InfRateNumeratorUom != null &&
                        this.InfusionDetails.InfRateNumeratorUom.Tag != null &&
                        !String.IsNullOrEmpty(
                          this.InfusionDetails.InfRateNumeratorUom.Tag.ToString()
                        ) &&
                        this.InfusionDetails.InfRateNumeratorUom.Tag.ToString().Contains(
                          oConcentrationUOMList.Value
                        )
                      ) {
                        oDefInfRate = oConcentrationUOMList;
                      } else if (
                        SelectedInfNumRate != null &&
                        !String.IsNullOrEmpty(SelectedInfNumRate.Value) &&
                        String.Equals(
                          SelectedInfNumRate.Value,
                          oConcentrationUOMList.Value
                        )
                      ) {
                        oDefInfRate = oConcentrationUOMList;
                      }
                    }
                  }
                });
              }
              if (this.InfusionDetails.InfRateNumeratorUOM.Count > 1) {
                this.InfusionDetails.RestoreInfusionNumerator(false, true);
              }
            }
            if (
              oDefInfRate != null &&
              !String.IsNullOrEmpty(oDefInfRate.Value)
            ) {
              this.InfusionDetails.IsERuleInfRateNumeratorUom = true;
              this.InfusionDetails.InfRateNumeratorUom = oDefInfRate;
            } else if (
              this.InfusionDetails.InfRateNumeratorUom != null &&
              !String.IsNullOrEmpty(
                this.InfusionDetails.InfRateNumeratorUom.Value
              )
            ) {
              let DefInfRate = this.InfusionDetails.InfRateNumeratorUOM.Where(
                (oRate) =>
                  oRate.Value == this.InfusionDetails.InfRateNumeratorUom.Value
              ).Select((oRate) => oRate);
              if (DefInfRate != null && DefInfRate.Count() > 0) {
                this.InfusionDetails.IsERuleInfRateNumeratorUom = true;
                this.InfusionDetails.InfRateNumeratorUom =
                  DefInfRate.FirstOrDefault();
              } else {
                let DefInfRate1 =
                  this.InfusionDetails.InfRateNumeratorUOM.Where(
                    (oRate) =>
                      oRate.Tag != null &&
                      this.InfusionDetails.InfRateNumeratorUom.Tag != null &&
                      this.InfusionDetails.InfRateNumeratorUom.Tag.ToString().Contains(
                        oRate.Tag.ToString()
                      )
                  ).Select((oRate) => oRate);
                if (DefInfRate1 != null && DefInfRate1.Count() > 0) {
                  this.InfusionDetails.IsERuleInfRateNumeratorUom = true;
                  this.InfusionDetails.InfRateNumeratorUom =
                    DefInfRate1.FirstOrDefault();
                } else {
                  if (
                    this.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        this.InfusionDetails.InfRateNumeratorUom.Tag != null &&
                        x.Tag != null &&
                        this.InfusionDetails.InfRateNumeratorUom.Tag.ToString().Contains(
                          x.Tag.ToString()
                        )
                    ).Count() == 0
                  ) {
                    this.InfusionDetails.InfRateNumeratorUOM.Add(
                      this.InfusionDetails.InfRateNumeratorUom
                    );
                  }
                }
              }
            } else if (
              SelectedInfNumRate != null &&
              !String.IsNullOrEmpty(SelectedInfNumRate.Value)
            ) {
              let DefInfRate = this.InfusionDetails.InfRateNumeratorUOM.Where(
                (oRate) => oRate.Value == SelectedInfNumRate.Value
              ).Select((oRate) => oRate);
              if (DefInfRate != null && DefInfRate.Count() > 0) {
                this.InfusionDetails.IsERuleInfRateNumeratorUom = true;
                this.InfusionDetails.InfRateNumeratorUom =
                  DefInfRate.FirstOrDefault();
              }
              let DefInfRate1 = this.InfusionDetails.InfRateNumeratorUOM.Where(
                (oRate) =>
                  oRate.Tag != null &&
                  SelectedInfNumRate.Tag != null &&
                  oRate.Tag.ToString() == SelectedInfNumRate.Tag.ToString()
              ).Select((oRate) => oRate);
              if (DefInfRate1 != null && DefInfRate1.Count() > 0) {
                this.InfusionDetails.IsERuleInfRateNumeratorUom = true;
                this.InfusionDetails.InfRateNumeratorUom =
                  DefInfRate1.FirstOrDefault();
              }
            }
            if (
              oDefLowConcentration != null &&
              !String.IsNullOrEmpty(oDefLowConcentration.Value)
            ) {
              this.InfusionDetails.LowConcentrationUOM = oDefLowConcentration;
            } else if (
              this.InfusionDetails.LowConcentrationUOM != null &&
              !String.IsNullOrEmpty(
                this.InfusionDetails.LowConcentrationUOM.Value
              )
            ) {
              let oDefLowConcentration1 =
                this.InfusionDetails.LowConcentrationUOMlist.Where(
                  (oRate) =>
                    oRate.Value ==
                    this.InfusionDetails.LowConcentrationUOM.Value
                ).Select((oRate) => oRate);
              if (
                oDefLowConcentration1 != null &&
                oDefLowConcentration1.Count() > 0
              ) {
                this.InfusionDetails.LowConcentrationUOM =
                  oDefLowConcentration1.FirstOrDefault();
              }
            } else if (
              SeleectedLowConcentration != null &&
              !String.IsNullOrEmpty(SeleectedLowConcentration.Value)
            ) {
              let DefLowConcentration =
                this.InfusionDetails.LowConcentrationUOMlist.Where(
                  (oRate) => oRate.Value == SeleectedLowConcentration.Value
                ).Select((oRate) => oRate);
              if (
                DefLowConcentration != null &&
                DefLowConcentration.Count() > 0
              ) {
                this.InfusionDetails.LowConcentrationUOM =
                  DefLowConcentration.FirstOrDefault();
              } else {
                this.InfusionDetails.LowConcentrationUOMlist.Add(
                  SeleectedLowConcentration
                );
                this.InfusionDetails.LowConcentrationUOM =
                  SeleectedLowConcentration;
              }
            }
          }
          if (
            oDefBolusUOM != null &&
            !String.IsNullOrEmpty(oDefBolusUOM.Value) &&
            String.Compare(oDefBolusUOM.Value, '0') != 0
          ) {
            this.InfusionDetails.BolusUOM = oDefBolusUOM;
            if (this.InfusionDetails.BolusUOMList == null) {
              this.InfusionDetails.BolusUOMList =
                new ObservableCollection<CListItem>();
              this.InfusionDetails.BolusUOMList.Add(oDefBolusUOM);
              this.InfusionDetails.BolusUOM = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText: oDefBolusUOM.DisplayText,
                  Value: Convert.ToString(oDefBolusUOM.Value),
                }
              );
            }
          }
          if (
            oDefBoosterUOM != null &&
            !String.IsNullOrEmpty(oDefBoosterUOM.Value) &&
            String.Compare(oDefBoosterUOM.Value, '0') != 0
          ) {
            this.InfusionDetails.Boosterdoseuom = ObjectHelper.CreateObject(
              new CListItem(),
              {
                Value: oDefBoosterUOM.Value,
                DisplayText: oDefBoosterUOM.DisplayText,
                Tag: 'ERule',
              }
            );
            if (this.InfusionDetails.BoosterDoseUOMList == null) {
              this.InfusionDetails.BoosterDoseUOMList =
                new ObservableCollection<CListItem>();
              this.InfusionDetails.BoosterDoseUOMList.Add(oDefBoosterUOM);
              this.InfusionDetails.Boosterdoseuom = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText: oDefBoosterUOM.DisplayText,
                  Value: Convert.ToString(oDefBoosterUOM.Value),
                }
              );
            }
          }
          if (this.InfusionDetails.BolusUOMList == null)
            this.InfusionDetails.BolusUOMList =
              new ObservableCollection<CListItem>();
          if (
            this.InfusionDetails.BolusUOMList.Where((x) =>
              String.Equals(
                x.Value,
                CConstants.CONST_MORE,
                StringComparison.InvariantCultureIgnoreCase
              )
            ).Count() == 0
          ) {
            this.InfusionDetails.BolusUOMList.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
          if (this.InfusionDetails.BoosterDoseUOMList == null)
            this.InfusionDetails.BoosterDoseUOMList =
              new ObservableCollection<CListItem>();
          if (
            this.InfusionDetails.BoosterDoseUOMList.Where((x) =>
              String.Equals(
                x.Value,
                CConstants.CONST_MORE,
                StringComparison.InvariantCultureIgnoreCase
              )
            ).Count() == 0
          ) {
            this.InfusionDetails.BoosterDoseUOMList.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
          if (this.InfusionDetails.LowConcentrationUOMlist == null)
            this.InfusionDetails.LowConcentrationUOMlist =
              new ObservableCollection<CListItem>();
          if (
            this.InfusionDetails.LowConcentrationUOMlist.Where((x) =>
              String.Equals(
                x.Value,
                CConstants.CONST_MORE,
                StringComparison.InvariantCultureIgnoreCase
              )
            ).Count() == 0
          ) {
            this.InfusionDetails.LowConcentrationUOMlist.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
        } else if (!IsMedGas) {
          let oSelectedInfRateUOM: CListItem = new CListItem();
          if (
            this.DefaultDetails != null &&
            this.DefaultDetails.Uoms != null &&
            this.DefaultDetails.Uoms.Count > 0
          ) {
            if (this.InfusionDetails.InfRateNumeratorUom != null) {
              oSelectedInfRateUOM = ObjectHelper.CreateObject(new CListItem(), {
                Value: this.InfusionDetails.InfRateNumeratorUom.Value,
                DisplayText:
                  this.InfusionDetails.InfRateNumeratorUom.DisplayText,
                Tag: this.InfusionDetails.InfRateNumeratorUom.Tag,
              });
            }
            if (
              this.InfusionDetails.BolusUOMList == null ||
              (this.DefaultDetails != null &&
                this.DefaultDetails.OriginalInfUOM != null &&
                this.InfusionDetails.BolusUOMList != null &&
                this.InfusionDetails.BolusUOMList.Where(
                  (x) => x.Value != CConstants.CONST_MORE
                ).Count() != this.DefaultDetails.OriginalInfUOM.Count)
            ) {
              this.InfusionDetails.BolusUOMList =
                new ObservableCollection<CListItem>();
            }
            if (
              this.InfusionDetails.BoosterDoseUOMList == null ||
              (this.DefaultDetails != null &&
                this.DefaultDetails.OriginalInfUOM != null &&
                this.InfusionDetails.BoosterDoseUOMList != null &&
                this.InfusionDetails.BoosterDoseUOMList.Where(
                  (x) => x.Value != CConstants.CONST_MORE
                ).Count() != this.DefaultDetails.OriginalInfUOM.Count)
            ) {
              if (this.InfusionDetails.Boosterdoseuom != null) {
                oDefBoosterUOMValue = this.InfusionDetails.Boosterdoseuom;
              }
              this.InfusionDetails.BoosterDoseUOMList =
                new ObservableCollection<CListItem>();
            }
            if (
              this.InfusionDetails.LowConcentrationUOMlist == null ||
              (this.DefaultDetails != null &&
                this.DefaultDetails.OriginalInfUOM != null &&
                this.InfusionDetails.LowConcentrationUOMlist != null &&
                this.InfusionDetails.LowConcentrationUOMlist.Where(
                  (x) => x.Value != CConstants.CONST_MORE
                ).Count() != this.DefaultDetails.OriginalInfUOM.Count)
            ) {
              if (this.InfusionDetails.LowConcentrationUOM != null) {
                oDefLowConcentrationUOMvalue =
                  this.InfusionDetails.LowConcentrationUOM;
              }
              this.InfusionDetails.LowConcentrationUOMlist =
                new ObservableCollection<CListItem>();
            }
            if (
              this.InfusionDetails.InfRateNumeratorUOM == null ||
              (this.DefaultDetails != null &&
                this.DefaultDetails.OriginalInfUOM != null &&
                this.InfusionDetails.InfRateNumeratorUOM != null &&
                this.InfusionDetails.InfRateNumeratorUOM.Where(
                  (x) => x.Value != CConstants.CONST_MORE
                ).Count() != this.DefaultDetails.OriginalInfUOM.Count)
            ) {
              this.InfusionDetails.InfRateNumeratorUOM =
                new ObservableCollection<CListItem>();
            }
            let Istypeindrug: boolean =
              String.Compare(
                this.IdentifyingType,
                CConstants.NONCATALOGUEITEM
              ) == 0 ||
              String.Compare(this.IdentifyingType, CConstants.Precatalog) == 0
                ? true
                : false;
            if (!Istypeindrug) {
              if (
                this.InfusionDetails.VolumeUOMList != null &&
                this.InfusionDetails.VolumeUOMList.Count > 0
              ) {
                this.InfusionDetails.VolumeUOMList.forEach((Otem) => {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: Otem.DisplayText,
                      Value: Otem.Value.ToString(),
                      Tag: Otem.Tag,
                    }
                  );
                  if (
                    this.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        x.Tag != null &&
                        Otem.Tag != null &&
                        x.Tag.ToString().Contains(Otem.Tag.ToString())
                    ).Count() == 0
                  ) {
                    this.InfusionDetails.InfRateNumeratorUOM.Add(oList);
                  }
                });
              }
            } else {
              if (
                this.InfusionDetails.InfRateNumeratorUOM.Where((x) =>
                  String.Equals(
                    x.Value,
                    CConstants.CONST_MORE,
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ).Count() == 0
              ) {
                this.InfusionDetails.InfRateNumeratorUOM.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
              }
            }
            let oDefInfRate: CListItem = new CListItem();
            if (
              !(
                String.Equals(
                  this.IdentifyingType,
                  CConstants.NONCATALOGUEITEM
                ) || String.Equals(this.IdentifyingType, CConstants.Precatalog)
              )
            ) {
              if (
                this.DefaultDetails.OriginalInfUOM != null &&
                this.DefaultDetails.OriginalInfUOM.Count > 0
              ) {
                this.DefaultDetails.OriginalInfUOM.forEach((objBolusUOM) => {
                  if (!String.IsNullOrEmpty(objBolusUOM.DisplayText)) {
                    let oList: CListItem = ObjectHelper.CreateObject(
                      new CListItem(),
                      {
                        DisplayText: objBolusUOM.DisplayText,
                        Value: objBolusUOM.Value.ToString(),
                      }
                    );
                    let UOMTypeCode: string = String.Empty;
                    let checkvalue: boolean = false;
                    if (
                      this.DoseUOMTypeCode != null &&
                      this.DoseUOMTypeCode.Count() > 0 &&
                      objBolusUOM.Tag != null
                    ) {
                      checkvalue = this.DoseUOMTypeCode.TryGetValue(
                        objBolusUOM.Tag.ToString(),
                        (o) => {
                          UOMTypeCode = o;
                        }
                      );
                    }
                    if (
                      this.InfusionDetails.BolusUOMList.Where((x) =>
                        String.Equals(
                          x.Value,
                          oList.Value,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                      ).Count() == 0
                    ) {
                      if (
                        checkvalue &&
                        !String.Equals(UOMTypeCode, CConstants.CompositeUOM)
                      ) {
                        this.InfusionDetails.BolusUOMList.Add(oList);
                      }
                    }
                    if (
                      this.InfusionDetails.BoosterDoseUOMList.Where((x) =>
                        String.Equals(
                          x.Value,
                          oList.Value,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                      ).Count() == 0
                    ) {
                      if (
                        checkvalue &&
                        !String.Equals(UOMTypeCode, CConstants.CompositeUOM)
                      ) {
                        this.InfusionDetails.BoosterDoseUOMList.Add(oList);
                      }
                    }
                    let oConcentrationUOMList: CListItem =
                      ObjectHelper.CreateObject(new CListItem(), {
                        DisplayText: objBolusUOM.DisplayText,
                        Value: objBolusUOM.Value.ToString(),
                        Tag: objBolusUOM.Tag,
                      });
                    if (
                      this.InfusionDetails.LowConcentrationUOMlist.Where((x) =>
                        String.Equals(
                          x.Value,
                          oList.Value,
                          StringComparison.InvariantCultureIgnoreCase
                        )
                      ).Count() == 0
                    ) {
                      if (
                        checkvalue &&
                        !String.Equals(UOMTypeCode, CConstants.CompositeUOM)
                      ) {
                        this.InfusionDetails.LowConcentrationUOMlist.Add(oList);
                      }
                    }
                    if (this.InfusionDetails.InfRateNumeratorUOM == null)
                      this.InfusionDetails.InfRateNumeratorUOM =
                        new ObservableCollection<CListItem>();
                    if (
                      !String.IsNullOrEmpty(
                        oConcentrationUOMList.DisplayText
                      ) &&
                      !oConcentrationUOMList.DisplayText.Contains('hour') &&
                      !oConcentrationUOMList.DisplayText.Contains('minute') &&
                      !oConcentrationUOMList.DisplayText.Contains('day') &&
                      !oConcentrationUOMList.DisplayText.Contains('More') &&
                      oConcentrationUOMList.Tag != null &&
                      !String.Equals(oConcentrationUOMList.Tag, CConstants.ml)
                    ) {
                      if (
                        this.InfusionDetails.InfRateNumeratorUOM.Where(
                          (x) =>
                            oConcentrationUOMList.Tag != null &&
                            x.Tag != null &&
                            x.Tag.ToString().Contains(
                              oConcentrationUOMList.Tag.ToString()
                            )
                        ).Count() == 0
                      ) {
                        this.InfusionDetails.InfRateNumeratorUOM.Add(
                          oConcentrationUOMList
                        );
                      }
                      if (
                        this.InfusionDetails.InfRateNumeratorUom != null &&
                        !String.IsNullOrEmpty(
                          this.InfusionDetails.InfRateNumeratorUom.Value
                        ) &&
                        String.Equals(
                          this.InfusionDetails.InfRateNumeratorUom.Value,
                          oConcentrationUOMList.Value
                        )
                      ) {
                        oDefInfRate = oConcentrationUOMList;
                      } else if (
                        this.InfusionDetails.InfRateNumeratorUom != null &&
                        this.InfusionDetails.InfRateNumeratorUom.Tag != null &&
                        !String.IsNullOrEmpty(
                          this.InfusionDetails.InfRateNumeratorUom.Tag.ToString()
                        ) &&
                        this.InfusionDetails.InfRateNumeratorUom.Tag.ToString().Contains(
                          oConcentrationUOMList.Tag.ToString()
                        )
                      ) {
                        oDefInfRate = oConcentrationUOMList;
                      } else if (
                        oSelectedInfRateUOM != null &&
                        !String.IsNullOrEmpty(oSelectedInfRateUOM.Value) &&
                        String.Equals(
                          oSelectedInfRateUOM.Value,
                          oConcentrationUOMList.Value
                        )
                      ) {
                        oDefInfRate = oConcentrationUOMList;
                      }
                    }
                  }
                });
              }
              if (this.InfusionDetails.InfRateNumeratorUOM.Count > 1) {
                if (
                  String.IsNullOrEmpty(this.InfusionDetails.FluidVolume) &&
                  (this.InfusionDetails.VolumeUOM == null ||
                    (this.InfusionDetails.VolumeUOM != null &&
                      String.IsNullOrEmpty(
                        this.InfusionDetails.VolumeUOM.Value
                      )))
                ) {
                  this.InfusionDetails.RestoreInfusionNumerator(false, true);
                } else {
                  this.InfusionDetails.RestoreInfusionNumerator(true, false);
                }
              }
            }
            if (
              oDefInfRate != null &&
              !String.IsNullOrEmpty(oDefInfRate.Value)
            ) {
              this.InfusionDetails.InfRateNumeratorUom = oDefInfRate;
            } else if (
              this.InfusionDetails.InfRateNumeratorUom != null &&
              !String.IsNullOrEmpty(
                this.InfusionDetails.InfRateNumeratorUom.Value
              )
            ) {
              let DefInfRate = this.InfusionDetails.InfRateNumeratorUOM.Where(
                (oRate) =>
                  oRate.Value == this.InfusionDetails.InfRateNumeratorUom.Value
              ).Select((oRate) => oRate);
              if (DefInfRate != null && DefInfRate.Count() > 0) {
                this.InfusionDetails.InfRateNumeratorUom =
                  DefInfRate.FirstOrDefault();
              } else {
                let DefInfRate1 =
                  this.InfusionDetails.InfRateNumeratorUOM.Where(
                    (oRate) =>
                      oRate.Value ==
                      this.InfusionDetails.InfRateNumeratorUom.Value
                  ).Select((oRate) => oRate);
                if (DefInfRate1 != null && DefInfRate1.Count() > 0) {
                  this.InfusionDetails.InfRateNumeratorUom =
                    DefInfRate1.FirstOrDefault();
                } else {
                  if (this.InfusionDetails.InfRateNumeratorUOM.Count > 1) {
                    this.InfusionDetails.RestoreInfusionNumerator(false, true);
                  }
                  if (
                    this.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        this.InfusionDetails.InfRateNumeratorUom.Tag != null &&
                        x.Tag != null &&
                        this.InfusionDetails.InfRateNumeratorUom.Tag.ToString().Contains(
                          x.Tag.ToString()
                        )
                    ).Count() == 0
                  ) {
                    this.InfusionDetails.InfRateNumeratorUOM.Add(
                      this.InfusionDetails.InfRateNumeratorUom
                    );
                  }
                }
              }
            } else if (
              oSelectedInfRateUOM != null &&
              !String.IsNullOrEmpty(oSelectedInfRateUOM.Value)
            ) {
              let DefInfRate = this.InfusionDetails.InfRateNumeratorUOM.Where(
                (oRate) => oRate.Value == oSelectedInfRateUOM.Value
              ).Select((oRate) => oRate);
              if (DefInfRate != null && DefInfRate.Count() > 0) {
                this.InfusionDetails.InfRateNumeratorUom =
                  DefInfRate.FirstOrDefault();
              }
            }
          }
          if (
            String.Compare(
              this.ItemSubType,
              CConstants.SUBTYPE,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            if (
              this.InfusionDetails.VolumeUOMList != null &&
              this.InfusionDetails.VolumeUOMList.Count > 0
            ) {
              this.InfusionDetails.VolumeUOMList.forEach((Otem) => {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: Otem.DisplayText,
                    Value: Otem.Value.ToString(),
                    Tag: Otem.Tag,
                  }
                );
                if (
                  this.InfusionDetails.InfRateNumeratorUOM.Where(
                    (x) =>
                      x.Value != null &&
                      Otem.Value != null &&
                      x.Value.ToString().Contains(Otem.Value.ToString())
                  ).Count() == 0
                ) {
                  this.InfusionDetails.InfRateNumeratorUOM.Add(oList);
                }
              });
            }
            if (
              this.InfusionDetails.InfRateNumeratorUOM != null &&
              this.InfusionDetails.InfRateNumeratorUOM.Count > 0
            ) {
              if (
                this.InfusionDetails.InfRateNumeratorUom != null &&
                !String.IsNullOrEmpty(
                  this.InfusionDetails.InfRateNumeratorUom.Value
                ) &&
                String.Equals(
                  this.InfusionDetails.InfRateNumeratorUom.Value.ToString(),
                  this.InfusionDetails.InfRateNumeratorUOM.FirstOrDefault().Value.ToString()
                )
              ) {
                this.InfusionDetails.InfRateNumeratorUom =
                  this.InfusionDetails.InfRateNumeratorUOM.FirstOrDefault();
              }
            }
          }
          this.IntrayDefaultUOM();
        }
        if (
          this.bIsAmend &&
          this.IsAllowMultiRoute &&
          PatientContext.IsINFUSIONON &&
          this.InfusionType != null &&
          !String.IsNullOrEmpty(this.InfusionType.Value) &&
          this.DefaultDetails != null &&
          this.DefaultDetails.Routes != null &&
          this.DefaultDetails.InfusionTypeList != null &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          String.Equals(
            this.InfusionType.Value,
            InfusionTypeCode.INTERMITTENT,
            StringComparison.CurrentCultureIgnoreCase
          ) &&
          this.DefaultDetails.InfusionTypeList.Count > 0 &&
          this.DefaultDetails.Routes.Count > 0
        ) {
          let selectedrouteClistitem: CListItem[] =
            this.DefaultDetails.Routes.Where(
              (cl) => cl.IsSelected == true
            ).ToArray();
          let selectedInfusionRoute: CListItem[] =
            this.DefaultDetails.Routes.Where(
              (cl) =>
                cl.IsSelected == true &&
                cl.Tag != null &&
                String.Compare(cl.Tag.ToString(), '1') == 0
            ).ToArray();
          if (
            selectedrouteClistitem != null &&
            selectedInfusionRoute != null &&
            selectedInfusionRoute.Count() > 0 &&
            selectedrouteClistitem.Count() > 0 &&
            selectedInfusionRoute.Count() != selectedrouteClistitem.Count() &&
            String.IsNullOrEmpty(this.InfusionType.DisplayText)
          ) {
            this.InfusionType = this.DefaultDetails.InfusionTypeList.Where(
              (c) => c.Value == this.InfusionType.Value
            ).FirstOrDefault();
          }
        }
        if (this.InfusionDetails.LowConcentrationUOM != null && !this.bIsAmend)
          this.InfusionDetails.LowConcentrationUOM = this.GetComboValue(
            this.InfusionDetails.LowConcentrationUOM,
            this.InfusionDetails.LowConcentrationUOMlist
          );
        if (this.InfusionDetails.LowConcentrationUOM != null) {
          oDefLowConcentrationUOMvalue = ObjectHelper.CreateObject(
            new CListItem(),
            {
              Value: this.InfusionDetails.LowConcentrationUOM.Value,
              DisplayText: this.InfusionDetails.LowConcentrationUOM.DisplayText,
              Tag: this.InfusionDetails.LowConcentrationUOM.Tag,
            }
          );
        }
        if (
          oDefLowConcentrationUOMvalue != null &&
          !String.IsNullOrEmpty(oDefLowConcentrationUOMvalue.Value) &&
          String.Compare(oDefLowConcentrationUOMvalue.Value, '0') != 0
        ) {
          this.InfusionDetails.LowConcentrationUOM =
            oDefLowConcentrationUOMvalue;
          if (this.InfusionDetails.LowConcentrationUOMlist == null) {
            this.InfusionDetails.LowConcentrationUOMlist =
              new ObservableCollection<CListItem>();
            this.InfusionDetails.LowConcentrationUOMlist.Add(
              oDefLowConcentrationUOMvalue
            );
          }
        }
        if (this.InfusionDetails.BolusUOM != null && !this.bIsAmend)
          this.InfusionDetails.BolusUOM = this.GetComboValue(
            this.InfusionDetails.BolusUOM,
            this.InfusionDetails.BolusUOMList
          );
        let oDefBolusUOMvalue: CListItem = new CListItem();
        if (this.InfusionDetails.BolusUOM != null) {
          oDefBolusUOMvalue = ObjectHelper.CreateObject(new CListItem(), {
            Value: this.InfusionDetails.BolusUOM.Value,
            DisplayText: this.InfusionDetails.BolusUOM.DisplayText,
            Tag: 'ERule',
          });
        }
        if (
          oDefBolusUOMvalue != null &&
          !String.IsNullOrEmpty(oDefBolusUOMvalue.Value) &&
          String.Compare(oDefBolusUOMvalue.Value, '0') != 0
        ) {
          this.InfusionDetails.BolusUOM = oDefBolusUOMvalue;
          if (this.InfusionDetails.BolusUOMList == null) {
            this.InfusionDetails.BolusUOMList =
              new ObservableCollection<CListItem>();
            this.InfusionDetails.BolusUOMList.Add(oDefBolusUOMvalue);
          }
        }
        if (this.InfusionDetails.Boosterdoseuom != null)
          this.InfusionDetails.Boosterdoseuom = this.GetComboValue(
            this.InfusionDetails.Boosterdoseuom,
            this.InfusionDetails.BoosterDoseUOMList
          );
        if (
          this.InfusionDetails.BolusUOM == null &&
          this.InfusionDetails.Boosterdoseuom == null
        ) {
          if (
            PatientContext.IsINFUSIONON &&
            this.Route != null &&
            this.Route.Tag != null &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            if (oDefUOMValue != null) {
              this.InfusionDetails.BolusUOM = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  Value: oDefUOMValue.Value,
                  DisplayText: oDefUOMValue.DisplayText,
                  Tag: 'ERule',
                }
              );
            }
            if (
              oDefBoosterUOMValue != null &&
              !String.IsNullOrEmpty(oDefBoosterUOMValue.Value) &&
              String.Compare(oDefBoosterUOMValue.Value, '0') != 0
            ) {
              this.InfusionDetails.Boosterdoseuom = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  Value: oDefBoosterUOMValue.Value,
                  DisplayText: oDefBoosterUOMValue.DisplayText,
                  Tag: 'ERule',
                }
              );
            }
          }
        }
        if (this.SteppedDoseUOM != null) {
          TempSteppedDoseUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: this.SteppedDoseUOM.DisplayText,
            Value: this.SteppedDoseUOM.Value,
            Tag: this.SteppedDoseUOM.Tag,
          });
        }
        if (this.DefaultDetails.Uoms == null) {
          this.DefaultDetails.Uoms = new ObservableCollection<CListItem>();
        }
        if (this.DefaultDetails.OriginalUOM == null) {
          this.DefaultDetails.OriginalUOM =
            new ObservableCollection<CListItem>();
        }
        if (this.DefaultDetails.OriginalInfUOM == null) {
          this.DefaultDetails.OriginalInfUOM =
            new ObservableCollection<CListItem>();
        }
        if (
          this.DefaultDetails.Uoms.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.DefaultDetails.Uoms.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (
          this.DefaultDetails.OriginalUOM.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.DefaultDetails.OriginalUOM.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (
          this.DefaultDetails.OriginalInfUOM.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.DefaultDetails.OriginalInfUOM.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (this.InfusionDetails.BoosterDoseUOMList == null)
          this.InfusionDetails.BoosterDoseUOMList =
            new ObservableCollection<CListItem>();
        if (
          this.InfusionDetails.BoosterDoseUOMList.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.InfusionDetails.BoosterDoseUOMList.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (this.InfusionDetails.BolusUOMList == null)
          this.InfusionDetails.BolusUOMList =
            new ObservableCollection<CListItem>();
        if (
          this.InfusionDetails.BolusUOMList.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.InfusionDetails.BolusUOMList.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (this.InfusionDetails.LowConcentrationUOMlist == null)
          this.InfusionDetails.LowConcentrationUOMlist =
            new ObservableCollection<CListItem>();
        if (
          this.InfusionDetails.LowConcentrationUOMlist.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.InfusionDetails.LowConcentrationUOMlist.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (
          this.InfusionDetails.LowConcentrationUOMlist != null &&
          this.InfusionDetails.LowConcentrationUOMlist.Count > 0
        ) {
          if (this.RecordAdmin == null) this.RecordAdmin = new RecordAdminVM();
          this.RecordAdmin.ConcentrationStrengthUOMs =
            new ObservableCollection<CListItem>();
          this.InfusionDetails.LowConcentrationUOMlist.forEach((lstItm) => {
            this.RecordAdmin.ConcentrationStrengthUOMs.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: lstItm.DisplayText,
                Value: lstItm.Value,
                Tag: lstItm.Tag,
              })
            );
          });
        }
        if (
          String.Compare(
            this.itemSubType,
            CConstants.SUBTYPE_BLOOD,
            StringComparison.OrdinalIgnoreCase
          ) == 0
        ) {
          if (this.DefaultDetails.Uoms.Count == 0) {
            this.DefaultDetails.Uoms.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
          if (
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            this.IsenableDoseType = false;
          }
          let toRemove = this.DefaultDetails.InfusionTypeList.Where(
            (x) => x.Value == InfusionTypesCode.PCA
          ).ToList();
          toRemove.forEach((item) => {
            this.DefaultDetails.InfusionTypeList.Remove(item);
          });
        }
        if (TempSteppedDoseUOM != null) {
          let oSelectedSteppedDoseUOM = this.DefaultDetails.Uoms.Where((x) =>
            String.Equals(
              x.Value,
              TempSteppedDoseUOM.Value,
              StringComparison.InvariantCultureIgnoreCase
            )
          );
          if (
            oSelectedSteppedDoseUOM != null &&
            oSelectedSteppedDoseUOM.Count() > 0
          ) {
            this.SteppedDoseUOM = oSelectedSteppedDoseUOM.First();
          }
          TempSteppedDoseUOM = null;
        }
        if (
          objRes.objDefaults != null &&
          objRes.objDefaults.DoseSite != null &&
          objRes.objDefaults.DoseSite.Count > 0
        ) {
          let lstSite: ObservableCollection<CListItem> =
            new ObservableCollection<CListItem>();
          let oDefValue: CListItem = null;
          objRes.objDefaults.DoseSite.forEach((objSite) => {
            if (!String.IsNullOrEmpty(objSite.SiteName)) {
              let oList: CListItem = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText: objSite.SiteName,
                  Value: objSite.SiteId.ToString(),
                }
              );
              lstSite.Add(oList);
              if (
                this.Site != null &&
                String.Compare(
                  this.Site.Value,
                  oList.Value,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
              )
                oDefValue = oList;
            }
          });
          if (
            oDefValue == null &&
            this.Site != null &&
            !String.IsNullOrEmpty(this.Site.Value)
          )
            oDefValue = this.Site;
          if (this.Site == null) {
            this.Site = ObjectHelper.CreateObject(new CListItem(), {
              Tag: 'ERule',
            });
          } else if (this.Site != null) this.Site.Tag = 'ERule';
          this.DefaultDetails.Sites = lstSite;
          if (oDefValue != null) {
            oDefValue.Tag = 'ERule';
            this.Site = oDefValue;
          } else if (
            this.AccessContraintControls != null &&
            this.AccessContraintControls.Count > 0 &&
            this.DefaultDetails.Sites.Count > 0
          ) {
            this.Site = this.DefaultDetails.Sites.First();
          } else {

            if (
              this.Site != null && !String.IsNullOrEmpty(this.Site.Value) &&
              this.DefaultDetails != null &&
              this.DefaultDetails.Sites != null &&
              !this.DefaultDetails.Sites.Contains(this._site)
            ) {
              this.DefaultDetails.Sites.Add(this._site);
            }
          }
        } else {
          if (this.Site != null && !String.IsNullOrEmpty(this.Site.Value)) {
            let oDefValue: CListItem = this.Site;
            if(this.DefaultDetails.Sites == null)
              this.DefaultDetails.Sites = new ObservableCollection<CListItem>();
            
            if(this.DefaultDetails != null &&
              this.DefaultDetails.Sites != null &&
              !this.DefaultDetails.Sites.Contains(this._site))
              {
                this.DefaultDetails.Sites.Add(oDefValue);
              }
            if (this.Site == null) {
              this.Site = ObjectHelper.CreateObject(new CListItem(), {
                Tag: 'ERule',
              });
            } else if (this.Site != null) this.Site.Tag = 'ERule';
            this.Site = oDefValue;
          } else {
            this.DefaultDetails.Sites = null;
          }
        }
        if (this.DefaultDetails.Sites == null) {
          if (this.Site != null) this.Site.Tag = 'ERule';
          this.DefaultDetails.Sites = new ObservableCollection<CListItem>();
        }
        if (
          this.DefaultDetails.Sites.Where((x) =>
            String.Equals(
              x.Value,
              CConstants.CONST_MORE,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).Count() == 0
        ) {
          this.DefaultDetails.Sites.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: 'More',
              Value: 'CC_More',
            })
          );
        }
        if (
          (PatientContext.IsINFUSIONON &&
            String.Equals(
              this.itemSubType,
              'CC_MEDGAS',
              StringComparison.CurrentCultureIgnoreCase
            )) ||
          (this.itemSubType != 'CC_MULCMPNTITMe' &&
            this.oPrescitemVM != null &&
            this.oPrescitemVM.ItemMainType != 'CC_APPLIANCE')
        ) {
          if (objRes.objDefaults != null) {
            this.IsStrengthinProduct = objRes.objDefaults.IsStrengthProdAvail;
          }
          if (
            objRes.objDefaults != null &&
            objRes.objDefaults.DoseStrength != null
          ) {
            let _doseStrength: IPPMAManagePrescSer.ArrayOfString =
              new IPPMAManagePrescSer.ArrayOfString();
            objRes.objDefaults.DoseStrength.forEach((v) => {
              if (!String.IsNullOrEmpty(v)) {
                _doseStrength.Add(v);
              }
            });
            objRes.objDefaults.DoseStrength = _doseStrength;
            let lstStrength: ObservableCollection<CListItem> =
              new ObservableCollection<CListItem>();
            let oDefStrength: CListItem = null;
            let oList: CListItem;
            objRes.objDefaults.DoseStrength.forEach((strStrengthText) => {
              if (!String.IsNullOrEmpty(strStrengthText)) {
                oList = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: strStrengthText,
                  Value: strStrengthText,
                });
                lstStrength.Add(oList);
                if (
                  this.Strength != null &&
                  String.Compare(strStrengthText, this.Strength.DisplayText) ==
                    0
                )
                  oDefStrength = oList;
              }
            });
            if (
              objRes.objDefaults != null &&
              objRes.objDefaults.DoseStrength != null &&
              objRes.objDefaults.DoseStrength.Count > 0 &&
              this.Route != null &&
              this.RouteRecorded != null &&
              this.Route.Value == this.RouteRecorded.Value
            ) {
              if (
                this.Strength != null &&
                !lstStrength.Contains(this.Strength) &&
                !this._isDosageFormChanged &&
                this.oPrescitemVM != null &&
                (this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
                  this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
              ) {
                let strengthAvailable = lstStrength
                  .Where((item) => item.Value == this.Strength.DisplayText)
                  .Select((item) => item);
                if (
                  strengthAvailable != null &&
                  strengthAvailable.Count() == 0
                ) {
                  lstStrength.Add(this.Strength);
                  this.DeactivatedStrength = this.Strength;
                }
              }
            }
            if (this.Strength != null) this.Strength.Tag = 'ERule';
            this.DefaultDetails.Strengths = lstStrength;
            //Revisit - if platform provides combox box related change, while assigning the itemsource, if selected value available in itemsouce it should get selected else null.
            this.Strength = null;
            if (oDefStrength != null) {
              this.Strength = ObjectHelper.CreateObject(new CListItem(), {
                Value: oDefStrength.Value,
                DisplayText: oDefStrength.DisplayText,
                Tag: 'ERule',
              });
            } else if (this.DefaultDetails.Strengths.Count == 1) {
              let _DefStrength: CListItem =
                this.DefaultDetails.Strengths.First();
              this.Strength = ObjectHelper.CreateObject(new CListItem(), {
                Value: _DefStrength.Value,
                DisplayText: _DefStrength.DisplayText,
                Tag: 'ERule',
              });
            } else if (
              this.Strength != null &&
              (this.DefaultDetails.Strengths == null ||
                this.DefaultDetails.Strengths.Count == 0)
            ) {
              this.Strength = ObjectHelper.CreateObject(new CListItem(), {
                Tag: 'ERule',
              });
            }
          } else {
            if (this._isDosageFormChanged) {
              this.DefaultDetails.Strengths =
                new ObservableCollection<CListItem>();
              this.Strength = ObjectHelper.CreateObject(new CListItem(), {
                Tag: 'ERule',
              });
            }
          }
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.FormViewerDetails != null &&
            this.oPrescitemVM.FormViewerDetails.BHasFormViewParams &&
            this.StrengthVisibility == Visibility.Collapsed &&
            this.DefaultDetails != null &&
            this.DefaultDetails.Strengths != null &&
            this.DefaultDetails.Strengths.Count > 0
          ) {
            this.StrengthVisibility = Visibility.Visible;
          }
        }
        if (String.Compare(this.itemSubType, CConstants.SUBTYPE_GAS) != 0) {
          if (
            String.Compare(
              this.IdentifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            if (
              PatientContext.IsINFUSIONON &&
              this.Route != null &&
              this.Route.Tag != null &&
              this.Route.Tag.ToString().Contains('1')
            ) {
              this.ApplyEFrameworkRule(
                this.IdentifyingOID,
                this.IdentifyingType,
                this.Route.Value,
                String.Empty,
                String.Empty,
                this.MCVersion,
                RuleNames.BRAND.ToString()
              );
              this.isInfuERuleexecuted = true;
              this.IsApplyFrameworkRule = true;
              if (
                this.Route != null &&
                this.Route.Level == 1 &&
                this.IsBrandMandatory == Visibility.Collapsed &&
                this.itemSubType != 'CC_MULCMPNTITM'
              ) {
                if (
                  String.Compare(
                    PatientContext.PrescriptionType,
                    PrescriptionTypes.Clerking,
                    StringComparison.InvariantCultureIgnoreCase
                  ) != 0
                ) {
                  if (this.DoseUOM != null && this.DoseUOM.Value != null) {
                    let UOMTypeCode: string = String.Empty;
                    let checkvalue: boolean = false;
                    if (
                      this.DoseUOMTypeCode != null &&
                      this.DoseUOMTypeCode.Count() > 0 &&
                      this.DoseUOM.Tag != null
                    ) {
                      checkvalue = this.DoseUOMTypeCode.TryGetValue(
                        this.DoseUOM.Tag.ToString(),
                        (o) => {
                          UOMTypeCode = o;
                        }
                      );
                    }
                    if (
                      (checkvalue &&
                        String.Equals(
                          UOMTypeCode,
                          CConstants.DoseUOM_Type_Each
                        )) ||
                      String.Equals(UOMTypeCode, CConstants.DoseUOM_Type_Volumn)
                    ) {
                      if (
                        String.Compare(
                          this.InfusionDetails.SelProdName,
                          CConstants.Selectproduct,
                          StringComparison.InvariantCultureIgnoreCase
                        ) == 0
                      ) {
                        this.InfusionDetails.isProductMandatory = true;
                      }
                    } else {
                      this.InfusionDetails.isProductMandatory = false;
                    }
                  } else {
                    this.InfusionDetails.isProductMandatory = true;
                  }
                } else {
                  this.InfusionDetails.isProductMandatory = false;
                }
                this.InfusionDetails.isProductVisible = Visibility.Visible;
                if (String.IsNullOrEmpty(this.InfusionDetails.SelProdName))
                  this.InfusionDetails.SelProdName = 'Select product';
              } else {
                this.InfusionDetails.isProductMandatory = false;
                this.InfusionDetails.isProductVisible = Visibility.Collapsed;
              }
            }
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      } finally {
        this.IsGetFomviewDefaultParamsCallbackInProgress = false;
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
    this.IsLoadingDataForAmend = false;
    this.IsLoadingDataForOrderSentence = false;
    let IsInfusionON: boolean = PatientContext.IsINFUSIONON;
    if (
      IsInfusionON &&
      this.Route != null &&
      this.Route.Tag != null &&
      !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
      String.Compare(this.Route.Tag.ToString(), '1') == 0
    )
      IsInfusionON = true;
    else if (
      IsInfusionON &&
      this.Route != null &&
      !String.IsNullOrEmpty(this.itemSubType) &&
      String.Compare(this.itemSubType, CConstants.SUBTYPE_GAS) == 0
    )
      IsInfusionON = true;
    else IsInfusionON = false;
    if (!IsInfusionON) {
      this.DefaultDetails.ParamsDefaulted = true;
      if (this.IsFormViewerDisable == false) {
        let IsNonCatItem: boolean =
          String.Compare(this.identifyingType, CConstants.NONCATALOGUEITEM) ==
            0 ||
          String.Compare(this.identifyingType, CConstants.Precatalog) == 0;
        if (
          this.IdentifyingOID > 0 &&
          !IsNonCatItem &&
          !this.bIsIngRuleExecuted &&
          !this.bIsCalledFromProperty
        ) {
          this.strCalledProperty = '';
          this.bIsIngRuleExecuted = true;
          this.ApplyEFrameworkRule(
            this.IdentifyingOID,
            this.IdentifyingType,
            String.Empty,
            String.Empty,
            String.Empty,
            this.MCVersion,
            RuleNames.INGREDIENT.ToString()
          );
          this.IsApplyFrameworkRule = true;
        } else if (
          this.IdentifyingOID > 0 &&
          this.Route != null &&
          !String.IsNullOrEmpty(this.Route.Value) &&
          this.bIsCalledFromProperty &&
          String.Compare(
            this.strCalledProperty,
            'ROUTE',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0 &&
          !IsNonCatItem
        ) {
          this.bIsCalledFromProperty = false;
          this.strCalledProperty = '';
          if (
            this.Route != null &&
            this.Route.Tag != null &&
            !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
            String.Compare(this.Route.Tag.ToString(), '1') == 0
          ) {
            this.IsSiteEnabled = true;
          } else {
            this.IsSiteEnabled = false;
            this.IsSiteMandatory = false;
          }
          if (this.IsBrandMandatory == Visibility.Visible)
            this.IsBrandMandatory = Visibility.Visible;
          else this.IsBrandMandatory = Visibility.Collapsed;
          if (
            this.oPrescitemVM != null &&
            this.oPrescitemVM.FormViewerDetails != null &&
            this.oPrescitemVM.FormViewerDetails.BasicControls != null &&
            this.oPrescitemVM.FormViewerDetails.BasicControls.Contains(
              CConstants.CONST_ADMINMETHOD
            ) &&
            this.Route != null &&
            this.DosageForm != null
          ) {
            this.IsAdminMethodVisible = Visibility.Visible;
          } else {
            this.IsAdminMethodVisible = Visibility.Collapsed;
          }
          this.bIsBrandRuleExecuted = false;
          if (
            this.DosageForm != null &&
            !String.IsNullOrEmpty(this.DosageForm.Value)
          )
            this.ApplyEFrameworkRule(
              this.IdentifyingOID,
              this.IdentifyingType,
              this.Route.Value,
              this.DosageForm.Value,
              String.Empty,
              this.MCVersion,
              RuleNames.DOSAGEFORM.ToString()
            );
          else {
            this.ApplyEFrameworkRule(
              this.IdentifyingOID,
              this.IdentifyingType,
              this.Route.Value,
              String.Empty,
              String.Empty,
              this.MCVersion,
              RuleNames.DOSAGEFORM.ToString()
            );
          }
          this.IsApplyFrameworkRule = true;
        } else if (
          this.Route == null &&
          this.DosageForm != null &&
          this.bIsCalledFromProperty &&
          String.Compare(
            this.strCalledProperty,
            'ROUTE',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          if (this.OnEPrescribeRuleExecution != null) {
            this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
          }
        } else if (
          this.Route != null &&
          this.DosageForm != null &&
          this.bIsCalledFromProperty &&
          String.Compare(
            this.strCalledProperty,
            'DOSAGEFORM',
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          this.bIsCalledFromProperty = false;
          this.strCalledProperty = '';
          if (this.IsBrandMandatory == Visibility.Visible)
            this.IsBrandMandatory = Visibility.Visible;
          else this.IsBrandMandatory = Visibility.Collapsed;
          if (
            this.IdentifyingOID > 0 &&
            this.Route != null &&
            !String.IsNullOrEmpty(this.Route.Value) &&
            !IsNonCatItem
          ) {
            this.ApplyEFrameworkRule(
              this.IdentifyingOID,
              this.IdentifyingType,
              this.Route.Value,
              this.DosageForm.Value,
              String.Empty,
              this.MCVersion,
              RuleNames.STRENGTH.ToString()
            );
            this.IsApplyFrameworkRule = true;
          } else {
            if (this.OnEPrescribeRuleExecution != null) {
              this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
            }
          }
        } else if (IsNonCatItem) {
          if (this.OnEPrescribeRuleExecution != null) {
            this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
          }
        }
        this._isRouteChanged = false;
        this._isDosageFormChanged = false;
        this.IsModificationReasonExists = false;
      } else {
        if (this.AdminMethod != null && this.AdminMethod.Value != null) {
          this.IsAdminMethodVisible = Visibility.Visible;
        } else this.IsAdminMethodVisible = Visibility.Collapsed;
      }
      if (this.IsFormViewerDisable == true) {
        this.isRuleexecuted = true;
        if (this.EprescribingruleEvent != null) this.EprescribingruleEvent();
      }
      if (
        this.IsStrengthMandatoryAsPerRule &&
        this.IsStrengthMandatory == false
      ) {
        this.IsStrengthMandatory = this.IsStrengthMandatoryAsPerRule;
      } else if (
        this.IsStrengthMandatoryAsPerRule &&
        this.IsStrengthMandatory == true
      ) {
        if (
          this.DefaultDetails.Strengths.Count == 0 ||
          (this.DefaultDetails.Strengths.Count == 1 &&
            this.DefaultDetails.Strengths[0].Value != null &&
            this.DefaultDetails.Strengths[0].Value.Trim() == String.Empty)
        ) {
          this.IsStrengthMandatory = false;
        } else {
          this.IsStrengthMandatory = true;
        }
      }
      if (
        this.IdentifyingOID > 0 &&
        this.Site == null &&
        (this.DefaultDetails.Sites == null ||
          (this.DefaultDetails.Sites != null &&
            this.DefaultDetails.Sites.Count == 0))
      ) {
        this.IsSiteMandatory = false;
      }
      if (
        String.Compare(
          this.itemSubType,
          CConstants.SUBTYPE,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0 ||
        String.IsNullOrEmpty(this.itemSubType)
      ) {
        if (
          this.IdentifyingOID > 0 &&
          this.DosageForm == null &&
          (this.DefaultDetails.Forms == null ||
            (this.DefaultDetails.Forms != null &&
              this.DefaultDetails.Forms.Count == 0))
        ) {
          this.IsDosageFormMandatory = false;
        }
      }
    } else {
      if (this.isInfuERuleexecuted) {
        this.isRuleexecuted = false;
        this.isInfuERuleexecuted = false;
      } else {
        this.isRuleexecuted = true;
      }
      if (this.EprescribingruleEvent != null) this.EprescribingruleEvent();
      if (this.OnEPrescribeRuleExecution != null) {
        this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
      }
    }
    if (!this.IsApplyFrameworkRule) {
      if (this.OnEPrescribeRuleExecution != null) {
        this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
      }
    }
    this.FormViewLoadingflag = true;
  }
  public IntrayDefaultUOM(): void {
    if (
      this.InfusionType != null &&
      this.DefaultDetails != null &&
      this.DefaultDetails.InfusionTypeList != null &&
      this.DefaultDetails.InfusionTypeList.Count > 0
    ) {
      this.InfusionType = this.DefaultDetails.InfusionTypeList.Where((x) =>
        String.Equals(
          x.Value,
          this.InfusionType.Value,
          StringComparison.InvariantCultureIgnoreCase
        )
      ).FirstOrDefault();
    }
    if (
      this.InfusionDetails != null &&
      this.InfusionDetails.InfRateDinominatorUom != null &&
      this.InfusionDetails.InfRateDenominatorUOM != null &&
      this.InfusionDetails.InfRateDenominatorUOM.Count > 0
    ) {
      this.InfusionDetails.InfRateDinominatorUom =
        this.InfusionDetails.InfRateDenominatorUOM.Where((x) =>
          String.Equals(
            x.Value,
            this.InfusionDetails.InfRateDinominatorUom.Value,
            StringComparison.InvariantCultureIgnoreCase
          )
        ).FirstOrDefault();
    }
    if (
      this.InfusionDetails != null &&
      this.InfusionDetails.VolumeUOM != null &&
      this.InfusionDetails.VolumeUOMList != null &&
      this.InfusionDetails.VolumeUOMList.Count > 0
    ) {
      this.InfusionDetails.VolumeUOM = this.InfusionDetails.VolumeUOMList.Where(
        (x) =>
          String.Equals(
            x.Value,
            this.InfusionDetails.VolumeUOM.Value,
            StringComparison.InvariantCultureIgnoreCase
          )
      ).FirstOrDefault();
    }
    if (
      this.InfusionDetails != null &&
      this.InfusionDetails.LowConcentrationUOM != null &&
      this.InfusionDetails.LowConcentrationUOMlist != null &&
      this.InfusionDetails.LowConcentrationUOMlist.Count > 0
    ) {
      let isExisting: boolean = false;
      this.InfusionDetails.LowConcentrationUOMlist.forEach(
        (LowConcentrationUOM) => {
          if (
            !String.IsNullOrEmpty(
              this.InfusionDetails.LowConcentrationUOM.Value
            ) &&
            LowConcentrationUOM.Value ==
              this.InfusionDetails.LowConcentrationUOM.Value &&
            !isExisting
          ) {
            isExisting = true;
          }
        }
      );
      if (isExisting) {
        this.InfusionDetails.LowConcentrationUOM =
          this.InfusionDetails.LowConcentrationUOMlist.Where((x) =>
            String.Equals(
              x.Value,
              this.InfusionDetails.LowConcentrationUOM.Value,
              StringComparison.InvariantCultureIgnoreCase
            )
          ).FirstOrDefault();
      } else {
        this.InfusionDetails.LowConcentrationUOMlist.Add(
          this.InfusionDetails.LowConcentrationUOM
        );
      }
    }
    if (
      this.InfusionDetails != null &&
      this.InfusionDetails.UpperConcentrationUOM != null &&
      this.InfusionDetails.UpperConcentrationUOMlist != null &&
      this.InfusionDetails.UpperConcentrationUOMlist.Count > 0
    ) {
      this.InfusionDetails.UpperConcentrationUOM =
        this.InfusionDetails.UpperConcentrationUOMlist.Where((x) =>
          String.Equals(
            x.Value,
            this.InfusionDetails.UpperConcentrationUOM.Value,
            StringComparison.InvariantCultureIgnoreCase
          )
        ).FirstOrDefault();
    }
    if (
      this.InfusionDetails != null &&
      this.InfusionDetails.InfusionPeriodUom != null &&
      this.InfusionDetails.InfusionPeriodUOM != null &&
      this.InfusionDetails.InfusionPeriodUOM.Count > 0
    ) {
      this.InfusionDetails.InfusionPeriodUom =
        this.InfusionDetails.InfusionPeriodUOM.Where((x) =>
          String.Equals(
            x.Value,
            this.InfusionDetails.InfusionPeriodUom.Value,
            StringComparison.InvariantCultureIgnoreCase
          )
        ).FirstOrDefault();
    }
    if (
      this.InfusionDetails != null &&
      this.InfusionDetails.DeliveryDevice != null &&
      this.InfusionDetails.DeliveryDeviceList != null &&
      this.InfusionDetails.DeliveryDeviceList.Count > 0
    ) {
      this.InfusionDetails.DeliveryDevice =
        this.InfusionDetails.DeliveryDeviceList.Where((x) =>
          String.Equals(
            x.Value,
            this.InfusionDetails.DeliveryDevice.Value,
            StringComparison.InvariantCultureIgnoreCase
          )
        ).FirstOrDefault();
    }
    if (
      this.InfusionDetails != null &&
      this.InfusionDetails.BolusUOM != null &&
      String.IsNullOrEmpty(this.InfusionDetails.BolusUOM.Value) &&
      this.InfusionDetails.BolusUOMList != null &&
      this.InfusionDetails.BolusUOMList.Count > 0
    ) {
      if (
        this.InfusionDetails.BolusUOMList.Contains(
          this.InfusionDetails.BolusUOM
        )
      ) {
        this.InfusionDetails.BolusUOM = this.InfusionDetails.BolusUOMList.Where(
          (x) =>
            String.Equals(
              x.Value,
              this.InfusionDetails.BolusUOM.Value,
              StringComparison.InvariantCultureIgnoreCase
            )
        ).FirstOrDefault();
      } else {
        this.InfusionDetails.BolusUOMList.Add(this.InfusionDetails.BolusUOM);
      }
    }
    if (
      this.InfusionDetails != null &&
      this.InfusionDetails.LockoutDuration != null &&
      this.InfusionDetails.LockoutDurationList != null &&
      this.InfusionDetails.LockoutDurationList.Count > 0
    ) {
      this.InfusionDetails.LockoutDuration =
        this.InfusionDetails.LockoutDurationList.Where((x) =>
          String.Equals(
            x.Value,
            this.InfusionDetails.LockoutDuration.Value,
            StringComparison.InvariantCultureIgnoreCase
          )
        ).FirstOrDefault();
    }
  }
  //public delegate void Eprescribingrule();
  public EprescribingruleEvent: Function;
  bIsBrandRuleExecuted: boolean = false;
  public bIsAdminmethodRuleExecuted: boolean = false;
  bIsIngRuleExecuted: boolean = false;
  bDoseUOMLoad: boolean = false;
  //public delegate void ePrescribeRuleExecution(ePresRuleExecStatus _Status);
  public OnEPrescribeRuleExecution: Function;
  LstEpresRuleExeclist: List<string> = new List<string>();
  private CanExecuteEPrescribingRule(eRuleName: string): boolean {
    let blCanExecuteERule: boolean = true;
    let bDynDoseFieldAvail: boolean = false;
    let bDynAdminMethodFieldAvail: boolean = false;
    if (
      String.Compare(eRuleName, RuleNames.ADMINMETHOD.ToString()) == 0 &&
      this.oPrescitemVM != null &&
      String.Equals(
        this.oPrescitemVM.ItemMainType,
        CConstants.Formulary_Drug,
        StringComparison.CurrentCultureIgnoreCase
      )
    ) {
      this.bIsAdminmethodRuleExecuted = true;
      if (
        this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
        this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
        this.oPrescitemVM.ActionCode == ActivityTypes.UnHold
      ) {
        if (!this.oPrescitemVM.FormViewerDetails.BHasFormViewParams) {
          if (
            this.oPrescitemVM.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod
          ) {
            blCanExecuteERule = false;
          }
        } else {
          if (this.oPrescitemVM.FormViewerDetails.BasicControls != null) {
            bDynDoseFieldAvail =
              this.oPrescitemVM.FormViewerDetails.BasicControls.Contains(
                CConstants.CONST_DOSE
              );
            bDynAdminMethodFieldAvail =
              this.oPrescitemVM.FormViewerDetails.BasicControls.Contains(
                CConstants.CONST_ADMINMETHOD
              );
            if (
              (bDynDoseFieldAvail &&
                this.oPrescitemVM.FormViewerDetails.BasicDetails
                  .IsIgnoreAdminMethod) ||
              (!bDynDoseFieldAvail && bDynAdminMethodFieldAvail) ||
              (!bDynDoseFieldAvail && !bDynAdminMethodFieldAvail)
            ) {
              blCanExecuteERule = false;
            }
          }
          if (!bDynDoseFieldAvail && bDynAdminMethodFieldAvail) {
            this.oPrescitemVM.FormViewerDetails.BasicDetails.IsDoseVisible =
              Visibility.Collapsed;
            this.oPrescitemVM.FormViewerDetails.BasicDetails.IsAdminMethodVisible =
              Visibility.Visible;
            this.IsStrengthMandatory = !this.IsStrengthinProduct;
          }
        }
      } else if (
        this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
        !this.IsPrescribedWithAdminMethod
      ) {
        if (
          this.oPrescitemVM.FormViewerDetails.BasicDetails
            .IsPresItemIgnoreAdminMethod
        ) {
          blCanExecuteERule = false;
        } else if (
          !this.oPrescitemVM.FormViewerDetails.BasicDetails
            .IsPresItemIgnoreAdminMethod &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails.IsIgnoreAdminMethod
        ) {
          blCanExecuteERule = false;
        }
      }
    }
    return blCanExecuteERule;
  }
  public ApplyEFrameworkRule(
    lnIdentifyingOID: number,
    strIdentifyingType: string,
    lnRouteOID: string,
    lnFormOID: string,
    strStrengthText: string,
    strMCVersion: string,
    strRule: string
  ): void {
    let blOverride: boolean = false;
    if (this.CanExecuteEPrescribingRule(strRule)) {
      if (
        this.Route != null &&
        !String.IsNullOrEmpty(this.Route.DisplayText) &&
        this.Route.DisplayText.Contains('/')
      ) {
        this.isRuleexecuted = true;
        if (this.OnEPrescribeRuleExecution != null) {
          this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
        }
      } else {
        let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
          new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
        objServiceProxy.CheckPrescribeRuleCompleted = (s, e) => {
          this.objServiceProxy_CheckPrescribeRuleCompleted(s, e);
        };
        let objReq: IPPMAManagePrescSer.CReqMsgCheckPrescribeRule =
          new IPPMAManagePrescSer.CReqMsgCheckPrescribeRule();
        objReq.objCriteriaBC = new IPPMAManagePrescSer.EFrameworkCriteria();
        objReq.objCriteriaBC.IdentifyingOID = lnIdentifyingOID;
        objReq.objCriteriaBC.IdentifyingType = strIdentifyingType;
        objReq.objCriteriaBC.RouteOID =
          !String.IsNullOrEmpty(lnRouteOID) && !lnRouteOID.Contains(',')
            ? Convert.ToInt64(lnRouteOID)
            : 0;
        objReq.objCriteriaBC.FormOID = !String.IsNullOrEmpty(lnFormOID)
          ? Convert.ToInt64(lnFormOID)
          : 0;
        objReq.objCriteriaBC.StrengthText = strStrengthText;
        objReq.objCriteriaBC.MCVersion = strMCVersion;
        objReq.strRuleBC = strRule;
        objReq.oContextInformation = Common.FillContext();
        objServiceProxy.CheckPrescribeRuleAsync(objReq);
        this.isRuleexecinprogress = true;
        this.LstEpresRuleExeclist.Add(strRule);
      }
    } else {
      if (
        String.Compare(
          strRule,
          RuleNames.ADMINMETHOD.ToString(),
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.bIsAdminmethodRuleExecuted = true;
        this.ApplyEFrameworkRuleForSite();
      }
    }
  }
  public EPrescribeRuleCompletedEvent(): void {
    if (this.EprescribingruleEvent != null && !this.isRuleexecinprogress) {
      this.isRuleexecuted = true;
      this.EprescribingruleEvent();
    }
  }
  public UnSubscribeEprescribeEvent(): void {
    if (this.isRuleexecuted && this.isConflictsgenerated) {
      if (!this.IsRegenerateConflictsForBrand) {
        this.isRuleexecuted = false;
        this.isConflictsgenerated = false;
        // this.EprescribingruleEvent -= this.EprescribingruleEvent;
      }
    }
  }
  private _IsOrderSetDrug: boolean = false;
  public get IsOrderSetDrug(): boolean {
    if (this.Ordersets != null && !String.IsNullOrEmpty(this.Ordersets.Value)) {
      this._IsOrderSetDrug = true;
    }
    return this._IsOrderSetDrug;
  }
  public set IsOrderSetDrug(value: boolean) {
    this._IsOrderSetDrug = true;
  }
  public ApplyEFrameworkRuleForSite(): void {
    if (
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.Value) &&
      this.DosageForm != null &&
      !String.IsNullOrEmpty(this.DosageForm.Value)
    ) {
      this.ApplyEFrameworkRule(
        this.IdentifyingOID,
        this.IdentifyingType,
        this.Route.Value,
        this.DosageForm.Value,
        String.Empty,
        this.MCVersion,
        RuleNames.SITE.ToString()
      );
    }
  }
  objServiceProxy_CheckPrescribeRuleCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.CheckPrescribeRuleCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000048;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:BasicDetailsVM, Method:objServiceProxy_CheckPrescribeRuleCompleted()';
    this.isRuleexecinprogress = false;
    if (e.Error == null) {
      try {
        let objRes: IPPMAManagePrescSer.CResMsgCheckPrescribeRule = e.Result;
        let IsInfusionON: boolean = PatientContext.IsINFUSIONON;
        if (
          IsInfusionON &&
          this.Route != null &&
          this.Route.Tag != null &&
          !String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
          String.Compare(this.Route.Tag.ToString(), '1') == 0
        )
          IsInfusionON = true;
        else if (
          IsInfusionON &&
          this.Route != null &&
          !String.IsNullOrEmpty(this.itemSubType) &&
          String.Compare(this.itemSubType, CConstants.SUBTYPE_GAS) == 0
        )
          IsInfusionON = true;
        else IsInfusionON = false;
        if (
          !IsInfusionON &&
          String.Compare(
            objRes.ExecutedRuleName,
            RuleNames.INGREDIENT.ToString(),
            StringComparison.InvariantCultureIgnoreCase
          ) == 0
        ) {
          if (
            String.Compare(
              this.IdentifyingType,
              'CATALOGUEITEM',
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
            String.Equals(
              this.IdentifyingType,
              'ACTUALMOIETY',
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.IsStrengthMandatoryAsPerRule =
              objRes.bStatus == 'T' ? true : false;
            this.IsMultipleActiveIngredients =
              objRes.bStatus == 'T' ? true : false;
          }
          this.CheckStrengthMandatoryByDoseUOMType();
          if (
            this.IdentifyingOID > 0 &&
            this.Route != null &&
            !String.IsNullOrEmpty(this.Route.Value)
          ) {
            if (
              (this.Route != null && this.Route.Tag == null) ||
              (!String.IsNullOrEmpty(this.Route.Tag.ToString()) &&
                String.Compare(this.Route.Tag.ToString(), '1') != 0)
            ) {
              if (
                this.DosageForm != null &&
                !String.IsNullOrEmpty(this.DosageForm.Value)
              )
                this.ApplyEFrameworkRule(
                  this.IdentifyingOID,
                  this.IdentifyingType,
                  this.Route.Value,
                  this.DosageForm.Value,
                  String.Empty,
                  this.MCVersion,
                  RuleNames.DOSAGEFORM.ToString()
                );
              else
                this.ApplyEFrameworkRule(
                  this.IdentifyingOID,
                  this.IdentifyingType,
                  this.Route.Value,
                  String.Empty,
                  String.Empty,
                  this.MCVersion,
                  RuleNames.DOSAGEFORM.ToString()
                );
            }
          }
        } else if (
          this.IdentifyingType != 'ActualProduct' &&
          this.IdentifyingType != CConstants.ACTUALPRODUCTPACK &&
          !String.Equals(
            this.identifyingType,
            CConstants.ACTUALMOIETY,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !this.bIsBrandRuleExecuted &&
          String.Compare(
            objRes.ExecutedRuleName,
            RuleNames.BRAND.ToString(),
            StringComparison.InvariantCultureIgnoreCase
          ) == 0 &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.FormViewerDetails != null &&
          (String.Compare(
            this.oPrescitemVM.ItemMainType,
            CConstants.Formulary_Appliance,
            StringComparison.OrdinalIgnoreCase
          ) != 0 ||
            (String.Compare(
              this.oPrescitemVM.ItemMainType,
              CConstants.Formulary_Appliance,
              StringComparison.OrdinalIgnoreCase
            ) == 0 &&
              this.oPrescitemVM.FormViewerDetails.BHasFormViewParams &&
              this.IsRouteVisible == Visibility.Visible))
        ) {
          this.IsBrandMandatory =
            objRes.bStatus == 'T' ? Visibility.Visible : Visibility.Collapsed;
          let isBrandMand: boolean = false;
          isBrandMand = objRes.bStatus == 'T' ? true : false;
          this.IsRouteResetRequired = true;
          if (
            !isBrandMand &&
            String.Compare(
              this.IdentifyingType,
              CConstants.CATALOGUEITEM,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
          ) {
            if (this.InfusionDetails == null) {
              this.InfusionDetails = new InfusionVM(this);
              this.InfusionDetails.isProductVisible = Visibility.Visible;
            } else {
              if (
                IsInfusionON &&
                this.Route != null &&
                this.Route.Tag != null &&
                String.Compare(this.Route.Tag.ToString(), '1') == 0
              ) {
                if (
                  this.Route != null &&
                  this.Route.Level == 1 &&
                  this.IsBrandMandatory == Visibility.Collapsed &&
                  this.itemSubType != 'CC_MULCMPNTITM'
                )
                  this.InfusionDetails.isProductVisible = Visibility.Visible;
              }
            }
          }
          if (
            PatientContext.PrescriptionType == PrescriptionTypes.Clerking &&
            this.oPrescitemVM.ActionCode != ActivityTypes.Reorder &&
            !isBrandMand &&
            this.IsBrandMandatory == Visibility.Collapsed
          ) {
            this.oPrescitemVM.ParentbaseVM.IsRouteFormDefault = true;
            this.oPrescitemVM.ParentbaseVM.CheckalreadyPrescOnBrandselect(
              this.IdentifyingOID,
              this.IdentifyingType
            );
          }
          this.bIsBrandRuleExecuted = true;
          if (
            !this.bIsAdminmethodRuleExecuted &&
            !IsInfusionON &&
            this.Route != null &&
            !String.IsNullOrEmpty(this.Route.Value) &&
            this.DosageForm != null &&
            !String.IsNullOrEmpty(this.DosageForm.Value)
          ) {
            this.ApplyEFrameworkRule(
              this.IdentifyingOID,
              this.IdentifyingType,
              this.Route.Value,
              this.DosageForm.Value,
              String.Empty,
              this.MCVersion,
              RuleNames.ADMINMETHOD.ToString()
            );
          }
        } else {
          if (!IsInfusionON) {
            if (
              String.Compare(
                objRes.ExecutedRuleName,
                RuleNames.DOSAGEFORM.ToString(),
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            ) {
              if (
                this.Route != null &&
                this.DosageForm != null &&
                !String.IsNullOrEmpty(this.DosageForm.Value)
              )
                this.ApplyEFrameworkRule(
                  this.IdentifyingOID,
                  this.IdentifyingType,
                  this.Route.Value,
                  this.DosageForm.Value,
                  String.Empty,
                  this.MCVersion,
                  RuleNames.STRENGTH.ToString()
                );
              else if (this.Route != null)
                this.ApplyEFrameworkRule(
                  this.IdentifyingOID,
                  this.IdentifyingType,
                  this.Route.Value,
                  String.Empty,
                  String.Empty,
                  this.MCVersion,
                  RuleNames.STRENGTH.ToString()
                );
            } else if (
              String.Compare(
                objRes.ExecutedRuleName,
                RuleNames.STRENGTH.ToString(),
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            ) {
              if (!this.IsMultipleActiveIngredients) {
                this.IsStrengthMandatoryAsPerRule =
                  objRes.bStatus == 'T' ? true : false;
              }
              this.CheckStrengthMandatoryByDoseUOMType();
              if (
                !String.IsNullOrEmpty(this.IdentifyingType) &&
                !String.Equals(
                  this.IdentifyingType,
                  CConstants.ACTUALMOIETY,
                  StringComparison.InvariantCultureIgnoreCase
                )
              ) {
                this.BrandLogic();
              } else if (
                !this.bIsAdminmethodRuleExecuted &&
                this.Route != null &&
                !String.IsNullOrEmpty(this.Route.Value) &&
                this.DosageForm != null &&
                !String.IsNullOrEmpty(this.DosageForm.Value)
              ) {
                this.ApplyEFrameworkRule(
                  this.IdentifyingOID,
                  this.IdentifyingType,
                  this.Route.Value,
                  this.DosageForm.Value,
                  String.Empty,
                  this.MCVersion,
                  RuleNames.ADMINMETHOD.ToString()
                );
              }
            } else if (
              String.Compare(
                objRes.ExecutedRuleName,
                RuleNames.ADMINMETHOD.ToString(),
                StringComparison.InvariantCultureIgnoreCase
              ) == 0
            ) {
              this.bIsAdminmethodRuleExecuted = true;
              this.IsAdminMethodVisible =
                objRes.bStatus == 'T'
                  ? Visibility.Visible
                  : Visibility.Collapsed;
              this.ApplyEFrameworkRuleForSite();
            } else if (
              String.Compare(
                objRes.ExecutedRuleName,
                RuleNames.SITE.ToString(),
                StringComparison.InvariantCultureIgnoreCase
              ) == 0 &&
              !IsInfusionON
            ) {
              this.IsSiteEnabled = objRes.bStatus == 'O' ? false : true;
              this.IsSiteMandatory = objRes.bStatus == 'T' ? true : false;
              if (
                !this.IsSiteEnabled &&
                !this.IsSiteMandatory &&
                PatientContext.PrescriptionType != PrescriptionTypes.Clerking &&
                !(
                  this.AccessContraintControls != null &&
                  this.AccessContraintControls.Contains('cboSite')
                )
              ) {
                if (
                  this.Site != null &&
                  !String.IsNullOrEmpty(this.Site.Value) &&
                  !this.Site.Value.Equals('0')
                ) {
                  this.Site = null;
                }
                if (
                  !String.IsNullOrEmpty(this.SiteFreeText) &&
                  PatientContext.ClerkFormViewDefaultBehavior !=
                    ClerkFormViewDeftBehaviour.LaunchFormMandatory
                )
                  this.SiteFreeText = String.Empty;
              }
            }
          }
        }
        if (this.EprescribingruleEvent != null && !this.isRuleexecinprogress) {
          this.isRuleexecuted = true;
          this.EprescribingruleEvent();
        }
        if (this.LstEpresRuleExeclist.Contains(objRes.ExecutedRuleName))
          this.LstEpresRuleExeclist.Remove(objRes.ExecutedRuleName);
        if (this.LstEpresRuleExeclist.Count == 0) {
          if (this.OnEPrescribeRuleExecution != null) {
            this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
          }
        }
        if (
          this.IdentifyingOID > 0 &&
          this.Strength == null &&
          (this.DefaultDetails.Strengths == null ||
            (this.DefaultDetails.Strengths != null &&
              this.DefaultDetails.Strengths.Count == 0)) &&
          !IsInfusionON
        ) {
          this.IsStrengthMandatory = false;
        }
        if (
          this.IdentifyingOID > 0 &&
          this.Site == null &&
          (this.DefaultDetails.Sites == null ||
            (this.DefaultDetails.Sites != null &&
              this.DefaultDetails.Sites.Count == 0)) &&
          !IsInfusionON
        ) {
          this.IsSiteMandatory = false;
        }
        if (
          String.Compare(
            this.itemSubType,
            CConstants.SUBTYPE,
            StringComparison.InvariantCultureIgnoreCase
          ) != 0 ||
          String.IsNullOrEmpty(this.itemSubType)
        ) {
          if (
            this.IdentifyingOID > 0 &&
            this.DosageForm == null &&
            (this.DefaultDetails.Forms == null ||
              (this.DefaultDetails.Forms != null &&
                this.DefaultDetails.Forms.Count == 0)) &&
            !IsInfusionON
          ) {
            this.IsDosageFormMandatory = false;
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private BrandLogic(): void {
    if (
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.Value) &&
      !this.IsDosageFormMandatory &&
      !this.IsStrengthMandatory &&
      !this.bIsBrandRuleExecuted &&
      this.IdentifyingType != 'ACTUALPRODUCT'
    ) {
      if (
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value) &&
        this.Strength != null &&
        !String.IsNullOrEmpty(this.Strength.Value)
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          this.Strength.Value,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value)
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        this.Strength != null &&
        !String.IsNullOrEmpty(this.Strength.Value)
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          String.Empty,
          this.Strength.Value,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          String.Empty,
          String.Empty,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      }
    } else if (
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.Value) &&
      this.IsDosageFormMandatory &&
      !this.IsStrengthMandatory &&
      !this.bIsBrandRuleExecuted
    ) {
      if (
        !(
          this.IdentifyingType.Equals(
            CConstants.ACTUALPRODUCT,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          this.IdentifyingType.Equals(
            CConstants.ACTUALMOIETY,
            StringComparison.InvariantCultureIgnoreCase
          )
        )
      ) {
        this.IsBrandMandatory = Visibility.Collapsed;
      }
      if (
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value) &&
        this.Strength != null &&
        !String.IsNullOrEmpty(this.Strength.Value) &&
        this.IdentifyingType != 'ACTUALPRODUCT'
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          this.Strength.Value,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value) &&
        this.IdentifyingType != 'ACTUALPRODUCT'
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        !this.bIsAdminmethodRuleExecuted &&
        this.Route != null &&
        !String.IsNullOrEmpty(this.Route.Value) &&
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value)
      ) {
        this.bIsBrandRuleExecuted = true;
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.ADMINMETHOD.ToString()
        );
      } else {
        this.isRuleexecuted = true;
        if (this.EprescribingruleEvent != null) this.EprescribingruleEvent();
        if (this.OnEPrescribeRuleExecution != null) {
          this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
        }
      }
    } else if (
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.Value) &&
      !this.IsDosageFormMandatory &&
      this.IsStrengthMandatory &&
      !this.bIsBrandRuleExecuted
    ) {
      if (
        !(
          this.IdentifyingType.Equals(
            CConstants.ACTUALPRODUCT,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          this.IdentifyingType.Equals(
            CConstants.ACTUALMOIETY,
            StringComparison.InvariantCultureIgnoreCase
          )
        )
      ) {
        this.IsBrandMandatory = Visibility.Collapsed;
      }
      if (
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value) &&
        (this.Strength == null ||
          (this.Strength != null &&
            String.IsNullOrEmpty(this.Strength.Value))) &&
        this.IdentifyingType != 'ACTUALPRODUCT'
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value) &&
        this.Strength != null &&
        !String.IsNullOrEmpty(this.Strength.Value) &&
        this.IdentifyingType != 'ACTUALPRODUCT'
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          this.Strength.Value,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        this.Strength != null &&
        !String.IsNullOrEmpty(this.Strength.Value) &&
        this.IdentifyingType != 'ACTUALPRODUCT'
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          String.Empty,
          this.Strength.Value,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        !this.bIsAdminmethodRuleExecuted &&
        this.Route != null &&
        !String.IsNullOrEmpty(this.Route.Value) &&
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value)
      ) {
        this.bIsBrandRuleExecuted = true;
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.ADMINMETHOD.ToString()
        );
      } else {
        this.isRuleexecuted = true;
        if (this.EprescribingruleEvent != null) this.EprescribingruleEvent();
        if (this.OnEPrescribeRuleExecution != null) {
          this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
        }
      }
    } else if (
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.Value) &&
      this.IsDosageFormMandatory &&
      this.IsStrengthMandatory &&
      !this.bIsBrandRuleExecuted
    ) {
      if (
        !(
          this.IdentifyingType.Equals(
            CConstants.ACTUALPRODUCT,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          this.IdentifyingType.Equals(
            CConstants.ACTUALMOIETY,
            StringComparison.InvariantCultureIgnoreCase
          )
        )
      ) {
        this.IsBrandMandatory = Visibility.Collapsed;
      }
      if (
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value) &&
        (this.Strength == null ||
          (this.Strength != null &&
            String.IsNullOrEmpty(this.Strength.Value))) &&
        this.IdentifyingType != 'ACTUALPRODUCT'
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value) &&
        this.Strength != null &&
        !String.IsNullOrEmpty(this.Strength.Value) &&
        this.IdentifyingType != 'ACTUALPRODUCT'
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          this.Strength.Value,
          this.MCVersion,
          RuleNames.BRAND.ToString()
        );
      } else if (
        !this.bIsAdminmethodRuleExecuted &&
        this.Route != null &&
        !String.IsNullOrEmpty(this.Route.Value) &&
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value)
      ) {
        this.bIsBrandRuleExecuted = true;
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.ADMINMETHOD.ToString()
        );
      } else {
        this.isRuleexecuted = true;
        if (this.EprescribingruleEvent != null) this.EprescribingruleEvent();
        if (this.OnEPrescribeRuleExecution != null) {
          this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
        }
      }
    } else if (
      !this.bIsAdminmethodRuleExecuted &&
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.Value) &&
      this.DosageForm != null &&
      !String.IsNullOrEmpty(this.DosageForm.Value)
    ) {
      this.bIsBrandRuleExecuted = true;
      this.ApplyEFrameworkRule(
        this.IdentifyingOID,
        this.IdentifyingType,
        this.Route.Value,
        this.DosageForm.Value,
        String.Empty,
        this.MCVersion,
        RuleNames.ADMINMETHOD.ToString()
      );
    } else {
      this.isRuleexecuted = true;
      if (this.EprescribingruleEvent != null) this.EprescribingruleEvent();
      if (this.OnEPrescribeRuleExecution != null) {
        this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
      }
    }
    if (
      this.IdentifyingOID > 0 &&
      this.Strength == null &&
      (this.DefaultDetails.Strengths == null ||
        (this.DefaultDetails.Strengths != null &&
          this.DefaultDetails.Strengths.Count == 0))
    ) {
      this.IsStrengthMandatory = false;
    }
    if (
      this.IdentifyingOID > 0 &&
      this.Site == null &&
      (this.DefaultDetails.Sites == null ||
        (this.DefaultDetails.Sites != null &&
          this.DefaultDetails.Sites.Count == 0))
    ) {
      this.IsSiteMandatory = false;
    }
    if (
      String.Compare(
        this.itemSubType,
        CConstants.SUBTYPE,
        StringComparison.InvariantCultureIgnoreCase
      ) != 0 ||
      String.IsNullOrEmpty(this.itemSubType)
    ) {
      if (
        this.IdentifyingOID > 0 &&
        this.DosageForm == null &&
        (this.DefaultDetails.Forms == null ||
          (this.DefaultDetails.Forms != null &&
            this.DefaultDetails.Forms.Count == 0))
      ) {
        this.IsDosageFormMandatory = false;
      }
    }
  }
  public FillRecordAdminDetails(bIsOnload: boolean): RecordAdminVM {
    if (this.RecordAdmin == null) this.RecordAdmin = new RecordAdminVM();
    if (bIsOnload) this.RecordAdmin.IsLoaded = bIsOnload;
    if (
      this.DefaultDetails != null &&
      this.DefaultDetails.Uoms != null &&
      this.DefaultDetails.Uoms.Count > 0
    ) {
      this.RecordAdmin.DoseUoM = this.DefaultDetails.Uoms;
      if (
        this.DoseUOM != null &&
        !String.IsNullOrEmpty(this.DoseUOM.DisplayText)
      ) {
        this.RecordAdmin.DoseUOMValue = this.DoseUOM.DisplayText;
        this.RecordAdmin.SelectedDoseUoM = this.DoseUOM;
      }
    }
    this.RecordAdmin.Dose = this.Dose;
    if (
      this.DefaultDetails != null &&
      this.DefaultDetails.Sites != null &&
      this.DefaultDetails.Sites.Count > 0
    )
      this.RecordAdmin.Sites = this.DefaultDetails.Sites;
    if (
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.DisplayText) &&
      !this.Route.DisplayText.Contains('/')
    ) {
      this.RecordAdmin.Route = this.Route;
    } else {
      this.RecordAdmin.Route = null;
      if (
        this.oPrescitemVM != null &&
        !String.IsNullOrEmpty(this.oPrescitemVM.ItemMainType) &&
        String.Equals(
          this.oPrescitemVM.ItemMainType,
          CConstants.Formulary_Appliance,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.RecordAdmin.GetWitnessRequired();
      }
    }
    if (this.Site != null && !String.IsNullOrEmpty(this.Site.DisplayText)) {
      this.RecordAdmin.Site = this.Site;
      this.IsRecAdmSiteEnabled = true;
    } else if (
      this.DefaultDetails != null &&
      this.DefaultDetails.Sites != null &&
      !String.IsNullOrEmpty(this.SiteFreeText) &&
      (this.Site == null || String.IsNullOrEmpty(this.Site.DisplayText))
    ) {
      let _PrescribedSite: CListItem = ObjectHelper.CreateObject(
        new CListItem(),
        {
          DisplayText: this.SiteFreeText,
          Value: String.Empty,
        }
      );
      if (this.RecordAdmin.Sites == null) {
        this.RecordAdmin.Sites = new ObservableCollection<CListItem>();
      }
      let Moreitem: CListItem = ObjectHelper.CreateObject(new CListItem(), {
        DisplayText: 'More',
        Value: 'CC_More',
      });
      let morelistitem = this.RecordAdmin.Sites.Where(
        (x) => x.Value == 'CC_More'
      );
      if (morelistitem != null && morelistitem.Count() > 0) {
        this.RecordAdmin.Sites.RemoveAt(this.RecordAdmin.Sites.Count - 1);
        this.RecordAdmin.Sites.Add(_PrescribedSite);
        this.RecordAdmin.Sites.Add(Moreitem);
      } else {
        this.RecordAdmin.Sites.Add(_PrescribedSite);
      }
      this.RecordAdmin.Site = _PrescribedSite;
      this.IsRecAdmSiteEnabled = false;
    }
    if (
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.DisplayText) &&
      !this.Route.DisplayText.Contains('/')
    )
      this.RecordAdmin.Route = this.Route;
    else this.RecordAdmin.Route = null;
    if (
      this.InfusionDetails != null &&
      this.InfusionType != null &&
      !String.IsNullOrEmpty(this.InfusionType.Value) &&
      (String.Compare(
        this.InfusionType.Value,
        InfusionTypesCode.CONTINUOUS,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          this.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          this.InfusionType.Value,
          InfusionTypesCode.FLUID,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          this.InfusionType.Value,
          InfusionTypesCode.PCA,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
        String.Compare(
          this.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0)
    ) {
      if (
        !String.Equals(
          this.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        if (
          this.RecordAdmin.ConcentrationStrengthUOMs == null &&
          this.InfusionDetails.LowConcentrationUOMlist != null &&
          this.InfusionDetails.LowConcentrationUOMlist.Count > 0
        )
          this.RecordAdmin.ConcentrationStrengthUOMs =
            this.InfusionDetails.LowConcentrationUOMlist;
        if (!String.IsNullOrEmpty(this.InfusionDetails.LowConcentration))
          this.RecordAdmin.ConcentrationStrength =
            this.InfusionDetails.LowConcentration;
        if (this.InfusionDetails.LowConcentrationUOM != null) {
          this.RecordAdmin.ConcentrationStrengthUOM =
            this.InfusionDetails.LowConcentrationUOM;
        }
        if (!String.IsNullOrEmpty(this.InfusionDetails.UpperConcentration))
          this.RecordAdmin.ConcentrationVolume =
            this.InfusionDetails.UpperConcentration;
        if (this.InfusionDetails.UpperConcentrationUOM != null) {
          this.RecordAdmin.ConcentrationVolumeUOM =
            this.InfusionDetails.UpperConcentrationUOM;
        }
      }
      if (!String.IsNullOrEmpty(this.InfusionDetails.InfusionPeriod)) {
        this.RecordAdmin.InfusionPeriodMedAdmin =
          this.InfusionDetails.InfusionPeriod;
        this.RecordAdmin.EnableInfusionPeriodMedAdmin = false;
      } else this.RecordAdmin.EnableInfusionPeriodMedAdmin = true;
      if (this.InfusionDetails.InfusionPeriodUom != null) {
        this.RecordAdmin.InfusionPeriodMedAdminUOM =
          this.InfusionDetails.InfusionPeriodUom;
      }
      if (this.InfusionDetails != null)
        this.recordadmin.isBolusIntermittent =
          this.InfusionDetails.ChckSingleActionMedChart;
      if (!this.recordadmin.isBolusIntermittent) {
        if (
          !String.IsNullOrEmpty(this.InfusionDetails.Rate) &&
          !String.IsNullOrEmpty(this.InfusionDetails.UpperRate)
        ) {
          this.RecordAdmin.InfusionRate = String.Empty;
        } else if (!String.IsNullOrEmpty(this.InfusionDetails.Rate)) {
          this.RecordAdmin.InfusionRate = this.InfusionDetails.Rate;
          this.RecordAdmin.InfusionDose = this.InfusionDetails.Rate;
        }
        if (this.InfusionDetails.InfRateDinominatorUom != null) {
          this.RecordAdmin.InfRateDinominatorUom =
            this.InfusionDetails.InfRateDinominatorUom;
          this.RecordAdmin.InfRateDinominatorUom.Tag =
            this.InfusionDetails.InfRateDinominatorUom.Tag;
        }
        if (this.InfusionDetails.InfRateNumeratorUom != null) {
          this.RecordAdmin.InfRateNumeratorUom =
            this.InfusionDetails.InfRateNumeratorUom;
          this.RecordAdmin.InfRateNumeratorUom.Tag =
            this.InfusionDetails.InfRateNumeratorUom.Tag;
        }
        if (
          this.InfusionDetails.InfRateNumeratorUom != null &&
          this.InfusionDetails.InfRateDinominatorUom != null &&
          !String.IsNullOrEmpty(
            this.InfusionDetails.InfRateNumeratorUom.DisplayText
          ) &&
          !String.IsNullOrEmpty(
            this.InfusionDetails.InfRateDinominatorUom.DisplayText
          )
        ) {
          this.RecordAdmin.InfusionRateUOMValue =
            this.InfusionDetails.InfRateNumeratorUom.DisplayText +
            '/' +
            this.InfusionDetails.InfRateDinominatorUom.DisplayText;
          this.RecordAdmin.InfusionDoseUOM =
            this.InfusionDetails.InfRateNumeratorUom.DisplayText +
            '/' +
            this.InfusionDetails.InfRateDinominatorUom.DisplayText;
          let lInfDoseNumOID: number = 0;
          Number.TryParse(
            this.InfusionDetails.InfRateNumeratorUom.Value,
            (o) => {
              lInfDoseNumOID = o;
            }
          );
          this.RecordAdmin.InfusionDoseNumeratorUOMID = lInfDoseNumOID;
          let lInfDoseDenumOID: number = 0;
          Number.TryParse(
            this.InfusionDetails.InfRateDinominatorUom.Value,
            (o) => {
              lInfDoseDenumOID = o;
            }
          );
          this.RecordAdmin.InfusionDoseDenominatorUOMID = lInfDoseDenumOID;
          this.RecordAdmin.EnableInfusionDose = true;
        }
        if (!String.IsNullOrEmpty(this.InfusionDetails.Lumen)) {
          this.RecordAdmin.Lumen = this.InfusionDetails.Lumen;
          if (!String.IsNullOrEmpty(this.InfusionDetails.Lumen))
            this.RecordAdmin.IsenableInfusionLumen = false;
        }
        if (
          this.itemSubType != null &&
          String.Equals(this.itemSubType, CConstants.SUBTYPE_GAS) &&
          this.InfusionDetails.MedicalgasDeliveryList != null &&
          this.InfusionDetails.MedicalgasDeliveryList.Count > 0
        ) {
          this.RecordAdmin.DeliveryDeviceList =
            new ObservableCollection<CListItem>();
          this.RecordAdmin.DeliveryDeviceList =
            this.InfusionDetails.MedicalgasDeliveryList;
        } else {
          if (this.InfusionDetails.DeliveryDeviceList != null) {
            this.RecordAdmin.DeliveryDeviceList =
              this.InfusionDetails.DeliveryDeviceList;
          }
        }
        if (
          this.InfusionDetails.DeliveryDevice != null &&
          !String.IsNullOrEmpty(this.InfusionDetails.DeliveryDevice.Value)
        ) {
          this.RecordAdmin.DeliveryDevice = this.InfusionDetails.DeliveryDevice;
          this.RecordAdmin.DeliveryDeviceText =
            this.InfusionDetails.DeliveryDevice.DisplayText;
        } else this.RecordAdmin.IsEnabledDeliveryDevice = true;
        if (
          !String.IsNullOrEmpty(this.InfusionDetails.DeliveryDeviceFreetext)
        ) {
          this.RecordAdmin.DeliveryDeviceText =
            this.InfusionDetails.DeliveryDeviceFreetext;
          if (this.InfusionDetails.DeliveryDeviceFreetext != null)
            this.RecordAdmin.IsEnabledDeliveryDevice = false;
        }
        if (this.InfusionDetails.VolumeUOMList != null) {
          this.RecordAdmin.BagVolumeUOMList =
            this.InfusionDetails.VolumeUOMList;
          let OnlyMLVolumeUom = this.InfusionDetails.VolumeUOMList.Where(
            (x) => x.Tag.ToString() == CConstants.ml
          )
            .Select((a) => a)
            .ToList();
          if (OnlyMLVolumeUom != null && OnlyMLVolumeUom.Count > 0) {
            this.RecordAdmin.InfusionRateNumeratorUOMs =
              new ObservableCollection<CListItem>();
            this.RecordAdmin.InfusionRateNumeratorUOMs.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: OnlyMLVolumeUom[0].DisplayText,
                Value: OnlyMLVolumeUom[0].Value,
                Tag: OnlyMLVolumeUom[0].Tag,
              })
            );
          }
        }
        if (this.RecordAdmin.InfRateNumeratorUom != null) {
          this.RecordAdmin.InfRateNumeratorUom =
            this.RecordAdmin.InfusionRateNumeratorUOMs.Where(
              (x) => x.Value == this.InfusionDetails.InfRateNumeratorUom.Value
            ).FirstOrDefault();
        }
        if (
          this.InfusionType != null &&
          String.Compare(
            this.InfusionType.Value,
            InfusionTypesCode.PCA,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0
        ) {
          if (!String.IsNullOrEmpty(this.InfusionDetails.Bolus))
            this.RecordAdmin.Dose = this.InfusionDetails.Bolus;
          if (
            this.InfusionDetails.BolusUOMList != null &&
            this.InfusionDetails.BolusUOMList != null &&
            this.InfusionDetails.BolusUOMList.Count > 0
          ) {
            this.RecordAdmin.DoseUoM = this.InfusionDetails.BolusUOMList;
            this.RecordAdmin.SelectedDoseUoM = this.InfusionDetails.BolusUOM;
            if (
              this.InfusionDetails.BolusUOM != null &&
              !String.IsNullOrEmpty(this.InfusionDetails.BolusUOM.DisplayText)
            )
              this.RecordAdmin.DoseUOMValue =
                this.InfusionDetails.BolusUOM.DisplayText;
          }
        }
        if (this.Site != null) {
          this.IsRecAdmSiteEnabled = false;
        }
        if (
          this.IsAllowMultiRoute &&
          this.DefaultDetails != null &&
          this.DefaultDetails.Routes != null
        ) {
          let selectedrouteClistitem: CListItem[] =
            this.DefaultDetails.Routes.Where(
              (cl) => cl.IsSelected == true
            ).ToArray();
          if (
            selectedrouteClistitem != null &&
            selectedrouteClistitem.Count() > 1
          ) {
            this.IsRecAdmSiteEnabled = this.IsSiteEnabled;
          }
        }
        if (this.oPrescitemVM != null) {
          this.oPrescitemVM.PopulateInfusionDetailsBasedOnUOM();
        }
      }
    } else if (
      !String.IsNullOrEmpty(this.itemSubType) &&
      String.Compare(
        this.itemSubType,
        'CC_MEDGAS',
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (!String.IsNullOrEmpty(this.InfusionDetails.Rate))
        this.RecordAdmin.InfusionRate = this.InfusionDetails.Rate;
      if (this.InfusionDetails.InfRateDinominatorUom != null) {
        this.RecordAdmin.InfRateDinominatorUom =
          this.InfusionDetails.InfRateDinominatorUom;
        this.RecordAdmin.InfRateDinominatorUom.Tag =
          this.InfusionDetails.InfRateDinominatorUom.Tag;
        this.RecordAdmin.FlowrateDenUom =
          this.InfusionDetails.InfRateDinominatorUom;
        this.RecordAdmin.FlowrateDenUom.Tag =
          this.InfusionDetails.InfRateDinominatorUom.Tag;
      }
      if (this.InfusionDetails.InfRateNumeratorUom != null) {
        this.RecordAdmin.InfRateNumeratorUom =
          this.InfusionDetails.InfRateNumeratorUom;
        this.RecordAdmin.InfRateNumeratorUom.Tag =
          this.InfusionDetails.InfRateNumeratorUom.Tag;
        this.RecordAdmin.FlowrateNumUom =
          this.InfusionDetails.InfRateNumeratorUom;
        this.RecordAdmin.FlowrateNumUom.Tag =
          this.InfusionDetails.InfRateNumeratorUom.Tag;
      }
      if (
        this.InfusionDetails.InfRateNumeratorUom != null &&
        this.InfusionDetails.InfRateDinominatorUom != null &&
        !String.IsNullOrEmpty(
          this.InfusionDetails.InfRateNumeratorUom.DisplayText
        ) &&
        !String.IsNullOrEmpty(
          this.InfusionDetails.InfRateDinominatorUom.DisplayText
        )
      ) {
        this.RecordAdmin.InfusionRateUOMValue =
          this.InfusionDetails.InfRateNumeratorUom.DisplayText +
          '/' +
          this.InfusionDetails.InfRateDinominatorUom.DisplayText;
      }
      if (!String.IsNullOrEmpty(this.InfusionDetails.DeliveryDeviceFreetext)) {
        this.RecordAdmin.DeliveryDeviceText =
          this.InfusionDetails.DeliveryDeviceFreetext;
        if (this.InfusionDetails.DeliveryDeviceFreetext != null)
          this.RecordAdmin.IsEnabledDeliveryDevice = false;
      }
    }
    if (!String.IsNullOrEmpty(this.BatchNumber))
      this.RecordAdmin.BatchNo = this.BatchNumber;
    if (DateTime.NotEquals(this.ExpiryDate, DateTime.MinValue))
      this.RecordAdmin.ExpiryDate = this.ExpiryDate;
    if (
      !String.IsNullOrEmpty(this.itemSubType) &&
      String.Compare(
        this.itemSubType,
        CConstants.SUBTYPE_BLOOD,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this.RecordAdmin.BatchNoMandatory = true;
      this.RecordAdmin.ExpiryDateMandatory = true;
    }
    if (this.WitnessBy != null && this.WitnessByOID != null) {
      this.RecordAdmin.WitnessBy = this.WitnessBy;
      this.RecordAdmin.WitnessByOID = this.WitnessByOID;
    }
    if (this.IsNoWitnessAvialable != null)
      this.RecordAdmin.IsNoWitnessAvialable = this.IsNoWitnessAvialable;
    if (this.ClinicalIncidentForm != null)
      this.RecordAdmin.ClinicalIncidentForm = this.ClinicalIncidentForm;
    if (
      this.InfusionDetails.VolumeUOMList != null &&
      this.InfusionDetails.InfRateNumeratorUom != null &&
      this.InfusionType != null &&
      !this.recordadmin.isBolusIntermittent
    ) {
      if (this.InfusionDetails.InfRateNumeratorUom.Tag != null) {
        let checkVolumebasedIfusedUom =
          this.InfusionDetails.VolumeUOMList.Where(
            (c) =>
              this.InfusionDetails.InfRateNumeratorUom.Tag != null &&
              c.Tag != null &&
              this.InfusionDetails.InfRateNumeratorUom.Tag.ToString().Contains(
                c.Tag.ToString()
              )
          )
            .Select((s) => s)
            .ToList();
        if (checkVolumebasedIfusedUom.Count > 0) {
          this.RecordAdmin.IsInfRateVolBased = true;
          this.RecordAdmin.IsInfDripnrateCal = Visibility.Visible;
          this.RecordAdmin.IsInfusionrateCal = Visibility.Collapsed;
          this.RecordAdmin.InfusionDose = String.Empty;
          this.RecordAdmin.InfusionDoseUOM = String.Empty;
          this.RecordAdmin.InfusionDoseNumeratorUOMID = 0;
          this.RecordAdmin.InfusionDoseDenominatorUOMID = 0;
          this.RecordAdmin.EnableInfusionDose = false;
        } else {
          this.RecordAdmin.IsInfRateVolBased = false;
          this.RecordAdmin.IsInfusionrateCal = Visibility.Visible;
          this.RecordAdmin.IsInfDripnrateCal = Visibility.Collapsed;
        }
      }
    } else if (
      !String.IsNullOrEmpty(this.Dose) &&
      this.DoseUOM != null &&
      this.DoseUOM.Tag != null &&
      this.InfusionDetails != null &&
      !String.IsNullOrEmpty(this.InfusionDetails.InfusionPeriod) &&
      this.InfusionDetails.InfusionPeriodUom != null
    ) {
      let checkVolumebasedIfusedUom = this.InfusionDetails.VolumeUOMList.Where(
        (c) => c.Tag.ToString() == this.DoseUOM.Tag.ToString()
      )
        .Select((s) => s)
        .ToList();
      if (
        checkVolumebasedIfusedUom != null &&
        checkVolumebasedIfusedUom.Count > 0
      ) {
        this.RecordAdmin.IsInfDripnrateCal = Visibility.Visible;
        this.RecordAdmin.IsInfusionrateCal = Visibility.Collapsed;
      } else {
        this.RecordAdmin.IsInfDripnrateCal = Visibility.Collapsed;
        this.RecordAdmin.IsInfusionrateCal = Visibility.Visible;
      }
    }
    if (this.InfusionType != null) {
      let infusioncode: string;
      infusioncode = this.InfusionType.Value;
      this.RecordAdmin.InfusionType = ObjectHelper.CreateObject(
        new CListItem(),
        { Value: infusioncode }
      );
    }
    if (
      this.DoseType != null &&
      String.Compare(
        this.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (this.MultiDoseDetails != null && this.MultiDoseDetails.Count > 0) {
        for (let i=0; i<this.MultiDoseDetails.Count; i++){
          let item : MultipleDoseDetail = this.MultiDoseDetails[i];
          if (
            DateTime.NotEquals(item.DueDTTM, DateTime.MinValue) &&
            item.DueDose > 0 &&
            item.DoseUOM != null
          ) {
            this.RecordAdmin.Dose = item.DueDose.ToString();
            if (item.DueDoseUOM != null && this.RecordAdmin.DoseUoM != null) {
              let SelDoseUOM = this.RecordAdmin.DoseUoM.Where(
                (objitem) => objitem.Value == item.DueDoseUOM.Value
              ).Select((objitem) => objitem);
              if (SelDoseUOM != null && SelDoseUOM.Count() > 0) {
                this.RecordAdmin.SelectedDoseUoM = SelDoseUOM.FirstOrDefault();
              }
            }
            if (
              item.DueDoseUOM != null &&
              !String.IsNullOrEmpty(item.DueDoseUOM.DisplayText)
            )
              this.RecordAdmin.DoseUOMValue = item.DueDoseUOM.DisplayText;
            this.RecordAdmin.SlotScheduleTime = Convert.ToDateTime(
              item.DueDTTM.ToString('HH:mm')
            );
            let CurrentDate: DateTime = CommonBB.GetServerDateTime();
            if (DateTime.NotEquals(CurrentDate, DateTime.MinValue)) {
              this.RecordAdmin.AdministeredDate = CurrentDate.Date;
              this.RecordAdmin.AdministeredTime = CurrentDate;
            }
            break;
          }
          if (
            this.InfusionDetails != null &&
            this.InfusionType != null &&
            !String.IsNullOrEmpty(this.InfusionType.Value) &&
            (String.Compare(
              this.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.InfusionType.Value,
                InfusionTypesCode.SINGLEDOSEVOLUME,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                this.InfusionType.Value,
                InfusionTypesCode.FLUID,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0 ||
              String.Compare(
                this.InfusionType.Value,
                InfusionTypesCode.INTERMITTENT,
                StringComparison.CurrentCultureIgnoreCase
              ) == 0) &&
            !this.recordadmin.isBolusIntermittent
          ) {
            if (!String.IsNullOrEmpty(item.InfusionRate))
              this.RecordAdmin.InfusionRate = item.InfusionRate;
            if (item.InfrateDenominatoruom != null) {
              this.RecordAdmin.InfRateDinominatorUom =
                item.InfrateDenominatoruom;
              this.RecordAdmin.InfRateDinominatorUom.Tag =
                item.InfrateDenominatoruom.Tag;
            }
            if (item.Infratenumeratoruom != null) {
              this.RecordAdmin.InfRateNumeratorUom = item.Infratenumeratoruom;
              this.RecordAdmin.InfRateNumeratorUom.Tag =
                item.Infratenumeratoruom.Tag;
            }
            if (
              item.Infratenumeratoruom != null &&
              item.InfrateDenominatoruom != null &&
              !String.IsNullOrEmpty(item.Infratenumeratoruom.DisplayText) &&
              !String.IsNullOrEmpty(item.InfrateDenominatoruom.DisplayText)
            ) {
              this.RecordAdmin.InfusionRateUOMValue =
                item.Infratenumeratoruom.DisplayText +
                '/' +
                item.InfrateDenominatoruom.DisplayText;
            }
          }
          break;
        }
      }
    } else {
      if (
        this.DoseType != null &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.CONDITIONAL,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 &&
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.DOSAGERANGE,
          StringComparison.CurrentCultureIgnoreCase
        ) != 0
      ) {
        if (String.IsNullOrEmpty(this.RecordAdmin.Dose)) {
          this.RecordAdmin.Dose = !String.IsNullOrEmpty(this.Dose)
            ? this.Dose
            : String.Empty;
        }
        if (this.DoseUOM != null && this.RecordAdmin.SelectedDoseUoM == null) {
          this.RecordAdmin.SelectedDoseUoM = this.DoseUOM;
          if (
            this.DoseUOM != null &&
            !String.IsNullOrEmpty(this.DoseUOM.DisplayText)
          )
            this.RecordAdmin.DoseUOMValue = this.DoseUOM.DisplayText;
          this.RecordAdmin.SelectedDoseUoM.IsSelected = true;
        }
        if (
          this.ConditionalDosingDetails != null &&
          this.ConditionalDosingDetails.DoseDetails != null &&
          this.ConditionalDosingDetails.DoseDetails.Count > 0
        ) {
          let ConditionalDoseDetail =
            this.ConditionalDosingDetails.DoseDetails.Select(
              (s) => s
            ).FirstOrDefault();
          if (ConditionalDoseDetail != null) {
            if (!String.IsNullOrEmpty(ConditionalDoseDetail.Dose)) {
              this.RecordAdmin.Dose = !String.IsNullOrEmpty(
                ConditionalDoseDetail.Dose
              )
                ? ConditionalDoseDetail.Dose
                : String.Empty;
            }
            if (ConditionalDoseDetail.DoseUoM != null) {
              this.RecordAdmin.SelectedDoseUoM = this.RecordAdmin.DoseUoM.Where(
                (c) => c.Value == ConditionalDoseDetail.DoseUoM.Value
              ).FirstOrDefault();
              if (
                ConditionalDoseDetail.DoseUoM != null &&
                !String.IsNullOrEmpty(ConditionalDoseDetail.DoseUoM.DisplayText)
              )
                this.RecordAdmin.DoseUOMValue =
                  ConditionalDoseDetail.DoseUoM.DisplayText;
              this.RecordAdmin.SelectedDoseUoM.IsSelected = true;
            }
          }
        }
        if (
          this.InfusionDetails != null &&
          this.InfusionType != null &&
          !String.IsNullOrEmpty(this.InfusionType.Value) &&
          (String.Compare(
            this.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
            String.Compare(
              this.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              this.InfusionType.Value,
              InfusionTypesCode.FLUID,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0 ||
            String.Compare(
              this.InfusionType.Value,
              InfusionTypesCode.INTERMITTENT,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0)
        ) {
          if (
            this.ConditionalDosingDetails != null &&
            this.ConditionalDosingDetails.DoseDetails != null &&
            this.ConditionalDosingDetails.DoseDetails.Count > 0
          ) {
            for(let i=0; i< this.ConditionalDosingDetails.DoseDetails.Count; i++){
              let item : ConditionalDose = this.ConditionalDosingDetails.DoseDetails[i];            
              if (!this.recordadmin.isBolusIntermittent) {
                if (!String.IsNullOrEmpty(item.Infusionrate))
                  this.RecordAdmin.InfusionRate = item.Infusionrate;
                if (item.InfrateDenominatoruom != null) {
                  this.RecordAdmin.InfRateDinominatorUom =
                    item.InfrateDenominatoruom;
                  this.RecordAdmin.InfRateDinominatorUom.Tag =
                    item.InfrateDenominatoruom.Tag;
                }
                if (item.Infratenumeratoruom != null) {
                  this.RecordAdmin.InfRateNumeratorUom =
                    item.Infratenumeratoruom;
                  this.RecordAdmin.InfRateNumeratorUom.Tag =
                    item.Infratenumeratoruom.Tag;
                }
                if (
                  item.Infratenumeratoruom != null &&
                  item.InfrateDenominatoruom != null &&
                  !String.IsNullOrEmpty(item.Infratenumeratoruom.DisplayText) &&
                  !String.IsNullOrEmpty(item.InfrateDenominatoruom.DisplayText)
                ) {
                  this.RecordAdmin.InfusionRateUOMValue =
                    item.Infratenumeratoruom.DisplayText +
                    '/' +
                    item.InfrateDenominatoruom.DisplayText;
                }
              }
              break;
            }
          }
        }
      }
      if (
        DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
        this.StartPrescriptionTime.ToString('HH:mm') != '00:00'
      ) {
        this.RecordAdmin.AdministeredDate =
          this.StartDTTM.DateTime.AddDateAdjustment();
        let IsONCEONLY: boolean =
          this.Frequency != null &&
          this.Frequency.Tag != null &&
          this.Frequency.Tag instanceof Array &&
          ObjectHelper.CreateType<string[]>(this.Frequency.Tag, Array<string>)
            .length > 1 &&
          String.Equals(
            ObjectHelper.CreateType<string[]>(
              this.Frequency.Tag,
              Array<string>
            )[1],
            CConstants.OnceOnlyFrequency,
            StringComparison.CurrentCultureIgnoreCase
          );
        if (
          IsONCEONLY &&
          this.SelectedFrequencyDetails != null &&
          String.Compare(this.SelectedFrequencyDetails.Type, 'CC_PERIOD') ==
            0 &&
          !this.AsRequired &&
          this.AdminTimes != null &&
          this.AdminTimes.AdministrationScheduleTimes != null &&
          this.AdminTimes.AdministrationScheduleTimes.Count > 0 &&
          this.RecordAdmin != null
        ) {
          this.RecordAdmin.AdministeredTime =
            this.AdminTimes.AdministrationScheduleTimes[0].ScheduleDTTM;
        } else {
          this.RecordAdmin.AdministeredTime = this.StartPrescriptionTime;
        }
        this.RecordAdmin.SlotScheduleTime = this.StartPrescriptionTime;
      } else if (DateTime.NotEquals(this.StartDTTM, DateTime.MinValue)) {
        this.RecordAdmin.AdministeredDate =
          this.StartDTTM.DateTime.AddDateAdjustment();
      }
    }
    if (
      this.DoseType != null &&
      String.Compare(
        this.DoseType.Value,
        DoseTypeCode.DOSAGERANGE,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this.RecordAdmin.DoseMandatory = true;
      this.RecordAdmin.DoseUOMMandatory = true;
      this.RecordAdmin.Dose = String.Empty;
    }
    if (
      this.DoseType != null &&
      (String.Compare(
        this.DoseType.Value,
        DoseTypeCode.STEPPEDVARIABLE,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.CONDITIONAL,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0)
    ) {
      if (
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      )
        this.RecordAdmin.IsInfRateVolBased = false;
      else this.RecordAdmin.IsInfRateVolBased = true;
      this.RecordAdmin.IsInfDripnrateCal = Visibility.Visible;
      this.RecordAdmin.IsInfusionrateCal = Visibility.Collapsed;
      this.RecordAdmin.DripRate = String.Empty;
    }
    return this.RecordAdmin;
  }
  public IsDoseOverrideViewOpen: boolean = false;
  private _adminTimes: AdminScheduleTimeVM;
  private bDoseFormLoad: boolean = false;
  private bRouteLoad: boolean = false;
  private bSiteLoad: boolean = false;
  public get AdminTimes(): AdminScheduleTimeVM {
    return this._adminTimes;
  }
  public set AdminTimes(value: AdminScheduleTimeVM) {
    this._adminTimes = value;
    // NotifyPropertyChanged("AdminTimes");
  }
  private _givenFixedTime: ObservableCollection<IPPMAManagePrescSer.IPPScheduledetails>;
  public get GivenFixedTime(): ObservableCollection<IPPMAManagePrescSer.IPPScheduledetails> {
    return this._givenFixedTime;
  }
  public set GivenFixedTime(
    value: ObservableCollection<IPPMAManagePrescSer.IPPScheduledetails>
  ) {
    this._givenFixedTime = value;
    // NotifyPropertyChanged("GivenFixedTime");
  }
  public FollowUpOrStat: string=String.Empty;
  public FollowUpStatLaunch: string='\0';
  public IsRecordAdminDone: boolean = false;
  private _IsExistingItem: boolean = false;
  public get IsExistingItem(): boolean {
    return this._IsExistingItem;
  }
  public set IsExistingItem(value: boolean) {
    this._IsExistingItem = value;
    if (this._IsExistingItem) this.FollowUpStatMessage = String.Empty;
  }
  public RouteChangeAmendStartDTM: boolean = false;
  private DisposeVMObjects(): void {
    if (this.ConditionalDosingDetails != null)
      this.ConditionalDosingDetails.DoCleanUP();
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      !this.oPrescitemVM.FormViewerDetails.BHasFormViewParams
    ) {
      this.oPrescitemVM = null;
    }
  }
  private DisposeVMEvents(): void {
    if (this.AdminTimes != null) {
      // this.AdminTimes.SlotModeChanged -= this.AdminTimes_SlotModeChanged;
    }
    this.ClinicallyVerified = null;
    this.ClinicallyAuthorised = null;
    this.PrescribeRuleCompleted = null;
    this.SteppedVairableVisibilityEvent = null;
    this.AdminMethodForDynFormEvent = null;
    this.IsPRNCheckedEvent = null;
    this.OnEPrescribeRuleExecution = null;
    if (this.TitratedDoseDetails != null) {
      // this.TitratedDoseDetails.OnUpdateTitratedDosedetailsEvent -= this.OnUpdateTitratedDosedetailsEvent;
    }
  }
  public DoCleanUP(): void {
    this.DisposeVMEvents();
    this.DisposeVMObjects();
  }
  public GetFormViewControls(
    isbasic: string,
    oEvent: Function,
    IsFLorTCorRF: string,
    lnSTATRouteOID: number = 0,
    lnSTATDosageFormOID: number = 0
  ): void {
    let itemtypeforMR: string = String.Empty;
    itemtypeforMR = this.ItemSubType;
    let lnRouteOID: number = 0,
      lnFormOID = 0;
    let isMultiRouteforSTAT: boolean = false;
    if (
      this.FollowUpStatLaunch.Equals('S') &&
      this.IsAllowMultiRoute &&
      this.oPrescitemVM != null &&
      this.oPrescitemVM.ParentbaseVM != null &&
      this.oPrescitemVM.ParentbaseVM.objSTATItemVM != null &&
      this.oPrescitemVM.ParentbaseVM.objSTATItemVM.FormViewerDetails != null &&
      this.oPrescitemVM.ParentbaseVM.objSTATItemVM.FormViewerDetails
        .BasicDetails != null &&
      this.oPrescitemVM.ParentbaseVM.objSTATItemVM.FormViewerDetails
        .BasicDetails.DefaultDetails != null &&
      this.oPrescitemVM.ParentbaseVM.objSTATItemVM.FormViewerDetails
        .BasicDetails.DefaultDetails.Routes != null &&
      this.oPrescitemVM.ParentbaseVM.objSTATItemVM.FormViewerDetails
        .BasicDetails.DefaultDetails.Routes.Count > 0
    ) {
      let SelInfMultiInfRoutes =
        this.oPrescitemVM.ParentbaseVM.objSTATItemVM.FormViewerDetails.BasicDetails.DefaultDetails.Routes.Where(
          (SelInfRoutes) =>
            SelInfRoutes.IsSelected &&
            SelInfRoutes.Tag != null &&
            String.Compare(
              SelInfRoutes.Tag.ToString(),
              '1',
              StringComparison.CurrentCultureIgnoreCase
            ) == 0
        ).Select((SelInfRoutes) => SelInfRoutes);
      if (SelInfMultiInfRoutes != null && SelInfMultiInfRoutes.Count() > 0) {
        isMultiRouteforSTAT = true;
      }
    }
    if (
      this.Route != null &&
      !String.IsNullOrEmpty(this.Route.Value) &&
      !this.Route.Value.Contains(',')
    ) {
      lnRouteOID = Number.Parse(this.Route.Value);
    }
    if (
      (this.Route != null &&
        !String.IsNullOrEmpty(this.Route.Value) &&
        this.Route.Value.Contains(',')) ||
      isMultiRouteforSTAT
    ) {
      if (
        PatientContext.IsINFUSIONON &&
        this.IsAllowMultiRoute &&
        (isMultiRouteforSTAT ||
          (this.Route.Tag != null && this.Route.Tag.ToString().Contains('1')))
      ) {
        itemtypeforMR = 'Multiroute';
      }
    }
    if (this.DosageForm != null && !String.IsNullOrEmpty(this.DosageForm.Value))
      lnFormOID = Number.Parse(this.DosageForm.Value);
    if (lnSTATRouteOID != null && ObjectHelper.HasValue(lnSTATRouteOID)) {
      if (lnSTATRouteOID.Value > 0) {
        lnRouteOID = lnSTATRouteOID.Value;
      } else if (lnSTATRouteOID.Value == -1) {
        itemtypeforMR = 'Multiroute';
      }
    }
    if (
      lnSTATRouteOID != null &&
      ObjectHelper.HasValue(lnSTATRouteOID) &&
      lnSTATRouteOID.Value > 0
    ) {
      lnFormOID = lnSTATDosageFormOID.Value;
    }
    if (this.IdentifyingOID == 0) {
      this.IdentifyingOID = this.OriginalIdentifyingOID;
    }
    if (String.IsNullOrEmpty(this.identifyingType)) {
      this.identifyingType = this.OriginalIdentifyingType;
    }
    let objServiceProxy: ManagePrescriptionWSSoapClient =
      new ManagePrescriptionWSSoapClient();
    objServiceProxy.GetFormViewControlsCompleted = (s, e) => {
      oEvent(s, e);
    };
    let objReqForm: CReqMsgGetFormViewControls =
      new CReqMsgGetFormViewControls();
    objReqForm.oFormViewCriteriaBC = new FormViewCriteria();
    objReqForm.oFormViewCriteriaBC.IdentifyingOID = this.IdentifyingOID;
    objReqForm.oFormViewCriteriaBC.IdentifyingType = this.identifyingType;
    objReqForm.mcVersionNoBC = AppSessionInfo.AMCV;
    objReqForm.oFormViewCriteriaBC.IsBasic = isbasic;
    objReqForm.oFormViewCriteriaBC.RouteOID = lnRouteOID;
    objReqForm.oFormViewCriteriaBC.FormOID = lnFormOID;
    objReqForm.oFormViewCriteriaBC.IsInfusionOn = PatientContext.IsINFUSIONON
      ? '1'
      : '0';
    objReqForm.oFormViewCriteriaBC.RouteOIDs =
      this.Route != null && !String.IsNullOrEmpty(this.Route.Value)
        ? this.Route.Value
        : String.Empty;
    objReqForm.oFormViewCriteriaBC.Strength =
      this.Strength != null && !String.IsNullOrEmpty(this.Strength.Value)
        ? this.Strength.Value
        : String.Empty;
    objReqForm.oFormViewCriteriaBC.ServiceOID = MedChartData.ServiceOID;
    objReqForm.oFormViewCriteriaBC.LocationOID = MedChartData.LocationOID;
    objReqForm.oFormViewCriteriaBC.EncounterOID = PatientContext.EncounterOid;
    objReqForm.oFormViewCriteriaBC.IsFLorTCorRF = IsFLorTCorRF;
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.MulticomponentDetails != null &&
      this.oPrescitemVM.FormViewerDetails.MulticomponentDetails
        .oMCItemBasicInfo != null &&
      this.oPrescitemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo
        .Count > 0
    ) {
      for (
        let i: number = 0;
        i <
        this.oPrescitemVM.FormViewerDetails.MulticomponentDetails
          .oMCItemBasicInfo.Count;
        i++
      ) {
        objReqForm.oFormViewCriteriaBC.MCIIdentifyingOIDTypes =
          !String.IsNullOrEmpty(
            objReqForm.oFormViewCriteriaBC.MCIIdentifyingOIDTypes
          )
            ? objReqForm.oFormViewCriteriaBC.MCIIdentifyingOIDTypes +
              ',' +
              this.oPrescitemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                i
              ].IdentifyingOID.ToString() +
              '-' +
              this.oPrescitemVM.FormViewerDetails.MulticomponentDetails
                .oMCItemBasicInfo[i].IdentifyingType
            : this.oPrescitemVM.FormViewerDetails.MulticomponentDetails.oMCItemBasicInfo[
                i
              ].IdentifyingOID.ToString() +
              '-' +
              this.oPrescitemVM.FormViewerDetails.MulticomponentDetails
                .oMCItemBasicInfo[i].IdentifyingType;
      }
    }
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.FormViewerDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
      this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionDetails != null
    ) {
      objReqForm.oFormViewCriteriaBC.FluidIdentifyingOID =
        this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidIdentifyingOID;
      objReqForm.oFormViewCriteriaBC.FluidIdentifyingType =
        this.oPrescitemVM.FormViewerDetails.BasicDetails.InfusionDetails.FluidItemType;
    }
    objReqForm.oContextInformation = Common.FillContext();
    if (
      PatientContext.ClerkFormViewDefaultBehavior ==
      ClerkFormViewDeftBehaviour.LaunchFormMandatory
    ) {
      objReqForm.oFormViewCriteriaBC.PrescriptionType =
        PrescriptionTypes.Clerking;
    } else {
      objReqForm.oFormViewCriteriaBC.PrescriptionType =
        PatientContext.PrescriptionType;
    }
    objReqForm.oFormViewCriteriaBC.ItemSubType = !String.IsNullOrEmpty(
      itemtypeforMR
    )
      ? itemtypeforMR
      : String.Empty;
    objServiceProxy.GetFormViewControlsAsync(objReqForm);
  }
  public bIsMCIrule: boolean = false;
  public IsMCiUptoProdexist: boolean = false;
  public ProbBrandlaunchexist: boolean = false;
  public BrandFlag: boolean = false;
  public GetAdhocMCIFormDefaults(
    itemlist: string,
    lnRouteOID: string,
    lnFormOID: string,
    strMCVersion: string,
    strParamType: string,
    MCuptoIdentifyingoid: number,
    MCuptoIdentifyingtype: string
  ): void {
    if (this.bIsMCIrule == true) {
      let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
        new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
      let objReq: IPPMAManagePrescSer.CReqMsgGetAdhocMciRule =
        new IPPMAManagePrescSer.CReqMsgGetAdhocMciRule();
      objReq.objFormViewParamsBC = new IPPMAManagePrescSer.IPPFormViewParams();
      objReq.ItemlistBC = itemlist;
      objReq.objFormViewParamsBC.RouteOID =
        !String.IsNullOrEmpty(lnRouteOID) && !lnRouteOID.Contains(',')
          ? Convert.ToInt64(lnRouteOID)
          : 0;
      objReq.objFormViewParamsBC.RouteOIDs = lnRouteOID;
      objReq.objFormViewParamsBC.FormOID = !String.IsNullOrEmpty(lnFormOID)
        ? Convert.ToInt64(lnFormOID)
        : 0;
      objReq.objFormViewParamsBC.MCVersion = strMCVersion;
      objReq.objFormViewParamsBC.ParamType = strParamType;
      objReq.objFormViewParamsBC.MCuptoIdentifyingoid = MCuptoIdentifyingoid;
      objReq.objFormViewParamsBC.MCuptoIdentifyingtype = MCuptoIdentifyingtype;
      objReq.objFormViewParamsBC.IsRouteRequired = false;
      objReq.objFormViewParamsBC.IsSiteRequired = false;
      objReq.objFormViewParamsBC.IsStrengthRequired = false;
      objReq.objFormViewParamsBC.IsMciUptoProdRule = false;
      objReq.oContextInformation = Common.FillContext();
      objServiceProxy.GetAdhocMciRuleCompleted = (s, e) => {
        this.objServiceProxy_GetAdhocMciRuleCompleted(s, e);
      };
      objServiceProxy.GetAdhocMciRuleAsync(objReq);
    }
  }
  objServiceProxy_GetAdhocMciRuleCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetAdhocMciRuleCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000047;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:BasicDetailsVM, Method:objServiceProxy_GetFormViewDefaultParamsCompleted()';
    if (e.Error == null && this.DefaultDetails != null) {
      try {
        let objRes: IPPMAManagePrescSer.CResMsgGetAdhocMciRule = e.Result;
        if (
          objRes.objDefaults != null &&
          objRes.objDefaults.DosageForm != null
        ) {
          this.bDoseFormLoad = true;
          let lstForm: ObservableCollection<CListItem> =
            new ObservableCollection<CListItem>();
          let oDefValue: CListItem = null;
          let distinctform = objRes.objDefaults.DosageForm.GroupBy(
            (x) => x.FormId
          )
            .Select((y) => y.First())
            .OrderBy((s) => s.FormName);
          distinctform.forEach((objForm) => {
            if (!String.IsNullOrEmpty(objForm.FormName)) {
              let oList: CListItem = ObjectHelper.CreateObject(
                new CListItem(),
                {
                  DisplayText: objForm.FormName,
                  Value: objForm.FormId.ToString(),
                }
              );
              lstForm.Add(oList);
              if (
                this.DosageForm != null &&
                String.Compare(
                  this.DosageForm.Value,
                  oList.Value,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
              ) {
                oDefValue = oList;
              }
            }
            this.DefaultDetails.Forms = lstForm;
          });
          if (objRes.objDefaults.DosageForm.Count == 0) {
            this.DefaultDetails.Forms = lstForm;
          }
          this.bDoseFormLoad = false;
          if (
            String.Compare(
              this.itemSubType,
              CConstants.SUBTYPE,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            if (
              this.DefaultDetails.Forms != null &&
              this.DefaultDetails.Forms.Count == 1
            ) {
              this.DosageForm = this.DefaultDetails.Forms.First();
              if (
                this.DosageForm != null &&
                this.DosageForm.Value != null
              ) {
                this.GetAdhocMCIFormDefaults(
                  this.itemlist,
                  this.Route.Value,
                  this.DosageForm.Value,
                  this.MCVersion,
                  FormDefaults.ALL.ToString(),
                  this.MCuptoIdentifyingoid,
                  this.MCuptoIdentifyingtype
                );
              } 

            } else if (oDefValue != null) {
              this.DosageForm = oDefValue;
            } else if (this.DosageForm != null && oDefValue == null) {
              this.DosageForm = oDefValue;
            }
          }
          if (
            String.Compare(
              this.IdentifyingType,
              'CATALOGUEITEM',
              StringComparison.InvariantCultureIgnoreCase
            ) != 0 &&
            this.DefaultDetails.Forms != null &&
            this.DefaultDetails.Forms.Count > 0
          ) {
            this.DosageForm = this.DefaultDetails.Forms[0];
          }
          if (
            String.Compare(this.IdentifyingType, CConstants.NONCATALOGUEITEM) ==
              0 ||
            String.Compare(this.IdentifyingType, CConstants.Precatalog) == 0 ||
            (String.Compare(this.itemSubType, CConstants.SUBTYPE) == 0 &&
              this.DefaultDetails.Forms != null &&
              this.isAdhocitem == true)
          ) {
            if (this.DefaultDetails.Forms != null) {
              let ncount: number = this.DefaultDetails.Forms.Count;
              if (
                ncount > 0 &&
                this.DefaultDetails.Forms != null &&
                !this.DefaultDetails.Forms[ncount - 1].DisplayText.Contains(
                  'More'
                ) &&
                !this.DosageFormMoreClicked
              ) {
                this.DefaultDetails.Forms.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
                this.DosageFormMoreClicked = false;
              } else if (
                ncount == 0 &&
                this.DefaultDetails.Forms != null &&
                !this.DosageFormMoreClicked
              ) {
                this.DefaultDetails.Forms.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
                this.DosageFormMoreClicked = false;
              }
            }
          }
        } else {
          if (
            String.Compare(this.IdentifyingType, CConstants.NONCATALOGUEITEM) ==
              0 ||
            String.Compare(this.IdentifyingType, CConstants.Precatalog) == 0 ||
            (String.Compare(this.itemSubType, CConstants.SUBTYPE) == 0 &&
              this.DefaultDetails.Forms != null)
          ) {
            if (this.DefaultDetails.Forms != null) {
              let ncount: number = this.DefaultDetails.Forms.Count;
              if (
                ncount > 0 &&
                this.DefaultDetails.Forms != null &&
                !this.DefaultDetails.Forms[ncount - 1].DisplayText.Contains(
                  'More'
                ) &&
                !this.DosageFormMoreClicked
              ) {
                this.DefaultDetails.Forms.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
                this.DosageFormMoreClicked = false;
              } else if (
                ncount == 0 &&
                this.DefaultDetails.Forms != null &&
                !this.DosageFormMoreClicked
              ) {
                this.DefaultDetails.Forms.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
                this.DosageFormMoreClicked = false;
              }
            }
          }
        }
        if (
          this.itemSubType == CConstants.SUBTYPE &&
          this.isAdhocitem == true
        ) {
          if (objRes.objDefaults != null && objRes.objDefaults.Route != null) {
            if (objRes.objDefaults.Route.Count > 0) {
              this.bRouteLoad = true;
              let distinctroute = objRes.objDefaults.Route.GroupBy(
                (x) => x.RouteId
              )
                .Select((y) => y.First())
                .OrderBy((y) => y.RouteName);
              let lstRoute: ObservableCollection<CListItem> =
                new ObservableCollection<CListItem>();
              let oDefValue: CListItem = null;
              distinctroute.forEach((objRoute) => {
                if (!String.IsNullOrEmpty(objRoute.RouteName)) {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: objRoute.RouteName,
                      Value: objRoute.RouteId.ToString(),
                      Tag: objRoute.bInfusion,
                    }
                  );
                  lstRoute.Add(oList);
                  if (
                    this.Route != null &&
                    String.Compare(
                      this.Route.Value,
                      oList.Value,
                      StringComparison.OrdinalIgnoreCase
                    ) == 0
                  )
                    oDefValue = oList;
                }
              });
              this.DefaultDetails.Routes = lstRoute;
              this.oPrescitemVM.oDefaultRoute = this.DefaultDetails.Routes;
              if (
                String.Compare(
                  this.itemSubType,
                  CConstants.SUBTYPE,
                  StringComparison.OrdinalIgnoreCase
                ) == 0
              ) {
                if (oDefValue != null) {
                  this.Route = oDefValue;
                } else if (this.Route != null && oDefValue == null) {
                  this.Route = oDefValue;
                }
              }
              this.oPrescitemVM.MCIGridchange = false;
            }
            if (
              String.Compare(
                this.IdentifyingType,
                'CATALOGUEITEM',
                StringComparison.InvariantCultureIgnoreCase
              ) != 0 &&
              this.DefaultDetails.Routes != null &&
              this.DefaultDetails.Routes.Count > 0
            ) {
              this.Route = this.DefaultDetails.Routes[0];
            }
            if (
              String.Compare(
                this.IdentifyingType,
                CConstants.NONCATALOGUEITEM
              ) == 0 ||
              String.Compare(this.IdentifyingType, CConstants.Precatalog) ==
                0 ||
              (String.Compare(this.itemSubType, CConstants.SUBTYPE) == 0 &&
                this.DefaultDetails.Routes != null)
            ) {
              if (this.DefaultDetails.Routes != null) {
                let ncount: number = this.DefaultDetails.Routes.Count;
                if (
                  ncount > 0 &&
                  this.DefaultDetails.Routes != null &&
                  !this.DefaultDetails.Routes[ncount - 1].DisplayText.Contains(
                    'More'
                  )
                )
                  this.DefaultDetails.Routes.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: 'More',
                      Value: 'CC_More',
                    })
                  );
                else if (ncount == 0 && this.DefaultDetails.Routes != null)
                  this.DefaultDetails.Routes.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: 'More',
                      Value: 'CC_More',
                    })
                  );
              }
            }
            this.bRouteLoad = false;
          }
          this.bIsMCIrule = false;
          let oUOMs: ObservableCollection<CListItem> =
            new ObservableCollection<CListItem>();
          let oDefUOMValue: CListItem = null;
          if (
            objRes.objDefaults != null &&
            objRes.objDefaults.DoseUOM != null
          ) {
            this.bDoseUOMLoad = true;
            let distinctuom = objRes.objDefaults.DoseUOM.GroupBy(
              (x) => x.UOMName
            ).Select((y) => y.First());
            distinctuom.forEach((objUOM) => {
              if (!String.IsNullOrEmpty(objUOM.UOMName)) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: objUOM.UOMName,
                    Value: objUOM.UOMId.ToString(),
                    Tag: objUOM.UOMCode.ToString(),
                  }
                );
                oUOMs.Add(oList);
                if (!this.DoseUOMTypeCode.ContainsKey(objUOM.UOMCode)) {
                  this.DoseUOMTypeCode.Add(objUOM.UOMCode, objUOM.UOMTypeCode);
                }
                if (
                  this.DoseUOM != null &&
                  String.Compare(
                    this.DoseUOM.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefUOMValue = oList;
              }
            });
          }
          if (
            oDefUOMValue == null &&
            this.DoseUOM != null &&
            !String.IsNullOrEmpty(this.DoseUOM.Value) &&
            !String.IsNullOrEmpty(this.DoseUOM.DisplayText)
          ) {
            oUOMs.Add(this.DoseUOM);
            oDefUOMValue = this.DoseUOM;
          }
          if (
            String.Compare(this.IdentifyingType, CConstants.NONCATALOGUEITEM) ==
              0 ||
            String.Compare(this.IdentifyingType, CConstants.Precatalog) == 0
          ) {
            oUOMs.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
          this.DefaultDetails.Uoms = oUOMs;
          this.bDoseUOMLoad = false;
          if (oDefUOMValue != null) {
            this.DoseUOM = oDefUOMValue;
          }
          if (
            this.DoseUOM != null &&
            !String.IsNullOrEmpty(this.DoseUOM.DisplayText) &&
            this.DefaultDetails != null &&
            this.DefaultDetails.Uoms != null
          )
            this.DoseUOM = this.GetComboValue(
              this.DoseUOM,
              this.DefaultDetails.Uoms
            );
          if (this.ConditionalDosingDetails != null) {
            this.ConditionalDosingDetails.DoseUOMs = this.DefaultDetails.Uoms;
          }
          if (
            String.Compare(
              this.itemSubType,
              CConstants.SUBTYPE,
              StringComparison.OrdinalIgnoreCase
            ) == 0
          ) {
            this.DefaultDetails.Uoms.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: 'More',
                Value: 'CC_More',
              })
            );
          }
          if (
            objRes.objDefaults != null &&
            objRes.objDefaults.DoseSite != null &&
            objRes.objDefaults.DoseSite.Count > 0
          ) {
            this.bSiteLoad = true;
            let lstSite: ObservableCollection<CListItem> =
              new ObservableCollection<CListItem>();
            let oDefValue: CListItem = null;
            let distinctsite = objRes.objDefaults.DoseSite.GroupBy(
              (x) => x.SiteId
            ).Select((y) => y.First());
            distinctsite.forEach((objSite) => {
              if (!String.IsNullOrEmpty(objSite.SiteName)) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: objSite.SiteName,
                    Value: objSite.SiteId.ToString(),
                  }
                );
                lstSite.Add(oList);
                if (
                  this.Site != null &&
                  String.Compare(
                    this.Site.Value,
                    oList.Value,
                    StringComparison.OrdinalIgnoreCase
                  ) == 0
                )
                  oDefValue = oList;
              }
            });
            this.DefaultDetails.Sites = lstSite;
            if (oDefValue != null) {
              this.Site = oDefValue;
            } else if (
              this.AccessContraintControls != null &&
              this.AccessContraintControls.Count > 0 &&
              this.DefaultDetails.Sites.Count > 0
            ) {
              this.Site = this.DefaultDetails.Sites.First();
            } else {

              if (
                this.Site != null && !String.IsNullOrEmpty(this.Site.Value) &&
                this.DefaultDetails != null &&
                this.DefaultDetails.Sites != null &&
                !this.DefaultDetails.Sites.Contains(this._site)
              ) {
                this.DefaultDetails.Sites.Add(this._site);
              }
            }
            if (this.DefaultDetails.Sites != null) {
              let ncount: number = this.DefaultDetails.Sites.Count;
              if (
                ncount > 0 &&
                this.DefaultDetails.Sites != null &&
                !this.DefaultDetails.Sites[ncount - 1].DisplayText.Contains(
                  'More'
                )
              ) {
                this.DefaultDetails.Sites.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
              } else if (ncount == 0 && this.DefaultDetails.Sites != null) {
                this.DefaultDetails.Sites.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
              }
            }
          } else {
            if (this.Site != null && !String.IsNullOrEmpty(this.Site.Value)) {
              if (this.DefaultDetails.Sites == null)
              {
                this.DefaultDetails.Sites =
                new ObservableCollection<CListItem>();
              }
                if( this.DefaultDetails != null &&
                  this.DefaultDetails.Sites != null &&
                  !this.DefaultDetails.Sites.Contains(this._site))
                  {
                    this.DefaultDetails.Sites.Add(this.Site);
                  }
             
            }            
          }
          //94266 fix
          if (this.DefaultDetails.Sites == null)
            {
              this.DefaultDetails.Sites = new ObservableCollection<CListItem>();
              this.DefaultDetails.Sites.Add(
                ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'More',
                  Value: 'CC_More',
                })
              );
            }

          this.bSiteLoad = false;
          let lstQTYUOM: ObservableCollection<CListItem> =
            new ObservableCollection<CListItem>();
          let oDefQTYUOMValue: CListItem = null;
          if (
            objRes.objDefaults != null &&
            objRes.objDefaults.Quantity != null &&
            objRes.objDefaults.Quantity.Count > 0
          ) {
            let distinctuom = objRes.objDefaults.Quantity.GroupBy(
              (x) => x.QuantityUOMName
            ).Select((y) => y.First());
            distinctuom.forEach((objQtyUOM) => {
              if (!String.IsNullOrEmpty(objQtyUOM.QuantityUOMName)) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: objQtyUOM.QuantityUOMName,
                    Value: objQtyUOM.QuantityUOMId.ToString(),
                  }
                );
                lstQTYUOM.Add(oList);
              }
            });
          }
          if (
            oDefQTYUOMValue == null &&
            this.QuantityUOM != null &&
            !String.IsNullOrEmpty(this.QuantityUOM.Value)
          ) {
            if (
              !this.IsClearlstAmendedFlds ||
              this.IsGetAdhocMCIRuleFromGetPresItemDetls
            ) {
              oUOMs.Add(this.QuantityUOM);
              oDefQTYUOMValue = this.QuantityUOM;
            } else {
              this.Quantity = String.Empty;
            }
          }
          this.DefaultDetails.Quantitys = lstQTYUOM;
          if (oDefQTYUOMValue != null) {
            this.QuantityUOM = oDefQTYUOMValue;
          }
        }
        if (this.DefaultDetails.Uoms != null) {
          if (this.bIsAmend) {
            let oDefBolusUOM: CListItem = new CListItem();
            if (this.InfusionDetails.BolusUOM != null) {
              oDefBolusUOM = ObjectHelper.CreateObject(new CListItem(), {
                Value: this.InfusionDetails.BolusUOM.Value,
                DisplayText: this.InfusionDetails.BolusUOM.DisplayText,
                Tag: 'ERule',
              });
            }
            let selectedInfNumeratorUom: CListItem =
              this.InfusionDetails.InfRateNumeratorUom;
            this.InfusionDetails.InfRateNumeratorUOM =
              new ObservableCollection<CListItem>();
            if (
              !(
                String.Equals(
                  this.IdentifyingType,
                  CConstants.NONCATALOGUEITEM
                ) || String.Equals(this.IdentifyingType, CConstants.Precatalog)
              )
            ) {
              if (
                this.InfusionDetails.VolumeUOMList != null &&
                this.InfusionDetails.VolumeUOMList.Count > 0
              ) {
                this.InfusionDetails.VolumeUOMList.forEach((Otem) => {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: Otem.DisplayText,
                      Value: Otem.Value.ToString(),
                      Tag: Otem.Tag.ToString(),
                    }
                  );
                  if (
                    this.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        x.Tag != null &&
                        Otem.Tag != null &&
                        x.Tag.ToString().Contains(Otem.Tag.ToString())
                    ).Count() == 0
                  ) {
                    this.InfusionDetails.InfRateNumeratorUOM.Add(oList);
                  }
                });
              }
            } else {
              if (
                this.InfusionDetails.InfRateNumeratorUOM.Where((x) =>
                  String.Equals(
                    x.Value,
                    CConstants.CONST_MORE,
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ).Count() == 0
              ) {
                this.InfusionDetails.InfRateNumeratorUOM.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
              }
            }
            let oDefInfRate: CListItem = new CListItem();
            this.DefaultDetails.Uoms.forEach((objBolusUOM) => {
              if (!String.IsNullOrEmpty(objBolusUOM.DisplayText)) {
                let oList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: objBolusUOM.DisplayText,
                    Value: objBolusUOM.Value.ToString(),
                  }
                );
                let oConUOMList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: objBolusUOM.DisplayText,
                    Value: objBolusUOM.Value.ToString(),
                    Tag: objBolusUOM.Tag,
                  }
                );
                if (this.InfusionDetails.BolusUOMList == null)
                  this.InfusionDetails.BolusUOMList =
                    new ObservableCollection<CListItem>();
                this.InfusionDetails.BolusUOMList.Add(oList);
                if (this.InfusionDetails.LowConcentrationUOMlist == null)
                  this.InfusionDetails.LowConcentrationUOMlist =
                    new ObservableCollection<CListItem>();
                this.InfusionDetails.LowConcentrationUOMlist.Add(oConUOMList);
                if (this.InfusionDetails.InfRateNumeratorUOM == null)
                  this.InfusionDetails.InfRateNumeratorUOM =
                    new ObservableCollection<CListItem>();
                if (
                  !String.IsNullOrEmpty(oConUOMList.DisplayText) &&
                  !oConUOMList.DisplayText.Contains('hour') &&
                  !oConUOMList.DisplayText.Contains('minute') &&
                  !oConUOMList.DisplayText.Contains('day') &&
                  !oConUOMList.DisplayText.Contains('More') &&
                  oConUOMList.Tag != null &&
                  !String.Equals(oConUOMList.Tag, CConstants.ml)
                ) {
                  if (
                    this.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        x.Tag != null &&
                        oConUOMList.Tag != null &&
                        x.Tag.ToString().Contains(oConUOMList.Tag.ToString())
                    ).Count() == 0
                  ) {
                    this.InfusionDetails.InfRateNumeratorUOM.Add(oConUOMList);
                  }
                  if (
                    this.InfusionDetails.InfRateNumeratorUom != null &&
                    !String.IsNullOrEmpty(
                      this.InfusionDetails.InfRateNumeratorUom.Value
                    ) &&
                    String.Equals(
                      this.InfusionDetails.InfRateNumeratorUom.Value,
                      oConUOMList.Value
                    )
                  ) {
                    oDefInfRate = oConUOMList;
                  }
                }
              }
            });
            if (this.InfusionDetails.InfRateNumeratorUOM.Count > 1) {
              let lstitemml: CListItem =
                this.InfusionDetails.InfRateNumeratorUOM.Where(
                  (x) => x.Tag != null && x.Tag.ToString() == CConstants.ml
                ).FirstOrDefault();
              this.InfusionDetails.RestoreInfusionNumerator(false, true);
              this.InfusionDetails.InfRateNumeratorUOM.Add(lstitemml);
            }
            if (
              oDefBolusUOM != null &&
              !String.IsNullOrEmpty(oDefBolusUOM.Value)
            )
              this.InfusionDetails.BolusUOM = oDefBolusUOM;
            if (
              oDefInfRate != null &&
              !String.IsNullOrEmpty(oDefInfRate.Value)
            ) {
              this.InfusionDetails.InfRateNumeratorUom = oDefInfRate;
            } else if (
              selectedInfNumeratorUom != null &&
              !String.IsNullOrEmpty(selectedInfNumeratorUom.Value)
            ) {
              let DefInfRate = this.InfusionDetails.InfRateNumeratorUOM.Where(
                (oRate) => oRate.Value == selectedInfNumeratorUom.Value
              ).Select((oRate) => oRate);
              if (DefInfRate != null && DefInfRate.Count() > 0) {
                this.InfusionDetails.InfRateNumeratorUom =
                  DefInfRate.FirstOrDefault();
              }
            }
          } else {
            this.InfusionDetails.BolusUOMList = this.DefaultDetails.Uoms;
            this.InfusionDetails.LowConcentrationUOMlist =
              this.DefaultDetails.Uoms;
            let selectedInfNumeratorUom: CListItem =
              this.InfusionDetails.InfRateNumeratorUom;
            this.InfusionDetails.InfRateNumeratorUOM =
              new ObservableCollection<CListItem>();
            if (
              !(
                String.Equals(
                  this.IdentifyingType,
                  CConstants.NONCATALOGUEITEM
                ) || String.Equals(this.IdentifyingType, CConstants.Precatalog)
              )
            ) {
              if (
                this.InfusionDetails.VolumeUOMList != null &&
                this.InfusionDetails.VolumeUOMList.Count > 0
              ) {
                this.InfusionDetails.VolumeUOMList.forEach((Otem) => {
                  let oList: CListItem = ObjectHelper.CreateObject(
                    new CListItem(),
                    {
                      DisplayText: Otem.DisplayText,
                      Value: Otem.Value.ToString(),
                      Tag: Otem.Tag.ToString(),
                    }
                  );
                  if (
                    this.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        x.Tag != null &&
                        Otem.Tag != null &&
                        x.Tag.ToString().Contains(Otem.Tag.ToString())
                    ).Count() == 0
                  ) {
                    this.InfusionDetails.InfRateNumeratorUOM.Add(oList);
                  }
                });
              }
            } else {
              if (
                this.InfusionDetails.InfRateNumeratorUOM.Where((x) =>
                  String.Equals(
                    x.Value,
                    CConstants.CONST_MORE,
                    StringComparison.InvariantCultureIgnoreCase
                  )
                ).Count() == 0
              ) {
                this.InfusionDetails.InfRateNumeratorUOM.Add(
                  ObjectHelper.CreateObject(new CListItem(), {
                    DisplayText: 'More',
                    Value: 'CC_More',
                  })
                );
              }
            }
            let oDefInfRate: CListItem = new CListItem();
            this.DefaultDetails.Uoms.forEach((objConDoseUOM) => {
              if (!String.IsNullOrEmpty(objConDoseUOM.DisplayText)) {
                let oConUOMList: CListItem = ObjectHelper.CreateObject(
                  new CListItem(),
                  {
                    DisplayText: objConDoseUOM.DisplayText,
                    Value: objConDoseUOM.Value.ToString(),
                    Tag: objConDoseUOM.Tag,
                  }
                );
                if (this.InfusionDetails.InfRateNumeratorUOM == null)
                  this.InfusionDetails.InfRateNumeratorUOM =
                    new ObservableCollection<CListItem>();
                if (
                  !String.IsNullOrEmpty(oConUOMList.DisplayText) &&
                  !oConUOMList.DisplayText.Contains('hour') &&
                  !oConUOMList.DisplayText.Contains('minute') &&
                  !oConUOMList.DisplayText.Contains('day') &&
                  !oConUOMList.DisplayText.Contains('More') &&
                  oConUOMList.Tag != null &&
                  !String.Equals(oConUOMList.Tag, CConstants.ml)
                ) {
                  if (
                    this.InfusionDetails.InfRateNumeratorUOM.Where(
                      (x) =>
                        x.Tag != null &&
                        oConUOMList.Tag != null &&
                        x.Tag.ToString().Contains(oConUOMList.Tag.ToString())
                    ).Count() == 0
                  ) {
                    this.InfusionDetails.InfRateNumeratorUOM.Add(oConUOMList);
                  }
                  if (
                    this.InfusionDetails.InfRateNumeratorUom != null &&
                    !String.IsNullOrEmpty(
                      this.InfusionDetails.InfRateNumeratorUom.Value
                    ) &&
                    String.Equals(
                      this.InfusionDetails.InfRateNumeratorUom.Value,
                      oConUOMList.Value
                    )
                  ) {
                    oDefInfRate = oConUOMList;
                  }
                }
              }
            });
            if (this.InfusionDetails.InfRateNumeratorUOM.Count > 1) {
              let lstitemml: CListItem =
                this.InfusionDetails.InfRateNumeratorUOM.Where(
                  (x) => x.Tag != null && x.Tag.ToString() == CConstants.ml
                ).FirstOrDefault();
              this.InfusionDetails.RestoreInfusionNumerator(false, true);
              this.InfusionDetails.InfRateNumeratorUOM.Add(lstitemml);
            }
            if (
              oDefInfRate != null &&
              !String.IsNullOrEmpty(oDefInfRate.Value)
            ) {
              this.InfusionDetails.InfRateNumeratorUom = oDefInfRate;
            } else if (
              selectedInfNumeratorUom != null &&
              !String.IsNullOrEmpty(selectedInfNumeratorUom.Value)
            ) {
              let DefInfRate = this.InfusionDetails.InfRateNumeratorUOM.Where(
                (oRate) => oRate.Value == selectedInfNumeratorUom.Value
              ).Select((oRate) => oRate);
              if (DefInfRate != null && DefInfRate.Count() > 0) {
                this.InfusionDetails.InfRateNumeratorUom =
                  DefInfRate.FirstOrDefault();
              }
            }
          }
          this.InfusionDetails.BoosterDoseUOMList = this.DefaultDetails.Uoms;
          if (this.InfusionDetails.Boosterdoseuom != null)
            this.InfusionDetails.Boosterdoseuom = this.GetComboValue(
              this.InfusionDetails.Boosterdoseuom,
              this.InfusionDetails.BoosterDoseUOMList
            );
        }
        if (
          this.InfusionDetails.LowConcentrationUOMlist != null &&
          this.InfusionDetails.LowConcentrationUOMlist.Count > 0
        ) {
          if (this.RecordAdmin == null) this.RecordAdmin = new RecordAdminVM();
          this.RecordAdmin.ConcentrationStrengthUOMs =
            new ObservableCollection<CListItem>();
          this.InfusionDetails.LowConcentrationUOMlist.forEach((lstItm) => {
            this.RecordAdmin.ConcentrationStrengthUOMs.Add(
              ObjectHelper.CreateObject(new CListItem(), {
                DisplayText: lstItm.DisplayText,
                Value: lstItm.Value,
                Tag: lstItm.Tag,
              })
            );
          });
        }
        if (
          this.ProbBrandlaunchexist == false &&
          this.oPrescitemVM != null &&
          this.oPrescitemVM.FormViewerDetails != null &&
          this.oPrescitemVM.FormViewerDetails.MulticomponentDetails != null &&
          this.oPrescitemVM.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo != null &&
          this.oPrescitemVM.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo.Count > 0 &&
          this.oPrescitemVM.FormViewerDetails.MulticomponentDetails
            .oMCItemBasicInfo[0].isEditable == true
        ) {
          if (objRes.isMCbrand == '1' && objRes.Brandflag) {
            this.ProbBrandlaunchexist = true;
            this.DosageFormMoreClicked = false;
            this.BrandFlag = true;
             this.oPrescitemVM.LaunchMCBrandConstraint();
          } else if (objRes.isMCbrand == '1') {
            if (PatientContext.IsINFUSIONON) {
              this.ProbBrandlaunchexist = true;
              this.DosageFormMoreClicked = false;
              this.BrandFlag = false;
              //Not Required for LHS. To be Re-Visited.
               this.oPrescitemVM.LaunchMCBrandConstraint();
            }
          }
        }
        this.IsGetAdhocMCIRuleFromGetPresItemDetls = false;
      } catch (ex: any) {
        this.IsGetAdhocMCIRuleFromGetPresItemDetls = false;
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }

      if (
        !this.bIsAdminmethodRuleExecuted &&
        this.Route != null &&
        !String.IsNullOrEmpty(this.Route.Value) &&
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value)
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.ADMINMETHOD.ToString()
        );
      }
      if (
        this.Route != null &&
        !String.IsNullOrEmpty(this.Route.Value) &&
        this.DosageForm != null &&
        !String.IsNullOrEmpty(this.DosageForm.Value)
      ) {
        this.ApplyEFrameworkRule(
          this.IdentifyingOID,
          this.IdentifyingType,
          this.Route.Value,
          this.DosageForm.Value,
          String.Empty,
          this.MCVersion,
          RuleNames.SITE.ToString()
        );
      }
      if (
        this.Route == null ||
        (this.Route != null && String.IsNullOrEmpty(this.Route.Value)) ||
        this.DosageForm == null ||
        (this.DosageForm != null && String.IsNullOrEmpty(this.DosageForm.Value))
      ) {
        this.isRuleexecuted = true;
        if (this.EprescribingruleEvent != null) this.EprescribingruleEvent();
        if (this.OnEPrescribeRuleExecution != null) {
          this.OnEPrescribeRuleExecution(ePresRuleExecStatus.Completed);
        }
      }
      this.IsGetAdhocMCIRuleFromGetPresItemDetls = false;
    } else {
      this.IsGetAdhocMCIRuleFromGetPresItemDetls = false;
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public GetMciProductRule(
    lnRouteOID: string,
    lnFormOID: string,
    strMCVersion: string,
    MCuptoIdentifyingoid: number,
    MCuptoIdentifyingtype: string
  ): void {
    let objServiceProxy: IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient =
      new IPPMAManagePrescSer.IPPMAManagePrescriptionWSSoapClient();
    let objReq: IPPMAManagePrescSer.CReqMsgGetMciProductRule =
      new IPPMAManagePrescSer.CReqMsgGetMciProductRule();
    objReq.objFormViewParamsBC = new IPPMAManagePrescSer.IPPFormViewParams();
    objReq.objFormViewParamsBC.RouteOID =
      !String.IsNullOrEmpty(lnRouteOID) && !lnRouteOID.Contains(',')
        ? Convert.ToInt64(lnRouteOID)
        : 0;
    objReq.objFormViewParamsBC.FormOID = !String.IsNullOrEmpty(lnFormOID)
      ? Convert.ToInt64(lnFormOID)
      : 0;
    objReq.objFormViewParamsBC.MCVersion = strMCVersion;
    objReq.objFormViewParamsBC.MCuptoIdentifyingoid = MCuptoIdentifyingoid;
    objReq.objFormViewParamsBC.MCuptoIdentifyingtype = MCuptoIdentifyingtype;
    objReq.oContextInformation = Common.FillContext();
    objServiceProxy.GetMciProductRuleCompleted = (s, e) => {
      this.objServiceProxy_GetMciProductRuleCompleted(s, e);
    };
    objServiceProxy.GetMciProductRuleAsync(objReq);
  }
  objServiceProxy_GetMciProductRuleCompleted(
    sender: Object,
    e: IPPMAManagePrescSer.GetMciProductRuleCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000047;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:BasicDetailsVM, Method:objServiceProxy_GetFormViewDefaultParamsCompleted()';
    if (e.Error == null && this.DefaultDetails != null) {
      try {
        let objRes: IPPMAManagePrescSer.CResMsgGetMciProductRule = e.Result;
        if (objRes.isMCbrand == '1' && objRes.Brandflag) {
          this.IsMCiUptoProdexist = true;
          this.BrandFlag = true;
        } else if (objRes.isMCbrand == '1') {
          if (PatientContext.IsINFUSIONON) {
            this.IsMCiUptoProdexist = true;
            this.BrandFlag = false;
          }
        }
        if (
          this.oPrescitemVM != null &&
          this.oPrescitemVM.FormViewerDetails != null &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails != null &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails.IsMCiUptoProdexist &&
          this.oPrescitemVM.FormViewerDetails.BasicDetails.IsMCIProduct &&
          String.Compare(
            this.oPrescitemVM.ItemSubType,
            CConstants.SUBTYPE,
            StringComparison.OrdinalIgnoreCase
          ) == 0 &&
          (this.oPrescitemVM.ActionCode == ActivityTypes.Amend ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Reorder ||
            this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe) &&
          PatientContext.PrescriptionType == PrescriptionTypes.Clerking
        ) {
          //Not Required for LHS. To be Re-Visited.
           this.oPrescitemVM.LaunchMCBrandConstraint();
          this.oPrescitemVM.FormViewerDetails.BasicDetails.IsMCIProduct = false;
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  private _IsInfusionFluid: string;
  public get IsInfusionFluid(): string {
    return this._IsInfusionFluid;
  }
  public set IsInfusionFluid(value: string) {
    this._IsInfusionFluid = value;
  }
  private _IsConditionalExists: boolean = false;
  public get IsConditionalExists(): boolean {
    return this._IsConditionalExists;
  }
  public set IsConditionalExists(value: boolean) {
    this._IsConditionalExists = value;
  }
  private _reasonMand: boolean = true;
  public get ReasonMandatory(): boolean {
    return this._reasonMand;
  }
  public set ReasonMandatory(value: boolean) {
    this._reasonMand = value;
    if (value) {
      this.ReasonFontSize = 13;
      this.ReasonFontWeight = FontWeights.ExtraBold;
      this.IsMandatoryStarVisible = 'Visible';
    } else {
      this.ReasonFontSize = 11;
      this.ReasonFontWeight = FontWeights.Normal;
      this.IsMandatoryStarVisible = 'Collapsed';
    }
    // NotifyPropertyChanged("ReasonMandatory");
  }
  private _ReasonFontSize: number = 13;
  public get ReasonFontSize(): number {
    return this._ReasonFontSize;
  }
  public set ReasonFontSize(value: number) {
    if (this._ReasonFontSize != value) {
      this._ReasonFontSize = value;
      // NotifyPropertyChanged("ReasonFontSize");
    }
  }
  private _ReasonFontWeight: FontWeight = FontWeights.ExtraBold;
  public get ReasonFontWeight(): FontWeight {
    return this._ReasonFontWeight;
  }
  public set ReasonFontWeight(value: FontWeight) {
    if (this._ReasonFontWeight != value) {
      this._ReasonFontWeight = value;
      // NotifyPropertyChanged("ReasonFontWeight");
    }
  }
  private _IsMandatoryStarVisible: string = 'Visible';
  public get IsMandatoryStarVisible(): string {
    return this._IsMandatoryStarVisible;
  }
  public set IsMandatoryStarVisible(value: string) {
    if (this._IsMandatoryStarVisible != value) {
      this._IsMandatoryStarVisible = value;
      // NotifyPropertyChanged("IsMandatoryStarVisible");
    }
  }
  private _ScheduledTimes: boolean = false;
  public get ScheduledTimes(): boolean {
    return this._ScheduledTimes;
  }
  public set ScheduledTimes(value: boolean) {
    this._ScheduledTimes = value;
  }
  public get IsGetPresWithoutFrequency(): boolean {
    return this._IsGetPresWithoutFrequency;
  }
  public set IsGetPresWithoutFrequency(value: boolean) {
    this._IsGetPresWithoutFrequency = value;
  }
  private _PrescribedBrandName: string;
  public get PrescribedBrandName(): string {
    return this._PrescribedBrandName;
  }
  public set PrescribedBrandName(value: string) {
    this._PrescribedBrandName = value;
  }
  private _ForAmendGetFrequencyByPresItemOID: boolean = false;
  public get ForAmendGetFrequencyByPresItemOID(): boolean {
    return this._ForAmendGetFrequencyByPresItemOID;
  }
  public set ForAmendGetFrequencyByPresItemOID(value: boolean) {
    this._ForAmendGetFrequencyByPresItemOID = value;
  }
  private _OriginalFrequency: CListItem;
  public get OriginalFrequency(): CListItem {
    return this._OriginalFrequency;
  }
  public set OriginalFrequency(value: CListItem) {
    this._OriginalFrequency = value;
  }
  private _IsChangedFrequencyValueInAmend: string = 'N';
  public get IsChangedFrequencyValueInAmend(): string {
    return this._IsChangedFrequencyValueInAmend;
  }
  public set IsChangedFrequencyValueInAmend(value: string) {
    this._IsChangedFrequencyValueInAmend = value;
  }
  private _IsDrugRoundTimesAvailForAmendGetFrequency: boolean = false;
  public get IsDrugRoundTimesAvailForAmendGetFrequency(): boolean {
    return this._IsDrugRoundTimesAvailForAmendGetFrequency;
  }
  public set IsDrugRoundTimesAvailForAmendGetFrequency(value: boolean) {
    this._IsDrugRoundTimesAvailForAmendGetFrequency = value;
  }
  public get OriginalIdentifyingName(): string {
    return this.originalIdentifyingName;
  }
  public set OriginalIdentifyingName(value: string) {
    if (!Helper.ReferenceEquals(this.originalIdentifyingName, value)) {
      this.originalIdentifyingName = value;
      // super.NotifyPropertyChanged("OriginalIdentifyingName");
    }
  }
  private _onbehalfTV: boolean = false;
  public get OnbehalfTV(): boolean {
    return this._onbehalfTV;
  }
  public set OnbehalfTV(value: boolean) {
    if (this._onbehalfTV.Equals(value) != true) {
      this._onbehalfTV = value;
      // super.NotifyPropertyChanged("OnbehalfTV");
    }
  }
  private supplyInstrText: string =
    Resource.MedicationForm.lblSupplyInstructionsText_Tooltip;
  public get SupplyInsText(): string {
    return this.supplyInstrText;
  }
  public set SupplyInsText(value: string) {
    if (value != this.supplyInstrText) {
      if (!this.isFormViewDataLoaded) {
        this.supplyInstrText = value;
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('SupplyInsText')) {
          this.lstAmendedFlds.Add('SupplyInsText');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this.supplyInstrText = value;
        if (
          !String.Equals(
            this.SupplyInsText,
            Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.IsNullOrEmpty(this.Supplycomments)
        ) {
          this.SupplyInsTextWithComments =
            this.SupplyInsText +
            Environment.NewLine +
            'Comments:' +
            this.Supplycomments;
        } else if (
          String.Equals(
            this.SupplyInsText,
            Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !String.IsNullOrEmpty(this.Supplycomments)
        ) {
          this.SupplyInsTextWithComments = 'Comments:' + this.Supplycomments;
        } else if (
          !String.Equals(
            this.SupplyInsText,
            Resource.MedicationForm.lblSupplyInstructionsText_Tooltip,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          String.IsNullOrEmpty(this.Supplycomments)
        ) {
          this.SupplyInsTextWithComments = this.SupplyInsText;
        }
      }
      // super.NotifyPropertyChanged("SupplyInsText");
    }
  }
  private supplyInstrVal: string;
  public get SupplyInsVal(): string {
    return this.supplyInstrVal;
  }
  public set SupplyInsVal(value: string) {
    if (value != this.supplyInstrVal) {
      if (!this.isFormViewDataLoaded) {
        this.supplyInstrVal = value;
      } else {
        this.IsenableRSNFORMOD = true;
        this.IsenableModificationcomments = true;
        if (!this.lstAmendedFlds.Contains('SupplyInsVal')) {
          this.lstAmendedFlds.Add('SupplyInsVal');
          if (
            this.bIsAmend &&
            !this.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.IsenableRSNFORMOD
          ) {
            this.DoChangesForAmend();
          }
        }
        this.supplyInstrVal = value;
      }
      // super.NotifyPropertyChanged("SupplyInsVal");
    }
  }
  private _IsSupplyInstrExistsForFluid: boolean = false;
  public get IsSupplyInstrExistsForFluid(): boolean {
    return this._IsSupplyInstrExistsForFluid;
  }
  public set IsSupplyInstrExistsForFluid(value: boolean) {
    this._IsSupplyInstrExistsForFluid = value;
  }
  public CloneSelectedDoseDetail(
    SelectedSteppedDoseDetail: MultipleDoseDetail
  ): void {
    if (SelectedSteppedDoseDetail != null) {
      if (
        SelectedSteppedDoseDetail.CareTaker.Memento != null &&
        SelectedSteppedDoseDetail.CareTaker.Memento.Count > 0
      )
        SelectedSteppedDoseDetail.CareTaker.Memento.Clear();
      SelectedSteppedDoseDetail.CareTaker.Memento.Add(
        SelectedSteppedDoseDetail.Clone
      );
      if (SelectedSteppedDoseDetail.ScheduleDetailsData != null) {
        let nTotalCount: number =
          SelectedSteppedDoseDetail.ScheduleDetailsData.Count;
        for (let iCnt: number = 0; iCnt < nTotalCount; iCnt++) {
          if (
            SelectedSteppedDoseDetail.ScheduleDetailsData[iCnt].CareTaker
              .Memento != null &&
            SelectedSteppedDoseDetail.ScheduleDetailsData[iCnt].CareTaker
              .Memento.Count > 0
          )
            SelectedSteppedDoseDetail.ScheduleDetailsData[
              iCnt
            ].CareTaker.Memento.Clear();
          SelectedSteppedDoseDetail.ScheduleDetailsData[
            iCnt
          ].CareTaker.Memento.Add(
            SelectedSteppedDoseDetail.ScheduleDetailsData[iCnt].Clone
          );
        }
      }
      if (SelectedSteppedDoseDetail.AdminTimesData != null) {
        let nTotalCount: number =
          SelectedSteppedDoseDetail.AdminTimesData.Count;
        for (let iCnt: number = 0; iCnt < nTotalCount; iCnt++) {
          if (
            SelectedSteppedDoseDetail.AdminTimesData[iCnt].CareTaker.Memento !=
              null &&
            SelectedSteppedDoseDetail.AdminTimesData[iCnt].CareTaker.Memento
              .Count > 0
          )
            SelectedSteppedDoseDetail.AdminTimesData[
              iCnt
            ].CareTaker.Memento.Clear();
          SelectedSteppedDoseDetail.AdminTimesData[iCnt].CareTaker.Memento.Add(
            SelectedSteppedDoseDetail.AdminTimesData[iCnt].Clone
          );
        }
      }
    }
  }
  public RestoreSelectedDoseDetail(
    SelectedSteppedDoseDetail: MultipleDoseDetail
  ): void {
    if (SelectedSteppedDoseDetail != null) {
      if (
        SelectedSteppedDoseDetail.CareTaker.Memento != null &&
        SelectedSteppedDoseDetail.CareTaker.Memento.Count != 0
      )
        SelectedSteppedDoseDetail.Restore(
          SelectedSteppedDoseDetail.CareTaker.Memento[0]
        );
      if (
        SelectedSteppedDoseDetail.ScheduleDetailsData != null &&
        SelectedSteppedDoseDetail.ScheduleDetailsData.Count > 0 &&
        SelectedSteppedDoseDetail.ScheduleDetailsData[0].CareTaker.Memento
          .Count > 0
      ) {
        let nTotalCount: number =
          SelectedSteppedDoseDetail.ScheduleDetailsData.Count;
        for (let iCnt: number = 0; iCnt < nTotalCount; iCnt++) {
          if (
            SelectedSteppedDoseDetail.ScheduleDetailsData[iCnt].CareTaker
              .Memento.Count > 0
          )
            SelectedSteppedDoseDetail.ScheduleDetailsData[iCnt].Restore(
              SelectedSteppedDoseDetail.ScheduleDetailsData[iCnt].CareTaker
                .Memento[0]
            );
        }
      }
      if (
        SelectedSteppedDoseDetail.AdminTimesData != null &&
        SelectedSteppedDoseDetail.AdminTimesData.Count > 0 &&
        SelectedSteppedDoseDetail.AdminTimesData[0].CareTaker.Memento.Count > 0
      ) {
        let nTotalCount: number =
          SelectedSteppedDoseDetail.AdminTimesData.Count;
        for (let iCnt: number = 0; iCnt < nTotalCount; iCnt++) {
          if (
            SelectedSteppedDoseDetail.AdminTimesData[iCnt].CareTaker.Memento
              .Count > 0
          )
            SelectedSteppedDoseDetail.AdminTimesData[iCnt].Restore(
              SelectedSteppedDoseDetail.AdminTimesData[iCnt].CareTaker
                .Memento[0]
            );
        }
      }
    }
  }
  private _OrderSentenceDesc: string;
  public get OrderSentenceDesc(): string {
    return this._OrderSentenceDesc;
  }
  public set OrderSentenceDesc(value: string) {
    if (value != this._OrderSentenceDesc) {
      this._OrderSentenceDesc = value;
      // super.NotifyPropertyChanged("OrderSentenceDesc");
    }
  }
  private _SteppedDoseUOM: CListItem;
  public get SteppedDoseUOM(): CListItem {
    return this._SteppedDoseUOM;
  }
  public set SteppedDoseUOM(value: CListItem) {
    if (value != this._SteppedDoseUOM) {
      this._SteppedDoseUOM = value;
      // super.NotifyPropertyChanged("SteppedDoseUOM");
      if (value != null && value.Value == "CC_More") {
        value.DisplayText = '';
      }
    }
  }
  private _TitratedDoseInstructionList: ObservableCollection<CListItem>;
  public get TitratedDoseInstructionList(): ObservableCollection<CListItem> {
    return this._TitratedDoseInstructionList;
  }
  public set TitratedDoseInstructionList(
    value: ObservableCollection<CListItem>
  ) {
    this._TitratedDoseInstructionList = value;
    // NotifyPropertyChanged("TitratedDoseInstructionList");
  }
  private _isReviewtiratedosesVisibility: Visibility = Visibility.Collapsed;
  public get IsReviewtiratedosesVisibility(): Visibility {
    return this._isReviewtiratedosesVisibility;
  }
  public set IsReviewtiratedosesVisibility(value: Visibility) {
    this._isReviewtiratedosesVisibility = value;
    // NotifyPropertyChanged("IsReviewtiratedosesVisibility");
  }
  private _isReviewtiratedosesLinkVisibility: Visibility = Visibility.Collapsed;
  public get IsReviewtiratedosesLinkVisibility(): Visibility {
    return this._isReviewtiratedosesLinkVisibility;
  }
  public set IsReviewtiratedosesLinkVisibility(value: Visibility) {
    this._isReviewtiratedosesLinkVisibility = value;
    // NotifyPropertyChanged("IsReviewtiratedosesLinkVisibility");
  }
  private _IsTitratedAmendDoseClear: boolean = false;
  public get IsTitratedAmendDoseClear(): boolean {
    return this._IsTitratedAmendDoseClear;
  }
  public set IsTitratedAmendDoseClear(value: boolean) {
    this._IsTitratedAmendDoseClear = value;
  }
  private _IsTitratedAmendStartDTTMChanged: boolean = false;
  public get IsTitratedAmendStartDTTMChanged(): boolean {
    return this._IsTitratedAmendStartDTTMChanged;
  }
  public set IsTitratedAmendStartDTTMChanged(value: boolean) {
    this._IsTitratedAmendStartDTTMChanged = value;
  }
  private _IsCheckPerviousTitratedDoseDetails: boolean = false;
  public get IsCheckPerviousTitratedDoseDetails(): boolean {
    return this._IsCheckPerviousTitratedDoseDetails;
  }
  public set IsCheckPerviousTitratedDoseDetails(value: boolean) {
    this._IsCheckPerviousTitratedDoseDetails = value;
  }
  public SetFrequencyForTitrated(oListItm: CListItem): void {
    if (oListItm != null) {
      let bIsNonPRNFreq: boolean = false;
      if (
        ObjectHelper.CreateType<string[]>(oListItm.Tag, Array<string>) !=
          null &&
        ObjectHelper.CreateType<string[]>(oListItm.Tag, Array<string>).length >
          1 &&
        !String.Equals(
          ObjectHelper.CreateType<string[]>(oListItm.Tag, Array<string>)[1],
          CConstants.OnceOnlyFrequency,
          StringComparison.CurrentCultureIgnoreCase
        )
      ) {
        bIsNonPRNFreq = String.Equals(
          ObjectHelper.CreateType<string[]>(oListItm.Tag, Array<string>)[0],
          '0'
        );
        if (bIsNonPRNFreq) {
          this.GetComboValue(oListItm, this.DefaultDetails.NonPRNFrequencies);
        }
      }
      let _WhenRequiredLZOID: string = CConstants.WhenRequiredLZOID;
      if (!String.IsNullOrEmpty(Common.Frq88Childs))
        _WhenRequiredLZOID = Common.Frq88Childs;
      let _AsDirectedLZOID: string = CConstants.AsDirectedLZOID;
      if (!String.IsNullOrEmpty(Common.Frc001Childs))
        _AsDirectedLZOID = Common.Frc001Childs;
      let IsPeriodBasedFrequency: boolean = true;
      let FreqTag: Array<string> = ObjectHelper.CreateType<Array<string>>(
        oListItm.Tag,
        Array<string>
      );
      if (
        FreqTag != null &&
        FreqTag.length > 0 &&
        FreqTag.Any((x) =>
          String.Equals(
            x,
            CConstants.IntervalFreq,
            StringComparison.InvariantCultureIgnoreCase
          )
        )
      ) {
        IsPeriodBasedFrequency = false;
      }
      if (
        ObjectHelper.CreateType<Array<string>>(oListItm.Tag, Array<string>) !=
          null &&
        ObjectHelper.CreateType<Array<string>>(oListItm.Tag, Array<string>)
          .length > 4 &&
        !String.Equals(
          (oListItm.Tag as Array<string>)[0],
          '1',
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        IsPeriodBasedFrequency &&
        !_WhenRequiredLZOID.Contains((<string[]>oListItm.Tag)[2]) &&
        !_AsDirectedLZOID.Contains((oListItm.Tag as Array<string>)[2])
      ) {
        this.GetComboValue(oListItm, this.DefaultDetails.SteppedFrequencies);
      }
    }
  }
  public TechValiadteSupplyInstWithConactSemiColon(
    SelectedSupplyInst: ObservableCollection<CListItem>,
    out1: (sSupplyInstTxt: string) => void,
    out2: (sSupplyInstVal: string) => void
  ): void {
    let sSupplyInstTxt: string;
    let sSupplyInstVal: string;

    sSupplyInstTxt = String.Empty;
    sSupplyInstVal = String.Empty;
    if (SelectedSupplyInst != null && SelectedSupplyInst.Count > 0) {
      SelectedSupplyInst = new ObservableCollection<CListItem>(
        SelectedSupplyInst.OrderBy((x) => x.Value).ToList()
      );
      let nCount: number = SelectedSupplyInst.Count;
      for (let i: number = 0; i < nCount; i++) {
        sSupplyInstTxt += SelectedSupplyInst[i].DisplayText;
        sSupplyInstVal += SelectedSupplyInst[i].Value;
        if (
          !String.IsNullOrEmpty(sSupplyInstVal) &&
          !String.IsNullOrEmpty(sSupplyInstTxt) &&
          i != nCount - 1
        ) {
          sSupplyInstTxt += ';';
          sSupplyInstVal += ';';
        }
      }
    }

    out1(sSupplyInstTxt);
    out2(sSupplyInstVal);
  }
  private _IsNotTriggerAmendUpperDoseClearSupplyQuantity: boolean = false;
  public get IsNotTriggerAmendUpperDoseClearSupplyQuantity(): boolean {
    return this._IsNotTriggerAmendUpperDoseClearSupplyQuantity;
  }
  public set IsNotTriggerAmendUpperDoseClearSupplyQuantity(value: boolean) {
    this._IsNotTriggerAmendUpperDoseClearSupplyQuantity = value;
  }
  private _IsAdminTimesGridEnabled: boolean = true;
  public get IsAdminTimesGridEnabled(): boolean {
    return true;
  }
  public set IsAdminTimesGridEnabled(value: boolean) {
    this._IsAdminTimesGridEnabled = value;
    // NotifyPropertyChanged("IsAdminTimesGridEnabled");
  }
  private _IsReorderStartDTTMBlankForDifEncounter: boolean = false;
  public get IsReorderStartDTTMBlankForDifEncounter(): boolean {
    return this._IsReorderStartDTTMBlankForDifEncounter;
  }
  public set IsReorderStartDTTMBlankForDifEncounter(value: boolean) {
    this._IsReorderStartDTTMBlankForDifEncounter = value;
  }
  private _IsStartFromNextDay: boolean = false;
  public get IsStartFromNextDay(): boolean {
    return this._IsStartFromNextDay;
  }
  public set IsStartFromNextDay(value: boolean) {
    this._IsStartFromNextDay = value;
  }
  private _IsNotInPatientSteppedVariableAmend: boolean = true;
  public get IsNotInPatientSteppedVariableAmend(): boolean {
    return this._IsNotInPatientSteppedVariableAmend;
  }
  public set IsNotInPatientSteppedVariableAmend(value: boolean) {
    this._IsNotInPatientSteppedVariableAmend = value;
    // NotifyPropertyChanged("IsNotSteppedVariableAmend");
  }
  
  private _IsCallFromSVGridUnSelect: boolean = false;
  public get IsCallFromSVGridUnSelect(): boolean {
    return this._IsCallFromSVGridUnSelect;
  }
  public set IsCallFromSVGridUnSelect(value: boolean) {
    this._IsCallFromSVGridUnSelect = value;
  }
  private CheckReviewUOM4SteppedVariable(): void {
    let IsSteppendDoseSelected: boolean =
      this.DoseType != null &&
      (String.Compare(
        this.DoseType.Value,
        DoseTypeCode.STEPPED,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.VARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this.DoseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0) &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.InvariantCultureIgnoreCase
      );
    let IsONCEONLY: boolean =
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      this._frequency != null &&
      this._frequency.Tag != null &&
      this._frequency.Tag instanceof Array &&
      ObjectHelper.CreateType<Array<string>>(this._frequency.Tag, Array<string>)
        .length > 1 &&
      String.Equals(
        ObjectHelper.CreateType<string[]>(
          this._frequency.Tag,
          Array<string>
        )[1],
        CConstants.OnceOnlyFrequency,
        StringComparison.CurrentCultureIgnoreCase
      );
    let IsPRNChecked: boolean = this.AsRequired;
    if (IsSteppendDoseSelected || IsONCEONLY || IsPRNChecked) {
      this.RemoveDoseFromReviewAfterUOM();
    } else if (
      this.InfusionType == null ||
      (this.InfusionType != null &&
        String.Equals(
          this.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT
        ) &&
        this.ReviewAfterVisible == Visibility.Visible)
    ) {
      this.SetDefaultReviewAfterUOMValues();
    }
  }
  public ReviewAfterPeriodInvisible(): void {
    this.ReviewAfterVisible = Visibility.Collapsed;
    this.ReviewAfterCommentsVisible = Visibility.Collapsed;
    this.ReviewAfterIconVisible = Visibility.Collapsed;
    this.ReviewAfterDateTime = String.Empty;
    this.ReviewAfterDTTM = DateTime.MinValue;
  }
  public ReviewAfterPeriodVisible(): void {
    this.ReviewAfterVisible = Visibility.Visible;
    if (this.oPrescitemVM != null) {
      this.ReviewAfterIconVisible = Visibility.Visible;
      if (
        this.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
        this.oPrescitemVM.PrescriptionItemOID != 0
      )
        this.ReviewAfterIconVisible = Visibility.Visible;
      else this.ReviewAfterIconVisible = Visibility.Collapsed;
      if (DateTime.Equals(this.ReviewAfterDTTM, DateTime.MinValue)) {
        this.oPrescitemVM.GetReviewAfterDatetime();
      }
      if (DateTime.NotEquals(this.ReviewAfterDTTM, DateTime.MinValue)) {
        let IsDST: boolean, IsAmbiguous, IsInvalid;
        this.ReviewAfterDateTime = this.ReviewAfterDTTM.ConvertToUser(
          (o1) => {
            IsDST = o1;
          },
          (o2) => {
            IsAmbiguous = o2;
          },
          (o3) => {
            IsInvalid = o3;
          }
        ).ToDateTimeString(IsDST, IsAmbiguous, CConstants.DateHMFormat);

        this.ReviewAfterCommentsVisible = Visibility.Visible;
      } else {
        this.ReviewAfterCommentsVisible = Visibility.Collapsed;
      }
    }
  }
  public GetFirstDoseDetailFromSVGrdData(
    CurrentDTTM: DateTime,
    GrdData: ObservableCollection<ScheduleDetailsCols>
  ): ScheduleDoseDtl {
    let oScheduleDoseDtl: ScheduleDoseDtl = null;
    let _PrescStartDTTM: DateTime =
      DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
      DateTime.NotEquals(this.StartPrescriptionTime, DateTime.MinValue)
        ? this.StartDTTM.AddTime(this.StartPrescriptionTime)
        : DateTime.MinValue;
    if (
      DateTime.NotEquals(CurrentDTTM, DateTime.MinValue) &&
      DateTime.NotEquals(_PrescStartDTTM, DateTime.MinValue) &&
      GrdData != null &&
      GrdData.Count > 0
    ) {
      let _GridDaysCount: number =
        GrdData[0] != null &&
        GrdData[0].ScheduleDate != null &&
        GrdData[0].ScheduleDate.Length > 0
          ? GrdData[0].ScheduleDate.Length
          : 0;
      let _AdminTimesCount: number = GrdData.Count;
      let ScheduleDate: DateTime = DateTime.MinValue;
      let _ToBreakStep: boolean = false;
      for (
        let _GridDayIndex: number = 0;
        _GridDayIndex < _GridDaysCount;
        _GridDayIndex++
      ) {
        for (
          let _AdminTimeIndex: number = 0;
          _AdminTimeIndex < _AdminTimesCount;
          _AdminTimeIndex++
        ) {
          if (
            GrdData[_AdminTimeIndex].Scheduledoseflag[_GridDayIndex] && GrdData[_AdminTimeIndex].ScheduleDate[_GridDayIndex]!= null  && GrdData[_AdminTimeIndex].ScheduleDate[_GridDayIndex]!= undefined &&
             DateTime.NotEquals(GrdData[_AdminTimeIndex].ScheduleDate[_GridDayIndex].Date,
              DateTime.MinValue) &&
            !String.IsNullOrEmpty(GrdData[_AdminTimeIndex].ScheduleTime)
          ) {
            let ts: TimeSpan = new TimeSpan();
            ScheduleDate =
              GrdData[_AdminTimeIndex].ScheduleDate[
                _GridDayIndex
              ].DateTime.ToUserDateTime();
            let bResult: boolean = TimeSpan.TryParse(
              GrdData[_AdminTimeIndex].ScheduleTime,
              (o) => {
                ts = o;
              }
            );
            if (bResult) {
              let oTempSchDTTM: DateTime = ScheduleDate.DateTime.Add(ts);
              if (
               DateTime.GreaterThanOrEqualTo( oTempSchDTTM, CurrentDTTM) &&
                DateTime.GreaterThanOrEqualTo(oTempSchDTTM, _PrescStartDTTM)
              ) {
                oScheduleDoseDtl = new ScheduleDoseDtl();
                oScheduleDoseDtl.FirstScheduleDTTM = oTempSchDTTM;
                oScheduleDoseDtl.FirstDose =
                  GrdData[_AdminTimeIndex].ScheduleDoseValue[_GridDayIndex];
                oScheduleDoseDtl.FirstDoseUom =
                  GrdData[_AdminTimeIndex].ScheduleDoseUOM;
                _ToBreakStep = true;
                break;
              }
            }
          }
        }
        if (_ToBreakStep) {
          break;
        }
      }
    }
    return oScheduleDoseDtl;
  }
  public GetDoseDetailSV(
    _StartDTTM: DateTime,
    _EndDTTM: DateTime,
    CurrentDTTM: DateTime,
    FreqDetails: IPPMAManagePrescSer.CResMsgGetAdministrationTimes,
    AdminTimesData: ObservableCollection<GrdAdminstrativeTimesCols>
  ): List<DateTime> {
    let lstScheduleDates: List<DateTime> = null;
    let lstScheduleDTTM: List<DateTime> = new List<DateTime>();
    if (
      FreqDetails != null &&
      FreqDetails.oFrequency != null &&
      !String.IsNullOrEmpty(FreqDetails.oFrequency.UOM) &&
      DateTime.NotEquals(_StartDTTM, DateTime.MinValue) &&
      DateTime.NotEquals(_EndDTTM, DateTime.MinValue) &&
      DateTime.NotEquals(CurrentDTTM, DateTime.MinValue) &&
      AdminTimesData != null &&
      AdminTimesData.Count > 0
    ) {
      lstScheduleDates = new List<DateTime>();
      let iLowPeriod: number =
        FreqDetails.oFrequency.LowPeriod > 0
          ? FreqDetails.oFrequency.LowPeriod
          : 1;
      let _tmpStartDate: DateTime = _StartDTTM;
      if (
        String.Equals(
          FreqDetails.oFrequency.UOM,
          ConstDurationUOM.Weeks,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        while (DateTime.LessThanOrEqualTo(_tmpStartDate.Date, _EndDTTM.Date)) {
          if (
            (_tmpStartDate.DayOfWeek == DayOfWeek.Sunday &&
              FreqDetails.oFrequency.IsSunday) ||
            (_tmpStartDate.DayOfWeek == DayOfWeek.Monday &&
              FreqDetails.oFrequency.IsMonday) ||
            (_tmpStartDate.DayOfWeek == DayOfWeek.Tuesday &&
              FreqDetails.oFrequency.IsTuesday) ||
            (_tmpStartDate.DayOfWeek == DayOfWeek.Wednesday &&
              FreqDetails.oFrequency.IsWednesday) ||
            (_tmpStartDate.DayOfWeek == DayOfWeek.Thursday &&
              FreqDetails.oFrequency.IsThursday) ||
            (_tmpStartDate.DayOfWeek == DayOfWeek.Friday &&
              FreqDetails.oFrequency.IsFriday) ||
            (_tmpStartDate.DayOfWeek == DayOfWeek.Saturday &&
              FreqDetails.oFrequency.IsSaturday)
          ) {
            lstScheduleDates.Add(_tmpStartDate.Date);
          }
          if (iLowPeriod > 1) {
            _tmpStartDate = _tmpStartDate.AddDays(iLowPeriod * 7);
          } else {
            _tmpStartDate = _tmpStartDate.AddDays(1);
          }
        }
      } else if (
        String.Equals(
          FreqDetails.oFrequency.UOM,
          ConstDurationUOM.Months,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        while (DateTime.LessThanOrEqualTo(_tmpStartDate.Date, _EndDTTM.Date)) {
          lstScheduleDates.Add(_tmpStartDate.Date);
          _tmpStartDate = _tmpStartDate.AddDays(
            iLowPeriod * CConstants.NoOfDaysInMonth
          );
        }
      } else if (
        String.Equals(
          FreqDetails.oFrequency.UOM,
          ConstDurationUOM.Years,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        while (DateTime.LessThanOrEqualTo(_tmpStartDate.Date, _EndDTTM.Date)) {
          lstScheduleDates.Add(_tmpStartDate.Date);
          _tmpStartDate = _tmpStartDate.AddYears(iLowPeriod);
        }
      } else {
        while (DateTime.LessThanOrEqualTo(_tmpStartDate.Date, _EndDTTM.Date)) {
          lstScheduleDates.Add(_tmpStartDate.Date);
          _tmpStartDate = _tmpStartDate.AddDays(1);
        }
      }
      if (lstScheduleDates != null && lstScheduleDates.Count > 0) {
        let _ScheduleDateCount: number = lstScheduleDates.Count;
        let _AdminTimesCount: number = AdminTimesData.Count;
        for (
          let _DayIndex: number = 0;
          _DayIndex < _ScheduleDateCount;
          _DayIndex++
        ) {
          for (
            let _AdminTimeIndex: number = 0;
            _AdminTimeIndex < _AdminTimesCount;
            _AdminTimeIndex++
          ) {
            let oTempScheduleDTTM: DateTime = DateTime.MinValue;
            let ts: TimeSpan = new TimeSpan();
            let bResult: boolean = false;
            if (
              AdminTimesData[_AdminTimeIndex].IsFixedEnabled &&
              !String.IsNullOrEmpty(AdminTimesData[_AdminTimeIndex].FixedTimes)
            ) {
              bResult = TimeSpan.TryParse(
                AdminTimesData[_AdminTimeIndex].FixedTimes,
                (o) => {
                  ts = o;
                }
              );
            } else if (
              !String.IsNullOrEmpty(
                AdminTimesData[_AdminTimeIndex].DruRoundTimes
              )
            ) {
              bResult = TimeSpan.TryParse(
                AdminTimesData[_AdminTimeIndex].DruRoundTimes,
                (o) => {
                  ts = o;
                }
              );
            }
            if (bResult) {
              oTempScheduleDTTM = lstScheduleDates[_DayIndex].DateTime.Add(ts);
              if (
                DateTime.GreaterThanOrEqualTo(oTempScheduleDTTM, CurrentDTTM) &&
                DateTime.LessThanOrEqualTo(oTempScheduleDTTM, _EndDTTM)
              ) {
                lstScheduleDTTM.Add(oTempScheduleDTTM);
              }
            }
          }
        }
      }
    }
    return lstScheduleDTTM;
  }
  public SetAdditionalOptionMessageForSV(
    oMultipleDosedetail: MultipleDoseDetail
  ): boolean {
    let _IsAdditionalDoseForSTAT: boolean = false;
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.ActionCode != ActivityTypes.Amend &&
      String.Equals(
        PatientContext.PrescriptionType,
        PrescriptionTypes.ForAdministration,
        StringComparison.InvariantCultureIgnoreCase
      ) &&
      !(
        PatientContext.ClerkFormViewDefaultBehavior ==
        ClerkFormViewDeftBehaviour.LaunchFormMandatory
      )
    ) {
      let FirstDose: string = String.Empty;
      let FirstDoseUom: CListItem = new CListItem();
      let FirstScheduleDTTM: DateTime = DateTime.MinValue;
      let _PrescStartDTTM: DateTime = DateTime.MinValue;
      if (
        DateTime.NotEquals(this.StartDTTM, DateTime.MinValue) &&
        DateTime.NotEquals(this.StartPrescriptionTime, DateTime.MinValue)
      ) {
        _PrescStartDTTM = this.StartDTTM.AddTime(this.StartPrescriptionTime);
      }
      if (
        oMultipleDosedetail != null &&
        DateTime.NotEquals(FormviewerCommonData.ServerDateTime, DateTime.MinValue) &&
        oMultipleDosedetail.FreqDetails != null &&
        oMultipleDosedetail.FreqDetails.oFrequency != null &&
        (String.Equals(
          oMultipleDosedetail.FreqDetails.oFrequency.UOM,
          ConstDurationUOM.Weeks,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            oMultipleDosedetail.FreqDetails.oFrequency.UOM,
            ConstDurationUOM.Months,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            oMultipleDosedetail.FreqDetails.oFrequency.UOM,
            ConstDurationUOM.Years,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          (String.Equals(
            oMultipleDosedetail.FreqDetails.oFrequency.UOM,
            ConstDurationUOM.Days,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
            DateTime.NotEquals(_PrescStartDTTM, DateTime.MinValue) &&
            DateTime.GreaterThanOrEqualTo(_PrescStartDTTM.Date, FormviewerCommonData.ServerDateTime.Date)))
      ) {
        let _IsDurationGiven: boolean =
          oMultipleDosedetail.Duration > 0 &&
          oMultipleDosedetail.DurationUOM != null;
        FirstDoseUom =
          oMultipleDosedetail.DoseUOM != null
            ? oMultipleDosedetail.DoseUOM
            : null;
        let _IsFrequencyUOMWeekOrMonthOrYear: boolean = false;
        let _tmpStepDuration: number = oMultipleDosedetail.Duration;
        let _tmpStepDurationUOM: string =
          oMultipleDosedetail.DurationUOM != null &&
          !String.IsNullOrEmpty(oMultipleDosedetail.DurationUOM.Value)
            ? oMultipleDosedetail.DurationUOM.Value
            : String.Empty;
        if (
          String.Equals(
            oMultipleDosedetail.FreqDetails.oFrequency.UOM,
            ConstDurationUOM.Weeks,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            oMultipleDosedetail.FreqDetails.oFrequency.UOM,
            ConstDurationUOM.Months,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            oMultipleDosedetail.FreqDetails.oFrequency.UOM,
            ConstDurationUOM.Years,
            StringComparison.InvariantCultureIgnoreCase
          )
        ) {
          _IsFrequencyUOMWeekOrMonthOrYear = true;
        }
        if (!_IsDurationGiven) {
          if (
            String.Equals(
              oMultipleDosedetail.FreqDetails.oFrequency.UOM,
              ConstDurationUOM.Weeks,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            _tmpStepDuration = CConstants.NO_OF_DAYSPER_WEEK + 1;
          } else if (
            String.Equals(
              oMultipleDosedetail.FreqDetails.oFrequency.UOM,
              ConstDurationUOM.Months,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            _tmpStepDuration = CConstants.NoOfDaysInMonth;
          } else if (
            String.Equals(
              oMultipleDosedetail.FreqDetails.oFrequency.UOM,
              ConstDurationUOM.Years,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            _tmpStepDuration = CConstants.NO_OF_DAYSPER_YEAR;
          }
          _tmpStepDurationUOM = ConstDurationUOM.Days;
        }
        if (
          oMultipleDosedetail.ScheduleDetailsData != null &&
          oMultipleDosedetail.ScheduleDetailsData.Count > 0
        ) {
          let oScheduleDetailsData: ObservableCollection<ScheduleDetailsCols> =
            oMultipleDosedetail.ScheduleDetailsData;
          let SchdlDoseDtl: ScheduleDoseDtl =
            this.GetFirstDoseDetailFromSVGrdData(
              FormviewerCommonData.ServerDateTime,
              oScheduleDetailsData
            );
          if (SchdlDoseDtl != null) {
            FirstScheduleDTTM = SchdlDoseDtl.FirstScheduleDTTM;
            FirstDose = SchdlDoseDtl.FirstDose;
          }
        } else {
          if (
            oMultipleDosedetail.AdminTimesData != null &&
            oMultipleDosedetail.AdminTimesData.Count > 0
          ) {
            let oScheduleDetailsSteppedVM: ScheduleDetailsSteppedVM = null;
            let oScheduleDetailsData: ObservableCollection<ScheduleDetailsCols> =
              null;
            oScheduleDetailsSteppedVM = ObjectHelper.CreateObject(
              new ScheduleDetailsSteppedVM(),
              {
                DoseUOM:
                  oMultipleDosedetail.DoseUOM != null
                    ? oMultipleDosedetail.DoseUOM.DisplayText
                    : String.Empty,
                DoseValue: oMultipleDosedetail.DoseValueDisplay,
                StartDate: oMultipleDosedetail.StartDTTM,
                DurationValue: _tmpStepDuration,
                DurationUOM: _tmpStepDurationUOM,
                EndDate: oMultipleDosedetail.EndDTTM,
                AdminTimeGrdData: oMultipleDosedetail.AdminTimesData,
                FreqDetails:
                  oMultipleDosedetail.FreqDetails != null
                    ? oMultipleDosedetail.FreqDetails
                    : null,
                IsFixedTime:
                  oMultipleDosedetail.AdminTimesData != null &&
                  oMultipleDosedetail.AdminTimesData.Count > 0 &&
                  String.Equals(
                    oMultipleDosedetail.AdminTimesData[0].FrequencyType,
                    'CC_PERIOD'
                  )
                    ? String.Equals(oMultipleDosedetail.SlotTimeMode, 'F')
                      ? true
                      : false
                    : true,
                IsDaywiseView: oMultipleDosedetail.IsDaywiseView,
                PresType: PatientContext.PrescriptionType,
                ActionCode:
                  this.oPrescitemVM != null
                    ? this.oPrescitemVM.ActionCode.ToString()
                    : String.Empty,
              }
            );
            oScheduleDetailsSteppedVM.LoadData();
            oScheduleDetailsSteppedVM.AssignDosesFromFirstToNextDays();
            oScheduleDetailsData =
              new ObservableCollection<ScheduleDetailsCols>(
                oScheduleDetailsSteppedVM.GrdData.OrderBy(
                  (oItem) => oItem.ScheduleDTTM
                )
              );
            if (
              oScheduleDetailsData != null &&
              oScheduleDetailsData.Count > 0
            ) {
              let _tmpStepStartDttm: DateTime =
                FormviewerCommonData.ServerDateTime;
              if (_IsFrequencyUOMWeekOrMonthOrYear) {
                _tmpStepStartDttm = oMultipleDosedetail.StartDTTM;
              }
              let SchdlDoseDtl: ScheduleDoseDtl =
                this.GetFirstDoseDetailFromSVGrdData(
                  _tmpStepStartDttm,
                  oScheduleDetailsData
                );
              if (
                SchdlDoseDtl != null &&
                DateTime.NotEquals(SchdlDoseDtl.FirstScheduleDTTM, DateTime.MinValue) &&
                (!_IsFrequencyUOMWeekOrMonthOrYear ||
                  (_IsFrequencyUOMWeekOrMonthOrYear &&
                    DateTime.GreaterThanOrEqualTo(SchdlDoseDtl.FirstScheduleDTTM,
                      FormviewerCommonData.ServerDateTime) &&
                    (!_IsDurationGiven ||
                     DateTime.LessThanOrEqualTo( SchdlDoseDtl.FirstScheduleDTTM,
                        oMultipleDosedetail.EndDTTM))))
              ) {
                FirstScheduleDTTM = SchdlDoseDtl.FirstScheduleDTTM;
                FirstDose = oMultipleDosedetail.LowerDose.ToString();
              }
            }
          }
        }
      }
      if (
        DateTime.NotEquals(FirstScheduleDTTM, DateTime.MinValue) &&
        this.oPrescitemVM != null &&
        this.oPrescitemVM.ParentbaseVM != null
      ) {
        this.oPrescitemVM.ParentbaseVM.IsSteppedScheduleDTTM =
          FirstScheduleDTTM;
        this.oPrescitemVM.ParentbaseVM.FirstDoseStepped = FirstDose;
        this.oPrescitemVM.ParentbaseVM.FirstSTATDoseUom = FirstDoseUom;
      }
      if (DateTime.NotEquals(FirstScheduleDTTM, DateTime.MinValue)) {
        _IsAdditionalDoseForSTAT = this.SetAdditionalOptionsVisibilityForSV(
          FormviewerCommonData.ServerDateTime,
          FirstScheduleDTTM
        );
      } else {
        this.FollowUpOrStat = String.MinValue;
        this.FollowUpStatLaunch = String.MinValue;
        this.IsFollowUpStat = false;
        this.FollowUpStatMessageVisibility = Visibility.Collapsed;
      }
    }
    return _IsAdditionalDoseForSTAT;
  }
  public RemoveOnceOnlyForSV(): boolean {
    let _bResult: boolean = false;
    if (
      this._doseType != null &&
      !String.IsNullOrEmpty(this._doseType.Value) &&
      this.DefaultDetails != null &&
      this.DefaultDetails.SteppedFrequencies != null &&
      this.DefaultDetails.SteppedFrequencies.Count > 0 &&
      (String.Compare(
        this._doseType.Value,
        DoseTypeCode.VARIABLE,
        StringComparison.OrdinalIgnoreCase
      ) == 0 ||
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.STEPPED,
          StringComparison.OrdinalIgnoreCase
        ) == 0 ||
        String.Compare(
          this._doseType.Value,
          DoseTypeCode.STEPPEDVARIABLE,
          StringComparison.OrdinalIgnoreCase
        ) == 0)
    ) {
      let FreqOnceOnly = this.DefaultDetails.SteppedFrequencies.Where(
        (freq) =>
          freq.Tag != null &&
          // ObjectHelper.GetType(freq.Tag).Equals(typeof(Array<string>)) &&
          (freq.Tag).Length > 1 &&
          String.Equals(
            (freq.Tag)[1],
            'CC_IPONCENLY',
            StringComparison.InvariantCultureIgnoreCase
          )
      )
        .Select((freq) => freq)
        .ToList();
      if (FreqOnceOnly != null && FreqOnceOnly.Count > 0) {
        let nCount: number = FreqOnceOnly.Count;
        for (let i: number = 0; i < nCount; i++) {
          this.DefaultDetails.SteppedFrequencies.Remove(FreqOnceOnly[i]);
        }
        _bResult = true;
      }
    }
    return _bResult;
  }
  private _PresItemEncounterDetail: CListItem;
  public get PresItemEncounterDetail(): CListItem {
    return this._PresItemEncounterDetail;
  }
  public set PresItemEncounterDetail(value: CListItem) {
    this._PresItemEncounterDetail = value;
  }
  private _IsClinicalEncounterPresItem: boolean = false;
  public get IsClinicalEncounterPresItem(): boolean {
    return this._IsClinicalEncounterPresItem;
  }
  public set IsClinicalEncounterPresItem(value: boolean) {
    this._IsClinicalEncounterPresItem = value;
  }
  private _OriginalRoute: CListItem;
  public get OriginalRoute(): CListItem {
    return this._OriginalRoute;
  }
  public set OriginalRoute(value: CListItem) {
    this._OriginalRoute = value;
  }
  private _OriginalInfusionType: CListItem;
  public get OriginalInfusionType(): CListItem {
    return this._OriginalInfusionType;
  }
  public set OriginalInfusionType(value: CListItem) {
    this._OriginalInfusionType = value;
  }
  public ResetStartDTTM(newStartDTTM: DateTime): void {
    this.StartDTTM = newStartDTTM;
    this.StartPrescriptionTime = newStartDTTM;
    this.StartDTTMText = this.StartDTTMDisplay();
  }
  public ResetEndDTTM(newEndDTTM: DateTime): void {
    this.EndDTTM = newEndDTTM;
  }
  private _DRCDosetype: CListItem;
  public get DRCDosetype(): CListItem {
    return this._DRCDosetype;
  }
  public set DRCDosetype(value: CListItem) {
    if (this._DRCDosetype != value) {
      this._DRCDosetype = value;
      // super.NotifyPropertyChanged("DRCDosetype");
      if (
        this._DRCDosetype != null &&
        String.Equals(
          this._DRCDosetype.Value,
          DRCDoseTypes.Systemdefined,
          StringComparison.InvariantCultureIgnoreCase
        )
      ) {
        this.IsSelectedDRCDoseTypeToolTip =
          Resource.DRCConflict.DRC_SystemDefinedTooltip;
      } else {
        this.IsSelectedDRCDoseTypeToolTip =
          this._DRCDosetype != null &&
          !String.IsNullOrEmpty(this._DRCDosetype.DisplayText)
            ? this._DRCDosetype.DisplayText
            : String.Empty;
      }
    }
  }
  private _OriginalDRCDoseType: CListItem;
  public get OriginalDRCDoseType(): CListItem {
    return this._OriginalDRCDoseType;
  }
  public set OriginalDRCDoseType(value: CListItem) {
    if (this._OriginalDRCDoseType != value) {
      this._OriginalDRCDoseType = value;
    }
  }
  private _IsChangedDRCDoseTypeForAmend: boolean = false;
  public get IsChangedDRCDoseTypeForAmend(): boolean {
    return this._IsChangedDRCDoseTypeForAmend;
  }
  public set IsChangedDRCDoseTypeForAmend(value: boolean) {
    if (this._IsChangedDRCDoseTypeForAmend != value) {
      this._IsChangedDRCDoseTypeForAmend = value;
    }
  }
  private _IsDRCDoseTypeDefaulted: boolean = false;
  public get IsDRCDoseTypeDefaulted(): boolean {
    return this._IsDRCDoseTypeDefaulted;
  }
  public set IsDRCDoseTypeDefaulted(value: boolean) {
    if (this._IsDRCDoseTypeDefaulted != value) {
      this._IsDRCDoseTypeDefaulted = value;
    }
  }
  private _IsDRCDosetypeVisible: Visibility = Visibility.Collapsed;
  public get IsDRCDosetypeVisible(): Visibility {
    return this._IsDRCDosetypeVisible;
  }
  public set IsDRCDosetypeVisible(value: Visibility) {
    if (this._IsDRCDosetypeVisible != value) {
      this._IsDRCDosetypeVisible = value;
      // super.NotifyPropertyChanged("IsDRCDosetypeVisible");
    }
  }
  private _IsSelectedDRCDoseTypeToolTip: string;
  public get IsSelectedDRCDoseTypeToolTip(): string {
    return this._IsSelectedDRCDoseTypeToolTip;
  }
  public set IsSelectedDRCDoseTypeToolTip(value: string) {
    this._IsSelectedDRCDoseTypeToolTip = value;
    // super.NotifyPropertyChanged("IsSelectedDRCDoseTypeToolTip");
  }
  private _ToSkipDRCDoseTypeSectionChange: boolean = false;
  public get ToSkipDRCDoseTypeSectionChange(): boolean {
    return this._ToSkipDRCDoseTypeSectionChange;
  }
  public set ToSkipDRCDoseTypeSectionChange(value: boolean) {
    this._ToSkipDRCDoseTypeSectionChange = value;
  }
  private _SystemdfDRCDoseTypeDisplaytxt: string;
  public get SystemdfDRCDoseTypeDisplaytext(): string {
    return this._SystemdfDRCDoseTypeDisplaytxt;
  }
  public set SystemdfDRCDoseTypeDisplaytext(value: string) {
    this._SystemdfDRCDoseTypeDisplaytxt = value;
  }
  private _SystemdfDRCDoseTypeValue: string;
  public get SystemdfDRCDoseTypeValue(): string {
    return this._SystemdfDRCDoseTypeValue;
  }
  public set SystemdfDRCDoseTypeValue(value: string) {
    this._SystemdfDRCDoseTypeValue = value;
  }
  private _IsEnableDRCDoseType: boolean = false;
  public get IsEnableDRCDoseType(): boolean {
    if (this.oPrescitemVM != null) {
      this._IsEnableDRCDoseType = this.oPrescitemVM.IsFormViewerDisable
        ? false
        : true;
    }
    return this._IsEnableDRCDoseType;
  }
  public set IsEnableDRCDoseType(value: boolean) {
    if (this._IsEnableDRCDoseType != value) {
      this._IsEnableDRCDoseType = value;
      // super.NotifyPropertyChanged("IsEnableDRCDoseType");
    }
  }
  private _GPItemDetailVisible: Visibility;
  public get GPItemDetailVisible(): Visibility {
    return this._GPItemDetailVisible;
  }
  public set GPItemDetailVisible(value: Visibility) {
    this._GPItemDetailVisible = value;
    // NotifyPropertyChanged("GPItemDetailVisible");
  }
  public DoChangesForAmend(): void {
    let DosevalueChanged: boolean = false;
    if (
      this.DoseType != null &&
      this.DoseType.Value == 'CC_TITRATED' &&
      this.oPrescitemVM != null &&
      this.oPrescitemVM.ParentbaseVM != null &&
      this.oPrescitemVM.ParentbaseVM.ActivityCode == ActivityTypes.Amend &&
      this.IsClearlstAmendList &&
      this.oPrescitemVM.PrescriptionItemOID > 0 &&
      this.oPrescitemVM.ParentbaseVM.objProcessingItemVM != null &&
      this.oPrescitemVM.ParentbaseVM.objProcessingItemVM.formViewerDetails !=
        null &&
      this.oPrescitemVM.ParentbaseVM.objProcessingItemVM.formViewerDetails
        .BasicDetails != null &&
      this.oPrescitemVM.ParentbaseVM.objProcessingItemVM.formViewerDetails
        .BasicDetails.DoseType != null &&
      this.oPrescitemVM.ParentbaseVM.objProcessingItemVM.formViewerDetails
        .BasicDetails.DoseType.Value == DoseTypeCode.TITRATED
    ) {
      if (this.oPrescitemVM.ParentbaseVM.GetDurationValueChange(this)) {
        return;
      }
      if (
        String.IsNullOrEmpty(this.OriginalDose) &&
        String.IsNullOrEmpty(this.Dose) &&
        this.OriginalDoseUOM == null &&
        this.DoseUOM != null &&
        !String.IsNullOrEmpty(this.DoseUOM.Value)
      ) {
        DosevalueChanged = true;
      } else if (
        String.IsNullOrEmpty(this.OriginalDose) &&
        !String.IsNullOrEmpty(this.Dose) &&
        this.OriginalDoseUOM != null &&
        this.DoseUOM != null &&
        !String.IsNullOrEmpty(this.DoseUOM.Value)
      ) {
        DosevalueChanged = true;
      } else if (
        String.IsNullOrEmpty(this.OriginalDose) &&
        String.IsNullOrEmpty(this.Dose) &&
        this.DoseUOM != null &&
        this.OriginalDoseUOM != null &&
        !String.Equals(
          this.DoseUOM.Value,
          this.OriginalDoseUOM.Value,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        DosevalueChanged = true;
      } else if (
        String.IsNullOrEmpty(this.OriginalDose) &&
        !String.IsNullOrEmpty(this.Dose) &&
        this.OriginalDoseUOM != null &&
        this.DoseUOM != null &&
        String.Equals(
          this.DoseUOM.Value,
          this.OriginalDoseUOM.Value,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        DosevalueChanged = true;
      } else if (
        this.Dose != null &&
        this.OriginalDose != null &&
        this.DoseUOM != null &&
        String.Equals(
          this.Dose,
          this.OriginalDose,
          StringComparison.OrdinalIgnoreCase
        ) &&
        !String.Equals(
          this.DoseUOM.Value,
          this.OriginalDoseUOM.Value,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        DosevalueChanged = true;
      } else if (
        !String.Equals(
          this.Dose,
          this.OriginalDose,
          StringComparison.OrdinalIgnoreCase
        ) &&
        this.DoseUOM != null &&
        this.OriginalDoseUOM != null &&
        String.Equals(
          this.DoseUOM.Value,
          this.OriginalDoseUOM.Value,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        DosevalueChanged = true;
      } else if (
        !String.IsNullOrEmpty(this.OriginalDose) &&
        !String.IsNullOrEmpty(this.Dose) &&
        !String.Equals(
          this.Dose,
          this.OriginalDose,
          StringComparison.OrdinalIgnoreCase
        ) &&
        this.DoseUOM != null &&
        this.OriginalDoseUOM != null &&
        !String.Equals(
          this.DoseUOM.Value,
          this.OriginalDoseUOM.Value,
          StringComparison.OrdinalIgnoreCase
        )
      ) {
        DosevalueChanged = true;
      } else if (
        String.IsNullOrEmpty(this.OriginalDose) &&
        (this.OriginalDoseUOM == null ||
          (this.OriginalDoseUOM != null &&
            String.IsNullOrEmpty(this.OriginalDoseUOM.Value))) &&
        (!String.IsNullOrEmpty(this.Dose) ||
          (this.DoseUOM != null && !String.IsNullOrEmpty(this.DoseUOM.Value)))
      ) {
        DosevalueChanged = true;
      }
      if (!DosevalueChanged) {
        this.IsFirstDoseClearForAmend = true;
        this.Dose = String.Empty;
        this.DoseUOM = null;
      }
    }
  }
  public DCAmendMessage(): void {
    if (
      this.IsClearlstAmendedFlds &&
      this.oPrescitemVM != null &&
      this.IsDCIconVisible == Visibility.Visible &&
      this.oPrescitemVM.DoseCalculationDetails != null &&
      this.oPrescitemVM.IsDoseCalcPerformed &&
      this.oPrescitemVM.bFormViwerOpened
    ) {
      let oMsgBox: iMessageBox = new iMessageBox();
      oMsgBox.Title = 'Information - Lorenzo';
      oMsgBox.Height = 140;
      oMsgBox.Width = 350;
      oMsgBox.MessageButton = MessageBoxButton.OK;
      oMsgBox.IconType = MessageBoxType.Information;
      oMsgBox.Message = Resource.MedicationForm.DCAmendMsg;
      this.oPrescitemVM.DoseCalculationDetails = null;
      this.oPrescitemVM.oDoseCalcDefault = null;
      this.oPrescitemVM.IsDoseCalcPerformed = false;
      if (this.bIsAmend) {
        this.oPrescitemVM.IsDoseCalcPerformedInAmend = true;
        this.oPrescitemVM.IsDoseCalcInfo = false;
        this.IsDoseCalcExist = false;
      }
      oMsgBox.Show();
    }
  }
  public SetDCIconInFV(): void {
    let dLatHWUpdatedDTTM: DateTime = DateTime.MinValue;
    if (DateTime.GreaterThanOrEqualTo(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)) {
      dLatHWUpdatedDTTM = PatientContext.PatientHeightDTTM;
    } else if (
      DateTime.LessThan(PatientContext.PatientHeightDTTM, PatientContext.PatientWeightDTTM)
    ) {
      dLatHWUpdatedDTTM = PatientContext.PatientWeightDTTM;
    }
    this.DcIconTypeId = 0;
    if (
      this.oPrescitemVM != null &&
      this.oPrescitemVM.DoseCalculationDetails != null
    ) {
      if (
        !Common.IsClosedEncounter() &&
       DateTime.GreaterThan( dLatHWUpdatedDTTM,
          this.oPrescitemVM.DoseCalculationDetails.CalculatedDTTM) &&
        MedicationCommonProfileData.PrescribeConfig != null &&
        MedicationCommonProfileData.PrescribeConfig.HeightWeightChangeAlert
      ) {
        this.DCIconName = MedImage.GetPath(MedImages.DCIconWithAlert);
        this.DcIconTypeId = 2;
      } else {
        this.DCIconName = MedImage.GetPath(MedImages.DCIcon);
        this.DcIconTypeId = 1;
      }
    }
  }
  public GetAdminTimeRequiredForPRN(): boolean {
    let _IsAdminTimeReqPRN: boolean = false;
    if (this.oPrescitemVM != null) {
      if (
        ProfileData.ScheduleConfig != null &&
        ProfileData.ScheduleConfig.AdminTimeReqforPRN &&
        (this.oPrescitemVM.ActionCode == ActivityTypes.Prescribe ||
          this.oPrescitemVM.ActionCode == ActivityTypes.Reorder)
      ) {
        _IsAdminTimeReqPRN = true;
      } else if (this.oPrescitemVM.ActionCode == ActivityTypes.Amend) {
        _IsAdminTimeReqPRN = !this.IsNoAdminTimeForPRN;
      }
    }
    return _IsAdminTimeReqPRN;
  }
}
export class OriginalValues {
  public StartDTTM: DateTime = DateTime.MinValue;
  public Dose: string;
  public DoseUOM: CListItem;
  public AdminMethod: CListItem;
}
export class IndiactionProcessDetails {
  public Frequency: CListItem;
  public DosageForm: CListItem;
}
export class InfusionVM extends ClonableViewModelBase {
  private _Volume: string;
  private profile: ProfileFactoryType = new ProfileFactoryType();
  private fluidVolume: string;
  private fluidVolumeUOMOID: number = 0;
  private infusionPeriod: string = String.Empty;
  private infusionPeriodUOMOID: number = 0;
  private topUpDose: string;
  private topUpDoseUOMOID: number = 0;
  private rate: string;
  private parentPrescriptionItemOID: number = 0;
  private backgroundRate: string;
  private backgroundRateUOMOID: number = 0;
  private lockOutPeriod: string;
  private lockOutPeriodUOMOID: number = 0;
  private iNFTYCODE: string;
  private lumen: string;
  private deliveryDevice: CListItem;
  private displayOrder: number = 0;
  private isOnGoing: string;
  private backgroundRateDenaminatorUOMOID: number = 0;
  private maxDose: string;
  private fluidPrescribableItemListOID: number = 0;
  private _fluidfreetext: string = String.Empty;
  private bolus: string;
  private _isInfusionTypeMandatory: boolean = true;
  private _isRouteMandatory: boolean = true;
  private _isDoseTypeMandatory: boolean = true;
  private _isFrequencyMandatory: boolean = true;
  private _isBolusMandatory: boolean = true;
  private _islockoutMandatory: boolean = true;
  private _isStationeryTypeMandatory: boolean = true;
  private _isBrandMandatory: boolean = true;
  private _isInfusionPeriod: boolean = true;
  private _isFluidMandatory: boolean = true;
  private _isMedclerkSourceVisible: Visibility = Visibility.Collapsed;
  private _IsdischargeVisible: Visibility = Visibility.Collapsed;
  private _IsTreatMentVisible: Visibility = Visibility.Collapsed;
  private boosterdose: string;
  private _isenableDeliverydevice: boolean = true;
  private _isenableInfusionRate: boolean = true;
  private _isenableInfusionRateforLabel: boolean = true;
  private _isenableInfusionratenumuom: boolean = true;
  private _isenableInfusionratenumuomlbl: boolean = true;
  private _isenableInfusionrateDenominatoruom: boolean = true;
  private _isenableInfusionrateCalculator: boolean = true;
  private _fluidselected: string;
  private _isChksequentialPresitem: boolean = false;
  private _isenableChksequentialPresitem: boolean = true;
  private _isContisequenceDisplayordervisi: Visibility = Visibility.Collapsed;
  private _prescriptionItemNumber: number = 0;
  private _sequentialItemOrder: number = 0;
  private _isSequentialPrescribing: boolean = false;
  private _isChkAppendSequencePrescribing: boolean = false;
  private _isDisplayOrderSeqPresc: string;
  private _isSequentiallinkvisi: Visibility = Visibility.Collapsed;
  private _infusioncalEnb: boolean = true;
  private _fluidselecteditem: CListItem;
  private _volumeuom: CListItem;
  private _lockoutduration: CListItem;
  private _infratenumeratoruom: CListItem;
  private _infrateDenominatoruom: CListItem;
  private _backgroundratenumeratoruom: CListItem;
  private _backgroundrateDenominatoruom: CListItem;
  private _infusionperioduom: CListItem;
  private _bolusuom: CListItem;
  private _fluidSelectvalue: CListItem;
  private _infusionRateRndto: CListItem = null;
  private _boosterdoseuom: CListItem;
  private _infusionRateRndtoList: ObservableCollection<CListItem>;
  private _boosterdoseUOMList: ObservableCollection<CListItem>;
  private deliveryDeviceList: ObservableCollection<CListItem>;
  private _infusionratenumuom: ObservableCollection<CListItem>;
  private _infusionratedenouom: ObservableCollection<CListItem>;
  private _infusionperioduomList: ObservableCollection<CListItem>;
  private _lockoutdurationList: ObservableCollection<CListItem>;
  private __volumeUOM: ObservableCollection<CListItem>;
  private __bolusUOM: ObservableCollection<CListItem>;
  private _fluidList: ObservableCollection<CListItem>;
  private _targetLowerSatRange: string;
  private _targetUpperSatRange: string;
  private _PreviousRate: string;
  private _PreviousRateDrUOMName: string;
  private _PreviousRateUOMName: string;
  private _PreviousBgRate: string;
  private _PreviousBgRateDrUOMName: string;
  private _PreviousBgRateUOMName: string;
  private _prescribedDoseValue: string;
  private _prescribedDoseUOMValue: CListItem;
  private _infusionRateValue: string;
  private _infusionRateNumValue: CListItem;
  private _infusionRateDenoValue: CListItem;
  private _calculatedInfusionrateValue: string;
  private _calculatedInfusionrateUOM: string;
  private _infusonraterndtovalue: CListItem;
  private _infusratevisi: Visibility = Visibility.Collapsed;
  private _InfuMonitoringperiodVisi: Visibility = Visibility.Collapsed;
  private _InfBoosterDoseVisi: Visibility = Visibility.Collapsed;
  private _InfInfusionRateVisi: Visibility = Visibility.Collapsed;
  private _isfreqvisible: Visibility = Visibility.Collapsed;
  private _isinfusratemand: boolean = true;
  private isOngoingChecked: boolean = false;
  public _isSelProdMandatory: Visibility = Visibility.Collapsed;
  public _isOxygen: boolean = false;
  private _istarsatrangevisible: Visibility = Visibility.Collapsed;
  private _isConcenmandatory: boolean = false;
  private _isConcenEnabled: boolean = false;
  private routeSeq: CListItem;
  private _inSequentialRouteChanged: boolean = false;
  private currentSeqOrder: number = 0;
  private _isMandatoryStartdtSeq: boolean = true;
  private _isCurrentgrdResolveIndex: number = 0;
  private totalCountSeq: number = 0;
  private _isAddSequential: Visibility = Visibility.Visible;
  private _isInfusionRateChangedSequential: boolean = false;
  private _isChkNextSequencePrescribing: boolean = false;
  private _isDisCancelSequential: boolean = false;
  private _isDisCanPntPresitemOIDChangedSeq: number = 0;
  public oBasicDetailsVM: BasicDetailsVM;
  public PrevSequentialPrescribingData: InfContinousSequentail;
  private _isenableInfusionType: boolean = true;
  private _isExistSubSequential: number = 0;
  private continousAddOptions: string;
  private _isAdditionalOption: Visibility = Visibility.Visible;
  private _isInfusionAlertShown: boolean = false;
  private _isenableOngoingChecked: boolean = true;
  private _isenablelblOngoingYes: boolean = true;
  private _SubSequentialItemOrderno: number = 0;
  private _isEstimatedStopRecalculationRequired: boolean = false;
  private _humidificationList: ObservableCollection<CListItem>;
  private _IsTargetrangeMandatory: boolean = true;
  private _humidification: CListItem;
  private Setconcerndevice: boolean = false;
  public RoundOffCode: string;
  public RoundOffText: string;
  //public delegate void AuthoriseTVDisableDelegate(string sIsauthorise);
  public AuthoriseTVDisableEvent: Function;
  public FluidIdentifyingType: string;
  public MoreOptionKey: string = String.Empty;
  public IsItemAddedToResolveGrid: boolean = false;
  private _IsManageSequenceVisible: Visibility = Visibility.Collapsed;
  private _SelectedPrecedingInfusionItemStatusText: string = String.Empty;
  private _SelectedPrecedingInfusionItemStatusVisible: Visibility =
    Visibility.Collapsed;
  private _IsEnableManageSequence: boolean = true;
  private _SelectedSequenceName: CListItem;
  private _IsEnablePrecedingInfusionItem: boolean = true;
  private _PrecedingInfusionItemlst: ObservableCollection<CListItem>;
  private _SelectedPrecedingInfusionItem: CListItem;
  private _IsManageSequenceLinkVisible: Visibility = Visibility.Collapsed;
  private _IsEnableManageSequenceLink: boolean = false;
  private _SequenceNamelst: ObservableCollection<CListItem>;
  private _GroupSequenceNo: number = 0;
  private _SequenceName: string;
  private _ItemSequenceNo: number = 0;
  public IsFirstItem: boolean = false;
  constructor();
  constructor(oBasicDtlVM?: BasicDetailsVM);
  constructor(oBasicDtlVM?: BasicDetailsVM) {
    super();
    switch (arguments.length) {
      case 1:
        this.oBasicDetailsVM = oBasicDtlVM;
        this.FillDeliveryDevice();
        this.FillConcenWithDeliveryDevice();
        break;
    }
  }
  private FillDeliveryDevice(): void {
    if (
      ProfileData.InfusionPresConfig != null &&
      ProfileData.InfusionPresConfig.objInfusDeliveryDevice != null &&
      ProfileData.InfusionPresConfig.objInfusDeliveryDevice.Count > 0 &&
      this.DeliveryDeviceList == null
    ) {
      this.DeliveryDeviceList = new ObservableCollection<CListItem>();
      for (
        let i: number = 0;
        i < ProfileData.InfusionPresConfig.objInfusDeliveryDevice.Count;
        i++
      ) {
        this.DeliveryDeviceList.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              ProfileData.InfusionPresConfig.objInfusDeliveryDevice[i]
                .DeviceName,
            Value:
              ProfileData.InfusionPresConfig.objInfusDeliveryDevice[i]
                .DeviceName,
            Tag: ProfileData.InfusionPresConfig.objInfusDeliveryDevice[i]
              .IsAllowBoosterDose,
          })
        );
      }
    }
  }
  public FillInfusionRateBasedOnDD(): void {
    let IsSteppedDose: boolean = false;
    this.IsinfusRateBasedOnDD = false;
    this.IsinfusRateBasedOnDDforClerking = false;
    this.IsVolumeMandatory = false;
    this.IsConcentrationMandatory = false;
    this.IsDelDevSelectedforConditional = false;
    if (String.IsNullOrEmpty(this.FluidFreetext)) {
      this.IsConcentrationVisible = Visibility.Collapsed;
      this.IsVolumeVisible = Visibility.Collapsed;
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking
      ) != 0 &&
      this.oBasicDetailsVM != null
    ) {
      if (
        ((this.oBasicDetailsVM.InfusionType != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
          (String.Compare(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS
          ) == 0 ||
            String.Compare(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) == 0 ||
            String.Compare(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.FLUID
            ) == 0)) ||
          this.oBasicDetailsVM.IsInfContiniousFormLoaded) &&
        ProfileData.InfusionPresConfig != null &&
        this.DeliveryDevice != null
      ) {
        let InfusionrateNUMDEMUOM =
          ProfileData.InfusionPresConfig.objInfusDeliveryDevice
            .Where(
              (UOMDEMO) => UOMDEMO.DeviceName == this.deliveryDevice.DisplayText
            )
            .Select((UOMDEMO) => UOMDEMO)
            .FirstOrDefault();
        if (
          (this.oBasicDetailsVM.DoseType != null &&
            String.Compare(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.STEPPED,
              StringComparison.OrdinalIgnoreCase
            ) == 0) ||
          (this.oBasicDetailsVM.DoseType != null &&
            String.Compare(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.VARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0) ||
          (this.oBasicDetailsVM.DoseType != null &&
            String.Compare(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE,
              StringComparison.OrdinalIgnoreCase
            ) == 0)
        ) {
          IsSteppedDose = true;
        }
        if (InfusionrateNUMDEMUOM != null && !IsSteppedDose) {
          let oItemNum: CListItem = new CListItem();
          let oItemDenom: CListItem = new CListItem();
          oItemNum.DisplayText = InfusionrateNUMDEMUOM.InfusionRateNumUOMCode;
          oItemNum.Value = InfusionrateNUMDEMUOM.InfusionRateNumUOMOID;
          if (String.Equals(oItemNum.DisplayText, InfusionVolume.ml)) {
            oItemNum.Tag = CConstants.ml;
          }
          oItemDenom.DisplayText =
            InfusionrateNUMDEMUOM.InfusionRateDenomUOMCode;
          oItemDenom.Value = InfusionrateNUMDEMUOM.InfusionRateDenomUOMOID;
          if (
            this.oBasicDetailsVM.DoseType != null &&
            !String.IsNullOrEmpty(this.oBasicDetailsVM.DoseType.Value)
          ) {
            if (
              String.Compare(
                this.oBasicDetailsVM.DoseType.Value,
                DoseTypeCode.NORMAL,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              if (
                oItemNum != null &&
                !String.IsNullOrEmpty(oItemNum.DisplayText)
              ) {
                this.IsinfusRateBasedOnDD = true;
                if (
                  !String.Equals(
                    this.oBasicDetailsVM.IdentifyingType,
                    CConstants.NONCATALOGUEITEM
                  )
                ) {
                  this.RestoreInfusionNumerator(true, false);
                }
                this.InfRateNumeratorUom = oItemNum;
                this.IsenableInfusionratenumuom =
                  this.InfRateNumeratorUom.Value != null &&
                  this.InfRateNumeratorUom.Value.length > 0
                    ? false
                    : true;
              }
              if (
                oItemDenom != null &&
                !String.IsNullOrEmpty(oItemDenom.DisplayText)
              ) {
                this.IsinfusRateBasedOnDD = true;
                this.InfRateDinominatorUom = oItemDenom;
                this.IsenableInfusionrateDenominatoruom =
                  this.InfRateDinominatorUom.Value != null &&
                  this.InfRateDinominatorUom.Value.length > 0
                    ? false
                    : true;
              }
              if (
                !this.IsinfusRateBasedOnDD &&
                ((this.oBasicDetailsVM.InfusionType == null &&
                  this.oBasicDetailsVM.IsInfContiniousFormLoaded) ||
                  String.Compare(
                    this.oBasicDetailsVM.InfusionType.Value,
                    InfusionTypesCode.CONTINUOUS
                  ) == 0 ||
                  String.Compare(
                    this.oBasicDetailsVM.InfusionType.Value,
                    InfusionTypesCode.SINGLEDOSEVOLUME
                  ) == 0)
              ) {
                if (this.oBasicDetailsVM.IsClearlstAmendedFlds) {
                  this.LowConcentration = String.Empty;
                  this.UpperConcentration = String.Empty;
                  this.LowConcentrationUOM = null;
                  this.UpperConcentrationUOM = null;
                  this.FluidVolume = String.Empty;
                  this.VolumeUOM = null;
                  this.InfRateDinominatorUom = null;
                  this.InfRateNumeratorUom = null;
                }
                this.IsenableInfusionrateDenominatoruom = true;
                this.IsenableInfusionratenumuom = true;
              }
              if (this.IsinfusRateBasedOnDD) {
                if (
                  this.oBasicDetailsVM.InfusionType != null &&
                  !String.IsNullOrEmpty(
                    this.oBasicDetailsVM.InfusionType.Value
                  ) &&
                  String.Compare(
                    this.oBasicDetailsVM.InfusionType.Value,
                    InfusionTypesCode.CONTINUOUS,
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
                ) {
                  this.IsConcentrationMandatory = false;
                  this.IsConcentrationVisible = Visibility.Visible;
                }
                if (
                  this.oBasicDetailsVM.InfusionType != null &&
                  !String.IsNullOrEmpty(
                    this.oBasicDetailsVM.InfusionType.Value
                  ) &&
                  String.Compare(
                    this.oBasicDetailsVM.InfusionType.Value,
                    InfusionTypesCode.SINGLEDOSEVOLUME,
                    StringComparison.CurrentCultureIgnoreCase
                  ) == 0
                ) {
                  this.IsVolumeMandatory = true;
                  this.IsVolumeVisible = Visibility.Visible;
                }
              }
            } else if (
              String.Compare(
                this.oBasicDetailsVM.DoseType.Value,
                DoseTypeCode.CONDITIONAL,
                StringComparison.OrdinalIgnoreCase
              ) == 0
            ) {
              if (
                oItemDenom != null &&
                !String.IsNullOrEmpty(oItemNum.DisplayText) &&
                !String.IsNullOrEmpty(oItemDenom.DisplayText)
              ) {
                this.IsDelDevSelectedforConditional = true;
                this.IsConcentrationMandatory = false;
                this.IsConcentrationVisible = Visibility.Visible;
              }
            }
          }
        } else {
          this.IsinfusRateBasedOnDD = false;
        }
      } else {
        this.IsinfusRateBasedOnDD = false;
        this.InfRateDinominatorUom = null;
        this.InfRateNumeratorUom = null;
        if (
          String.Equals(
            this.oBasicDetailsVM.DoseType.Value,
            DoseTypeCode.CONDITIONAL,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.IsenableInfusionrateDenominatoruom = false;
          this.IsenableInfusionratenumuom = false;
        } else {
          this.IsenableInfusionrateDenominatoruom = true;
          this.IsenableInfusionratenumuom = true;
        }
        if (
          this.deliveryDevice == null &&
          String.IsNullOrEmpty(this.FluidFreetext) &&
          this.oBasicDetailsVM.InfusionType != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
          String.Compare(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.SINGLEDOSEVOLUME
          ) == 0
        ) {
          this.FluidVolume = String.Empty;
          this.VolumeUOM = null;
        }
      }
      if (
        this.oBasicDetailsVM.oPrescitemVM.ActionCode != ActivityTypes.Amend &&
        this.oBasicDetailsVM.oPrescitemVM.ActionCode != ActivityTypes.Reorder
      ) {
        //Not Required for LHS. To be Re-Visited.
        this.oBasicDetailsVM.oPrescitemVM.LaunchInfusionrateCalculator(false);
      }
    } else {
      this.IsinfusRateBasedOnDD = false;
    }
    if (
      this.oBasicDetailsVM.InfusionType != null &&
      !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
      String.Compare(
        this.oBasicDetailsVM.InfusionType.Value,
        InfusionTypesCode.SINGLEDOSEVOLUME,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      if (
        !this.IsinfusRateBasedOnDD &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.CheckAllThreeAvailable()
      ) {
        this.oBasicDetailsVM.InfusionDetails.IsenableInfusionrateCalculator =
          true;
      } else {
        this.oBasicDetailsVM.InfusionDetails.IsenableInfusionrateCalculator =
          false;
      }
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking
      ) == 0 &&
      this.DeliveryDevice != null &&
      ProfileData.InfusionPresConfig != null
    ) {
      let InfusionrateNUMDEMUOM =
        ProfileData.InfusionPresConfig.objInfusDeliveryDevice
          .Where(
            (UOMDEMO) => UOMDEMO.DeviceName == this.deliveryDevice.DisplayText
          )
          .Select((UOMDEMO) => UOMDEMO)
          .FirstOrDefault();
      if (
        InfusionrateNUMDEMUOM != null &&
        !String.IsNullOrEmpty(InfusionrateNUMDEMUOM.InfusionRateNumUOMCode) &&
        !String.IsNullOrEmpty(InfusionrateNUMDEMUOM.InfusionRateDenomUOMCode)
      ) {
        this.IsinfusRateBasedOnDDforClerking = true;
      }
      if (
        this.IsinfusRateBasedOnDDforClerking &&
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        String.Compare(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        this.IsConcentrationVisible = Visibility.Visible;
      }
      if (
        this.IsinfusRateBasedOnDDforClerking &&
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        String.Compare(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0
      ) {
        this.IsVolumeVisible = Visibility.Visible;
      }
    }
  }
  private FillConcenWithDeliveryDevice(): void {
    if (
      ProfileData.InfusionPresConfig != null &&
      ProfileData.InfusionPresConfig.objOxygenMasks.Count > 0 &&
      this.ConcentrationsList == null
    ) {
      this.ConcentrationsList = new ObservableCollection<CListItem>();
      this.MedicalgasDeliveryList = new ObservableCollection<CListItem>();
      for (
        let i: number = 0;
        i < ProfileData.InfusionPresConfig.objOxygenMasks.Count;
        i++
      ) {
        if (
          ProfileData.InfusionPresConfig.objOxygenMasks[i].Concentration != 0
        ) {
          this.ConcentrationsList.Add(
            ObjectHelper.CreateObject(new CListItem(), {
              DisplayText:
                ProfileData.InfusionPresConfig.objOxygenMasks[
                  i
                ].Concentration.ToString(),
              Value:
                ProfileData.InfusionPresConfig.objOxygenMasks[
                  i
                ].Concentration.ToString()
            })
          );
        }
        this.MedicalgasDeliveryList.Add(
          ObjectHelper.CreateObject(new CListItem(), {
            DisplayText:
              ProfileData.InfusionPresConfig.objOxygenMasks[i].OxyDeviceName,
            Value:
              ProfileData.InfusionPresConfig.objOxygenMasks[i].OxyDeviceName,
          })
        );
      }
    }
  }
  public RestoreInfusionNumerator(IsAdd: boolean, IsRemove: boolean): void {
    let TempInfRateNumeratorUOM: ObservableCollection<CListItem> =
      new ObservableCollection<CListItem>();
    TempInfRateNumeratorUOM = this.InfRateNumeratorUOM;
    if (this.VolumeUOMList != null && this.VolumeUOMList.Count > 0) {
      this.VolumeUOMList.forEach((oItem) => {
        let oList: CListItem = ObjectHelper.CreateObject(new CListItem(), {
          DisplayText: oItem.DisplayText,
          Value: oItem.Value.ToString(),
          Tag: oItem.Tag,
        });
        if (
          IsAdd &&
          TempInfRateNumeratorUOM != null &&
          TempInfRateNumeratorUOM.Where(
            (x) =>
              x.Tag != null &&
              oItem.Tag != null &&
              x.Tag.ToString().Contains(oItem.Tag.ToString())
          ).Count() == 0
        ) {
          TempInfRateNumeratorUOM.Add(oList);
        }
        if (
          IsRemove &&
          TempInfRateNumeratorUOM != null &&
          TempInfRateNumeratorUOM.Where(
            (x) =>
              x.Tag != null &&
              oItem.Tag != null &&
              x.Tag.ToString().Contains(oItem.Tag.ToString())
          ).Count() > 0 &&
          TempInfRateNumeratorUOM.Count > 1 &&
          !this.IsinfusRateBasedOnDD &&
          !this.isinfusRateBasedOnDDforClerking &&
          (this.oBasicDetailsVM.DoseUOM == null ||
            (this.oBasicDetailsVM.DoseUOM != null &&
              this.oBasicDetailsVM.DoseUOM.Tag != null &&
              !this.oBasicDetailsVM.DoseUOM.Tag.ToString().Contains(
                CConstants.ml
              )))
        ) {
          for (
            let iCount: number = 0;
            iCount <= TempInfRateNumeratorUOM.Count - 1;
            iCount++
          ) {
            if (
              String.Equals(TempInfRateNumeratorUOM[iCount].Value, oItem.Value)
            ) {
              TempInfRateNumeratorUOM.RemoveAt(iCount);
            }
          }
        }
      });
      this.InfRateNumeratorUOM = TempInfRateNumeratorUOM;
    }
  }
  private _InfSequentialRateChanged: boolean = false;
  public get IsInfSequentialRateChanged(): boolean {
    return this._InfSequentialRateChanged;
  }
  public set IsInfSequentialRateChanged(value: boolean) {
    if (this._InfSequentialRateChanged != value) {
      this._InfSequentialRateChanged = value;
      // super.NotifyPropertyChanged("IsInfSequentialRateChanged");
    }
  }
  private _IsInfTypeInVisible: Visibility;
  public get IsInfTypeInVisible(): Visibility {
    return this._IsInfTypeInVisible;
  }
  public set IsInfTypeInVisible(value: Visibility) {
    this._IsInfTypeInVisible = value;
    // NotifyPropertyChanged("IsInfTypeInVisible");
  }
  public get IsTarSatrangevisible(): Visibility {
    return this._istarsatrangevisible;
  }
  public set IsTarSatrangevisible(value: Visibility) {
    this._istarsatrangevisible = value;
    // NotifyPropertyChanged("IsTarSatrangevisible");
  }
  private _IsAdminInstructionvisible: Visibility = Visibility.Visible;
  public get IsAdminInstructionvisible(): Visibility {
    return this._IsAdminInstructionvisible;
  }
  public set IsAdminInstructionvisible(value: Visibility) {
    this._IsAdminInstructionvisible = value;
    // NotifyPropertyChanged("IsAdminInstructionvisible");
  }
  private _isFluidVisible: Visibility = Visibility.Collapsed;
  public get isFluidVisible(): Visibility {
    if (
      PatientContext.IsINFUSIONON &&
      this.oBasicDetailsVM != null &&
      this.oBasicDetailsVM.InfusionType != null &&
      !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
      String.Equals(
        this.oBasicDetailsVM.InfusionType.Value,
        InfusionTypesCode.FLUID
      )
    ) {
      this._isFluidVisible = Visibility.Collapsed;
    }
    return this._isFluidVisible;
  }
  public set isFluidVisible(value: Visibility) {
    this._isFluidVisible = value;
    // NotifyPropertyChanged("isFluidVisible");
  }
  private _IsShowRouteDiscrepency: boolean = false;
  public get IsShowRouteDiscrepency(): boolean {
    return this._IsShowRouteDiscrepency;
  }
  public set IsShowRouteDiscrepency(value: boolean) {
    this._IsShowRouteDiscrepency = value;
    // NotifyPropertyChanged("IsShowRouteDiscrepency");
  }
  public get IsConcenMandatory(): boolean {
    return this._isConcenmandatory;
  }
  public set IsConcenMandatory(value: boolean) {
    if (value != this._isConcenmandatory) {
      this._isConcenmandatory = value;
      // NotifyPropertyChanged("IsConcenMandatory");
    }
  }
  public get IsConcenEnabled(): boolean {
    return (
      this._isConcenEnabled &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsConcenEnabled(value: boolean) {
    if (value != this._isConcenEnabled) {
      this._isConcenEnabled = value;
      // NotifyPropertyChanged("IsConcenEnabled");
    }
  }
  private _tooltipPrescribedDoseValue: string;
  public get TooltipPrescribedDoseValue(): string {
    return this._tooltipPrescribedDoseValue;
  }
  public set TooltipPrescribedDoseValue(value: string) {
    if (value != this._tooltipPrescribedDoseValue) {
      this._tooltipPrescribedDoseValue = value;
      // NotifyPropertyChanged("TooltipPrescribedDoseValue");
    }
  }
  private _tooltipPrescribedVolumeValue: string;
  public get TooltipPrescribedVolumeValue(): string {
    return this._tooltipPrescribedVolumeValue;
  }
  public set TooltipPrescribedVolumeValue(value: string) {
    if (value != this._tooltipPrescribedVolumeValue) {
      this._tooltipPrescribedVolumeValue = value;
      // NotifyPropertyChanged("TooltipPrescribedVolumeValue");
    }
  }
  private _tooltipInfusionPeriodValue: string;
  public get TooltipInfusionPeriodValue(): string {
    return this._tooltipInfusionPeriodValue;
  }
  public set TooltipInfusionPeriodValue(value: string) {
    if (value != this._tooltipInfusionPeriodValue) {
      this._tooltipInfusionPeriodValue = value;
      // NotifyPropertyChanged("TooltipInfusionPeriodValue");
    }
  }
  private _concentration: CListItem = new CListItem();
  public get Concentration(): CListItem {
    return this._concentration;
  }
  public set Concentration(value: CListItem) {
    if (value != this._concentration) {
      this._concentration = value;
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('Concentration')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('Concentration');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        this.oBasicDetailsVM.ClearPrescribedQuantity();
      }
      // NotifyPropertyChanged("Concentration");
      if (!this.Setconcerndevice) {
        this.IsSelectedDelivery = false;
        this.IsSelectedConcen = true;
        if (this._concentration != null) {
          this.SetDeliveryConcern(this._concentration.DisplayText);
        }
      } else this.Setconcerndevice = false;
    }
  }
  private _concentrationslist: ObservableCollection<CListItem>;
  public get ConcentrationsList(): ObservableCollection<CListItem> {
    return this._concentrationslist;
  }
  public set ConcentrationsList(value: ObservableCollection<CListItem>) {
    this._concentrationslist = value;
    // NotifyPropertyChanged("Concentrations");
  }
  private _medicalgasdeliverylist: ObservableCollection<CListItem>;
  public get MedicalgasDeliveryList(): ObservableCollection<CListItem> {
    return this._medicalgasdeliverylist;
  }
  public set MedicalgasDeliveryList(value: ObservableCollection<CListItem>) {
    this._medicalgasdeliverylist = value;
    // NotifyPropertyChanged("MedicalgasDeliveryList");
  }
  private _medicalgasdelivery: CListItem = new CListItem();
  public get Medicalgasdelivery(): CListItem {
    return this._medicalgasdelivery;
  }
  public set Medicalgasdelivery(value: CListItem) {
    if (this._medicalgasdelivery != value) {
      this._medicalgasdelivery = value;
      // NotifyPropertyChanged("Medicalgasdelivery");
      if (!this.Setconcerndevice) {
        this.IsSelectedDelivery = true;
        this.IsSelectedConcen = false;
        if (this._medicalgasdelivery != null) {
          this.SetDeliveryConcern(this._medicalgasdelivery.DisplayText);
        }
      } else this.Setconcerndevice = false;
    }
  }
  public get IsTargetrangeMandatory(): boolean {
    return this._IsTargetrangeMandatory;
  }
  public set IsTargetrangeMandatory(value: boolean) {
    if (this._IsTargetrangeMandatory != value) {
      this._IsTargetrangeMandatory = value;
      // NotifyPropertyChanged("IsTargetrangeMandatory");
    }
  }
  private _InfInterMitScheduleDTTMs: ObservableCollection<DateTime>;
  public get InfInterMitScheduleDTTMs(): ObservableCollection<DateTime> {
    return this._InfInterMitScheduleDTTMs;
  }
  public set InfInterMitScheduleDTTMs(value: ObservableCollection<DateTime>) {
    this._InfInterMitScheduleDTTMs = value;
    // NotifyPropertyChanged("InfInterMitScheduleDTTMs");
  }
  private _concentrationfreetext: string;
  public get ConcentrationFreeText(): string {
    return this._concentrationfreetext;
  }
  public set ConcentrationFreeText(value: string) {
    if (value != this._concentrationfreetext) {
      if (
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.oPrescitemVM != null &&
          this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
            ActivityTypes.Reorder &&
          this.oBasicDetailsVM.actualClerkingValues != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.actualClerkingValues.ConcentrationFreeText
          ) &&
          String.Compare(
            this.oBasicDetailsVM.actualClerkingValues.ConcentrationFreeText,
            value
          ) != 0) ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.oPrescitemVM != null &&
          this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
      ) {
        this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
        this.oBasicDetailsVM.SetOnadmissionValue(
          value,
          this._concentrationfreetext
        );
      }
      this._concentrationfreetext = value;
      // NotifyPropertyChanged("ConcentrationFreeText");
    }
  }
  public FillGasDeliveryDevice(): void {
    if (
      ProfileData.InfusionPresConfig != null &&
      ProfileData.InfusionPresConfig.objOxygenMasks != null &&
      ProfileData.InfusionPresConfig.objOxygenMasks.Count > 0
    ) {
      for (
        let i: number = 0;
        i < ProfileData.InfusionPresConfig.objOxygenMasks.Count;
        i++
      ) {
        if (
          this.ConcentrationFreeText ==
          ProfileData.InfusionPresConfig.objOxygenMasks[
            i
          ].Concentration.ToString()
        )
          this.DeliveryDeviceFreetext =
            ProfileData.InfusionPresConfig.objOxygenMasks[
              i
            ].OxyDeviceName.ToString();
      }
    }
  }
  public SetDeliveryConcern(Selectdeliveryconcen: string): void {
    if (
      !String.IsNullOrEmpty(Selectdeliveryconcen) &&
      (this.IsSelectedDelivery || this.IsSelectedConcen)
    ) {
      let Concenwithdeliverydevice =
        ProfileData.InfusionPresConfig.objOxygenMasks
          .Where(
            (c) =>
              c.Concentration.ToString() == Selectdeliveryconcen ||
              c.OxyDeviceName == Selectdeliveryconcen
          )
          .Select((s) => s)
          .FirstOrDefault();
      if (this.IsSelectedDelivery) {
        if (
          Concenwithdeliverydevice != null &&
          Concenwithdeliverydevice.Concentration == 0
        ) {
          this.Concentration = null;
          this.ConcentrationFreeText = String.Empty;
        }
        if (
          this.Concentration == null ||
          (this.Concentration != null &&
            !String.IsNullOrEmpty(this.Medicalgasdelivery.DisplayText) &&
            !String.Equals(
              this.Concentration.DisplayText,
              Concenwithdeliverydevice.Concentration.ToString(),
              StringComparison.CurrentCultureIgnoreCase
            ))
        ) {
          this.Setconcerndevice = true;
          this.Concentration = InfusionVM.GetSelectedItem(
            Concenwithdeliverydevice.Concentration.ToString(),
            this.ConcentrationsList
          );
        }
        this.Setconcerndevice = false;
      } else if (this.IsSelectedConcen) {
        if (
          this.Medicalgasdelivery == null ||
          (this.Medicalgasdelivery != null &&
            !String.IsNullOrEmpty(this.Concentration.DisplayText) &&
            !String.Equals(
              this.Medicalgasdelivery.DisplayText,
              Concenwithdeliverydevice.OxyDeviceName,
              StringComparison.CurrentCultureIgnoreCase
            ))
        ) {
          this.Setconcerndevice = true;
          this.Medicalgasdelivery = InfusionVM.GetSelectedItem(
            Concenwithdeliverydevice.OxyDeviceName,
            this.MedicalgasDeliveryList
          );
        }
        this.Setconcerndevice = false;
      }
    }
  }
  public static GetSelectedItem(
    CListItemValue: string,
    CListItemList: ObservableCollection<CListItem>
  ): CListItem {
    let oCListItem: CListItem = null;
    if (
      CListItemList != null &&
      CListItemList.Count > 0 &&
      !String.IsNullOrEmpty(CListItemValue)
    ) {
      let oSelectedItem = CListItemList.Where(
        (oItem) => oItem.DisplayText == CListItemValue
      ).Select((oItem) => oItem);
      if (oSelectedItem != null && oSelectedItem.Count() > 0) {
        oCListItem = oSelectedItem.First();
      }
    }
    return oCListItem;
  }
  private _IsSelectedDelivery: boolean = false;
  public get IsSelectedDelivery(): boolean {
    return this._IsSelectedDelivery;
  }
  public set IsSelectedDelivery(value: boolean) {
    this._IsSelectedDelivery = value;
  }
  private _IsSelectedConcen: boolean = false;
  public get IsSelectedConcen(): boolean {
    return this._IsSelectedConcen;
  }
  public set IsSelectedConcen(value: boolean) {
    this._IsSelectedConcen = value;
  }
  private _deliverydevicefreetext: string;
  public get DeliveryDeviceFreetext(): string {
    return this._deliverydevicefreetext;
  }
  public set DeliveryDeviceFreetext(value: string) {
    if (value != this._deliverydevicefreetext) {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (
          !this.oBasicDetailsVM.lstAmendedFlds.Contains(
            'DeliveryDeviceFreetext'
          )
        )
          this.oBasicDetailsVM.lstAmendedFlds.Add('DeliveryDeviceFreetext');
        if (
          this.oBasicDetailsVM.bIsAmend &&
          !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.oBasicDetailsVM.IsenableRSNFORMOD
        ) {
          this.oBasicDetailsVM.DoChangesForAmend();
        }
        if (
          this.oBasicDetailsVM.InfusionType != null &&
          String.Equals(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypeCode.SINGLEDOSEVOLUME
          ) &&
          !String.IsNullOrEmpty(value)
        ) {
          this.IsVolumeChecked = null;
          this.IsDoseChecked = null;
        }
      }
      this._deliverydevicefreetext = value;
      // NotifyPropertyChanged("DeliveryDeviceFreetext");
    }
  }
  private _flowratetext: string;
  public get FlowRateText(): string {
    return this._flowratetext;
  }
  public set FlowRateText(value: string) {
    if (value != this._flowratetext) {
      if (
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.oPrescitemVM != null &&
          this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
            ActivityTypes.Reorder &&
          this.oBasicDetailsVM.actualClerkingValues != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.actualClerkingValues.FlowRateText
          ) &&
          String.Compare(
            this.oBasicDetailsVM.actualClerkingValues.FlowRateText,
            value
          ) != 0) ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.oPrescitemVM != null &&
          this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
      ) {
        this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
        this.oBasicDetailsVM.SetOnadmissionValue(value, this._flowratetext);
      }
      this._flowratetext = value;
      // NotifyPropertyChanged("FlowRateText");
    }
  }
  private _isDoseChecked: boolean = null;
  private _isVolumeChecked: boolean = null;
  public get IsDoseChecked(): boolean {
    return this._isDoseChecked;
  }
  public set IsDoseChecked(value: boolean) {
    this._isDoseChecked = value;
    // NotifyPropertyChanged("IsDoseChecked");
    this.CalculateInfusionRate();
  }
  public get IsVolumeChecked(): boolean {
    return this._isVolumeChecked;
  }
  public set IsVolumeChecked(value: boolean) {
    this._isVolumeChecked = value;
    // NotifyPropertyChanged("IsVolumeChecked");
    this.CalculateInfusionRate();
  }
  private _IsWardStockFluid: boolean = false;
  public get IsWardStockFluid(): boolean {
    return this._IsWardStockFluid;
  }
  public set IsWardStockFluid(value: boolean) {
    if (this._IsWardStockFluid != value) {
      this._IsWardStockFluid = value;
      // super.NotifyPropertyChanged("IsWardStockFluid");
    }
  }
  public get FluidPrescribableItemListOID(): number {
    return this.fluidPrescribableItemListOID;
  }
  public set FluidPrescribableItemListOID(value: number) {
    this.fluidPrescribableItemListOID = value;
    // NotifyPropertyChanged("FluidPrescribableItemListOID");
  }
  public get FluidVolume(): string {
    return this.fluidVolume;
  }
  public set FluidVolume(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this.fluidVolume = value;
      // NotifyPropertyChanged("FluidVolume");
    } else {
      if (this.fluidVolume != value) {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Reorder &&
              this.oBasicDetailsVM.actualClerkingValues != null &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.FluidVolume
              ) &&
              String.Compare(
                this.oBasicDetailsVM.actualClerkingValues.FluidVolume,
                value
              ) != 0) ||
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend)
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value, this.fluidVolume);
          }
          if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('FluidVolume')) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('FluidVolume');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          if (this.fluidVolume != value) {
            this.oBasicDetailsVM.ClearPrescribedQuantity();
          }
        }
        this.fluidVolume = value;
        if (
          this.oBasicDetailsVM.InfusionType != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
          (String.Compare(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.SINGLEDOSEVOLUME
          ) == 0 ||
            String.Compare(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.FLUID
            ) == 0) &&
          this.oBasicDetailsVM.IsClearlstAmendedFlds
        ) {
          //Not Required for LHS. To be Re-Visited.
          this.oBasicDetailsVM.oPrescitemVM.LaunchInfusionrateCalculator(false);
        }
        if (
          this.IsVolumeVisible == Visibility.Visible &&
          !(
            String.Equals(
              this.oBasicDetailsVM.IdentifyingType,
              CConstants.NONCATALOGUEITEM
            ) ||
            String.Equals(
              this.oBasicDetailsVM.IdentifyingType,
              CConstants.Precatalog
            )
          )
        ) {
          if (
            String.IsNullOrEmpty(this.fluidVolume) &&
            (this.VolumeUOM == null ||
              String.IsNullOrEmpty(this.VolumeUOM.Value))
          ) {
            this.RestoreInfusionNumerator(false, true);
          } else {
            this.RestoreInfusionNumerator(true, false);
          }
        }
        // NotifyPropertyChanged("FluidVolume");
      }
    }
  }
  public get Volume(): string {
    return this._Volume;
  }
  public set Volume(value: string) {
    this._Volume = value;
    // NotifyPropertyChanged("Volume");
    if (!this.oBasicDetailsVM.IsInfusionRateChanged) {
      this.oBasicDetailsVM.IsInfusionRateChanged = true;
    }
  }
  public get FluidVolumeUOMOID(): number {
    return this.fluidVolumeUOMOID;
  }
  public set FluidVolumeUOMOID(value: number) {
    this.fluidVolumeUOMOID = value;
    // NotifyPropertyChanged("FluidVolumeUOMOID");
  }
  public get InfusionPeriod(): string {
    return this.infusionPeriod;
  }
  public set InfusionPeriod(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this.infusionPeriod = value;
      // NotifyPropertyChanged("InfusionPeriod");
    } else {
      if (this.infusionPeriod != value) {
        this.oBasicDetailsVM.ClearPrescribedQuantity();
        this.infusionPeriod = value;
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('InfusionPeriod')) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('InfusionPeriod');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          if (
            this.oBasicDetailsVM.InfusionType != null &&
            !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
            (String.Compare(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) == 0 ||
              String.Compare(
                this.oBasicDetailsVM.InfusionType.Value,
                InfusionTypesCode.FLUID
              ) == 0) &&
            this.oBasicDetailsVM.IsClearlstAmendedFlds
          ) {
            //Not Required for LHS. To be Re-Visited.
            this.oBasicDetailsVM.oPrescitemVM.LaunchInfusionrateCalculator(false);
          }
        }
        if (!String.IsNullOrEmpty(this.infusionPeriod)) {
          this.IsOngoingChecked = false;
        }
        if (
          (this.oBasicDetailsVM.InfusionType != null &&
            this.oBasicDetailsVM.InfusionType.Value ==
              InfusionTypesCode.CONTINUOUS) ||
          this.oBasicDetailsVM.InfusionType == null
        ) {
          if (
            !String.IsNullOrEmpty(this.infusionPeriod) ||
            (this.InfusionPeriodUom != null &&
              !String.IsNullOrEmpty(this.InfusionPeriodUom.Value))
          ) {
            this.IsenableChksequentialPresitem = true;
          } else {
            this.IsenableChksequentialPresitem = false;
            this.IsChksequentialPresitem = false;
          }
        }
        if (
          this.oBasicDetailsVM.DoseType != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.DoseType.Value) &&
          (String.Equals(
            this.oBasicDetailsVM.DoseType.Value,
            DoseTypeCode.CONDITIONAL
          ) ||
            String.Equals(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE
            ))
        ) {
          if (String.IsNullOrEmpty(this.infusionPeriod)) {
            if (
              String.Equals(
                this.oBasicDetailsVM.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE
              )
            ) {
              this.oBasicDetailsVM.IsEnableInfusionRateSteppedVariable = true;
            } else if (
              String.Equals(
                this.oBasicDetailsVM.DoseType.Value,
                DoseTypeCode.CONDITIONAL
              ) &&
              this.oBasicDetailsVM.ConditionalDosingDetails != null
            ) {
              if (
                this.oBasicDetailsVM.InfusionType != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.InfusionType.Value
                ) &&
                String.Equals(
                  this.oBasicDetailsVM.InfusionType.Value,
                  InfusionTypesCode.INTERMITTENT,
                  StringComparison.OrdinalIgnoreCase
                )
              ) {
                this.oBasicDetailsVM.ConditionalDosingDetails.IsCondInfusionRateEnable =
                  true;
              }
            }
          }
          if (
            !String.IsNullOrEmpty(this.infusionPeriod) &&
            this.InfusionPeriodUom != null
          ) {
            if (
              String.Equals(
                this.oBasicDetailsVM.DoseType.Value,
                DoseTypeCode.STEPPEDVARIABLE
              )
            ) {
              this.oBasicDetailsVM.IsEnableInfusionRateSteppedVariable = false;
            } else if (
              String.Equals(
                this.oBasicDetailsVM.DoseType.Value,
                DoseTypeCode.CONDITIONAL
              ) &&
              this.oBasicDetailsVM.ConditionalDosingDetails != null
            ) {
              if (
                this.oBasicDetailsVM.InfusionType != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.InfusionType.Value
                ) &&
                String.Equals(
                  this.oBasicDetailsVM.InfusionType.Value,
                  InfusionTypesCode.INTERMITTENT,
                  StringComparison.OrdinalIgnoreCase
                )
              ) {
                this.oBasicDetailsVM.ConditionalDosingDetails.IsCondInfusionRateEnable =
                  false;
              }
            }
          }
        }
        if (!this.oBasicDetailsVM.IsInfusionRateChanged) {
          this.oBasicDetailsVM.IsInfusionRateChanged = true;
        }
        // NotifyPropertyChanged("InfusionPeriod");
      }
    }
  }
  SetDuration(): void {
    if (!this.IsOngoingChecked) {
      if (
        this.oBasicDetailsVM.InfusionType != null &&
        (String.Compare(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 ||
          String.Compare(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.SINGLEDOSEVOLUME,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.FLUID,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0 ||
          String.Compare(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.PCA,
            StringComparison.CurrentCultureIgnoreCase
          ) == 0)
      ) {
        if (this.oBasicDetailsVM.oPrescitemVM.IsFormViewDataLoaded) {
          this.oBasicDetailsVM.Duration =
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod;
          let lDuration: CListItem = new CListItem();
          lDuration = this.oBasicDetailsVM.InfusionDetails.InfusionPeriodUom;
          if (lDuration != null) {
            switch (lDuration.DisplayText) {
              case 'day':
                lDuration = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Day(s)',
                  Value: 'CC_MEDDRSN1',
                });
                break;
              case 'week':
                lDuration = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Week(s)',
                  Value: 'CC_MEDDRSN2',
                });
                break;
              case 'month':
                lDuration = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Month(s)',
                  Value: 'CC_MEDRSN3',
                });
                break;
              case 'year':
                lDuration = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Year(s)',
                  Value: 'CC_MEDRSN4',
                });
                break;
              case 'hour':
                lDuration = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Hour(s)',
                  Value: 'CC_HOURS',
                });
                break;
              case 'minute':
                lDuration = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: 'Minute(s)',
                  Value: 'CC_MINUTES',
                });
                break;
              case 'second':
                this.oBasicDetailsVM.Duration = '';
                lDuration = ObjectHelper.CreateObject(new CListItem(), {
                  DisplayText: '',
                  Value: '',
                });
                break;
            }
          }
          this.oBasicDetailsVM.DurationUOM = lDuration;
        }
      }
    }
  }
  public get InfusionPeriodUOMOID(): number {
    return this.infusionPeriodUOMOID;
  }
  public set InfusionPeriodUOMOID(value: number) {
    this.infusionPeriodUOMOID = value;
    // NotifyPropertyChanged("InfusionPeriodUOMOID");
  }
  public get TopUpDose(): string {
    return this.topUpDose;
  }
  public set TopUpDose(value: string) {
    this.topUpDose = value;
    // NotifyPropertyChanged("TopUpDose");
  }
  public get TopUpDoseUOMOID(): number {
    return this.topUpDoseUOMOID;
  }
  public set TopUpDoseUOMOID(value: number) {
    this.topUpDoseUOMOID = value;
    // NotifyPropertyChanged("TopUpDoseUOMOID");
  }
  private _SeqInfRate: string;
  public get SeqInfRate(): string {
    return this._SeqInfRate;
  }
  public set SeqInfRate(value: string) {
    this._SeqInfRate = value;
    // NotifyPropertyChanged("SeqInfRate");
  }
  public get Rate(): string {
    return this.rate;
  }
  public set Rate(value: string) {
    let tocheckRate: boolean = false;
    let Tocheck: Double = 0;
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      tocheckRate = Number.TryParse(value, (o) => {
        Tocheck = o;
      });
      this.rate = tocheckRate ? value : String.Empty;
      // NotifyPropertyChanged("Rate");
    } else {
      if (this.oBasicDetailsVM != null) {
        if (this.rate != value) {
          this.oBasicDetailsVM.InfusionDetails.SeqInfRate = this.rate;
          this.oBasicDetailsVM.ClearPrescribedQuantity();
          if (
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Reorder &&
              this.oBasicDetailsVM.actualClerkingValues != null &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.Rate
              ) &&
              String.Compare(
                this.oBasicDetailsVM.actualClerkingValues.Rate,
                value
              ) != 0) ||
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend)
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value, this.rate);
          }
        }
        if(!this.oBasicDetailsVM.IsCallFromSVGridUnSelect)
        {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('Rate')) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('Rate');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
        }
      }
      if (
        !String.IsNullOrEmpty(value) &&
        String.Compare(
          value,
          CConstants.Infinity,
          StringComparison.CurrentCultureIgnoreCase
        ) != 0 &&
        String.Compare(
          value,
          CConstants.NaN,
          StringComparison.CurrentCultureIgnoreCase
        ) != 0
      ) {
        tocheckRate = Number.TryParse(value, (o) => {
          Tocheck = o;
        });
        this.rate = tocheckRate ? value : String.Empty;
      } else {
        this.rate = String.Empty;
        value = String.Empty;
      }
      // NotifyPropertyChanged("Rate");
      this.DCAmendMessageInf();
    }
    if (!String.IsNullOrEmpty(value) && this.IsenableInfusionRate) {
      this.IsEnableInfUpperRate = true;
    } else {
      this.IsEnableInfUpperRate = false;
      this._UpperRate = String.Empty;
    }
    if (!this.oBasicDetailsVM.IsInfusionRateChanged) {
      this.oBasicDetailsVM.IsInfusionRateChanged = true;
    }
  }
  public get ParentPrescriptionItemOID(): number {
    return this.parentPrescriptionItemOID;
  }
  public set ParentPrescriptionItemOID(value: number) {
    this.parentPrescriptionItemOID = value;
    // NotifyPropertyChanged("ParentPrescriptionItemOID");
  }
  public get BackgroundRate(): string {
    return this.backgroundRate;
  }
  public set BackgroundRate(value: string) {
    if (
      (this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
        this.oBasicDetailsVM.actualClerkingValues != null &&
        !String.IsNullOrEmpty(
          this.oBasicDetailsVM.actualClerkingValues.BackgroundRate
        ) &&
        String.Compare(
          this.oBasicDetailsVM.actualClerkingValues.BackgroundRate,
          value
        ) != 0) ||
      (this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
    ) {
      this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
      this.oBasicDetailsVM.SetOnadmissionValue(value, this.BackgroundRate);
    }
    this.backgroundRate = value;
    // NotifyPropertyChanged("BackgroundRate");
  }
  public get BackgroundRateUOMOID(): number {
    return this.backgroundRateUOMOID;
  }
  public set BackgroundRateUOMOID(value: number) {
    this.backgroundRateUOMOID = value;
    // NotifyPropertyChanged("BackgroundRateUOMOID");
  }
  public get BackgroundRateNumeratorUom(): CListItem {
    return this._backgroundratenumeratoruom;
  }
  public set BackgroundRateNumeratorUom(value: CListItem) {
    if (
      this.oBasicDetailsVM != null &&
      this.oBasicDetailsVM.actualClerkingValues != null &&
      ((this.oBasicDetailsVM.actualClerkingValues.BackgroundRateNumeratorUom ==
        null &&
        value != null &&
        !String.IsNullOrEmpty(value.DisplayText) &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
        (this.oBasicDetailsVM.actualClerkingValues.BackgroundRateNumeratorUom !=
          null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.actualClerkingValues.BackgroundRateNumeratorUom
              .DisplayText
          ) &&
          value == null) ||
        (this.oBasicDetailsVM.actualClerkingValues.BackgroundRateNumeratorUom !=
          null &&
          value != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.actualClerkingValues.BackgroundRateNumeratorUom
              .DisplayText
          ) &&
          String.Compare(
            this.oBasicDetailsVM.actualClerkingValues.BackgroundRateNumeratorUom
              .DisplayText,
            value.DisplayText,
            StringComparison.CurrentCultureIgnoreCase
          ) != 0))
    ) {
      this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
      this.oBasicDetailsVM.SetOnadmissionValue(value);
    }
    this._backgroundratenumeratoruom = value;
    // NotifyPropertyChanged("BackgroundRateNumeratorUom");
  }
  public get BackgroundRateDinominatorUom(): CListItem {
    return this._backgroundrateDenominatoruom;
  }
  public set BackgroundRateDinominatorUom(value: CListItem) {
    if (
      this.oBasicDetailsVM != null &&
      this.oBasicDetailsVM.actualClerkingValues != null &&
      ((this.oBasicDetailsVM.actualClerkingValues
        .BackgroundRateDinominatorUom == null &&
        value != null &&
        !String.IsNullOrEmpty(value.DisplayText) &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend) ||
        (this.oBasicDetailsVM.actualClerkingValues
          .BackgroundRateDinominatorUom != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.actualClerkingValues
              .BackgroundRateDinominatorUom.DisplayText
          ) &&
          value == null) ||
        (this.oBasicDetailsVM.actualClerkingValues
          .BackgroundRateDinominatorUom != null &&
          value != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.actualClerkingValues
              .BackgroundRateDinominatorUom.DisplayText
          ) &&
          String.Compare(
            this.oBasicDetailsVM.actualClerkingValues
              .BackgroundRateDinominatorUom.DisplayText,
            value.DisplayText,
            StringComparison.CurrentCultureIgnoreCase
          ) != 0))
    ) {
      this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
      this.oBasicDetailsVM.SetOnadmissionValue(value);
    }
    this._backgroundrateDenominatoruom = value;
    // NotifyPropertyChanged("BackgroundRateDinominatorUom");
  }
  public get LockOutPeriod(): string {
    return this.lockOutPeriod;
  }
  public set LockOutPeriod(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this.lockOutPeriod = value;
      // NotifyPropertyChanged("LockOutPeriod");
    } else {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (
          (this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Reorder &&
            this.oBasicDetailsVM.actualClerkingValues != null &&
            !String.IsNullOrEmpty(
              this.oBasicDetailsVM.actualClerkingValues.LockOutPeriod
            ) &&
            String.Compare(
              this.oBasicDetailsVM.actualClerkingValues.LockOutPeriod,
              value
            ) != 0) ||
          (this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
        ) {
          this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
          this.oBasicDetailsVM.SetOnadmissionValue(value, this.LockOutPeriod);
        }
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('LockOutPeriod')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('LockOutPeriod');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        this.oBasicDetailsVM.ClearPrescribedQuantity();
      }
      this.lockOutPeriod = value;
      // NotifyPropertyChanged("LockOutPeriod");
    }
  }
  public get LockOutPeriodUOMOID(): number {
    return this.lockOutPeriodUOMOID;
  }
  public set LockOutPeriodUOMOID(value: number) {
    if (
      (this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Reorder &&
        this.oBasicDetailsVM.actualClerkingValues != null &&
        this.oBasicDetailsVM.actualClerkingValues.LockOutPeriodUOMOID > 0) ||
      (this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
    ) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.IsRestoreOldValues
      )
        this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
      this.oBasicDetailsVM.SetOnadmissionValue(
        Convert.ToString(value),
        Convert.ToString(this.lockOutPeriodUOMOID)
      );
    }
    this.lockOutPeriodUOMOID = value;
    // NotifyPropertyChanged("LockOutPeriodUOMOID");
  }
  public get INFTYCODE(): string {
    return this.iNFTYCODE;
  }
  public set INFTYCODE(value: string) {
    this.iNFTYCODE = value;
    // NotifyPropertyChanged("INFTYCODE");
  }
  public get Lumen(): string {
    return this.lumen;
  }
  public set Lumen(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this.lumen = value;
      // NotifyPropertyChanged("Lumen");
    } else {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('Lumen')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('Lumen');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
      }
      this.lumen = value;
      // NotifyPropertyChanged("Lumen");
    }
  }
  public get DisplayOrder(): number {
    return this.displayOrder;
  }
  public set DisplayOrder(value: number) {
    this.displayOrder = value;
    // NotifyPropertyChanged("DisplayOrder");
  }
  public get IsOnGoing(): string {
    this.IsOnGoing = 'N';
    return this.isOnGoing;
  }
  public set IsOnGoing(value: string) {
    this.isOnGoing = value;
    // NotifyPropertyChanged("IsOnGoing");
  }
  public get BackgroundRateDenaminatorUOMOID(): number {
    return this.backgroundRateDenaminatorUOMOID;
  }
  public set BackgroundRateDenaminatorUOMOID(value: number) {
    this.backgroundRateDenaminatorUOMOID = value;
    // NotifyPropertyChanged("BackgroundRateDenaminatorUOMOID");
  }
  public get MaxDose(): string {
    return this.maxDose;
  }
  public set MaxDose(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this.maxDose = value;
      // NotifyPropertyChanged("MaxDose");
    } else {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (
          (this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Reorder &&
            this.oBasicDetailsVM.actualClerkingValues != null &&
            !String.IsNullOrEmpty(
              this.oBasicDetailsVM.actualClerkingValues.MaxDose
            ) &&
            String.Compare(
              this.oBasicDetailsVM.actualClerkingValues.MaxDose,
              value
            ) != 0) ||
          (this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
        ) {
          this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
          this.oBasicDetailsVM.SetOnadmissionValue(value, this.maxDose);
        }
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('MaxDose')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('MaxDose');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        this.oBasicDetailsVM.ClearPrescribedQuantity();
      }
      this.maxDose = value;
      // NotifyPropertyChanged("MaxDose");
    }
  }
  private _InFusionReviewAfter: Visibility;
  public get InFusionReviewAfter(): Visibility {
    return this._InFusionReviewAfter;
  }
  public set InFusionReviewAfter(value: Visibility) {
    this._InFusionReviewAfter = value;
    // NotifyPropertyChanged("InFusionReviewAfter");
  }
  public ReviewAfterDTTM: DateTime = DateTime.MinValue;
  private _IsReviewAlert: boolean = false;
  public get IsReviewAlert(): boolean {
    return this._IsReviewAlert;
  }
  public set IsReviewAlert(value: boolean) {
    this._IsReviewAlert = value;
    // NotifyPropertyChanged("IsReviewAlert");
  }
  public get Bolus(): string {
    return this.bolus;
  }
  public set Bolus(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this.bolus = value;
      // NotifyPropertyChanged("Bolus");
    } else {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (
          (this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Reorder &&
            this.oBasicDetailsVM.actualClerkingValues != null &&
            !String.IsNullOrEmpty(
              this.oBasicDetailsVM.actualClerkingValues.Bolus
            ) &&
            String.Compare(
              this.oBasicDetailsVM.actualClerkingValues.Bolus,
              value
            ) != 0) ||
          (this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
        ) {
          this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
          this.oBasicDetailsVM.SetOnadmissionValue(value, this.bolus);
        }
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('Bolus')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('Bolus');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        this.oBasicDetailsVM.ClearPrescribedQuantity();
      }
      this.bolus = value;
      // NotifyPropertyChanged("Bolus");
    }
  }
  public get Boosterdose(): string {
    return this.boosterdose;
  }
  public set Boosterdose(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this.boosterdose = value;
      // NotifyPropertyChanged("Boosterdose");
    } else {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('Boosterdose')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('Boosterdose');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        if (
          this.boosterdose != value &&
          this.InfBoosterDoseVisi == Visibility.Visible
        ) {
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        }
      }
      this.boosterdose = value;
      // NotifyPropertyChanged("Boosterdose");
    }
  }
  public get PreviousRate(): string {
    return this._PreviousRate;
  }
  public set PreviousRate(value: string) {
    if (Helper.ReferenceEquals(this._PreviousRate, value) != true) {
      this._PreviousRate = value;
      // NotifyPropertyChanged("PreviousRate");
    }
  }
  private _PreviousUpperRate: string;
  public get PreviousUpperRate(): string {
    return this._PreviousUpperRate;
  }
  public set PreviousUpperRate(value: string) {
    if (Helper.ReferenceEquals(this._PreviousUpperRate, value) != true) {
      this._PreviousUpperRate = value;
      // NotifyPropertyChanged("PreviousUpperRate");
    }
  }
  private _PrevConcentStrenght: string;
  public get PrevConcentStrenght(): string {
    return this._PrevConcentStrenght;
  }
  public set PrevConcentStrenght(value: string) {
    if (Helper.ReferenceEquals(this._PrevConcentStrenght, value) != true) {
      this._PrevConcentStrenght = value;
      // NotifyPropertyChanged("PrevConcentStrenght");
    }
  }
  private _PrevConcentStrenghtUOM: string;
  public get PrevConcentStrenghtUOM(): string {
    return this._PrevConcentStrenghtUOM;
  }
  public set PrevConcentStrenghtUOM(value: string) {
    if (Helper.ReferenceEquals(this._PrevConcentStrenghtUOM, value) != true) {
      this._PrevConcentStrenghtUOM = value;
      // NotifyPropertyChanged("PrevConcentStrenghtUOM");
    }
  }
  private _PrevConcentVolume: string;
  public get PrevConcentVolume(): string {
    return this._PrevConcentVolume;
  }
  public set PrevConcentVolume(value: string) {
    if (Helper.ReferenceEquals(this._PrevConcentVolume, value) != true) {
      this._PrevConcentVolume = value;
      // NotifyPropertyChanged("PrevConcentVolume");
    }
  }
  private _PrevConcentVolumeUOM: string;
  public get PrevConcentVolumeUOM(): string {
    return this._PrevConcentVolumeUOM;
  }
  public set PrevConcentVolumeUOM(value: string) {
    if (Helper.ReferenceEquals(this._PrevConcentVolumeUOM, value) != true) {
      this._PrevConcentVolumeUOM = value;
      // NotifyPropertyChanged("PrevConcentVolumeUOM");
    }
  }
  public _SingleActionMedChartVisible: Visibility = Visibility.Collapsed;
  public get SingleActionMedChartVisible(): Visibility {
    return this._SingleActionMedChartVisible;
  }
  public set SingleActionMedChartVisible(value: Visibility) {
    if (value != this._SingleActionMedChartVisible) {
      this._SingleActionMedChartVisible = value;
      // NotifyPropertyChanged("SingleActionMedChartVisible");
    }
  }
  public _IsenableSingleActionMedChart: boolean = false;
  public get IsenableSingleActionMedChart(): boolean {
    return (
      this._IsenableSingleActionMedChart &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableSingleActionMedChart(value: boolean) {
    if (value != this._IsenableSingleActionMedChart) {
      this._IsenableSingleActionMedChart = value;
      // NotifyPropertyChanged("IsenableSingleActionMedChart");
    }
  }
  public _ChckSingleActionMedChart: boolean = true;
  public get ChckSingleActionMedChart(): boolean {
    return this._ChckSingleActionMedChart;
  }
  public set ChckSingleActionMedChart(value: boolean) {
    if (value != this._ChckSingleActionMedChart) {
      this._ChckSingleActionMedChart = value;
      // NotifyPropertyChanged("ChckSingleActionMedChart");
    }
  }
  public get IsEstimatedStopRecalculationRequired(): boolean {
    return this._isEstimatedStopRecalculationRequired;
  }
  public set IsEstimatedStopRecalculationRequired(value: boolean) {
    this._isEstimatedStopRecalculationRequired = value;
  }
  public get IsInfusionAlertShown(): boolean {
    return this._isInfusionAlertShown;
  }
  public set IsInfusionAlertShown(value: boolean) {
    this._isInfusionAlertShown = value;
  }
  private _IsInfusionAlertValue: string;
  public get IsInfusionAlertValue(): string {
    return this._IsInfusionAlertValue;
  }
  public set IsInfusionAlertValue(value: string) {
    this._IsInfusionAlertValue = value;
  }
  public get PreviousRateDrUOMName(): string {
    return this._PreviousRateDrUOMName;
  }
  public set PreviousRateDrUOMName(value: string) {
    if (Helper.ReferenceEquals(this._PreviousRateDrUOMName, value) != true) {
      this._PreviousRateDrUOMName = value;
      // NotifyPropertyChanged("PreviousRateDrUOMName");
    }
  }
  public get PreviousRateUOMName(): string {
    return this._PreviousRateUOMName;
  }
  public set PreviousRateUOMName(value: string) {
    if (Helper.ReferenceEquals(this._PreviousRateUOMName, value) != true) {
      this._PreviousRateUOMName = value;
      // NotifyPropertyChanged("PreviousRateUOMName");
    }
  }
  public get PreviousBgRate(): string {
    return this._PreviousBgRate;
  }
  public set PreviousBgRate(value: string) {
    if (Helper.ReferenceEquals(this._PreviousBgRate, value) != true) {
      this._PreviousBgRate = value;
      // NotifyPropertyChanged("PreviousBgRate");
    }
  }
  public get PreviousBgRateDrUOMName(): string {
    return this._PreviousBgRateDrUOMName;
  }
  public set PreviousBgRateDrUOMName(value: string) {
    if (Helper.ReferenceEquals(this._PreviousBgRateDrUOMName, value) != true) {
      this._PreviousBgRateDrUOMName = value;
      // NotifyPropertyChanged("PreviousBgRateDrUOMName");
    }
  }
  public get PreviousBgRateUOMName(): string {
    return this._PreviousBgRateUOMName;
  }
  public set PreviousBgRateUOMName(value: string) {
    if (Helper.ReferenceEquals(this._PreviousBgRateUOMName, value) != true) {
      this._PreviousBgRateUOMName = value;
      // NotifyPropertyChanged("PreviousBgRateUOMName");
    }
  }
  public get FluidSelectedItem(): CListItem {
    return this._fluidselecteditem;
  }
  public set FluidSelectedItem(value: CListItem) {
    if (this._fluidselecteditem != value) {
      this._fluidselecteditem = value;
      // NotifyPropertyChanged("FluidSelectedItem");
    }
  }
  public get DeliveryDevice(): CListItem {
    return this.deliveryDevice;
  }
  public set DeliveryDevice(value: CListItem) {
    if (this.deliveryDevice != value) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this.deliveryDevice = value;
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('DeliveryDevice')) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('DeliveryDevice');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
        }
        this.deliveryDevice = value;
      }
      if (
        value != null &&
        value.Tag != null &&
        Convert.ToString(value.Tag).toLocaleLowerCase() == 'true' 
      ) {
        this.InfBoosterDoseVisi = Visibility.Visible;
      } else {
        this.InfBoosterDoseVisi = Visibility.Collapsed;
      }
      if (
        this.oBasicDetailsVM.IsClearlstAmendedFlds &&
        ((this.oBasicDetailsVM.InfusionType != null &&
          String.Compare(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.PCA
          ) != 0) ||
          (this.oBasicDetailsVM.InfusionType == null &&
            this.oBasicDetailsVM.IsInfContiniousFormLoaded))
      ) {
        this.FillInfusionRateBasedOnDD();
      }
      if (
        this.deliveryDevice == null ||
        (this.deliveryDevice != null &&
          String.IsNullOrEmpty(this.deliveryDevice.DisplayText))
      ) {
        this.IsinfusRateBasedOnDD = false;
        if (
          String.Equals(
            this.oBasicDetailsVM.DoseType.Value,
            DoseTypeCode.CONDITIONAL,
            StringComparison.OrdinalIgnoreCase
          ) ||
          String.Equals(
            this.oBasicDetailsVM.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE,
            StringComparison.OrdinalIgnoreCase
          )
        ) {
          this.IsenableInfusionrateDenominatoruom = false;
          this.IsenableInfusionratenumuom = false;
        } else {
          this.IsenableInfusionrateDenominatoruom = true;
          this.IsenableInfusionratenumuom = true;
        }
      }
      if (
        !String.Equals(
          this.oBasicDetailsVM.IdentifyingType,
          CConstants.NONCATALOGUEITEM
        )
      ) {
        if (
          ((this.IsVolumeVisible == Visibility.Visible &&
            String.IsNullOrEmpty(this.fluidVolume) &&
            (this.VolumeUOM == null ||
              String.IsNullOrEmpty(this.VolumeUOM.Value))) ||
            (this.IsConcentrationVisible == Visibility.Visible &&
              String.IsNullOrEmpty(this.LowConcentration) &&
              (this.LowConcentrationUOM == null ||
                String.IsNullOrEmpty(this.LowConcentrationUOM.Value)) &&
              String.IsNullOrEmpty(this.UpperConcentration) &&
              (this.UpperConcentrationUOM == null ||
                String.IsNullOrEmpty(this.UpperConcentrationUOM.Value))) ||
            (this.IsVolumeVisible == Visibility.Collapsed &&
              this.IsConcentrationVisible == Visibility.Collapsed)) &&
          !this.IsinfusRateBasedOnDD &&
          !this.isinfusRateBasedOnDDforClerking
        ) {
          this.RestoreInfusionNumerator(false, true);
        } else {
          this.RestoreInfusionNumerator(true, false);
        }
      }
      // NotifyPropertyChanged("DeliveryDevice");
    }
  }
  isinfusRateBasedOnDD: boolean = false;
  public get IsinfusRateBasedOnDD(): boolean {
    return this.isinfusRateBasedOnDD;
  }
  public set IsinfusRateBasedOnDD(value: boolean) {
    this.isinfusRateBasedOnDD = value;
  }
  isinfusRateBasedOnDDforClerking: boolean = false;
  public get IsinfusRateBasedOnDDforClerking(): boolean {
    return this.isinfusRateBasedOnDDforClerking;
  }
  public set IsinfusRateBasedOnDDforClerking(value: boolean) {
    this.isinfusRateBasedOnDDforClerking = value;
  }
  IsDDSelectedforConditional: boolean = false;
  public get IsDelDevSelectedforConditional(): boolean {
    return this.IsDDSelectedforConditional;
  }
  public set IsDelDevSelectedforConditional(value: boolean) {
    this.IsDDSelectedforConditional = value;
  }
  public get InfusioncalEnb(): boolean {
    return this._infusioncalEnb;
  }
  public set InfusioncalEnb(value: boolean) {
    if (this._infusioncalEnb != value) {
      this._infusioncalEnb = value;
      // super.NotifyPropertyChanged("InfusioncalEnb");
    }
  }
  public get FluidSelectvalue(): CListItem {
    return this._fluidSelectvalue;
  }
  public set FluidSelectvalue(value: CListItem) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this._fluidSelectvalue = value;
      // NotifyPropertyChanged("FluidSelectvalue");
    } else {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('FluidSelectvalue')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('FluidSelectvalue');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        this.oBasicDetailsVM.ClearPrescribedQuantity();
      }
      this._fluidSelectvalue = value;
      if (this._fluidSelectvalue != null) {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.InfusionDetails.FluidFreetext =
            this._fluidSelectvalue.DisplayText;
          this.oBasicDetailsVM.InfusionDetails.FluidOID = Convert.ToInt64(
            this._fluidSelectvalue.Value
          );
          this.oBasicDetailsVM.InfusionDetails.FluidPrescribableItemListOID =
            Convert.ToInt64(this._fluidSelectvalue.Value);
          if (this._fluidSelectvalue.Tag != null) {
            let fuildTagValues: string[] =
              this._fluidSelectvalue.Tag.ToString().Split('~');
            if (fuildTagValues != null && fuildTagValues.length > 0) {
              this.oBasicDetailsVM.InfusionDetails.FluidLorenzoID =
                fuildTagValues.length > 0 ? fuildTagValues[0] : String.Empty;
              this.oBasicDetailsVM.InfusionDetails.FluidItemType =
                fuildTagValues.length > 1 ? fuildTagValues[1] : String.Empty;
              this.oBasicDetailsVM.InfusionDetails.FluidIdentifyingOID =
                fuildTagValues.length > 2
                  ? Convert.ToInt64(fuildTagValues[2])
                  : 0;
              this.oBasicDetailsVM.IsFluidAuthorise =
                fuildTagValues.length > 3
                  ? Convert.ToBoolean(fuildTagValues[3])
                  : false;
              this.oBasicDetailsVM.InfusionDetails.FluidIdentifyingType =
                fuildTagValues.length > 1 ? fuildTagValues[1] : null;
            }
          }
          if (this.oBasicDetailsVM.IsFluidAuthorise) {
            if (
              String.IsNullOrEmpty(
                this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus
              ) ||
              (!String.IsNullOrEmpty(
                this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus
              ) &&
                String.Equals(
                  this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus,
                  CConstants.AWAITINGAUTHORISE,
                  StringComparison.InvariantCultureIgnoreCase
                ))
            ) {
              this.oBasicDetailsVM.IndentifyingDrugName = null;
              this.oBasicDetailsVM.IndentifyingDrugName =
                this.oBasicDetailsVM.IdentifyingName +
                CConstants.sAuthoriseText;
              if (this.AuthoriseTVDisableEvent != null)
                this.AuthoriseTVDisableEvent('1');
            }
          } else if (!this.oBasicDetailsVM.IsOrgAuthorise) {
            this.oBasicDetailsVM.IndentifyingDrugName = null;
            this.oBasicDetailsVM.IndentifyingDrugName =
              this.oBasicDetailsVM.IdentifyingName;
          }
          if (
            String.Equals(
              ContextInfo.MenuCode,
              CConstants.ClinicallyVerifyMenuCode,
              StringComparison.InvariantCultureIgnoreCase
            ) &&
            String.Equals(
              PatientContext.PrescriptionType,
              PrescriptionTypes.ForAdministration,
              StringComparison.OrdinalIgnoreCase
            ) &&
            PatientContext.ClerkFormViewDefaultBehavior !=
              ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
            (this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Prescribe ||
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Reorder)
          ) {
            if (
              this.oBasicDetailsVM.IsOrgAuthorise ||
              this.oBasicDetailsVM.IsFluidAuthorise
            ) {
              this.oBasicDetailsVM.IsClinicallyVerified = false;
              this.oBasicDetailsVM.IsEnableChkClinivallyVerify = false;
              this.oBasicDetailsVM.oPrescitemVM.IsClinicallyVerifyEnable =
                false;
            } else {
              this.oBasicDetailsVM.IsEnableChkClinivallyVerify = true;
              this.oBasicDetailsVM.oPrescitemVM.IsClinicallyVerifyEnable = true;
            }
          }
          if (this.oBasicDetailsVM.InfusionDetails.IsFluidConflictGen != '2') {
            this.oBasicDetailsVM.InfusionDetails.IsFluidConflictGen = '1';
          }
          if (
            !this.oBasicDetailsVM.IsRestoreOldValues &&
            PatientContext.IsINFUSIONON &&
            this.oBasicDetailsVM.Route != null &&
            this.oBasicDetailsVM.Route.Tag != null &&
            !String.IsNullOrEmpty(this.oBasicDetailsVM.Route.Tag.ToString()) &&
            String.Equals(this.oBasicDetailsVM.Route.Tag.ToString(), '1') &&
            !this.oBasicDetailsVM.oPrescitemVM.IsFillGetPresItemDetail
          ) {
            if (
              !this.oBasicDetailsVM.FollowUpStatLaunch.Equals('F') &&
              !this.oBasicDetailsVM.FollowUpStatLaunch.Equals('S')
            ) {
              this.oBasicDetailsVM.oPrescitemVM.AllergenCheck = false;
              this.oBasicDetailsVM.oPrescitemVM.IsFluidAllergenCheck = true;
              this.oBasicDetailsVM.oPrescitemVM.GenerateConflictsForInpatient(
                this.oBasicDetailsVM.oPrescitemVM.objItems
              );
            }
          }
        }
      }
      if (
        this._fluidSelectvalue == null &&
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.oPrescitemVM != null
      ) {
        if (
          this.oBasicDetailsVM.oPrescitemVM.PresTechValidatedItemsChild !=
            null &&
          this.oBasicDetailsVM.oPrescitemVM.PresTechValidatedItemsChild.Count >
            0
        ) {
          this.oBasicDetailsVM.oPrescitemVM.PresTechValidatedItemsChild = null;
        }
        if (
          this.oBasicDetailsVM.InfusionDetails != null &&
          this.oBasicDetailsVM.InfusionDetails.FluidPrescribableItemListOID > 0
        ) {
          this.oBasicDetailsVM.InfusionDetails.FluidPrescribableItemListOID = 0;
        }
      }
      // NotifyPropertyChanged("FluidSelectvalue");
    }
    if (
      this._isVolumeVisible == Visibility.Visible &&
      PatientContext.IsINFUSIONON &&
      this.oBasicDetailsVM != null &&
      ((this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        (String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS
        ) ||
          ((this.FluidSelectvalue == null ||
            (this.FluidSelectvalue != null &&
              String.IsNullOrEmpty(this.FluidSelectvalue.DisplayText))) &&
            !this.IsinfusRateBasedOnDD &&
            !this.IsinfusRateBasedOnDDforClerking &&
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            )) ||
          ((this.FluidSelectvalue == null ||
            (this.FluidSelectvalue != null &&
              String.IsNullOrEmpty(this.FluidSelectvalue.DisplayText))) &&
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.INTERMITTENT
            )))) ||
        (this.oBasicDetailsVM.InfusionType == null &&
          this.oBasicDetailsVM.IsInfContiniousFormLoaded &&
          (this.FluidSelectvalue == null ||
            (this.FluidSelectvalue != null &&
              String.IsNullOrEmpty(this.FluidSelectvalue.DisplayText)))))
    ) {
      this.IsVolumeVisible = Visibility.Collapsed;
      if (!String.IsNullOrEmpty(this.FluidVolume)) {
        this.FluidVolume = String.Empty;
      }
      if (this.VolumeUOM != null) {
        this.VolumeUOM = null;
      }
    }
  }
  public get Fluidselected(): string {
    return this._fluidselected;
  }
  public set Fluidselected(value: string) {
    if (this._fluidselected != value) {
      this._fluidselected = value;
      // NotifyPropertyChanged("Fluidselected");
    }
  }
  private fluidLorenzoID: string;
  public get FluidLorenzoID(): string {
    return this.fluidLorenzoID;
  }
  public set FluidLorenzoID(value: string) {
    this.fluidLorenzoID = value;
    // NotifyPropertyChanged("FluidLorenzoID");
  }
  private fluidItemType: string;
  public get FluidItemType(): string {
    return this.fluidItemType;
  }
  public set FluidItemType(value: string) {
    this.fluidItemType = value;
    // NotifyPropertyChanged("FluidItemType");
  }
  private fluidPRPSTUSCode: string;
  public get FluidPRPSTUSCode(): string {
    return this.fluidPRPSTUSCode;
  }
  public set FluidPRPSTUSCode(value: string) {
    this.fluidPRPSTUSCode = value;
    // NotifyPropertyChanged("FluidPRPSTUSCode");
  }
  private fluidOID: number = 0;
  public get FluidOID(): number {
    return this.fluidOID;
  }
  public set FluidOID(value: number) {
    this.fluidOID = value;
    // NotifyPropertyChanged("FluidOID");
  }
  private fluidIdentifyingOID: number = 0;
  public get FluidIdentifyingOID(): number {
    return this.fluidIdentifyingOID;
  }
  public set FluidIdentifyingOID(value: number) {
    this.fluidIdentifyingOID = value;
    // NotifyPropertyChanged("FluidIdentifyingOID");
  }
  public IsFluidConflictGen: string;
  public get FluidFreetext(): string {
    return this._fluidfreetext;
  }
  public set FluidFreetext(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this._fluidfreetext = value;
      // NotifyPropertyChanged("FluidFreetext");
    } else {
      if (this._fluidfreetext != value) {
        this.oBasicDetailsVM.ClearPrescribedQuantity();
        if (
          (this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Reorder &&
            this.oBasicDetailsVM.actualClerkingValues != null &&
            !String.IsNullOrEmpty(
              this.oBasicDetailsVM.actualClerkingValues.FluidFreetext
            ) &&
            String.Compare(
              this.oBasicDetailsVM.actualClerkingValues.FluidFreetext,
              value
            ) != 0) ||
          (this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
        ) {
          this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
          this.oBasicDetailsVM.SetOnadmissionValue(value, this.FluidFreetext);
        }
      }
      this._fluidfreetext = value;
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('FluidFreetext')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('FluidFreetext');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        if (
          !String.IsNullOrEmpty(this._fluidfreetext) &&
          String.IsNullOrEmpty(value) &&
          this.FluidOID > 0 &&
          !String.IsNullOrEmpty(this.FluidLorenzoID) &&
          this.oBasicDetailsVM.oPrescitemVM != null
        ) {
          this.FluidOID = 0;
          this.FluidLorenzoID = String.Empty;
          this.FluidPrescribableItemListOID = 0;
          if (
            PatientContext.IsINFUSIONON &&
            this.oBasicDetailsVM.Route != null &&
            this.oBasicDetailsVM.Route.Tag != null &&
            !String.IsNullOrEmpty(this.oBasicDetailsVM.Route.Tag.ToString()) &&
            String.Equals(this.oBasicDetailsVM.Route.Tag.ToString(), '1')
          ) {
            this.oBasicDetailsVM.oPrescitemVM.AllergenCheck = false;
            this.oBasicDetailsVM.oPrescitemVM.GenerateConflictsForInpatient(
              this.oBasicDetailsVM.oPrescitemVM.objItems
            );
          }
        }
        if (this.FluidSelectvalue != null && String.IsNullOrEmpty(value)) {
          this.FluidSelectvalue = null;
        }
        if (
          (this.IsinfusRateBasedOnDD || this.IsinfusRateBasedOnDDforClerking) &&
          this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.InfusionType != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value)
        ) {
          if (
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS
            )
          ) {
            this.IsConcentrationVisible = Visibility.Visible;
            this.IsConcentrationMandatory = false;
          } else if (
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            )
          ) {
            this.IsVolumeVisible = Visibility.Visible;
            this.IsVolumeMandatory =
              String.Compare(
                PatientContext.PrescriptionType,
                PrescriptionTypes.Clerking,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0
                ? true
                : false;
          }
        }
        if (
          String.IsNullOrEmpty(value) &&
          this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.InfusionType != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value)
        ) {
          if (
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS
            ) &&
            !this.IsinfusRateBasedOnDD &&
            !this.IsinfusRateBasedOnDDforClerking
          ) {
            this.LowConcentration = String.Empty;
            this.UpperConcentration = String.Empty;
            this.LowConcentrationUOM = null;
            this.UpperConcentrationUOM = null;
            this.IsConcentrationVisible = Visibility.Collapsed;
          } else if (
            (String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) ||
              String.Equals(
                this.oBasicDetailsVM.InfusionType.Value,
                InfusionTypesCode.INTERMITTENT
              )) &&
            !this.IsinfusRateBasedOnDD &&
            !this.IsinfusRateBasedOnDDforClerking
          ) {
            this.FluidVolume = String.Empty;
            this.VolumeUOM = null;
            this.IsVolumeVisible = Visibility.Collapsed;
          }
        } else if (
          !String.IsNullOrEmpty(value) &&
          this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.InfusionType != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value)
        ) {
          if (
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS
            )
          ) {
            this.IsConcentrationVisible = Visibility.Visible;
          } else if (
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) ||
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.INTERMITTENT
            )
          ) {
            this.IsVolumeVisible = Visibility.Visible;
          }
        } else if (
          this.oBasicDetailsVM.InfusionType == null &&
          this.oBasicDetailsVM.IsInfContiniousFormLoaded &&
          !String.IsNullOrEmpty(value)
        ) {
          this.IsConcentrationVisible = Visibility.Visible;
        } else if (
          this.oBasicDetailsVM.InfusionType == null &&
          this.oBasicDetailsVM.IsInfContiniousFormLoaded &&
          String.IsNullOrEmpty(value) &&
          !this.IsinfusRateBasedOnDD &&
          !this.IsinfusRateBasedOnDDforClerking
        ) {
          this.LowConcentration = String.Empty;
          this.UpperConcentration = String.Empty;
          this.LowConcentrationUOM = null;
          this.UpperConcentrationUOM = null;
          this.IsConcentrationVisible = Visibility.Collapsed;
        }
        if (
          String.IsNullOrEmpty(value) &&
          this.oBasicDetailsVM != null &&
          (this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
            ActivityTypes.Prescribe ||
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Amend) &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
          (this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus == null ||
            String.Equals(
              this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus,
              CConstants.AWAITINGAUTHORISE,
              StringComparison.InvariantCultureIgnoreCase
            ))
        ) {
          let IsAuthorise: string = this.oBasicDetailsVM.IsAuthorise
            ? '1'
            : String.Empty;
          if (this.oBasicDetailsVM.IsOrgAuthorise) {
            this.oBasicDetailsVM.IndentifyingDrugName = null;
            this.oBasicDetailsVM.IndentifyingDrugName =
              this.oBasicDetailsVM.IdentifyingName + CConstants.sAuthoriseText;
          } else {
            this.oBasicDetailsVM.IndentifyingDrugName =
              this.oBasicDetailsVM.IdentifyingName;
            this.oBasicDetailsVM.IsFluidAuthorise = false;
          }
          if (
            !this.oBasicDetailsVM.IsOrgAuthorise &&
            !this.oBasicDetailsVM.IsFluidAuthorise &&
            this.oBasicDetailsVM.IsAuthorise &&
            !this.oBasicDetailsVM.IsMCIAuthorise
          ) {
            this.oBasicDetailsVM.IsAuthorise = false;
          }
          if (this.oBasicDetailsVM.oPrescitemVM != null) {
            this.oBasicDetailsVM.oPrescitemVM.IsFluidFreetextClear =
              this._fluidfreetext == '' ? true : false;
          }
        }
        if (
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
          this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend &&
          String.Equals(
            this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus,
            CConstants.AWAITINGAUTHORISE,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          !this.oBasicDetailsVM.IsOrgAuthorise &&
          this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus != null
        ) {
          this.oBasicDetailsVM.IndentifyingDrugName =
            this.oBasicDetailsVM.IdentifyingName + CConstants.sAuthoriseText;
          this.oBasicDetailsVM.oPrescitemVM.AmendModeDisableTV = true;
        }
        if (
          String.Equals(
            ContextInfo.MenuCode,
            CConstants.ClinicallyVerifyMenuCode,
            StringComparison.InvariantCultureIgnoreCase
          ) &&
          String.Equals(
            PatientContext.PrescriptionType,
            PrescriptionTypes.ForAdministration,
            StringComparison.OrdinalIgnoreCase
          ) &&
          PatientContext.ClerkFormViewDefaultBehavior !=
            ClerkFormViewDeftBehaviour.LaunchFormMandatory &&
          (this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
            ActivityTypes.Prescribe ||
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Reorder)
        ) {
          if (
            this.oBasicDetailsVM.IsOrgAuthorise ||
            this.oBasicDetailsVM.IsFluidAuthorise
          ) {
            this.oBasicDetailsVM.IsClinicallyVerified = false;
            this.oBasicDetailsVM.IsEnableChkClinivallyVerify = false;
            this.oBasicDetailsVM.oPrescitemVM.IsClinicallyVerifyEnable = false;
          } else {
            this.oBasicDetailsVM.IsEnableChkClinivallyVerify = true;
            this.oBasicDetailsVM.oPrescitemVM.IsClinicallyVerifyEnable = true;
          }
        }
      }
      if (
        String.IsNullOrEmpty(value) &&
        !(
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.NONCATALOGUEITEM
          ) ||
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.Precatalog
          )
        )
      ) {
        this.RestoreInfusionNumerator(false, true);
      }
      // NotifyPropertyChanged("FluidFreetext");
    }
  }
  public get VolumeUOM(): CListItem {
    return this._volumeuom;
  }
  public set VolumeUOM(value: CListItem) {
    if (value != this._volumeuom) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._volumeuom = value;
        // NotifyPropertyChanged("VolumeUOM");
      } else {
        if (this.oBasicDetailsVM != null) {
          if (
            this.oBasicDetailsVM.actualClerkingValues != null &&
            ((this.oBasicDetailsVM.actualClerkingValues.VolumeUOM == null &&
              value != null &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend) ||
              (this.oBasicDetailsVM.actualClerkingValues.VolumeUOM != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues.VolumeUOM
                    .DisplayText
                ) &&
                value == null) ||
              (this.oBasicDetailsVM.actualClerkingValues.VolumeUOM != null &&
                value != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues.VolumeUOM
                    .DisplayText
                ) &&
                String.Compare(
                  this.oBasicDetailsVM.actualClerkingValues.VolumeUOM
                    .DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0))
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value);
          }
        }
        this._volumeuom = value;
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('VolumeUOM')) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('VolumeUOM');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          this.oBasicDetailsVM.ClearPrescribedQuantity();
          if (
            this.oBasicDetailsVM.InfusionType != null &&
            !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
            (String.Compare(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            ) == 0 ||
              String.Compare(
                this.oBasicDetailsVM.InfusionType.Value,
                InfusionTypesCode.FLUID
              ) == 0) &&
            this.oBasicDetailsVM.IsClearlstAmendedFlds
          ) {
            //Not Required for LHS. To be Re-Visited.
            this.oBasicDetailsVM.oPrescitemVM.LaunchInfusionrateCalculator(false);
          }
          if (!this.oBasicDetailsVM.IsInfusionRateChanged) {
            this.oBasicDetailsVM.IsInfusionRateChanged = true;
          }
        }
        // NotifyPropertyChanged("VolumeUOM");
      }
      if (this.oBasicDetailsVM != null && this.VolumeUOMList != null)
        this._volumeuom = this.oBasicDetailsVM.GetComboValue(
          value,
          this.VolumeUOMList
        );
      else this._volumeuom = value;
      if (
        this.IsVolumeVisible == Visibility.Visible &&
        !(
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.NONCATALOGUEITEM
          ) ||
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.Precatalog
          )
        )
      ) {
        if (
          String.IsNullOrEmpty(this.fluidVolume) &&
          (this.VolumeUOM == null || String.IsNullOrEmpty(this.VolumeUOM.Value))
        ) {
          this.RestoreInfusionNumerator(false, true);
        } else {
          this.RestoreInfusionNumerator(true, false);
        }
      }
      // NotifyPropertyChanged("VolumeUOM");
    }
  }
  public get BoosterDoseUOMList(): ObservableCollection<CListItem> {
    return this._boosterdoseUOMList;
  }
  public set BoosterDoseUOMList(value: ObservableCollection<CListItem>) {
    if (this._boosterdoseUOMList != value) {
      this._boosterdoseUOMList = value;
      // NotifyPropertyChanged("BoosterDoseUOMList");
    }
  }
  public get Boosterdoseuom(): CListItem {
    return this._boosterdoseuom;
  }
  public set Boosterdoseuom(value: CListItem) {
    if (value != this._boosterdoseuom) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._boosterdoseuom = value;
      } else {
        if (
          value != null &&
          value.DisplayText != null &&
          value.DisplayText == 'More'
        ) {
          value.DisplayText = "";      
          this.GetMoreComboOption(CConstants.Booster);
        }
        if (
          value != null &&
          value.Tag == null &&
          this.oBasicDetailsVM != null
        ) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('Boosterdoseuom')) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('Boosterdoseuom');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        } else {
          if (value != null) value.Tag = null;
        }
        this._boosterdoseuom = value;
      }
      if (this.BoosterDoseUOMList != null && this.oBasicDetailsVM != null)
        this._boosterdoseuom = this.oBasicDetailsVM.GetComboValue(
          value,
          this.BoosterDoseUOMList
        );
      else this._boosterdoseuom = value;
      // NotifyPropertyChanged("Boosterdoseuom");
    }
  }
  public get InfusionRateRndto(): CListItem {
    return this._infusionRateRndto;
  }
  public set InfusionRateRndto(value: CListItem) {
    if (value != this._infusionRateRndto) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._infusionRateRndto = value;
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains('InfusionRateRndto')
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('InfusionRateRndto');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
        }
        this._infusionRateRndto = value;
      }
      if (this.oBasicDetailsVM != null && this.InfusionRateRndtoList != null)
        this._infusionRateRndto = this.oBasicDetailsVM.GetComboValue(
          value,
          this.InfusionRateRndtoList
        );
      else this._infusionRateRndto = value;
      // NotifyPropertyChanged("InfusionRateRndto");
      this.CalculateInfusionRate();
    }
  }
  public get BolusUOM(): CListItem {
    return this._bolusuom;
  }
  public set BolusUOM(value: CListItem) {
    if (value != this._bolusuom) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._bolusuom = value;
      } else {
        if (
          value != null &&
          value.DisplayText != null &&
          value.DisplayText == 'More'
        ) {
          value.DisplayText = "";      
          this.GetMoreComboOption(CConstants.Bolus);
        }
        if (this.oBasicDetailsVM != null) {
          if (
            this.oBasicDetailsVM.actualClerkingValues != null &&
            ((this.oBasicDetailsVM.actualClerkingValues.BolusUOM == null &&
              value != null &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend) ||
              (this.oBasicDetailsVM.actualClerkingValues.BolusUOM != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues.BolusUOM.DisplayText
                ) &&
                value == null) ||
              (this.oBasicDetailsVM.actualClerkingValues.BolusUOM != null &&
                value != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues.BolusUOM.DisplayText
                ) &&
                String.Compare(
                  this.oBasicDetailsVM.actualClerkingValues.BolusUOM
                    .DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0))
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value);
          }
        }
        if (
          value != null &&
          value.Tag == null &&
          this.oBasicDetailsVM != null
        ) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('BolusUOM')) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('BolusUOM');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          if (this.oBasicDetailsVM != null) {
            this.oBasicDetailsVM.ClearPrescribedQuantity();
          }
        } else {
          if (value != null) value.Tag = null;
        }
        this._bolusuom = value;
      }
      if (this.BolusUOMList != null && this.oBasicDetailsVM != null)
        this._bolusuom = this.oBasicDetailsVM.GetComboValue(
          value,
          this.BolusUOMList
        );
      else this._bolusuom = value;
      // NotifyPropertyChanged("BolusUOM");
    }
  }
  private _IsERuleInfRateNumeratorUom: boolean = false;
  public get IsERuleInfRateNumeratorUom(): boolean {
    return this._IsERuleInfRateNumeratorUom;
  }
  public set IsERuleInfRateNumeratorUom(value: boolean) {
    this._IsERuleInfRateNumeratorUom = value;
  }
  public get InfRateNumeratorUOM(): ObservableCollection<CListItem> {
    return this._infusionratenumuom;
  }
  public set InfRateNumeratorUOM(value: ObservableCollection<CListItem>) {
    if (this._infusionratenumuom != value) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._infusionratenumuom = value;
        // NotifyPropertyChanged("InfRateNumeratorUOM");
      } else {
        if (
          value != null &&
          value.Count > 1 &&
          !(
            String.Equals(
              this.oBasicDetailsVM.IdentifyingType,
              CConstants.NONCATALOGUEITEM
            ) ||
            String.Equals(
              this.oBasicDetailsVM.IdentifyingType,
              CConstants.Precatalog
            )
          )
        ) {
          this.RestoreInfusionNumerator(false, true);
        }
        this._infusionratenumuom = value;
        // NotifyPropertyChanged("InfRateNumeratorUOM");
      }
    }
  }
  public get InfRateNumeratorUom(): CListItem {
    return this._infratenumeratoruom;
  }
  public set InfRateNumeratorUom(value: CListItem) {
    if (value != this._infratenumeratoruom) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._infratenumeratoruom = value;
      } else {
        if (this.oBasicDetailsVM != null) {
          if (
            value != null &&
            value.DisplayText != null &&
            value.DisplayText == 'More'
          ) {
            value.DisplayText = "";     
            this.GetMoreComboOption(CConstants.TypeInInfusionRateNumerator);
          }
          if (
            this.InfRateNumeratorUom != null &&
            this.InfRateNumeratorUom.Tag != null &&
            this.InfRateNumeratorUom.Tag.ToString().Contains('ERule') &&
            value == null
          ) {
          } else if (!this.IsERuleInfRateNumeratorUom) {
            let _NotChanged: boolean = false;
            if (
              value != null &&
              this._infratenumeratoruom != null &&
              value.Value == this._infratenumeratoruom.Value
            ) {
              _NotChanged = true;
            }
            if (!_NotChanged) {
              this.oBasicDetailsVM.IsenableRSNFORMOD = true;
              this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
              this.oBasicDetailsVM.IsenableModificationcomments = true;
            }
            if (
              this.oBasicDetailsVM.actualClerkingValues != null &&
              ((this.oBasicDetailsVM.actualClerkingValues.InfRateNumeratorUom ==
                null &&
                value != null &&
                !String.IsNullOrEmpty(value.DisplayText) &&
                this.oBasicDetailsVM.oPrescitemVM != null &&
                this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                  ActivityTypes.Amend) ||
                (this.oBasicDetailsVM.actualClerkingValues
                  .InfRateNumeratorUom != null &&
                  !String.IsNullOrEmpty(
                    this.oBasicDetailsVM.actualClerkingValues
                      .InfRateNumeratorUom.DisplayText
                  ) &&
                  value == null) ||
                (this.oBasicDetailsVM.actualClerkingValues
                  .InfRateNumeratorUom != null &&
                  value != null &&
                  !String.IsNullOrEmpty(
                    this.oBasicDetailsVM.actualClerkingValues
                      .InfRateNumeratorUom.DisplayText
                  ) &&
                  String.Compare(
                    this.oBasicDetailsVM.actualClerkingValues
                      .InfRateNumeratorUom.DisplayText,
                    value.DisplayText,
                    StringComparison.CurrentCultureIgnoreCase
                  ) != 0))
            ) {
              this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
              this.oBasicDetailsVM.SetOnadmissionValue(value);
            }
            if (
              !this.oBasicDetailsVM.lstAmendedFlds.Contains(
                'InfRateNumeratorUom'
              )
            ) {
              this.oBasicDetailsVM.lstAmendedFlds.Add('InfRateNumeratorUom');
              if (
                this.oBasicDetailsVM.bIsAmend &&
                !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.ForAdministration &&
                this.oBasicDetailsVM.IsenableRSNFORMOD
              ) {
                this.oBasicDetailsVM.DoChangesForAmend();
              }
            }
          }
          if (
            value != null &&
            !String.IsNullOrEmpty(value.DisplayText) != null &&
            this._infratenumeratoruom != null &&
            !String.IsNullOrEmpty(this._infratenumeratoruom.DisplayText) &&
            !String.Equals(
              value.DisplayText,
              this._infratenumeratoruom.DisplayText,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.oBasicDetailsVM.ClearPrescribedQuantity();
          }
          if (!this.oBasicDetailsVM.IsInfusionRateChanged) {
            this.oBasicDetailsVM.IsInfusionRateChanged = true;
          }
        }
        this._infratenumeratoruom = value;
      }
      if (this.InfRateNumeratorUOM != null && this.oBasicDetailsVM != null) {
        let selectedVal: CListItem = null;
        if (this.IsinfusRateBasedOnDD) {
          if (value != null) {
            for (let i=0; i< this.InfRateNumeratorUOM.Count; i++){
              let oItem: CListItem = this.InfRateNumeratorUOM[i];                        
              if (oItem.DisplayText == value.DisplayText) {
                selectedVal = oItem;
                value = selectedVal;
                break;
              }
            }
          }
          this._infratenumeratoruom =
            selectedVal == null
              ? this.oBasicDetailsVM.GetComboValue(
                  value,
                  this.InfRateNumeratorUOM
                )
              : value;
        } else {
          this._infratenumeratoruom = this.oBasicDetailsVM.GetComboValue(
            value,
            this.InfRateNumeratorUOM
          );
        }
      } else this._infratenumeratoruom = value;
      if (
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.IsRecordAdminTabEnabled &&
        this.InfRateNumeratorUom != null &&
        this.InfRateDinominatorUom != null &&
        !String.IsNullOrEmpty(this.InfRateNumeratorUom.DisplayText) &&
        !String.IsNullOrEmpty(this.InfRateDinominatorUom.DisplayText)
      ) {
        this.oBasicDetailsVM.RecordAdmin.InfusionRateUOMValue =
          this.InfRateNumeratorUom.DisplayText +
          '/' +
          this.InfRateDinominatorUom.DisplayText;
        if (
          !String.Equals(
            this.Rate,
            this.oBasicDetailsVM.RecordAdmin.InfusionRate,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          this.oBasicDetailsVM.RecordAdmin.InfusionRate = this.Rate;
        }
      }
      this.IsERuleInfRateNumeratorUom = false;
      // NotifyPropertyChanged("InfRateNumeratorUom");
      this.DCAmendMessageInf();
    }
  }
  public get InfRateDinominatorUom(): CListItem {
    return this._infrateDenominatoruom;
  }
  public set InfRateDinominatorUom(value: CListItem) {
    if (value != this._infrateDenominatoruom) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._infrateDenominatoruom = value;
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            this.oBasicDetailsVM.actualClerkingValues != null &&
            ((this.oBasicDetailsVM.actualClerkingValues.InfRateDinominatorUom ==
              null &&
              value != null &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend) ||
              (this.oBasicDetailsVM.actualClerkingValues
                .InfRateDinominatorUom != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues
                    .InfRateDinominatorUom.DisplayText
                ) &&
                value == null) ||
              (this.oBasicDetailsVM.actualClerkingValues
                .InfRateDinominatorUom != null &&
                value != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues
                    .InfRateDinominatorUom.DisplayText
                ) &&
                String.Compare(
                  this.oBasicDetailsVM.actualClerkingValues
                    .InfRateDinominatorUom.DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0))
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value);
          }
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains(
              'InfRateDinominatorUom'
            )
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('InfRateDinominatorUom');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          if (
            value != null &&
            !String.IsNullOrEmpty(value.DisplayText) != null &&
            this._infrateDenominatoruom != null &&
            !String.IsNullOrEmpty(this._infrateDenominatoruom.DisplayText) &&
            !String.Equals(
              value.DisplayText,
              this._infrateDenominatoruom.DisplayText,
              StringComparison.InvariantCultureIgnoreCase
            )
          ) {
            this.oBasicDetailsVM.ClearPrescribedQuantity();
          }
          if (!this.oBasicDetailsVM.IsInfusionRateChanged) {
            this.oBasicDetailsVM.IsInfusionRateChanged = true;
          }
        }
        this._infrateDenominatoruom = value;
      }
      if (this.InfRateDenominatorUOM != null && this.oBasicDetailsVM != null) {
        let selectedVal: CListItem = null;
        if (this.IsinfusRateBasedOnDD) {
          if (value != null) {
            for(let i=0; i < this.InfRateDenominatorUOM.Count; i++){
              let oItem : CListItem = this.InfRateDenominatorUOM[i];     
              if (oItem.DisplayText == value.DisplayText) {
                selectedVal = oItem;
                value = selectedVal;
                break;
              }
            }
          }
          this._infrateDenominatoruom =
            selectedVal == null
              ? this.oBasicDetailsVM.GetComboValue(
                  value,
                  this.InfRateDenominatorUOM
                )
              : value;
        } else {
          this._infrateDenominatoruom = this.oBasicDetailsVM.GetComboValue(
            value,
            this.InfRateDenominatorUOM
          );
        }
      } else this._infrateDenominatoruom = value;
      if (
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.IsRecordAdminTabEnabled &&
        this.InfRateNumeratorUom != null &&
        this.InfRateDinominatorUom != null &&
        !String.IsNullOrEmpty(this.InfRateNumeratorUom.DisplayText) &&
        !String.IsNullOrEmpty(this.InfRateDinominatorUom.DisplayText)
      ) {
        this.oBasicDetailsVM.RecordAdmin.InfusionRateUOMValue =
          this.InfRateNumeratorUom.DisplayText +
          '/' +
          this.InfRateDinominatorUom.DisplayText;
        if (
          !String.Equals(
            this.Rate,
            this.oBasicDetailsVM.RecordAdmin.InfusionRate,
            StringComparison.CurrentCultureIgnoreCase
          )
        ) {
          this.oBasicDetailsVM.RecordAdmin.InfusionRate = this.Rate;
        }
      }
      // NotifyPropertyChanged("InfRateDinominatorUom");
      this.DCAmendMessageInf();
    }
  }
  public get InfusionPeriodUom(): CListItem {
    return this._infusionperioduom;
  }
  public set InfusionPeriodUom(value: CListItem) {
    if (value != this._infusionperioduom) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._infusionperioduom = value;
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains('InfusionPeriodUom')
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('InfusionPeriodUom');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        }
        this._infusionperioduom = value;
      }
      if (this.InfusionPeriodUOM != null && this.oBasicDetailsVM != null)
        this._infusionperioduom = this.oBasicDetailsVM.GetComboValue(
          value,
          this.InfusionPeriodUOM
        );
      else this._infusionperioduom = value;
      if (
        (this.oBasicDetailsVM.InfusionType != null &&
          this.oBasicDetailsVM.InfusionType.Value ==
            InfusionTypesCode.CONTINUOUS) ||
        this.oBasicDetailsVM.InfusionType == null
      ) {
        if (
          !String.IsNullOrEmpty(this.infusionPeriod) ||
          (this.InfusionPeriodUom != null &&
            !String.IsNullOrEmpty(this.InfusionPeriodUom.Value))
        ) {
          this.IsenableChksequentialPresitem = true;
        } else {
          this.IsenableChksequentialPresitem = false;
          this.IsChksequentialPresitem = false;
        }
      }
      if (
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        (String.Compare(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        ) == 0 ||
          String.Compare(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.FLUID
          ) == 0) &&
        this.oBasicDetailsVM.IsClearlstAmendedFlds
      ) {
        //Not Required for LHS. To be Re-Visited.
        this.oBasicDetailsVM.oPrescitemVM.LaunchInfusionrateCalculator(false);
      }
      if (
        this.oBasicDetailsVM.DoseType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.DoseType.Value) &&
        (String.Equals(
          this.oBasicDetailsVM.DoseType.Value,
          DoseTypeCode.CONDITIONAL
        ) ||
          String.Equals(
            this.oBasicDetailsVM.DoseType.Value,
            DoseTypeCode.STEPPEDVARIABLE
          ))
      ) {
        if (!String.IsNullOrEmpty(this.InfusionPeriod)) {
          if (
            String.Equals(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE
            )
          ) {
            this.oBasicDetailsVM.IsEnableInfusionRateSteppedVariable = false;
          } else if (
            String.Equals(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.CONDITIONAL
            ) &&
            this.oBasicDetailsVM.ConditionalDosingDetails != null
          ) {
            if (
              this.oBasicDetailsVM.InfusionType != null &&
              !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
              String.Equals(
                this.oBasicDetailsVM.InfusionType.Value,
                InfusionTypesCode.INTERMITTENT,
                StringComparison.OrdinalIgnoreCase
              )
            ) {
              this.oBasicDetailsVM.ConditionalDosingDetails.IsCondInfusionRateEnable =
                false;
            }
          }
        } else {
          if (
            String.Equals(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE
            )
          ) {
            this.oBasicDetailsVM.IsEnableInfusionRateSteppedVariable = true;
          } else if (
            String.Equals(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.CONDITIONAL
            ) &&
            this.oBasicDetailsVM.ConditionalDosingDetails != null
          ) {
            if (
              this.oBasicDetailsVM.InfusionType != null &&
              !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
              String.Equals(
                this.oBasicDetailsVM.InfusionType.Value,
                InfusionTypesCode.INTERMITTENT,
                StringComparison.OrdinalIgnoreCase
              )
            ) {
              this.oBasicDetailsVM.ConditionalDosingDetails.IsCondInfusionRateEnable =
                true;
            }
          }
        }
        if (this._infusionperioduom == null) {
          if (
            String.Equals(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.STEPPEDVARIABLE
            )
          ) {
            this.oBasicDetailsVM.IsEnableInfusionRateSteppedVariable = true;
          } else if (
            String.Equals(
              this.oBasicDetailsVM.DoseType.Value,
              DoseTypeCode.CONDITIONAL
            ) &&
            this.oBasicDetailsVM.ConditionalDosingDetails != null
          ) {
            if (
              this.oBasicDetailsVM.InfusionType != null &&
              !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
              String.Equals(
                this.oBasicDetailsVM.InfusionType.Value,
                InfusionTypesCode.INTERMITTENT,
                StringComparison.OrdinalIgnoreCase
              )
            ) {
              this.oBasicDetailsVM.ConditionalDosingDetails.IsCondInfusionRateEnable =
                true;
            }
          }
        }
      }
      if (!this.oBasicDetailsVM.IsInfusionRateChanged) {
        this.oBasicDetailsVM.IsInfusionRateChanged = true;
      }
      // NotifyPropertyChanged("InfusionPeriodUom");
    }
  }
  public get LockoutDuration(): CListItem {
    return this._lockoutduration;
  }
  public set LockoutDuration(value: CListItem) {
    if (value != this._lockoutduration) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._lockoutduration = value;
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            this.oBasicDetailsVM.actualClerkingValues != null &&
            ((this.oBasicDetailsVM.actualClerkingValues.LockoutDuration ==
              null &&
              value != null &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend) ||
              (this.oBasicDetailsVM.actualClerkingValues.LockoutDuration !=
                null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues.LockoutDuration
                    .DisplayText
                ) &&
                value == null) ||
              (this.oBasicDetailsVM.actualClerkingValues.LockoutDuration !=
                null &&
                value != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues.LockoutDuration
                    .DisplayText
                ) &&
                String.Compare(
                  this.oBasicDetailsVM.actualClerkingValues.LockoutDuration
                    .DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0))
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value);
          }
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains('LockoutDuration')
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('LockoutDuration');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        }
        this._lockoutduration = value;
      }
      if (this.LockoutDurationList != null && this.oBasicDetailsVM != null)
        this._lockoutduration = this.oBasicDetailsVM.GetComboValue(
          value,
          this.LockoutDurationList
        );
      else this._lockoutduration = value;
      // NotifyPropertyChanged("LockoutDuration");
    }
  }
  private _MonitoringPeriod: string;
  public get MonitoringPeriod(): string {
    return this._MonitoringPeriod;
  }
  public set MonitoringPeriod(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this._MonitoringPeriod = value;
      // NotifyPropertyChanged("MonitoringPeriod");
    } else {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('MonitoringPeriod')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('MonitoringPeriod');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
      }
      this._MonitoringPeriod = value;
      // NotifyPropertyChanged("MonitoringPeriod");
    }
  }
  private _MonitoringPeriodUom: CListItem;
  public get MonitoringPeriodUOM(): CListItem {
    return this._MonitoringPeriodUom;
  }
  public set MonitoringPeriodUOM(value: CListItem) {
    if (value != this._MonitoringPeriodUom) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._MonitoringPeriodUom = value;
        // NotifyPropertyChanged("MonitoringPeriodUOM");
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains('MonitoringPeriodUOM')
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('MonitoringPeriodUOM');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
        }
        if (this.MonitoringPeriodList != null && this.oBasicDetailsVM != null)
          this._MonitoringPeriodUom = this.oBasicDetailsVM.GetComboValue(
            value,
            this.MonitoringPeriodList
          );
        else this._MonitoringPeriodUom = value;
        // NotifyPropertyChanged("MonitoringPeriodUOM");
      }
    }
  }
  private _MonitoringPeriodList: ObservableCollection<CListItem>;
  public get MonitoringPeriodList(): ObservableCollection<CListItem> {
    return this._MonitoringPeriodList;
  }
  public set MonitoringPeriodList(value: ObservableCollection<CListItem>) {
    if (this._MonitoringPeriodList != value) {
      this._MonitoringPeriodList = value;
      // NotifyPropertyChanged("MonitoringPeriodList");
    }
  }
  public get DeliveryDeviceList(): ObservableCollection<CListItem> {
    return this.deliveryDeviceList;
  }
  public set DeliveryDeviceList(value: ObservableCollection<CListItem>) {
    this.deliveryDeviceList = value;
    // NotifyPropertyChanged("DeliveryDeviceList");
  }
  private _isDeliveryDeviceVisible: Visibility = Visibility.Visible;
  public get IsDeliveryDeviceVisible(): Visibility {
    return this._isDeliveryDeviceVisible;
  }
  public set IsDeliveryDeviceVisible(value: Visibility) {
    this._isDeliveryDeviceVisible = value;
    // super.NotifyPropertyChanged("IsDeliveryDeviceVisible");
  }
  private _isVolumeVisible: Visibility = Visibility.Visible;
  public get IsVolumeVisible(): Visibility {
    if (
      this._isVolumeVisible == Visibility.Visible &&
      PatientContext.IsINFUSIONON &&
      this.oBasicDetailsVM != null &&
      ((this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        (String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS
        ) ||
          ((this.FluidSelectvalue == null ||
            (this.FluidSelectvalue != null &&
              String.IsNullOrEmpty(this.FluidSelectvalue.DisplayText))) &&
            !this.IsinfusRateBasedOnDD &&
            !this.IsinfusRateBasedOnDDforClerking &&
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME
            )) ||
          ((this.FluidSelectvalue == null ||
            (this.FluidSelectvalue != null &&
              String.IsNullOrEmpty(this.FluidSelectvalue.DisplayText))) &&
            String.Equals(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.INTERMITTENT
            )))) ||
        (this.oBasicDetailsVM.InfusionType == null &&
          this.oBasicDetailsVM.IsInfContiniousFormLoaded &&
          (this.FluidSelectvalue == null ||
            (this.FluidSelectvalue != null &&
              String.IsNullOrEmpty(this.FluidSelectvalue.DisplayText)))))
    ) {
      this._isVolumeVisible = Visibility.Collapsed;
      if (
        !(
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.NONCATALOGUEITEM
          ) ||
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.Precatalog
          )
        ) &&
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        !String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS
        )
      ) {
        this.RestoreInfusionNumerator(false, true);
      }
    }
    if (
      PatientContext.IsINFUSIONON &&
      this.oBasicDetailsVM != null &&
      this.oBasicDetailsVM.InfusionType != null &&
      !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
      ((((this.FluidSelectvalue != null &&
        !String.IsNullOrEmpty(this.FluidSelectvalue.DisplayText)) ||
        this.IsinfusRateBasedOnDD ||
        this.IsinfusRateBasedOnDDforClerking) &&
        String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME
        )) ||
        (this.FluidSelectvalue != null &&
          !String.IsNullOrEmpty(this.FluidSelectvalue.DisplayText) &&
          String.Equals(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.INTERMITTENT
          )) ||
        String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.FLUID
        ))
    ) {
      this._isVolumeVisible = Visibility.Visible;
    }
    return this._isVolumeVisible;
  }
  public set IsVolumeVisible(value: Visibility) {
    this._isVolumeVisible = value;
    // super.NotifyPropertyChanged("IsVolumeVisible");
  }
  private _isVolumeMandatory: boolean = false;
  public get IsVolumeMandatory(): boolean {
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.CurrentCultureIgnoreCase
      ) != 0 &&
      PatientContext.IsINFUSIONON &&
      this.oBasicDetailsVM != null &&
      this.oBasicDetailsVM.InfusionType != null &&
      !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
      (String.Compare(
        this.oBasicDetailsVM.InfusionType.Value,
        InfusionTypesCode.FLUID,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0 ||
        (String.Compare(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.SINGLEDOSEVOLUME,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 &&
          this.IsinfusRateBasedOnDD))
    ) {
      this._isVolumeMandatory = true;
    }
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.CurrentCultureIgnoreCase
      ) == 0
    ) {
      this._isVolumeMandatory = false;
    }
    return this._isVolumeMandatory;
  }
  public set IsVolumeMandatory(value: boolean) {
    if (value != this._isVolumeMandatory) {
      this._isVolumeMandatory = value;
      // super.NotifyPropertyChanged("IsVolumeMandatory");
    }
  }
  private _isInfusionPeriodMandatory: boolean = false;
  public get IsInfusionPeriodMandatory(): boolean {
    if (
      String.Compare(
        PatientContext.PrescriptionType,
        PrescriptionTypes.Clerking,
        StringComparison.CurrentCultureIgnoreCase
      ) != 0 &&
      PatientContext.IsINFUSIONON &&
      this.oBasicDetailsVM != null &&
      this.oBasicDetailsVM.InfusionType != null &&
      !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
      String.Equals(
        this.oBasicDetailsVM.InfusionType.Value,
        InfusionTypesCode.FLUID
      )
    ) {
      this._isInfusionPeriodMandatory = true;
    }
    return this._isInfusionPeriodMandatory;
  }
  public set IsInfusionPeriodMandatory(value: boolean) {
    if (value != this._isInfusionPeriodMandatory) {
      this._isInfusionPeriodMandatory = value;
      // super.NotifyPropertyChanged("IsInfusionPeriodMandatory");
    }
  }
  private _isConcentrationVisible: Visibility = Visibility.Visible;
  public get IsConcentrationVisible(): Visibility {
    if (
      (this._isConcentrationVisible == Visibility.Visible &&
        PatientContext.IsINFUSIONON &&
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        ((String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS
        ) &&
          String.IsNullOrEmpty(this.FluidFreetext) &&
          !this.IsinfusRateBasedOnDD &&
          !this.IsinfusRateBasedOnDDforClerking &&
          !this.IsDelDevSelectedforConditional) ||
          String.Equals(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.FLUID
          ) ||
          String.Equals(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.SINGLEDOSEVOLUME
          ))) ||
      (this.oBasicDetailsVM.InfusionType == null &&
        this.oBasicDetailsVM.IsInfContiniousFormLoaded &&
        String.IsNullOrEmpty(this.FluidFreetext))
    ) {
      if (
        this.DeliveryDevice != null &&
        ProfileData.InfusionPresConfig != null
      ) {
        let InfusionrateNUMDEMUOM =
          ProfileData.InfusionPresConfig.objInfusDeliveryDevice
            .Where(
              (UOMDEMO) => UOMDEMO.DeviceName == this.deliveryDevice.DisplayText
            )
            .Select((UOMDEMO) => UOMDEMO)
            .FirstOrDefault();
        if (
          InfusionrateNUMDEMUOM != null &&
          !String.IsNullOrEmpty(InfusionrateNUMDEMUOM.InfusionRateNumUOMCode) &&
          !String.IsNullOrEmpty(InfusionrateNUMDEMUOM.InfusionRateDenomUOMCode)
        ) {
          this.IsinfusRateBasedOnDDforClerking = true;
        }
        if (
          this._isConcentrationVisible == Visibility.Visible &&
          ((this.IsinfusRateBasedOnDDforClerking &&
            this.oBasicDetailsVM.InfusionType != null &&
            !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
            String.Compare(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.CONTINUOUS,
              StringComparison.CurrentCultureIgnoreCase
            ) == 0) ||
            (this.oBasicDetailsVM.InfusionType == null &&
              this.oBasicDetailsVM.InfusionDetails.DeliveryDevice != null &&
              this.oBasicDetailsVM.InfusionDetails.IsenableDeliverydevice &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.InfusionDetails.DeliveryDeviceFreetext
              )))
        ) {
          this._isConcentrationVisible = Visibility.Visible;
        } else {
          this._isConcentrationVisible = Visibility.Collapsed;
        }
      } else {
        this._isConcentrationVisible = Visibility.Collapsed;
      }
      if (
        (!(
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.NONCATALOGUEITEM
          ) ||
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.Precatalog
          )
        ) &&
          this.oBasicDetailsVM.InfusionType != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
          String.Equals(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS
          )) ||
        (this.oBasicDetailsVM.InfusionType == null &&
          this.oBasicDetailsVM.IsInfContiniousFormLoaded)
      ) {
        this.RestoreInfusionNumerator(false, true);
      }
    }
    return this._isConcentrationVisible;
  }
  public set IsConcentrationVisible(value: Visibility) {
    this._isConcentrationVisible = value;
    // super.NotifyPropertyChanged("IsConcentrationVisible");
  }
  private _isInfusionRateReadOnly: boolean = false;
  public get IsInfusionRateReadOnly(): boolean {
    return this._isInfusionRateReadOnly;
  }
  public set IsInfusionRateReadOnly(value: boolean) {
    if (value != this._isInfusionRateReadOnly) {
      this._isInfusionRateReadOnly = value;
      // super.NotifyPropertyChanged("IsInfusionRateReadOnly");
    }
  }
  private _isBtnClicked: boolean = false;
  public get IsBtnClicked(): boolean {
    return this._isBtnClicked;
  }
  public set IsBtnClicked(value: boolean) {
    if (value != this._isBtnClicked) {
      this._isBtnClicked = value;
      // super.NotifyPropertyChanged("IsBtnClicked");
    }
  }
  private _isConcentrationMandatory: boolean = false;
  public get IsConcentrationMandatory(): boolean {
    return this._isConcentrationMandatory;
  }
  public set IsConcentrationMandatory(value: boolean) {
    if (value != this._isConcentrationMandatory) {
      this._isConcentrationMandatory = value;
      // super.NotifyPropertyChanged("IsConcentrationMandatory");
    }
  }
  public get VolumeUOMList(): ObservableCollection<CListItem> {
    return this.__volumeUOM;
  }
  public set VolumeUOMList(value: ObservableCollection<CListItem>) {
    if (this.__volumeUOM != value) {
      this.__volumeUOM = value;
      // NotifyPropertyChanged("VolumeUOMList");
    }
  }
  public get BolusUOMList(): ObservableCollection<CListItem> {
    return this.__bolusUOM;
  }
  public set BolusUOMList(value: ObservableCollection<CListItem>) {
    if (this.__bolusUOM != value) {
      this.__bolusUOM = value;
      // NotifyPropertyChanged("BolusUOMList");
    }
  }
  public get InfusionRateRndtoList(): ObservableCollection<CListItem> {
    return this._infusionRateRndtoList;
  }
  public set InfusionRateRndtoList(value: ObservableCollection<CListItem>) {
    if (this._infusionRateRndtoList != value) {
      this._infusionRateRndtoList = value;
      // NotifyPropertyChanged("InfusionRateRndtoList");
    }
  }
  public get InfRateDenominatorUOM(): ObservableCollection<CListItem> {
    return this._infusionratedenouom;
  }
  public set InfRateDenominatorUOM(value: ObservableCollection<CListItem>) {
    if (this._infusionratedenouom != value) {
      this._infusionratedenouom = value;
      // NotifyPropertyChanged("InfRateDenominatorUOM");
    }
  }
  public get InfusionPeriodUOM(): ObservableCollection<CListItem> {
    return this._infusionperioduomList;
  }
  public set InfusionPeriodUOM(value: ObservableCollection<CListItem>) {
    if (this._infusionperioduomList != value) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._infusionperioduomList = value;
        // NotifyPropertyChanged("InfusionPeriodUOM");
      } else {
        this._infusionperioduomList = value;
        // NotifyPropertyChanged("InfusionPeriodUOM");
      }
    }
  }
  public get LockoutDurationList(): ObservableCollection<CListItem> {
    return this._lockoutdurationList;
  }
  public set LockoutDurationList(value: ObservableCollection<CListItem>) {
    if (this._lockoutdurationList != value) {
      this._lockoutdurationList = value;
      // NotifyPropertyChanged("LockoutDurationList");
    }
  }
  public get IsenableInfusionratenumuom(): boolean {
    if (
      (PatientContext.IsINFUSIONON &&
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.FLUID
        )) ||
      (this.IsInfusionRateReadOnly && this.IsenableInfusionRate) ||
      (this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.InfusionDetails != null &&
        this.oBasicDetailsVM.InfusionDetails.IsinfusRateBasedOnDD &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0)
    ) {
      this._isenableInfusionratenumuom = false;
    }
    return (
      this._isenableInfusionratenumuom &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableInfusionratenumuom(value: boolean) {
    this._isenableInfusionratenumuom = value;
    // NotifyPropertyChanged("IsenableInfusionratenumuom");
  }
  public get IsenableInfusionratenumuomlbl(): boolean {
    return (
      this._isenableInfusionratenumuomlbl &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableInfusionratenumuomlbl(value: boolean) {
    this._isenableInfusionratenumuomlbl = value;
    // NotifyPropertyChanged("IsenableInfusionratenumuomlbl");
  }
  public get IsenableInfusionrateDenominatoruom(): boolean {
    if (
      (PatientContext.IsINFUSIONON &&
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.FLUID
        )) ||
      (this.IsInfusionRateReadOnly && this.IsenableInfusionRate) ||
      (this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.InfusionDetails != null &&
        this.oBasicDetailsVM.InfusionDetails.IsinfusRateBasedOnDD &&
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) != 0)
    ) {
      this._isenableInfusionrateDenominatoruom = false;
    }
    return (
      this._isenableInfusionrateDenominatoruom &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableInfusionrateDenominatoruom(value: boolean) {
    this._isenableInfusionrateDenominatoruom = value;
    // NotifyPropertyChanged("IsenableInfusionrateDenominatoruom");
  }
  public get IsenableInfusionrateCalculator(): boolean {
    if (
      PatientContext.IsINFUSIONON &&
      this.oBasicDetailsVM != null &&
      this.oBasicDetailsVM.InfusionType != null &&
      !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
      String.Equals(
        this.oBasicDetailsVM.InfusionType.Value,
        InfusionTypesCode.SINGLEDOSEVOLUME
      )
    ) {
      this._isenableInfusionrateCalculator = false;
      if (
        !this.oBasicDetailsVM.InfusionDetails.IsinfusRateBasedOnDD &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.CheckAllThreeAvailable()
      ) {
        this._isenableInfusionrateCalculator = true;
      } else if (
        String.Compare(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.CurrentCultureIgnoreCase
        ) == 0 &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.CheckAllThreeAvailable()
      ) {
        this._isenableInfusionrateCalculator = true;
      }
    }
    return (
      this._isenableInfusionrateCalculator &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableInfusionrateCalculator(value: boolean) {
    this._isenableInfusionrateCalculator = value;
    // NotifyPropertyChanged("IsenableInfusionrateCalculator");
  }
  public get TargetLowerSatRange(): string {
    return this._targetLowerSatRange;
  }
  public set TargetLowerSatRange(value: string) {
    if (this._targetLowerSatRange != value) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._targetLowerSatRange = value;
        // NotifyPropertyChanged("TargetLowerSatRange");
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Reorder &&
              this.oBasicDetailsVM.actualClerkingValues != null &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.TargetLowerSatRange
              ) &&
              String.Compare(
                this.oBasicDetailsVM.actualClerkingValues.TargetLowerSatRange,
                value
              ) != 0) ||
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend)
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(
              value,
              this._targetLowerSatRange
            );
          }
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains('TargetLowerSatRange')
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('TargetLowerSatRange');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
        }
        this._targetLowerSatRange = value;
        // NotifyPropertyChanged("TargetLowerSatRange");
      }
    }
  }
  public get TargetUpperSatRange(): string {
    return this._targetUpperSatRange;
  }
  public set TargetUpperSatRange(value: string) {
    if (this._targetUpperSatRange != value) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._targetUpperSatRange = value;
        // NotifyPropertyChanged("TargetUpperSatRange");
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Reorder &&
              this.oBasicDetailsVM.actualClerkingValues != null &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.TargetUpperSatRange
              ) &&
              String.Compare(
                this.oBasicDetailsVM.actualClerkingValues.TargetUpperSatRange,
                value
              ) != 0) ||
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend)
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(
              value,
              this._targetUpperSatRange
            );
          }
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains('TargetUpperSatRange')
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('TargetUpperSatRange');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
        }
        this._targetUpperSatRange = value;
        // NotifyPropertyChanged("TargetUpperSatRange");
      }
    }
  }
  public get InfusionRateRndtoValue(): CListItem {
    return this._infusonraterndtovalue;
  }
  public set InfusionRateRndtoValue(value: CListItem) {
    if (value != null) {
      this._infusonraterndtovalue = value;
      // NotifyPropertyChanged("InfusionRateRndtoValue");
    }
  }
  public get PrescribedDoseValue(): string {
    return this._prescribedDoseValue;
  }
  public set PrescribedDoseValue(value: string) {
    if (value != null) {
      this._prescribedDoseValue = value;
      // NotifyPropertyChanged("PrescribedDoseValue");
    }
  }
  public get PrescribedDoseUOMValue(): CListItem {
    return this._prescribedDoseUOMValue;
  }
  public set PrescribedDoseUOMValue(value: CListItem) {
    if (value != null) {
      this._prescribedDoseUOMValue = value;
      // NotifyPropertyChanged("PrescribedvValue");
    }
  }
  public get InfusionRateValue(): string {
    return this._infusionRateValue;
  }
  public set InfusionRateValue(value: string) {
    if (value != null) {
      if (
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.oPrescitemVM != null &&
          this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
            ActivityTypes.Reorder &&
          !String.IsNullOrEmpty(this._infusionRateValue)) ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.oPrescitemVM != null &&
          this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
      ) {
        this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
        this.oBasicDetailsVM.SetOnadmissionValue(
          value,
          this._infusionRateValue
        );
      }
      this._infusionRateValue = value;
      // NotifyPropertyChanged("InfusionRateValue");
    }
  }
  public get InfusionRateNumValue(): CListItem {
    return this._infusionRateNumValue;
  }
  public set InfusionRateNumValue(value: CListItem) {
    if (value != null) {
      if (this.oBasicDetailsVM != null) {
        if (
          (this._infusionRateNumValue == null &&
            value != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Amend) ||
          (this._infusionRateNumValue != null && value == null) ||
          (this._infusionRateNumValue != null &&
            value != null &&
            ((!String.IsNullOrEmpty(this._infusionRateNumValue.DisplayText) &&
              String.Compare(
                this._infusionRateNumValue.DisplayText,
                value.DisplayText,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0) ||
              (String.IsNullOrEmpty(this._infusionRateNumValue.DisplayText) &&
                this.oBasicDetailsVM.oPrescitemVM != null &&
                this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                  ActivityTypes.Amend &&
                String.Compare(
                  this._infusionRateNumValue.DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0)))
        ) {
          this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
          this.oBasicDetailsVM.SetOnadmissionValue(value);
        }
      }
      this._infusionRateNumValue = value;
      // NotifyPropertyChanged("InfusionRateNumValue");
    }
  }
  public get InfusionRateDenoValue(): CListItem {
    return this._infusionRateDenoValue;
  }
  public set InfusionRateDenoValue(value: CListItem) {
    if (value != null) {
      if (this.oBasicDetailsVM != null) {
        if (
          (this._infusionRateDenoValue == null &&
            value != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Amend) ||
          (this._infusionRateDenoValue != null && value == null) ||
          (this._infusionRateDenoValue != null &&
            value != null &&
            ((!String.IsNullOrEmpty(this._infusionRateDenoValue.DisplayText) &&
              String.Compare(
                this._infusionRateDenoValue.DisplayText,
                value.DisplayText,
                StringComparison.CurrentCultureIgnoreCase
              ) != 0) ||
              (String.IsNullOrEmpty(this._infusionRateDenoValue.DisplayText) &&
                this.oBasicDetailsVM.oPrescitemVM != null &&
                this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                  ActivityTypes.Amend &&
                String.Compare(
                  this._infusionRateDenoValue.DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0)))
        ) {
          this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
          this.oBasicDetailsVM.SetOnadmissionValue(value);
        }
      }
      this._infusionRateDenoValue = value;
      // NotifyPropertyChanged("InfusionRateDenoValue");
    }
  }
  public get CalculatedInfusionrateValue(): string {
    return this._calculatedInfusionrateValue;
  }
  public set CalculatedInfusionrateValue(value: string) {
    if (value != null) {
      this._calculatedInfusionrateValue = value;
      // NotifyPropertyChanged("CalculatedInfusionrateValue");
    }
  }
  public get CalculatedInfusionrateUOM(): string {
    return this._calculatedInfusionrateUOM;
  }
  public set CalculatedInfusionrateUOM(value: string) {
    if (value != null) {
      this._calculatedInfusionrateUOM = value;
      // NotifyPropertyChanged("CalculatedInfusionrateUOM");
    }
  }
  private _isenableReviewAfter: boolean = false;
  public get IsenableReviewAfter(): boolean {
    return this._isenableReviewAfter;
  }
  public set IsenableReviewAfter(value: boolean) {
    if (value != this._isenableReviewAfter) {
      this._isenableReviewAfter = value;
      // NotifyPropertyChanged("IsenableReviewAfter");
    }
  }
  public get IsenableInfusionRate(): boolean {
    if (
      (PatientContext.IsINFUSIONON &&
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.FLUID
        )) ||
      this.IsInfusionRateReadOnly
    ) {
      this.IsenableInfusionRate = false;
    }
    return (
      this._isenableInfusionRate &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableInfusionRate(value: boolean) {
    if (value != this._isenableInfusionRate) {
      this._isenableInfusionRate = value;
      // NotifyPropertyChanged("IsenableInfusionRate");
    }
  }
  public get IsenableInfusionRateforLabel(): boolean {
    return (
      this._isenableInfusionRateforLabel &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableInfusionRateforLabel(value: boolean) {
    if (value != this._isenableInfusionRateforLabel) {
      this._isenableInfusionRateforLabel = value;
      // NotifyPropertyChanged("IsenableInfusionRateforLabel");
    }
  }
  public get InfusRateVisi(): Visibility {
    return this._infusratevisi;
  }
  public set InfusRateVisi(value: Visibility) {
    if (value != this._infusratevisi) {
      this._infusratevisi = value;
      // NotifyPropertyChanged("InfusRateVisi");
    }
  }
  public get InfMonitoringperiodVisi(): Visibility {
    return this._InfuMonitoringperiodVisi;
  }
  public set InfMonitoringperiodVisi(value: Visibility) {
    if (value != this._InfuMonitoringperiodVisi) {
      this._InfuMonitoringperiodVisi = value;
      // NotifyPropertyChanged("InfMonitoringperiodVisi");
    }
  }
  public get InfBoosterDoseVisi(): Visibility {
    return this._InfBoosterDoseVisi;
  }
  public set InfBoosterDoseVisi(value: Visibility) {
    if (value != this._InfBoosterDoseVisi) {
      this._InfBoosterDoseVisi = value;
      // NotifyPropertyChanged("InfBoosterDoseVisi");
      if (this._InfBoosterDoseVisi == Visibility.Collapsed) {
        this.Boosterdose = String.Empty;
        this.Boosterdoseuom = null;
      }
    }
  }
  public get InfInfusionRateVisi(): Visibility {
    if (
      this.oBasicDetailsVM.InfusionType != null &&
      !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
      (String.Equals(
        this.oBasicDetailsVM.InfusionType.Value,
        InfusionTypesCode.SINGLEDOSEVOLUME,
        StringComparison.InvariantCultureIgnoreCase
      ) ||
        String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.INTERMITTENT,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
        (ProfileData.InfusionPresConfig != null &&
          ProfileData.InfusionPresConfig.IsInfusionRatePCA &&
          String.Equals(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.PCA,
            StringComparison.InvariantCultureIgnoreCase
          )))
    ) {
      this._InfInfusionRateVisi = Visibility.Visible;
      this.IsInfRateCalculatorButtonVisible = Visibility.Visible;
    } else {
      this._InfInfusionRateVisi = Visibility.Collapsed;
      this.IsInfRateCalculatorButtonVisible = Visibility.Collapsed;
    }
    return this._InfInfusionRateVisi;
  }
  public set InfInfusionRateVisi(value: Visibility) {
    if (value != this._InfInfusionRateVisi) {
      this._InfInfusionRateVisi = value;
      this.IsInfRateCalculatorButtonVisible = value;
      // NotifyPropertyChanged("InfInfusionRateVisi");
    }
  }
  private _IsInfRateCalculatorButtonVisible: Visibility = Visibility.Collapsed;
  public get IsInfRateCalculatorButtonVisible(): Visibility {
    return this._IsInfRateCalculatorButtonVisible;
  }
  public set IsInfRateCalculatorButtonVisible(value: Visibility) {
    if (value != this._IsInfRateCalculatorButtonVisible) {
      this._IsInfRateCalculatorButtonVisible = value;
      if (
        String.Equals(
          PatientContext.PrescriptionType,
          PrescriptionTypes.Clerking,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        (String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.PCA,
          StringComparison.InvariantCultureIgnoreCase
        ) ||
          String.Equals(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.CONTINUOUS,
            StringComparison.InvariantCultureIgnoreCase
          ) ||
          String.Equals(
            this.oBasicDetailsVM.InfusionType.Value,
            InfusionTypesCode.FLUID,
            StringComparison.InvariantCultureIgnoreCase
          ))
      ) {
        this._IsInfRateCalculatorButtonVisible = Visibility.Collapsed;
      }
      // NotifyPropertyChanged("IsInfRateCalculatorButtonVisible");
    }
  }
  private _ClkInfusionRateLabel: string;
  public get ClkInfusionRateLabel(): string {
    return this._ClkInfusionRateLabel;
  }
  public set ClkInfusionRateLabel(value: string) {
    if (value != this._ClkInfusionRateLabel) {
      this._ClkInfusionRateLabel = value;
      // NotifyPropertyChanged("ClkInfusionRateLabel");
    }
  }
  public get IsfreqVisible(): Visibility {
    return this._isfreqvisible;
  }
  public set IsfreqVisible(value: Visibility) {
    if (value != this._isfreqvisible) {
      this._isfreqvisible = value;
      // NotifyPropertyChanged("IsfreqVisible");
    }
  }
  public get IsInfusRateMand(): boolean {
    return this._isinfusratemand;
  }
  public set IsInfusRateMand(value: boolean) {
    this._isinfusratemand = value;
    // NotifyPropertyChanged("IsInfusRateMand");
  }
  public get IsOngoingChecked(): boolean {
    return this.isOngoingChecked;
  }
  public set IsOngoingChecked(value: boolean) {
    if (this.isOngoingChecked != value) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this.isOngoingChecked = value;
        // NotifyPropertyChanged("IsOngoingChecked");
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
        }
        if (value) {
          if (this.oBasicDetailsVM != null) {
            this.oBasicDetailsVM.IsenableDuration = true;
            this.oBasicDetailsVM.Duration = String.Empty;
            this.oBasicDetailsVM.DurationUOM = null;
          }
        } else if (!value) {
          this.IsOnGoing = 'N';
          if (this.oBasicDetailsVM != null)
            this.oBasicDetailsVM.IsenableDuration = true;
        }
        if (
          this.oBasicDetailsVM != null &&
          !this.oBasicDetailsVM.lstAmendedFlds.Contains('IsOngoingChecked')
        ) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('IsOngoingChecked');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        this.isOngoingChecked = value;
        // NotifyPropertyChanged("IsOngoingChecked");
      }
    }
  }
  public get IsSelProdMandatory(): Visibility {
    return this._isSelProdMandatory;
  }
  public set IsSelProdMandatory(value: Visibility) {
    if (value != this._isSelProdMandatory) {
      this._isSelProdMandatory = value;
      // NotifyPropertyChanged("IsSelProdMandatory");
    }
  }
  private _IsProductClearEnabled: boolean = false;
  public get IsProductClearEnabled(): boolean {
    return (
      this._IsProductClearEnabled &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsProductClearEnabled(value: boolean) {
    if (
      String.Equals(
        this.SelProdName,
        CConstants.Selectproduct,
        StringComparison.InvariantCultureIgnoreCase
      )
    ) {
      this._IsProductClearEnabled = false;
    } else {
      this._IsProductClearEnabled = value;
    }
    // super.NotifyPropertyChanged("IsProductClearEnabled");
  }
  private _SelProdName: string = CConstants.Selectproduct;
  public get SelProdName(): string {
    return this._SelProdName;
  }
  public set SelProdName(value: string) {
    if (this._SelProdName != value) {
      this._SelProdName = value;
      if (
        String.Compare(
          this._SelProdName,
          CConstants.Selectproduct,
          StringComparison.InvariantCultureIgnoreCase
        ) == 0
      ) {
        this.IsProductClearEnabled = false;
        this.oBasicDetailsVM.CheckStrengthMandatoryByDoseUOMType();
      } else {
        this.IsProductClearEnabled = true;
      }
      // NotifyPropertyChanged("SelProdName");
    }
  }
  public get FluidList(): ObservableCollection<CListItem> {
    return this._fluidList;
  }
  public set FluidList(value: ObservableCollection<CListItem>) {
    if (this._fluidList != value) {
      this._fluidList = value;
      // NotifyPropertyChanged("FluidList");
    }
  }
  private _isMandatoryProduct: boolean = true;
  public get IsMandatoryProduct(): boolean {
    return this._isMandatoryProduct;
  }
  public set IsMandatoryProduct(value: boolean) {
    if (value != this._isMandatoryProduct) {
      this._isMandatoryProduct = value;
      // NotifyPropertyChanged("IsMandatoryProduct");
    }
  }
  private _isProductVisible: Visibility = Visibility.Collapsed;
  public get isProductVisible(): Visibility {
    return this._isProductVisible;
  }
  public set isProductVisible(value: Visibility) {
    if (value != this._isProductVisible) {
      this._isProductVisible = value;
      // NotifyPropertyChanged("isProductVisible");
    }
  }
  private _isProductMandatory: boolean = false;
  public get isProductMandatory(): boolean {
    return this._isProductMandatory;
  }
  public set isProductMandatory(value: boolean) {
    if (value != this._isProductMandatory) {
      this._isProductMandatory = value;
      // NotifyPropertyChanged("isProductMandatory");
    }
  }
  private _isMandatoryFluid: boolean = false;
  public get IsMandatoryFluid(): boolean {
    return this._isMandatoryFluid;
  }
  public set IsMandatoryFluid(value: boolean) {
    if (value != this._isMandatoryFluid) {
      this._isMandatoryFluid = value;
      // NotifyPropertyChanged("IsMandatoryFluid");
    }
  }
  private _isMandatoryMonitoringPeriod: boolean = false;
  public get IsMandatoryMonitoringPeriod(): boolean {
    return this._isMandatoryMonitoringPeriod;
  }
  public set IsMandatoryMonitoringPeriod(value: boolean) {
    if (value != this._isMandatoryMonitoringPeriod) {
      this._isMandatoryMonitoringPeriod = value;
      // NotifyPropertyChanged("IsMandatoryMonitoringPeriod");
    }
  }
  private _isfrminfusratemand: boolean = true;
  public get IsFrmInfusRateMand(): boolean {
    return this._isfrminfusratemand;
  }
  public set IsFrmInfusRateMand(value: boolean) {
    this._isfrminfusratemand = value;
    // NotifyPropertyChanged("IsFrmInfusRateMand");
  }
  public get isRouteMandatory(): boolean {
    return this._isRouteMandatory;
  }
  public set isRouteMandatory(value: boolean) {
    this._isRouteMandatory = value;
    // NotifyPropertyChanged("isRouteMandatory");
  }
  public get isInfusionTypeMandatory(): boolean {
    return this._isInfusionTypeMandatory;
  }
  public set isInfusionTypeMandatory(value: boolean) {
    this._isInfusionTypeMandatory = value;
    // NotifyPropertyChanged("isInfusionTypeMandatory");
  }
  public get isDoseTypeMandatory(): boolean {
    return this._isDoseTypeMandatory;
  }
  public set isDoseTypeMandatory(value: boolean) {
    this._isDoseTypeMandatory = value;
    // NotifyPropertyChanged("isDoseTypeMandatory");
  }
  public get isFrequencyMandatory(): boolean {
    return this._isFrequencyMandatory;
  }
  public set isFrequencyMandatory(value: boolean) {
    this._isFrequencyMandatory = value;
    // NotifyPropertyChanged("isFrequencyMandatory");
  }
  public get isBolusMandatory(): boolean {
    return this._isBolusMandatory;
  }
  public set isBolusMandatory(value: boolean) {
    this._isBolusMandatory = value;
    // NotifyPropertyChanged("isBolusMandatory");
  }
  public get islockoutMandatory(): boolean {
    return this._islockoutMandatory;
  }
  public set islockoutMandatory(value: boolean) {
    this._islockoutMandatory = value;
    // NotifyPropertyChanged("islockoutMandatory");
  }
  public get isStationeryTypeMandatory(): boolean {
    return this._isStationeryTypeMandatory;
  }
  public set isStationeryTypeMandatory(value: boolean) {
    this._isStationeryTypeMandatory = value;
    // NotifyPropertyChanged("isStationeryTypeMandatory");
  }
  public get isBrandMandatory(): boolean {
    return this._isBrandMandatory;
  }
  public set isBrandMandatory(value: boolean) {
    this._isBrandMandatory = value;
    // NotifyPropertyChanged("isBrandMandatory");
  }
  public get isFluidMandatory(): boolean {
    let Istypeindrug: boolean =
      String.Compare(
        this.oBasicDetailsVM.IdentifyingType,
        CConstants.NONCATALOGUEITEM
      ) == 0 ||
      String.Compare(
        this.oBasicDetailsVM.IdentifyingType,
        CConstants.Precatalog
      ) == 0
        ? true
        : false;
    if (Istypeindrug) {
      this._isFluidMandatory = false;
    }
    return this._isFluidMandatory;
  }
  public set isFluidMandatory(value: boolean) {
    this._isFluidMandatory = value;
    // NotifyPropertyChanged("isFluidMandatory");
  }
  public get IsMedclerkSourceVisible(): Visibility {
    return this._isMedclerkSourceVisible;
  }
  public set IsMedclerkSourceVisible(value: Visibility) {
    if (value != this._isMedclerkSourceVisible) {
      this._isMedclerkSourceVisible = value;
      // super.NotifyPropertyChanged("isMedclerkSourceVisible");
    }
  }
  public get IsDischargeVisible(): Visibility {
    return this._IsdischargeVisible;
  }
  public set IsDischargeVisible(value: Visibility) {
    if (value != this._IsdischargeVisible) {
      this._IsdischargeVisible = value;
      if (this._IsdischargeVisible == Visibility.Visible) {
        this.oBasicDetailsVM.IsVisibleSupplyInstr = Visibility.Collapsed;
      } else {
        this.oBasicDetailsVM.IsVisibleSupplyInstr = Visibility.Visible;
      }
      // super.NotifyPropertyChanged("IsDischargeVisible");
    }
  }
  public get IsTreatMentVisible(): Visibility {
    return this._IsTreatMentVisible;
  }
  public set IsTreatMentVisible(value: Visibility) {
    if (value != this._IsTreatMentVisible) {
      this._IsTreatMentVisible = value;
      // super.NotifyPropertyChanged("IsTreatMentVisible");
    }
  }
  public get IsOxygen(): boolean {
    return this._isOxygen;
  }
  public set IsOxygen(value: boolean) {
    if (this._isOxygen != value) {
      this._isOxygen = value;
      // NotifyPropertyChanged("IsOxygen");
    }
  }
  public get IsChksequentialPresitem(): boolean {
    return this._isChksequentialPresitem;
  }
  public set IsChksequentialPresitem(value: boolean) {
    if (this._isChksequentialPresitem != value) {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (
          !this.oBasicDetailsVM.lstAmendedFlds.Contains(
            'IsChksequentialPresitem'
          )
        ) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('IsChksequentialPresitem');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
      }
      this._isChksequentialPresitem = value;
      let InfusionFlag: boolean = false;
      if (
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.IsAllowMultiRoute &&
        this.oBasicDetailsVM.IsMultiRouteChecked
      ) {
        if (this.oBasicDetailsVM.DefaultDetails != null) {
          InfusionFlag = Common.IsInfusionMultiRoutes(
            this.oBasicDetailsVM.DefaultDetails.Routes
          );
        }
      } else if (
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.Route != null &&
        this.oBasicDetailsVM.Route.Tag != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.Route.Tag.ToString()) &&
        String.Compare(this.oBasicDetailsVM.Route.Tag.ToString(), '1') == 0
      ) {
        InfusionFlag = true;
      }
      if (
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.InfusionDetails != null
      ) {
        if (this.oBasicDetailsVM.InfusionDetails.SequentialItemOrder > 0) {
          if (this._isChksequentialPresitem) {
            this.oBasicDetailsVM.ReviewAfterPeriodInvisible();
          } else if (
            !this._isChksequentialPresitem &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode !=
              ActivityTypes.Prescribe &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode !=
              ActivityTypes.Reorder &&
            !this.oBasicDetailsVM.bIsAmend
          ) {
            this.oBasicDetailsVM.ReviewAfterVisible =
              this.oBasicDetailsVM.CurrentReviewAfterVisible;
            if (this.oBasicDetailsVM.ReviewAfterVisible == Visibility.Visible) {
              this.oBasicDetailsVM.ReviewAfterPeriodVisible();
            }
          }
        } else {
          if (this._isChksequentialPresitem) {
            this.oBasicDetailsVM.ReviewAfterPeriodInvisible();
          } else if (
            !this._isChksequentialPresitem &&
            this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.oPrescitemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
              ActivityTypes.Prescribe
          ) {
            if (this.oBasicDetailsVM.InfusionDetails != null) {
              if (
                this.oBasicDetailsVM.InfusionDetails
                  .PrevSequentialPrescribingData == null
              ) {
                this.oBasicDetailsVM.ReviewAfterVisible =
                  this.oBasicDetailsVM.CurrentReviewAfterVisible;
              } else if (
                this.oBasicDetailsVM.InfusionDetails
                  .PrevSequentialPrescribingData.SequentialItemOrder == 0 &&
                this.oBasicDetailsVM.InfusionType == null &&
                InfusionFlag
              ) {
                this.oBasicDetailsVM.ReviewAfterVisible =
                  this.oBasicDetailsVM.CurrentReviewAfterVisible;
              } else if (
                this.oBasicDetailsVM.InfusionDetails
                  .PrevSequentialPrescribingData.SequentialItemOrder == 0 &&
                this.oBasicDetailsVM.InfusionType != null &&
                (String.Equals(
                  this.oBasicDetailsVM.InfusionType.Value,
                  InfusionTypesCode.CONTINUOUS
                ) ||
                  String.Equals(
                    this.oBasicDetailsVM.InfusionType.Value,
                    InfusionTypesCode.SINGLEDOSEVOLUME
                  ) ||
                  String.Equals(
                    this.oBasicDetailsVM.InfusionType.Value,
                    InfusionTypesCode.FLUID
                  ))
              ) {
                this.oBasicDetailsVM.ReviewAfterVisible =
                  this.oBasicDetailsVM.CurrentReviewAfterVisible;
              }
              if (this.oBasicDetailsVM.ReviewAfterVisible == Visibility.Visible)
                this.oBasicDetailsVM.ReviewAfterPeriodVisible();
            }
          }
        }
      }
      // super.NotifyPropertyChanged("IsChksequentialPresitem");
    }
  }
  public get IsenableChksequentialPresitem(): boolean {
    return (
      this._isenableChksequentialPresitem &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableChksequentialPresitem(value: boolean) {
    if (value != this._isenableChksequentialPresitem) {
      this._isenableChksequentialPresitem = value;
      // NotifyPropertyChanged("IsenableChksequentialPresitem");
    }
  }
  public get IsExistSubSequentialPresitem(): number {
    return this._isExistSubSequential;
  }
  public set IsExistSubSequentialPresitem(value: number) {
    if (this._isExistSubSequential != value) {
      this._isExistSubSequential = value;
      // super.NotifyPropertyChanged("IsExistSubSequentialPresitem");
    }
  }
  public get IsContisequenceDisplayordervisi(): Visibility {
    return this._isContisequenceDisplayordervisi;
  }
  public set IsContisequenceDisplayordervisi(value: Visibility) {
    if (this._isContisequenceDisplayordervisi != value) {
      this._isContisequenceDisplayordervisi = value;
      // super.NotifyPropertyChanged("IsContisequenceDisplayordervisi");
    }
    if (this._isContisequenceDisplayordervisi == Visibility.Visible) {
    }
  }
  public get PrescriptionItemNumber(): number {
    return this._prescriptionItemNumber;
  }
  public set PrescriptionItemNumber(value: number) {
    if (this._prescriptionItemNumber != value) {
      this._prescriptionItemNumber = value;
      // super.NotifyPropertyChanged("PrescriptionItemNumber");
    }
  }
  public get SequentialItemOrder(): number {
    return this._sequentialItemOrder;
  }
  public set SequentialItemOrder(value: number) {
    if (this._sequentialItemOrder != value) {
      this._sequentialItemOrder = value;
      // super.NotifyPropertyChanged("SequentialItemOrder");
    }
  }
  private _IsSequenceBroken: boolean = false;
  public get IsSequenceBroken(): boolean {
    return this._IsSequenceBroken;
  }
  public set IsSequenceBroken(value: boolean) {
    this._IsSequenceBroken = value;
    // super.NotifyPropertyChanged("IsSequenceBroken");
  }
  private _OriginalSequenceOrderno: number = 0;
  public get OriginalSequenceOrderno(): number {
    return this._OriginalSequenceOrderno;
  }
  public set OriginalSequenceOrderno(value: number) {
    this._OriginalSequenceOrderno = value;
  }
  public get IsSequentialPrescribing(): boolean {
    return this._isSequentialPrescribing;
  }
  public set IsSequentialPrescribing(value: boolean) {
    this._isSequentialPrescribing = value;
    // super.NotifyPropertyChanged("IsSequentialPrescribing");
  }
  public get IsChkAppendSequencePrescribing(): boolean {
    return this._isChkAppendSequencePrescribing;
  }
  public set IsChkAppendSequencePrescribing(value: boolean) {
    if (this._isChkAppendSequencePrescribing != value) {
      this._isChkAppendSequencePrescribing = value;
      // super.NotifyPropertyChanged("IsChkAppendSequencePrescribing");
    }
  }
  public get IsDisplayOrderSeqPresc(): string {
    return this._isDisplayOrderSeqPresc;
  }
  public set IsDisplayOrderSeqPresc(value: string) {
    if (this._isDisplayOrderSeqPresc != value) {
      this._isDisplayOrderSeqPresc = value;
      // super.NotifyPropertyChanged("IsDisplayOrderSeqPresc");
    }
  }
  public get IsSequentiallinkvisi(): Visibility {
    return this._isSequentiallinkvisi;
  }
  public set IsSequentiallinkvisi(value: Visibility) {
    if (this._isSequentiallinkvisi != value) {
      this._isSequentiallinkvisi = value;
      // super.NotifyPropertyChanged("IsSequentiallinkvisi");
    }
  }
  public get RouteSequential(): CListItem {
    return this.routeSeq;
  }
  public set RouteSequential(value: CListItem) {
    if (this.routeSeq != value) {
      this.routeSeq = value;
      // super.NotifyPropertyChanged("RouteSequential");
    }
  }
  private MrouteSeq: ObservableCollection<CListItem>;
  public get MultipleRouteSequential(): ObservableCollection<CListItem> {
    return this.MrouteSeq;
  }
  public set MultipleRouteSequential(value: ObservableCollection<CListItem>) {
    if (this.MrouteSeq != value) {
      this.MrouteSeq = value;
      // super.NotifyPropertyChanged("MultipleRouteSequential");
    }
  }
  public get InSequentialRouteChanged(): boolean {
    return this._inSequentialRouteChanged;
  }
  public set InSequentialRouteChanged(value: boolean) {
    if (this._inSequentialRouteChanged != value) {
      this._inSequentialRouteChanged = value;
      // super.NotifyPropertyChanged("InSequentialRouteChanged");
    }
  }
  public get CurrentSequentialOrder(): number {
    return this.currentSeqOrder;
  }
  public set CurrentSequentialOrder(value: number) {
    if (this.currentSeqOrder != value) {
      this.currentSeqOrder = value;
      // super.NotifyPropertyChanged("CurrentSequentialOrder");
    }
  }
  public get IsMandatoryStartdtSeq(): boolean {
    return this._isMandatoryStartdtSeq;
  }
  public set IsMandatoryStartdtSeq(value: boolean) {
    if (this._isMandatoryStartdtSeq != value) {
      this._isMandatoryStartdtSeq = value;
      // super.NotifyPropertyChanged("IsMandatoryStartdtSeq");
    }
  }
  public get IsCurrentgrdResolveIndex(): number {
    return this._isCurrentgrdResolveIndex;
  }
  public set IsCurrentgrdResolveIndex(value: number) {
    if (this._isCurrentgrdResolveIndex != value) {
      this._isCurrentgrdResolveIndex = value;
      // super.NotifyPropertyChanged("IsCurrentgrdResolveIndex");
    }
  }
  public get TotalCountSeq(): number {
    return this.totalCountSeq;
  }
  public set TotalCountSeq(value: number) {
    if (this.totalCountSeq != value) {
      this.totalCountSeq = value;
      // super.NotifyPropertyChanged("TotalCountSeq");
    }
  }
  public get IsAddSequentialPresitem(): Visibility {
    if (
      this.oBasicDetailsVM.oPrescitemVM != null &&
      this.oBasicDetailsVM.oPrescitemVM.bIsReprescribe
    ) {
      return Visibility.Collapsed;
    } else {
      return this._isAddSequential;
    }
  }
  public set IsAddSequentialPresitem(value: Visibility) {
    if (this._isAddSequential != value) {
      this._isAddSequential = value;
      // super.NotifyPropertyChanged("IsAddSequentialPresitem");
    }
  }
  public get IsInfusionRateChangedSequential(): boolean {
    return this._isInfusionRateChangedSequential;
  }
  public set IsInfusionRateChangedSequential(value: boolean) {
    if (this._isInfusionRateChangedSequential != value) {
      this._isInfusionRateChangedSequential = value;
      // super.NotifyPropertyChanged("IsInfusionRateChangedSequential");
    }
  }
  public get IsChkNextSequencePrescribing(): boolean {
    return this._isChkNextSequencePrescribing;
  }
  public set IsChkNextSequencePrescribing(value: boolean) {
    if ((this._isChkNextSequencePrescribing = value)) {
      this._isChkNextSequencePrescribing = value;
      // super.NotifyPropertyChanged("IsChkNextSequencePrescribing");
    }
  }
  public get IsDisCancelSequential(): boolean {
    return this._isDisCancelSequential;
  }
  public set IsDisCancelSequential(value: boolean) {
    if ((this._isDisCancelSequential = value)) {
      this._isDisCancelSequential = value;
      // super.NotifyPropertyChanged("IsDisCancelSequential");
    }
  }
  public get IsDisCanPntPresitemOIDChangedSeq(): number {
    return this._isDisCanPntPresitemOIDChangedSeq;
  }
  public set IsDisCanPntPresitemOIDChangedSeq(value: number) {
    if (this._isDisCanPntPresitemOIDChangedSeq != value) {
      this._isDisCanPntPresitemOIDChangedSeq = value;
      // super.NotifyPropertyChanged("IsDisCanPntPresitemOIDChangedSeq");
    }
  }
  private CalculateInfusionRate(): void {
    let CalValu: number = 0;
    let InfRateNumUOM: CListItem, InfRateDenUOM;
    if (this.InfusionRateRndto != null) {
      if (this.InfusionRateRndto.Value == Roundoff.NEARESRHALF) {
        if (this.IsDoseChecked &&
          this.IsDoseChecked.GetValueOrDefault(false) &&
          this.oBasicDetailsVM != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.Dose) &&
          Convert.ToDouble(this.oBasicDetailsVM.Dose) > 0 &&
          this.oBasicDetailsVM.InfusionDetails != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) &&
          Convert.ToDouble(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) > 0
        ) {
          CalValu =
            Math.Round(
              (Convert.ToDouble(this.oBasicDetailsVM.Dose) /
                Convert.ToDouble(
                  this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
                )) *
                2,
              0
            ) / 2;
          this.GetRateUOMFromCompositeUOM(
            this.PrescribedDoseUOMValue,
            (o1) => {
              InfRateNumUOM = o1;
            },
            (o2) => {
              InfRateDenUOM = o2;
            }
          );
          if (InfRateDenUOM != null && InfRateDenUOM != null) {
            this.InfusionRateNumValue = InfRateNumUOM;
            this.InfusionRateDenoValue = InfRateDenUOM;
          } else {
            this.InfusionRateNumValue = this.PrescribedDoseUOMValue;
            this.InfusionRateDenoValue = this.InfusionPeriodUom;
          }
        } else if (this.IsVolumeChecked &&
          this.IsVolumeChecked.GetValueOrDefault(false) &&
          this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.InfusionDetails != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.FluidVolume
          ) &&
          Convert.ToDouble(this.oBasicDetailsVM.InfusionDetails.FluidVolume) >
            0 &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) &&
          Convert.ToDouble(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) > 0
        ) {
          this.InfusionRateNumValue = this.VolumeUOM;
          this.InfusionRateDenoValue = this.InfusionPeriodUom;
          CalValu =
            Math.Round(
              (Convert.ToDouble(
                this.oBasicDetailsVM.InfusionDetails.FluidVolume
              ) /
                Convert.ToDouble(
                  this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
                )) *
                2,
              0
            ) / 2;
        }
        if (CalValu == 0) CalValu = 0.5;
      } else if (this.InfusionRateRndto.Value == Roundoff.NEARESTFULL) {
        if (this.IsDoseChecked &&
          this.IsDoseChecked.GetValueOrDefault(false) &&
          this.oBasicDetailsVM != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.Dose) &&
          Convert.ToDouble(this.oBasicDetailsVM.Dose) > 0 &&
          this.oBasicDetailsVM.InfusionDetails != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) &&
          Convert.ToDouble(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) > 0
        ) {
          CalValu = Math.Round(
            Convert.ToDouble(this.oBasicDetailsVM.Dose) /
              Convert.ToDouble(
                this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
              )
          );
          this.GetRateUOMFromCompositeUOM(
            this.PrescribedDoseUOMValue,
            (o1) => {
              InfRateNumUOM = o1;
            },
            (o2) => {
              InfRateDenUOM = o2;
            }
          );
          if (InfRateDenUOM != null && InfRateDenUOM != null) {
            this.InfusionRateNumValue = InfRateNumUOM;
            this.InfusionRateDenoValue = InfRateDenUOM;
          } else {
            this.InfusionRateNumValue = this.PrescribedDoseUOMValue;
            this.InfusionRateDenoValue = this.InfusionPeriodUom;
          }
        } else if (this.IsVolumeChecked &&
          this.IsVolumeChecked.GetValueOrDefault(false) &&
          this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.InfusionDetails != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.FluidVolume
          ) &&
          Convert.ToDouble(this.oBasicDetailsVM.InfusionDetails.FluidVolume) >
            0 &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) &&
          Convert.ToDouble(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) > 0
        ) {
          CalValu = Math.Round(
            Convert.ToDouble(this.oBasicDetailsVM.InfusionDetails.FluidVolume) /
              Convert.ToDouble(
                this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
              )
          );
          this.InfusionRateNumValue = this.VolumeUOM;
          this.InfusionRateDenoValue = this.InfusionPeriodUom;
        }
        if (CalValu == 0) CalValu = 1;
      } else if (this.InfusionRateRndto.Value == Roundoff.NONE) {
        if (this.IsDoseChecked &&
          this.IsDoseChecked.GetValueOrDefault(false) &&
          this.oBasicDetailsVM != null &&
          !String.IsNullOrEmpty(this.oBasicDetailsVM.Dose) &&
          Convert.ToDouble(this.oBasicDetailsVM.Dose) > 0 &&
          this.oBasicDetailsVM.InfusionDetails != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) &&
          Convert.ToDouble(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) > 0
        ) {
          CalValu =
            Convert.ToDouble(this.oBasicDetailsVM.Dose) /
            Convert.ToDouble(
              this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
            );
          this.GetRateUOMFromCompositeUOM(
            this.PrescribedDoseUOMValue,
            (o1) => {
              InfRateNumUOM = o1;
            },
            (o2) => {
              InfRateDenUOM = o2;
            }
          );
          if (InfRateDenUOM != null && InfRateDenUOM != null) {
            this.InfusionRateNumValue = InfRateNumUOM;
            this.InfusionRateDenoValue = InfRateDenUOM;
          } else {
            this.InfusionRateNumValue = this.PrescribedDoseUOMValue;
            this.InfusionRateDenoValue = this.InfusionPeriodUom;
          }
        } else if (this.IsVolumeChecked &&
          this.IsVolumeChecked.GetValueOrDefault(false) &&
          this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.InfusionDetails != null &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.FluidVolume
          ) &&
          Convert.ToDouble(this.oBasicDetailsVM.InfusionDetails.FluidVolume) >
            0 &&
          !String.IsNullOrEmpty(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) &&
          Convert.ToDouble(
            this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
          ) > 0
        ) {
          CalValu =
            Convert.ToDouble(this.oBasicDetailsVM.InfusionDetails.FluidVolume) /
            Convert.ToDouble(
              this.oBasicDetailsVM.InfusionDetails.InfusionPeriod
            );
          this.InfusionRateNumValue = this.VolumeUOM;
          this.InfusionRateDenoValue = this.InfusionPeriodUom;
        }
      }
      if (CalValu > 0) {
        this.oBasicDetailsVM.InfusionDetails.CalculatedInfusionrateValue =
          Math.Round(CalValu, 3).ToString();
        if (
          this.InfusionRateNumValue != null &&
          this.InfusionRateDenoValue != null
        ) {
          this.oBasicDetailsVM.InfusionDetails.CalculatedInfusionrateUOM =
            this.InfusionRateNumValue.DisplayText +
            '/' +
            this.InfusionRateDenoValue.DisplayText;
        }
        if (this.IsinfusRateBasedOnDD) {
          if (
            this.InfRateDinominatorUom != null &&
            this.InfusionPeriodUom != null &&
            !String.IsNullOrEmpty(this.InfRateDinominatorUom.Value) &&
            !String.IsNullOrEmpty(this.InfusionPeriodUom.Value) &&
            !String.IsNullOrEmpty(
              this.oBasicDetailsVM.InfusionDetails.CalculatedInfusionrateValue
            ) &&
            this.oBasicDetailsVM != null &&
            this.oBasicDetailsVM.InfusionType != null &&
            !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
            (String.Compare(
              this.oBasicDetailsVM.InfusionType.Value,
              InfusionTypesCode.SINGLEDOSEVOLUME,
              StringComparison.InvariantCultureIgnoreCase
            ) == 0 ||
              String.Compare(
                this.oBasicDetailsVM.InfusionType.Value,
                InfusionTypesCode.FLUID,
                StringComparison.InvariantCultureIgnoreCase
              ) == 0)
          ) {
            this.oBasicDetailsVM.InfusionDetails.CalculatedInfusionrateValue =
              this.oBasicDetailsVM.oPrescitemVM.CalclulateInfusionRateBasedOnDD(
                this.oBasicDetailsVM.InfusionDetails.CalculatedInfusionrateValue
              );
          }
          if (
            this.InfRateNumeratorUom != null &&
            !String.IsNullOrEmpty(this.InfRateNumeratorUom.Value) &&
            this.InfRateDinominatorUom != null &&
            !String.IsNullOrEmpty(this.InfRateDinominatorUom.Value)
          ) {
            this.oBasicDetailsVM.InfusionDetails.CalculatedInfusionrateUOM =
              this.InfRateNumeratorUom.DisplayText +
              '/' +
              this.InfRateDinominatorUom.DisplayText;
          }
        }
      }
    }
  }
  public GetRateUOMFromCompositeUOM(
    InputUOM: CListItem,
    out1: (NumeratorUOM: CListItem) => void,
    out2: (DenominatorUOM: CListItem) => void
  ): void {
    let NumeratorUOM: CListItem;
    let DenominatorUOM: CListItem;

    NumeratorUOM = null;
    DenominatorUOM = null;
    if (InputUOM.DisplayText.IndexOf('/') > 0) {
      let arrUOMValues: string[] = InputUOM.DisplayText.Split('/');
      if (arrUOMValues != null && arrUOMValues.length > 1) {
        let nLen: number = arrUOMValues.length;
        let sDenominatorUOM: string = arrUOMValues[nLen - 1];
        let bLastUOMIsTime: boolean =
          this.oBasicDetailsVM.InfusionDetails.InfRateDenominatorUOM.Where(
            (x) => x.DisplayText == sDenominatorUOM
          ).Any();
        if (bLastUOMIsTime) {
          let sNumeratorUOM: string = InputUOM.DisplayText.Substring(
            0,
            InputUOM.DisplayText.LastIndexOf('/')
          );
          NumeratorUOM = ObjectHelper.CreateObject(new CListItem(), {
            DisplayText: sNumeratorUOM,
          });
          let lstNumeratorUOM: IEnumerable<CListItem> = null;
          if (FormviewerComboValues.CompoundUOMs != null)
            lstNumeratorUOM = FormviewerComboValues.CompoundUOMs.Where(
              (x) => x.DisplayText == sNumeratorUOM
            ).Select((x) => x);
          else
            lstNumeratorUOM =
              this.oBasicDetailsVM.InfusionDetails.InfRateNumeratorUOM.Where(
                (x) => x.DisplayText == sNumeratorUOM
              ).Select((x) => x);
          if (lstNumeratorUOM != null && lstNumeratorUOM.Any())
            NumeratorUOM = lstNumeratorUOM.First();
          else
            NumeratorUOM = ObjectHelper.CreateObject(new CListItem(), {
              DisplayText: sNumeratorUOM,
            });
          DenominatorUOM =
            this.oBasicDetailsVM.InfusionDetails.InfRateDenominatorUOM.Where(
              (x) => x.DisplayText == sDenominatorUOM
            )
              .Select((x) => x)
              .FirstOrDefault();
        }
      }
    }

    out1(NumeratorUOM);
    out2(DenominatorUOM);
  }
  public get IsenableInfusionType(): boolean {
    return (
      this._isenableInfusionType &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableInfusionType(value: boolean) {
    if (this._isenableInfusionType != value) {
      this._isenableInfusionType = value;
      // super.NotifyPropertyChanged("IsenableInfusionType");
    }
  }
  public get IsenableDeliverydevice(): boolean {
    return (
      this._isenableDeliverydevice &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenableDeliverydevice(value: boolean) {
    if (this._isenableDeliverydevice != value) {
      this._isenableDeliverydevice = value;
      // super.NotifyPropertyChanged("IsenableDeliverydevice");
    }
  }
  public get ContinousAddOptions(): string {
    return this.continousAddOptions;
  }
  public set ContinousAddOptions(value: string) {
    if (this.continousAddOptions != value) {
      this.continousAddOptions = value;
      // NotifyPropertyChanged("ContinousAddOptions");
    }
  }
  public get IsAdditionalOption(): Visibility {
    return this._isAdditionalOption;
  }
  public set IsAdditionalOption(value: Visibility) {
    if (this._isAdditionalOption != value) {
      this._isAdditionalOption = value;
      // NotifyPropertyChanged("IsAdditionalOption");
    }
  }
  public get IsEnableOngoingChecked(): boolean {
    return (
      this._isenableOngoingChecked &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsEnableOngoingChecked(value: boolean) {
    if (this._isenableOngoingChecked != value) {
      this._isenableOngoingChecked = value;
      //super.NotifyPropertyChanged("IsEnableOngoingChecked");
    }
  }
  public get IsenablelblOngoingYes(): boolean {
    return (
      this._isenablelblOngoingYes &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsenablelblOngoingYes(value: boolean) {
    if (this._isenablelblOngoingYes != value) {
      this._isenablelblOngoingYes = value;
      //super.NotifyPropertyChanged("IsenablelblOngoingYes");
    }
  }
  private _IsInfMedClerkPCAVisible: Visibility = Visibility.Collapsed;
  public get IsInfMedClerkPCAVisible(): Visibility {
    return this._IsInfMedClerkPCAVisible;
  }
  public set IsInfMedClerkPCAVisible(value: Visibility) {
    this._IsInfMedClerkPCAVisible = value;
    //NotifyPropertyChanged("IsInfMedClerkPCAVisible");
  }
  private _IsInfMedClerkIntermitVisible: Visibility = Visibility.Collapsed;
  public get IsInfMedClerkIntermitVisible(): Visibility {
    return this._IsInfMedClerkIntermitVisible;
  }
  public set IsInfMedClerkIntermitVisible(value: Visibility) {
    this._IsInfMedClerkIntermitVisible = value;
    //NotifyPropertyChanged("IsInfMedClerkIntermitVisible");
  }
  private _IsInfMedClerkContinVisible: Visibility = Visibility.Collapsed;
  public get IsInfMedClerkContinVisible(): Visibility {
    return this._IsInfMedClerkContinVisible;
  }
  public set IsInfMedClerkContinVisible(value: Visibility) {
    this._IsInfMedClerkContinVisible = value;
    //NotifyPropertyChanged("IsInfMedClerkContinVisible");
  }
  private _IsEnableConcentration: boolean = false;
  public get IsEnableConcentration(): boolean {
    return (
      this._IsEnableConcentration &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsEnableConcentration(value: boolean) {
    if (this._IsEnableConcentration != value) {
      this._IsEnableConcentration = value;
      //super.NotifyPropertyChanged("IsEnableConcentration");
    }
  }
  private _IsInfTargetSatrangeVisible: Visibility = Visibility.Collapsed;
  public get IsInfTargetSatrangeVisible(): Visibility {
    return this._IsInfTargetSatrangeVisible;
  }
  public set IsInfTargetSatrangeVisible(value: Visibility) {
    this._IsInfTargetSatrangeVisible = value;
    //NotifyPropertyChanged("IsInfTargetSatrangeVisible");
  }
  private _LowConcentration: string;
  public get LowConcentration(): string {
    return this._LowConcentration;
  }
  public set LowConcentration(value: string) {
    if (this._LowConcentration != value) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._LowConcentration = value;
        //NotifyPropertyChanged("LowConcentration");
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Reorder &&
              this.oBasicDetailsVM.actualClerkingValues != null &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.LowConcentration
              ) &&
              String.Compare(
                this.oBasicDetailsVM.actualClerkingValues.LowConcentration,
                value
              ) != 0) ||
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend)
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(
              value,
              this._LowConcentration
            );
          }
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains('LowConcentration')
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('LowConcentration');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          if (this.oBasicDetailsVM.InfusionDetails != null)
            this.oBasicDetailsVM.InfusionDetails.IsReadOnlyConcentrationInRecAdmin =
              true;
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        }
        this._LowConcentration = value;
        if (
          this.IsConcentrationVisible == Visibility.Visible &&
          !(
            String.Equals(
              this.oBasicDetailsVM.IdentifyingType,
              CConstants.NONCATALOGUEITEM
            ) ||
            String.Equals(
              this.oBasicDetailsVM.IdentifyingType,
              CConstants.Precatalog
            )
          )
        ) {
          if (
            String.IsNullOrEmpty(this.LowConcentration) &&
            (this.LowConcentrationUOM == null ||
              String.IsNullOrEmpty(this.LowConcentrationUOM.Value)) &&
            String.IsNullOrEmpty(this.UpperConcentration) &&
            (this.UpperConcentrationUOM == null ||
              String.IsNullOrEmpty(this.UpperConcentrationUOM.Value))
          ) {
            this.RestoreInfusionNumerator(false, true);
          } else {
            this.RestoreInfusionNumerator(true, false);
          }
        }
        //NotifyPropertyChanged("LowConcentration");
      }
    }
  }
  private _UpperConcentration: string;
  public get UpperConcentration(): string {
    return this._UpperConcentration;
  }
  public set UpperConcentration(value: string) {
    if (this._UpperConcentration != value) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._UpperConcentration = value;
        //NotifyPropertyChanged("UpperConcentration");
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Reorder &&
              this.oBasicDetailsVM.actualClerkingValues != null &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.LowConcentration
              ) &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.UpperConcentration
              ) &&
              String.Compare(
                this.oBasicDetailsVM.actualClerkingValues.UpperConcentration,
                value
              ) != 0) ||
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend)
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(
              value,
              this._UpperConcentration
            );
          }
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains('UpperConcentration')
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('UpperConcentration');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          if (this.oBasicDetailsVM.InfusionDetails != null)
            this.oBasicDetailsVM.InfusionDetails.IsReadOnlyConcentrationInRecAdmin =
              true;
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        }
        this._UpperConcentration = value;
        if (
          this.IsConcentrationVisible == Visibility.Visible &&
          !(
            String.Equals(
              this.oBasicDetailsVM.IdentifyingType,
              CConstants.NONCATALOGUEITEM
            ) ||
            String.Equals(
              this.oBasicDetailsVM.IdentifyingType,
              CConstants.Precatalog
            )
          )
        ) {
          if (
            String.IsNullOrEmpty(this.LowConcentration) &&
            (this.LowConcentrationUOM == null ||
              String.IsNullOrEmpty(this.LowConcentrationUOM.Value)) &&
            String.IsNullOrEmpty(this.UpperConcentration) &&
            (this.UpperConcentrationUOM == null ||
              String.IsNullOrEmpty(this.UpperConcentrationUOM.Value))
          ) {
            this.RestoreInfusionNumerator(false, true);
          } else {
            this.RestoreInfusionNumerator(true, false);
          }
        }
        //NotifyPropertyChanged("UpperConcentration");
      }
    }
  }
  private _LowConcentrationUOMlist: ObservableCollection<CListItem>;
  public get LowConcentrationUOMlist(): ObservableCollection<CListItem> {
    return this._LowConcentrationUOMlist;
  }
  public set LowConcentrationUOMlist(value: ObservableCollection<CListItem>) {
    if (this._LowConcentrationUOMlist != value) {
      this._LowConcentrationUOMlist = value;
      // NotifyPropertyChanged("LowConcentrationUOMlist");
    }
  }
  private _LowConcentrationUOM: CListItem;
  public get LowConcentrationUOM(): CListItem {
    return this._LowConcentrationUOM;
  }
  public set LowConcentrationUOM(value: CListItem) {
    if (value != this._LowConcentrationUOM) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._LowConcentrationUOM = value;
      } else {
        if (
          value != null &&
          value.DisplayText != null &&
          value.DisplayText == 'More'
        ) {
          value.DisplayText = "";    
          this.GetMoreComboOption(CConstants.ConcentrationDoseUOM);
        }
        if (this.oBasicDetailsVM != null) {
          if (
            this.oBasicDetailsVM.actualClerkingValues != null &&
            ((this.oBasicDetailsVM.actualClerkingValues.LowConcentrationUOM ==
              null &&
              value != null &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend) ||
              (this.oBasicDetailsVM.actualClerkingValues.LowConcentrationUOM !=
                null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues.LowConcentrationUOM
                    .DisplayText
                ) &&
                value == null) ||
              (this.oBasicDetailsVM.actualClerkingValues.LowConcentrationUOM !=
                null &&
                value != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues.LowConcentrationUOM
                    .DisplayText
                ) &&
                String.Compare(
                  this.oBasicDetailsVM.actualClerkingValues.LowConcentrationUOM
                    .DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0))
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value);
          }
        }
        if (
          value != null &&
          value.Tag == null &&
          this.oBasicDetailsVM != null
        ) {
          if (
            !this.oBasicDetailsVM.IsGetFomviewDefaultParamsCallbackInProgress
          ) {
            this.oBasicDetailsVM.IsenableRSNFORMOD = true;
            this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
            this.oBasicDetailsVM.IsenableModificationcomments = true;
            if (
              !this.oBasicDetailsVM.lstAmendedFlds.Contains(
                'LowConcentrationUOM'
              )
            ) {
              this.oBasicDetailsVM.lstAmendedFlds.Add('LowConcentrationUOM');
              if (
                this.oBasicDetailsVM.bIsAmend &&
                !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
                PatientContext.PrescriptionType ==
                  PrescriptionTypes.ForAdministration &&
                this.oBasicDetailsVM.IsenableRSNFORMOD
              ) {
                this.oBasicDetailsVM.DoChangesForAmend();
              }
            }
          }
          if (this.oBasicDetailsVM.InfusionDetails != null)
            this.oBasicDetailsVM.InfusionDetails.IsReadOnlyConcentrationInRecAdmin =
              true;
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        }
        this._LowConcentrationUOM = value;
      }
      if (this.oBasicDetailsVM != null && this.LowConcentrationUOMlist != null)
        this._LowConcentrationUOM = this.oBasicDetailsVM.GetComboValue(
          value,
          this.LowConcentrationUOMlist
        );
      else this._LowConcentrationUOM = value;
      if (
        this.IsConcentrationVisible == Visibility.Visible &&
        !(
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.NONCATALOGUEITEM
          ) ||
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.Precatalog
          )
        )
      ) {
        if (
          String.IsNullOrEmpty(this.LowConcentration) &&
          (this.LowConcentrationUOM == null ||
            String.IsNullOrEmpty(this.LowConcentrationUOM.Value)) &&
          String.IsNullOrEmpty(this.UpperConcentration) &&
          (this.UpperConcentrationUOM == null ||
            String.IsNullOrEmpty(this.UpperConcentrationUOM.Value))
        ) {
          this.RestoreInfusionNumerator(false, true);
        } else {
          this.RestoreInfusionNumerator(true, false);
        }
      }
      //NotifyPropertyChanged("LowConcentrationUOM");
    }
  }
  private _IsReadOnlyConcentrationInRecAdmin: boolean = false;
  public get IsReadOnlyConcentrationInRecAdmin(): boolean {
    return this._IsReadOnlyConcentrationInRecAdmin;
  }
  public set IsReadOnlyConcentrationInRecAdmin(value: boolean) {
    if (this._IsReadOnlyConcentrationInRecAdmin != value) {
      this._IsReadOnlyConcentrationInRecAdmin = value;
      //super.NotifyPropertyChanged("IsEnableConcentration");
    }
  }
  private _UpperConcentrationUOMlist: ObservableCollection<CListItem>;
  public get UpperConcentrationUOMlist(): ObservableCollection<CListItem> {
    return this._UpperConcentrationUOMlist;
  }
  public set UpperConcentrationUOMlist(value: ObservableCollection<CListItem>) {
    if (this._UpperConcentrationUOMlist != value) {
      this._UpperConcentrationUOMlist = value;
      //NotifyPropertyChanged("UpperConcentrationUOMlist");
    }
  }
  private _UpperConcentrationUOM: CListItem;
  public get UpperConcentrationUOM(): CListItem {
    return this._UpperConcentrationUOM;
  }
  public set UpperConcentrationUOM(value: CListItem) {
    if (value != this._UpperConcentrationUOM) {
      if (
        this.oBasicDetailsVM != null &&
        !this.oBasicDetailsVM.isFormViewDataLoaded
      ) {
        this._UpperConcentrationUOM = value;
      } else {
        if (this.oBasicDetailsVM != null) {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            this.oBasicDetailsVM.actualClerkingValues != null &&
            ((this.oBasicDetailsVM.actualClerkingValues.UpperConcentrationUOM ==
              null &&
              value != null &&
              !String.IsNullOrEmpty(value.DisplayText) &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Amend) ||
              (this.oBasicDetailsVM.actualClerkingValues
                .UpperConcentrationUOM != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues
                    .UpperConcentrationUOM.DisplayText
                ) &&
                value == null) ||
              (this.oBasicDetailsVM.actualClerkingValues
                .UpperConcentrationUOM != null &&
                value != null &&
                !String.IsNullOrEmpty(
                  this.oBasicDetailsVM.actualClerkingValues
                    .UpperConcentrationUOM.DisplayText
                ) &&
                String.Compare(
                  this.oBasicDetailsVM.actualClerkingValues
                    .UpperConcentrationUOM.DisplayText,
                  value.DisplayText,
                  StringComparison.CurrentCultureIgnoreCase
                ) != 0))
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value);
          }
          if (
            !this.oBasicDetailsVM.lstAmendedFlds.Contains(
              'UpperConcentrationUOM'
            )
          ) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('UpperConcentrationUOM');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          if (this.oBasicDetailsVM.InfusionDetails != null)
            this.oBasicDetailsVM.InfusionDetails.IsReadOnlyConcentrationInRecAdmin =
              true;
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        }
        this._UpperConcentrationUOM = value;
      }
      if (
        this.oBasicDetailsVM != null &&
        this.UpperConcentrationUOMlist != null
      )
        this._UpperConcentrationUOM = this.oBasicDetailsVM.GetComboValue(
          value,
          this.UpperConcentrationUOMlist
        );
      else this._UpperConcentrationUOM = value;
      if (
        this.IsConcentrationVisible == Visibility.Visible &&
        !(
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.NONCATALOGUEITEM
          ) ||
          String.Equals(
            this.oBasicDetailsVM.IdentifyingType,
            CConstants.Precatalog
          )
        )
      ) {
        if (
          String.IsNullOrEmpty(this.LowConcentration) &&
          (this.LowConcentrationUOM == null ||
            String.IsNullOrEmpty(this.LowConcentrationUOM.Value)) &&
          String.IsNullOrEmpty(this.UpperConcentration) &&
          (this.UpperConcentrationUOM == null ||
            String.IsNullOrEmpty(this.UpperConcentrationUOM.Value))
        ) {
          this.RestoreInfusionNumerator(false, true);
        } else {
          this.RestoreInfusionNumerator(true, false);
        }
      }
      //NotifyPropertyChanged("UpperConcentrationUOM");
    }
  }
  private _UpperRate: string;
  public get UpperRate(): string {
    return this._UpperRate;
  }
  public set UpperRate(value: string) {
    if (
      this.oBasicDetailsVM != null &&
      !this.oBasicDetailsVM.isFormViewDataLoaded
    ) {
      this._UpperRate = value;
      // NotifyPropertyChanged("UpperRate");
    } else {
      if (this.oBasicDetailsVM != null) {
        if (this._UpperRate != value) {
          this.oBasicDetailsVM.InfusionDetails.SeqInfUpperRate =
            this._UpperRate;
          this.oBasicDetailsVM.ClearPrescribedQuantity();
        }
        if(!this.oBasicDetailsVM.IsCallFromSVGridUnSelect)
          {
          this.oBasicDetailsVM.IsenableRSNFORMOD = true;
          this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
          this.oBasicDetailsVM.IsenableModificationcomments = true;
          if (
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode ==
                ActivityTypes.Reorder &&
              this.oBasicDetailsVM.actualClerkingValues != null &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.Rate
              ) &&
              !String.IsNullOrEmpty(
                this.oBasicDetailsVM.actualClerkingValues.UpperRate
              ) &&
              String.Compare(
                this.oBasicDetailsVM.actualClerkingValues.UpperRate,
                value
              ) != 0) ||
            (this.oBasicDetailsVM != null &&
              this.oBasicDetailsVM.oPrescitemVM != null &&
              this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend)
          ) {
            this.oBasicDetailsVM.IsMandatoryReasonForMedClerkModify = true;
            this.oBasicDetailsVM.SetOnadmissionValue(value, this._UpperRate);
          }
          if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('UpperRate')) {
            this.oBasicDetailsVM.lstAmendedFlds.Add('UpperRate');
            if (
              this.oBasicDetailsVM.bIsAmend &&
              !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
              PatientContext.PrescriptionType ==
                PrescriptionTypes.ForAdministration &&
              this.oBasicDetailsVM.IsenableRSNFORMOD
            ) {
              this.oBasicDetailsVM.DoChangesForAmend();
            }
          }
          if (!this.oBasicDetailsVM.IsInfusionRateChanged) {
            this.oBasicDetailsVM.IsInfusionRateChanged = true;
          }
        }
      }
      this._UpperRate = value;
      // NotifyPropertyChanged("UpperRate");
    }
  }
  private _SeqInfUpperRate: string;
  public get SeqInfUpperRate(): string {
    return this._SeqInfUpperRate;
  }
  public set SeqInfUpperRate(value: string) {
    this._SeqInfUpperRate = value;
    // NotifyPropertyChanged("SeqInfUpperRate");
  }
  public _IsUpperRateVisible: Visibility;
  public get IsUpperRateVisible(): Visibility {
    return this._IsUpperRateVisible;
  }
  public set IsUpperRateVisible(value: Visibility) {
    if (value != this._IsUpperRateVisible) {
      this._IsUpperRateVisible = value;
      // NotifyPropertyChanged("IsUpperRateVisible");
    }
  }
  private _IsEnableInfUpperRate: boolean = false;
  public get IsEnableInfUpperRate(): boolean {
    return (
      this._IsEnableInfUpperRate &&
      (this.oBasicDetailsVM == null ||
        (this.oBasicDetailsVM != null &&
          this.oBasicDetailsVM.IsNotInPatientSteppedVariableAmend))
    );
  }
  public set IsEnableInfUpperRate(value: boolean) {
    if (this._IsEnableInfUpperRate != value) {
      this._IsEnableInfUpperRate = value;
      // super.NotifyPropertyChanged("IsEnableInfUpperRate");
    }
  }
  private GetMoreComboOption(MoreOptionCode: string): void {
    this.MoreOptionKey = MoreOptionCode;
    let objService: ManagePrescriptionWSSoapClient =
      new ManagePrescriptionWSSoapClient();
    objService.GetAllOptionsCompleted = (s, e) => {
      this.objService_GetAllOptionsCompleted(s, e);
    };
    let objAllRequest: CReqMsgGetAllOptions = new CReqMsgGetAllOptions();
    objAllRequest.IdentifyingOIDBC = this.oBasicDetailsVM.IdentifyingOID;
    objAllRequest.IdentifyingTypeBC = this.oBasicDetailsVM.IdentifyingType;
    objAllRequest.sOptionCodeBC = CConstants.DoseUOMOptionCode;
    objAllRequest.MCVersionNoBC = AppSessionInfo.AMCV;
    objAllRequest.oContextInformation = Common.FillContext();
    objService.GetAllOptionsAsync(objAllRequest);
  }
  objService_GetAllOptionsCompleted(
    sender: Object,
    e: GetAllOptionsCompletedEventArgs
  ): void {
    let _ErrorID: number = 80000046;
    let _ErrorSource: string =
      'LorAppManagePrescriptionBBUI_P2.dll, Class:BasicDetailsVM, Method:objService_GetAllOptionsCompleted()';
    if (e.Error == null) {
      try {
        let objResponse: CResMsgGetAllOptions = e.Result;
        if (
          objResponse != null &&
          objResponse.oValues != null &&
          objResponse.oValues.Count > 0
        ) {
          switch (this.MoreOptionKey) {
            case CConstants.Booster:
              this.oBasicDetailsVM.InfusionDetails.BoosterDoseUOMList =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (
                  !String.IsNullOrEmpty(objResponse.oValues[i].Name) &&
                  !String.Equals(
                    objResponse.oValues[i].SealImageList,
                    CConstants.CompositeUOM
                  )
                ) {
                  this.oBasicDetailsVM.InfusionDetails.BoosterDoseUOMList.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                    })
                  );
                }
              }
              break;
            case CConstants.Bolus:
              this.oBasicDetailsVM.InfusionDetails.BolusUOMList =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (
                  !String.IsNullOrEmpty(objResponse.oValues[i].Name) &&
                  !String.Equals(
                    objResponse.oValues[i].SealImageList,
                    CConstants.CompositeUOM
                  )
                ) {
                  this.oBasicDetailsVM.InfusionDetails.BolusUOMList.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                    })
                  );
                }
              }
              break;
            case CConstants.ConcentrationDoseUOM:
              this.oBasicDetailsVM.InfusionDetails.LowConcentrationUOMlist =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (
                  !String.IsNullOrEmpty(objResponse.oValues[i].Name) &&
                  !String.Equals(
                    objResponse.oValues[i].SealImageList,
                    CConstants.CompositeUOM
                  )
                ) {
                  this.oBasicDetailsVM.InfusionDetails.LowConcentrationUOMlist.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                    })
                  );
                }
              }
              break;
            case CConstants.TypeInInfusionRateNumerator:
              this.oBasicDetailsVM.InfusionDetails.InfRateNumeratorUOM =
                new ObservableCollection<CListItem>();
              for (let i: number = 0; i < objResponse.oValues.Count; i++) {
                if (
                  !String.IsNullOrEmpty(objResponse.oValues[i].Name) &&
                  !String.Equals(
                    objResponse.oValues[i].SealImageList,
                    CConstants.CompositeUOM
                  )
                ) {
                  this.oBasicDetailsVM.InfusionDetails.InfRateNumeratorUOM.Add(
                    ObjectHelper.CreateObject(new CListItem(), {
                      DisplayText: objResponse.oValues[i].Name,
                      Value: objResponse.oValues[i].Code.ToString(),
                    })
                  );
                }
              }
              break;
          }
        }
      } catch (ex: any) {
        let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
          _ErrorID,
          _ErrorSource,
          ex
        );
      }
    } else {
      let lnReturn: number = Application.AMSHelper.PublicExceptionDetails(
        _ErrorID,
        _ErrorSource,
        e.Error
      );
    }
  }
  public get SubSequentialItemOrderno(): number {
    return this._SubSequentialItemOrderno;
  }
  public set SubSequentialItemOrderno(value: number) {
    this._SubSequentialItemOrderno = value;
    // super.NotifyPropertyChanged("SubSequentialItemOrderno");
  }
  public get HumidificationList(): ObservableCollection<CListItem> {
    return this._humidificationList;
  }
  public set HumidificationList(value: ObservableCollection<CListItem>) {
    if (this._humidificationList != value) {
      this._humidificationList = value;
      // super.NotifyPropertyChanged("HumidificationList");
    }
  }
  public get Humidification(): CListItem {
    return this._humidification;
  }
  public set Humidification(value: CListItem) {
    if (this._humidification != value) {
      if (this.oBasicDetailsVM != null) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('Humidification')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('Humidification');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
      }
      this._humidification = value;
      // super.NotifyPropertyChanged("Humidification");
    }
  }
  public get IsManageSequenceVisible(): Visibility {
    return this._IsManageSequenceVisible;
  }
  public set IsManageSequenceVisible(value: Visibility) {
    if (this._IsManageSequenceVisible != value) {
      this._IsManageSequenceVisible = value;
      if (
        this._IsManageSequenceVisible == Visibility.Visible &&
        String.Equals(
          ContextInfo.MenuCode,
          CConstants.AuthoriseMenuCode,
          StringComparison.InvariantCultureIgnoreCase
        ) &&
        this.oBasicDetailsVM.InfusionDetails != null &&
        this.oBasicDetailsVM.InfusionDetails.GroupSequenceNo == 0
      ) {
        this._IsManageSequenceVisible = Visibility.Collapsed;
      }
      // super.NotifyPropertyChanged("IsManageSequenceVisible");
    }
  }
  public get SelectedPrecedingInfusionItemStatusText(): string {
    return this._SelectedPrecedingInfusionItemStatusText;
  }
  public set SelectedPrecedingInfusionItemStatusText(value: string) {
    if (this._SelectedPrecedingInfusionItemStatusText != value) {
      this._SelectedPrecedingInfusionItemStatusText = value;
      //super.NotifyPropertyChanged("SelectedPrecedingInfusionItemStatusText");
      this._SelectedPrecedingInfusionItemStatusVisible = !String.IsNullOrEmpty(
        value
      )
        ? Visibility.Visible
        : Visibility.Collapsed;
      //super.NotifyPropertyChanged("SelectedPrecedingInfusionItemStatusVisible");
      // super.NotifyPropertyChanged("lblSelectedPrecInfItemValueWithStatus");
    }
  }
  public get lblSelectedPrecInfItemValueWithStatus(): string {
    return (
      this._SelectedPrecedingInfusionItemStatusText +
      this._lblSelectedPrecInfItemValue
    );
  }
  public get SelectedPrecedingInfusionItemStatusVisible(): Visibility {
    return this._SelectedPrecedingInfusionItemStatusVisible;
  }
  public get IsEnableManageSequence(): boolean {
    return this._IsEnableManageSequence;
  }
  public set IsEnableManageSequence(value: boolean) {
    if (this._IsEnableManageSequence != value) {
      this._IsEnableManageSequence = value;
      // super.NotifyPropertyChanged("IsEnableManageSequence");
    }
  }
  public get SelectedSequenceName(): CListItem {
    return this._SelectedSequenceName;
  }
  public set SelectedSequenceName(value: CListItem) {
    if (
      !(
        this._SelectedSequenceName != null &&
        value != null &&
        String.Equals(
          this._SelectedSequenceName.Value,
          value.Value,
          StringComparison.InvariantCultureIgnoreCase
        )
      )
    ) {
      let _PrevSelectedGroupNo: number = -1;
      if (
        this._SelectedSequenceName != null &&
        !String.IsNullOrEmpty(this._SelectedSequenceName.Value)
      ) {
        Number.TryParse(this._SelectedSequenceName.Value, (o) => {
          _PrevSelectedGroupNo = o;
        });
      }
      this._SelectedSequenceName = value;
      this.IsClearSequenceEnabled = true;
      // super.NotifyPropertyChanged("SelectedSequenceName");
      let _SelectedSeqNameID: number = 0;
      if (
        this.SelectedSequenceName != null &&
        !String.IsNullOrEmpty(this.SelectedSequenceName.Value)
      ) {
        let bSeqNameOID: boolean = Number.TryParse(
          this.SelectedSequenceName.Value,
          (o) => {
            _SelectedSeqNameID = o;
          }
        );
        if (bSeqNameOID) {
          this.GroupSequenceNo = _SelectedSeqNameID;
        }
      }
      if (
        this.oBasicDetailsVM != null &&
        this.oBasicDetailsVM.oPrescitemVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM != null &&
        this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM.MedsResolve != null
      ) {
        this.oBasicDetailsVM.IsenableRSNFORMOD = true;
        this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
        this.oBasicDetailsVM.IsenableModificationcomments = true;
        if (!this.oBasicDetailsVM.lstAmendedFlds.Contains('SequenceName')) {
          this.oBasicDetailsVM.lstAmendedFlds.Add('SequenceName');
          if (
            this.oBasicDetailsVM.bIsAmend &&
            !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
            PatientContext.PrescriptionType ==
              PrescriptionTypes.ForAdministration &&
            this.oBasicDetailsVM.IsenableRSNFORMOD
          ) {
            this.oBasicDetailsVM.DoChangesForAmend();
          }
        }
        if (this._SelectedSequenceName != null) {
          this.oBasicDetailsVM.ReviewAfterVisible = Visibility.Collapsed;
          if (this.oBasicDetailsVM.ReviewAfterDTTM != DateTime.MinValue) {
            this.oBasicDetailsVM.ReviewAfterDTTM = DateTime.MinValue;
          }
          this.oBasicDetailsVM.ReviewAfterCommentsVisible =
            Visibility.Collapsed;
          if (
            this.oBasicDetailsVM.oPrescitemVM
              .IsFormViewer_Loaded_Event_Completed
          ) {
            let AllActiveItems: boolean =
              this.CboSelectedPrecInfItemlstVisible == Visibility.Visible
                ? true
                : false;
            this.PrecedingInfusionItemlst =
              CSequentialHelper.GetPrecedingInfusionItemList(
                this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM.MedsResolve,
                this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM
                  .oTempPrescDisCancelItemVM,
                this.GroupSequenceNo,
                this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemOID,
                this.oBasicDetailsVM.oPrescitemVM.UniqueRowID,
                AllActiveItems
              );
            if (
              this.PrecedingInfusionItemlst != null &&
              this.PrecedingInfusionItemlst.Count == 1
            ) {
              if (_SelectedSeqNameID > 0) {
                this.SelectedPrecedingInfusionItem =
                  this.PrecedingInfusionItemlst.FirstOrDefault();
              }
            }
          }
          if (
            this.GroupSequenceNo > 0 &&
            CSequentialHelper.GetLastItemSequenceNo(
              this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM.MedsResolve,
              this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM
                .oTempPrescDisCancelItemVM,
              this.GroupSequenceNo
            ) > 0
          ) {
            this.IsDisplayItemSequenceNumberVisi = Visibility.Visible;
            this.InfusionItemsIn_Text = String.Format(
              Resource.Infusion.lblInfusionItemsIn_Text,
              this.GroupSequenceNo
            );
          } else {
            if (
              this.oBasicDetailsVM.StartDTTM == DateTime.MinValue ||
              this.oBasicDetailsVM.StartPrescriptionTime == DateTime.MinValue
            ) {
              this.oBasicDetailsVM.StartDTTM =
                FormviewerCommonData.ServerDateTime;
              this.oBasicDetailsVM.StartPrescriptionTime =
                FormviewerCommonData.ServerDateTime;
            }
            this.IsDisplayItemSequenceNumberVisi = Visibility.Collapsed;
          }
          let oPerviousStartDTTM: DateTime = DateTime.MinValue;
          if (
            this.SelectedPrecedingInfusionItem != null &&
            !this.oBasicDetailsVM.IsRestoreOldValues
          ) {
            oPerviousStartDTTM = CSequentialHelper.GetActiveLastItemEndDTTM(
              this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM.MedsResolve,
              this.GroupSequenceNo
            );
          }
          let CurrentActiveFirstItem: number = 1;
          let oInfFirstItem: PrescriptionItemVM =
            this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM.MedsResolve.Where(
              (i) =>
                i.FormViewerDetails.BasicDetails.InfusionDetails
                  .GroupSequenceNo == this.GroupSequenceNo &&
                i.FormViewerDetails.BasicDetails.InfusionDetails
                  .ItemSequenceNo == 1
            ).FirstOrDefault();
          if (
            oInfFirstItem == null &&
            this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM
              .oTempPrescDisCancelItemVM != null &&
            this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM
              .oTempPrescDisCancelItemVM.Count > 0
          ) {
            oInfFirstItem =
              this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM.oTempPrescDisCancelItemVM
                .Where(
                  (i) =>
                    i.FormViewerDetails.BasicDetails.InfusionDetails
                      .GroupSequenceNo == this.GroupSequenceNo &&
                    i.FormViewerDetails.BasicDetails.InfusionDetails
                      .ItemSequenceNo == 1
                )
                .FirstOrDefault();
          }
          if (oInfFirstItem != null) {
            CurrentActiveFirstItem =
              oInfFirstItem.FormViewerDetails.BasicDetails.InfusionDetails
                .ItemSequenceNo;
          }
          if (_PrevSelectedGroupNo > 0 && _SelectedSeqNameID == 0) {
            this.oBasicDetailsVM.StartDTTM =
              FormviewerCommonData.ServerDateTime;
            this.oBasicDetailsVM.StartPrescriptionTime =
              FormviewerCommonData.ServerDateTime;
            this.oBasicDetailsVM.IsEnableStartdtSeq = true;
          } else {
            if (
              ((this.oBasicDetailsVM.oPrescitemVM
                .TopMostAmendedPrescriptionItemOID > 0 &&
                this.ParentPrescriptionItemOID ==
                  this.oBasicDetailsVM.oPrescitemVM
                    .TopMostAmendedPrescriptionItemOID) ||
                this.ItemSequenceNo == 1) &&
              !String.Equals(
                this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus,
                CConstants.COMPLETED,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              !String.Equals(
                this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus,
                CConstants.DISCONTINUED,
                StringComparison.InvariantCultureIgnoreCase
              ) &&
              !String.Equals(
                this.oBasicDetailsVM.oPrescitemVM.PrescriptionItemStatus,
                CConstants.CANCELLED,
                StringComparison.InvariantCultureIgnoreCase
              )
            ) {
              this.oBasicDetailsVM.IsEnableStartdtSeq = true;
            } else {
              if (
                this.SelectedPrecedingInfusionItem != null &&
                !this.oBasicDetailsVM.IsRestoreOldValues
              ) {
                this.oBasicDetailsVM.StartDTTM = oPerviousStartDTTM;
                this.oBasicDetailsVM.StartPrescriptionTime = oPerviousStartDTTM;
                this.oBasicDetailsVM.IsEnableStartdtSeq = false;
                this.oBasicDetailsVM.TimeMinValueFlag = true;
              }
            }
          }
          if (
            this.oBasicDetailsVM != null &&
            (this.GroupSequenceNo > 0 ||
              String.Equals(
                this.SelectedSequenceName.Value,
                CConstants.NewSequenceCode,
                StringComparison.InvariantCultureIgnoreCase
              ))
          ) {
            this.oBasicDetailsVM.IsRecordAdminMsg1Visible =
              Visibility.Collapsed;
            this.oBasicDetailsVM.FollowUpStatMessageVisibility =
              Visibility.Collapsed;
          }
        } else {
          this.oBasicDetailsVM.ReviewAfterVisible = Visibility.Visible;
          this.oBasicDetailsVM.ReviewAfterCommentsVisible = Visibility.Visible;
          this.IsDisplayItemSequenceNumberVisi = Visibility.Collapsed;
          this.PrecedingInfusionItemlst = null;
          this.oBasicDetailsVM.IsEnableStartdtSeq = true;
          if (this.GroupSequenceNo > 0 && this.ItemSequenceNo > 0) {
            let seqitem = CSequentialHelper.GetFirstActiveItemInfusionVM(
              this.oBasicDetailsVM.oPrescitemVM.ParentbaseVM.MedsResolve,
              this.GroupSequenceNo
            );
            if (
              seqitem != null &&
              seqitem.ItemSequenceNo != this.ItemSequenceNo
            ) {
              this.oBasicDetailsVM.IsEnableStartdtSeq = false;
            }
          }
        }
      }
    }
  }
  public get IsEnablePrecedingInfusionItem(): boolean {
    return this._IsEnablePrecedingInfusionItem;
  }
  public set IsEnablePrecedingInfusionItem(value: boolean) {
    if (this._IsEnablePrecedingInfusionItem != value) {
      this._IsEnablePrecedingInfusionItem = value;
      //super.NotifyPropertyChanged("IsEnablePrecedingInfusionItem");
    }
  }
  public get PrecedingInfusionItemlst(): ObservableCollection<CListItem> {
    return this._PrecedingInfusionItemlst;
  }
  public set PrecedingInfusionItemlst(value: ObservableCollection<CListItem>) {
    if (this._PrecedingInfusionItemlst != value) {
      this._PrecedingInfusionItemlst = value;
      //super.NotifyPropertyChanged("PrecedingInfusionItemlst");
      this.oBasicDetailsVM.IsenableRSNFORMOD = true;
      this.oBasicDetailsVM.IsMandatoryRSNFORMOD = true;
      this.oBasicDetailsVM.IsenableModificationcomments = true;
      if (
        !this.oBasicDetailsVM.lstAmendedFlds.Contains(
          'PrecedingInfusionItemlst'
        )
      ) {
        this.oBasicDetailsVM.lstAmendedFlds.Add('PrecedingInfusionItemlst');
        if (
          this.oBasicDetailsVM.bIsAmend &&
          !this.oBasicDetailsVM.IsFirstDoseClearForAmend &&
          PatientContext.PrescriptionType ==
            PrescriptionTypes.ForAdministration &&
          this.oBasicDetailsVM.IsenableRSNFORMOD
        ) {
          this.oBasicDetailsVM.DoChangesForAmend();
        }
      }
    }
  }
  public get SelectedPrecedingInfusionItem(): CListItem {
    return this._SelectedPrecedingInfusionItem;
  }
  public set SelectedPrecedingInfusionItem(value: CListItem) {
    if (this._SelectedPrecedingInfusionItem != value) {
      this._SelectedPrecedingInfusionItem = value;
      // super.NotifyPropertyChanged("SelectedPrecedingInfusionItem");
    }
  }
  public get IsManageSequenceLinkVisible(): Visibility {
    return this._IsManageSequenceLinkVisible;
  }
  public set IsManageSequenceLinkVisible(value: Visibility) {
    if (this._IsManageSequenceLinkVisible != value) {
      this._IsManageSequenceLinkVisible = value;
      // super.NotifyPropertyChanged("IsManageSequenceLinkVisible");
    }
  }
  public get IsEnableManageSequenceLink(): boolean {
    return this._IsEnableManageSequenceLink;
  }
  public set IsEnableManageSequenceLink(value: boolean) {
    if (this._IsEnableManageSequenceLink != value) {
      this._IsEnableManageSequenceLink = value;
      // super.NotifyPropertyChanged("IsEnableManageSequenceLink");
    }
  }
  public get SequenceNamelst(): ObservableCollection<CListItem> {
    return this._SequenceNamelst;
  }
  public set SequenceNamelst(value: ObservableCollection<CListItem>) {
    if (this._SequenceNamelst != value) {
      this._SequenceNamelst = value;
      // super.NotifyPropertyChanged("SequenceNamelst");
    }
  }
  private _IsLastItem: boolean = false;
  public get IsLastItem(): boolean {
    return this._IsLastItem;
  }
  public set IsLastItem(value: boolean) {
    this._IsLastItem = value;
  }
  public get GroupSequenceNo(): number {
    return this._GroupSequenceNo;
  }
  public set GroupSequenceNo(value: number) {
    this._GroupSequenceNo = value;
  }
  public get ItemSequenceNo(): number {
    return this._ItemSequenceNo;
  }
  public set ItemSequenceNo(value: number) {
    this._ItemSequenceNo = value;
  }
  _IsAnyItemAdministeredInSeqGroup: number = 0;
  public get IsAnyItemAdministeredInSeqGroup(): number {
    return this._IsAnyItemAdministeredInSeqGroup;
  }
  public set IsAnyItemAdministeredInSeqGroup(value: number) {
    this._IsAnyItemAdministeredInSeqGroup = value;
  }
  private _TotalItemsInGroupSequence: number = 0;
  public get TotalItemsInGroupSequence(): number {
    return this._TotalItemsInGroupSequence;
  }
  public set TotalItemsInGroupSequence(value: number) {
    this._TotalItemsInGroupSequence = value;
  }
  private _CurrentItemSequenceNo: number = 0;
  public get CurrentItemSequenceNo(): number {
    return this._CurrentItemSequenceNo;
  }
  public set CurrentItemSequenceNo(value: number) {
    this._CurrentItemSequenceNo = value;
  }
  private _IsDisplayItemSequenceNumberVisi: Visibility = Visibility.Collapsed;
  public get IsDisplayItemSequenceNumberVisi(): Visibility {
    return this._IsDisplayItemSequenceNumberVisi;
  }
  public set IsDisplayItemSequenceNumberVisi(value: Visibility) {
    this._IsDisplayItemSequenceNumberVisi = value;
    if (
      this._IsDisplayItemSequenceNumberVisi == Visibility.Visible ||
      this.IsClearSequenceVisible == Visibility.Visible
    ) {
      this.IsInflineitemOrClearSequenceVisible = Visibility.Visible;
    } else {
      this.IsInflineitemOrClearSequenceVisible = Visibility.Collapsed;
    }
    //super.NotifyPropertyChanged("IsDisplayItemSequenceNumberVisi");
  }
  private _IsOSSLinkInFVVisible: Visibility = Visibility.Collapsed;
  public get IsOSSLinkInFVVisible(): Visibility {
    return this._IsOSSLinkInFVVisible;
  }
  public set IsOSSLinkInFVVisible(value: Visibility) {
    this._IsOSSLinkInFVVisible = value;
    //super.NotifyPropertyChanged("IsOSSLinkInFVVisible");
  }
  private _IsSeqINonIvLinkInFVVisible: Visibility = Visibility.Collapsed;
  public get IsSeqINonIvLinkInFVVisible(): Visibility {
    return this._IsSeqINonIvLinkInFVVisible;
  }
  public set IsSeqINonIvLinkInFVVisible(value: Visibility) {
    this._IsSeqINonIvLinkInFVVisible = value;
    //super.NotifyPropertyChanged("IsSeqINonIvLinkInFVVisible");
  }
  private _IsClearSequenceVisible: Visibility = Visibility.Visible;
  public get IsClearSequenceVisible(): Visibility {
    return this._IsClearSequenceVisible;
  }
  public set IsClearSequenceVisible(value: Visibility) {
    this._IsClearSequenceVisible = value;
    if (
      this.IsDisplayItemSequenceNumberVisi == Visibility.Visible ||
      this._IsClearSequenceVisible == Visibility.Visible
    ) {
      this.IsInflineitemOrClearSequenceVisible = Visibility.Visible;
    } else {
      this.IsInflineitemOrClearSequenceVisible = Visibility.Collapsed;
    }
    //super.NotifyPropertyChanged("IsClearSequenceVisible");
  }
  private _IsInflineitemOrClearSequenceVisible: Visibility = Visibility.Visible;
  public get IsInflineitemOrClearSequenceVisible(): Visibility {
    return this._IsInflineitemOrClearSequenceVisible;
  }
  public set IsInflineitemOrClearSequenceVisible(value: Visibility) {
    this._IsInflineitemOrClearSequenceVisible = value;
    //super.NotifyPropertyChanged("IsInflineitemOrClearSequenceVisible");
  }
  private _IsClearSequenceEnabled: boolean = false;
  public get IsClearSequenceEnabled(): boolean {
    return this._IsClearSequenceEnabled;
  }
  public set IsClearSequenceEnabled(value: boolean) {
    if (
      this.SelectedSequenceName == null ||
      (this.SelectedSequenceName != null &&
        String.IsNullOrEmpty(this.SelectedSequenceName.Value)) ||
      this.oBasicDetailsVM.oPrescitemVM.ActionCode == ActivityTypes.Amend
    ) {
      this._IsClearSequenceEnabled = false;
    } else {
      this._IsClearSequenceEnabled = value;
    }
    //super.NotifyPropertyChanged("IsClearSequenceEnabled");
  }
  private _InfusionItemsIn_Text: string;
  public get InfusionItemsIn_Text(): string {
    return this._InfusionItemsIn_Text;
  }
  public set InfusionItemsIn_Text(value: string) {
    this._InfusionItemsIn_Text = value;
    //super.NotifyPropertyChanged("InfusionItemsIn_Text");
  }
  private _SequenceNameText: string;
  public get SequenceNameText(): string {
    return this._SequenceNameText;
  }
  public set SequenceNameText(value: string) {
    this._SequenceNameText = value;
    //super.NotifyPropertyChanged("SequenceNameText");
  }
  private _PrecedingInfusionItemText: string;
  public get PrecedingInfusionItemText(): string {
    return this._PrecedingInfusionItemText;
  }
  public set PrecedingInfusionItemText(value: string) {
    this._PrecedingInfusionItemText = value;
    //super.NotifyPropertyChanged("PrecedingInfusionItemText");
  }
  private _CboSequenceNamelstVisible: Visibility = Visibility.Collapsed;
  public get CboSequenceNamelstVisible(): Visibility {
    return this._CboSequenceNamelstVisible;
  }
  public set CboSequenceNamelstVisible(value: Visibility) {
    this._CboSequenceNamelstVisible = value;
    // super.NotifyPropertyChanged("CboSequenceNamelstVisible");
  }
  private _lblSelectedSequenceNameVisible: Visibility = Visibility.Collapsed;
  public get lblSelectedSequenceNameVisible(): Visibility {
    return this._lblSelectedSequenceNameVisible;
  }
  public set lblSelectedSequenceNameVisible(value: Visibility) {
    this._lblSelectedSequenceNameVisible = value;
    // super.NotifyPropertyChanged("lblSelectedSequenceNameVisible");
  }
  private _CboSelectedPrecInfItemlstVisible: Visibility = Visibility.Visible;
  public get CboSelectedPrecInfItemlstVisible(): Visibility {
    return this._CboSelectedPrecInfItemlstVisible;
  }
  public set CboSelectedPrecInfItemlstVisible(value: Visibility) {
    this._CboSelectedPrecInfItemlstVisible = value;
    // super.NotifyPropertyChanged("CboSelectedPrecInfItemlstVisible");
  }
  private _lblSelectedPrecInfItemVisible: Visibility = Visibility.Collapsed;
  public get lblSelectedPrecInfItemVisible(): Visibility {
    return this._lblSelectedPrecInfItemVisible;
  }
  public set lblSelectedPrecInfItemVisible(value: Visibility) {
    this._lblSelectedPrecInfItemVisible = value;
    // super.NotifyPropertyChanged("lblSelectedPrecInfItemVisible");
  }
  private _lblSelectedSequenceNameValue: string = String.Empty;
  public get lblSelectedSequenceNameValue(): string {
    return this._lblSelectedSequenceNameValue;
  }
  public set lblSelectedSequenceNameValue(value: string) {
    this._lblSelectedSequenceNameValue = value;
    // super.NotifyPropertyChanged("lblSelectedSequenceNameValue");
  }
  private _lblSelectedPrecInfItemValue: string = String.Empty;
  public get lblSelectedPrecInfItemValue(): string {
    return this._lblSelectedPrecInfItemValue;
  }
  public set lblSelectedPrecInfItemValue(value: string) {
    this._lblSelectedPrecInfItemValue = value;
    // super.NotifyPropertyChanged("lblSelectedPrecInfItemValue");
    // super.NotifyPropertyChanged("lblSelectedPrecInfItemValueWithStatus");
  }
  private _OrginalInfusionPeriod: string = String.Empty;
  public get OrginalInfusionPeriod(): string {
    return this._OrginalInfusionPeriod;
  }
  public set OrginalInfusionPeriod(value: string) {
    this._OrginalInfusionPeriod = value;
  }
  private _OldInfusionPeriod: string = String.Empty;
  public get OldInfusionPeriod(): string {
    return this._OldInfusionPeriod;
  }
  public set OldInfusionPeriod(value: string) {
    this._OldInfusionPeriod = value;
  }
  private _IsSequentialStartDTTMUpdated: boolean = false;
  public get IsSequentialStartDTTMUpdated(): boolean {
    return this._IsSequentialStartDTTMUpdated;
  }
  public set IsSequentialStartDTTMUpdated(value: boolean) {
    this._IsSequentialStartDTTMUpdated = value;
  }
  private _OrginalSelectedSequenceName: CListItem;
  public get OrginalSelectedSequenceName(): CListItem {
    return this._OrginalSelectedSequenceName;
  }
  public set OrginalSelectedSequenceName(value: CListItem) {
    this._OrginalSelectedSequenceName = value;
  }
  private _OrginalSelectedPrecedingInfItem: CListItem;
  public get OrginalSelectedPrecedingInfItem(): CListItem {
    return this._OrginalSelectedPrecedingInfItem;
  }
  public set OrginalSelectedPrecedingInfItem(value: CListItem) {
    this._OrginalSelectedPrecedingInfItem = value;
  }
  private _ClearItemSequenceNo: number = 0;
  public get ClearItemSequenceNo(): number {
    return this._ClearItemSequenceNo;
  }
  public set ClearItemSequenceNo(value: number) {
    this._ClearItemSequenceNo = value;
    // super.NotifyPropertyChanged("ClearItemSequenceNo");
  }
  private _ClearGroupSequenceNo: number = 0;
  public get ClearGroupSequenceNo(): number {
    return this._ClearGroupSequenceNo;
  }
  public set ClearGroupSequenceNo(value: number) {
    this._ClearGroupSequenceNo = value;
    // super.NotifyPropertyChanged("ClearGroupSequenceNo");
  }
  public DCAmendMessageInf(): void {
    let InfusionFlag: boolean = false;
    let bContInfType: boolean = false;
    if (this.oBasicDetailsVM != null) {
      if (
        this.oBasicDetailsVM.IsAllowMultiRoute &&
        this.oBasicDetailsVM.IsMultiRouteChecked
      ) {
        if (this.oBasicDetailsVM.DefaultDetails != null) {
          InfusionFlag = Common.IsInfusionMultiRoutes(
            this.oBasicDetailsVM.DefaultDetails.Routes
          );
        }
      } else if (
        this.oBasicDetailsVM.Route != null &&
        this.oBasicDetailsVM.Route.Tag != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.Route.Tag.ToString()) &&
        String.Compare(this.oBasicDetailsVM.Route.Tag.ToString(), '1') == 0
      ) {
        InfusionFlag = true;
      }
    }
    if (
      this.oBasicDetailsVM.Route != null &&
      this.oBasicDetailsVM.Route.Tag != null &&
      !String.IsNullOrEmpty(this.oBasicDetailsVM.Route.Tag.ToString()) &&
      (String.Equals(this.oBasicDetailsVM.Route.Tag.ToString(), '1') ||
        !this.oBasicDetailsVM.Route.Tag.ToString().Contains('0')) &&
      ((this.oBasicDetailsVM.InfusionType != null &&
        !String.IsNullOrEmpty(this.oBasicDetailsVM.InfusionType.Value) &&
        String.Equals(
          this.oBasicDetailsVM.InfusionType.Value,
          InfusionTypesCode.CONTINUOUS
        )) ||
        this.oBasicDetailsVM.InfusionType == null)
    ) {
      bContInfType = true;
    }
    if (
      this.oBasicDetailsVM != null &&
      this.oBasicDetailsVM.IsDCIconVisible == Visibility.Visible &&
      InfusionFlag &&
      bContInfType &&
      this.oBasicDetailsVM.IsClearlstAmendedFlds &&
      !this.oBasicDetailsVM.IsGetFomviewDefaultParamsCallbackInProgress &&
      this.oBasicDetailsVM.oPrescitemVM != null &&
      this.oBasicDetailsVM.oPrescitemVM.DoseCalculationDetails != null &&
      this.oBasicDetailsVM.oPrescitemVM.IsDoseCalcPerformed &&
      this.oBasicDetailsVM.oPrescitemVM.bFormViwerOpened
    ) {
      let oMsgBox: iMessageBox = new iMessageBox();
      oMsgBox.Title = 'Information - Lorenzo';
      oMsgBox.Height = 140;
      oMsgBox.Width = 350;
      oMsgBox.MessageButton = MessageBoxButton.OK;
      oMsgBox.IconType = MessageBoxType.Information;
      oMsgBox.Message = Resource.MedicationForm.DCAmendMsg;
      this.oBasicDetailsVM.oPrescitemVM.DoseCalculationDetails = null;
      this.oBasicDetailsVM.oPrescitemVM.IsDoseCalcPerformed = false;
      this.oBasicDetailsVM.oPrescitemVM.oDoseCalcDefault = null;
      if (this.oBasicDetailsVM.bIsAmend) {
        this.oBasicDetailsVM.oPrescitemVM.IsDoseCalcPerformedInAmend = true;
        this.oBasicDetailsVM.oPrescitemVM.IsDoseCalcInfo = false;
        this.oBasicDetailsVM.IsDoseCalcExist = false;
      }
      oMsgBox.Show();
    }
  }
}
export class TempDoseDetail {
  public LowerDose: number = 0;
  public UpperDose: number = 0;
  public DoseUOMValue: string;
  public DurationValue: number = 0;
  public DurationUOMValue: string;
  public FrequencyValue: string;
  public IsPRN: boolean = false;
  public ChangeDose: List<string[]>;
  public IsChangingDose: boolean = false;
  public InfusionRate: string;
  public InfusionUpperrate: string;
  public InfratenumeratoruomValue: string;
  public InfrateDenominatoruomValue: string;
}
export class ActualClerkingValues {
  public Dose: string;
  public UpperDose: string;
  public DoseUOM: CListItem;
  public DosageForm: CListItem;
  public Route: CListItem;
  public Frequency: CListItem;
  public AsRequired: boolean = false;
  public DoseType: CListItem;
  public InfusionType: CListItem;
  public Strength: CListItem;
  public LowConcentration: string;
  public UpperConcentration: string;
  public LowConcentrationUOM: CListItem;
  public UpperConcentrationUOM: CListItem;
  public InfRateNumeratorUom: CListItem;
  public InfRateDinominatorUom: CListItem;
  public VolumeUOM: CListItem;
  public BackgroundRateNumeratorUom: CListItem;
  public BackgroundRateDinominatorUom: CListItem;
  public BolusUOM: CListItem;
  public LockoutDuration: CListItem;
  public FluidFreetext: string;
  public Rate: string;
  public UpperRate: string;
  public FluidVolume: string;
  public BackgroundRate: string;
  public LockOutPeriod: string;
  public LockOutPeriodUOMOID: number = 0;
  public MaxDose: string;
  public FlowRateText: string;
  public TargetLowerSatRange: string;
  public TargetUpperSatRange: string;
  public Bolus: string;
  public ConcentrationFreeText: string;
  public Multidosedetail: ObservableCollection<MultipleDoseDetail>;
}
export class ScheduleDoseDtl {
  public FirstDose: string;
  public FirstDoseUom: string;
  public FirstScheduleDTTM: DateTime = DateTime.MinValue;
}
export class SequenceDetail extends ClonableViewModelBase {
  parentPrescriptionItemOID: number = 0;
  public get ParentPrescriptionItemOID(): number {
    return this.parentPrescriptionItemOID;
  }
  public set ParentPrescriptionItemOID(value: number) {
    this.parentPrescriptionItemOID = value;
  }
  _GroupSequenceNo: number = 0;
  public get GroupSequenceNo(): number {
    return this._GroupSequenceNo;
  }
  public set GroupSequenceNo(value: number) {
    this._GroupSequenceNo = value;
  }
  _ItemSequenceNo: number = 0;
  public get ItemSequenceNo(): number {
    return this._ItemSequenceNo;
  }
  public set ItemSequenceNo(value: number) {
    this._ItemSequenceNo = value;
  }
  private _TotalItemsInGroupSequence: number = 0;
  public get TotalItemsInGroupSequence(): number {
    return this._TotalItemsInGroupSequence;
  }
  public set TotalItemsInGroupSequence(value: number) {
    this._TotalItemsInGroupSequence = value;
  }
  private _CurrentItemSequenceNo: number = 0;
  public get CurrentItemSequenceNo(): number {
    return this._CurrentItemSequenceNo;
  }
  public set CurrentItemSequenceNo(value: number) {
    this._CurrentItemSequenceNo = value;
  }
  private _IsFirstItem: boolean = false;
  public get IsFirstItem(): boolean {
    return this._IsFirstItem;
  }
  public set IsFirstItem(value: boolean) {
    this._IsFirstItem = value;
  }
  private _IsLastItem: boolean = false;
  public get IsLastItem(): boolean {
    return this._IsLastItem;
  }
  public set IsLastItem(value: boolean) {
    this._IsLastItem = value;
  }
  _isSequentiallinkvisi: Visibility;
  public get IsSequentiallinkvisi(): Visibility {
    return this._isSequentiallinkvisi;
  }
  public set IsSequentiallinkvisi(value: Visibility) {
    if (this._isSequentiallinkvisi != value) {
      this._isSequentiallinkvisi = value;
      // super.NotifyPropertyChanged("IsSequentiallinkvisi");
    }
  }
  _prescriptionItemNumber: number = 0;
  public get PrescriptionItemNumber(): number {
    return this._prescriptionItemNumber;
  }
  public set PrescriptionItemNumber(value: number) {
    if (this._prescriptionItemNumber != value) {
      this._prescriptionItemNumber = value;
      // super.NotifyPropertyChanged("PrescriptionItemNumber");
    }
  }
  private _IsSequentialStartDTTMUpdated: boolean = false;
  public get IsSequentialStartDTTMUpdated(): boolean {
    return this._IsSequentialStartDTTMUpdated;
  }
  public set IsSequentialStartDTTMUpdated(value: boolean) {
    this._IsSequentialStartDTTMUpdated = value;
  }
  _IsAnyItemAdministeredInSeqGroup: number = 0;
  public get IsAnyItemAdministeredInSeqGroup(): number {
    return this._IsAnyItemAdministeredInSeqGroup;
  }
  public set IsAnyItemAdministeredInSeqGroup(value: number) {
    this._IsAnyItemAdministeredInSeqGroup = value;
  }
  _FreqDetail: IPPMAManagePrescSer.CResMsgGetAdministrationTimes;
  public get FreqDetail(): IPPMAManagePrescSer.CResMsgGetAdministrationTimes {
    return this._FreqDetail;
  }
  public set FreqDetail(
    value: IPPMAManagePrescSer.CResMsgGetAdministrationTimes
  ) {
    this._FreqDetail = value;
  }
}
export class OrderSetSequenceDetail {
  _OrderSetGropID: string;
  public get OrderSetGropID(): string {
    return this._OrderSetGropID;
  }
  public set OrderSetGropID(value: string) {
    this._OrderSetGropID = value;
  }
}

export enum EnumVals {
  CC_EXPJAN = 1,
  CC_EXPFEB = 2,
  CC_EXPMAR = 3,
  CC_EXPAPR = 4,
  CC_EXPMAY = 5,
  CC_EXPJUNE = 6,
  CC_EXPJULY = 7,
  CC_EXPAUG = 8,
  CC_EXPSEP = 9,
  CC_EXPOCT = 10,
  CC_EXPNOV = 11,
  CC_EXPDEC = 12,
}

export enum EnumMonthVals {
  CC_EXPJAN = 1,
  CC_EXPFEB = 2,
  CC_EXPMAR = 3,
  CC_EXPAPR = 4,
  CC_EXPMAY = 5,
  CC_EXPJUNE = 6,
  CC_EXPJULY = 7,
  CC_EXPAUG = 8,
  CC_EXPSEP = 9,
  CC_EXPOCT = 10,
  CC_EXPNOV = 11,
  CC_EXPDEC = 12,
}

export enum ePresRuleExecStatus {
  Started="Started",
  Completed="Completed",
}
